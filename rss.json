[{"title":"如何评价《悠哉日常大王剧场版：假期活动》？","date":"2022-05-06 13:44:00","description":"\n<p data-pid=\"B1dpKxbq\">这是一个很久就想写的题目，但最终还是拖到现如今（拖延症晚期）。</p>\n<p data-pid=\"Ea-07FpN\">其实草稿早就有了，但就是不想动笔。</p>\n<p data-pid=\"82KFnKWB\">一二三季都写过评价，所以Vacation也不应该缺少。</p>\n<p data-pid=\"D2Sj4RO8\">“今天又是一个晴天。”</p>\n<hr>\n<p data-pid=\"3Q-6uv_4\">冲绳之旅，是漫画里较少的非一两话结束的内容，在一个一话即能结束一个小故事的超短篇单元剧中着实少见。</p>\n<p data-pid=\"3zsHX1rH\">这次剧版改编自漫画46话-51话，位于单行本第六卷和第七卷，共6话长度。说实话并不长，每话也不到20页</p>\n<p data-pid=\"Mf3ySLtD\">起因于一次商场购物，小乡村里很小，要进货便要到城市商场去。而后商场购物便有了抽奖，而欧皇发作的小哥抽中了特定奖——冲绳四人游。</p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-979f8c929832c1ff647dd8593c36e849_720w.png?source=b1748391?rss\" data-caption=\"四人冲绳旅行\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-979f8c929832c1ff647dd8593c36e849\"></p>\n<p></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cff2f4a7c21594dc61fd28830e0b5b5f_720w.png?source=b1748391?rss\" data-caption=\"夏海和小鞠之惊讶\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-cff2f4a7c21594dc61fd28830e0b5b5f\"></p>\n<p data-pid=\"gKKSRSXM\">此为锲子。</p>\n<p data-pid=\"CyjpLGuN\">而谈到剧场版，那必定会讲到一个OVA，该OVA收录于悠哉日常大王第一季的CD中，里面亦是讲到关于冲绳旅行，与剧场版互为补充，又互为省略。</p>\n<p data-pid=\"AyrxqTjF\">二者都对漫画做出了相对的改编，不过改编所侧重点有较大不同。</p>\n<p data-pid=\"OG7grNcZ\">该OVA分为两部分，一部分是对旅行的向往和处理旅行相关事务，另一部分莲华和旅途的担忧。旅行只作为一个背景，所表达的是莲华的童心，以及对未来的不确定性。</p>\n<p data-pid=\"aYOzf3Me\">可以说，这部分剧情表面上与原作关系不大，却有着相同的关联，即人物及其环境改变之后，悠哉日常大王是否还能继续悠哉下去，是否还可做一个无忧无虑的乡下人。因为此次旅行是她们首次离开这个地方，夏海和小鞠自不用说，已是青少年，要说能有多大的变化，也是不可能的，而莲华也没有到那个年龄去感受这个变化。</p>\n<p data-pid=\"jkueyA6m\">“去了冲绳之后，人生观会改变吗”，副食店老板让莲华产生如此疑问。</p>\n<p></p>\n<p><img src=\"https://pic1.zhimg.com/v2-237198a8a8fe2742f44d95b880cbf95b_720w.png?source=b1748391?rss\" data-caption=\"此处有翻译错误，应当是人生观\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-237198a8a8fe2742f44d95b880cbf95b\"></p>\n<p data-pid=\"f4Qc4hLw\">去了冲绳之后，人生观就会改变。副食店老板娘所说的人生观会改变，所指即见了更大的世界之后，见到了冲绳景色，会对人生以及世界的看法有所改变。但莲华所想的是，改变之后便再也回不来，或者在内心深处恐惧着改变。</p>\n<p data-pid=\"jp358T0w\">而后莲华和小哥在商店中又继续沉默对视（说实话，我至今也不明白为什么会有这个对视，上次对视是小哥在吃着草，但这次实在是不知为何了）</p>\n<p></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dd221d2b4e293853b518330a5189ed76_720w.png?source=b1748391?rss\" data-caption=\"迷之对视\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-dd221d2b4e293853b518330a5189ed76\"></p>\n<p data-pid=\"78XyCZJR\">最后莲华的担忧被她姐一句话解决了，小学生是不会改变的。\n</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b48372e0c90e4acf9dcb318a7923ee7f_720w.png?source=b1748391?rss\" data-caption=\"眯眯眼一穗\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-b48372e0c90e4acf9dcb318a7923ee7f\"></p>\n<p data-pid=\"bv3fY-dv\">小学生是不会改变，所以可以心情享受这个旅途，于是便有了莲华和家乡的告别。</p>\n<p data-pid=\"IY-sIFcn\">夕阳下金黄色日光，蝉呜，安静的背景乐，莲华在四处奔跑，在和家乡道别。\n</p>\n<p><img src=\"https://pic3.zhimg.com/v2-516b4552992e5db126833cd6c1b8f815_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-516b4552992e5db126833cd6c1b8f815\"></p>\n<p></p>\n<p><img src=\"https://pic2.zhimg.com/v2-00ac05bc8bb1c79e68f1904959622223_720w.png?source=b1748391?rss\" data-caption=\"向日葵\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-00ac05bc8bb1c79e68f1904959622223\"></p>\n<p data-pid=\"_qfSaQzC\">莲华的乡土之情，以及那种源自心中的爱。再配以缓慢静谧的背景音乐，我觉得是悠哉里第二催泪的一段镜头。</p>\n<hr>\n<p data-pid=\"GmAlSmfK\">时隔四年后，剧场版上映。四年前OVA里所莲华所说的“我会很快回来的”，某种程度而言，确实也没有错，毕竟在15年已经《悠哉》第二季了。</p>\n<p data-pid=\"v85UEHPw\">就票房而言，大约是一亿日元，对于悠哉日常大王而言，一部偏冷门的动画而言，成绩也算上可以了，21年了出了最后一季，最终和漫画几乎同一时间完结，完美落幕了。</p>\n<p data-pid=\"70vDHKr7\">如果说OVA是旅途前的准备，那么此剧场版便是旅途。\n</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a66a080bc7f4a7dbf7e5457041d181d_720w.png?source=b1748391?rss\" data-caption=\"Image\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-5a66a080bc7f4a7dbf7e5457041d181d\"></p>\n<p data-pid=\"WuqwQhtm\">依旧是熟悉的银链制作，川面真也监督，配音之类的相关相息也没有变。只是当时配音是夏海CV佐仓配音时大约是感冒了，导致声线有些变化，而且莲华的配音小岩井小鸟，直观来听，嗓子捏着感越来越重了，就是能明显感觉小岩井在吃力地发出莲华那种小孩音，感觉在捏着嗓子说话。相较于第一季而言，明显不够自然，能很明显地感受到捏着嗓子说话，并且有时还会有本音的出现。</p>\n<p data-pid=\"aJtY_pQh\">剧场版中大致情节都按照漫画改编，当然，6话漫画长度撑不起一个小时的剧场版，剧场版中新设计了一个人物加进去。</p>\n<p data-pid=\"wqKWK0Dt\">葵，11岁，中学一年级在读，是夏海的反面。众人所住民宿老板家女儿，懂事、能干，一个从小便要做各种事的，比较典型的一般人家的孩子（也许是更像是农村孩子？虽然那里的冲绳也确实是农村）。</p>\n<p data-pid=\"JrE7IcIm\">从小要做许多事，在一个景区饭店中，帮母亲打扫屋子、执行客人。本该在最好的年华享受自己的青少年时期，最应该释放自身天性的时期，成为了一个为家里人打工的员工。当她们一行人用着自己（葵）与夏海做对比时，葵正展示着自己的微笑——职业性假笑。</p>\n<p data-pid=\"MTeGCQHo\">她有个打羽毛球的爱好，也只能在学校里和朋友一起打，在家里只能对着墙打，还要被父母（虽然剧中没有父，减少男性的存在）打压（怕打破了墙）。</p>\n<p data-pid=\"jPz5lNp1\">第二天晚上，当葵前往水泥地打羽毛球之际，她母亲来找她，以为她在打羽毛球（确实也是），刚想翻脸，可以发现客人在场的时候，就变为笑脸了，真的可能会伤心吧，如果我是葵的话。</p>\n<p data-pid=\"1CS_FYNt\">懂事的背后，我更多是心疼吧。夏海三天不打上房揭瓦，从小除了上学就是在玩，不用做农活，家务也很少做。但自始自终都活得很轻松，也生活在一个较为富裕的家庭。相较而言，那里更像是一个世外桃源，与世隔绝，连上网连手机信号都困难，“无忧无虑”这一词便是最好的形容。</p>\n<p data-pid=\"I2SVaIpd\">所以夏海可以尽情皮，小鞠可以按心情发展自己的爱好，小鞠可以这么不成熟，因为他们生活在一个不存在压力并且也充满爱的地方。在这里地方里，她们有资格任性，也有资格“不懂事”。</p>\n<p data-pid=\"aaovdLrA\">不过既然是夏海的反面，所以当然要她们成为好友，以及最后的不舍与分别。</p>\n<p data-pid=\"Z594xj34\">扯回来，剧场版剧情简单，结构简单、清晰。</p>\n<p data-pid=\"3_v6x8bk\">主题是玩，开心，必然是占据着大部分。要展现其风景，必然要有其高质量画面，放在TV动画里可以难以实现，但在剧场版中有着较为充足的工期与预算，一切都有了可能。</p>\n<p data-pid=\"382FEEHe\">用句俗话来讲，便是“随便截张图都能当背景壁纸”。</p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-6b60b24bc2ae31bc9010cc5560c3b5b0_720w.png?source=b1748391?rss\" data-caption=\"星空\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-6b60b24bc2ae31bc9010cc5560c3b5b0\"></p>\n<p></p>\n<p><img src=\"https://pic2.zhimg.com/v2-73309258498dc70461c1c79eb80d765b_720w.png?source=b1748391?rss\" data-caption=\"瓶子\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-73309258498dc70461c1c79eb80d765b\"></p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-025c22e7253014fa8dab00a9a25a0c73_720w.png?source=b1748391?rss\" data-caption=\"海\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-025c22e7253014fa8dab00a9a25a0c73\"></p>\n<p data-pid=\"ssY7FBhO\">一群人在暑假时，中了大奖，冲绳四人三日游，也与他人一同合钱（这样就算是半价旅行了）前往冲绳玩。整部剧场版分为中奖出行、游玩冲绳、与葵建议友情，结束回家四部分。</p>\n<p data-pid=\"8Tbl8TbI\">着重描写的游玩与建立感情那部分，游玩便玩一些当地特色项目，潜水和滑船，中间穿插一些小段子，有些走马观花的感觉。而后面的和葵一起玩，则找回了看TV的感觉，尤其是夜晚上的星空，那一段应该是参考了第二季中第六集的萤火虫情节。当时一群人满怀期待要看烟花，却只看到一只降落的小熊，</p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-4d16463b18e0a1467e3cf73844f9473d_720w.png?source=b1748391?rss\" data-caption=\"其实我觉得降落伞小熊也挺可爱的\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-4d16463b18e0a1467e3cf73844f9473d\"></p>\n<p data-pid=\"oK4yzE7v\">当时满屏都是失望之情，而后老师带她们去了一处能看萤火虫的地方</p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-40553da0ef15c1dabd363de3abd2f611_720w.png?source=b1748391?rss\" data-caption=\"夜晚、星空、水\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-40553da0ef15c1dabd363de3abd2f611\"></p>\n<p data-pid=\"F8Y0Ks6o\">同样是夏日，同样是在情绪低落之时（她们明天就要离开冲绳所以情绪低落），都由一个“土著”带领她们去水边，在TV里是萤火虫的点缀，而这里是夜火虫，都用了同一风格的背景音乐，最后都是在玩水中结束。</p>\n<p data-pid=\"h9t2WmH5\">同样的，场景都很美，万里无云的星空，水的倒影，还有发光虫的点缀，以及在星空下玩水的小孩，构成了一幅幅绝美的画面。\n</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a65000397c6024d138fed57e3613a000_720w.png?source=b1748391?rss\" data-caption=\"夜光虫的大海\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-a65000397c6024d138fed57e3613a000\"></p>\n<p data-pid=\"WBcm7vju\">天下无不散的宴席，这句话谁都懂，但分别时总是难免伤感。也不能因为离别时是伤心的，就觉得当时所做是毫无意义的。</p>\n<p data-pid=\"ILP-CpiA\">正是因为结束是不舍的，所以整个旅途才是非常有意义的，才是会值得记怀的，值得去想念的。下次重逢时才会更开心，更值得珍惜。</p>\n<p data-pid=\"bjNvQ9BA\">无论是剧中的夏海一行人，还是在旅馆中的葵，亦或者是观众，都是如此。</p>\n<hr>\n<p data-pid=\"dyERJFyK\">在初段疫情期间，在家上网课时，各方面都感觉有些焦虑。这部剧场版成为了我的背景音乐，无论是写作业还是做其他什么事时，总要听着这部动画，听着她们说话，以及听着背景音乐，似乎才会找到一些安心感，炎炎夏日里似乎也有了一丝清凉，当然，如果有个西瓜那就更好了。</p>\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-e422dd267fdd4832aa29e024dc5a67db_720w.png?source=b1748391?rss\" data-caption=\"追番报告\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-e422dd267fdd4832aa29e024dc5a67db\"></p>\n<p data-pid=\"re2yw79M\">不知道是动画的魅力，还是我对这部动画的喜欢，或许是前者的可能性更大些。</p>\n<p data-pid=\"L7oafuL0\">一部对我而言，是是非常优秀的动画。</p>\n<p data-pid=\"jsaaC2NW\">一如即往的悠哉风格，画面细节多，偶而为之的搞笑情节，不刻意的煽情，一切都是最好的《悠哉日常大王》。</p>\n<p data-pid=\"boi3KEaD\">当初在OVA中，莲华的承诺“我还会回来的”，在剧场版的结尾或许已经回应了。</p>\n<p></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9e76264ea5aa985d9947337b4f809cb9_720w.png?source=b1748391?rss\" data-caption=\"我回来了\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-9e76264ea5aa985d9947337b4f809cb9\"></p>\n<blockquote data-pid=\"7b2d6a7g\"><p data-pid=\"BQJ06-K-\">本文使用 <a href=\"https://zhuanlan.zhihu.com/p/106057556\" class=\"internal\">Zhihu On VSCode</a> 创作并发布</p></blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jinl1874?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">道理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/314069440/answer/2457190421?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/522971458?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《悠哉日常大王》动画第三季的剧情设计和走向是什么？</a><br><a href=\"http://www.zhihu.com/question/528765574?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《悠哉日常大王》动画中有哪些很温馨的剧情设计？</a><br>\n","link":"http://www.zhihu.com/question/314069440/answer/2457190421?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价动画《鸭子侦探》及主人公梅拉德小姐？","date":"2022-05-06 13:43:38","description":"\n<blockquote data-pid=\"anjKYRTX\">\"Mysteries are so important for children because they want to know why they're here and what's going on between Mommy and Daddy,\"  Mr. Quackenbush said in a 2020 video interview. <br>\"They are the first detectives.\"</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-071b2831c1cdafa5c2f29241f5e8e7fc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p data-pid=\"sNaysflG\">称之为童年阴影的一部动画，于我而言则是一部首次观看的动画，可能是我童年来得相较晚上一些。至于为何会去寻找这一部动画来看，因为其推理元素以及童年阴影吸引到我。有时候，将恐怖情节与少儿动画结合起来，某种意义上而言更值得去看。</p>\n<p data-pid=\"7g8ojO8y\">花上些许日子看完之后，与我想象中有些许不同。在我看到其相关评论时，必定带有童年阴影、恐怖以及阴森等字眼，而在QQ聊天时，亦会有人发梅小姐（鸭子侦探主角）表情包，</p>\n<p><img src=\"https://pic3.zhimg.com/v2-41cde3dc7b4ff7796ab8ed8774606c17_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1438\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-41cde3dc7b4ff7796ab8ed8774606c17\" data-watermark-src=\"v2-4593d6f433c3d71283190d41d11270b2\" data-private-watermark-src=\"v2-ab1625b3cb75752b885c15bc1e8b9b78\"></p>\n<p data-pid=\"j_KLz7F5\">发出去后，会有人称看到些图便会想起以前看动画时阴森的音乐与其相对应的恐惧。</p>\n<p data-pid=\"TaPKgYUV\">因此在看之前存在了对《鸭子侦探》内容错判，并在想象中过分夸大了其恐怖内容。恐怖加上其推理题材，再结合另一个死神小学生，便自然而然想到其会拥有许多凶杀案。不过事实却正好与其相反，该动画并无任何凶杀案，恐怖之处则在其它地方。若以一句话评论之，则是一部有些许恐怖却又不失水准的少儿推理动画，而其恐怖亦是点到为止。</p>\n<h2>背景</h2>\n<p data-pid=\"SsYtfppi\">《鸭子侦探》，原名为 <i>A Miss Mallard Mystery</i>，其原作者是美国儿童文字作家罗伯特·夸肯布什（Robert Quackenbush）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-642114a2d695ccb8c345f1880f15ed79_720w.jpg?source=b1748391?rss\" data-caption=\"Robert Quackenbush\" data-size=\"normal\" data-rawwidth=\"404\" data-rawheight=\"650\" data-watermark=\"watermark\" data-original-src=\"v2-642114a2d695ccb8c345f1880f15ed79\" data-watermark-src=\"v2-87341696a2e636843af0818ce3104315\" data-private-watermark-src=\"v2-f339390fea73c3b06a78a7d213d90e61\"></p>\n<p data-pid=\"Nn5avrRe\">名字很陌生，在国内亦很冷门，若非《鸭子侦探》这部作品，我想我是接触不到他。罗伯特出生于1929年7月23日，而在今年(2021)5月17日去世，享年93岁。</p>\n<p data-pid=\"LopFqwYV\">而他作为一个儿童文学作者，喜好推理题材，而其作品，正如他所言，是为儿童所写的推理。由于其并无在国内引进，亦不存在汉化组汉化小说，便是连其原版小说亦未曾找到，所以无从知晓其具体内容是如何。不过就《鸭子侦探》来看，其内容确实是符合儿童文学。</p>\n<p data-pid=\"zuPpSLkS\">至于为何喜欢推理作品，B站上有一个UP主驼哥和驼嫂，她在去年的时候曾与原作者线上连线过，并且采访他许多问题，随后将其原视频<sup data-text=\"91岁《鸭子侦探》作者分享创作过程 / 背景知识 / 彩蛋花絮。你想知道的都在这里啦～\" data-url=\"https://www.bilibili.com/video/BV1Pf4y1i7kh\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>发到网站上，其中她问的第一个问题是</p>\n<blockquote data-pid=\"JaAlfpfw\">Q：我注意到您写了很多推理故事，不仅有《鸭子侦探》系列，还有《鼹鼠侦探》系列。<br>A：推理故事对小朋友是很重要的，因为他们很想知道他们为什么在这里，爸爸妈妈为什么有矛盾了，为什么有些事情不跟我说，很多很多这些事情。他们是这些事情里的头号侦探，所以我才能给他们写这些推理故事。我还给非常非常小的小朋友写推理故事，那套丛书叫做 <i>Sherlock chick</i> 系列，是非常欢迎的一套书。<sup data-text=\"视频 0:20 - 0:54\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>\n</blockquote>\n<p data-pid=\"vEntYiqP\">小孩子拥有非常强盛的求知欲，他们想知道很多事情，而推理小说，尤其是易懂的推理小说，对小孩子来讲是非常趣。</p>\n<p data-pid=\"xENVokkd\">同时作者亦创造出超过200本作品，其知名角色有亨利鸭子（Henry the Duck），摩尔侦探（Detective Mole），以及本动画角色梅小姐（Miss Mallard），这些都与推理相关。</p>\n<blockquote data-pid=\"Gs7PQWjP\"> He authored 110 books and illustrated 60 more by 1999.[2] He is noted for creating the characters Henry the Duck, Detective Mole, and Miss Mallard. <br> Quackenbush authored and illustrated over 200 books. He created the characters Detective Mole, Miss Mallard, and Pete Pack Rat.[3][4] His most widely-known book, Henry's Awful Mistake, was published by Parents Magazine Press in 1980. It ultimately featured in almost 900 US and Canadian libraries.<sup data-text=\"Robert Quackenbush\" data-url=\"https://en.wikipedia.org/wiki/Robert_Quackenbush\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>\n</blockquote>\n<p data-pid=\"dCvhYCya\">而<i>A Miss Mallard Mystery </i>在被改编成动画，以及2000年在中国东方电视台以及加拿大的Teletoon首次播出，其中国内制作方为上海美术电影制片厂。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2397be64371a2656280e528f8cea6177_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p data-pid=\"JweanXhZ\">上海美术电影制片厂，这个名字不用大说，便已知道其不简单，中国最富盛名的动画制作厂，曾产出大量精品动画，其出产的《大闹天宫》《哪吒闹海》依旧是如今中国动画无可逾越的高峰。不过九十年代以后，产量大幅下降，并且其艺术水准亦大幅不如以前。但瘦死的骆驼比马大，二十世纪末尾，上美实力尚存。就以质量而言，无论是音乐、画面还是镜头语言，《鸭子侦探》是在其优秀水准以上的。</p>\n<p data-pid=\"AOHVPPCi\">同时，原作者亦参与了动画制作。</p>\n<blockquote data-pid=\"QtaUTv8r\">讲回《快车奇案》这本书，当我们制作动画片时，我们总是会先有一份脚本。我会把觉得需要改动的地方写在上面，这个就是我做的记录，根据脚本，我们会制作一个故事板。然后再参考我画的插图，给故事板配上图片，绘画的工作是由中国的上海美术电影制片厂来做的。他们会用我画的图片为基础，用电脑软件让这些角色动起来，特别有意思。然后我再在故事板上写上我的修改意见。然后这个故事板会被交给动画师，动画师就根据手稿把整个动画制作出来。鸭子侦探系列就是这样被做到动画片的，每一本书都被做成了动画，并且在全世界70个国家播放。<sup data-text=\"视频 7:05 - 8:15\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>\n</blockquote>\n<p data-pid=\"kt00qQQt\">原作者主要负责人设原图，而采访提到故事板，根据其英文 <i>Storyboard ，指的</i>是分镜稿。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b2133af0868438f7f1a32ac6b1e34590_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"698\" data-watermark=\"watermark\" data-original-src=\"v2-b2133af0868438f7f1a32ac6b1e34590\" data-watermark-src=\"v2-aedecdd89f1e4238dc20d3fe59198475\" data-private-watermark-src=\"v2-b38b7605666eb506ba2480cb583d1b13\"></p>\n<p data-pid=\"4vs37S_o\">所以，其原作者主要是负责提供原设，以及提供修改脚本和分镜稿的建议。而上美厂则负责手绘、分镜等。</p>\n<p data-pid=\"hdQH_1NV\">原作一共十七本，而改编成动画后一共有二十六集，曾经有人传闻在DVD碟片中有五十多集，当然，这不是可能。不过根据我多年购买DVD的经验，很大可能是其盗版碟片商，为追求更多集数，将一集标作两集，从而五十多集便已出来。遥想当年，我曾买盗版火影DVD买到一千多集，现如今仍不知如何标上其。</p>\n<h2>设计</h2>\n<p data-pid=\"aXsReuXu\"><b>剧情</b></p>\n<p data-pid=\"2z22Yznn\">整部动画形式为推理单元剧，以集为单位，每集都是一个小故事，主要角色为世界最著名的私家侦探梅小姐与其侄子瑞士警署探长维勒。故事之或有些联系，不过联系不大，基本都是独立存在，即使是无序观看，亦无大碍。</p>\n<p data-pid=\"vOa52Uj2\">每一集的结构很简单，分为四大部分：</p>\n<p data-pid=\"rMwlTDNA\">起：梅小姐和维勒一同前往某个地方，起因不尽相同，或是维勒与其姑妈一同度假，或者维勒与其姑妈一同收小部分情况是维勒独自侦探案子而后姑妈亦恰巧在同一地方；</p>\n<p data-pid=\"KoHkeO7K\">承：梅小姐和维勒以不同原因卷入不同离奇事件；</p>\n<p data-pid=\"TxtOyxDu\">转：梅小姐和维勒接触到案件相关人员，并且得到许多相关线索；</p>\n<p data-pid=\"yKAxEAVk\">合：所有相关人员回到案发现场或其它能聚在一起的地方，由梅小姐分析案子，破案案子，找到作案鸭子，再由维勒抓住逃跑犯案鸭子。</p>\n<p data-pid=\"XY170FRm\">以第一集《丛林冒险》为例子。</p>\n<p data-pid=\"SmuJLCjs\">梅小姐与维勒一同前往里约热内卢，因为科学家爱德博士邀请他们来参加巴西狂欢节。途中维勒不断说道，希望不要再碰到棘手案子，梅小姐边织毛衣边说不会的不会的。</p>\n<p data-pid=\"TCKckHfl\">而到了博士家中，整个家长满植物，并没有发现博士，只有一个无名小鸭在此整理东西，不过被梅小姐吓跑了。而后梅小姐便前往午餐招待会看到了爱德博士，爱德博士正在展现一个新发明——生长素，滴在植物上便可使其迅速生长。爱德博士意在拯救亚马逊雨林，不过却台下两个鸭巴佩和鲁迪质疑。之后被一群前来跳桑巴舞的鸭带走。</p>\n<p data-pid=\"mB8m6Gn8\">而后，梅小姐发现那瓶生长素不见了，并看到主席在打一个无法接通的电话，怀疑爱德博士是被人绑架走了。还发现那两个鸭是最大的协会的最大赞助商，而后经过一番丛大冒险，与维勒一起在雨林深处找到爱德博士。</p>\n<p data-pid=\"TzCFrU31\">他们与爱德博士一同回到冷餐招待会所在地，通过一通分析，指出是拯救亚马逊雨林协会主席杜克，商人巴佩和鲁迪一同策划。商人贿赂主席，并将博士家里所有东西破坏，而后主席将生长素藏在那个电话机上，不过梅小姐之前打电话给警察，让警察封锁整栋大楼，导致他们拿不走生长素。最后，是由维勒抓住三个想逃跑的鸭子，梅小姐当选新主席，在一群桑巴舞中结束了本集。</p>\n<p data-pid=\"POTSz8nJ\">这一集推理内容不多，在两个点。</p>\n<p data-pid=\"pxS_UAHi\">一点通过赞助商确定了那三个人是同伙，二是通过主席在那里伪装成打电话确定生长素就在电话机处。同时还保存下证据，如字迹对比以及鸭爪（指纹）。基本通过再三个点，便可确定谁是作案人，不过却没有交待为何商人想要破坏雨林。</p>\n<p data-pid=\"Q3rxJfXl\">那我便试着发散一下，止增一乐罢。</p>\n<p data-pid=\"_EowLqA5\">商人，为资本具像体，即资本家，资本家为了追求利益最大化，进而选择去破坏雨林……  </p>\n<p data-pid=\"jJGBN09E\">好吧，实在是没意思。</p>\n<p data-pid=\"pEAvSks8\">一集不长不短，刚好是一个完整的推理故事。</p>\n<p data-pid=\"yJZ9fDEM\"><b>题材</b></p>\n<p data-pid=\"TT2pqyn5\">题材，除了凶杀案，基本都有涉及到。但其问题是，凶杀案在推理作品中占了极大比例，无论是欧美的各大作家阿加莎和奎恩等，还是日本的本格派和社会派，亦或着是《名侦探柯南》（这个应该算是推理作品吧）《金田一少年事件簿》这些动漫画，以致于在大众印象中，推理与杀人是紧密相连的。非凶杀案的推理作品少之又少，其理由不必多说，凶杀能给人带来更大的刺激感，更容易吸引读者，在诡计设计上亦会有更多的自由，更大的空间。</p>\n<p data-pid=\"lL-FtdLf\">与这些推理存在对立的，便是类似于《冰菓》这些的日常推理，说到日常推理，便推荐一本日本的轻小说《赤崎是在瞎扯淡》。日常推理，即是在日常生活中产生谜团，从而去推理解开。</p>\n<p data-pid=\"qGpjGzWN\">《鸭子侦探》虽然没有凶杀案，不过其大部分题材都基本与日常无关，属于那种非凶杀案的古典推理作品。</p>\n<p data-pid=\"Zh01ySCh\">绑架、偷窃、抢劫、遗产分配、欺骗、为情所骗、政治斗争，这些都是鸭子侦探的题材，大大小小的题材都有涉及到。题材并无特殊之处，而其特殊在于，《鸭子侦探》将不同地点与案子相结合。每一集的地点都不一样，梅小姐的足迹遍布六大洲（亚非欧澳北美南美），除南极州外，其它地方都已去过。而每当其路过一地方，亦会展现当地的名胜，其案子亦会带有当地的一些特色。</p>\n<p data-pid=\"h4twyKnT\">如《丛林冒险》，便是如此，里约热带雨林和桑巴舞，其案件关键亦在能使植物快速生长的生长素。</p>\n<p data-pid=\"DbGEfZAK\">《英伦谍影》中在伦敦，见到大笨钟，</p>\n<p data-pid=\"fHskenfx\">去中美州，看玛雅文明，去青藏高原爬珠峰，去澳大利亚看大保礁，去阿拉斯加滑雪，去美洲西部骑马，去埃及看金字塔，去荷兰看大风车和郁金花，去好莱坞看拍电影……</p>\n<p data-pid=\"gId51tjW\">得益于作者喜欢到处旅游，每次去旅游便喜欢将那里的事与风景写下书中，除了香港。原作者是先是写了书，而后再去的香港。</p>\n<blockquote data-pid=\"hj-nqHM4\">我在写那本书的时候还没有去过香港，那本书是《蹊跷的车祸》，因为我读到，中国很多地方已经没有黄包车了，但在香港还是有的，所以就把故事设定在那里。香港的风土人情，我都是通过读书学来的。我甚至学习了他们的渡船时刻表，我也得知了香港有水上餐厅，我写进书的细节，就好像我真的去过香港一样。<sup data-text=\"视频 8:46 - 9:17\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup>\n</blockquote>\n<p data-pid=\"n7McM8qs\">说真的，如若我是幼年时期看到这部动画，亦会想去动画里曾出现过的地方，看这部动画，同样也能<b>发现更大的世界</b>。</p>\n<p data-pid=\"jnEhcni2\">除了每次去不同地方以外，原作者还会给梅小姐设计不同的衣服，根据所去之地设计而成。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0ed3869ba6ff4088a3ac0773862b977b_720w.jpg?source=b1748391?rss\" data-caption=\"里约\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-0ed3869ba6ff4088a3ac0773862b977b\" data-watermark-src=\"v2-600821b390eab6800081f609e493a2dc\" data-private-watermark-src=\"v2-fca4c13058cb2b57ccde3eb075007534\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d41b54a91d33c465ecfdd3da0d139459_720w.jpg?source=b1748391?rss\" data-caption=\"香港\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-d41b54a91d33c465ecfdd3da0d139459\" data-watermark-src=\"v2-84c82608b959ae6386ef5f266f4f416a\" data-private-watermark-src=\"v2-70fa258e91e7a2313e1fa1ac0a682f18\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-cfb8b1797c6641bcea69b0ae9f64aaa7_720w.jpg?source=b1748391?rss\" data-caption=\"澳大利亚\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-cfb8b1797c6641bcea69b0ae9f64aaa7\" data-watermark-src=\"v2-de23f82ebb72d31424c6bab58581047d\" data-private-watermark-src=\"v2-f9315e85d4d4e794c3099701a4b0248c\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-dc4b7bcfedbd126eae1a4e398be166db_720w.jpg?source=b1748391?rss\" data-caption=\"阿拉斯加\" data-size=\"normal\" data-rawwidth=\"1434\" data-rawheight=\"1047\" data-watermark=\"watermark\" data-original-src=\"v2-dc4b7bcfedbd126eae1a4e398be166db\" data-watermark-src=\"v2-a0a8cd203a53e52be37b773041ac958d\" data-private-watermark-src=\"v2-dfe56ed71c74717991d2cd2982eb2d2b\"></p>\n<p data-pid=\"9tPSd7uD\">很用心。</p>\n<p data-pid=\"ht2_gcAp\"><b>趣味</b></p>\n<p data-pid=\"W7wWVG7T\">同时，本部作品亦存在着大量的趣味性情节，并非刻意去搞笑，而是在冒险/破案中带有一些小幽默。</p>\n<p data-pid=\"7wJSuFW-\">比如鸭子梗，可以说玩了无数遍。每当鸭子将要或者是已经掉入水中时，有鸭子会说我们要被淹死了，而姑妈总是会提醒到，“别胡说，我们可是鸭子”。</p>\n<p data-pid=\"bNHKegl7\">“干得好，维勒。”梅姑妈如此说道。</p>\n<p data-pid=\"T23ETdUf\">维勒是个探长，在古典推理作品中本应该是个丑角，为衬托侦探所存在的丑角。而虽然维勒确实是用来凸显梅小姐的侦探能力，却非丑角，维勒亦存在自身魅力，这一点在后面的人物篇展开讲。</p>\n<p data-pid=\"Y1CNh2Z3\">维勒所有的操作，在其姑妈眼中，都能化腐朽为神奇，经常能为其提供新线索，还有很多无意之为亦是能救人于水火之中，如OP这段剧情一般。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ec7aca51b001e656ff0433e59df19743_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-ec7aca51b001e656ff0433e59df19743\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"YSU-nf0Z\">总而言之，维勒是一名福将，在其身边都会将其霉运去掉，不过得除了他每次度假都能碰上案子。</p>\n<p data-pid=\"Y5jR58ao\">同时，还有个每次出现在案发现场，却总是破不到案的光头总探长，亦是唯一一个不知道其姑妈身份之人，同时亦是非常倒霉之人，是《鸭子侦探》中的谐星。</p>\n<p data-pid=\"OzsDW0xY\"><b>推理</b></p>\n<p data-pid=\"JEo7lZgy\">虽无凶杀案，不过古典推理元素却一点都不缺。</p>\n<p data-pid=\"v3FQd-qJ\">有这么一个推理小说十诫，是由神父兼推理小说家隆纳德‧诺克斯（Ronald A. Knox）提出来。</p>\n<blockquote data-pid=\"-Jq_FTVf\">1 The criminal must  be someone mentioned in the early part of the story, but must not be  anyone whose thoughts the reader has been allowed to follow.<br>罪犯必须是故事开始时出现过的人，但不得是读者可以追踪其思想的人。<br>2 All supernatural or preternatural agencies are ruled out as a matter of course.<br>侦探不能用超自然的或怪异的侦探方法<br>3 Not more than one secret room or passage is allowable.<br>犯罪现场不能有超过一个秘密房间或通道<br>4 No hitherto undiscovered poisons may be used, nor any appliance which will need a long scientific explanation at the end.<br>作案时候，不能使用尚未发明的毒药，或需要进行深奥的科学解释的装置<br>5 No Chinaman must figure in the story.<br>不准有中国人出现在故事里(<sup data-text=\"备注 这一条正是当时对中国人的种族歧视的反映。诺克斯解释道：“我看不出让一个中国人的出现毁坏一个推理小说的任何意义。如果你在书店里翻一本没听说过的书，突然看见书里提到眼睛又窄又小的中国佬，放下这本书；它肯定很烂。\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"6\">[6]</sup>)<br>6 No accident must ever help the detective, nor must he ever have an unaccountable intuition which proves to be right.<br>侦探不得用偶然事件或不负责任的直觉来侦破案件<br>7 The detective must not himself commit the crime.<br>侦探不得成为罪犯<br>8 The detective must not light on any clues which are not instantly produced for the inspection of the reader.<br>侦探不得根据小说中未向读者提示过的线索破案<br>9  The stupid friend of the detective, the Watson, must not conceal any  thoughts which pass through his mind; his intelligence must be slightly,  but very slightly, below that of the average reader.<br>侦探的笨蛋朋友，比如华生，必须将其判断毫无保留地告诉读者，此人的智力须轻微低于读者的平均水平。<br>10 Twin brothers, and doubles generally, must not appear unless we have been duly prepared for them.<br>小说中如果有双胞胎或长相极为相似的人时，必须提前告诉读者。<br><sup data-text=\"推理小说十诫\" data-url=\"https://baike.baidu.com/item/%E6%8E%A8%E7%90%86%E5%B0%8F%E8%AF%B4%E5%8D%81%E8%AF%AB/2940299\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"7\">[7]</sup>\n</blockquote>\n<p data-pid=\"CW6yD9n8\">这些准则有些已然过时，死板遵守已非必要。比如第五条，不准有中国人出现在故事里，于现在而言，是毫无必要的，还有第三条，秘道在某些作品中已经默认，亦不必过于在意。如绫辻行人的馆系列，每个馆都默认有暗道。</p>\n<p data-pid=\"5El69FLc\">除了以上这两条外，《鸭子侦探》几乎全部都遵守这些守则。当然，其它守则不必算得如此清楚，其中最重要的，自然是第一条与第八条——犯人在前面所出场过，所有的线索均向读者透露。</p>\n<p data-pid=\"uEgGdkyY\">事实上，这是原作者，或者说是很多本格推理作家喜欢的一种方式，即与读者一起挑战。其中岛田庄司还特喜欢在书本正文正式挑战。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-935f98706c285110d57dd2fcf9a4ab02_720w.jpg?source=b1748391?rss\" data-caption=\"来自《占星术杀人事件》\" data-size=\"normal\" data-rawwidth=\"1026\" data-rawheight=\"987\" data-watermark=\"watermark\" data-original-src=\"v2-935f98706c285110d57dd2fcf9a4ab02\" data-watermark-src=\"v2-e22819e8266556e455a03be60bace003\" data-private-watermark-src=\"v2-109f8d7d4982c29a5f297b0e8972ab63\"></p>\n<p data-pid=\"ylzmxDCh\">虽已看过了《少年包青天》，不过在我看《占星术杀人事件》时，其细节已然全部忘光，所以直到最后御手洗揭露时才知道这个诡计。不得不说，这个诡计太强大了，完全掩盖住书中其它缺点。</p>\n<p data-pid=\"2m90Y7es\">话说回来，原作者亦想梅小姐和读者一起同挑战，一同思考，直到最后一同解开谜团。</p>\n<p data-pid=\"paVcxHd5\">说到推理，其同样存在许多推理经典情节，左撇子、光线倒影、替身、暴风雪密室（门锁上，窗外无脚印），普通密室等。</p>\n<p data-pid=\"cY-jzFtu\">此外，也致敬过一些经典推理小说，如阿加莎的名作《东方快车杀人事件》。《鸭子侦探》的第15集《快车奇案》便与其很相似。该集剧情简介如下：</p>\n<blockquote data-pid=\"UVCgCN7u\">乘坐尼罗河一带最好的快车畅游埃及本来是一件很惬意、很浪漫的事。可是同一车厢里偏偏有一个喜欢到处制造麻烦搞恶作剧的乔奇，这让大家都很伤脑筋。只有梅小姐和考古学家光头教授对乔奇不加理会。乔奇根本无视大家的反感，一心只想证明他是“恶作剧之王”。乔奇走到哪里，哪里就会听到尖叫和狂笑，还有乔奇的呼救声。似乎有谁对他的所作所为已经忍无可忍，一心要让他从这个世界上消失掉。尽管有梅小姐和维乐一次又一次地解救，乔奇还是被绑架了。车厢里的每一位都有作案的动机。<sup data-text=\"鸭子侦探 A Miss Mallard Mystery 第15集 快车奇案 \" data-url=\"https://movie.douban.com/subject/3160834/episode/15/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"8\">[8]</sup>\n</blockquote>\n<p data-pid=\"b9WYhUkX\">同样是在一个列车上，同样有一个令人讨厌的家伙，同样有一个侦探，并且车厢里的每一位都有作案的动机。</p>\n<p data-pid=\"zcav2udq\">不过结果则是完全不一样，诡计亦完全不一样，可以说仅仅只是表面上有些相似罢了。</p>\n<p data-pid=\"RvnmTxn6\">其结果则是，从金字塔里，把木乃伊带出来，并逃脱了。</p>\n<p data-pid=\"c6q3O4yB\"><b>恐怖</b></p>\n<p data-pid=\"Fp_-JvK1\">恐怖情节，是《鸭子侦探》里最让人所熟知的，亦是让所有人印象深刻的存在。而我已经过了阅读本动画的黄金年龄，导致并无感觉有多恐怖，实在可惜。</p>\n<p data-pid=\"SuWkH3Ak\">不过，该动画亦并非每集都存在这些恐怖情节，我感觉稍显恐怖的剧集有《无头幽灵》《接吻伯爵》《快车奇案》《古堡幽灵》《太空之旅》《海盗的宝藏》。</p>\n<p data-pid=\"mYnWKarx\">而其营造恐怖氛围是如此方式：先是疑似有超自然生物存在，而通过梅小姐的一番推理分析，得出搞怪之鸭并非超自然生物，是由现实之鸭所做所为，最后再告诉观众，这些超自然生物是存在的。</p>\n<p data-pid=\"AF_WPorc\">动画有一个优势便是音乐，音乐能塑造出不一样的氛围。</p>\n<p data-pid=\"i8Ir5d0I\">《鸭子侦探》中的音乐，其中一大特点是不寻常，或是为了配合剧情而选择做成如此。相较于其它少儿动画，其音乐明显阴森了许多。在片头曲以及片尾曲表现得最明显。</p>\n<p data-pid=\"gxzbo103\">除此之外，在鸭子侦探中，是使用他人反应+具体镜头实现。</p>\n<p data-pid=\"KtVGRoVi\">而具体是如何展现的，其中最典型的是《接吻伯爵》。</p>\n<p data-pid=\"2gO26NsW\">《接吻伯爵》中类似于暴风雪山庄模式，先将所有人关在一个屋子里，包括犯人侦探。不过本动画并无凶杀案，所以便不会存在像推理小说一个一个地杀掉。在那个苏格兰城堡中，有一幅画眼睛会莫名其妙地动，窗会莫名其妙地打开，而在黑暗的暴风雨闪电下，跳出一个人。不对，是一只鸭。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bcee5f106f2261b6f7e81d6e4c6b11c1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1436\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-bcee5f106f2261b6f7e81d6e4c6b11c1\" data-watermark-src=\"v2-5abbf297dbd21674e5bdb94475cc4bf6\" data-private-watermark-src=\"v2-fb6e4ef4da08046ba40e7021ea7c727c\"></p>\n<p data-pid=\"fdKpyETf\">再一转眼，鸭子便已消失，暴风雨停了，只留下一轮满月在窗户旁。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3510c38a224c60498b47cc818189ff61_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1441\" data-rawheight=\"1056\" data-watermark=\"watermark\" data-original-src=\"v2-3510c38a224c60498b47cc818189ff61\" data-watermark-src=\"v2-d54e68489d485132e18685d8e13a6d06\" data-private-watermark-src=\"v2-a71b17c8a1a835719e56330d6c375b9b\"></p>\n<p data-pid=\"yp-IQgZu\">维勒缩在被子，手指指着被黑影打碎的镜子，</p>\n<p><img src=\"https://pic3.zhimg.com/v2-87285a1202b9cb044139f64991322131_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1442\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-87285a1202b9cb044139f64991322131\" data-watermark-src=\"v2-7f9e1f804d01a5c33af9289382541070\" data-private-watermark-src=\"v2-5b818391a9e5409ba88bbf4319bf6c36\"></p>\n<p data-pid=\"PmvDBoJs\">另一边不断地传来尖叫声，而一个鸭子的两个妹妹被绑架了，</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e24c56fe3c2b1955d9aaa6ec01e0b14d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1432\" data-rawheight=\"1079\" data-watermark=\"watermark\" data-original-src=\"v2-e24c56fe3c2b1955d9aaa6ec01e0b14d\" data-watermark-src=\"v2-6a7992f1bc49be2ce699f2f36bcb9ed0\" data-private-watermark-src=\"v2-d3d7de7c187eb79581eddd14034e8b16\"></p>\n<p data-pid=\"EY5emDdP\">而她自己亦被接吻伯爵接吻了</p>\n<p><img src=\"https://pic1.zhimg.com/v2-83f167029a80099121b6d84be630dcc6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1436\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-83f167029a80099121b6d84be630dcc6\" data-watermark-src=\"v2-3acd97b693bdafcf98336deffc7a1953\" data-private-watermark-src=\"v2-7f630ece31009c5c168a832f4f5c443f\"></p>\n<p data-pid=\"OqUxbhaD\">气氛在此时来到最高潮。</p>\n<p data-pid=\"sBHsPWha\">然后便是姑妈破案了，果不其然，是有人在假扮接吻伯爵。</p>\n<p data-pid=\"RtdQI2wR\">最后最妙的还是这点，“接吻伯爵还活着”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fbf7368639aedd08702241f36884a8bc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1434\" data-rawheight=\"1051\" data-watermark=\"watermark\" data-original-src=\"v2-fbf7368639aedd08702241f36884a8bc\" data-watermark-src=\"v2-c9e191572f0ce896b93708f5a8a0f4b5\" data-private-watermark-src=\"v2-d015140a3c7ec54b0540a7c6969c07f3\"></p>\n<p data-pid=\"_p-thJgS\">《鸭子侦探》中出现过的超自然生物有《接吻伯爵》中的接吻伯爵，《快车奇案》中的木乃伊，《古堡幽灵》中的幽灵，《太空之旅》中的外星人。</p>\n<p data-pid=\"0nfPpNYu\">当然除了这些，还有一些并没表示有其存在，如《海盗的宝藏》 中的鬼，不过其恐吓程度不下于前面这些。</p>\n<p data-pid=\"DdcO-XwO\">这些大大小小的恐怖情节，造就了观看本动画时的阴影，并深深地留在了其记忆中。</p>\n<h2>人物</h2>\n<p data-pid=\"nuJaj3Xf\"><b>梅小姐</b></p>\n<p data-pid=\"WaxFVDgb\">一只优雅的鸭子，永远都在织毛衣，想送一件毛衣给侄子维勒，然而毛衣总是在一些重要的时候被姑妈拿去使用，譬如在荷兰时用去堵住。同时，梅小姐亦是全球最为著名的私家侦探，没有梅小姐破不了的案子。</p>\n<p data-pid=\"MUIlq01l\">姑妈很细心，基本所见之处，所有细节，皆逃不过其法眼；</p>\n<p data-pid=\"B20rMc4x\">姑妈很温柔，不崇尚用暴力解决问题，在每集结束亦会输出一些理；</p>\n<p data-pid=\"NSPRsQgs\">姑妈胆子大，能在大风车下无无惧色地跳下去，能多次身处险境冷静思考；</p>\n<p data-pid=\"42Fw0HGE\">姑妈还有有一个堪比哆啦A梦四次元口袋的红袋子，里面可装下任何物料，可拿出任何时候的新闻报纸，同样，亦会有姑妈未织完的毛衣和针钱。</p>\n<p data-pid=\"YZEEQW7w\">除了有点守旧，姑妈是个完美的人，不对，是鸭。</p>\n<p data-pid=\"RZ3-_o51\">推理小说中，女性侦探占比是相当小的，至今为止，仅有推理小说女王阿加莎笔下的马普尔小姐一人。但是我认为与马普尔小姐相比，梅小姐与阿加莎笔下另一个侦探波洛更为相似些。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-826d0693e0e47698e3f2465ba6082992_720w.jpg?source=b1748391?rss\" data-caption=\"当然不是指外貌啦\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-826d0693e0e47698e3f2465ba6082992\" data-watermark-src=\"v2-06454a989a4085c5790df148bf327c12\" data-private-watermark-src=\"v2-69d4e9d8b128de5af48648334208c0f4\"></p>\n<p data-pid=\"FnaJAvO3\">同是世界闻名的侦探，同是经常笑咪咪，同样喜欢收集现场东西，同样心思缜密，亦不存在那些侦探的毛病，是一个正常人（鸭）。</p>\n<p data-pid=\"mi0UhCpn\"><b>维勒</b></p>\n<p data-pid=\"LLh52Tuk\">有些笨拙，却总能弄拙成巧，因为维勒的勇敢。这是维勒的运气，亦是维勒应得的。</p>\n<p data-pid=\"pq7gm33S\">而对困难时，总是第一个上，姑妈面对危险时，维勒往往能救出来。</p>\n<p data-pid=\"TR5TUYv1\">即便是不如姑妈，维勒亦会学习，会观察，不再会被事物的表面现象所迷惑，亦会从表面现象开始着手进行分析。</p>\n<p data-pid=\"q5Pwy7Cs\">维勒是一只勇敢的鸭。</p>\n<h2>总结</h2>\n<p data-pid=\"ZCZF_at2\">看之前，以为会一部恐怖动画，看之后，方才发现原来是一部正宗的少儿动画，一部崇尚着真善美的推理动画。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-40af1e286698b886f58f4db23428e1aa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-40af1e286698b886f58f4db23428e1aa\" data-watermark-src=\"v2-654684e311a2695f1cac53d62b546ca7\" data-private-watermark-src=\"v2-4fcfc2c2df7fe2850965107a0493f9b8\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jinl1874?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">道理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/25715432/answer/2086624573?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/529682303?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《侦探已死》第一集的剧情设计的有吸引力吗？</a><br><a href=\"http://www.zhihu.com/question/509815432?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画电影《怪盗女王喜欢马戏团》？</a><br>\n","link":"http://www.zhihu.com/question/25715432/answer/2086624573?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"本周看什么丨最近值得一看的一大沓作品","date":"2022-05-06 10:14:39","description":"☕️TL;DR近期佳作推荐：[韩剧]我的解放日志、[美剧]阶梯之间、[动画]街角魔族2丁目、[日剧]桧山健太郎的怀孕、[美剧]城市的主宰、[动画]抹去重来第二季、[电影]好老板、[日剧]我的家、[动画 ...<a href=\"https://sspai.com/post/73054\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73054"},{"title":"如何看待动画《新秦时明月》第25集？","date":"2022-05-06 09:26:38","description":"\n<p data-pid=\"7wu0pvki\">大家好，《新秦时明月》已经播出第25集了</p>\n<p data-pid=\"TPfZL5Wt\">不知道劳动节大家都过的开心么？上海依然封闭中度过。我补了点印象中曾经一直没有追完的漫画，其实隔离在家刷刷剧，重温曾经的经典也是一个不错的选择……经典就是值得反复看、反复追（笑）。 </p>\n<p><img src=\"https://pic2.zhimg.com/v2-a838c269b48f6450539962109e53d830_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1937\" data-rawheight=\"1087\" data-watermark=\"watermark\" data-original-src=\"v2-a838c269b48f6450539962109e53d830\" data-watermark-src=\"v2-b7bd087a1b2c4b451e13aff9ac497e1a\" data-private-watermark-src=\"v2-f27a846cdaa4a7dc5640129423617e1c\"></p>\n<p data-pid=\"WE-XeNy6\">本集三小强跨过了墨家禁地大门，接下来的故事就会集中在三小只闯禁地的故事中。接下来应该就是老秦迷非常熟悉的“虎跳”“猿飞”和“龙喉”三大挑战，还有天明和少羽的“王道”、“侠道”之选。这段情节我个人很喜欢，代表了两位少年各自的性格、成长之路和未来的命运。</p>\n<p data-pid=\"gx8xo_Q_\">值得一提的是，这次的《新秦时明月》我们对墨家的很多机关也是全新设计。“全新”到什么程度？就是从原画设计开始，打造全新的禁地。当然大的设定，我们依然确保不会完全颠覆，更多是在审美与机关设计上进行增强。 </p>\n<p><img src=\"https://pica.zhimg.com/v2-ce7ea7c6ab6f830d68faef8c50e500af_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1941\" data-rawheight=\"1083\" data-watermark=\"watermark\" data-original-src=\"v2-ce7ea7c6ab6f830d68faef8c50e500af\" data-watermark-src=\"v2-d60ce16d8fd5b43c428d6ad0f500f325\" data-private-watermark-src=\"v2-9e5c8dc6e166a206d4768b727ed2f9ab\"></p>\n<p data-pid=\"k0f7d9nS\">本集中墨家中央大厅的部分，我们也做了不少调整，加强考量了一些机关效果与实际环境的表现手法。譬如潜龙阵的设定，我们觉得如果地面一开始就都有密密麻麻的小孔，秦兵应该很容易会意识到有机关，但不加的话，后面地刺突然出现，又有一些细节上的考虑不足，所以我们选择了简化地面孔洞数量，但潜龙阵的矛头可以逆向开合的设计。</p>\n<p data-pid=\"fijwCwV9\">再譬如第一波秦兵进入中央大厅后被杀死，然后机关重启的部分。老版本中是卫庄等人看到大门打开，里面什么都没有，然后角色在这种场景下说出：“这是怎么回事？墨家在玩什么花样？”但重制这场戏当时，我们觉得地面残留的兵器和秦兵尸体不可能短时间内全都消失，甚至连箭矢也都拔走回收，哪怕有专职打扫场地的人也不是最合理；所以经过讨论后，我们保留了尸体与地面上的兵器。但我们把同样的台词前移一些，所以大家就看到墨家故意重新打开中央大厅的大门时候听到这句疑问，这个疑问针对的不是看到人消失不见是怎么回事，而是门怎么在自己打开了？回过头来看，满地秦兵的尸体和墨家重新打开门，不仅更真实，也多了一份“请君入瓮”的悬念和张力。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-95e71cf5744eb50cde1a6862d104b74b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1940\" data-rawheight=\"1086\" data-watermark=\"watermark\" data-original-src=\"v2-95e71cf5744eb50cde1a6862d104b74b\" data-watermark-src=\"v2-f8888ef144effa0d113d206d4433f9da\" data-private-watermark-src=\"v2-d4680989498a330e69593630c40ee6d4\"></p>\n<p data-pid=\"S5qNWWk6\">端木姑娘VS隐蝠有些美女与野兽的感觉。新秦时的战斗戏份，我们这次其实都有优化和提升；所以虽然结局不会不同，但是打斗的过程都会比老版精彩很多，细节与打击感上大家会有很直观的感受，比如端木蓉不仅会飞针，还机制地将针倒插在地上等，显示出蓉姑娘的战斗智慧。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-f86bec454b6df77d6ee360d66200d7ab_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1946\" data-rawheight=\"1085\" data-watermark=\"watermark\" data-original-src=\"v2-f86bec454b6df77d6ee360d66200d7ab\" data-watermark-src=\"v2-adb6d449e977c055c97e43956c84a827\" data-private-watermark-src=\"v2-f8a86f5d9c0b5934730113859b1eccbc\"></p>\n<p data-pid=\"B2PrXMr2\">本集中，公输仇改造后的机关无双震撼登场也是一个大亮点。我们设计了每一步都伴随着小地震。这是为了表现它改造后的身体质量很大，金属含量很高，也更有压迫感。傻大个也好久不见了，不知道未来他会伴随天明经历哪些呢？我们针对他的金属结构做了新的设计，有兴趣大家可以跟老版本对比一下，找下有哪些不同哦~</p>\n<p><img src=\"https://pic4.zhimg.com/v2-48dbeba463f57ab444ec59dd637156d3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1944\" data-rawheight=\"1094\" data-watermark=\"watermark\" data-original-src=\"v2-48dbeba463f57ab444ec59dd637156d3\" data-watermark-src=\"v2-4303926e2884df6fbce40d481997a532\" data-private-watermark-src=\"v2-dfb5072f0fecb90128dbb0d543ca5933\" data-tags=\"porn\"></p>\n<p data-pid=\"YPcg6en-\">最后，虽然疫情可以远程办公，但频繁的死机的问题好烦，之前机器陆续已经宕机60多台。远程电脑的短缺，给我们造成非常大的困扰。好在3位住公司附近又符合出行条件的同事，经过向有关部门种种申请，终于在保证安全措施的前提下，想办法赶到公司一天，为我们重新开启远程操作的电脑并重启远程软件。他们让我想起一些灾难大片中，决然去危险之地打开关键道具的勇士，值得双手为他们点赞。希望后续宕机尽量少出现，希望我们制作顺利，早日能回复正常的工作与生活，也祝大家一切平安康泰。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xie-xiao-ming-98-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">薛小明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/531591558/answer/2472733210?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/527904002?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《新秦时明月》第22集？</a><br><a href=\"http://www.zhihu.com/question/529273418?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待动画《新秦时明月》第23集？</a><br>\n","link":"http://www.zhihu.com/question/531591558/answer/2472733210?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"M1 CPU 那么多的核，macOS 是怎样管理的？","date":"2022-05-06 08:00:00","description":"专为 Mac 打造 M 系列处理器，macOS 是这样发挥它的全部实力的。<a href=\"https://sspai.com/post/73048\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73048"},{"title":"大家怎么看氢储能？","date":"2022-05-06 06:52:14","description":"\n<p data-pid=\"7e0iWZgq\">三个基本判断：</p>\n<ul>\n<li data-pid=\"XKdKHMCp\">氢储能与电化学储能互补，更适合于<b>更长时间跨度、更长空间跨度</b>的能量调度。因此，<b>氢储能长期来看是有前景的</b>。</li>\n<li data-pid=\"i1eiQYAv\">但这个长期非常长长长 —— 需要在<b>风光发电+电化学储能+氢的制、储、运+氢的应用端</b>基本成熟之后。简单来说，现在八字还没有一撇。</li>\n<li data-pid=\"H4H1c3MS\">虽然八字没有一撇，看起来不靠谱；但氢能作为<b>碳中和氢+电能源体系</b>的左右腿之一，发展的确定性还是较强的。</li>\n</ul>\n<h2>储能行业现状</h2>\n<p data-pid=\"Vojzviu3\">储能有多种类型，按<b>功率大小、储能容量、响应速度、成本</b>进行比较如下<sup data-text=\"2021年储能白皮书德国莱茵TUV\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d316a2769ec6950094eeaaa253e7132f_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[1]\" data-size=\"normal\" data-rawwidth=\"1411\" data-rawheight=\"856\" data-watermark=\"original\" data-original-src=\"v2-d316a2769ec6950094eeaaa253e7132f\" data-watermark-src=\"v2-9e27b4e40c96432249cc706da22674ab\" data-private-watermark-src=\"v2-263ea325872fe9553584a37c013308fe\"></p>\n<p data-pid=\"hi87z_j7\">表格中都没有氢储能的位置，因为它过于长期了。类似的，由16个单位联名撰写的特约文章&lt;2021年中国储能技术研究进展&gt;中<sup data-text=\"[1]陈海生, 李泓, 马文涛,等. 2021年中国储能技术研究进展[J]. 储能科学与技术, 2022, 11(3):25.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>，也根本没有提到氢储能。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e20675c81c2206bf86396c5b44e59619_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"512\" data-watermark=\"original\" data-original-src=\"v2-e20675c81c2206bf86396c5b44e59619\" data-watermark-src=\"v2-b36dbfcef7dbb2ca87451be947552f18\" data-private-watermark-src=\"v2-e9dab2e345b28d8b9328be73fc59c8fa\"></p>\n<p data-pid=\"mWtWo-qI\">这么多储能类型，学起来一定很累吧？ 别急，只需要记住三点[1]：</p>\n<ul>\n<li data-pid=\"sSVjGgkR\">\n<b>抽水蓄能占大头：</b>2000-2020总装机规模的89.3%。</li>\n<li data-pid=\"mkPGjaCy\">\n<b>电化学储能快速发展：</b>预计年复合增长率在50%-70%之间。</li>\n<li data-pid=\"ppfWkDhv\">\n<b>其它储能</b>：占比较小，发展也不快，可先忽略。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-e1b060cb379d5766ebc7b92a0e55ab88_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[1]\" data-size=\"normal\" data-rawwidth=\"2926\" data-rawheight=\"994\" data-watermark=\"original\" data-original-src=\"v2-e1b060cb379d5766ebc7b92a0e55ab88\" data-watermark-src=\"v2-22d7a73156fe5bc22c8f88e72162c0b0\" data-private-watermark-src=\"v2-0fc0737c0bfbbf684eca82dc7b91e023\"></p>\n<h2>为什么电化学储能增长快？</h2>\n<p data-pid=\"-8Y3BPR0\">一句话概括，由于风力、光伏发电在小时、天、季节的时间维度上都具有波动性，需要不同时间维度的储能系统来辅助。<b>从经济性、灵活性、储能特性来看，电化学储能适用性最强，在发电侧、电网侧、用电侧都可以发挥作用</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-11647480603f1a48508bac2214e29208_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[1]\" data-size=\"normal\" data-rawwidth=\"2873\" data-rawheight=\"1357\" data-watermark=\"original\" data-original-src=\"v2-11647480603f1a48508bac2214e29208\" data-watermark-src=\"v2-73f4a6e309e51ec7423ebe1e10295a84\" data-private-watermark-src=\"v2-b2d0ac9214439a437d733da9b8e76484\"></p>\n<p data-pid=\"_eM-nUD9\">风电与光伏目前还是一个弟弟，但将来会成为哥哥，而传统化石能源发电逐渐退出历史舞台。<b>搭着风电与光伏快速增长的东风，电化学储能的增长也具有很强的确定性</b><sup data-text=\"2021氢储能行业研究报告 东北证券\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup><b>。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6255232f409834f32fdc100c86d4b6e7_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"1136\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-6255232f409834f32fdc100c86d4b6e7\" data-watermark-src=\"v2-f6163fdb7371963688a396df1e7fa5cd\" data-private-watermark-src=\"v2-b854bae2d6683e06169209083f358c3c\"></p>\n<h2>为什么氢储能也可以搭上东风？</h2>\n<p data-pid=\"bXYPv0AN\"><b>风电与光伏除了季节上的波动之外，空间分布也很不均匀，长距离的运输不可避免</b>：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-863047e4bf2a61a41ab6eb1d1c493798_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"1177\" data-rawheight=\"426\" data-watermark=\"original\" data-original-src=\"v2-863047e4bf2a61a41ab6eb1d1c493798\" data-watermark-src=\"v2-a3c023c88a9eded63302df99b3071d47\" data-private-watermark-src=\"v2-2f4a91b6f9c6f9e5e21e053126c9371e\"></p>\n<p data-pid=\"NyWS3-CT\">电化学储能不太适合长时间维度、大空间维度的储能 —— <b>用锂电池夏天储电，冬天再用，成本上肯定不划算；西部发电，再把锂电池运到东部使用，想想也不可能</b>。</p>\n<p data-pid=\"GW_n2m2N\">此时，与电化学储能在时间维度、空间维度互补性极强的氢能出场了！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d83d1af71b6ec2e40242f85d2aeb47e2_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"896\" data-rawheight=\"533\" data-watermark=\"original\" data-original-src=\"v2-d83d1af71b6ec2e40242f85d2aeb47e2\" data-watermark-src=\"v2-8379228020958e7fb066841dcbb04a3a\" data-private-watermark-src=\"v2-06a397396d4b5806d5da1bc65c849167\"></p>\n<p data-pid=\"X900yaCY\"><b>氢能负责长距离、大容量、长时间的储能，电化学储能负责固定位置、小容量、高频储能，配合完美</b>！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fd8e8e2edc896e01a0137151a33d55b3_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-fd8e8e2edc896e01a0137151a33d55b3\" data-watermark-src=\"v2-07724ef8dcc66a1e3189d80366d432bb\" data-private-watermark-src=\"v2-0a9ab9d83a584e59a6ea5ee0ef69d632\"></p>\n<p data-pid=\"po0JKPqL\">所以说，如果碳中和是确定性的，那电化学储能也是确定性的，氢储能虽然过于长期，但也是确定性的。</p>\n<h2>氢储能要克服哪些阻碍？</h2>\n<p data-pid=\"17q9Xr53\">前面说了，氢储能非常长期，八字还没一撇。下面咱们就缕一下，氢储能需要克服哪些阻碍吧。</p>\n<h3>1. 氢的制取</h3>\n<p data-pid=\"Agd_V8PX\">本题是在讨论氢储能，但实际上氢的制取问题还很大，需要长时间才能解决 —— <b>看吧，制取都还没搞定，就谈储能，这确实有点太长长长期了吧</b>！</p>\n<p data-pid=\"F-iSR-Ju\">目前氢的主要来源还是化石能源<sup data-text=\"中国氢能产业发展报告2020.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f9cd9e14094bbe1f5430a21edb7536db_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[4]\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"330\" data-watermark=\"original\" data-original-src=\"v2-f9cd9e14094bbe1f5430a21edb7536db\" data-watermark-src=\"v2-b9a8ffdae5cc5c96a69d1356c3857386\" data-private-watermark-src=\"v2-61b94c2b4483315bd31ccfa1337ad698\"></p>\n<p data-pid=\"8lP5rjsr\">也就是说，虽然氢气的使用很绿色，但是氢化的抽取很灰色 —— 现在主要还是灰氢。<b>下面是灰氢、蓝氢、蓝绿氢、绿氢的分类</b><sup data-text=\"绿氢政策制定指南. IRENA&amp;中国氢能联盟。\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup><b>，我们的目标是绿氢。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f73fc4bd7eea452af5bd2eb495be82dd_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[5]\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"216\" data-watermark=\"original\" data-original-src=\"v2-f73fc4bd7eea452af5bd2eb495be82dd\" data-watermark-src=\"v2-8931dee6be632cac865a7f1ce233a8f4\" data-private-watermark-src=\"v2-6bd2221ec74b57aa8c5d1ded257e8926\"></p>\n<p data-pid=\"z7RgGJe0\"><b>灰就灰吧，也不是不能用。先用灰氢把应用端给发展起来，再逐渐变绿，也是挺好的 —— 电动汽车不就是这么做的吗？</b> 现在电动车渗透率已经非常高了（2022年4月达30%），但用电主要还是煤电；先把应用端搞定，再搞定发电端，不确定性就小了很多。</p>\n<p data-pid=\"D9t6Zi_s\"><b>问题是，这灰氢也不便宜啊！</b></p>\n<p data-pid=\"jEUNUQOY\">氢燃料重卡的燃料成本占全生命周期的46%。目前 法规允许的外供加氢站价格主流区间为60-80元/kg，部分地区最低也要40元/kg左右，补贴平均在10-12元/kg。以重卡为例，现在百公里能耗成本要400元，同类型的柴油车为180-200元<sup data-text=\" 2021中国氢燃料电池重卡行业发展白皮书. 罗兰贝格\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"6\">[6]</sup>。<b>相对于柴油有竞争力的话，得2030年之后了！</b></p>\n<p data-pid=\"SzaRgWhP\">文献[4]也指出了一个明路：与风光水电结合起来。<b>这也是咱们之前已经说过的：电化学储能会伴随风电与光伏的发展。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-db6e9f8c338ce865b2d5d4a9626e8e6f_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[4]\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"245\" data-watermark=\"original\" data-original-src=\"v2-db6e9f8c338ce865b2d5d4a9626e8e6f\" data-watermark-src=\"v2-1449c650a80f18ff7f808d2ac379a9bc\" data-private-watermark-src=\"v2-1448a04aa082b757c01ec78cd147b5ae\"></p>\n<p data-pid=\"N2fi9N4Y\"><b>看远一些的话，将来还是要在风电与光伏电站附近电解水来制氢：既便宜又绿色</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-fac1413079afdfc4818d6f84c9748fbd_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"1296\" data-rawheight=\"1038\" data-watermark=\"original\" data-original-src=\"v2-fac1413079afdfc4818d6f84c9748fbd\" data-watermark-src=\"v2-994b79db9d88d017f681f5db376ec44f\" data-private-watermark-src=\"v2-58bf190402aa7f52fb4276209d969bf9\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ec1ebce870bc68d13e64075751976cdf_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[3]\" data-size=\"normal\" data-rawwidth=\"1314\" data-rawheight=\"694\" data-watermark=\"original\" data-original-src=\"v2-ec1ebce870bc68d13e64075751976cdf\" data-watermark-src=\"v2-b0e3440d95a55829a86dc406961bb694\" data-private-watermark-src=\"v2-f5349e5e945148c57680f430a40c294c\"></p>\n<h3>2. 氢的储运</h3>\n<p data-pid=\"7jWWMsNb\">氢的储存和运输分为气氢与液氢两种形式。液氢当然更有效率，因为液氢密度分别是20/30/70MPa气氢密度的4.9、3.4、1.8倍，液氢槽车运输方式比20MPa高压气氢拖车的单车储运量提高9倍、充卸载时间减少约1倍，液化过程中还能提高氢气纯度，一定程度上可节省提纯成本[4]。</p>\n<p data-pid=\"wan29zY1\">然而现实情况是：现阶段中国普遍采用20Mpa气态高压储氢与集束管车运输的方式[4]。</p>\n<p><img src=\"https://pica.zhimg.com/v2-9c8682b338bab22f11a6d31c117c36d4_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源[4]\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"359\" data-watermark=\"original\" data-original-src=\"v2-9c8682b338bab22f11a6d31c117c36d4\" data-watermark-src=\"v2-1a101007084f65f8979729e9db170d10\" data-private-watermark-src=\"v2-f43f903e4efd485f5edf645c42297d95\"></p>\n<p data-pid=\"4QToeu0w\">氢气的临界温度也很低=32.97 K (-240 ℃) @1.293 MPa<sup data-text=\"\" data-url=\"https://baike.baidu.com/item/%E6%B0%A2%E6%B0%94\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"7\">[7]</sup>。<b>也就是说，在-240 ℃以上再加压也不会使氢气液化，液氢的制取目前还是一个技术课题。</b></p>\n<p data-pid=\"3fxAAdui\"><b>除此之外，政策上还没放开 —— 政策没放开通常意味着，该产业的技术阶段还比较早期</b>。</p>\n<ul>\n<li data-pid=\"tUVIiEQx\">\n<b>70MPa氢气</b>：2020年7月21日，车载储氢的国标修改，将工作压力上限从35MPa提升至70MPa；《燃料电池电动汽车加氢口》(GB/T26779-2021)于2021年3月9日发布，于10月1日实施，规定了70MPa加氢口的技术标准。如此一来，70MPa氢气的产业化就消除了政策障碍。</li>\n<li data-pid=\"WngRUhsI\">\n<b>液氢</b>：《<a href=\"https://www.zhihu.com/search?q=%E6%B0%A2%E8%83%BD%E6%B1%BD%E8%BD%A6%E7%94%A8%E7%87%83%E6%96%99%E6%B6%B2%E6%B0%A2&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2466927185%7D\" class=\"internal\">氢能汽车用燃料液氢</a>》《液氢生产系统技术规范》《<a href=\"https://www.zhihu.com/search?q=%E6%B6%B2%E6%B0%A2%E8%B4%AE%E5%AD%98%E5%92%8C%E8%BF%90%E8%BE%93%E6%8A%80%E6%9C%AF%E8%A6%81%E6%B1%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2466927185%7D\" class=\"internal\">液氢贮存和运输技术要求</a>》三项国家标准获批发布，于2021年11月1日实施<sup data-text=\"\" data-url=\"https://baijiahao.baidu.com/s?id=1699415259502486462&amp;wfr=spider&amp;for=pc\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"8\">[8]</sup>。根据 《<a href=\"https://www.zhihu.com/search?q=%E9%81%93%E8%B7%AF%E8%BF%90%E8%BE%93%E6%9D%A1%E4%BE%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2466927185%7D\" class=\"internal\">道路运输条例</a>》，液氢属于危险货品，只能由军工运输。也就是说，液氢发展仍然存在一定的阻碍，这也是与液氢技术发展阶段相适应的 —— 技术成熟了，政策自然会放开。</li>\n</ul>\n<h3>3. 氢的应用 - 新能源汽车</h3>\n<p data-pid=\"tdfQ-RoL\">咱们讨论的氢气制储运都是上游产业。如果下游产业发展不顺，那就难以形成商业闭环，上游就必须依赖补贴活下去，这样是不健康的！</p>\n<p data-pid=\"AX02B1_q\"><b>所以，氢的应用端发展对整个氢能发展非常重要，最主要的就是氢燃料电池汽车的发展</b>。关于氢与电的争论，在此就不展开了，可以参考我之前的一个回答：</p>\n<a href=\"https://www.zhihu.com/question/453005871/answer/2463515848\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-dffc1fe191548fafbb3883d785be0469_qhd.jpg?source=b1748391\" data-image-width=\"1440\" data-image-height=\"759\" class=\"internal\">新能源的三大流派：换电、充电、氢燃料，到底哪一个会是未来？</a><h3>4. 氢的应用 - 其它领域</h3>\n<p data-pid=\"KWjlk-2i\"><b>除新能源汽车之外，也有一些应用领域用电难以达到要求，就必须用氢。</b></p>\n<p data-pid=\"XEIn-Kwm\">比如说：钢铁、石化、水泥等产品生产中，由于热能的需求量大、温度高，很难通过电气化的方式来解决，就需要高品位热能。<b>这些地方咱们日常生活接触不到，关注不多，但耗能并不少</b>。<b>如果不发展氢能，这些碳中和之路上的硬骨头，就很难啃下来！</b></p>\n<p data-pid=\"tF8zUoeK\"><b>这方面国外已有一些应用，就是天然气掺氢</b>：意大利Snam公司2020年1月掺氢量提高到10%、英国HyDeploy掺气比高达20%、德国西门子的燃气轮机设备可使用掺氢量5%-50%的HCNG[4]。此外就是民用的天然气管道掺氢，目前还存在一些经济性和技术问题。</p>\n<h2>全文小结</h2>\n<ul>\n<li data-pid=\"hNeHKWjR\">氢储能与电化学储能互补，它们伴随着风电光伏的发展而发展。<b>氢储能要晚于电化学储能，IEA预测2050年的电化学储能与氢能储能的装机占比为9%、6%[3]</b>。</li>\n<li data-pid=\"DOO8JptU\">氢储能的发展是长期的，需要解决的困难是全产业链的：<b>氢的制取、储存、运输技术，以及氢的应用端发展</b>。所以，现在谈氢储能，视野确实有点太长长长期了！</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/413851108/answer/2472739777?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/510788995?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">关于氢储能的前景，你有哪些看法？</a><br><a href=\"http://www.zhihu.com/question/512381552?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">氢储能技术和应用方面的介绍吗？</a><br>\n","link":"http://www.zhihu.com/question/413851108/answer/2472739777?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"办公时应该听什么？——专注音乐类型解析","date":"2022-05-06 06:32:03","description":"祝你听得开心，工作专心。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/vol019-focus-music\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/vol019-pre-focus-music\" target=\"_blank\">《专注音乐听什么？》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/vol019-focus-music"},{"title":"为什么经济学诺贝尔奖预测不了金融危机？","date":"2022-05-06 06:26:43","description":"\n<p data-pid=\"aXh64gNg\">离08年金融危机爆发还有几个月的时候，我正在Berkeley读经济学博士一年级。系里给博一新生开设了一门小课，趁中午吃饭时间介绍各领域的研究内容。那天轮到行为经济学领域（可能是宏观领域，我记不清了），来了三个老师，01年的诺奖得主George Akerlof以及Stephano, Ulrike夫妇。Akerlof在介绍中说到，他认为美国即将发生一场严重程度仅次于大萧条的经济危机。Ulrike马上半开玩笑地问: 这是你的看法，还是你老婆的看法？Akerlof的妻子是Janet Yellen，当时的旧金山联储主席，后来的美联储主席和财政部长。Akerlof说这是他自己的看法。</p>\n<p data-pid=\"gAXa4aKU\">几个月后，金融危机爆发，回想此事，有一种“当时只道是寻常”的震颤。而且，就在贝尔斯登崩溃、危机爆发的次日，恰逢Akerlof的宏观课。他更改了讲课内容，给我们介绍了这次危机的原因。那是我第一次听说次级债问题的来龙去脉。Akerlof当时的说法和事后人们公认的总结是完全一致的。所以，Akerlof几个月前的判断并不是出于“月盈则亏，久涨必跌”这种囫囵思维，而是基于对底层现状和机制事先的了解——次级债中隐藏的即将被房价下跌引爆的违约风险，以及这一风险的放大机制。</p>\n<p data-pid=\"gXUGsLWH\">这么多年来，几乎所有书籍和文章都说经济学家没能预见到08年的大崩盘，英国女王这么说，经济学家们自己也这么说。但根据我有限的观察样本，要说经济学家或经济学诺奖得主都没有预测到金融危机，是不准确的。当然，Akerlof也许是个非典型的经济学家。他身上透着一种特别的谦卑和诚恳，不是对人，更是对世界的谦卑和诚恳。直来直去，却让与谈者如沐春风。</p>\n<p data-pid=\"tmzM4MfM\">今天，可能不再有其它公开的文字记录过Akerlof当年的预测。以Akerlof的为人，也不可能事后去炫耀自己的先见之明。</p>\n<p data-pid=\"hGGKs77o\">有些暗流涌动的大事，知情者出于谦卑或身份的敏感并没有公开地说。而公开激辩者，甚至拿着真金白银豪赌的人，却未谙事情的真相，有时臆断世事为不可知。这段逸闻，若不留此存照，大概也会在历史中湮没吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wulemin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">吴乐旻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/523298037/answer/2472347715?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">204 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/531251057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学十大原理是什么？</a><br><a href=\"http://www.zhihu.com/question/521180446?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">安全经济学？</a><br>\n","link":"http://www.zhihu.com/question/523298037/answer/2472347715?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"征服用户、走向市场：像「乐高」一样的 Notion 用了这些策略","date":"2022-05-06 03:30:00","description":"他们不想快速扩张，希望能优先选好自己的方向，在自己的方向上做精。<a href=\"https://sspai.com/post/72987\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72987"},{"title":"各家新能源车企是如何避免出现锂电池热失控现象的？","date":"2022-05-06 02:45:39","description":"\n<p data-pid=\"Qmv-Hq-v\">不知道大家有没有琢磨过：<b>热失控(Thermal Runaway)听起来文绉绉的，为什么不起一个直白的名字？ </b></p>\n<p data-pid=\"FHVKr11s\">咱们新闻上看到的电池热失控，烧起来都很惨烈！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-717d543a58ee8f25810e66d9ebe08503_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"332\" data-watermark=\"original\" data-original-src=\"v2-717d543a58ee8f25810e66d9ebe08503\" data-watermark-src=\"v2-aa1dc0f649ac14e02fd63e1a3f24da2f\" data-private-watermark-src=\"v2-798d8f67dfd12dd4292720da90cfe6ee\"></p>\n<p data-pid=\"6EosW3xe\"><b>那「热失控」为什么不叫「失火了」或「烧起来」呢？</b></p>\n<p data-pid=\"fV8C1YFy\">这是因为，后果惨烈的热失控通常是「千里之堤，毁于蚁穴」的、较为缓慢的渐进过程。</p>\n<p data-pid=\"w1kFF1pO\">在这个渐进过程中，大部分时间都是「可控」的，当超越某个「临界点」之后，才变得「失控」。</p>\n<p data-pid=\"juuS8xSe\">例如，数百个电芯中的其中一个电芯温度偏高，本来不是什么大问题。</p>\n<p data-pid=\"3BF5-kHt\"><b>但是呢，温度一高，电芯里会产生副反应；这些副反应大多是放热的，然后导致温度更高。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-0f8d2755df22df1d259ccf1cdf3785d8_720w.jpg?source=b1748391?rss\" data-caption=\"黑线上方的副反应都是放热的\" data-size=\"normal\" data-rawwidth=\"1355\" data-rawheight=\"770\" data-watermark=\"original\" data-original-src=\"v2-0f8d2755df22df1d259ccf1cdf3785d8\" data-watermark-src=\"v2-02b3488a2a75bfcdc6646bc9acd88cee\" data-private-watermark-src=\"v2-bfb74e020bfa07ef3f484ba14ecb58c5\"></p>\n<p data-pid=\"flaKpjFA\"><b>温度高 → 副反应 → 温度更高 → 新的副反应 → 温度更高 ……</b></p>\n<p data-pid=\"5-kCdVpl\"><a href=\"https://www.zhihu.com/search?q=%E9%93%BE%E5%BC%8F%E5%8F%8D%E5%BA%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2453317813%7D\" class=\"internal\">链式反应</a>到达某个临界点之前，还可以称为是「热堆积」；到达临界点之后，形势就无法逆转，就成了「电芯的热失控」了。</p>\n<p data-pid=\"RELc0ouC\">「电芯的热失控」并不可怕，说到底它也就是几包烟大小的小物件嘛，能有多大能耐？<b>但是呢，个别电芯的热失控放出大量热，把周围的电芯也加热到临界温度，也发生了热失控……</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-452e7ff4cc981b25366c00e97585bfc7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"530\" data-watermark=\"original\" data-original-src=\"v2-452e7ff4cc981b25366c00e97585bfc7\" data-watermark-src=\"v2-becc8828d81f68fc312c482bbae46cc2\" data-private-watermark-src=\"v2-a3b501bf4943dc756db8f2744051e920\"></p>\n<p data-pid=\"baSLaLEk\">当发生「芯传芯」的现象之后，很快就会蔓延到整个模组，到这个时候情况就非常严重了，损失就不可避免了。</p>\n<p data-pid=\"DKrJUJBy\"><b>2019年4月上海特斯拉自燃事故中，其实电池包并没有烧光，只是烧了几个模组，但也已经惨烈至此了。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4ec559508a01caf742403619b103a28_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"757\" data-watermark=\"original\" data-original-src=\"v2-a4ec559508a01caf742403619b103a28\" data-watermark-src=\"v2-4c46fa1d9b3c46c20df986d6a72a8ae7\" data-private-watermark-src=\"v2-0e7d6966b9c50345a58c44294dd8aa0c\"></p>\n<p data-pid=\"S74YLNVc\">事故的调查也可以反映出这种「芯传芯」、「模组传模组」的特性。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d67506f019e2f5cc6c65e53a1cb6fc9a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"482\" data-watermark=\"original\" data-original-src=\"v2-d67506f019e2f5cc6c65e53a1cb6fc9a\" data-watermark-src=\"v2-4c096bc0af7d0289862bd78cc08a262f\" data-private-watermark-src=\"v2-48df02ee6e08dd37bedda7f394f87cc7\"></p>\n<p data-pid=\"yIdjFbuI\">做个概括：先是小副反应带来大副反应，然后是单个电芯传到多个电芯，接着单个模组传到多个模组，<b>「可控状态」渐渐变成了「失控状态」，核心的传导环节都是「热」，所以才被称为「热失控」</b>。</p>\n<p data-pid=\"lOTGxhiJ\"><b>最初的诱因，除了上面举例提到的过热之外，还可能源于机械原因（挤压、针刺）、电的原因（过充、过放、内短路）</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3da20592b9e79a064426f7fa929e75c3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"528\" data-rawheight=\"307\" data-watermark=\"original\" data-original-src=\"v2-3da20592b9e79a064426f7fa929e75c3\" data-watermark-src=\"v2-ea904ef9629d13eae73e569c69a65702\" data-private-watermark-src=\"v2-370e29cad939d1bd9e8b034103455ae1\"></p>\n<p data-pid=\"4bzR3HCc\">了解这些之后，我们就不难猜出各车企对付热失控无非就两条路可以走了：</p>\n<ul>\n<li data-pid=\"Spa3G2PF\">避免热失控的热诱因、电诱因、机械诱因发生。</li>\n<li data-pid=\"hDYxc1g2\">当局部热失控发生时，控制它的蔓延，将损失尽可能控制低 —— <b>正常使用 &gt; 需要维修 &gt; 需要更换 &gt; 烧了电池 &gt; 烧了整车 &gt; 烧得太快导致人身伤亡</b>。但是，如果真到了「烧了电池」这一步，后果严重到什么程度就听天由命了。</li>\n</ul>\n<h2>第一条路：避免热失控的热诱因、电诱因、机械诱因发生</h2>\n<ol><li data-pid=\"idZLNt7o\"><b> 避免热诱因</b></li></ol>\n<p data-pid=\"jkpvO-BT\">同样的温度，有的电池很敏感，有的电池不敏感。<b>一般来说，能量密度越高的电池，越不稳定。</b></p>\n<ul>\n<li data-pid=\"W--ocjDM\">磷酸铁锂(LFP)比三元锂更稳定。</li>\n<li data-pid=\"DTiAyCqM\">在三元锂中，镍钴锰酸锂(NCM)比镍钴铝酸锂(NCA)更稳定。</li>\n<li data-pid=\"HAE5rj97\">在NCM中，NCM523比NCM811更稳定。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-3cb0807dece564ef4806c1a931345b3f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"866\" data-watermark=\"original\" data-original-src=\"v2-3cb0807dece564ef4806c1a931345b3f\" data-watermark-src=\"v2-72b13d3f2da0795ddeaf193814e136a2\" data-private-watermark-src=\"v2-6ea9b9850cdd4b5a035dc52620a722d8\"></p>\n<p data-pid=\"piPwiGE8\">从这个角度来说，比亚迪的刀片电池就很不错，因为它是磷酸铁锂电池。磷酸铁锂正极材料的<b>副反应<a href=\"https://www.zhihu.com/search?q=%E4%B8%B4%E7%95%8C%E6%B8%A9%E5%BA%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118498211%7D\" class=\"internal\">临界温度</a>比三元锂、锰酸锂、钴酸锂都要高</b>（发生放热副反应的条件更苛刻）、<b>副反应的放热量更低</b>。</p>\n<p data-pid=\"2l-FEyHH\">此外，在正极材料发生副反应时，磷酸铁锂材料的由于高能量的P=O键使得氧气不会轻易释放出来，这就降低了电解液遇到氧气起火的可能性<sup data-text=\"冯旭宁. 车用锂离子动力电池热失控诱发与扩展机理、建模与防控[D]. 清华大学.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2d31a27b90c51c893f059268c58243b6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"479\" data-watermark=\"original\" data-original-src=\"v2-2d31a27b90c51c893f059268c58243b6\" data-watermark-src=\"v2-a2eb93827eaace3452f4db7395d6011f\" data-private-watermark-src=\"v2-014d27f39a81b3291a0759ca31c988e5\"></p>\n<p data-pid=\"sshQltGk\">比亚迪的功劳并不在于重新发明了磷酸铁锂，而是大幅度提高了体积能量密度，使它在乘用车市场占据了一席之地。以前搭载磷酸铁锂电池的电动汽车，大部分很难突破400公里续航；而比亚迪首款搭载刀片电池的比亚迪“汉EV”，综合续航里程可达605公里。</p>\n<p data-pid=\"Ph3dvPhR\">后来的事情大家就知道了，磷酸铁锂的出货量节节攀升。<b>虽然磷酸铁锂并不是比亚迪发明的，但它的重新崛起确实离不开比亚迪的工艺与制造能力。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3278bdff140ae1e80b6a30c164a2e098_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"501\" data-watermark=\"original\" data-original-src=\"v2-3278bdff140ae1e80b6a30c164a2e098\" data-watermark-src=\"v2-90ff6a36ee53ab5241a999d8ecef4593\" data-private-watermark-src=\"v2-f66c70e1833e07fa76a43869c5b88721\"></p>\n<p data-pid=\"w7feYYYc\">从刀片电池这个例子可以看出，凡是可以更充分利用空间的技术，都可以让工程师做电池安全时更从容（用低能量密度电池、做更多安全设计），也算是避免了热失控现象发生。</p>\n<p data-pid=\"Uk4YfFSL\"><b>宁德时代的钠离子电池也很安全，也有可能用在车上，做标准续航版</b>：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ed4f52c0079c7a097b6f501721cd4a7a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1349\" data-rawheight=\"707\" data-watermark=\"original\" data-original-src=\"v2-ed4f52c0079c7a097b6f501721cd4a7a\" data-watermark-src=\"v2-728d6380ca5f0c629b076ba812fddd24\" data-private-watermark-src=\"v2-dcca0be1200eb396d0d306b3095f1b7a\"></p>\n<p data-pid=\"u6TYG_bq\"><b>从这个逻辑上讲，宁德时代CTP技术、零跑C01上的CTC技术、通用奥特能的无线BMS技术，也是间接降低了热失控的可能性。</b></p>\n<p data-pid=\"S8Hs7Wvv\">做好电池热管理，也可以避免热诱因的发生 —— <b>既要确保整个电池包不过热（充足的散热能力），也要确保每一节电芯不过热（一致性管理），甚至还要考虑到电芯的每个部位都不过热</b>。</p>\n<p data-pid=\"0KsSs441\">最丧心病狂的就是通用汽车给电芯做的「毛细血管」散热片。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cab01c350e9b77f5741e28d2f7117bae_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"716\" data-watermark=\"original\" data-original-src=\"v2-cab01c350e9b77f5741e28d2f7117bae\" data-watermark-src=\"v2-5004cf4915b1166a27206fa028e7a236\" data-private-watermark-src=\"v2-8caf9453b903671f4c68ae7259def5cc\"></p>\n<p data-pid=\"euKGaUj1\">关于电池热管理，在此就不展开讲了，有兴趣可以看我的这篇文章：</p>\n<a href=\"https://www.zhihu.com/question/505242375/answer/2453317813\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b6a2d45609f21d99aaa92deb40de9af8_qhd.jpg?source=b1748391\" data-image-width=\"1355\" data-image-height=\"770\" class=\"internal\">能不能通俗易懂地说说电池包热管理到底是什么，它的意义是什么？</a><h3> 2. 避免电诱因</h3>\n<p data-pid=\"Kxeyljbk\">你可能有点奇怪，电池包这么一个高压高能的东西，它不电到别人就不错了，还有人能用电来伤害它？</p>\n<p data-pid=\"YfFG6aDe\">事实上，在电动汽车发展早期，很大一部分惨烈的自燃事故都是过充引起的。例如著名的深圳4.26电动大巴起火事故，就是过充引起的。</p>\n<a href=\"https://zhuanlan.zhihu.com/p/96247109\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-bb19e12b54298e319148b13e66e43281_qhd.jpg?source=b1748391\" data-image-width=\"440\" data-image-height=\"293\" class=\"internal\">第一电动网：独家报道 | 深圳4.26电动大巴起火调查结果公布：过充引发火灾</a><p data-pid=\"qlv9cipl\">这个事故当时的社会影响非常恶劣，这是因为：<b>如果说热诱因的自燃是技术达到state of art水平也无法避免的小概率「天灾」，那充电自燃就完完全全属于「人祸」了！</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-011842ebf5d4b231bc94f5603d492f65_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"998\" data-rawheight=\"572\" data-watermark=\"original\" data-original-src=\"v2-011842ebf5d4b231bc94f5603d492f65\" data-watermark-src=\"v2-6679195439496dfd519f394e9630b122\" data-private-watermark-src=\"v2-655c34a46e5d5ec15b25f9b1a17ea167\"></p>\n<p data-pid=\"adv2DWbr\">首先车端BMS失效，充满了也不发信号；其次充电桩明知电压很高，却不主动断电。就这样，傻子碰到了疯子，酿成了一场事故！ </p>\n<p data-pid=\"tMInafVo\">说到底，还是程序逻辑写得太不仔细、太菜！这次不是电池工程师的问题，是程序员的问题。</p>\n<p data-pid=\"7FZHZ1YU\">后来国家颁布了标准&lt;GB/T 27930 -2015电动汽车非车载传导式充电机与BMS之间通信协议解析方法&gt;，详细规定了充电程序怎么写。这个国标相当贴心，基本上就是手把手教你编程了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed34a8a3db6171954a1d102e826b5f36_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"902\" data-watermark=\"original\" data-original-src=\"v2-ed34a8a3db6171954a1d102e826b5f36\" data-watermark-src=\"v2-82ebfa000d01521a96d0112c3e7c3636\" data-private-watermark-src=\"v2-db48174f899bffae894a144fd8c8d343\"></p>\n<p data-pid=\"OqgaT-gW\"><b>即使你是一个刚成立的造车新势力，只要按着标准来写，就不会出问题</b>！反过来说，为什么现在很少看到过充导致的热失控了，正是因为各个车企和充电桩都按国标写充电逻辑了。</p>\n<h3>3. 避免机械诱因</h3>\n<p data-pid=\"uC4UsZuu\">避免机械诱因，其实就是电池包PACK保护电芯不受外界的物理干扰：包括挤压、针刺、振动等等。PACK层面的安全性，主要由国家/国际标准来保证。</p>\n<ul>\n<li data-pid=\"pKIPY9xx\">\n<b>国家标准</b>：如GB/T 31485-2015，GB/T 31467.3-2015，GB/T 31498-2015等。</li>\n<li data-pid=\"tecpOfCB\">\n<b>国际标准</b>：国外相关的标准包括ISO 12405-2014，IEC 62133-2015, UL 2580-2010，SAE J1929-2011，JIS-C 8715-2-2012等。</li>\n<li data-pid=\"xRLNANiI\">\n<b>核心</b>：以GB/T 31485-2015，IEC 62133，SAE J2464为核心。</li>\n</ul>\n<p data-pid=\"tRMUvmvA\">CNCAP的2021年新规增加了柱碰，这对电动汽车的考验非常大。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-22eaefd3f2d28b9f7f20c004b8e10254_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"557\" data-watermark=\"original\" data-original-src=\"v2-22eaefd3f2d28b9f7f20c004b8e10254\" data-watermark-src=\"v2-f4a761d3dd304e2c363976707cd18fb1\" data-private-watermark-src=\"v2-674c079a6eafd378278ddc56e39ab34c\"></p>\n<p data-pid=\"Uy4y3tqB\">那根刚性柱子长这个样子：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9ff2cdab03546d2222dc874d0ff945cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1261\" data-rawheight=\"629\" data-watermark=\"original\" data-original-src=\"v2-9ff2cdab03546d2222dc874d0ff945cb\" data-watermark-src=\"v2-689fe5b5e38fb9181ffaf4027315f6e8\" data-private-watermark-src=\"v2-df127380a0f4f5460b83c5d30b6b3961\"></p>\n<p data-pid=\"brUFZn0W\">碰撞现场是这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a507e7ef8cc7d51f2ad80007226aa7e3_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"270\" data-watermark=\"original\" data-original-src=\"v2-a507e7ef8cc7d51f2ad80007226aa7e3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ad7jbD_p\">抵抗这种撞击，思路也很简单：<b>一是加强电池包，二是加强车身侧面</b>。比如说，大众MEB平台的电池包铝合金框架有很多横向的肋面，这就可以抗侧面冲击。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a92e25edf51f2c96044af6aec596dbe_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"803\" data-watermark=\"original\" data-original-src=\"v2-0a92e25edf51f2c96044af6aec596dbe\" data-watermark-src=\"v2-827417586e33397624678a6695657d66\" data-private-watermark-src=\"v2-9bbf95349b729e8ebf4d73166e21bc20\"></p>\n<p data-pid=\"FDyRPJa1\">再如岚图FREE，侧面结构上也进行了特殊设计：B柱使用了1500MPa的超高强度钢，车门门槛使用了1500MPa的双层结构超高强度钢，而车门防撞梁更是使用了行业最高等级的2000MPa强度的热成型钢。可惜的是，岚图FREE在CNCAP测试还是用的老标准，没有进行柱碰，只有侧碰。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5e72ca49e58149621acccab69eaf3985_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"267\" data-watermark=\"original\" data-original-src=\"v2-5e72ca49e58149621acccab69eaf3985\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KHkrdUYs\">通用奥特能平台的电池包采用了焊接工艺：<b>为了实现超高强度，电池包采用了61%的高强度钢、37.5%的超高强度钢，总体占比约98.5%的高强度材料铸造不出来，只能焊接</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ca30cf8e1705691c9ca67366f0590b8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"355\" data-watermark=\"original\" data-original-src=\"v2-5ca30cf8e1705691c9ca67366f0590b8\" data-watermark-src=\"v2-3a4d27edb88214cb00c0272500e00ac9\" data-private-watermark-src=\"v2-b637d7353df165adc8579977928753d0\"></p>\n<p data-pid=\"Ce-XzVjQ\"><b>这个电池包强的有点变态，从5米高自由落体到圆柱刚体上都没事</b>：</p>\n<p data-pid=\"xyZNy_e_\">更不用说除电池包外，车身本身也有加强：<b>凯迪拉克LYRIQ车身中段采用直通梁设计，并增加1.5号梁和3.5号梁。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a543ccaac8f35026ef4a56a93740d798_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"464\" data-watermark=\"original\" data-original-src=\"v2-a543ccaac8f35026ef4a56a93740d798\" data-watermark-src=\"v2-5573bc2b5f31fb8273d1c0ba4f6a601c\" data-private-watermark-src=\"v2-3104805bca20df4238272ce3e182a254\"></p>\n<p data-pid=\"vdbQCVBt\">此外，门槛梁内也采用了挤压铝加强设计，以实现对电池包更好的保护：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-163ab4a00c1acfdbc148c31cdedc3f44_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"444\" data-watermark=\"original\" data-original-src=\"v2-163ab4a00c1acfdbc148c31cdedc3f44\" data-watermark-src=\"v2-faf2b28528af98badfc2a042203e9090\" data-private-watermark-src=\"v2-6863bde526ad54275c5424df36df6eed\"></p>\n<p data-pid=\"cTyPxYpo\"><b>这个电池包强的有点变态，从5米高自由落体到圆柱刚体上都没事</b>：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f90c64d339668035dba54eb5aaab2973_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"913\" data-watermark=\"original\" data-original-src=\"v2-f90c64d339668035dba54eb5aaab2973\" data-watermark-src=\"v2-492285ae339110a7f67436698c45bcbf\" data-private-watermark-src=\"v2-f762847be85a7832d58841a7c58592b6\"></p>\n<h2>第二条路：局部热失控时，控制热蔓延</h2>\n<p data-pid=\"o6JU7ons\">岚图FREE有两个版本，一个是纯电版，一个是增程版。纯电版采用的是琥珀电池，电芯间填充了<b>有机硅聚合物+低密度隔热材料+阻燃剂的复合材料</b>，形成高效的隔热阻燃绝缘层，使得每个电芯单元像“琥珀”一样处于充分包裹中。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-836a597d5ff52e3c6d4c76ba53dfd382_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"270\" data-watermark=\"original\" data-original-src=\"v2-836a597d5ff52e3c6d4c76ba53dfd382\" data-watermark-src=\"v2-495606c3cb978c76f9902a42754fc631\" data-private-watermark-src=\"v2-de38f1bcadc59b332ee477c7857ed044\"></p>\n<p data-pid=\"BwJiLThr\">具体效果就是单个电芯热失控了、不小心“发烧”了，但在“就地隔离”的措施下，不会扩散到周围的电芯<sup data-text=\"\" data-url=\"https://zhuanlan.zhihu.com/p/357980051\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-07c9cd6b68b7166a3cf0fd754cb09ffb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"256\" data-watermark=\"original\" data-original-src=\"v2-07c9cd6b68b7166a3cf0fd754cb09ffb\" data-watermark-src=\"v2-4940a25fb0ec630b5e3ace5b516fc2be\" data-private-watermark-src=\"v2-5b910f0647ad96ac95fea1be4b334d00\"></p>\n<p data-pid=\"BNsF1K8I\">岚图FREE版电池包中加入<b>层状Al-Si云母和气凝胶</b>，且电芯和云母、气凝胶会像云母石一样层叠堆积，因而命名为“云母电池”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-23991a8be44acc5dccbb7ffca95108e7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"201\" data-watermark=\"original\" data-original-src=\"v2-23991a8be44acc5dccbb7ffca95108e7\" data-watermark-src=\"v2-5a738dccec426ed912a406a2b87986da\" data-private-watermark-src=\"v2-397be78ff1606dcf8b0b690803f834ee\"></p>\n<p data-pid=\"xYBMId2-\">云母的特点是耐高温，可以防止热失控的进一步蔓延，特别是防止明火对热扩散的加速效果。<b>特斯拉也采用了相似的方案，在<a href=\"https://www.zhihu.com/people/3159a84352b22dfa31d20a3c94c8dbb9\" class=\"internal\">@工科男老王</a>的拆车视频中有介绍</b><sup data-text=\"\" data-url=\"https://www.zhihu.com/question/442501004/answer/1794938676\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup><b>：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a73eb1d6dfc915bdf4973ae643678a72_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"442\" data-rawheight=\"248\" data-watermark=\"original\" data-original-src=\"v2-a73eb1d6dfc915bdf4973ae643678a72\" data-watermark-src=\"v2-9a46a566148e58dc768b13eb14ec6a41\" data-private-watermark-src=\"v2-a7971164ec25233db592678a050a2140\"></p>\n<p data-pid=\"NtH8N1JK\">通用汽车作为汽车技术界的老法师，在通用奥特能平台上也采用了很多控制热蔓延的安全措施。例如：</p>\n<ul>\n<li data-pid=\"0hyD8cBo\">\n<b>电芯之间</b>：使用加厚设计的纳米级气凝胶，降低电芯之间的热传递。这样一来，在单体电芯发生失效时，可以有效抑制电芯之间的热扩散。</li>\n<li data-pid=\"EaYEJfZm\">\n<b>模组层面</b>：模组内设计了快速排气通道，在电芯单体热失控时，可以快速排出高温气体。</li>\n<li data-pid=\"QhBNUsug\">\n<b>电池系统</b>：整包也有快速排气通道，通过大面积防爆阀排出高温气体。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-912523fa35567eeaac813007b1f9ad3f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"589\" data-watermark=\"original\" data-original-src=\"v2-912523fa35567eeaac813007b1f9ad3f\" data-watermark-src=\"v2-a6c5f0c0122866ca38b75d1c62ce6230\" data-private-watermark-src=\"v2-d44ad57c18ff57b35563abe555f6d16f\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"YcKtH-ee\">其它车企的电池包的基本思路也都是这样，只不过有的车企做的多一些，有的做得少一些，还有一些想多做但集成水平不行。</p>\n<h2>小结</h2>\n<p data-pid=\"36YNg2Rl\">最后做个小结：</p>\n<ul>\n<li data-pid=\"C5ynj-ZD\">由于热诱因、电诱因、机械诱因，再加上热蔓延，电池由「可控状态」渐渐变成了「失控状态」，核心的传导环节都是「热」，所以才被称为「热失控」。</li>\n<li data-pid=\"lrAdxXjQ\"><b>避免热失控第一条路就是让热诱因、电诱因、机械诱因别发生。</b></li>\n<ul>\n<li data-pid=\"Hf25yHD3\">\n<b>避免热诱因</b>：用更安全的电芯，做好热管理。</li>\n<li data-pid=\"3bHjUFll\">\n<b>避免电诱因</b>：按国标设计充电程序，防止过充。</li>\n<li data-pid=\"TFv9tdKK\">\n<b>避免机械诱因</b>：把车身与电池包设计得强一些，典型考核标准是CNCAP的柱碰。</li>\n</ul>\n<li data-pid=\"ZJjd1M5L\">\n<b>避免热失控的第二条路是控制热蔓延，</b>主要是做好电芯间、模组间的阻隔；再就是在电池包中给高温气体留出通道，让它顺利排出去，而不是加热那些正常电芯。</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/529055903/answer/2470287834?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/526318008?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">各家新能源车企是如何避免出现锂电池热失控现象的？</a><br><a href=\"http://www.zhihu.com/question/505680618?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新能源车企销量数据超预期提振，氢能重卡概念大涨的原因是什么？</a><br>\n","link":"http://www.zhihu.com/question/529055903/answer/2470287834?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在两亿年前，昆虫就会“搞间谍”与“牵红线” | 中生代往事（下）","date":"2022-05-06 02:40:12","description":"\n<p data-pid=\"fX_U0R9L\">上一期我们讲完了<u><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI3MzE3OTI0Mw%3D%3D%26mid%3D2247539750%26idx%3D1%26sn%3D8679fe291f2dc459efa55e1471cb2d01%26chksm%3Deb252b22dc52a23433695aa9d2d86b0834c20faecfe7d517baf77e7f50e6a3639ae4b1dd78fd%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">昆虫帝国中生代四大军团的“军事改革”</a></u>。这让小个子的昆虫们拥有了巨大力量，也使它们的国家机器开始严丝合缝地运转起来。</p>\n<p data-pid=\"dq4EfR2w\">本期笔者将带来最后两个不为人知的“革命”内容，分别是代表“特务政治”的中生代中期拟寄生性昆虫“革命”和自我定位为植物月老的传粉昆虫的辐射和演替。</p>\n<h3><b>残酷的“特务机构”</b></h3>\n<p data-pid=\"CM8iu2Ys\">一个特务的最高境界，就是打入敌人内部，并用敌人自己的资源将敌人消灭。自然界中的这种行为就叫<b>拟寄生</b>。</p>\n<p data-pid=\"IzQCG25V\">与寄生不同，拟寄生<b>最终会杀死寄主</b>。比起直接的猎杀，这种方式更加残忍无情。寄主会成为拟寄生昆虫幼虫的食物，并给与其幼虫足够的保护，最终被破体而出走向死亡。甚至还有破体而出后不会立即死亡的类型，寄主要继续保护寄生昆虫化茧直至饿死。</p>\n<p data-pid=\"iftWu_0x\">就是因为过于残忍，大量的恐怖电影都模仿了这一繁殖方式，只是寄主成了人类。比如前文提到的异形，结合它的真社会性和外骨骼，这个异形完全就是照着昆虫的特征设计出来的。</p>\n<p data-pid=\"1hLZno7a\">拟寄生昆虫占到如今昆虫多样性的20%。七大家族（脉翅目、鞘翅目、捻翅目、双翅目、毛翅目、鳞翅目、膜翅目）都设立了此<b>特务机构</b>。这其中光膜翅目的机构就占全部拟寄生种类的75%，而双翅目又占了20%。这两个昆虫帝国中的“<b>锦衣卫</b>”和“<b>东厂</b>”对帝国中的其它家族展开了血腥的“特务统治”（很多寄主也是昆虫）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9879c8778ed815beaf8f8ef42726e6bf_b.jpg\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic4.zhimg.com/v2-9879c8778ed815beaf8f8ef42726e6bf_r.jpg\"><figcaption>一只寄生蜂正在往蚜虫体内产卵（图源：CSIRO）</figcaption></figure><p data-pid=\"8ptCvvvA\">在<b>早侏罗世</b>时，膜翅目就已经设立了“锦衣卫”，演化出了拟寄生行为。而根据幼虫形态证据，鞘翅目和捻翅目在<b>白垩纪</b>时也组建了自己的“特务机构”。</p>\n<p data-pid=\"Jtwd2yz1\">中生代中期的拟寄生性昆虫革命是<b>整个陆地生态网历史</b>中<b>最为重要</b>的一次演化事件。这种靠寄生打入内部的方式比起直接的捕食来的更有效率。虽然更加残忍，但是却极大地丰富了陆地生态系统的多样性，并且促进了整个生物圈的一次“<b>战备升级</b>”。</p>\n<p data-pid=\"hYlwT_Wk\">从此“间谍战”与“反间谍战”就成了生物圈中不可缺少的一环。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-58914f20400724d87c876dd07c51258c_b.jpg\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"567\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic1.zhimg.com/v2-58914f20400724d87c876dd07c51258c_r.jpg\"><figcaption>白垩纪缅甸琥珀中的拟寄生，图C为一只被拟寄生的蟑螂，身体里可能有个雌性的大花蚤，周围有三只雄性，图EF为雄性大花蚤（图源：Jan Batelka）</figcaption></figure><h3><b>狂热的植物月老</b></h3>\n<p data-pid=\"MpPUyXzJ\">讲完了恐怖的“特务机构”，我们来说点八卦。比起见到单身男女就能信手掏出厚厚一叠名单并配对的大爷大妈们，昆虫对于拉郎配更加的热情。只不过它们的对象并不是不堪其扰的“单身狗”，而是植物们。</p>\n<p data-pid=\"MYAW11gB\">作为如今地球上植物界毫无疑问的<b>扛把子</b>，被子植物拥有着植物界最高的多样性。从达尔文时代起，人们就认为多姿多彩的被子植物类群和昆虫的传粉密不可分。因为传粉可以增加相似物种的生殖隔离可能性，从而增加物种的形成率。同时传粉还能提高植物的授粉和种子生产效率，从而降低灭绝的可能。</p>\n<p data-pid=\"TqOHE1Uu\">以往人们认为，裸子植物比较“原始”的风媒传播是逐渐被被子植物复杂的动物交互传播所取代。然而化石证据却告诉我们整个中生代昆虫都在<b>孜孜不倦地为裸子植物传粉</b>，这种行为早在<b>二叠纪</b>时期就已经出现了。</p>\n<p data-pid=\"OCjVnd5W\">这些行为正是给在随后的白垩纪中期大发展的被子植物传粉做着热身准备。化石记录表明<b>至少在昆虫的六个家族</b>里都进化出了给裸子植物传粉的月老，分别是鞘翅目、双翅目、长翅目、脉翅目、缨翅目和奇翅科（一种已经灭绝的网翅总目类群）。</p>\n<p data-pid=\"lxuuP8Kz\">在中生代，<b>长口器类昆虫</b>（可以在传粉过程中起到虹吸管的作用）种类繁多，是给裸子植物拉郎配的主要月老团体。仅在克钦琥珀中就发现了五个拥有长口器的昆虫类群。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d523cd7df37ef6d665a8001e6afad482_b.jpg\" data-size=\"normal\" data-rawwidth=\"473\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"473\" data-original=\"https://pic3.zhimg.com/v2-d523cd7df37ef6d665a8001e6afad482_r.jpg\"><figcaption>一种中生代长口器类昆虫化石，可以看到框出来的很长的口器，比例尺：5 mm（图源：Conrad C. Labandeira）</figcaption></figure><p data-pid=\"CEhSxtJr\">研究这些口器的长度就能够知道被传粉植物的花被管的长度。比较有趣的是，和喜欢盯着单一目标猛攻的大爷大妈们不同，克钦琥珀中的长口器昆虫的<b>口器长度大都不同</b>。这说明它们各有所好，并且具有不同的传粉生态位。</p>\n<p data-pid=\"-r68P3fy\">划分较为明确的传粉对应关系也减少了内卷，使传粉效率进一步上升，从而增加新人的配对成功率和月老的多样性。不过这种绑定关系非常紧密的一对一服务也在晚白垩世<b>裸子植物衰退</b>的大趋势下造成了此类昆虫的<b>大量灭绝</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2d336eb7b6a68d1af3dac6fefa8a73d7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"1039\" class=\"origin_image zh-lightbox-thumb\" width=\"1039\" data-original=\"https://pic4.zhimg.com/v2-2d336eb7b6a68d1af3dac6fefa8a73d7_r.jpg\"><figcaption>长口器昆虫阿纽蝎蛉帮裸子植物传粉复原图（图源：杨定华）</figcaption></figure><p data-pid=\"D_RWysL9\">化石资料显示被子植物的繁盛和辐射是在白垩纪中期开始的，根据分子系统学和化石证据推论其起源应该在白垩纪早期。因为大部分现生的基干（这部分最接近原始被子植物）被子植物都是由昆虫传粉的，所以不难推断昆虫传粉推动了白垩纪早期被子植物的发展。</p>\n<p data-pid=\"sJpUCfYn\">化石还保留了昆虫携带被子植物花粉的一些证据。不过在白垩纪这样的化石较为罕见，只有在克钦琥珀中保留了一些较为明确的证据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f6bf4a1410db78306a9b5b17ab8cc4b_b.jpg\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"659\" data-original=\"https://pic4.zhimg.com/v2-0f6bf4a1410db78306a9b5b17ab8cc4b_r.jpg\"><figcaption>克钦琥珀中保存的昆虫给植物传粉证据，图A中是一只传粉甲虫（花蚤），红框处为被子植物花粉。图B为给裸子植物传粉的传粉丽蛉（图源：王博）</figcaption></figure><p data-pid=\"gsw6eJSQ\">时代在变化，手段也要跟着变才能顺应。随着白垩纪中期裸子植物和被子植物霸权的交接，这群在正主周围叽叽喳喳的昆虫月老们也开始了<b>自我变革</b>。</p>\n<p data-pid=\"nzc5Erge\">一些昆虫最直接，摇身一变，从给裸子植物传粉变成给被子植物传粉。还有死守底线只给裸子植物传粉的，于是多样性随着裸子植物一起大幅度下降，比如一些特殊的蓟马。而一些长口器昆虫不懂变通就只能灭绝。</p>\n<p data-pid=\"ubxPxhOL\">这一时期的最后胜利者是专门给新霸主被子植物服务的新型传粉昆虫，比如蜜蜂。当然一开始拉对象的昆虫还是有点手生的，不像今天这样主要由<b>蜜蜂、虻类、蝴蝶和飞蛾</b>等专业人才来匹配，而是一些小型的<b>甲虫类</b>。</p>\n<p data-pid=\"isTU132m\">随着被子植物群体渐渐壮大，这些新贵们终于在晚白垩世至新生代稳固了月老的定位。</p>\n<h3><b>结语</b></h3>\n<p data-pid=\"6o6qBUHT\">昆虫帝国在中生代的“二次革命”至此就全部讲完了。在这轰轰烈烈的五大“革命举措”的推动下，昆虫在恐龙横行的时代站稳了脚，并快速从纷繁复杂的新环境中脱颖而出。</p>\n<p data-pid=\"bd-6TcmB\">它们不仅摆脱了二叠纪末的帝国坟场带来的毁灭之痛，还在中生代书写了第一帝国没有的篇章。同时紧紧抱住新兴势力被子植物的大腿，取得了任何一个物种都难以望其项背的多样性优势。</p>\n<p data-pid=\"Hc1BJJbu\">然而人类的一举一动也在影响着这个盘踞地球多年的庞大帝国，昆虫的多样性正在人类的影响下快速下降。</p>\n<p data-pid=\"_a9kO2DN\">也许，作为“万物灵长”的我们也该俯下身好好观察这个不起眼却又无比重要的同行者。在化石里翻看它们的奋斗史，去更好地了解和保护脚下这个多彩而美丽的星球！</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Hi6_u6zV\"><b><i>参考文献：</i></b></p>\n<p data-pid=\"U_jxGxZe\"><i>[1]  Wang Bo, Xu Chunpeng, Jarzembowski E.A. (2022) Ecological radiations of  insects in the Mesozoic. Trends in Ecology &amp; Evolution,   <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.tree.2022.02.007\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.tree.</span><span class=\"invisible\">2022.02.007</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"GNohMQbc\"><i>[2]  Luo Cihang, Beutel R.G., Engel M.S., Liang Kun, Li Liqin, Li Jiahao, Xu  Chunpeng, Vrsansky P., Jarzembowski E.A., Wang Bo, 2021. Life history  and evolution of the enigmatic Cretaceous–Eocene Alienopteridae: A  critical review. Earth-Science Reviews.   <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.earscirev.2021.103914\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.earsc</span><span class=\"invisible\">irev.2021.103914</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"2Y6nuUPc\"><i>[3]  Michener, C.D. and Grimaldi, D.A. (1988) The oldest fossil bee: apoid  history, evolutionary stasis, and antiquity of social behavior. Proc.  Natl. Acad. Sci. U. S. A. 85, 6424–6426</i></p>\n<p data-pid=\"G0v_ZNWL\"><i>[4]  Wenzel, J.W. (1990) A social wasp’s nest from the Cretaceous period,  Utah, USA, and its biographical significance. Psyche 97, 21–30</i></p>\n<p data-pid=\"_c3o6Q_L\"><i>[5] Batelka, J. et al. (2021) The complete life cycle of a Cretaceous beetle parasitoid. Curr. Biol. 31, R118–R119</i></p>\n<p data-pid=\"hlMhNOZt\"><i>[6]  Labandeira, C.C. (2010) The pollination of mid Mesozoic seed plants and  the early history of long-proboscid insects. Ann. Mo. Bot. Gard. 97,  469–513</i></p>\n<p data-pid=\"738kSgBw\"><i>[7] Peñalver, E. et al. (2012) Thrips pollination of Mesozoic gymno sperms. Proc. Natl. Acad. Sci. U. S. A. 109, 8623–8628</i></p>\n<p data-pid=\"i5ATiy-x\"><i>[8]  Xu, C., Wang, B., Fan, L., Jarzembowski, E.A., Fang, Y., Wang, H., Li,  T., Zhuo, D., Ding, M., Engel, M.S. (2021). Widespread mimicry and  camouflage among mid-Cretaceous insects. Gondwana Research.  <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.gr.2021.07.025\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.gr.20</span><span class=\"invisible\">21.07.025</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"1vdddG45\"><i>[9]  Fan, L., Xu, C., Jarzembowski, E. A., Cui, X. (2021). Quantifying plant  mimesis in fossil insects using deep learning. Historical Biology,  1-10. <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1080/08912963.2021.1952199\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1080/0891296</span><span class=\"invisible\">3.2021.1952199</span><span class=\"ellipsis\"></span></a>.</i></p>\n<p data-pid=\"14FKoqBv\"><i>[10]  Heads, S.W. (2008) The fifirst fossil Proscopiidae (Insecta,   Orthoptera, Eumastacoidea) with comments on the historical biogeography  and evolution of the family. Palaeontology 51, 499–507</i></p>\n<p data-pid=\"gKNHrFGX\"><i>[11]  Tapanila, L. and Roberts, E.M. (2012) The earliest evidence of  holometabolan insect pupation in conifer wood. PLoS One 7, e31668</i></p>\n<p data-pid=\"--g535ut\"><i>[12]  Li Ya, Li Yan-Da, Wang Yong-Dong*, Schneider Harald, Shi Gong-Le, 2022.  Re-appraisal of lacewing mimicry of liverworts from the mid-Cretaceous  Kachin amber, Myanmar with a description of Selaginella cretacea sp.  nov. (Selaginellales, Selaginellaceae). Cretaceous Research, 133:105143.  <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.cretres.2022.105143\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.cretr</span><span class=\"invisible\">es.2022.105143</span><span class=\"ellipsis\"></span></a>.</i></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"reSnTo-D\">作者：王冠群、王博、潘浩晨</p>\n<p data-pid=\"iVg0NvWV\">单位：中国科学院南京地质古生物研究所</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI3MzE3OTI0Mw%3D%3D%26mid%3D2247539864%26idx%3D1%26sn%3D60ee199c66f08df4c440fc30c705425f%26chksm%3Deb252b9cdc52a28ae7ce993dc10d38084db1e4ba3b03392025c9489b9c5e97e3f327b10385e8%26mpshare%3D1%26scene%3D2%26srcid%3D0506VZPUoQIE3KU0SHgJB6cS%26sharer_sharetime%3D1651796744298%26sharer_shareid%3D3249b566c07a6aba8ff09dfb2621c64b%23rd\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-30d351d117e3d0fd5e14083670470a7e_qhd.jpg\" data-image-width=\"898\" data-image-height=\"383\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在两亿年前，昆虫就会“搞间谍”与“牵红线” | 中生代往事（下）</a><p data-pid=\"G14TtoTm\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/da971e1f564d733611f6a9a51930c4aa\" data-hash=\"da971e1f564d733611f6a9a51930c4aa\" data-hovercard=\"p$b$da971e1f564d733611f6a9a51930c4aa\">@中国科普博览</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/df247603a41cf58a466551f0ab09d525\" data-hash=\"df247603a41cf58a466551f0ab09d525\" data-hovercard=\"p$b$df247603a41cf58a466551f0ab09d525\">@科普中国</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/0f2006385065c411ad6d08b4fc62b788\" data-hash=\"0f2006385065c411ad6d08b4fc62b788\" data-hovercard=\"p$b$0f2006385065c411ad6d08b4fc62b788\">@知乎科学</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-ke-yuan-nan-jing-gu-sheng-wu-suo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中科院南古所</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/509956618?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"汽车热管理系统目前有哪些技术难点呢？","date":"2022-05-06 02:14:59","description":"\n<p data-pid=\"wsgbSzVR\">热管理系统实际在动力电池的研发中，是有着专属设计“V”模型的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-df4642da689bdf11f8b16447b007eb59_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1146\" data-rawheight=\"840\" data-watermark=\"watermark\" data-original-src=\"v2-df4642da689bdf11f8b16447b007eb59\" data-watermark-src=\"v2-f29c42265c93c70cf10b19f44e01f9a5\" data-private-watermark-src=\"v2-2324b46f0090e559fe70b2c6a80d22a5\"></p>\n<p data-pid=\"Ir59Ltus\">这个“V”模型有五条主线，三个层级。（就不详解了，这个图讲解得很清晰了。）</p>\n<p data-pid=\"xJcTr7Pv\">如果要说难点，系统设计的四个模块，<b>冷却、加热、保温、热失控阻隔（TRO）</b>系统，不仅个个都有技术难点，而且综合起来，技术难点更多。</p>\n<p data-pid=\"PVvcgRGs\">举<b>两个简单的例子</b>，比如动力电池在充放电的时候会放热，那到底是<b>要保温还是要散热优先</b>？</p>\n<p data-pid=\"-UE8xpzR\">如果所处的环境是北方的寒冷冬天，不做保温措施，任凭这个动力电池的余热散去，不用几个小时，温度降到和外界温度一样，零下二三十摄氏度，那么按照锂电池的特性，三元锂电池大概还能有部分电量，磷酸铁锂电池抗寒能力差，温度低到零下三十摄氏度，说不定就给你直接罢工了。所以，按照现在的情况，北方冬季出去浪了一天，把车停在冰天雪地里，第二天还想开，就得等电池升温，才能开始工作。否则低温强行用电，可是会损坏电芯的。</p>\n<p data-pid=\"sw9lU6CB\">下图是某厂家的三元锂电池和磷酸铁锂电池实验数据的一个对比，可以做个参考。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-984879e4c243bbd12e1244c15fb90629_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"340\" data-watermark=\"watermark\" data-original-src=\"v2-984879e4c243bbd12e1244c15fb90629\" data-watermark-src=\"v2-fbfa30aba3e4882004cac91e1b951223\" data-private-watermark-src=\"v2-eb49add0381345104761787a1a82ac57\"></p>\n<p data-pid=\"8VvZcEnP\">所以为了避免这种情况出现，就要让电池余热不散。余热如果不散去，那么就不用耗能把动力电池温度升到合适的工作温度了。其中最简单，成本最低的解决方案就是加强保温。</p>\n<p data-pid=\"i1AKVTWl\">如我之前回答所写的，电芯组成的<b>模组加保温层，把可能的散热渠道都用保温层给你挡住。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a83be57f5c379cc87e737a802ae8c256_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"271\" data-watermark=\"watermark\" data-original-src=\"v2-a83be57f5c379cc87e737a802ae8c256\" data-watermark-src=\"v2-1ca9d96a6f2ec1ab18795dc079aaaebc\" data-private-watermark-src=\"v2-b1d19d6ce2cdc870ca963998dfb34450\"></p>\n<p data-pid=\"qu0cJOlF\">模组组成的<b>箱体加保温层，给箱体加个和外界热交换趋向零的外套。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-3b46942175aeabdde7bfbf31fe3f8ff5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-3b46942175aeabdde7bfbf31fe3f8ff5\" data-watermark-src=\"v2-a0a8f5a225aa5fd5e81f89f4b3a05a40\" data-private-watermark-src=\"v2-c5b1f8eef719e8cd4e1c97e3d415c990\"></p>\n<p data-pid=\"QgN6CkXp\">这种加保温层的方法简单粗暴，但成本低，见效快，工艺简单，只要保温层弄得好，不仅静置很久也不用额外耗能加热电池，而且平时的冬季续航（温度低了不用加热电池，捂着就能自己慢慢暖和）绝对上提一大截，而且也不会太冷充不进电，为什么厂家不弄？</p>\n<p data-pid=\"FL8YN2w-\">因为区域气温不会一直变化，即便是寒冷的北方，比如哈尔滨冬天最低历史气温达到过-52.3℃，平时冬季零下二三十度也是常态，给动力电池保温层弄得厚厚的，如果穿上了几层厚棉袄，让热量不和外界零下几十度的空气交换，保障动力电池在合适工作温度区间，或者停留在室外也不至于十来个小时就降到和外界气温一致，这办法在冬天绝对可行，能有效提高续航，降低能耗，即便停了一晚上，第二天照样充放电正常，容量不会狂降。</p>\n<p data-pid=\"qkeVQy44\">但哈尔滨也不只是冬天，夏天最高历史温度是39℃，平时夏天的温度也超过了三十摄氏度。本来外界温度高，电池温度本身也高，原本导热材料贴在模组上来个自然冷却就行，或者加一个简单低成本的风冷设计就可以解决动力电池的散热问题，不让动力电池的电芯热量积累到一定程度。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3fa65aba0bf053de3880e66fcf3f782b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"317\" data-watermark=\"watermark\" data-original-src=\"v2-3fa65aba0bf053de3880e66fcf3f782b\" data-watermark-src=\"v2-3f83917ea518974c7a3729081e7a0575\" data-private-watermark-src=\"v2-9011fd972fa40100e77e1bc36a6304f9\"></p>\n<p data-pid=\"uhjksJaQ\">但是如果动力电池模组已经加了保温层，箱体加了保温层，而且这都是在电池包内部弄的，就是为了让电芯的热散不出去。这样的电池包的散热性怎么办？关键电池包也装载在车里，换季就把动力电池返厂，把电池包拆成一个个模组，再拆模组保温层？拆了保温层，还得设计风冷/液冷风路，添加上去？这样豆腐盘成了海鲜价格。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d58285478765eb4c8c30e2035ef7ecb0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-d58285478765eb4c8c30e2035ef7ecb0\" data-watermark-src=\"v2-2561809ccbed62f5acc87e89ffbf58a9\" data-private-watermark-src=\"v2-514fc3565c6d7dd33ca5c39111a17162\"></p>\n<p data-pid=\"xoBvjCJY\">所以，怎么能在<b>低成本的前提下</b>，让动力电池又能快速散热又能尽量保温？这在技术上本身就是两难。</p>\n<p data-pid=\"fQ9fvJid\">目前来看，车企还是<b>优先动力电池散热</b>，毕竟南方市场的电动车销售还远远没有饱和，另外不散热的话，电池热量积累到一定程度，热失控的风险也很大，一旦自燃多了，品牌就玩完了。</p>\n<p data-pid=\"xcIeJtUA\"><b>所以现在新能源车企是安全第一，续航第二</b>，如果可以的话，再加个南方市场第一，太热太冷的地区，不好意思，你们先站旁边。</p>\n<p data-pid=\"0R4LTBd8\">另一个例子，就是<b>热管理要保障不同电芯的温度均衡性</b>。现在的动力电池动辄一两百颗电芯（特斯拉电池包含几千颗小电芯），用简单的话说，就是要让电池包所有的电芯温度尽量保持一致，如果不能完全均衡，那么也至少控制在5-8℃内的温差，这样在电池包的性能、寿命和成本上面达到一个较好的平衡。</p>\n<p data-pid=\"E9VLx7j9\">而单体电芯的工作状态本身也有不同，比如总有先放完电的、别的电压还很高，或者先充完电的、别的才开始充。电芯本身的工作温度就是有高有底。</p>\n<p data-pid=\"Wl6VXusl\">有的75KWH电池，里面有104颗磷酸铁锂电芯，14颗三元锂电芯，热管理的管控就更复杂了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-298874c312488533945a8e92e698002f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-298874c312488533945a8e92e698002f\" data-watermark-src=\"v2-0078244aa93fd3c70492807ea51f6f90\" data-private-watermark-src=\"v2-616fd8c759ef53fc9729ab28d884f19a\"></p>\n<p data-pid=\"mijAIJur\">不同电芯温度差过大，这一两百颗电芯长期在不同温度区间充放电，时间久了，电池的一致性就会变差，不同电芯的容量、内阻、寿命、倍率都会出现差别。而根据木桶效应，电池包的各项参数是往那根最短的木板（电芯）上面靠的。</p>\n<p data-pid=\"jtY2ed8L\">所以保障不同电芯的工作时的温差不大，那就是保障动力电池的<b>容量、安全、寿命、性能</b>。</p>\n<p data-pid=\"owyLNQlw\">但是难点又出来了，这么多电芯，我怎么分布温度采集点，如果要真正的精准采集，那不是每根电芯都布采集点了，因为单体电芯的不同部位的温度还不同，极耳温度不代表电芯最高温度，叠片工艺的不同导致传热的部位不同。那么为了保障电芯的安全，是否要每个电芯安多个采集点？但是如此多的温度采集点，意味着空间和能耗，意味着成本，意味着BMS的负荷和算法复杂程度。</p>\n<p data-pid=\"gK-cbdmD\">所以，基于种种考量，现在很多装载在量产车上的动力电池就只设置了模组的温度传感器（每个模组两个到四个），更别说上面的精确到电芯不同点的温度采集了。至于模组里面不同的电芯温度咋样，那就是靠估（仿真分析）。</p>\n<p data-pid=\"NBtWaG2G\">哪怕是解决了温度采集的问题，又来到了下一个难题。</p>\n<p data-pid=\"gwMTgC36\">如果有的电芯工作温度超过了45℃（合理温度区间的上限），而其他有的电芯的温度是30℃，有的电芯是35℃，那怎么管控温度平衡？按精准管控，是需要把这个高温电芯积攒的热量散到外界不影响到其他电芯。或者废热利用这热量，导到其他温度低的电芯（提前评估不会温度超限）。</p>\n<p data-pid=\"_dR6SV5T\">但现在大多数的做法是如果电池包里面的某电芯温度超标，那么无论是风冷还是液冷，都是奔着全部电芯（模组范围或箱体范围）来的，就是一个冒头，全部均衡降温。至于有的电芯是35℃，有的电芯是45℃，但管不了，都统统给我降温。这样能耗浪费是肯定的，且有的电芯不需要降温的也降温了，这种策略长期执行下去，实际也牺牲了真正的电池温度均衡。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f924a6a341bbdaca0355d892340c34b8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"180\" data-watermark=\"watermark\" data-original-src=\"v2-f924a6a341bbdaca0355d892340c34b8\" data-watermark-src=\"v2-54a552c7b77a1e29af2450e08e008ae7\" data-private-watermark-src=\"v2-1bb20b1e01fa9af6696389e3bbded896\"></p>\n<p data-pid=\"O-bsPhkq\">而就这样的全面均衡降温/升温设计，实际都已经花费了老大的功夫才能设计出来这回路。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8891cac3e70290c8202c919df87b3782_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"179\" data-watermark=\"watermark\" data-original-src=\"v2-8891cac3e70290c8202c919df87b3782\" data-watermark-src=\"v2-9693313f402e14c24d21eed63fac29c8\" data-private-watermark-src=\"v2-f5d577335b2a478aa8d33df24468bb3d\"></p>\n<p data-pid=\"n9PVEKwB\">就比如风冷，冷风从风道进口进入，从出口出去。如果用最简单的模型，如下图一样，最开始的冷风肯定是温度最低的，经过一排发热电芯后，越到出口，风的温度越来越高，对电芯的降温效果越来越差，所谓的均衡降温都达不到。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-eba029ee62d7b7613c5d9e37c8df3b5c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"174\" data-watermark=\"watermark\" data-original-src=\"v2-eba029ee62d7b7613c5d9e37c8df3b5c\" data-watermark-src=\"v2-8be697ffb0584eff633a8c88c4a75060\" data-private-watermark-src=\"v2-033daf67bc8c8cb8d0c97febf1f27b91\"></p>\n<p data-pid=\"JZSdOdX_\">所以，为了均衡降温、升温，在狭窄的空间里能够让每个电芯的热交换能被路过的冷风或者冷液雨露均沾，解决这种单通道热交换的弊病，就已经是需要设计到绞尽脑汁了。</p>\n<p data-pid=\"7unY4-Dp\">如果要做到更进一步的精准管控，能够达到不同电芯之间需要热量交换的时候，余热利用到能够交换降低能耗。而有时候电芯之间却要热量隔绝，免得低温电芯受到热失控电芯的牵连。这个成本和设计的复杂程度，我估计真的很难短时间内实现量产。</p>\n<p><br></p>\n<p data-pid=\"eayojzEP\">其他关于动力电池热管理的回答：</p>\n<a href=\"https://www.zhihu.com/question/519275656/answer/2467593675\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f25248ee21aa111a0e76b4a28299b85f_qhd.jpg?source=b1748391\" data-image-width=\"1100\" data-image-height=\"715\" class=\"internal\">如何理解储能热管理，它和电车的电池包热管理有联系吗？</a><a href=\"https://www.zhihu.com/question/52539241/answer/2463030657\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-850cf033f8919f3ca4515afe1bfc3c79_qhd.jpg?source=b1748391\" data-image-width=\"1486\" data-image-height=\"798\" class=\"internal\">怎么实现电池包的精确管理，最大限度有效的应用？</a><a href=\"https://www.zhihu.com/question/529055637/answer/2461285456\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-b5ec959709df3a84f2666928cbf2f091_qhd.jpg?source=b1748391\" data-image-width=\"1269\" data-image-height=\"746\" class=\"internal\">电动车热管理系统中特斯拉的做法真的是天花板吗？还有哪些更好的形式，以及他们之间的异同和优劣在哪？</a><a href=\"https://www.zhihu.com/question/524847768/answer/2459813744\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">电池包热管理如今的处理方式是否已经达到理想水平？</a><a href=\"https://www.zhihu.com/question/505242375/answer/2454625334\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-f3006036429a278d846b6feb96f4c95a_qhd.jpg?source=b1748391\" data-image-width=\"1024\" data-image-height=\"768\" class=\"internal\">能不能通俗易懂地说说电池包热管理到底是什么，它的意义是什么？</a><a href=\"https://www.zhihu.com/question/529055903/answer/2451663154\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-21620233e32d026d76c515f4105be94b_qhd.jpg?source=b1748391\" data-image-width=\"1080\" data-image-height=\"879\" class=\"internal\">各家新能源车企是如何避免出现锂电池热失控现象的？</a><p data-pid=\"uuwvynWx\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/27453167/answer/2468910625?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">29 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/512876625?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">暖气炉回水管热是怎么回事?</a><br><a href=\"http://www.zhihu.com/question/525057422?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">商用车热管理工程师可以跳槽乘用车热管理工程师吗？</a><br>\n","link":"http://www.zhihu.com/question/27453167/answer/2468910625?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：Marshall 发布 Emberton II 蓝牙音箱、北京发布一系列快递包装绿色化新规","date":"2022-05-06 01:03:11","description":"Google 智能助理正式推出自动密码更新功能，新华三发布万兆路由器 Magic NX15000 等<a href=\"https://sspai.com/post/73046\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73046"},{"title":"新玩意 104｜少数派的作者们最近买了啥？","date":"2022-05-05 09:27:12","description":"开幕狗粮预警。<a href=\"https://sspai.com/post/73036\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73036"},{"title":"为什么炸食物要炸两遍？真的会使外表更脆吗？详细原理是什么？","date":"2022-05-05 08:29:01","description":"\n<h2>食物要炸两次，因为两次的作用是不同的。</h2>\n<p data-pid=\"jmMNnGBp\">第一次的目的是把食物「煮熟」，第二次是赋予食物金黄、酥脆的外表。</p>\n<p data-pid=\"fT29k-wj\">下面我们来具体说一下。</p>\n<h2>一、油炸温度的影响</h2>\n<p data-pid=\"cW9ZpHOp\">油炸是一种常见的烹饪方法，它和煎、炒等其他烹饪方法一样，可以：</p>\n<ol><li data-pid=\"OgYPBmYp\">把食物煮熟；2. 赋予食物色、香、味，和特殊的口感。</li></ol>\n<p data-pid=\"o7wWvLz6\">但为了达到这些目标，<b>油炸也要控制「火候」，不然就容易翻车。</b></p>\n<blockquote data-pid=\"_y_vWvFY\">像我第一次炸牛排的时候，看到外层已经变金黄了，结果夹出来、切开一看：<br>好家伙，里面还是生的，就像下图左边那块牛排一样。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-7a4822284df7880cf1a719c613f5ca38_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2320\" data-rawheight=\"1184\" data-watermark=\"watermark\" data-original-src=\"v2-7a4822284df7880cf1a719c613f5ca38\" data-watermark-src=\"v2-6c2aa2acd27c5e9f1500389203aaada5\" data-private-watermark-src=\"v2-e25db92bb0e6d14ce6202bce731adef6\"></p>\n<p data-pid=\"rjxjO5W4\"><b>食物外表的色、香、味到位了，但里面没熟</b>。</p>\n<p data-pid=\"1LJE5Npv\">这是因为油炸时候「火候」太猛，<b>「食物表面的温度」</b>远高于<b>「食物内部的温度」</b>造成的。</p>\n<blockquote data-pid=\"NDrbVAC8\">食物表面温度已经150-200℃，再炸就要焦了，但食物中心可能只有30-40℃，还是半生的。<br>就像下图的「高温加热」一样。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-36d458571fc092f71665bbe9026ac714_720w.jpg?source=b1748391?rss\" data-caption=\"高温加热与低温加热的区别\" data-size=\"normal\" data-rawwidth=\"1940\" data-rawheight=\"1204\" data-watermark=\"watermark\" data-original-src=\"v2-36d458571fc092f71665bbe9026ac714\" data-watermark-src=\"v2-d6863b114ebac46e45584dd714fb3cd4\" data-private-watermark-src=\"v2-2b27772fe66024c265ff9d1efe9dad55\"></p>\n<p data-pid=\"Wg2qhTgX\">反之，如果加热温度相对低，虽然花的时间长，但食物内、外部的受热会均匀很多。</p>\n<p data-pid=\"s_tBd2a-\"><b>这就是我们用不同温度来油炸的原因</b>。</p>\n<h2>二、低温油炸vs高温油炸</h2>\n<p data-pid=\"YKu9Ctde\"><b>「低温油炸」的目的是煮熟食物</b>，把食物的中心温度升高到65-75℃。</p>\n<blockquote data-pid=\"IMgHGFoi\"> (上面图示低温加热的温度只是举例)。</blockquote>\n<p data-pid=\"8O_oGGIi\">它主要用于处理<b>比较厚实、传热比较慢</b>的食材 (比如厚牛排、大鸡腿)，</p>\n<p data-pid=\"djuimJo1\">以及<b>淀粉比较多、需要长时间加热糊化</b>的食材 (比如土豆类)。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b9473c3862b44d21daebd456c655f5d9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"491\" data-watermark=\"watermark\" data-original-src=\"v2-b9473c3862b44d21daebd456c655f5d9\" data-watermark-src=\"v2-43aa7cad38d7c7acc11d9a6534212e4b\" data-private-watermark-src=\"v2-9baac4b2ed5e71768ed1d4980a44011a\"></p>\n<p data-pid=\"gKJMRE-c\">这是我们说的第一遍油炸，把食物煮熟。</p>\n<p data-pid=\"N9OWFDPY\">第二遍就是「高温油炸」了，温度接近油的烟点，在180-200℃左右。</p>\n<p data-pid=\"A62CWJRy\"><b>它的主要作用是给食物酥脆的口感。</b></p>\n<blockquote data-pid=\"smW434ud\">油炸时，食物表面会形成蓬松的多孔结构(如下图)，水滴是支撑这个结构的填充物。<br>油炸过程中水分会慢慢蒸发，油滴会部分取代原来的水滴，起到支撑的作用。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-856a913ed963a63ad6817dacb5d7b137_720w.jpg?source=b1748391?rss\" data-caption=\"高温油炸让食物更脆的原理\" data-size=\"normal\" data-rawwidth=\"1788\" data-rawheight=\"1387\" data-watermark=\"watermark\" data-original-src=\"v2-856a913ed963a63ad6817dacb5d7b137\" data-watermark-src=\"v2-2311eb0c0c6f624a7fce0953e6d5d642\" data-private-watermark-src=\"v2-a1d2ac805b90b3162281578a34501243\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"c6QYwKTY\">就像我们吃的薯片，表面都是密密麻麻的小孔，<b>一口咬下去，这些多孔结构被压塌了</b>，发出咔咔咔咔的声音。</p>\n<p data-pid=\"vOGG8d-Q\">这就是油炸食物变脆的原因。</p>\n<h2>三、食物要炸两遍吗？</h2>\n<p data-pid=\"NzvFq0nZ\"><b>对于中心不需要煮熟(例如火腿肠)、或者比较薄的食材(例如薯片、虾片)，我们可以直接上高温油炸。</b></p>\n<p data-pid=\"mjwPa9nc\">在把食物煮熟的同时，也一步到位地给食物上炸色、变酥脆了。</p>\n<p data-pid=\"7Y6nVi96\">而在处理比较厚实、或带有淀粉质的食材时，我们需要用「低温油炸」先把食物煮熟。</p>\n<p data-pid=\"NRnqw0Oa\">因为油温相对低，<b>此时食物表面的水分只蒸发了一部分，还没有变得完全酥脆</b>。</p>\n<p data-pid=\"wgMCIafb\">我们可以先把食物捞出来，等油温升高后，再把食物放进去炸。</p>\n<p data-pid=\"HxYk4mmG\"><b>这时的「高温油炸」会进一步地把水分逼出来；同时，高油炸温度可以让面衣吸油更少，</b>让食物变得酥脆。</p>\n<p data-pid=\"SIhZFc92\">这是二次油炸让食物变脆的原因。</p>\n<p data-pid=\"OU69lqEE\">如果二次油炸还不满意，或者食物放久吸潮了，可以再重复「高温油炸」这个操作。</p>\n<p data-pid=\"wTCL-lJZ\">前提是不要炸焦了。</p>\n<h2>总结：</h2>\n<ul>\n<li data-pid=\"p-pRkCLs\">食物要炸两遍，因为两遍的作用不同。</li>\n<li data-pid=\"YEkVUaxj\">低温油炸变熟，高温油炸变脆。</li>\n</ul>\n<p data-pid=\"tIQ6g6gv\">——谢谢阅读。</p>\n<p><br></p>\n<p data-pid=\"UHOlP2Rs\"><b>资料：</b></p>\n<ol>\n<li data-pid=\"nqIJBnqJ\"><a href=\"http://link.zhihu.com/?target=https%3A//www.derrickriches.com/steak-temperature-guide/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">derrickriches.com/steak</span><span class=\"invisible\">-temperature-guide/</span><span class=\"ellipsis\"></span></a></li>\n<li data-pid=\"pL9wFWSh\"><a href=\"http://link.zhihu.com/?target=https%3A//noaddedcolors.wordpress.com/2010/01/10/sous-vide/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">noaddedcolors.wordpress.com</span><span class=\"invisible\">/2010/01/10/sous-vide/</span><span class=\"ellipsis\"></span></a></li>\n<li data-pid=\"zfzEbUrq\">M. Mellema. Mechanism and reduction of fat uptake in deep-fat fried foods.<i> Trends in Food Science &amp; Technology</i>. 14 (2003) 364–373</li>\n</ol>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/323027010/answer/2466270062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/323027010/answer/2466270062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/520108746?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">裹干粉炸的食物味道如何？</a><br><a href=\"http://www.zhihu.com/question/522456756?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">之前炸食物的油，放了3个月，今天又用它炸了东西吃？</a><br>\n","link":"http://www.zhihu.com/question/323027010/answer/2466270062?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"体检报告出现高尿酸，你该如何在饮食方面控制风险？","date":"2022-05-05 08:00:00","description":"从最容易控制的饮食入手，可以大大减少病变风险和痛苦。<a href=\"https://sspai.com/post/73031\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73031"},{"title":"Matrix Talk丨你的专业究竟是做什么的？","date":"2022-05-05 06:33:53","description":"关于MatrixTalk在少数派Matrix社区聚集着一批分享者，你可能经常看他们分享数字生活的心得体验，但你大概还不熟悉他们。为了拉近大家的距离，我们策划了MatrixTalk栏目，将不定期邀请Ma ...<a href=\"https://sspai.com/post/72892\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72892"},{"title":"颜值与性能兼得，开箱即用、易于同步的终端美化方案：Starship","date":"2022-05-05 03:32:40","description":"安装完 Starship 后，无需进行任何具体自定义的配置，默认就已经提供了非常完整和舒适的终端效果，因此我甚至不需要做什么调整，就可以拿来直接开始用。它非常易于同步。各自安装之后，同一份配置文件可以在不同的操作系统（Windows、Linux、macOS、Android 等）、不同的 Shell（Bash、Zsh、Fish、Powershell 等）中使用，而且展示效果完全一致。非常适合同时使用多个环境、又期望在不同环境中拥有相似体验的人们。<a href=\"https://sspai.com/post/72888\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72888"},{"title":"派早报：三星发布 UFS 4.0、AMD 公布锐龙 7000 系列产品路线图等","date":"2022-05-05 00:25:09","description":"雷蛇推出新款 Razer Blade 15 游戏本、Kindle 将支持 EPUB 电子书格式等。<a href=\"https://sspai.com/post/73029\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73029"},{"title":"你是如何被护肤成分「维生素 C」圈粉的？","date":"2022-05-04 06:54:43","description":"\n<p data-pid=\"gq7bcypA\"><b>成分党老司机告诉你怎么被圈粉的！！！！！！！！</b></p>\n<p data-pid=\"e_4_DABz\">VC（<i>维生素C</i>），作为护肤界另一个可以和A醇齐名，并称为“王炸”的成分，这两年在功效护肤大流行的趋势下，可谓是挣足了眼球。</p>\n<p data-pid=\"VR_wYEXZ\"><b>VC和A醇作为两个最经典的从医学上转化来的护肤成分</b>，<b>他们的功效数据得到了很多临床数据的验证，效果有保证</b>。加上这两年护肤圈突然兴起的一股“早C晚A”的风潮也彻底点燃了VC和A醇。</p>\n<p data-pid=\"AaGUavYT\"> A醇，之前我已经给大家介绍过了，今天我们就主要来聊聊VC。</p>\n<a href=\"https://www.zhihu.com/question/345095868/answer/2003460667\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-4ceea78e635561e304666f55dbab0c86_l.jpg?source=b1748391\" data-image-width=\"997\" data-image-height=\"1200\" class=\"internal\">A醇有哪些推荐？</a><h2><b>VC是如何被发现的？</b></h2>\n<p data-pid=\"epCM4z-X\"> 在15世纪到18世纪，一些远洋航行的水手们由于经常长时间得不到新鲜蔬菜、水果的补给，往往会出现牙齿松动、牙龈出血、肌肉酸痛无力甚至皮下出血的症状，有时候严重的话还会导致死亡，这种病症大家称之为：<b>“坏血症“</b>（<i>也称“败血症”</i>）。</p>\n<p data-pid=\"ZNXaPTFc\"> 坏血症在以前被成为“不治之症”，死亡率很高。所以几百年来，科学家们在和坏血症的不断对抗中，发现了VC（<i>因为蔬菜、水果里含有丰富的VC，因此可以预防并治疗败血症</i>）。VC的存在虽然早已被证明，但直到1928年，生化学家Albert Szent-Gyorgyi首次成功分离出VC【1】，并通过化学解析的方式证明了VC的结构和分子式【2】， 才正式揭开了VC之谜。</p>\n<p data-pid=\"NVzvuxVg\"> 因为VC是一种弱酸，而最初发现的意图是对抗“坏血病”，所以后来医学界重新命名维生素C为抗坏血酸。抗坏血酸天然有手性之分，主要是L-和D-型，也就是大家熟知的左旋VC（<i>L-型</i>）和右旋（<i>D-型</i>）VC，<b>左旋VC才有生物活性，右旋VC没有生物活性</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e87d05cd22d491e5b7a96789f69afdd8_720w.jpg?source=b1748391?rss\" data-caption=\"左旋VC（L）和右旋VC（D）的结构式\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"234\" data-watermark=\"watermark\" data-original-src=\"v2-e87d05cd22d491e5b7a96789f69afdd8\" data-watermark-src=\"v2-c27a92b9289108a42877c72ad471c7c6\" data-private-watermark-src=\"v2-062dded03586f95d0bcc090f157bb3c4\"></p>\n<p data-pid=\"DHoZdDyY\"><b>虽然VC是人体必须的重要维生素之一，但很可惜，我们人类自身无法合成VC</b>。究其原因主要是因为我们人体合成VC的最后一步关键的酶—<b>古洛糖酸内酯氧化酶</b>缺失【3】。虽然我们人体不能合成VC，但幸运的是植物体内存在大量的天然维生素C，我们可以通过饮食的方式来弥补体内缺乏的VC（<i>所以一定要多吃蔬菜和水果，是有科学道理的</i>）。</p>\n<h2><b>VC是什么？</b></h2>\n<p data-pid=\"OQBr9Inm\"> VC的分子结构如下图所示，它是一个分子量只有176的一元弱酸。<b>VC非常不稳定，很容易被氧化失活，这也是很多VC类产品变黄变色的根本原因</b>。VC不稳定，是因为它的分子结构中存在烯二醇基，这个烯二醇基很活泼，很容易丢失电子甚至开环形成不同的VC还原产物。但也正是因为这个基团的存在，使得VC具有非常好的抗氧化能力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-403033c6e5f75efabd965110347db87a_720w.jpg?source=b1748391?rss\" data-caption=\"维生素C的结构式\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-403033c6e5f75efabd965110347db87a\" data-watermark-src=\"v2-4c082fe14780ee5529423818d51e4543\" data-private-watermark-src=\"v2-4524f81caa1404c5b22b279585f55e14\"></p>\n<p data-pid=\"KIs0Ghk9\"> VC在人体的皮肤和组织里都大量存在，<b>除了肾上腺和脑垂体，皮肤的VC含量是最高的</b>，而在皮肤中，<b>角质层中VC的含量又比真皮层的含量更高</b>【4】。而过量的紫外线照射会导致老化皮肤中的VC含量急剧减少（<i>由于VC要中和紫外线引起的自由基消耗</i>），从而导致皮肤的生理功能受到影响。所以白天给皮肤补充VC对抗UV光损伤是非常科学的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-92ed4b924328fae94e03f50d6c32fec7_720w.jpg?source=b1748391?rss\" data-caption=\"VC在人体不同组织上的含量分布情况\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"385\" data-watermark=\"watermark\" data-original-src=\"v2-92ed4b924328fae94e03f50d6c32fec7\" data-watermark-src=\"v2-900dc873f226b0f86dae1a9be9e128db\" data-private-watermark-src=\"v2-6669e6e39ec7b69d85a2d8300bb56315\"></p>\n<h2><b>VC在皮肤上的作用数据</b></h2>\n<p data-pid=\"b7d175Av\"> 关于VC在皮肤上的作用数据，很早的时候修丽可的创始人--皮内尔博士就展开了研究【5】。目前可以确定的是：</p>\n<p data-pid=\"NTsicnCU\">- VC的透皮受产品pH的影响，一般来说，VC产品的pH低于3.5才可以透皮被皮肤利用，pH越低，透皮效果越好，生物利用率也最高。<b>当pH为2.0时，VC的透皮数据最好</b>。这也是为什么目前大多数效果好的VC精华pH都很低的重要原因。当然产品的pH低于3.5时，是需要品牌自己做毒理，验证产品的安全性的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-1f5f0fbf570d317688e5d1b74bc2c9f2_720w.jpg?source=b1748391?rss\" data-caption=\"VC在不同pH值下的透皮吸收数据\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-1f5f0fbf570d317688e5d1b74bc2c9f2\" data-watermark-src=\"v2-891567192dc725e78107de31bfdd4cc2\" data-private-watermark-src=\"v2-6b8304cb737f8cfb9a55a962d15266c3\"></p>\n<p data-pid=\"VZ_MqjIA\">- 关于<b>VC最佳透皮的浓度</b>，皮内尔博士也展开了研究，根据实验结果可知，左旋VC浓度达到5%时，才有比较好的吸收（<i>也就是产品有效果</i>）。<b>当左旋VC的含量达到20%时，VC的透皮效果最好</b>。浓度高了或是低了，透皮的效果都会大打折扣。这也是目前为什么绝大多数VC精华的浓度最高也就加20%的原因。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8e3a9817489f35fc49c02132a9ba6284_720w.jpg?source=b1748391?rss\" data-caption=\"VC在不同浓度下的透皮吸收数据\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"421\" data-watermark=\"watermark\" data-original-src=\"v2-8e3a9817489f35fc49c02132a9ba6284\" data-watermark-src=\"v2-ab3d116bb8e8c291fcb43f2f3743eb7d\" data-private-watermark-src=\"v2-a29ad0fd50c6428a6265c7cdb83f9048\"></p>\n<p data-pid=\"rka-mqtU\">- 关于VC在皮肤的留存时间，这篇文章也做了详细研究，实验表明：<b>当连续使用VC三天后，VC在角质层的有效浓度就达到了饱和，后续即便再继续使用VC，VC的有效浓度也不会增加了</b>（<i>也就是VC皮肤饱和了，吸收不进去了</i>）。滞留在角质层的VC会让皮肤看上去比较黄，但会两三天之内慢慢被皮肤吸收利用，黄色消失。<b>这也是为什么VC类产品我建议大家一周只需要用三次的原因，天天用不吸收没必要，而且浪费！</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb4574f5fbeee427673f65520ba9feeb_720w.jpg?source=b1748391?rss\" data-caption=\"VC在皮肤的留存时间数据\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-cb4574f5fbeee427673f65520ba9feeb\" data-watermark-src=\"v2-2fad8157181a7e4f5aa895ad770dcdc2\" data-private-watermark-src=\"v2-141d27632693534c1f6b6895656182a1\"></p>\n<h2><b>VC都能解决哪些皮肤问题？</b></h2>\n<p data-pid=\"dOn4qvFl\"> VC有很多重要的生理功能，虽然我们只能通过饮食补充VC，但通过食物摄取的VC，对皮肤的改善是非常有限的，所以如果你想要通过VC改善皮肤的一些状况，涂抹含有VC的产品是非常有必要的。那涂抹到表皮的VC具体能解决哪些皮肤问题呢？我总结了以下几点：</p>\n<p data-pid=\"S93w5K1P\"><b>1.</b> <b>抗氧化，预防光损伤</b></p>\n<p data-pid=\"OvTQsgcB\"> 这个大家应该都知道，VC作为天然的强大抗氧化剂，其<b>最大的功能就是剿灭自由基，防止自由基对组织、器官的破坏</b>。因为自由基的产生原因有很大一部分是来源于皮肤受到紫外线的照射，所以在日常护肤的时候，大家一定要注意防晒，<b>防晒和VC产品的复配使用才能最大程度的预防光损伤，抗氧化抗衰。</b></p>\n<p data-pid=\"O8V5r0vG\"><b>2.</b> <b>美白，淡斑，提亮肤色</b></p>\n<p data-pid=\"fwq0AJHU\"> VC的美白功效，其实也不用多说，众人皆知。VC能美白，其实是因为<b>VC可以利用自身强还原能力，将黑色素的中间产物多巴以及多巴醌还原成酪氨酸，从而可以有效、减少抑制黑色素的生成</b>。</p>\n<p data-pid=\"WOh6NxMP\"> 与此同时，<b>VC还可以抑制5α-还原酶的合成，减少皮肤的出油</b>，有非常好的控油和抑制脂质过氧化的功效。整个一套组合拳下来，VC的美白功效也不容小觑。</p>\n<p data-pid=\"nn5gxg18\"><b>3.</b> <b>促进胶原蛋白的表达，抗老抗衰</b></p>\n<p data-pid=\"7qReYNTu\"> VC是脯氨酸羟化酶的辅助因子，它与胶原蛋白前体结合生成三螺旋结构，因此是胶原蛋白合成所必须的原料。另外VC它还可以增加胶原蛋白前体的基因翻译和mRNA转录，从而上调胶原蛋白的形成，增加成纤维细胞产生。</p>\n<p data-pid=\"wEMob7Ag\"> 说人话就是<b>VC可以激活胶原蛋白合成相关基因的表达，让真皮层的成纤维母细胞更多的产生胶原蛋白，来支撑皮肤的结构</b>。所以从这块来看，VC也有很好的抗皱抗衰的功效。</p>\n<h2><b>VC变黄真的失效、不能用了吗？</b></h2>\n<p data-pid=\"8NJlMVNq\">这个应该是所有使用过VC产品的消费者最关心的问题。的确！因为VC结构中存在烯二醇基团的缘故，导致VC非常的不稳定，很容易氧化变色而失活。但科学的说，<b>VC变色虽然是氧化的表现，但氧化不一定意味着活性就完全丧失了</b>。</p>\n<p data-pid=\"Kzfq8u88\">究其原因，主要是因为VC的氧化并不是一步，而是一个二步反应（<i>其实是多步反应，这里方便理解，简单划为两步</i>），当然了，它的还原产物也不止一个【6】。</p>\n<p data-pid=\"pg-yOVXf\">正常来说，VC被氧化后，第一步会失去两个电子，变成淡黄色的<b>脱氢抗坏血酸</b>（<i>DHA</i>）。虽然此时VC确实被氧化了，颜色也由无色变成了淡黄甚至黄色，但其实<b>此时DHA仍然有抗氧化的功效，只不过功效上相比精纯VC差一点罢了</b>。但要注意的是，<b>DHA一旦透皮吸收，它会在皮肤里还能重新被还原成VC起作用</b>，所以也就是说，如果一个VC产品，它只是变黄了，颜色没有很深（<i>指的是非常深的棕色或者茶色</i>），它其实仍然是有效果的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-78093356d080d62d14217ff2d07baab7_720w.jpg?source=b1748391?rss\" data-caption=\"VC失去两个电子变成DHA的结构变化\" data-size=\"normal\" data-rawwidth=\"566\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-78093356d080d62d14217ff2d07baab7\" data-watermark-src=\"v2-1e4819ba39800aecf4264260e4472dec\" data-private-watermark-src=\"v2-01c8b54c1e5bf1e2bab9d389438e4355\"></p>\n<p data-pid=\"DBiN6Vsv\">VC氧化的第二步，这时候VC的五元内酯环会打开，生成新的产物<b>二酮古洛糖酸</b>，这时候的<b>VC基本就完全失去生理活性了</b>，此时VC的颜色也由原来的黄色变成了更深的棕色。脱氢抗坏血酸DHA转化成二酮古洛糖酸的反应是很慢的，但<b>一旦转化后，就再也不能变回去了</b>，所以我们就不要幻想它能像DHA一样，在皮肤里还能被还原成VC起作用了。</p>\n<p data-pid=\"_aUBouIO\">VC的还原产物二酮古洛糖酸后续还会继续被还原成其他产物（<i>很复杂，就不介绍了</i>），虽然此时功效没了，但涂抹在脸上对皮肤也没有什么太大的伤害，所以如果你之前不太懂，<b>涂了颜色很深的VC产品，也不用担心它的危害，无功无过罢了。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a070e3462b4dabebdaea9589d941f80_720w.jpg?source=b1748391?rss\" data-caption=\"DHA继续还原成二酮古洛糖酸的结构变化\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"286\" data-watermark=\"watermark\" data-original-src=\"v2-5a070e3462b4dabebdaea9589d941f80\" data-watermark-src=\"v2-1b6ad51b3648a0b4c702897c635adce0\" data-private-watermark-src=\"v2-ea43c0db10b04a416cb9ed1dc6286f18\"></p>\n<h2><b>产品推荐（我就知道你们都想看这里！！！！！！）</b></h2>\n<h3><b>1. 修丽可CEF</b></h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422232413184000\"></a><p data-pid=\"r4O6GvRp\">毋庸置疑，作为目前市面上名声最大、最好用当然也是最贵的VC精华，这里必须推荐一波。这支CEF精华主打<b>15%左旋VC + 1% VE + 0.5% 阿魏酸</b>，这个三叉戟组合也是修丽可创始人皮内尔博士赫赫有名的CEF专利。</p>\n<p data-pid=\"VLZ7ro9H\">因为VC很不稳定容易氧化失活影响其抗氧化功效，所以作为美国的抗氧化鼻祖，皮内尔博士很早就展开式了对VC稳定性的研究。后来老爷子发现，<b>如果把0.5%的阿魏酸掺入15%的VC和1%的生育酚溶液中，可以有效提高VC和VE的化学稳定性，同时还能提供双倍的光损伤防护</b>。也就是说，如果只有VC和VE的话，就只有抗氧能力和一点微弱的抗紫外线能力，但是如果引入了阿魏酸，不仅可以维持 VC和VE的抗氧化能力，而且还能大大提高整个配方的抗紫外线能力（<i>原因是阿魏酸作为替死鬼和自由基结合，挽救了VC和VE</i>）。</p>\n<p data-pid=\"07v48MtL\">与此同时，为了让VC更好的透皮被利用，<b>这款精华的pH值也是非常的低</b>，所以酸性很强，对于一些不耐受的肌肤来说，<b>可能初次使用会有一些刺激</b>。但说实话，<b>控油、提亮的效果真不是吹的</b>，我这种懒人，一年三五瓶也是轻飘飘的秒掉。虽然肉痛，但有效。</p>\n<p data-pid=\"Zw2QINaa\">所以这样的一款有技术含量的VC精华，又好用又实在，谁不喜欢。只是这价格，有点让人劝退，如果打个对折，我能给你卖断货，你信不？</p>\n<h3><b>2. OBGAI VC</b></h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422312260149248\"></a><p data-pid=\"MIIi8dyq\">和修丽可齐名的OBAGI，必须在这里也有一席之地。和修丽可一样，OBAGI最出名的也是VC系列，因为海外授权的缘故，目前OBAGI的VC有美版和日版之分。<b>美版有10%，15%和20%三个浓度</b>，<b>日本原来也有三个浓度，分别是5%，10%，20%，最近还出了一个猛到哭的25%浓度</b>，浓度越高，价格越贵，但总体价格还是比修丽可美丽。但是毕竟浓度高，刺激性的风险比较大，所以<b>如果你不是耐受肌或者资深成分党的话，建议你上来不要使用高浓度，老老实实从5%浓度干起</b>（<i>敏感肌5%也可以尝试</i>），等皮肤耐受了，再慢慢攀升浓度（要循序渐进攀升，不要急功近利）。</p>\n<p data-pid=\"s7ISSo5C\">因为VC配方容易变色失活，很大一部分原因是因为VC怕水中的氧气，除了给VC找一个替死鬼之外（<i>例如修丽可</i>），那还有一条路，就是配方不用水，或者极致少用水，在这方面，OBAGI那是把这份气质拿捏的死死的。所以这也就成了OBAGI VC的灵魂。<b>OBAGI的VC利用多元醇作为主要溶剂，用极少量水来极限溶解高浓度VC以此来最大程度控制VC的稳定性</b>，所以OBAGI的VC相对来说，稳定性相比水系有了很大的提升，功效有保证。</p>\n<p data-pid=\"s2ArtkQV\"> 因为多元醇作为主溶剂，肤感上会有一点点腻，对于干皮没问题，但是油皮可能就不那么讨喜了。但总体我觉得都还好。所以如果你不喜欢被变色的VC染色，OBAGI的VC可以说是一个非常好的选择。</p>\n<h3>3. 仙丽施VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422423426019329\"></a><p data-pid=\"I64tOwDv\"> 虽然修丽可和OBAGI的VC名气很大，但要真论起辈分，在仙丽施的VC面前，这两都要自称小弟。大家可能都不知道吧， <b>OBAGI，修丽可以及下面要说的欧玛，这三个品牌的创始人最早的时候都曾在仙丽施的实验室打过工呢，</b>也就是这份经历，让他们三积累了很多VC方面的技术经验，为以后的发家致富（创业）打下了基础。</p>\n<p data-pid=\"DP0wilUa\"> 仙丽施是全球VC抗衰的开创者（<i>第一个提出VC可以促进胶原蛋白的合成</i>），是首次把精纯左旋VC用于护肤品中的品牌，他们家的VC精华是全球第一款量产的左旋VC产品。<b>仙丽施的VC精华有三个浓度：7.5%，10%以及17.5%</b>。</p>\n<p data-pid=\"mfed0i0K\">1990年的时候，仙丽施研究出了「 <b>10% VC + 2% 硫酸锌 + 0.5% 乙酰酪氨酸</b>」的维 C 专利配方，次年推出市场上第一款 VC 精华，并一直售卖至今。也正是因为它的这个配方专利， 导致了后来的修丽可、OBAGI在使用维 C 时不得不想招避开这个配方。</p>\n<p data-pid=\"CBHGRFfQ\">这个配方的功效肯定没得说，<b>抗氧化、提亮，淡纹紧致的效果都很好</b>。但是很可惜，稳定性不是很好，虽然配方里也有加一些麦角琉因和葡萄籽等天然抗氧化剂，但还是抵不住岁月的侵蚀。但就像我说的，如果你买到比较新鲜的批次，快速用完，那效果也绝对是很赞的。</p>\n<h3>4. 春日来信VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422500383166464\"></a><p data-pid=\"Hez9Z58-\">春日来信的VC，大家应该都很熟悉，今年他们家的VC真的是卖的非常非常火，是各大中腰部甚至头部主播直播间的常客。春日来信的创始人卞工，是我的好朋友，也是技术出身，所以在产品打造方面，也是实力派。</p>\n<p data-pid=\"FiwvVA2u\">虽然他们家的VC经常被人说是Copy修丽可的CEF配方，但其实人家的配方也是做了很多升级和调整的。<b>他们家的VC有两个浓度，一个10%，一个20%</b>。</p>\n<p data-pid=\"VhJePhGd\">10%版本的VC主打<b>10%VC + 0.5%阿魏酸 + 0.5%VE衍生物</b>（<i>生育酚乙酸酯</i>），除此之外，卞工在整个配方里还添加了一些其他的抗氧化成分来做CEF做了一个升级，比如里面有<b>白藜芦醇</b>、<b>葡糖基芦丁</b>。同时为了提高VC的透皮利用，除了配方本身pH很低之外，卞工在配方中还<b>添加了乙氧基二甘醇作为促渗剂，帮助VC更好的吸收</b>。</p>\n<p data-pid=\"MfFaZ-Rk\"> 为了改善以往其他VC产品缺乏滋润的肤感，卞工在这款VC里还添加了 大量<b>泛醇、生物糖胶</b>这样的保湿剂，使得整个配方不仅功效十足，在肤感方面也非常不错。之前他给过寄过两瓶，不到一个月全干完。接下去自个又买了两瓶，没办法，修丽可的CEF太贵，天天用扛不住，偶尔混搭一下，非常不错。</p>\n<h3>5. 拾颜VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422556058361856\"></a><p data-pid=\"rgzKuAO6\">拾颜，非常陌生是吗？如果我说公众号护肤大号《基础颜究》，大家是不是有点感觉了？不错，拾颜就是三亩大叔创业的品牌，三亩大叔，作为圈内技术流和科学传播流的代表，在产品打造上，怎么缺的了新意？</p>\n<p data-pid=\"tlSpIXKG\">既然VC怕水中的氧气，那就<b>用可乐灌装的工艺通过二氧化碳把水中的氧气赶走</b>，这个看似很简单，但实操很难的工艺竟然被大叔真的拿捏住了，人家自己在工厂真的搭了一个可乐灌装线，这股韧劲不得不说，真的很有技术范。</p>\n<p data-pid=\"i2ILnmUy\">除此之外，这款产品是喷雾设计，<b>料体出口是单向阀</b>，这样尽量避免空气进入瓶内影响VC的活性，所以即便这个产品你用上个半年，料体基本也没什么变化。<b>除了10%的VC之外，这款产品里还添加了4%的黑麦籽提取物和麦角硫因，来有效促进细胞的增殖，抗老抗氧化方面绝对是一把好手</b>。但是一定要记得，使用的时候一定要先喷到掌心然后再涂抹使用，切勿直接朝脸喷。</p>\n<h3>6. 优色林鲜活VC精华</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422620582514688\"></a><p data-pid=\"oB0LMrYz\">优色林，德国BDF旗下的功效护肤品牌，虽然在国内名气不如修丽可、OBAGI，但是也不能算是小众，毕竟在成分党的圈子里，他还是颇有盛名的。BDF毕竟作为作为德国百年科研护肤品牌，不管是技术背景，还是供应链这块，都是非常有保障的。</p>\n<p data-pid=\"LXW_5AHy\"><b>这款VC精华主打的是一个冻干的概念</b>，将鲜活的10%VC首先储备在真空仓里，当使用的时候按压真空仓，鲜活的VC粉就被注入到精华液里面了，摇匀后就可以享用10%的VC大餐了。</p>\n<p data-pid=\"h5YnFUse\">除了10%的鲜活VC，这款产品里还添加了小分子量的玻尿酸，<b>小分子玻尿酸</b>可以直接触达肌底，在保湿的同时，也给VC起作用提供了一个良好的湿润微环境。与此同时里面还添加有<b>胀果甘草提取物</b>，这是一个VC booster，可以增强VC的抗氧效果，还可以修复紫外线带来的光损伤。</p>\n<p data-pid=\"o0oJrZFL\">因为是冻干的概念，再加上乳液的质地，所以无论是在VC功效稳定方面，还是保湿方面，都远超我的预期，使用下来体感非常不错，<b>如果你觉得皮肤负担很重，想精简护肤，这样的一只VC精华， 绝对是一个非常不错的选择</b>。</p>\n<h3>7. Phyto-c欧玛VC精华</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422689139339265\"></a><p data-pid=\"OxRkLnJk\">欧玛，上面也说了，其创始人也曾在仙丽施搬砖过，而且还是修丽可创始人皮内尔博士的学生，所以他在VC方面的造诣也非常不简单。所以说，VC四大天王，欧玛也必须占一席。</p>\n<p data-pid=\"f1rTIv2Y\">欧玛博士本来也是修丽可品牌的创始元老，但因为经营理念的原因，后来出走修丽可，成立了自己的品牌Phyto-C欧玛，不得不说，大佬都是要创业致富的。</p>\n<p data-pid=\"e28cpke9\">欧玛博士一直以来都坚定的认为VC是护肤理念中不可或缺的一环，所以在他进军美妆行业时，一直研究VC，出走修丽可后，因为CEF专利的缘故，他就没再碰这个体系，反而自己独创了一个<b>VC+油橄榄+VE+VA视黄醇</b>的体系，这也就是后来欧玛家的AEC精华的核心。欧玛的VC精华主打<b>15%的左旋VC</b>，另外还添加了<b>硫酸锌</b>和<b>生物类黄铜</b>，成分也是非常的精简，典型的古老成分党。</p>\n<p data-pid=\"6lQknab-\">欧玛这个牌子其实在功效方面做的一点也不差，甚至比修丽可有过之而无不及，但为什么没火起来，究其原因大概就是技术控太不注意细节了，他们家产品的肤感实在不敢恭维。好在后面一系列产品有注意到这点，已经有所改善了。如果大家有兴趣，也仍然值得试一试。</p>\n<h2><b>参考文献</b></h2>\n<ul>\n<li data-pid=\"Xjr7cnJ6\">【1】 Szent-Gyorgyi A. Observations on the function of peroxidase systems and the chemistry of the adrenal cortex: Description of a new carbohydrate derivative. Biochem J, 1928, 22: 1387–1409</li>\n<li data-pid=\"-g08rIr-\">【2】 Szent-Gyorgyi A, Haworth W N. ‘Hexuronic acid’ (ascorbic acid) as the antiscorbutic factor. Nature, 1933, 131: 24</li>\n<li data-pid=\"BF1P4ggL\">【3】 Monfort A, Wutz A. Breathing-in epigenetic change with vitamin C. EMBO Rep, 2013, 14: 337–346</li>\n<li data-pid=\"DJ7ceelb\">【4】 Pullar J M , Carr A C , Vissers M . The Roles of Vitamin C in Skin Health[J]. Nutrients, 2017, 9(8):866-.</li>\n<li data-pid=\"tjreFxp1\">【5】 Pinnell S R , Yang H , Omar M , et al. Topical L‐Ascorbic Acid: Percutaneous Absorption Studies[J]. Dermatologic Surgery, 2010, 27(2):137-142.</li>\n<li data-pid=\"3VgJ2lFO\">【6】 Nemet I , Monnier V M . Vitamin C degradation products and pathways in the human lens.[J]. Journal of Biological Chemistry, 2011, 286(43):37128-37136.</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kang-da-dao-de-kbo-shi-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">科学怪人-k博</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/446102132/answer/2264274182?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/526674059?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">护肤小白可以通过「成分护肤」，快速进阶成分党吗？「成分护肤」具体是个什么概念？</a><br><a href=\"http://www.zhihu.com/question/523591949?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">护肤成分是否也有季节性，新兴成分「依克多因」是更适合春天吗？</a><br>\n","link":"http://www.zhihu.com/question/446102132/answer/2264274182?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]