[{"title":"智能座舱最理想的交互模式应该是什么样的？目前己经发展到了哪个阶段？","date":"2022-04-01 02:21:28","description":"\n<p data-pid=\"FVVSdh6u\">这是一个非常值得深入探讨的问题，这里分享一下自己的一些思考，期待和大家深入交流学习。为了节约大家的时间，先说结论，然后再展开分析。</p>\n<h2>引言</h2>\n<p data-pid=\"lDVf7-h4\">智能汽车是机器人的第一形态，对应的，智能座舱也引领了机器人时代人机交互发展的新方向。历史上，每一次交互方式的改变，都重塑了智能设备的产业格局。正如DOS转向Windows时代带来的产业巨变一样，人机自然交互打开了一道通向新产业的大门。</p>\n<p data-pid=\"s8ffMmW_\">人机自然交互将改变我们对待智能汽车、泛机器人和人工智能的态度。人类最重要的发明是创造了语言体系，用于人与人的交互，带来人类文明；今天，人机自然交互可能是下一个基石性发明，其与机器的自主决策强结合，将带来机器文明，重塑人与机器的关系，对我们的社会工作方式及生活方式等方面产生深远的影响。</p>\n<h2>关键结论</h2>\n<p data-pid=\"5OHLQxp6\"><b>1.</b> <b>未来最重要的人机交互趋势是机器从被动响应走向主动交互，从人适应机器到机器不断地适应人。</b></p>\n<p data-pid=\"t-dimb7x\"><b>2.</b> <b>人机交互的终极目标是让机器拟人化，图灵测试是衡量标准。</b></p>\n<p data-pid=\"1tob660g\"><b>3.</b> <b>为了确保可靠性、实时性和隐私保护，座舱人机交互的计算必须依赖边缘计算，而不是云计算来实现。</b></p>\n<p data-pid=\"hZqIC_Fr\"><b>4.</b> <b>人机共驾阶段，人机交互能力必须跟自动驾驶能力相匹配，否则会带来严重的安全问题。智能驾驶和智能座舱的跨域融合是发展方向。</b></p>\n<p data-pid=\"Mcw6UqyG\"><b>5.</b> <b>未来，实体屏幕和触控将不再是座舱交互的中心，取而代之的是自然交互+AR-HUD。</b></p>\n<p data-pid=\"pyv2A2fU\"><b>6.</b> <b>语音、手势和眼球跟踪是自然交互的三板斧，传感器、算力和算法是物质基础。</b></p>\n<p data-pid=\"CMC9SA-m\"><b>7.</b> <b>当前的座舱以娱乐域为主导，但未来座舱内娱乐域和安全域(人机交互和自动驾驶)的定位会调过来，安全域会成为主控制域。</b></p>\n<p data-pid=\"qtnqjJ9P\"><b>8.</b> <b>自然交互方式是隐形的、简约的、更加情感化的交互方式，情感连接是人机交互的最高境界。</b></p>\n<p data-pid=\"vGbVsXX_\">9. <b>每一次交互方式的改变，都重塑了智能设备的产业格局，智能座舱人机交互是中国智能汽车公司品牌向上的重要突破口。</b></p>\n<p data-pid=\"b3C2CB2L\"><b>人机自然交互可能是下一个基石性发明，与机器自主智能强结合，将带来机器文明，重塑人与机器的关系。</b></p>\n<h2>人与机器的交互方式发展趋势是什么？</h2>\n<p data-pid=\"hPvFGT30\">座舱的人机交互未来将走向何方？这个问题的答案，可能需要从智能设备的发展历史中去寻找。</p>\n<p data-pid=\"pEQeZh9v\">计算机行业是人机交互技术发展的起源。实际上，人机交互一开始不叫HMI，而是HCI，即Human–Computer Interaction。1959年，美国学者B. Shackel发表了历史上第一篇人机交互论文，从减轻使用者操作计算机产生的疲劳问题出发，提出了关于计算机控制台设计的人机工程学理论。</p>\n<p data-pid=\"VleejVQQ\">PC的发展史广为人知，下图是一个简单的发展阶段划分：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9fd07d89934fffed579bda2b935333bc_720w.png?source=b1748391?rss\" data-caption=\"计算机人机交互发展历程\" data-size=\"normal\" data-rawwidth=\"1969\" data-rawheight=\"920\" data-watermark=\"watermark\" data-original-src=\"v2-9fd07d89934fffed579bda2b935333bc\" data-watermark-src=\"v2-8271d98a512bf69d2ea2d9f6a3889c81\" data-private-watermark-src=\"v2-1deabca00438e13a6a23c67af99f5409\"></p>\n<p data-pid=\"jMZpJoEa\">最开始是DOS系统加上键盘，命令行界面的操作需要非常高的专业技能，结果是只有少数专业人员才能使用。鼠标与Windows操作系统的出现改变了一切，让PC的使用者成爆炸性增长，并开辟了游戏、设计等诸多大型产业。随着智能手机的发展，触控成为更简单直接的操作方式，出现了Surface这样的平板电脑。而微软小娜则代表了最新的交互方式，我们可以用语音这种更加自然的方式与机器交互。</p>\n<p data-pid=\"Uolfzyna\">PC和手机的发展史折射出机器与人交互方式的发展脉络，那就是<b>从复杂走向简单；从抽象操作走向自然交互。未来最重要的人机交互趋势是机器从被动响应走向主动交互</b>。</p>\n<p data-pid=\"vKFNefpT\">顺着这样一个趋势的延长线去看，<b>人机交互的终极目标，就是让机器拟人化</b>，使人与机器的交互方式就像人与人的沟通交流一样自然顺畅。</p>\n<p data-pid=\"ZpL12e0P\">可以说：人机交互的发展历史，是<b>从人适应机器到机器不断地适应人的发展史</b>。为什么会是这样的一个发展趋势？因为人的天性就是懒惰的，不情愿去主动学习复杂的工具。因此，人机交互的门槛越低，机器的使用者的范围就越广，于是产业规模就越大，商业回报就越高，从而驱动商业和技术创造朝着这个方向走。</p>\n<p data-pid=\"Re4xTgI6\">智能座舱的发展也经历了类似的过程：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bc2c80b3c544870beed311b97b921ae9_720w.png?source=b1748391?rss\" data-caption=\"智能座舱的人机交互发展与计算机有颇多相似之处\" data-size=\"normal\" data-rawwidth=\"1117\" data-rawheight=\"511\" data-watermark=\"watermark\" data-original-src=\"v2-bc2c80b3c544870beed311b97b921ae9\" data-watermark-src=\"v2-e8160d45bc49cd1db5198d5c9fc0ec0e\" data-private-watermark-src=\"v2-b4622f440ce72a3f8efdfd928a85401f\"></p>\n<p data-pid=\"YYpAXCaG\"><b>多模交互是下一代人机交互方式的理想模型</b>，什么是多模交互？简单说，就是利用手势、眼球跟踪、语音等方式来进行交互。这里的模态简单讲就类似于人的“感官”，多模态即是将多种感官进行融合，对应人视觉、听觉、触觉、嗅觉、味觉五种感官。所对应的信息媒介包括语音、视频、文字以及各种传感器如红外、压力、雷达等。</p>\n<p data-pid=\"KokQFELK\">但多模交互的命名太过技术化，我更愿意将其称之为：<b>自然交互</b>。</p>\n<p data-pid=\"vUb_cGJq\">例如手势，可以说是原生的“鼠标”，不同的手势能够表达丰富的语义。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b3abb8e28ce0240ed50d73789576582b_720w.png?source=b1748391?rss\" data-caption=\"手势操作的语义以及对应的检测原理\" data-size=\"normal\" data-rawwidth=\"1941\" data-rawheight=\"766\" data-watermark=\"watermark\" data-original-src=\"v2-b3abb8e28ce0240ed50d73789576582b\" data-watermark-src=\"v2-1223d4a04d84f935df9be341a141689d\" data-private-watermark-src=\"v2-ab5cadb7e4b05b6e9acef97143792783\"></p>\n<h2>自然交互实现方式是什么？</h2>\n<p data-pid=\"eYCYJ7q8\">自然交互如何实现？下图做了一个直观的展示：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-00e100b182f392180aab7093390b22aa_720w.png?source=b1748391?rss\" data-caption=\"人机自然交互的实现过程\" data-size=\"normal\" data-rawwidth=\"1939\" data-rawheight=\"851\" data-watermark=\"watermark\" data-original-src=\"v2-00e100b182f392180aab7093390b22aa\" data-watermark-src=\"v2-d820b08d6b346d3ae208006ca1c22b59\" data-private-watermark-src=\"v2-340b8b4766caac65ecf1d469cf974a76\"></p>\n<p data-pid=\"0FuhDX6x\">通过强大的AI算力对语音、视觉和交互行为等数据进行计算，得出感知结果，结合驾驶工况的时空信息，综合做出决策。</p>\n<p data-pid=\"3zKt8Eh5\">智能汽车本质上是载人机器人，<b>机器人最重要的两项能力是自主决策能力和人机交互能力，</b>缺乏其中任何一项，就无法有效地为人类服务。因此打造智能的人机交互能力是其必选项。</p>\n<p data-pid=\"8Q5TVXeO\">如何衡量人机交互的智能化程度呢？我的一个思考是使用图灵测试，即机器能否在交互行为的表现上和人无法区分。</p>\n<p data-pid=\"yTOrv8ZQ\">如何实现自然交互呢？传感器、算力和算法缺一不可。</p>\n<p data-pid=\"WwoJLRua\">座舱内会融合越来越多的传感器，传感器在形态多样化、数据丰富性和精准性能力上不断提升。产生的结果，一方面会使座舱内算力需求不断飙升，座舱里的AI算力需求将上升到30 TOPS以上，甚至百TOPS级别的水平。另一方面也提供了更好的感知能力支撑。这种趋势让更丰富的座舱场景创新、更好的交互体验成为可能。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7e462dc973c2c6e557d29b70478e77af_720w.png?source=b1748391?rss\" data-caption=\"座舱传感器在数量和种类上都在迅速提升\" data-size=\"normal\" data-rawwidth=\"1007\" data-rawheight=\"522\" data-watermark=\"watermark\" data-original-src=\"v2-7e462dc973c2c6e557d29b70478e77af\" data-watermark-src=\"v2-dc478d4c4382b0897ac98b2c168d1d56\" data-private-watermark-src=\"v2-f1511bfdb64a427c5961871ced60eebb\"></p>\n<p data-pid=\"nJQELWJc\"><b>其中，视觉处理是座舱人机交互技术的关键</b>。心理学相关研究表明，人与人的交互中，来自于视觉的信息占比高达83%。</p>\n<p data-pid=\"YSRk962-\">但融合才是王道，例如在嘈杂的环境中的语音识别，单用麦克风其实是不够的，这就是著名的”鸡尾酒会”问题，我们人之所以能够在此情况下选择性聆听某个人说话，靠的不仅是耳朵，还有眼睛。所以，通过视觉去定位声源，并且读唇语，可以获得远优于单纯语音识别的效果。</p>\n<p data-pid=\"UXnE7Phl\">如果说传感器相当于人的五官，那么算力是自然交互的大脑，AI计算能够将视觉与语音融合，使用多种感知模式，实现人脸、表情、手势、语音等多信息的识别。从而实现更加智能的人机交互，包括眼球跟踪、语音识别、唇语识别联动与驾驶员疲劳状态检测等。</p>\n<p data-pid=\"-SfW0qTU\">更重要的是，<b>座舱人机交互的计算必须依赖边缘计算，而不是云计算来实现</b>。因为三点：<b>可靠性、实时性和隐私保护</b>。</p>\n<p data-pid=\"LjsE4Jta\">云计算依赖联网，对于智能汽车来说，如果依靠无线网络，其连接的可靠性是无法保证的；同时，数据传输的延迟不可控，交互的流畅度无法保证。要确保面向自动驾驶安全域的完整用户体验，破局之道就在于边缘计算。</p>\n<p data-pid=\"JM3dtjj1\">个人隐私保护可能是我们这一代人在AI时代面临的最大挑战之一，座舱内的私密空间，隐私保护问题更加突出。今天的语音识别，绝大部分仍然是在云端进行的，其中的声纹等生物信息可以轻易暴露个人身份。</p>\n<p data-pid=\"KVrTNecH\">2021年7月，网信办审议通过了《汽车数据安全管理若干规定（试行）》，自2021年10月1日起施行。明确指出包括音频、视频、图像和生物识别特征等在内的个人信息需要受到严格保护。确立了几个关键原则，包括：车内处理原则——除非确有必要不向车外提供，脱敏处理原则——尽可能进行匿名化、去标识化等处理。</p>\n<p data-pid=\"fkVptCV-\">通过在车端进行边缘AI计算，可以将视频、语音等个人生物信息去除，转化为语义信息，再上传到云端，可以有效保护车内个人数据隐私。</p>\n<h2>自动驾驶时代，交互智能必须跟驾驶智能相匹配</h2>\n<p data-pid=\"RUKfhVv3\">在可以预见的未来，人机共驾都会是长期存在的状态，<b>座舱内的人机交互是人了解自动驾驶能力的第一界面</b>。</p>\n<p data-pid=\"ihGiig1B\">当前智能汽车技术存在进化不均衡的挑战，<b>人机交互能力落后于自动驾驶能力的发展</b>，导致自动驾驶事故频发，影响了自动驾驶的普及。</p>\n<p data-pid=\"q5Z-FbRI\">人机共驾的特点是人在驾驶回路中（Human In the Loop），因此，<b>人机交互能力必须跟自动驾驶能力相匹配，否则带来严重的预期功能安全问题</b>，几乎所有的自动驾驶致命事故都与此有关。</p>\n<p data-pid=\"mqRT8F51\">预期功能安全的准确定义比较复杂，简单说，就是机器本身没有出毛病，但是人员误用导致出现了危害和风险。比如本来是L2级别的辅助驾驶，结果司级却在使用途中自己玩游戏去了，导致系统在遇到无法处理的驾驶情况时出现事故。</p>\n<p data-pid=\"WaF0sXAk\">例如，自动驾驶系统在实际驾驶工况中，经常出现“鬼刹车”的情况。如果人机交互界面能够显示自动驾驶的感知结果，司机就可能会明白系统误判是由于把路上的一个易拉罐识别成了一辆车导致的，这样他就不会产生恐慌感，并且进一步了解到自动驾驶系统的能力边界，这将大大有利于提升L2+级别自动驾驶功能的接受度。</p>\n<p data-pid=\"5yg8aS8J\">为什么特斯拉把越来越多的自动驾驶感知结果展示出来，为什么百度要把自动驾驶用的高精地图显示出来，背后的出发点都是这一原因。随着自动驾驶的能力越来越强，用户将越来越关注自动驾驶系统在虚拟3D环境中呈现的过程和状态，人机交互将愈加重要。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-92d6bcb48e6876a626912138a46b2b01_720w.jpeg?source=b1748391?rss\" data-caption=\"特斯拉的FSD显示界面呈现了关键的感知结果和路径规划信息\" data-size=\"normal\" data-rawwidth=\"1979\" data-rawheight=\"751\" data-watermark=\"watermark\" data-original-src=\"v2-92d6bcb48e6876a626912138a46b2b01\" data-watermark-src=\"v2-9665986160c8d9f28a2f3a4c9d38a704\" data-private-watermark-src=\"v2-29c19be7c4cafcc3f2d8ba6105c4bd6b\"></p>\n<p data-pid=\"9DTWcZp2\">即使不发生事故，<b>对自动驾驶状态的不了解也会让人产生严重的恐慌和焦虑</b>。车不是简单冷漠地前行，而是体现人性化的共驾，比如检测用户疲劳，接管驾驶；语音控制车辆行驶状态，确认是否超车等等。<b>机器负责主动关怀与推荐，人负责决策</b>，这是一个比较舒适的驾驶交互方式。</p>\n<p data-pid=\"cwj5V9-l\">人机交互与自动驾驶相辅相成，其具体作用如下图所示：</p>\n<p><img src=\"https://pica.zhimg.com/v2-cebce52e27d5e7b2a4317f5b6d1d9857_720w.png?source=b1748391?rss\" data-caption=\"人机交互与自动驾驶相辅相成\" data-size=\"normal\" data-rawwidth=\"1774\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-cebce52e27d5e7b2a4317f5b6d1d9857\" data-watermark-src=\"v2-f0e00a964822e393e992b5e7fde8d383\" data-private-watermark-src=\"v2-ec57cedeeec60e4851e6dcf5bfe816ce\"></p>\n<p data-pid=\"MUnmpGrU\">例如，未来更为人性化的泊车应该是人车共泊的，包括人对车的接管和车对人的接管，比如车遇到困难路况，可能会说我不太有把握，请求接管。再比如人迟迟停不进去，AI算法推荐是否开启自动泊车。人甚至还可以通过语音在泊车的过程中控制泊车的启停。</p>\n<p data-pid=\"niXP8g_N\">这种舱泊一体的方案能提升智能座舱交互和泊车的整体体验，还能大幅节省硬件成本：通过分时复用AI芯片的资源，可以同时满足座舱感知（语音+视觉）与APA泊车（视觉+雷达）的需求。从而为行业提供高性价比方案，可让智能化下探到更多中低端车型，在国内，地平线和映驰科技合作，正在推进这一方案开发。</p>\n<p data-pid=\"r-ka0xHT\">当前，智能座舱的交互方式主要还是手机安卓生态的延申，虽然屏幕大得多，但核心功能还是娱乐导航。但我有一个判断，未来，<b>实体屏幕和触控将不再是座舱交互的中心，取而代之的是自然交互+AR-HUD</b>，下面我们做进一步分析。</p>\n<p data-pid=\"Aamf4QFE\">第一个原因：面向自动驾驶的人机交互属于温饱问题，是刚需，属于安全域，有最高优先级；面向音乐、游戏和舒适性的人机交互是小康需求，属于娱乐域，在实现了前一阶段任务后才能有足够的施展空间。一旦智能驾驶发展到L4及以上，人将从枯燥疲劳的驾驶中解放出来，汽车也将成为“人的第三生活空间”。</p>\n<p data-pid=\"BGjnaOi3\">娱乐域主要是由实体屏幕来支撑。今天座舱搭载的屏幕越变越大，甚至达到60寸，这实际上是用低优先级的功能占据了高优先级功能的空间，还带来额外的信息干扰，容易让人分心，影响驾驶安全。当然，实体屏幕在未来依然会存在，但它就好像客厅的电视一样，将不再是人机交互的核心载体。</p>\n<p data-pid=\"SRT_9OB0\">下图对两个域的功能做了简要的分析总结。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-beaf3b1ab944e4c946e4e89b51e713d4_720w.png?source=b1748391?rss\" data-caption=\"座舱内娱乐域和安全域的任务划分\" data-size=\"normal\" data-rawwidth=\"1941\" data-rawheight=\"891\" data-watermark=\"watermark\" data-original-src=\"v2-beaf3b1ab944e4c946e4e89b51e713d4\" data-watermark-src=\"v2-e4aafa098ce6977c765416b3d8c4daa3\" data-private-watermark-src=\"v2-25065afb01f86a0c98fb3c69c6c9b356\"></p>\n<p data-pid=\"8580DXFr\">因此，<b>未来座舱内娱乐域和安全域(人机交互和自动驾驶)的定位会调过来，安全域会成为主控制域</b>。自动驾驶是机器和环境的交互，人机交互是人与机器的交互，两者合二为一，完成人、车、环境三者协同，形成完整的驾驶闭环。</p>\n<p data-pid=\"wqDvMOnV\">举个例子，由于人类听觉处理无法并行，所以车内语音交互只能在驾驶任务和娱乐任务中二选一，而又因为驾驶任务有更高的优先级，所以面向驾驶的语音交互应该有更高的优先级。</p>\n<p data-pid=\"5yGi7-B7\">第二个原因：<b>自然交互方式+AR-HUD的交互界面更加安全</b>，例如通过语音和手势交流，可以避免驾驶员视线偏移，从而提升驾驶安全。而座舱的大屏是无法做到这一点的，相比之下，AR-HUD可以做到在显示自动驾驶感知信息的同时避免了这个问题。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ba87e115ba0d52142a0dd288737cf84d_720w.png?source=b1748391?rss\" data-caption=\"AR-HUD是自动驾驶感知与决策信息输出的极佳载体\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-ba87e115ba0d52142a0dd288737cf84d\" data-watermark-src=\"v2-149bf26b838e2e4995952effe65d15d4\" data-private-watermark-src=\"v2-dcbc90c45de8a0c767e1c1c0ad2d3667\"></p>\n<p data-pid=\"oCF3W3oN\">第三个原因：<b>自然交互方式是隐形的、简约的、更加情感化的交互方式</b>。它不会过多地占用车内宝贵的物理空间，但却可以做到随时陪伴在身边。这种体验可以给予驾驶员及乘客更多的信任感、安全感，并且让系统更懂司机和乘客。</p>\n<p data-pid=\"Kqrn4N60\">综合以上分析，<b>未来智能驾驶和智能座舱的跨域融合是较为确定的发展方向，最终诞生的就是车载中央计算平台。</b></p>\n<h2>当前发展阶段、前沿实践以及挑战</h2>\n<p data-pid=\"IEMqjP4u\">目前，座舱的语音识别基本已经普及，语音识别主流厂商主要使用端到端算法，在理想实验环境下语音识别准确率可高达98%以上。</p>\n<p data-pid=\"limTk7Nt\">DMS正在急速普及。自2018年起，已陆续有本土品牌开始配置车内摄像头。该设备首先具备监测驾驶员疲劳状态、驾驶员面部识别等基础功能，其次具备账号登录、车辆个性化配置等辅助功能，以及车内拍照、视频等娱乐功能。目前国外豪华品牌也已经开始配置DMS（凯迪拉克、宝马、奥迪等），车型配置内置摄像头的比例将不断快速增长，预测至2030年装备车内摄像头的车型占比将超过50%。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-690d73196635ce6314333857bec8bf42_720w.png?source=b1748391?rss\" data-caption=\"DMS迅猛普及\" data-size=\"normal\" data-rawwidth=\"1251\" data-rawheight=\"403\" data-watermark=\"watermark\" data-original-src=\"v2-690d73196635ce6314333857bec8bf42\" data-watermark-src=\"v2-4977e0b1e7f17cb3de17d754cd332b2c\" data-private-watermark-src=\"v2-c2c92090d05750381e48d59aec7ee179\"></p>\n<p data-pid=\"WrzdsOOK\">下一步将是语音+手势+眼球跟踪+AR-HUD交互界面的组合，这是对应于L3+级别自动驾驶的智能交互方式。业内领先的车企已经开始布局，如下图所示。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-26d2baa89b90bab56fa8b3a1e8d9b372_720w.png?source=b1748391?rss\" data-caption=\"人机自然交互是车企的竞争热点\" data-size=\"normal\" data-rawwidth=\"1960\" data-rawheight=\"762\" data-watermark=\"watermark\" data-original-src=\"v2-26d2baa89b90bab56fa8b3a1e8d9b372\" data-watermark-src=\"v2-58a9eb45f547c3ae9ae9ba189922b263\" data-private-watermark-src=\"v2-6f37fd35dfc80e94865100d4b1a0b966\"></p>\n<p data-pid=\"-ldVUPlu\">中国自主品牌在这一块的实践基本上跟国外领先品牌是并驾齐驱的，从迭代速度上看还要更快。2020年，长安推出UNI-T车型, 包含多项 AI 主动服务，比如：如果你正在接听电话，系统会自动降低多媒体音量；再比如，当车机中控屏处于熄屏状态时，注视屏幕一秒钟即可唤醒屏幕；还有智能语音拍照：通过语音指令，即刻开启拍照功能，若检测到有人闭眼还可主动提醒重拍。</p>\n<p data-pid=\"ijUZ0upy\">UNI-T的智能座舱搭载了地平线征程2芯片以及 Halo智能交互解决方案，深度融合视觉、语音多种感知数据，该方案可通过语音、动作姿态、面部表情等指令交互为用户带来更加安全、智能的驾乘体验。</p>\n<p data-pid=\"oWCeKthp\">最近的百人会钓鱼台年会上，集度汽车CEO夏一平提出智能汽车3.0的产品理念，指出三个核心点：“自由移动、自然交流、自我成长”，其中“人车交互及语音语义的精准识别，让车与人能“自然交流”，理解用户情绪，实时响应用户需求”。这一理念我非常赞同。</p>\n<p data-pid=\"VtLEMpzY\">理想中的自然交互目标是从用户体验出发，需求提供稳定、流畅、可预期的交互体验。但理想再丰满，也得从骨感的现实起步，当前挑战依旧众多。</p>\n<p data-pid=\"whpoCUI1\">例如，当前<b>自然交互的误识别情况依然严峻</b>，全工况、全天候的可靠性和准确率还不够。比如手势识别，基于视觉的手势识别率目前还偏低，需要研究各种算法来改善识别的精度和速度。也许你不经意间动一下手势，就会被误识别为一个命令动作，这只是无数种误识别情况之一，在移动状态下，光照、震动、遮挡等等都是巨大的工程挑战。因此，需要有各种技术手段综合加持来确保准确性，例如结合驾驶场景，采用多传感器融合验证方式、语音确认等方式，降低误识别率。</p>\n<p data-pid=\"KIqs0R4V\"><b>自然交互的流畅度也是亟待解决的问题</b>，这需要更高性能的传感器、更强大的算力和高效算法来逐渐改善。而同时自然语言理解（NLP）和意图理解依然处于早期阶段，还需要算法理论创新。</p>\n<p data-pid=\"4nO4LNK6\">任何一种颠覆性的技术趋势都需要长周期的进化才能趋于完善，也许我们需要的就是行动和耐心。</p>\n<p data-pid=\"FmOyyPBS\"><b>未来：座舱人机交互走向虚拟世界与情感连接</b></p>\n<p data-pid=\"f3muE1jJ\">随着座舱内传感器的增加，人机交互服务的对象从以驾驶员为中心转向全车乘客服务是一个确定性的趋势，例如主动关怀，无麦K歌，视线随动短视频制作等等。这些转变对于增强消费者吸引力非常有效，尤其是在中国，副驾驶座上的人往往对车型选择有更大的决策权。</p>\n<p data-pid=\"1lXBogg1\">智能座舱打造了一个虚拟空间，人机自然交互将带来全新的沉浸式增强现实娱乐体验。最近有媒体报导，特斯拉开始生产配备AMD Ryzen处理器的Model 3和Model Y车型，如此强悍的配置，结合座舱强大的交互设备，完全可以打造一个车内的元宇宙，提供各种沉浸式的游戏。智能座舱可能是元宇宙的一个不错的载体。</p>\n<p data-pid=\"h3Bdq33v\"><b>人机自然交互也将带来情感连接</b>，座舱成为人的伴侣，更智能的伙伴，学习车主行为、习惯和喜好，感知座舱内环境，结合车辆当前位置，在需要的时候主动提供信息和功能提示。</p>\n<p data-pid=\"QomEz-gv\">例如，蔚来的NOMI车载人工智能系统（估计是know me的谐音吧？），注重与车主的情感联结，车不再是一个冰冷的机器，而是有互动有关爱的好伙伴。一位蔚来车主曾经分享过一个故事：自己在失去了宠物猫之后，用Nomi来替代猫咪并与它交流，他说：“现在，每天都有小金金（猫的名字）的陪伴，似乎它换了一个纬度再继续陪伴着我们。也许NOMI的工程师们怎么也想不到NOMI有一天会被拿来干这个，但至少这句话在那一刻极大的安抚了我，把整个人从情绪的低谷拽了一把，我想，<b>这应该就是人机交互的最高境界</b>了吧。”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-557404f4922bcad61836ea70473dcd59_720w.jpeg?source=b1748391?rss\" data-caption=\"蔚来汽车NOMI车载人工智能系统\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"300\" data-watermark=\"watermark\" data-original-src=\"v2-557404f4922bcad61836ea70473dcd59\" data-watermark-src=\"v2-38120c14e9e2ad9c85fbaa05ec299fe4\" data-private-watermark-src=\"v2-32e783ea511cc71170afefabb1efa5d7\"></p>\n<p data-pid=\"fQdjgDVo\">早在2013年，电影《她》就讲述了一个人与机器产生情感的故事：作家西奥多在结束了一段心碎的爱情长跑之后，爱上了电脑里的虚拟人物，这个叫“萨曼莎”的姑娘不仅有着一把略微沙哑的性感嗓音，并且风趣幽默、善解人意，让孤独的男主泥足深陷。</p>\n<p data-pid=\"3UYSX67K\">随着人工通用智能（AGI）的发展，在我们的有生之年，有机会看到人机情感连接逐渐渗透到我们的个人生活中，确保技术向善可能是那个时候我们要面临的另一个重大问题。但无论如何，技术都会往这个方向走。</p>\n<h2>总结</h2>\n<p data-pid=\"GZE9xe9Q\">在当下激烈的行业竞争中，智能座舱已经成为整车厂实现功能差异化的关键一招，座舱人机交互与人的沟通习惯、语言文化等密切相关，因此必须是高度本地化的，<b>智能座舱人机交互是中国智能汽车公司品牌向上的重要突破口</b>，更是中国智能汽车技术引领全球技术潮流的突破口。</p>\n<p data-pid=\"c0n-KllB\">智能汽车是机器人的第一形态，对应的，智能座舱也引领了机器人时代人机交互发展的新方向。</p>\n<p data-pid=\"c3av1VD1\">历史上，<b>每一次交互方式的改变，都重塑了智能设备的产业格局</b>。正如DOS转向Windows时代带来的产业巨变一样，<b>人机自然交互打开了一道通向新产业的大门。</b>产业链将持续延伸，会有更多玩家进入到智能汽车这个大生态中，智能汽车玩家也会跨界进入更多的机器人领域，未来智能座舱生态圈发展主题将围绕“生态协同”与“跨界延伸”展开。</p>\n<p data-pid=\"QjvHVdn5\"><b>人机自然交互将改变我们对待智能汽车、泛机器人和人工智能的态度</b>。人类最重要的发明是创造了语言体系，用于人与人的交互，带来人类文明；今天，人机自然交互可能是下一个基石性发明，其与机器的自主决策强结合，将带来机器文明，重塑人与机器的关系。这场科技革命将产生颠覆性影响，不仅将开启一个全新的产业生态，更对我们的社会工作方式及生活方式等方面产生深远的影响。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9525f8405efa28fa343210e6e25d4642_720w.png?source=b1748391?rss\" data-caption=\"人机自然交互是机器人时代的基石性发明\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"888\" data-watermark=\"watermark\" data-original-src=\"v2-9525f8405efa28fa343210e6e25d4642\" data-watermark-src=\"v2-cd8849f35b5ef42379a872f0d9616da1\" data-private-watermark-src=\"v2-7c237d1967208addac5ca40fa140c153\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xing-xing-15-50?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">李星宇</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515398912/answer/2417706724?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/26977271?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在的智能家居方案，符合你的预期吗？你理想中的智能家是什么样的？</a><br><a href=\"http://www.zhihu.com/question/266636086?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大家理想中的智能汽车钥匙是什么样的？</a><br>\n","link":"http://www.zhihu.com/question/515398912/answer/2417706724?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报增刊：少数派近期重要新闻动态","date":"2022-04-01 01:19:40","description":"少数派于今日宣布一系列重要动态，主题覆盖物种发现、内部决议、业务扩张和人事变动等。<a href=\"https://sspai.com/post/72397\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72397"},{"title":"派早报：小米发布全色激光影院、戴森推出空气净化器蓝牙降噪耳机","date":"2022-04-01 01:18:58","description":"B 站开放「硬核会员」认证，Waymo 将在旧金山开展全自动驾驶业务等<a href=\"https://sspai.com/post/72404\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72404"},{"title":"有哪些「王炸级别」的春季美食，让你疯狂吹爆？","date":"2022-03-31 12:19:35","description":"\n<p></p>\n<p><img src=\"https://pica.zhimg.com/v2-9ddf17632709f9811d1d167640843a5d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1528\" data-watermark=\"watermark\" data-original-src=\"v2-9ddf17632709f9811d1d167640843a5d\" data-watermark-src=\"v2-369d6d22d1daaee5725791f03c86867f\" data-private-watermark-src=\"v2-260934ed5dd14136d2ffd3a906ed30e4\"></p>\n<p><br></p>\n<p data-pid=\"pMaVMoM8\"><b>撰文 | 魏水华</b><br></p>\n<p data-pid=\"6-Jo571g\"><b>头图 | pixabay</b></p>\n<p><br></p>\n<p data-pid=\"FmPIAuV7\">香椿，并不像它的名字一样温文尔雅。相反，这是一种锋芒毕露的蔬菜。<b>硫化物带来的类似大蒜、洋葱的气味，让香椿有着锐利的刺激感；而萜烯类化合物，则赋予了它清新愉悦的花草香。</b>很少有一种食材，能如香椿一样集矛盾对立的味道于一身。对食客来说，它的气质如此独特，既试过难忘，又难以准确描述。如果说小葱和大白菜，分别代表中国蔬菜里泾渭分明的两条河流，它们一清一浊、一浓一淡、一辅一主，构成了中国人对蔬菜的基础认知；那么香椿，一定是两条平行线的交汇点、是凌驾其上的，更高级的复合味觉。<b>无论与最平白无奇的豆腐对坐清谈，或是与最浓郁的油脂和鸡蛋热烈舞蹈，香椿总能无往不利。</b>中国人所倾慕的“动若脱兔、静若处子”的境界，在香椿身上展露无疑。</p>\n<b></b><p><img src=\"https://pica.zhimg.com/v2-a9977720793e8b62153860fb9b934d9a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1682\" data-watermark=\"watermark\" data-original-src=\"v2-a9977720793e8b62153860fb9b934d9a\" data-watermark-src=\"v2-9f9386f526af534360a1563fc238247a\" data-private-watermark-src=\"v2-ceba451d1617a5d4a2a7bdfe915e3c2a\"></p>\n<p><br></p>\n<p data-pid=\"1A4OVUA2\"><b>No.1 壹</b></p>\n<p data-pid=\"zNAn88-o\">香椿的英语学名是Toona sinensis，“toona”是椿类植物的统称，“sinensis”则是“中国的”，合起来，就是中国椿。虽然椿类植物的版图极其广泛，东亚地区的中国、朝鲜、日本，东南亚的印尼、菲律宾，南半球的澳大利亚、新西兰，乃至新大陆的美国、墨西哥都有分布，但<b>真正能拿来当食物的，只有Toona sinensis。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-bc3ff527ed1ed10c2bfe136c75326785_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"962\" data-rawheight=\"1298\" data-watermark=\"watermark\" data-original-src=\"v2-bc3ff527ed1ed10c2bfe136c75326785\" data-watermark-src=\"v2-c50d995c0aa0519e2c8e536d993c04dd\" data-private-watermark-src=\"v2-f897d95e9ad74d78d8f9b9d14b1ecb33\"></p>\n<p><br></p>\n<p data-pid=\"VJmVoxz2\">在中国的古籍里，香椿和臭椿常常共同出现，前者称为“椿”、后者称为“樗”。作为对照系，二者被各种寓言故事和文人随笔，预设成矛盾戏剧的两位主角。但实际上，两种植物无论是枝干、叶片、果实，都能看出明显的差异。从生物学的角度来看，臭椿是苦木科，和中国人用来打蛔虫的苦树、印度人用来壮阳的东革阿里是近亲，顾名思义，不会有多么漂亮的外形和美好的滋味；香椿是楝科，它的近亲包括桃花心木、西班牙柏木、苦楝树，这些树大多木质坚硬，且自带能够防虫蛀的芳香类树脂，是制作家具的上等材质。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90a3d8290306bacf97b231c0a271057c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-90a3d8290306bacf97b231c0a271057c\" data-watermark-src=\"v2-35203e869cda58f053e6f9992988063d\" data-private-watermark-src=\"v2-2e66e96b8a731ad80be031d238b0b375\" data-tags=\"porn\"></p>\n<p><br></p>\n<p data-pid=\"eCiCZKdY\">香椿当然也不例外，中国人栽培这种植物的初衷，就是为了木材，而不是为了吃那一丁点可怜的嫩芽。在耕地有限、生产力低下的时代，从土地产出比考虑，为了口腹之欲而种植粮食、蔬菜，是比种植香椿更优的选择。此外，作为一种高大的乔木，大量采摘香椿的嫩芽并不是一件很容易的事。拿它当成食物的情况只有两种：吃腻了参鲍翅肚的人想要尝鲜，或是米糠麦麸都吃不上的人想要充饥。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01ca21a6ecffd73c6944b927db4cc0e7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1613\" data-watermark=\"watermark\" data-original-src=\"v2-01ca21a6ecffd73c6944b927db4cc0e7\" data-watermark-src=\"v2-d4a749d9ab7191fc6f8016c2bc08edac\" data-private-watermark-src=\"v2-4df78e1207383f81b5c43cd6883fa53e\"></p>\n<p><br></p>\n<p data-pid=\"rVP8Tspc\">所以，香椿从来都不是一种平庸的食物，在中国历史上，它是少数能够超越阶级、突破民族的、真正做到“雅俗共赏”的蔬菜。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2423519656c449fbf812558ce05457ae_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2423519656c449fbf812558ce05457ae\" data-watermark-src=\"v2-b3e20ff6b558926339f02b2c872c5aa2\" data-private-watermark-src=\"v2-7ac1aad0a0f97db8f5ed34ebd3c3df9a\"></p>\n<p><br></p>\n<p data-pid=\"oXARmGMT\"><b>No.2 贰</b></p>\n<p data-pid=\"-XFB1BP7\">世界上最早对香椿的记载，是庄子的《逍遥游》：<i>“上古有大椿者，以八千岁为春，八千岁为秋。”</i>从自然规律来看，庄子的描述虽然不那么客观，但它很能反映中国人对这种年年发新芽的大树的喜爱和崇拜：人们常常将年老却健康的父亲称为“椿庭”，贤良淑德的母亲称为“萱草”，成语“椿萱并茂”便是形容父母健在、健康长寿。<b>而食用这种大树的新发嫩芽，也因此被中国人赋予了神奇的功效，甚至增加了一层关于性事的隐秘价值。     </b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d6aaca11f04a26be756162a64e50419f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"611\" data-watermark=\"watermark\" data-original-src=\"v2-d6aaca11f04a26be756162a64e50419f\" data-watermark-src=\"v2-172a09da3745b8c2b67864a44c7fd548\" data-private-watermark-src=\"v2-13df68205e1775bec2562db7779548a0\"></p>\n<p><br></p>\n<p data-pid=\"czWCuXpW\">在湖南衡阳，当地人习惯以香椿搭配春季肥美的泥鳅食用。椿芽最嫩的时候，摘来香煎泥鳅，泥鳅肉质细腻、香椿鲜甜去腥，是极好的搭配；椿芽略老的时候，拿来煎泥鳅，这时候的香椿口感扎实，气味更浓郁，香椿内的脂溶性风味物质与油脂混合，称为椿油，它把泥鳅肉濡染得香味馥郁，而椿芽本身则更加酥脆可人。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6408de934c026ab6183b4801b5d774b8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"467\" data-watermark=\"watermark\" data-original-src=\"v2-6408de934c026ab6183b4801b5d774b8\" data-watermark-src=\"v2-f88d0fbc3104ec1ccca44d5fbb24034d\" data-private-watermark-src=\"v2-64067fabe584b52dc87095831f66382a\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"tuvG8B4S\">因为外形不雅，泥鳅常被人视作食补壮阳的食材，再搭配老树发新芽的香椿，其寓意不言自明——事实上，在衡阳当地的方志里，“黑龙椿”作为一种药方，早在晋代就已出现。所谓“黑龙”，应该就是泥鳅。人们为了取得香椿芽而爬上高大的香椿树，极有可能源起于药用的目的。今天，中国两大香椿品种之一的湖北香椿，也保留了大量药用的特点：它芽小、质地硬，但气味浓、油脂多、耐久煮。这是中国人对驯化选育香椿的最早证明，也是它进入中国食谱的最早契机。而在它所广泛种植的中国南方的云南、四川、湖南、湖北、江西各地，也孕育出了围绕湖北香椿的烹制方法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-db9f47160f319454a2782de77daf0c90_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"1462\" data-watermark=\"watermark\" data-original-src=\"v2-db9f47160f319454a2782de77daf0c90\" data-watermark-src=\"v2-c1b2d501804c4b5ae4004d06f18e446a\" data-private-watermark-src=\"v2-18dbf695259dd5055abbd4540cdc8343\"></p>\n<p><br></p>\n<p data-pid=\"Ln_JPCCZ\">最简单的是潦香椿，潦在南方很多地方的方言里意为“涝”。用清水煮一遍香椿头，等到红转绿了，就捞起切好，加麻油和盐，别的什么都不需要，清清淡淡明明白白，是下酒一等一的好菜。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e33ccd59f8a56851bb687b07851ef11_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"288\" data-watermark=\"watermark\" data-original-src=\"v2-0e33ccd59f8a56851bb687b07851ef11\" data-watermark-src=\"v2-e63bc85ea899f7e29b43978837293969\" data-private-watermark-src=\"v2-a70e54cd56ffa886233a0a24444ea31e\"></p>\n<p><br></p>\n<p data-pid=\"PYM5Sqqx\">香椿炒腊肉是川湘地区的特色。腊肉要灶头柴火熏过的，切成能透光的薄片，泛出一种莹亮的红褐色。加入焯过水的碧绿的香椿头，来自时间的腊肉的烟熏浓香，和香椿的阳光清新，构成层层叠叠的滋味和矛盾冲突的整体。只需要旺火宽油几十秒，就成了制霸川中春色的绝品。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-07878cbc51d3cba0612d3cd146997bc7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"1318\" data-watermark=\"watermark\" data-original-src=\"v2-07878cbc51d3cba0612d3cd146997bc7\" data-watermark-src=\"v2-49d5c923fed0147d625f2877bf518321\" data-private-watermark-src=\"v2-a647b661f8640f866dc8a1aaf84a8780\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"TkOvrulC\">立春小炒是最能在餐桌上反映江浙春季风物的菜品，春笋切丝、搭着小段的香椿一起清炒。笋白椿绿，清甜爽口，好看好吃。讲究的，这道菜要用荤油来做，最好是熬猪油的时候丢了几颗小葱的葱油，让猪油小葱的浓香隐藏在春笋和香椿背后，这是江南地区含蓄内秀的书生气的写照。</p>\n<p><img src=\"https://pica.zhimg.com/v2-df87b81df04f04429cb4a85462f0fa22_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-df87b81df04f04429cb4a85462f0fa22\" data-watermark-src=\"v2-4b9a21d3260f8ca2e8df5c9f60d382a9\" data-private-watermark-src=\"v2-2eed5126f3c6cd3570bfea56790eb109\"></p>\n<p data-pid=\"Eon9xq8L\">图/企鹅吃喝指南</p>\n<p data-pid=\"ZAQHxYAa\">腌香椿则是浙东宁绍地区的特色，香椿煮熟晾干后擦盐，与梅干菜一起密封在土陶坛子里厌氧发酵。一两个月后，辛辣冲的味道褪去，而香椿的花草香，则因干制更加浓郁，取一点来与梅干菜一起蒸五花肉，香！<b>总而言之，在地缘结构破碎、文化多元的中国南方，香椿以其宽容的食材质素，征服了甜、辣、咸、鲜种种口味。</b>但从另一方面理解，量身打造的种种烹制方式，也反映了中国南方久远的香椿种植历史和南方人对香椿的深厚情谊。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-73cbda6d1dfa7bbfffddbd8c6885920d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-73cbda6d1dfa7bbfffddbd8c6885920d\" data-watermark-src=\"v2-1a40a33fa4ece08f9776f6b21f0b7a25\" data-private-watermark-src=\"v2-bacc877de171623f8c642051ce487148\"></p>\n<p><br></p>\n<p data-pid=\"i9GcxhPT\">No<b>.</b>3 叁</p>\n<p data-pid=\"o8Avs9Z6\">食用香椿高频率出现在文献中的历史，由宋代始。<i>苏颂说：“椿木实，而叶香，可啖” ；苏轼说：““岂如吾蜀富冬蔬，霜叶露芽寒更茁”；元好问说：“溪童相对采椿芽，指似阳坡说种瓜。想是近山营马少，青林深处有人家”……</i>一个有意思的细节是，代表中国政治中心的，大量华北平原的文人士大夫开始关注香椿。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f393501bc06030d7d913e46682ad2d5c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"324\" data-watermark=\"watermark\" data-original-src=\"v2-f393501bc06030d7d913e46682ad2d5c\" data-watermark-src=\"v2-ff8612285ac667e56cfbb64be970abcb\" data-private-watermark-src=\"v2-0427ddc1a272162e2e2971545dee6411\"></p>\n<p><br></p>\n<p data-pid=\"hSg-Lqqd\">这与唐五代以来，南北方频繁的战争和商贸，带来了生活方式的融合与物种的交换有关；与十世纪生产力发展，中国的物流能力和基建水平快速发展有关；与宋代经济水平升级，人们的食谱越来越广有关。但最重要的是，香椿大量上市的季节，与传统农业青黄不接的时间正好重合。在中国北方人口持续递增，土壤耕力下降的背景下，香椿作为一种食物短缺时期的补充，就显得意义非凡。如范仲淹所言：“遍植大椿，可材可啖，其固民之生而树民之本。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c945aac96acb63ba585ed9a65afe8c4e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"553\" data-watermark=\"watermark\" data-original-src=\"v2-c945aac96acb63ba585ed9a65afe8c4e\" data-watermark-src=\"v2-1238c939e664faba6600f91d9ef8045f\" data-private-watermark-src=\"v2-48e9d558b98a00f0a4a4e9377fbc7686\"></p>\n<p><br></p>\n<p data-pid=\"1mR74k1x\">今天，遍布中国北方河南、山东、陕西、江苏等地的另一种香椿：陕西香椿，应该就是驯化诞生于当时。相比个头小而味浓的湖北香椿，陕西香椿的叶更密、芽更肥、滋味更平和，食用的功能，确实已经大过药用——植物的育种趋势，永远与人的实际需求高度相关。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2434addd130a1e80d7f781198c2b5530_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"718\" data-watermark=\"watermark\" data-original-src=\"v2-2434addd130a1e80d7f781198c2b5530\" data-watermark-src=\"v2-abe4319e2c0b0856dc60b0d1e79f00b3\" data-private-watermark-src=\"v2-b04e354bc746d779a99c2872d8be6425\"></p>\n<p><br></p>\n<p data-pid=\"E95o8Kln\">而北方各地，也围绕本地陕西香椿的食材特点，陆续出现了各种独到的烹饪方式。炸香椿鱼是华北地区很流行的吃法。名为“鱼”，其实里面并没有鱼肉，而是类似于天妇罗的做法，为香椿芽挂上一层面浆后油炸。椿芽细腻、面壳酥脆、香气撩人，不是炸鱼，胜似炸鱼。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-58b29b8664f47ca8ec1252b70125b7a7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-58b29b8664f47ca8ec1252b70125b7a7\" data-watermark-src=\"v2-211d27d73e474ac966dca6ede7fed807\" data-private-watermark-src=\"v2-cd2d72c294b70a7f6ec6c4ce1c5e1633\"></p>\n<p><br></p>\n<p><br></p> <p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3254568c64a06986a1cb6cdc946d5129_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"378\" data-watermark=\"watermark\" data-original-src=\"v2-3254568c64a06986a1cb6cdc946d5129\" data-watermark-src=\"v2-8bc6dde6502fa802124fc620b9e6a2ba\" data-private-watermark-src=\"v2-aa1d395623aa3ecad0f0756fcdb57446\"></p>\n<p><br></p>\n<p data-pid=\"W-YDbga1\">香椿拌豆腐常常被视作鲁菜正宗，其实一块豆腐一撮香椿，是最简单朴素无门槛的料理。梁实秋说香椿豆腐是北平普通人家都能吃得起的“平常菜”，所言不虚。豆腐要用南豆腐，细嫩；香椿则要用北椿，肥腴清新。一箸入口，三春不忘。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a2c1fe0781c53ed8bb86eb2d1dc02529_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-watermark=\"watermark\" data-original-src=\"v2-a2c1fe0781c53ed8bb86eb2d1dc02529\" data-watermark-src=\"v2-9cdab0002c265a45ec9c107dd14cff47\" data-private-watermark-src=\"v2-ee3cdee11c41fdd3362e02f20f1257cd\"></p>\n<p><br></p>\n<p data-pid=\"PiE5-OV1\">北方小麦产量巨大，在变着花样的各种面食里，香椿也是重要的参与者：甘肃的皮带宽面，用切碎的香椿芽、烧沸的滚油和辣椒粉一搅，自然滋味悠长；陕西人吃的“麦饭”，其实就是拿面粉和蔬菜拌在一起蒸，槐花麦饭是名气最大的，但香椿麦饭才是味道最好的；山西的香椿辣子其实是一种辣酱，焯水过的香椿和辣椒面一起，加盐油拌匀封存，用来拌面条或者夹馒头吃，香浓无比。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f21a2d4cf73029e1a4cca5f98207358d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1626\" data-watermark=\"watermark\" data-original-src=\"v2-f21a2d4cf73029e1a4cca5f98207358d\" data-watermark-src=\"v2-b4e45ddf1b4400189d377e7dad51b97c\" data-private-watermark-src=\"v2-207075f6c486ac329f23869d03b61a7a\"></p>\n<p><br></p>\n<p data-pid=\"355xZSRe\">再比如香椿饺子、香椿煎饼……只要有面粉的地方，就一定有香椿的用武之地。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ebd99da18c118d95972186abce88b228_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"390\" data-watermark=\"watermark\" data-original-src=\"v2-ebd99da18c118d95972186abce88b228\" data-watermark-src=\"v2-572465d5e70b42b14cf859fb9dfa9a10\" data-private-watermark-src=\"v2-bd2f0626325d610c46042e3fbcfabb8d\"></p>\n<p><br></p>\n<p data-pid=\"c_nSQ6P3\">很显然，在南方地区更多当作香料的香椿，到了北方，越来越多地以蔬菜的面貌出现，并得到更大程度上的普及和脍炙人口。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d2825642547e18bf7519a313d8d6b7b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1260\" data-watermark=\"watermark\" data-original-src=\"v2-2d2825642547e18bf7519a313d8d6b7b\" data-watermark-src=\"v2-35adfa53f27c9ed0395880f3edfcd700\" data-private-watermark-src=\"v2-74d3433d768ec38179467edda5cc36f1\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"twbdjn4U\">No<b>.</b>4 肆</p>\n<p data-pid=\"Kup7fUkM\">中国人对香椿的追求当然不会就此止步。成书于十五世纪的云南白族史籍《白古通记》里，出现了这样的描述：“漾濞椿芽，食者甚众”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4727115081f319d09cfae6821c303ab8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-4727115081f319d09cfae6821c303ab8\" data-watermark-src=\"v2-d5bd693413d9d07bbe7c18feb7ba16cc\" data-private-watermark-src=\"v2-43cabdd14d224a9ea736d458a81ed4d3\"></p>\n<p><br></p>\n<p data-pid=\"uqCbi2AJ\">漾濞就是今天的大理州漾濞县，当地至今依然是香椿的重要产地。一种原产自中国东部的蔬菜，大量出现在中国最西南的土地上，并成为当地人普遍的食物。这与宋元之后云南地方政权没落，经由土司自治、改土归流等一系列手段，云贵地区最终融入中华版图的背景有关。某种程度上，香椿是中国人生活方式对外影响的例证，也见证了中华文明开疆拓土的大历史。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7a2b24e68f3369e64ab144732388033f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"390\" data-watermark=\"watermark\" data-original-src=\"v2-7a2b24e68f3369e64ab144732388033f\" data-watermark-src=\"v2-f0c5b39c9b97bc28cb94feccb9670c5f\" data-private-watermark-src=\"v2-2b8886f6a547c004416b134b49b9ffc7\"></p>\n<p><br></p>\n<p data-pid=\"30_bgyHh\">今天的大理白族喜欢吃油浸香椿，做法很简单，整条香椿嫩茎晒干，再入油锅浸炸，最后用玻璃瓶密封，可以吃到夏末，其滋味堪比相比做法类似的油鸡枞；而滇南傣族则喜欢拿香椿当凉拌菜的香料，将香椿嫩芽与水腌菜、小米椒、泡菜水混匀，无论拌肉、拌鱼、拌虾，都能得到无与伦比的复合香气，尤其拌油炸过的脆皮五花肉，绝！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8119f7b2998b1c7f64f49194be3a0f11_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-8119f7b2998b1c7f64f49194be3a0f11\" data-watermark-src=\"v2-7269160c58c8bb64dbfdd9d335b0941c\" data-private-watermark-src=\"v2-e9605cd2adfb815b4a1b2c6cf896724a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5076989b0a065280ed19c4b5c5be7325_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1030\" data-rawheight=\"882\" data-watermark=\"watermark\" data-original-src=\"v2-5076989b0a065280ed19c4b5c5be7325\" data-watermark-src=\"v2-7bbba152833e558025e5dec79e27bfc3\" data-private-watermark-src=\"v2-169f69f47d365efd4ee6640b5920277c\"></p>\n<p><br></p>\n<p data-pid=\"CkADS90_\">更重要的是，在四季不分明的云贵地区栽种选育香椿，解决了一个困扰香椿爱好者千年的问题：时令。虽然云贵地区的四季椿，滋味确实单薄，远没有春天的香椿浓郁而悠长。但对于香椿重度爱好者们来说，这是一年中大部分吃不到香椿的季节里，勉强可以一膏馋吻的替代品。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bc33ba116292cb5c141cd967d62d5790_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1068\" data-rawheight=\"1259\" data-watermark=\"watermark\" data-original-src=\"v2-bc33ba116292cb5c141cd967d62d5790\" data-watermark-src=\"v2-578750b103f01afe85fd4194f60b5687\" data-private-watermark-src=\"v2-064e9b5f774d10c1b37b58a53d3311ec\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"WPzjzrB2\">从更高的维度审视小小椿芽，无论是历史上被选育的湖北香椿、陕西香椿，还是今天市面上被人津津乐道的黑油椿、红香椿、褐香椿、薹香椿，它们迥异的滋味和多元的表达，都承载了这个国家幅员辽阔的土地，和蜿蜒曲折的历史。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3f942a7eb4ceec1eab55d9339b4aa147_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-3f942a7eb4ceec1eab55d9339b4aa147\" data-watermark-src=\"v2-7bf28fa67ae29eb6d8f810f1e0058059\" data-private-watermark-src=\"v2-7bf0b4aa393c6a40858199db6b7e4070\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-20632ed91f37dc284e4d82ba5b110578_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"247\" data-watermark=\"watermark\" data-original-src=\"v2-20632ed91f37dc284e4d82ba5b110578\" data-watermark-src=\"v2-b5751f4ac2329067a54113ba717f0ba8\" data-private-watermark-src=\"v2-edad6e15ea7c4b92368d5fed27be4bf4\"></p>\n<p><br></p>\n<p data-pid=\"Ei3mVtOx\"><b>| 山东·香椿豆腐 |</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-187b4a171e73ca3b71c9b959f76283f9_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"361\" data-watermark=\"watermark\" data-original-src=\"v2-187b4a171e73ca3b71c9b959f76283f9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"Veq73f2Z\"><b>| 安徽·香椿摊蛋 |</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-9319e50e31d8a06d1415eb3039b350ee_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"216\" data-watermark=\"watermark\" data-original-src=\"v2-9319e50e31d8a06d1415eb3039b350ee\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"-BqQdPnD\"><b>| 江苏·春笋香椿 |</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-1f09472a5a6388ce0b6ecf3ab7dc1271_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"240\" data-watermark=\"watermark\" data-original-src=\"v2-1f09472a5a6388ce0b6ecf3ab7dc1271\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"WfoBa90B\"><b>| 浙江·椿干扣肉 |</b></p>\n<b></b><p><img src=\"https://pic3.zhimg.com/v2-e081adc38591b49f796059975f9c1262_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-e081adc38591b49f796059975f9c1262\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"TIrs79JF\"><b>| 四川·香椿腊肉 |</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-c1d10823af3ecbb5a2ae8846e9ae7b91_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"225\" data-watermark=\"watermark\" data-original-src=\"v2-c1d10823af3ecbb5a2ae8846e9ae7b91\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"uCP9QlPZ\"><b>| 陕西·香椿麦饭 |</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-6e8d80275d4f86ef096f63bb2c3b129b_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"224\" data-watermark=\"watermark\" data-original-src=\"v2-6e8d80275d4f86ef096f63bb2c3b129b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"kcCIDiCP\"><b>| 河北·炸香椿鱼 |</b></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-d1ae6461a8bcaa0aa51a63118e139fe6_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"watermark\" data-original-src=\"v2-d1ae6461a8bcaa0aa51a63118e139fe6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"HVfdn9eC\"><b>| 山西·香椿莜面 |</b></p>\n<b></b><p><img src=\"https://pica.zhimg.com/v2-354e60fb476eeb70dd282541461cb500_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"203\" data-watermark=\"watermark\" data-original-src=\"v2-354e60fb476eeb70dd282541461cb500\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"Bdoc7aH2\"><b>| 云南·油椿拌粉 |</b></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-f991db0edda09f616253141b1ca809e7_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-f991db0edda09f616253141b1ca809e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"XidsX4mJ\"><i>-END-</i></p>\n<p data-pid=\"dqA9WdAt\">日本人很少吃香椿，但日语里也有“椿”字，它指的是山茶花。在奈良时代的《万叶集》里，椿花被这样赞颂：“<i>河上乃列々椿 都良々々尓 雖見安可受 巨勢能春野者</i>”俳句晦涩，大致意思是：河岸历历椿花之海，让人沉醉于浓烈的春日不可自拔。<b>在文化传播的过程中，中国的香椿怎么会变成日本的山茶，其中缘由已不可考，但来自春天的浓烈，让人沉醉不可自拔的精神内质，依然能找出些微相仿之处。</b>纵横捭阖，一口入魂。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-87ec964abaf06d77068cb8c2d09b49ce_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1528\" data-watermark=\"watermark\" data-original-src=\"v2-87ec964abaf06d77068cb8c2d09b49ce\" data-watermark-src=\"v2-b3c6a07aa438adaea179276ab49ffdc0\" data-private-watermark-src=\"v2-097caf7e521d307c3e432ebfcb7efcee\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wei-shui-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魏水华</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521291003/answer/2417062665?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/299415754?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">王炸一对7一对4一个6怎么赢4个8一对5？</a><br><a href=\"http://www.zhihu.com/question/335329705?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">斗地主为什么不能先出王炸？</a><br>\n","link":"http://www.zhihu.com/question/521291003/answer/2417062665?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新玩意 100｜100 元可以买到啥？","date":"2022-03-31 09:10:57","description":"思路打开，消费还有更多可能。<a href=\"https://sspai.com/post/72398\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72398"},{"title":"为什么老司机都不喜欢去 4S 店保养？","date":"2022-03-31 08:58:02","description":"\n<p data-pid=\"7dcnuzbv\">提问很好，怕4S店贵，又担心外面配件和维修技术不行。</p>\n<p data-pid=\"gR9Noj3f\">跟不同品牌的售后员工聊过，<b>首保过后继续选择4S店保养的车主普遍在35%~45%，其中最主要的影响因素就是价格，品牌越高端保养的价格与维修厂相差越大，</b>甚至能买的起玛萨拉蒂的车主，都只有60%左右选择在4S店保养。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c578e5f32177e09ecf7e987a7074fa45_720w.jpg?source=b1748391?rss\" data-rawwidth=\"619\" data-rawheight=\"487\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c578e5f32177e09ecf7e987a7074fa45\" data-watermark-src=\"v2-cba55129e484dd93e3bff9444e3d4691\" data-private-watermark-src=\"v2-69679172405253c7907c43f45d980a40\"></p>\n<h3>先说结论，不在4S店保养可以，但要选择大的连锁维修厂，这样更加有保障，维修除了易损件的更换外，尽量选择4S店。</h3>\n<p><br></p>\n<p data-pid=\"Bvd7Ij6k\">大家要把维修和保养分开看，汽车根据所用机油的更换周期，定期更换机油、机滤，这属于保养，<b>保养的技术含量不高，一个学徒只需半年的时间就可以独立操作。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-23af50393c8b4edb91df165884295531_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1269\" data-rawheight=\"564\" data-size=\"normal\" data-caption=\"4S店原厂机油\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ucIeNpTm\">维修是保养的进阶，在保养时有一个项目叫全车检查，主要检查安全件、易损件、发动机、底盘等主要部件的使用情况，结合车主反馈的问题以及公里数综合确定故障。</p>\n<p data-pid=\"JLBw3m-Q\"><b>定位故障——更换受损部件——试车确定故障消除</b></p>\n<p data-pid=\"ZPG98Zri\">以上过程叫维修，比较考验机修师傅的维修技术、配件质量以及店内的工具设备，下面展开聊聊。</p>\n<p data-pid=\"D3YeOYWT\"><b>定位故障</b></p>\n<p data-pid=\"iyLcdjtc\">确定故障点要结合故障诊断仪、机修师傅经验，<b>4S店有本品牌的专用诊断仪，肯定是要比维修厂的通用故障诊断仪更加精准，</b>如果只是些小毛病用通用的诊断仪就够了，比如发动机缺缸，甚至师傅的经验就能判断出来；比较大的问题，比如偶发性故障就不一定能够检测出来，况且4S店解决不了的故障还可以求助厂家，厂家会给与技术支持。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-db3c5a65cf5d46c5c2b87464eb4a6f48_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1268\" data-rawheight=\"951\" data-size=\"normal\" data-caption=\"发动机大修\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"hjL-pk51\">4S店的机修师傅只修本品牌的车，熟能生巧，对本品牌的车存在的常见问题都非常清楚，通过车主的问题描述就能判断个大概，大的维修厂还好，有不同的机修组负责不同车系的维修，小的维修厂就那么一两个师傅，遇到不熟的车型概率更大，所以涉及到维修方面就要尽量避开小的维修厂。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3cbcf15884b1e80c05a6f94210298b79_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"GXGg8Xtg\"><b>更换受损部件</b></p>\n<p data-pid=\"zb6XSryA\">这里涉及到两个方面，一个是机修师傅的维修技术，另一个是配件。<b>很多人只关注在哪里保养，从不想配件的好坏，殊不知车修的好不好配件占一半，用质量差的配件不如不修，还增加安全隐患。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9b1483e7faedf72ccdbe007c98011ca2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"976\" data-size=\"normal\" data-caption=\"4S店原厂件\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KyWThP_t\">4S店的配件基本不用担心，主要的配件都是原厂件，即使出了问题也好找。维修厂范围太大，有小的、大的、综合型、专修店等等，大的连锁修理厂有稳定的供应商，用的东西也不会太差，基本上都是OME件或者品牌件，<b>小的维修厂就不好说了，副厂件居多，说白了就是三无产品。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-727ad15682533ae69476be3aab4217c9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"988\" data-rawheight=\"515\" data-size=\"normal\" data-caption=\"图片来源于车FANS\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9C7BW4UO\">“配件定义”图片来源于 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/02280fe67e749f4ebe3f7881f463ab65\" data-hash=\"02280fe67e749f4ebe3f7881f463ab65\" data-hovercard=\"p$b$02280fe67e749f4ebe3f7881f463ab65\">@车fans</a></p>\n<p data-pid=\"BRrLh3Sj\">在维修技术上，4S店师傅对本品牌熟门熟路，特别是易损件的拆装更换，比如火花塞、刹车片等，小维修厂换这些东西也基本没有问题，但是遇到不常见、车型不同拆装方法差异大的部件就明显经验不足。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9166c952e473dec9625df41f1bf2fea3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1268\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"iWJ3YZCw\"><b>试车确定故障消除</b></p>\n<p data-pid=\"wiq-HTjn\">这一步是判断是否修好的关键一步，是对师傅维修水平以及配件质量的直接考验，试车时故障现象还在，说明没修好，师傅水平不行，连故障点都没有定位清楚；故障还存在，但是比之前有好转，那就是没有修对地方或者配件的质量不行；故障现象不在了，那才是真的修好了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-xiao-5-34-17?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张立晨</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520888270/answer/2416771464?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">25 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/288698699?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">保养间隔到底应该多久，4S 店说的真可信吗？</a><br><a href=\"http://www.zhihu.com/question/22610423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在 4S 店保养真的贵吗？</a><br>\n","link":"http://www.zhihu.com/question/520888270/answer/2416771464?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"每日笔记、日程管理、工作复盘——这是我钻研出的 Obsidian 八般武艺","date":"2022-03-31 08:27:25","description":"按：本文系根据作者发表在Bilibili的如下视频作品改编和扩展而成，截至本文发出时，视频已经获得超过20万播放量。少数派欢迎视频、播客创作者将多媒体作品沉淀和提炼为文字在本站发表。视频和文章中提及的 ...<a href=\"https://sspai.com/post/72385\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72385"},{"title":"从「用爱发电」到成为「稿霸」，聊聊我在少数派写稿的 6 年","date":"2022-03-31 06:30:00","description":"此刻是2022年3月15日的凌晨一点，虽然我已经睡意朦胧，但在这个安静的环境里，我却有些不想睡去，因为还有很多关于创作的话没有说。说来也巧，Tp找我约这篇稿子的时候还是年前，而在刚刚过去的一天，我已经 ...<a href=\"https://sspai.com/post/72319\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72319"},{"title":"如何评价《画江湖之不良人》第 5 季第 12 集？","date":"2022-03-31 06:28:12","description":"\n<p data-pid=\"GooZe8Ra\">大家好，我是被刘导，关导，周导，唐导，舒导，李导，轮流压榨了好几轮的若森美术总监吴强……今天来知乎主要是分享一下不良人系列美术绘制的二三事，在若森设计角色是一件非常让人头秃的事儿，李帅帅你还我们头发！<br></p>\n<p data-pid=\"ljydUj85\"><br>整体美术环节是根据导演和剧本的描述，和伙伴们一起脑暴，既有趣又痛苦。有趣的是看到文字一点点的实现成一个个美好的画面，有血有肉的人物；痛苦的是每一次的设计都是和导演的掰头…然后就可以开工了。</p>\n<p data-pid=\"xtqyrE4T\">我们的3D美术设计流程包含以下几个部分：</p>\n<ol>\n<li data-pid=\"NAJmmwYo\">角色设计，包含（角色概念草稿、细画、定稿、拆分、材质指定、纹理贴图拆分）</li>\n<li data-pid=\"HnL2bMYh\">场景设计，包含（氛围概念草图、细画、定稿、拆分；拆分又包含物件拆分、建筑拆分、纹理贴图拆分等，最后是材质指定）</li>\n<li data-pid=\"jz80F8m6\">道具设计，同上</li>\n<li data-pid=\"m2k3bPAs\">Matte Painting（数字绘景）</li>\n</ol>\n<p data-pid=\"LipDL1L8\"><br>下面是图例们：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3842fda9eb81f69666e75d2d18d47af0_720w.jpg?source=b1748391?rss\" data-caption=\"角色概念\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"487\" data-watermark=\"watermark\" data-original-src=\"v2-3842fda9eb81f69666e75d2d18d47af0\" data-watermark-src=\"v2-89dbaed927129ce1ed6d056eeafc7349\" data-private-watermark-src=\"v2-467b9a2f04b87edbf47cf0036553564e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-038a2f722c68fec7e199d5837e78ad48_720w.jpg?source=b1748391?rss\" data-caption=\"细画拆分三视图，材质指定纹理拆分\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"356\" data-watermark=\"watermark\" data-original-src=\"v2-038a2f722c68fec7e199d5837e78ad48\" data-watermark-src=\"v2-573abcdccffa1f81b850728047d6b64a\" data-private-watermark-src=\"v2-3f861b635291c0b7482c39a813a34457\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6375a5ca9249b8d2cc54b3e9d34176e6_720w.jpg?source=b1748391?rss\" data-caption=\"场景概念\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"949\" data-watermark=\"watermark\" data-original-src=\"v2-6375a5ca9249b8d2cc54b3e9d34176e6\" data-watermark-src=\"v2-0a21c7e455f3d8fb53003288abf31300\" data-private-watermark-src=\"v2-ee0a0e1c3f1952e022aead467bec03d8\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-8f19da4cefa7c2af29f0fddaab2794dc_720w.jpg?source=b1748391?rss\" data-caption=\"场景氛围\" data-size=\"normal\" data-rawwidth=\"1229\" data-rawheight=\"555\" data-watermark=\"watermark\" data-original-src=\"v2-8f19da4cefa7c2af29f0fddaab2794dc\" data-watermark-src=\"v2-532f69e4877ce4420b2e0d51ff52e5f9\" data-private-watermark-src=\"v2-383a8c0c65bbf342c491f917983ac0fd\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ea9194edab67cf6d50a85419eea6a049_720w.jpg?source=b1748391?rss\" data-caption=\"地形规划\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"497\" data-watermark=\"watermark\" data-original-src=\"v2-ea9194edab67cf6d50a85419eea6a049\" data-watermark-src=\"v2-7bd073edd5c7e3e7da5c0335a84efb5d\" data-private-watermark-src=\"v2-639e754574dd075945356885528eaabb\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-e7eded3b329d188c07c56d5320fc3502_720w.png?source=b1748391?rss\" data-caption=\"单体建筑拆分\" data-size=\"normal\" data-rawwidth=\"1104\" data-rawheight=\"1106\" data-watermark=\"watermark\" data-original-src=\"v2-e7eded3b329d188c07c56d5320fc3502\" data-watermark-src=\"v2-8c095183f287799592f2ed1b6e0028a7\" data-private-watermark-src=\"v2-386e5282164a86c8e9bdfc6d54edcd61\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-2fb7780bf309aaa2bbf9431951b9ceb3_720w.jpg?source=b1748391?rss\" data-caption=\"植被设计\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"550\" data-watermark=\"watermark\" data-original-src=\"v2-2fb7780bf309aaa2bbf9431951b9ceb3\" data-watermark-src=\"v2-69528c049d6aa23d23265b9a057648d6\" data-private-watermark-src=\"v2-caacaebe07261789d6613c0f1fe7380e\"></p>\n<p data-pid=\"czNFbfD0\"><br>制作不良人的美术是很不容易的事儿，从第一季走到现在，观众们对于剧情、历史、古建筑、再到服装的考究程度一直在升级。我们美术团队为了让大家能看到不一样的江湖而一直在努力，但受时间、成本、人力以及知识储备的影响，没法面面俱到。但是我们确实是在不断学习的，服饰、场景、道具，每一季都会更加的考究，每一季都在努力提升不良人的美术质量。<br><br>毕竟是要创作角色，会受限于画风等因素，无法完全按正统的唐朝服饰来塑造，但还有别的！从唐甲，到唐刀(仪刀、鄣刀、横刀、陌刀)我们全部按照规范重做了。做了大量的前期调研工作后才发现，大部分的影视剧和售卖的产品都是错误的，我们也是第六季了才发现唐刀是内弧刀。其他还有诸如官员的澜袍以及百姓的服饰也在逐步优化，<br><br>场景在唐朝时代背景的建筑上面也在不断调整，比如唐朝常见的批竹昂（斗拱的构件），摔网椽，直棂窗，屋脊的鸱尾等等，都有注意，尽量做到少出错，更加还原大家心目中的唐朝。<br><br>李导更怕出错，每次来我们美术这里看东西，都会问这个有没有考究，那个有没有找到出处...好多东西无法考证真的特别难找，我看制作的小伙伴有时候会默默地捏紧拳头，每当这个时候，我总是想躲远一点怕血溅我一脸...<br><br><br>说起这里我就想到了阿姐和萤勾的设计，设计萤勾的画师名叫杨绍勇，人如其名，真的超勇的，我称他为无情的输出机器，是我的王牌飞行员，一开始编剧导演们是以萤勾为主设计的，更加邪性，加上又是侯卿的姐姐，所以服饰考虑更接近侯卿一些，毕竟是尸祖。画了一半李导想加入关中元素，然后加了陕西姑娘的麻花辫，再往下推的时候发现还得考虑阿姐的人格，不能那么邪，然后又往萝莉的感觉走走。再继续画的时候发现和侯卿过于相似了，这样剧情上面太容易漏包袱，之后又调整了服饰。等到后期环节了，又来说制作复杂让我简化难度，删掉辫子，简化衣服。简化后缺少味道又调整了好多服装的细节，一套操作下来一个多月过去了，当最终定稿的时候，无情的大哥流出了饱含感情的眼泪。。。。。。。。本来想附上一份修改过程，但是不想扎伙伴们的心了，就这样吧。<br><br>我刚接手不良人三的时候，看到主角李星云，当时和大家一样觉得300年的功力都扶不起来。当陪着老李一步步的走下来，在周导，舒导，李导，带着老李一步步的成长，我和美术小伙伴们对于老李造型的一步步的塑造，回头再看和大家一起绘制过的数不清的老李设计稿时，感觉就像是陪我走过了整个青春，从少年到不断的成长和成熟，感觉真的泪目，给老李一个抱抱，附上一份原画！<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1073db5bef6a4e9c5f591d2c5be6688f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"539\" data-watermark=\"watermark\" data-original-src=\"v2-1073db5bef6a4e9c5f591d2c5be6688f\" data-watermark-src=\"v2-79e3adf051e88b93d589b22115a22d94\" data-private-watermark-src=\"v2-ade53a1a17b8aeb887971fe990fe9b00\"></p>\n<p data-pid=\"OhKmJlKU\"><br><br>最后澄清一下：兄弟们都已经释怀了，到现在还记仇的就我一个了</p>\n<p><img src=\"https://pic2.zhimg.com/v2-653f7b5fc54f314123585ccfa8231fd1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"1572\" data-watermark=\"watermark\" data-original-src=\"v2-653f7b5fc54f314123585ccfa8231fd1\" data-watermark-src=\"v2-5106d322c5221156e672387b48b0df94\" data-private-watermark-src=\"v2-25a31f9b7b95bcaa8ed8e4a83251b859\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/rockxiao-qiang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Rock小强</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/525146162/answer/2416444915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">208 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/40642158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《画江湖之灵主》与《画江湖之不良人》哪个更优秀？</a><br><a href=\"http://www.zhihu.com/question/308853704?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价《画江湖之不良人》里的侯卿?</a><br>\n","link":"http://www.zhihu.com/question/525146162/answer/2416444915?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价《画江湖之不良人》第 5 季第 12 集？","date":"2022-03-31 06:28:07","description":"\n<p data-pid=\"Y0_m4z4Y\">2022年3月29日星期二，《不良人V》的声音制作完成了，在我想看看知乎上都说了什么的时候，市场部两个魔鬼带着李嗣源的眼神进到我的办公室，并且用萤勾的口吻对我说：“写！一！篇！知！乎！”<br>我：“写什么内容？”<br>市场部：“随意。”<br>我：“怎么写？”<br>市场部：“随你。”<br>我：“不写行不行？”<br>市场部：“不行！！！”<br>我：“什么时候要？”<br>市场部：“今天。”<br>我：“……”<br><br>本来想以普通人的身份和大家相处的，唉，不装了，我摊牌了！那个在第一集下面留言追着导演要头发的“若森声音工程师”是真的！说我假冒伪劣、HP的出来道歉！<br><br>实话说，音频方面的工作尤其是音效行业，并不像综艺节目里演的那样好玩儿。实际上音效是一项极其废耳朵、极度无聊、容易掉头发以及容易累吐血的工作。而动漫的音效制作，难度是高于电影、电视剧、综艺节目的。并且《不良人V》这样的项目又是难上加难，是难倒众多声音公司的一个“答不溜”级项目。我作为若森的声音工程师，听到合作方说的最多的一句话就是：“你们做好莱坞的片啊？”然后我无力反驳……<br><br><br>对比前四季，第五季的帅导喝了点假茅台，一拍大腿用了宽画幅拍动画。我得知这个消息后第一时间问他，对话是这样的：<br>我：“爱妃听说你用宽银幕拍？”<br>爱妃：“是的，画幅变宽了可以拍到更多场景、道具和人”<br>我：“那成本不是要增加么？”<br>爱妃：“不管，我必须要这么弄，不良人必须要更新画质”<br>我：“那就意味着声音需要跟着你的场景和人物提供更多的可能。”<br>爱妃：“不用那么多，无关紧要的人你凑合着来就成，场景又不需要声音，没事儿。”<br><br><br>在第四集做姬如雪单独去见巴尔那场戏的时候，音效小伙伴提出，这么有震撼力的场景需要有声音跟着才对，我说不用，导演不需要，做多了画蛇添足。结果做完后我和帅导一起看这一段戏的时候他就变卦了：<br>爱妃：“这么大场景你不给我声音？你咋想的？”<br>我：“你不说场景不需要声音么？”<br>爱妃：“我啥时候说了？”<br>我：“。。。”<br><br>诸如此类的问题太多了，说了不算的、临时变卦的、改主意的、变想法的……最后连一个镜头飞过去脸都没露出来的群演还要给三个脚步声，最主要的是连个名都没有！！！帅导如果不说那是个角色，我TM以为那是只蚊子。再加上不止承担了音效的审核等工作，还附带做了几段音乐的后期，这让本就不富裕的体力，雪上加霜啊！！！<br><br>《不良人》系列的动漫，我是从第二季后半段开始跟进的，对比前几季的声音制作，第五季确实实现了更多的可能性，从声音精度到动态提升；从频响范围到细节处理等等方面都得益于我，是的没看错，都得益于我...们掉的头发！如果说帅导有那么一nainai功劳，也就占0.01%（因为虐音频团队太狠了，我要替音频团队和我自己发声doge）。<br><br>为了做好第五季，音频团队采购了大量的设备来应对帅导可能提出的各种无理且必须做好的要求。帅导的一个小要求，音频团队可能要为之付出几天的时间来实现。首先是音箱的选购，正常的音频工作室两对音箱就可以了。因为我希望不良人可以做动漫声音行业的标杆，为此音频团队直接采购了四对监听音箱加两对普通的多媒体音箱来确保在任何环境下观众听到的声音都是相对准确的。<br><br>为了提升精度，不惜重金采购好莱坞音效包；为了做大动态范围，买了很多音频工作者想拥有却舍不得买的SSL ORIGIN调音台和一堆SSL、NEVE、Lexicon、TC electronic、WAVES、iZotope硬件/软件插件；为了提升工作效率，还搭建了云端工程同步系统。粗略估算，折合成彩礼，可以娶大概20个媳妇。煞费苦心啊……所以粉丝们，请一定带上你最好的耳机，仔细的听，因为你可以听到前几季听不到的声音———“钱”……并且把画面关掉，把画面关掉，把画面关掉。<br><br>为了可以提升不良人在声音上的品质，除了买设备，当然还需要下足功夫用心去制作声音。不了解音效制作的人可能会说，跟着动作做点声音不就好了嘛？实际上，跟着动作做声音只是声音的开始，音效工作的步骤是这样的：Foley&gt;VOX&gt;SFX&gt;MUSIC&gt;MIX&gt;Master，翻译成人话就是拟音、台词编辑、特殊效果制作、音乐编辑、混录、母带。一堆流程看起来很头疼是不是？那我负责任的告诉你，干的时候脑袋更疼。如果爱妃提出修改的范围是3秒，那么通常声音修改需要提前10秒，后推10秒。<br><br>做高质量声音最应该做的就是让观众听不出来声音有任何的违和感，只有观众在不注意声音的时候，声音才真正的把故事讲清楚了。这之间如果有任何地方声音被观众注意到了，那声音工作就失败了。我们不光被帅导虐，我们还自虐，是的和毛大师一样的自虐，已经做完的地方反复修改，帅导说通过的地方我们反复调整。告诉你们个事，我印象中帅导通过之后我们还做出修改的地方大概每集有30个左右的点，帅导没听出来……因此我和音效团队还私下笑过帅导hhhhhhhhhhh。<br><br>一波三折的制作和压缩到极致的周期，能呈现出这样理想的状态，需要感谢导演和音效团队的努力，当然还要感谢我自己和我地方支持中央的发型。《不良人V》制作结束了，我们还要迎接《不良人VI》以及后面的7、8……这是我和爱妃的第一次项目合作，因为帅导叫我王上，所以我叫他爱妃，这样显得亲昵一些，hhhhhhhhh。我和我的小伙伴们的头发十有八九是要不回来了，但是发声还是要的！最后奉献给大家一个音效工作截图，上面每一个黑点都是听到的音效，每一条曲线都是用手画的，大家可以体会下。</p>\n<p><img src=\"https://pica.zhimg.com/v2-23a3907533e94293d531cee7aec9b682_720w.jpg?source=b1748391?rss\" data-caption=\"第12集音乐工程\" data-size=\"normal\" data-rawwidth=\"1203\" data-rawheight=\"716\" data-watermark=\"watermark\" data-original-src=\"v2-23a3907533e94293d531cee7aec9b682\" data-watermark-src=\"v2-c8daf7574a82df3608007aa31045bd41\" data-private-watermark-src=\"v2-5bd56dfcc62c3dba3135412bde220dca\"></p>\n<p data-pid=\"TWBH5AW7\"><br><br>与爱妃的互动就到这了，再多写你们该以为我是个关系户了。咱来点硬核内容，不感兴趣的老铁们可以掉头了！第10集麦田戏的声音是怎么制作的，首先要了解一下声音为什么听起来有层次感，这要归功于声音团队提出的声音分层的概念：<br>一、声音的分层数量（大概统计）</p>\n<ol><li data-pid=\"cHYt6JMm\">环境声</li></ol>\n<p data-pid=\"a6JHfOQl\">（1）风声、水声、空气噪音<br>（2）鸟叫、风吹动树叶<br>2、拟音<br>（1）人或动物的动作声音<br>（2）体态不同的人的动作声音<br>（3）特殊的动作声音<br>（4）高速镜头下慢动作处理<br>（5）镜头动作的声音跟进<br>（6）太多了不写了……<br>3、特殊音效制作<br>（1）高速镜头下Whoosh的基础选取和变形<br>（2）打点形式的音效制作<br>（3）动作结合特殊效果的制作<br>（4）音乐和特殊效果的比例调整<br>（5）形成相位抵消的处理<br>（6）声音频率一致导致音量翻倍或不翻倍的解决<br>（7）太多了不写了……<br>二、声音如何分层<br>1、所有环境声音一层<br>2、拟音一层<br>3、特殊效果一层<br>4、画面以外的声音一层<br>5、AUX通道N层<br>6、总线通道多层<br><br>声音的制作分类其实非常庞杂，比如说帅导在某一场戏需要水声大一点，音效制作上需要分析几个问题：1、需要多大的水声；2、画面上展示的水是溪流、江河、大海、还是瀑布？；3、水声放大会不会影响其他声音的展现？等等一系列问题吧，需要经过一系列严格的计算和测试，这还要涉及到一些基础物理学的方法，比如说多普勒效应、韦伯定律、掩蔽效应、劳氏效应等等。通过一系列的测算来确定声音要大还是要小，理论根据和实际听觉感受如何达到平衡。也是通过这样的测算来判定帅导的要求合理还是不合理（虽然不合理也要改）。<br><br>如果大家还有印象，第10集麦田的那场戏，如果低成本的制作会比较简单，风吹几下，跑一跑就可以了。但是我们在做这场戏的时候，音轨多达30多个物理通道，首先就是要判定风声有多少种，什么时间风大什么时间风小，其次脚步声的设计要做出背着人的感觉，因为踩到地上有泥土有麦田的根茎部分，所以要测算出一脚踩下去大概的脚印深度，背不动的时候还要深一脚浅一脚，踩到地上的声音每一个都不能一样，这对制作来说是一个非常麻烦的事情，既要符合剧情设定，还要符合物理规律，最可怕的还要做出艺术感。这就涉及到牛顿力学的原理。那么30多个物理音轨都有什么呢：风声13轨、脚步声6轨、手臂动作2轨、腰部和大腿动作3轨、雷声5轨、特殊效果3轨，这样就完成了这一场戏的声音基础。<br><br>再通过辅助通道AUX来解决Envelope（通俗来讲就是声音起伏）的问题，通过插件解决Reverb、Delay、Dynamic、WaveCut等等工作，用到的每一个插件都需要经过严格的计算，每一次用鼠标或者调音台推子调整声音起伏都要反复的尝试，比如说Reverb插件的参数每一个都需要做出调整来保障听到的声音是有层次的，是和其他声音不一样的，哪怕只是细微的差别也需要做出来。最后再通过“混录”把所有声音捏合到一起，再呈现给帅导看。<br><br>给大家展示几个我们需要用到的插件，音频团队开展过一项关于音效制作的调查，平均每调整一个地方的音效或者一个点的音效用一款效果处理器大概要20分钟左右的时间来测算和调整。《不良人V》平均一集要用到150多个通道（缩放也缩放不到那么多通道），硬件和软件效果器插件要用10个左右，每一条Envelope的画线都要4个小时左右的时间。<br><br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-94959cfbe5fc50b8d91db65610b27bae_720w.jpg?source=b1748391?rss\" data-caption=\"这张图就是音效团队在制作中用到的其中一款混响插件：CXF\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"442\" data-watermark=\"watermark\" data-original-src=\"v2-94959cfbe5fc50b8d91db65610b27bae\" data-watermark-src=\"v2-489bad109dc7f612c4a340a1b97670a9\" data-private-watermark-src=\"v2-bff0cc7af92942451f05cfb8174f0f46\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e694bf23e2d4dcf01a058ec17cdca459_720w.jpg?source=b1748391?rss\" data-caption=\"这张图是磁带模拟器，功能很繁杂\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"580\" data-watermark=\"watermark\" data-original-src=\"v2-e694bf23e2d4dcf01a058ec17cdca459\" data-watermark-src=\"v2-9ab7a01e184a9ba3b29efbe25810b081\" data-private-watermark-src=\"v2-ad982875247bdc9f8206afce96df3ec2\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-47b2cb634eb5371c6be919a9414d1509_720w.jpg?source=b1748391?rss\" data-caption=\"这张图就是第四集音乐后期的其中一个插件\" data-size=\"normal\" data-rawwidth=\"621\" data-rawheight=\"420\" data-watermark=\"watermark\" data-original-src=\"v2-47b2cb634eb5371c6be919a9414d1509\" data-watermark-src=\"v2-a01e548cc3b8924da39511943667f132\" data-private-watermark-src=\"v2-67b2c9566b8d1e56e50f010bebb81349\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cf236df1c3a8e1e4ed2fcee2b4202547_720w.jpg?source=b1748391?rss\" data-caption=\"这是iZotope Ozone的一套母带插件\" data-size=\"normal\" data-rawwidth=\"1130\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-cf236df1c3a8e1e4ed2fcee2b4202547\" data-watermark-src=\"v2-84484a855aa6e2a26c36603c0e5ced3f\" data-private-watermark-src=\"v2-6d143ec39fdcacd526ce1a346fd5d23e\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-76495390d6946a592fe88404233960af_720w.jpg?source=b1748391?rss\" data-caption=\"低频激励器\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"711\" data-watermark=\"watermark\" data-original-src=\"v2-76495390d6946a592fe88404233960af\" data-watermark-src=\"v2-038340c22679add713c2bae1b25a4585\" data-private-watermark-src=\"v2-71eccae7f1a6fd4b3f6218c10626557c\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1191d51bba2f02e396e7e677454b33e7_720w.jpg?source=b1748391?rss\" data-caption=\"EQ效果处理器\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"625\" data-watermark=\"watermark\" data-original-src=\"v2-1191d51bba2f02e396e7e677454b33e7\" data-watermark-src=\"v2-d559e764ac5aca0a32d2d6a178f94024\" data-private-watermark-src=\"v2-6669aebfdbd93ffe4884e2908525c41d\"></p>\n<p data-pid=\"03XyOBpZ\"><br>具体功能我就不多做介绍了，总之！爱妃要还我<b>头发！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cody-67-35?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">若森声音工程师</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/525146162/answer/2416322528?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">208 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/40642158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《画江湖之灵主》与《画江湖之不良人》哪个更优秀？</a><br><a href=\"http://www.zhihu.com/question/308853704?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价《画江湖之不良人》里的侯卿?</a><br>\n","link":"http://www.zhihu.com/question/525146162/answer/2416322528?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"将网站收藏汇集一处，我是这样用 Notion API 搭建个人「剪藏」的","date":"2022-03-31 03:32:15","description":"在几个月前，我浏览少数派才知道 Notion 开放了自己的 API，方便用户通过编程的方式丰富自己的 Notion。关于 Notion API 的介绍和使用方式，这里推荐少数派上的两篇文章：当 Python + Notion API，你就可以用「Notion 助手」轻松调试自己的小机器人 和 以全新的 Notion API，尝试全新的记账方式 。我正是从这两篇文章中学到了如何操作 Notion API。\n\n但是这两篇文章提到的关于 Notion API 的应用，一个是关于吃药，一个是关于记账，都不符合我使用 Notion 的习惯。这些生活琐事我还是倾向于使用一些提醒事项软件（Due、2Do、Things 等等），所以一直都没有怎么重视 Notion API 的应用。直到前不久，我突然发现一个困扰我很久的痛点可以很方便的通过 Notion API 来解决。这个痛点就是「收藏夹管理」。<a href=\"https://sspai.com/post/72090\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72090"},{"title":"冷门高频股票因子（0）","date":"2022-03-31 02:26:14","description":"\n<p data-pid=\"kBrSuRaK\">一些不常见的高频因子，分享给有缘人。</p>\n<p data-pid=\"7Ab0T33s\">写得比较随意，大致有几块：Order aggressiveness、order book shape、撤单、事件聚集、订单薄韧性、异常挂单、逐笔。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>一、Order aggressiveness</h2>\n<p data-pid=\"ni1OFVk4\">（1）订单侵略性，其实就是挂单的激进程度。假设你是买家，你挂单的价格越高，你就越激进；反过来，你是卖家，你挂单价格越低，你越是激进的卖家。举个例子，买家挂单越接近bid1，越激进；卖家挂单越接近ask1，越激进；</p>\n<p data-pid=\"NWmeVDhz\">（2）订单侵略性，体现了买家/卖家完成交易的迫切程度。通过整个订单薄，我们可以知道所有买家整体的激进程度、和所有卖家整体的激进程度；通过这个，就能构建一系列因子了。此外，买卖aggressiveness的差异，也是一系列因子；</p>\n<p data-pid=\"SezybC5z\">（3）一个订单的执行概率和订单薄的厚度、参与者对即将到来的订单的预期有关；买盘越厚，一个潜在的买家下market order的概率更大；这套说法对卖方同样适用；bid ask的厚度体现了看涨和看跌者的相对力量。</p>\n<p data-pid=\"MqK-WgOL\">（4）不要用静态的思维来看待订单薄，要从动态的角度来分析。订单薄性质的变化，体现了多空力量的动态变化，是未来价格走势的重要体现；在这个问题上，时间序列的建模是很有必要的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>二、order book shape</h2>\n<p data-pid=\"1CuPsgpe\">（1）order book shape，就是订单薄所呈现的形状。</p>\n<p data-pid=\"2idQ_ZnL\">（2）很多学术研究表明，股票的order book的平均形态就是Humped，就是整个订单薄上有一块隆起的地方；</p>\n<p data-pid=\"Mr5NZ7s9\">（3）个股来说，我觉得，离不开几种情况。第一，就是Humped，只是这个顶点不同，而且可能随着时间的变化而变化；第二，可能是双峰的、甚至是多峰的Humped；第三，可能是没有峰，就是矩形分布；第四，可能就在某些档位有分布；第五，可能是单调的，比如从第一档往后几乎单调上升或者下降，单调的函数可以是线性的，也可以是concave或者convex；</p>\n<p data-pid=\"fmPRVXE7\">（4）上面，是从全局的角度来描述LOB（limit order book简称，下同) 状态的一种方法。也可以只关注一些特殊的点，比如，在某个偏离bid/ask的位置有个奇怪的大单；然后，还要加入时间维度。前面两个，都是静态的、截面的。</p>\n<p data-pid=\"1HGQHBTc\">（5）humped位置：很多实证研究，都表明，LOB的平均形态，就是humped，只是这个humped的位置不同，这个顶点的位置，可以作为一个因子。比如，买单的顶点位置，是位于0-10%、10-20%等的哪个位置；此外，还需要关注这个hump位置随时间的迁移。</p>\n<p data-pid=\"YW5y4JFG\">（6）order book slope：订单薄斜率，描述订单薄上的价格和该价格处的挂单量之间的关系。这个slope属于shape的分支，其含义和aggressiveness类似；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>三、撤单</h2>\n<p data-pid=\"mDsQLmUC\">（1）撤单行为，不仅反映了交易者的观点的变化，还会影响其他交易者；根据买卖双方各自的撤单量、撤单金额、撤单价位、大单超大单的撤单情况，可以构建很多因子；</p>\n<p data-pid=\"HQ84mIAn\">（2）和订单薄不同，撤单类因子，是一个流量变量，它需要考虑一个时间段的因子；构建撤单因子时，一定不要独立地看待某段时间的撤单行为，而需要结合实际的成交情况，这才是这段时间内多空双方博弈的信息全集（相对的）；</p>\n<p data-pid=\"vcPNXZEF\">（3）fleeting order：即挂单后短时间内又撤掉的订单；除了正常交易情况下撤单去追跑掉的价格外，fleeting order还有欺骗对手的作用，挂单者想制造假象，以诱导其他投资者（spoofing order）；比如，前面降了order book shape，如果你采用了这种因子进行交易，那么你的对手以通过fleeting order来扰乱order book，从而让你的系统发出虚假的信号；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>四、事件聚集</h2>\n<p data-pid=\"hfUxECWe\">（1）定义一些事件，比如撤单、挂买一单、超大买卖单出现，然后在一段时间内统计事件发生的频率，可以构建很多个系列的因子；这是高频数据低频化的常见思路；</p>\n<p data-pid=\"0CBt4l_H\">（2）一些事件具有聚集的特性，原因有：交易者拆分大单来掩盖交易意图；交易者之间的模仿；不同交易者对新闻的反应（反应是一致的，只是有先有后）；为了在竞价上击败其他交易者；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>五、订单薄韧性</h2>\n<p data-pid=\"BHV66DWs\">（1）如果来了个大的市价卖单，然后，当然，买单被吃掉很多；但是通常会回复一部分。比如，有个100手的市价卖单，刚好吃掉了所有报价21元以上的单；后来，21元以上的买单恢复了80手。那么，这个回复能力，就是80%。</p>\n<p data-pid=\"c7qAwOcM\">（2）订单薄韧性，反映了一部分股票的属性。是个很有意思的因子。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>六、异常挂单</h2>\n<p data-pid=\"UrEebOQZ\">（1）有时候，在原理买一和卖一的地方（比如涨停价跌停价，会存在大量挂单。正常情况下，这些订单几乎不可能成交。</p>\n<p data-pid=\"O5Rbd6c5\">（2）类似这样的异常挂单，十分重要。依据这些数据来构建的因子，很有信息量。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>七、逐笔数据：主动买卖</h2>\n<p data-pid=\"-jb_cg0C\">（1）判断一笔交易属于主动买还是主动卖，通常以一笔交易的买卖双方的订单到底先后顺序来定；</p>\n<p data-pid=\"rTy_6rXo\">（2）在实际中，逐笔交易买卖单判断十分重要；像我们常见的资金流这类指标，就是这么计算的；</p>\n<p data-pid=\"YTL2bIXX\">（3）逐笔数据可以构建的因子很多，主动买卖算一类；</p>\n<p data-pid=\"ixNkAgK3\">（4） 举例：日内累计主买率、日内累计资金净流入、日内累计大单资金流入率、日内累计小单资金流入率，等等；</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cao-xie-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爱吃橙子的斐歌</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/490402735?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：英特尔推出锐炫 A 系列移动端独立显卡、黑鲨手机 5 发布等","date":"2022-03-31 00:44:40","description":"三星与西部数据达成合作，推行存储技术标准化、轻型牵引挂车 C6 驾照即将开放等。<a href=\"https://sspai.com/post/72394\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72394"},{"title":"处理器简史 04 | 专利官司刀光剑影，公关危机拱手河山","date":"2022-03-30 09:33:13","description":"80 年代末、90 年代初，英特尔和 AMD 在各自风格强硬的创始人领导下，在实验室、法庭展开了多线作战。凭借技术上的优势，英特尔一度接近独大，但接踵而来的产品纰漏、公关失算和法庭失利，却给了 AMD 重整旗鼓、以下克上之机。<a href=\"https://sspai.com/prime/story/sv-anecdotes-04\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/sv-anecdotes-04"},{"title":"咖啡生活从摩卡壶开始，一杯简单的浓缩咖啡怎么做","date":"2022-03-30 07:50:15","description":"Espresso 的源头，从摩卡壶开始。<a href=\"https://sspai.com/post/71794\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71794"},{"title":"汽车的 OTA 功能，真的能让车「常用常新」吗？","date":"2022-03-30 07:20:06","description":"\n<p data-pid=\"uDgh6t5f\"><b>理论上可以，并且OTA的使命就是让车“常用常新”</b>。</p>\n<p data-pid=\"2rByh1jg\">但是在具体操作上，各个车企或者车型能够给消费者带来的新鲜感并不一致，主要在于以下几个方面：</p>\n<ol>\n<li data-pid=\"tXGi9AXh\">这台车的哪些功能/性能是由软件控制/决定的？</li>\n<li data-pid=\"zHcsy9Rl\">在由软件控制的功能中，又有哪些控制器支持OTA刷新？</li>\n<li data-pid=\"2WJ-2Qry\">在支持OTA刷新的控制器中，又有哪些做到了足够的硬件预留？</li>\n<li data-pid=\"lIGEAb78\">车企对于车辆的“成长”是否有着统一的规划以及持续的投入？</li>\n</ol>\n<p data-pid=\"yLoHA4me\">那么接下来，我就一条一条的带大家来看一下。</p>\n<h2>这台车的哪些功能/性能是由软件控制/决定的？</h2>\n<p data-pid=\"bom2yoJs\">虽说“软件定义汽车”这个概念火了也还没多少年，但是软件在汽车上发挥作用的时间其实并不短。</p>\n<p data-pid=\"pkGOmyDf\">尤其是到了这几年，<b>即使是燃油车，大部分的功能其实也都和软件息息相关</b>。</p>\n<p data-pid=\"vnHr77Yu\">比如我们经常说的“变速箱的调校”、“动力总成的匹配”，其实都是依靠软件中逻辑以及各个参数的标定来实现。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f05b2f45edf4340fed5a946cdf02f431_720w.jpg?source=b1748391?rss\" data-caption=\"毕竟这玩意儿咱也没法OTA对不对？\" data-size=\"normal\" data-rawwidth=\"1798\" data-rawheight=\"750\" data-watermark=\"watermark\" data-original-src=\"v2-f05b2f45edf4340fed5a946cdf02f431\" data-watermark-src=\"v2-b166ea3e1a186827d81d0b92fe53d7f2\" data-private-watermark-src=\"v2-bff8263a96ea0fc905a4142d87612906\"></p>\n<p data-pid=\"o_zGF5Ji\">事实上，除了车身、被动悬架（传统弹簧&amp;减振器）、手动座椅……等等部件外，别的包括发动机、变速箱、电动助力转向、制动（包括ESP）、门窗、灯光、辅助驾驶、智能座舱……等等一系列零件或功能都无法脱离软件而独立存在。</p>\n<p data-pid=\"RmYFN-gU\">所以，从这个层面来说，<b>如果一台车由软件控制/决定的功能越多，那么其OTA的基础也就越好</b>。</p>\n<p data-pid=\"p_M848pd\">毕竟，一个纯硬件的东西，咱也没法OTA不是？</p>\n<h2>在由软件控制的功能中，又有哪些控制器支持OTA刷新？</h2>\n<p data-pid=\"-3w418-0\">其实一般来说，绝大多数的控制器都是支持刷新的，最起码是支持用专业诊断工具刷新的。</p>\n<p data-pid=\"CRKj_Nw2\"><b>但是能否支持OTA刷新，主要取决于两个因素：</b></p>\n<ol>\n<li data-pid=\"QMy12otb\">控制器是否有空间和能力来支持AB分区；</li>\n<li data-pid=\"glxEkieV\">车辆是否有能力从外界下载软件包，并通过车内通信网络分发至各控制器。</li>\n</ol>\n<h3>控制器是否有空间和能力来支持AB分区</h3>\n<p data-pid=\"D5RMdP4v\">首先跟大家解释下什么是AB分区。</p>\n<p data-pid=\"Cwv198RN\">AB分区就是控制器需要把存储空间分成两块，一部分正常运行并作为备份（我们称之为A区），另一部分执行刷新工作（我们称之为B区）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6fab8814221f6d45281d5b33b243d513_720w.jpg?source=b1748391?rss\" data-caption=\"汽车ECU控制器\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1052\" data-watermark=\"watermark\" data-original-src=\"v2-6fab8814221f6d45281d5b33b243d513\" data-watermark-src=\"v2-94ccf5661deabcafec04a3f456d90ea4\" data-private-watermark-src=\"v2-230801b2683c1055bf2dd55899ad02aa\"></p>\n<p data-pid=\"DYK69eOV\">如果升级成功，则在重新启动后切换到B区工作，擦除A区部分的内容以便下一次升级时刷写；</p>\n<p data-pid=\"a8DbmEmn\">如果升级不成功，则继续保持在A区工作，擦除B区的内容以便重新升级。</p>\n<p data-pid=\"2oD4jTFp\"><b>虽然AB分区并不是OTA的必要条件，但却可以大幅度降低车辆控制器在OTA后变砖的可能性</b>，所以只有极少数服务保障做得好的车企才敢在控制器不支持AB分区的情况下OTA，否则大多都会放弃。</p>\n<h3>车辆是否有能力从外界下载软件包，并通过车内通信网络分发至各控制器</h3>\n<p data-pid=\"pzeS04Ns\">想要OTA，一个必要条件就是——车子能联网下载软件，并且FOTA Master有足够的空间来储存软件，最后还要顺利地将软件分发至各控制器。</p>\n<p data-pid=\"lPv14rJa\">前两个好理解，这里我主要讲讲分发的事情。</p>\n<p data-pid=\"--NTUSLd\">即使是现在，绝大多数的车辆其车内各控制器之间都是依靠CAN总线网络来通信，只有少部分车的少部分控制器用上了以太网通信。</p>\n<p data-pid=\"hxc3qhIT\">所以<b>在大部分情况下，通过CAN总线来传输或者刷新软件的速率是比较低的</b>，遇到稍微大点的软件，刷个半个小时也不是可能。</p>\n<p data-pid=\"aaxVQOR5\">此时如果是电动车，时间长就长吧，锁车走人就行。</p>\n<p data-pid=\"mHMMjmto\">但如果是燃油车，就不一定能做到这么从容了，因为12V蓄电池的电量不一定能支撑这么长时间的刷新，万一刷一半没电了还得喊救援，得不偿失。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3118f9b08ea706da8c4d9fe84b20446f_720w.jpg?source=b1748391?rss\" data-caption=\"汽车电气架构的进化\" data-size=\"normal\" data-rawwidth=\"2800\" data-rawheight=\"638\" data-watermark=\"watermark\" data-original-src=\"v2-3118f9b08ea706da8c4d9fe84b20446f\" data-watermark-src=\"v2-7df42c0687aed1645874ee7bc10e36b8\" data-private-watermark-src=\"v2-ad76351a83f6cac568675e89c0a30e66\"></p>\n<p data-pid=\"qZlcm_wH\">正是因为上述原因，<b>真正能支持全车控制器升级的车往往都需要重新设计整车电气架构</b>。</p>\n<p data-pid=\"UjTNAHL9\">而那些出生于旧平台的油车，有的时候虽然会宣传自己支持“全车OTA”，但实际上可能只有少数几个控制器支持。</p>\n<h2>在支持OTA刷新的控制器中，又有哪些做到了足够的硬件预留？</h2>\n<p data-pid=\"4Zwu45zy\">不管是新势力还是传统车企，造车并不是一件暴利的事情，因此<b>绝大多数车企在物料成本方面的压力还是挺大的</b>。</p>\n<p data-pid=\"8kZP2OO5\">而在另一方面，由于近些年智能驾驶、智能座舱等领域的技术发展相对比较快，其<b>对外部硬件或者本身芯片算力、储存空间的依赖也是不断提升的</b>。</p>\n<p data-pid=\"W0ksDIhJ\">所以，如果想要真的做到“常用常新”，如何在硬件预留和整车成本压力间取得一个很好的平衡是个技术活。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cfa94ddfafde8ac08366501190754638_720w.jpg?source=b1748391?rss\" data-caption=\"现在看来平平无奇的硬件，在当年还是比较领先的\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"515\" data-watermark=\"watermark\" data-original-src=\"v2-cfa94ddfafde8ac08366501190754638\" data-watermark-src=\"v2-640e09a5d84bd79551d8d65cd28207a0\" data-private-watermark-src=\"v2-4485effeb68f7409e56284892a5fcfe7\"></p>\n<p data-pid=\"77vqA2ED\">这里我们以蔚来举例吧，蔚来的NT1.0平台自2017年上市以来在智驾方面是MobileEye Q4+5R1V的方案，在智舱方面则是Nvidia Terga处理器。</p>\n<p data-pid=\"K_AtPBd2\">毫无疑问，这个硬件配置在当时绝对是领先的，同时成本也是比较高的。</p>\n<p data-pid=\"Fwg9uKwO\">也正因如此，蔚来才能在NT1.0发布快五年的今天持续提升该平台的能力和用户体验，的确是做到了“常用常新”。</p>\n<p data-pid=\"aof4GT8k\">但与此同时，无论是和友商相比，还是和蔚来自己的NT2.0平台相比，NT1.0的硬件的确也落后了，智驾方面的潜力基本挖光，而智舱方面卡顿的抱怨也越来越多。</p>\n<p data-pid=\"v6DmE4rQ\">所以从这个层面上来说，<b>OTA让车新了，但又没那么新，因为相关控制器的硬件预留决定了OTA的潜力</b>。</p>\n<h2>车企对于车辆的“成长”是否有着统一的规划以及持续的投入？</h2>\n<p data-pid=\"0SXv9hne\"><b>如果说前三点更多的是能力问题，那么这一点则是态度问题。</b></p>\n<p data-pid=\"n8P5paPf\">我现在的两台车都是支持OTA的，但是其中一台自2018年提车后一共只进行了两次针对娱乐系统的OTA，最近一次是2019年年底。</p>\n<p data-pid=\"v3z41vVl\">而另一台车提车到现在不过9个月，已经对车辆各个控制器推送了好几次OTA，而且其中大多数都能够给用车体验带来比较大的提升。</p>\n<p data-pid=\"BKVs04q7\"><b>此外，并不是所有的用户都喜欢变化。</b></p>\n<p data-pid=\"ckV1OxdO\">那么针对这种情况，车企是否能够很好的把自己的更新计划与更新内容与用户分享，让用户对于即将到来的更新有个预期？</p>\n<p><img src=\"https://pica.zhimg.com/v2-60ee50029b137372fdce9f6e0062c1a8_720w.jpg?source=b1748391?rss\" data-caption=\"公测既是对用户的尊重，更是对产品的把控\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"405\" data-watermark=\"watermark\" data-original-src=\"v2-60ee50029b137372fdce9f6e0062c1a8\" data-watermark-src=\"v2-9797a57d085bf733f85f41ae0dca17fc\" data-private-watermark-src=\"v2-2216576a410c8c088be12550e3e3bda1\"></p>\n<p data-pid=\"gHa33xWm\">或者说，车企是否会先组织一批用户进行内测体验，根据反馈优化后再推出最终的版本？</p>\n<p data-pid=\"9AYjh9lr\">那么根据我个人的经验来看，传统车企在这两方面上都比新势力做得差很多。</p>\n<p data-pid=\"oKpuy6ls\"><b>而车企在量产后对于OTA的规划和投入，恰恰才是车辆能否“常用常新”的核心。</b></p>\n<hr>\n<p data-pid=\"EE0aJB85\"><b>我是 <a href=\"https://www.zhihu.com/people/9caf5861c83b0e4af5cdd5a04260151e\" class=\"internal\">@三斤哥</a>，一个新能源、变速箱、智能网联都有涉足的汽车主机厂工程师。有兴趣的朋友可以关注我，我会从汽车工程师的角度给大家分享相关知识、解读热点问题。</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_9caf5861c83b0e4af5cdd5a04260151e\"></a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xu-xin-24-34?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三斤哥</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/473989542/answer/2413445609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">87 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/452921453?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在买车还是等小米汽车？</a><br><a href=\"http://www.zhihu.com/question/504383452?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在想买车，可是后面汽车更新换代出来的汽车更好，要不要再等一两年？</a><br>\n","link":"http://www.zhihu.com/question/473989542/answer/2413445609?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"同步、导入、链接，聊聊我为何用回 LiquidText 读文献","date":"2022-03-30 06:34:28","description":"LiquidText 在不断进化。因为加入了跨设备实时同步、文献管理器整合，以及深度链接这三个重要功能，显著改善了使用体验，丰富了应用场景。我愿意为它订阅付费，并且重新纳入到我的笔记工具系统中。<a href=\"https://sspai.com/post/72033\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72033"},{"title":"《进击的巨人》到底有多少地鸣巨人？","date":"2022-03-29 12:53:32","description":"\n<p data-pid=\"9mGRCwPV\">来稍微算一下，纯属娱乐。</p>\n<p data-pid=\"NBjCmh8Y\">关于地鸣巨人（也就是城墙巨人）的具体数量，漫画中始终没有给出准确的数字，一直在用“几千万”“亿万”之类的模糊字眼来形容。</p>\n<p data-pid=\"hFFRxdfs\">比如，威利戴巴的演说：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e730e33ff319fa9266b4a35d211ed18_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1406\" data-rawheight=\"1286\" data-watermark=\"watermark\" data-original-src=\"v2-8e730e33ff319fa9266b4a35d211ed18\" data-watermark-src=\"v2-ff2a55af6dedebd86014e29c99e40c0c\" data-private-watermark-src=\"v2-54e68c73a74b33cb92a83ec4aa529612\"></p>\n<p data-pid=\"zcl51p1v\">艾伦第一次提及地鸣的威力：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-615a3df9b122f7e499992d4e181afdb5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"686\" data-watermark=\"watermark\" data-original-src=\"v2-615a3df9b122f7e499992d4e181afdb5\" data-watermark-src=\"v2-df5622598e07cd757a9122169fc83fa5\" data-private-watermark-src=\"v2-0613ebde7133659c112e97e15babb920\"></p>\n<p data-pid=\"RRgXnsrc\">那么，城墙中到底有多少巨人呢？</p>\n<p data-pid=\"XSr2Oh8K\">我们根据动画第二集中“现在可能公开的情报“可以看到，帕拉迪岛的三道墙”玛利亚之墙““罗塞之墙”和“希纳之墙”是三个同心圆的形状，<b>三道墙的半径都已经给出</b>，所以我们可以轻易地算出它们的周长，除以每个巨人所占的长度，就是每道墙中的巨人数量。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d3ca355d016c95dd675a945051bdeceb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1229\" data-rawheight=\"768\" data-watermark=\"watermark\" data-original-src=\"v2-d3ca355d016c95dd675a945051bdeceb\" data-watermark-src=\"v2-9886732af4e29c3190f14a4d055b31b0\" data-private-watermark-src=\"v2-8db79e75f43286812057b2af23b686c9\"></p>\n<p data-pid=\"Uxy1qVdc\">这个很容易理解。</p>\n<p data-pid=\"UbjGkzSP\">根据设定，三道墙的半径分别是：250 km，380km和480 km。所以三道墙的总周长是：</p>\n<p data-pid=\"bvSxfmRR\"><img src=\"https://www.zhihu.com/equation?tex=L%3D2%5Cpi%28r_1%2Br_2%2Br_3%29%3D6974%5C+km\" alt=\"L=2\\pi(r_1+r_2+r_3)=6974\\ km\" eeimg=\"1\"></p>\n<p data-pid=\"k9MmMTFp\">比较难算的在于，<b>每道墙上还有四个瓮城。</b></p>\n<p data-pid=\"zQmVYKe6\">所谓“瓮城”，是<b>中国古代城池的一种特殊设计。</b>为了<b>加强城堡或关隘的防守</b>，而在城门外修建的半圆形或方形的护门小城，形如“瓮”（口小肚阔的大瓶）。假若敌军攻入瓮城中，只要将主城门与瓮城门同时关闭，就能将敌军困于里面，形成“瓮中捉鱉“的局势。西方也有类似概念，叫做“<b>barbican</b>”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cf9e3d69a7c56c3bb2c77053315df384_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"461\" data-watermark=\"watermark\" data-original-src=\"v2-cf9e3d69a7c56c3bb2c77053315df384\" data-watermark-src=\"v2-b4e0f713eaf3ebccaafa1846290f567d\" data-private-watermark-src=\"v2-11d76de24e8b303f46ce8964dc270433\"></p>\n<p data-pid=\"EcbbipeY\">历史上的瓮城只有军事作用，一般瓮的面积非常小，里面是不住人的。而帕拉迪岛的瓮城的不同之处在于，它还肩负着<b>“吸引巨人”的诱饵作用</b>，所以，必须保证里面有<b>足够数量的人口</b>，所以，这些瓮城的相对面积要大得多。</p>\n<p><img src=\"https://pica.zhimg.com/v2-da51fa672933919755afb5e3ed12b828_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"1134\" data-watermark=\"watermark\" data-original-src=\"v2-da51fa672933919755afb5e3ed12b828\" data-watermark-src=\"v2-996aa90477f02acb2dd8fecfd42e1dcc\" data-private-watermark-src=\"v2-ec5fdb131607f82e0e3d590af7da1072\"></p>\n<p data-pid=\"iIi2G3Ig\">比如，故事开始的地点——希甘希纳区人口众多，粗略估计有2000幢房屋，1万以上人口。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c675d08d3addaeb00fc78ffa7c4d9688_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-c675d08d3addaeb00fc78ffa7c4d9688\" data-watermark-src=\"v2-caa1e8b1bc4955c8724347c29b4d1864\" data-private-watermark-src=\"v2-5a4a0767e38b0c229acce82604bfcd74\"></p>\n<p data-pid=\"lrcQLUhI\">这些瓮城在城墙中所占比例不大。阿尔敏曾经说过好几次，希甘希纳区外墙里只有几百个巨人：</p>\n<p data-pid=\"rfr5VZTH\">“如果只是消灭马莱联合军，只靠希甘希纳区外墙那几百个巨人就足够了。“</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6e131ceadbcbc7fbd6fe8eb0b69f67a3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"561\" data-watermark=\"watermark\" data-original-src=\"v2-6e131ceadbcbc7fbd6fe8eb0b69f67a3\" data-watermark-src=\"v2-c715c4be6d76aa33a37419cf2a527ef9\" data-private-watermark-src=\"v2-fda9cd22587ee0f6a4fa3c12764acfbc\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d85b36c14f4537f5030bea30a11a3095_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"936\" data-watermark=\"watermark\" data-original-src=\"v2-d85b36c14f4537f5030bea30a11a3095\" data-watermark-src=\"v2-008c369cb1bfb3958bdd51f3a6c90a67\" data-private-watermark-src=\"v2-1b25952a526e631a2bc4adc148b0197c\"></p>\n<p data-pid=\"i_y-KeS0\">而希甘希纳区外墙有几百个巨人，最早是耶雷娜提到的，即所谓的“<b>有限度地鸣</b>”。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b546ba369e4289ca566d6d8e46ec3611_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"862\" data-watermark=\"watermark\" data-original-src=\"v2-b546ba369e4289ca566d6d8e46ec3611\" data-watermark-src=\"v2-85a9030dd8c746168b50385cb256c2b4\" data-private-watermark-src=\"v2-3dfe9b6695f330b2d672d0b83c9ffaa0\"></p>\n<p data-pid=\"n_4SAXg8\">我们从动画第1季第1集中的画面可以看到，希甘希纳区的城墙分为了近似相等的57个格子，而超大型巨人的肩宽大约占了2/3个格子。根据下文的计算结果，每个格子的长度约为28 m，希甘希纳区外墙总长度约为1596 m，大概可容纳 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1540%7D%7B16.8%7D%5Csimeq+95\" alt=\"\\frac{1540}{16.8}\\simeq 95\" eeimg=\"1\"> 个巨人，与耶雷娜、阿尔敏的描述勉强在一个数量级。</p>\n<p data-pid=\"HFxBdCpE\">考虑三道墙共12个瓮城，全部加起来，往多了说也不过数千巨人，所以对于我们后面计算的结果来说，是可以忽略的小量。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-11e7c65d7af95210feebf5278fbe46db_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"602\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-11e7c65d7af95210feebf5278fbe46db\" data-watermark-src=\"v2-8080fccab2cd375f9b29a4e63be29fca\" data-private-watermark-src=\"v2-a1dad67df27a03522c3cc9ccd7106fda\"></p>\n<p data-pid=\"M3adGG4F\">好了，要知道城墙中有多少巨人，还要算出巨人的肩宽。</p>\n<p data-pid=\"MfmUobUY\">我们知道，城墙高50 m，而根据《进击的巨人》动画第2季第1集的镜头，巨人的头部离城墙顶端还有一段距离，约为5 m。感谢评论区 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ec5759e6a6945c16336af06fc9ecda50\" data-hash=\"ec5759e6a6945c16336af06fc9ecda50\" data-hovercard=\"p$b$ec5759e6a6945c16336af06fc9ecda50\">@yun zi</a> 老师提醒，动画第1季第25集的“目前可公开情报”中提及一个矿工的故事，表明城墙在地下也有一定深度的延伸，因此我们假设巨人的脚部在地下5米处，即城墙巨人的身高依然为50 m。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-37cb0491cd5aa0ef43aec71b5fffdbd6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"1278\" data-watermark=\"watermark\" data-original-src=\"v2-37cb0491cd5aa0ef43aec71b5fffdbd6\" data-watermark-src=\"v2-99d043c3e4816402015276029fc44fa5\" data-private-watermark-src=\"v2-0688e17d6945d59a77bdee4618c9b98e\"></p>\n<p data-pid=\"CNCF1BZH\">从这个正视图中，可以计算出巨人的身高：肩宽 = 2.98。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0766b225981bbca2a1f4e615ca6d1bed_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"1272\" data-watermark=\"watermark\" data-original-src=\"v2-0766b225981bbca2a1f4e615ca6d1bed\" data-watermark-src=\"v2-055ac69ace6d82a4a8796ec91c8ff72b\" data-private-watermark-src=\"v2-17a07cb7532ee2834e0231c1a21da4c9\"></p>\n<p data-pid=\"u0qqEPwd\">很多人都说“城墙巨人和超大型巨人的体型是一样的”，在这里说一个很有意思的点。很多人都知道城墙巨人（50 m）和超大型巨人（60 m）身高不同，但大家可能很少注意到，<b>同为超大型巨人，阿尔敏“超大巨”和贝尔托特“超大巨”的身材是不一样的。</b></p>\n<p data-pid=\"iN5d7-jp\"><b>阿尔敏“超大巨”的肩宽为15米，贝尔托特“超大巨”的肩宽为18.75米，前者显然比后者更瘦一些。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-9c6d35d14c5d839313c0b7eff2ef06e1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1456\" data-rawheight=\"1338\" data-watermark=\"watermark\" data-original-src=\"v2-9c6d35d14c5d839313c0b7eff2ef06e1\" data-watermark-src=\"v2-7d8abcba0346281b17bb9c1fd683796a\" data-private-watermark-src=\"v2-6af77ba3278eb535284238b7e2cbf257\"></p>\n<p data-pid=\"0y4xqBYc\">照这样计算，<b>城墙巨人的身高肩宽比介于阿尔敏“超大巨”和贝尔托特“超大巨”之间，</b>其肩宽为</p>\n<p data-pid=\"Q3LaGFic\"><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B50%7D%7B2.98%7D%5Csimeq+16.8%5C+m\" alt=\"\\frac{50}{2.98}\\simeq 16.8\\ m\" eeimg=\"1\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc4f80f791c9130608f820fdbbe79cef_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-cc4f80f791c9130608f820fdbbe79cef\" data-watermark-src=\"v2-09c1683c0798222abd78788f08e8e576\" data-private-watermark-src=\"v2-e9aabd9a452f4a5f42aec800abfe3640\"></p>\n<p data-pid=\"XTZ4WPev\">假设巨人肩部之间没有间距，我们计算的最后结果是：</p>\n<p data-pid=\"7NmhOc73\"><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B6974%5Ctimes10%5E3%7D%7B16.8%7D%3D415119\" alt=\"\\frac{6974\\times10^3}{16.8}=415119\" eeimg=\"1\"></p>\n<p data-pid=\"RC59mGqt\">因此，<b>地鸣巨人的总数量约为42万。</b>如果进一步考虑巨人彼此之间的距离，数字会进一步缩小。</p>\n<p data-pid=\"GEAMAhpi\">因此，这个计算结果离艾伦说的“几千万巨人”还是查了两个数量级的。</p>\n<h3>最后分享一个小细节：</h3>\n<ul><li data-pid=\"Wr81dRha\"><b>地鸣巨人的速度有多快？</b></li></ul>\n<p data-pid=\"LaAjRhAn\">地鸣巨人慢吞吞的行进方式会给我们一种其速度很慢的错觉。其速度究竟有多快？根据漫画第129话的内容，<b>地鸣巨人可以在半天内行进600 km，由此可以计算其的行进速度是50 km/h。</b>如果把“半天”理解为“半个白天（6小时）”，那么巨人的行进速度为100 km/h。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-80261213027e9cefec41ee7c1dd0f944_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"938\" data-rawheight=\"968\" data-watermark=\"watermark\" data-original-src=\"v2-80261213027e9cefec41ee7c1dd0f944\" data-watermark-src=\"v2-c0ee1cbefdd27dfbd312523ddea8cf02\" data-private-watermark-src=\"v2-26407213d4940bd758b99e5c5e838a3a\"></p>\n<p data-pid=\"sJ8OSHQm\">查阅资料得知，真实世界中<b>马匹急驰的平均速度也只有40-48 km/h，世界纪录是70.76 km/h。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-052dee620ee13f1121df759a1d8974e7_720w.jpg?source=b1748391?rss\" data-caption=\"https://en.wikipedia.org/wiki/Horse#Movement\" data-size=\"normal\" data-rawwidth=\"1134\" data-rawheight=\"188\" data-watermark=\"watermark\" data-original-src=\"v2-052dee620ee13f1121df759a1d8974e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"uLF0wdbO\">然而巨人世界中，调查兵团的战马是经过改良的，其速度可以达到75-80 km/h，因此韩吉口中的“半天”应该是“半个白天（6h）”的意思。</p>\n<p><img src=\"https://pica.zhimg.com/v2-c59a31fd4f3d0d3c6ecf5f57a9ad4833_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1648\" data-rawheight=\"840\" data-watermark=\"watermark\" data-original-src=\"v2-c59a31fd4f3d0d3c6ecf5f57a9ad4833\" data-watermark-src=\"v2-c1e04450665685213eb4c2b1bfefb735\" data-private-watermark-src=\"v2-fe638389179982aa3d739492d77bb479\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c9aa5e6beaf266e16a971174e7cd35a2_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1544\" data-rawheight=\"840\" data-watermark=\"watermark\" data-original-src=\"v2-c9aa5e6beaf266e16a971174e7cd35a2\" data-watermark-src=\"v2-64844d225cd9c68c1013cf1f703d1e2d\" data-private-watermark-src=\"v2-728f8fa50dd65b8d6dff4e72dcb6abdf\"></p>\n<h3>拓展阅读：</h3>\n<a href=\"https://www.zhihu.com/question/523295110/answer/2404884808\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-8ba5f0d19445d5266567431c5e18b9c3_qhd.jpg?source=b1748391\" data-image-width=\"1818\" data-image-height=\"1440\" class=\"internal\">《进击的巨人》中法尔科的颚之巨人真的能飞起来吗？</a><a href=\"https://www.zhihu.com/question/523798811/answer/2407852679\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f0638ee39e9a73c5502b6e2a3e459268_qhd.jpg?source=b1748391\" data-image-width=\"2314\" data-image-height=\"1274\" class=\"internal\">为什么《进击的巨人》中巨人的身材比例不一样？</a><a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_00c3f6bb68825344a7a8d80bfcbbe081\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/524277410/answer/2413636802?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/392827950?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在哪看进击的巨人漫画？</a><br><a href=\"http://www.zhihu.com/question/463677771?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你是因为什么入坑漫画《进击的巨人》的？</a><br>\n","link":"http://www.zhihu.com/question/524277410/answer/2413636802?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评论《三国杀》这款游戏？","date":"2022-03-29 11:09:01","description":"\n<p data-pid=\"HDf6jJzI\">三国杀我是从2008年内测阶段就开始参与的玩家，于今已经14年了。从身份场，3V3到现在的国战，我见证了三国杀十多年来的各项重大改版，参加过不止一届的三国杀线上和线下的比赛，整个过程有友情、有爱情、有快乐、有挫折。从个人的角度，我对这一款游戏是很有感情的。</p>\n<h3>身份场</h3>\n<p data-pid=\"hm-w0JWp\">一开始打三国杀的时候，很多人都是从身份场开始的。8人局很经典，只是内奸的存在，一直是一个不太好处理平衡的事情。我觉得这是一个桌游从线下搬到线上的过程中的一个误会。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ecc3dfd1c6db2a54ba17117d2f67651c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"583\" data-watermark=\"original\" data-original-src=\"v2-ecc3dfd1c6db2a54ba17117d2f67651c\" data-watermark-src=\"v2-f523375f8fd150209ed12f8f7797f816\" data-private-watermark-src=\"v2-eb7a68f9ea67b7250c8e650d7a912f74\"></p>\n<p data-pid=\"iLUEJ2v-\">线下打八人局，尤其是大家不怎么会玩的时候，表演是会有一些比重的，内奸这个角色非常有趣，装忠是合理而有趣的战术——可以参考狼人杀没有专业化，正规化之前的操作。但是把三国杀挪到线上之后，线上大家都是对着牌的陌生人，虽然聊天框可以打字，但是大家的专注点不在于社交，而在牌局上。</p>\n<p data-pid=\"yVw66kH8\">在三国杀Online，内的终极打法被迅速的开发出来，它是由两个经济学的权衡所决定的：</p>\n<p data-pid=\"jJizEQ5q\">首先是经济学中的显示原理——装忠是无效的，因为你的目标始终和忠臣不一样，如果你把自己装的特别忠，那么最终会失去和主公博弈的资本；如果你装的不是特别忠，那么装有什么意义呢？</p>\n<p data-pid=\"yfAAyvCL\">其次是最优化——因为内奸胜利的前提是反贼全灭，和主公单挑获胜，所以这个时候内奸分的是主公的胜率，而不是反贼的胜率——只有在反贼全灭的情况下，才谈得到内奸的胜利。所以内奸几乎一定是要在某个阶段表现出对主忠的敌意甚至于压制的。</p>\n<p data-pid=\"Knat8X3F\">没有了线下温情脉脉的表演加戏，线上三国杀回归了理性，迅速的把八人局吃透了。吃透之后大家都发现了这个不平衡的问题，加上三国杀向着竞技发展，就有了3V3.</p>\n<h3>3V3</h3>\n<p data-pid=\"L5ly5XNM\">3V3 是三国杀组织的竞技类游戏。有点像Dota，大家通过依次拿将组队，来获得优势。3V3 显然更加具有竞技性，由此开发出了很多的流派。最初对33的理解，大家着眼于稳和控，一回合能够偷两张牌的张辽在3V3中彻底封神。</p>\n<p data-pid=\"PkDsVKIC\">而在3V3发展初期，最古早阵型就是双爆张飞郭嘉黄盖的暖二连。黄盖详尽一切办法攻击郭嘉，然后郭嘉遗计给张飞一张A和所有的杀，等黄盖还剩一滴血的时候，轮到张飞动，拿到了黄盖的遗产之后，又收了黄盖三张牌加上郭嘉遗计的两张牌之后爆发收主。</p>\n<p data-pid=\"scFrdO4I\">这一个阵型在最初大家对黄盖这个武将理解不够的情况下，出来是革命性的。把3V3拉到了一个新的层次。打开了这个思路之后，以黄盖为核心的一批爆阵就被开发了出来：</p>\n<p data-pid=\"dhjUk50g\">包括不限于黄盖、郭嘉、华佗的冷黄金一波，黄盖、小乔、郭嘉的冷白银一波，都是抓到之后黄盖开始表演，并且以超过60%的概率直接获得胜利的局面。</p>\n<p data-pid=\"UzXDYiXw\">后来百花齐放，绝情阵（曹操郭嘉小乔，只要摸到一个AOE就封神），痴虎阵（许褚郭嘉张飞，几乎总是能组成，许褚直接上来裸衣一个杀郭嘉，郭嘉四张牌分出给张飞，加上张飞摸的两张牌，第一回合暖二连爆发）刘备张角甄姬（洛雷阵），3V3各种线上线下的比赛如火如荼。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-21792d10d6dcedcc8856e093e3953178_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"404\" data-watermark=\"original\" data-original-src=\"v2-21792d10d6dcedcc8856e093e3953178\" data-watermark-src=\"v2-5c48344dfdf219f993ec6d70e3de5f46\" data-private-watermark-src=\"v2-77ae9ebdc826ab1b4aff66d49bc302cd\"></p>\n<p data-pid=\"fTigTwKj\">但是3V3的局限性也很明显，首先就是线下的比赛几乎就是明牌——裁判说不许通牌，但是各个队伍都会有一点默契，比如反间的时候，翘中指是草花，翘食指是黑桃，张角搓搓手表示有闪……反而是线上路人局才达到了官方设想的样子，但是一开比赛，那必然是小组成员微信开群通牌…… 并且更重要的是3V3的天花板还是比较低——比如下围棋，下象棋，一个新手基本上对专业选手是十死无生的，不可能赢。</p>\n<p data-pid=\"vnSdf_17\">但是3V3手气就是最大的变数。即便是黄金一波——起手就刷，没有任何干扰，理论上可以刷完牌堆的组合，胜率也就是65%-70%左右，这也是3V3的上限。用黄金一波即便是完美的符合牌序，也有刷不出来连弩，都是黑牌无法续航而尴尬弃牌的情况。</p>\n<p data-pid=\"uKz5AV0S\">作为一个竞技游戏，随机性太大，冷暖开局不均衡，这些都制约了3V3的发展，后来3V3 2.0改进了一些，对冷做了一些限制，加入了新的武将。不过对三国杀有兴趣的还是可以玩玩3V3，也就是现在统帅三军，我个人对牌序的理解，完全就是在3V3爆阵中升华的。平时一手牌五六张，怎么出其实选择不多，显不出来牌序的问题，但是3V3里面黄盖苦出来20多张牌，先出什么，后出什么，对胜率的影响是很大的。</p>\n<h3>风林火山/一将成名/界限突破</h3>\n<p data-pid=\"v32_Q8XS\">三国杀武将的失衡是必然会发生的，这是三国杀框架本身所决定的。</p>\n<p data-pid=\"WTiK3E26\">因为三国杀就那么多类型的牌，而武将不断的出，总要设计出新技能，而技能无非就是转化、预测、改变或者多摸。前两者靠质、后两者靠量。</p>\n<p data-pid=\"Q9BSF_Wq\">有转化杀的关羽，有转化桃的华佗，有转化过河拆桥的甘宁，有转化顺手牵羊的邓艾，有转化万箭齐发的袁绍……转来转去还是这么多锦囊，转化系其实一般不太会失衡，因为一回合两张牌，转成顺手牵羊也就是张辽了。而到后来能转的都转差不多了，武将牌的设计就沿着「量」的途径一去不回头了。比如张郃。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2826928300414ece574be20027d080c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"466\" data-watermark=\"original\" data-original-src=\"v2-f2826928300414ece574be20027d080c\" data-watermark-src=\"v2-776466f32af4e65abea7d7b0669b54aa\" data-private-watermark-src=\"v2-a0db398a0464f6b519024478d29da5ff\"></p>\n<p data-pid=\"nLyRLzJM\">张郃可以做很多事情，可以当吕蒙，可以当张辽，可以当夏侯渊，可以当吴国太…… 不同的是，人家发动技能都是免费的，而张郃发动任何一项技能都要消耗一张牌。这就是三国杀后期将领设计的『新思路』，消耗牌量来做X做Y，或者干脆就像刘焉那样，做X做Y可以多摸牌。</p>\n<p data-pid=\"jKpVJrim\">这样一来，本来设计的比较平衡的牌堆，质量就不再重要了，走量成为了判断武将强弱的主要标准，后来大家说的阴间武将，其实都是摸牌摸的比孙权都溜，甚至于在摸牌的同时还能兼顾输出的。</p>\n<p data-pid=\"6EIM_aOi\">当年大家开玩笑的时候说的：不会出着出着，大家都用王允、糜夫人，而不用五虎了吧…… 到现在已经成为了现实。就身份场而言，作为一个游戏要运营下去，就需要不断的出新武将，而新武将肯定是要比早期的接近白板的武将更强的，久而久之，大家就只能用这些三国志书缝里面抠出来的人物来游戏了。</p>\n<p data-pid=\"qjlK60JJ\">至于界限突破，其中不乏精品，比如黄盖的突破就非常的不错。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-63be9d202bc175e4f26664323b67dbab_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"200\" data-rawheight=\"290\" data-watermark=\"original\" data-original-src=\"v2-63be9d202bc175e4f26664323b67dbab\" data-watermark-src=\"v2-7a77e8c61a5616a0a749fea172fa9cf0\" data-private-watermark-src=\"v2-ef0fa80724844a44dd8561f6be14d02a\"></p>\n<p data-pid=\"l6e9zKdQ\">但是大部分武将突破之后依然是弱将，比如——界司马懿、界诸葛亮、界关羽等等。这些武将带的历史包袱太大了，单独对技能进行加强或者增加添头，其实也不会让人多用。</p>\n<p data-pid=\"U7mFfkgo\">总之，就身份而言，在牌堆没有彻底的重新设计之前，我认为武将越来越强，老武将越来越不受欢迎，这一点无法改变的。</p>\n<h3>国战</h3>\n<p data-pid=\"P94ygaQh\">国战我倒觉得是目前三国杀几大板块里面，可持续性比较强，博弈性也比较强的。国战比较均衡，策略能力一般来说大于将面能力，也是主播比较能播出直播效果的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8395c64a6e97250e1b4b5a5336e802ee_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"413\" data-watermark=\"original\" data-original-src=\"v2-8395c64a6e97250e1b4b5a5336e802ee\" data-watermark-src=\"v2-66743e3a69d3fa4cc377db76991b8aeb\" data-private-watermark-src=\"v2-71f5843564ebe4835c0acd7e714347b3\"></p>\n<p data-pid=\"SWCVudiM\">国战本质上就是一个博弈，除了超级大国的情况，一般来说虽然大家都想赢，但是如果其他人不让你赢，你就一定赢不了。所以这个问题就缩减为：如何能让别人让我赢。</p>\n<p data-pid=\"tSpDaQ_L\">这个到最后就变成，让自己的信息更少被对方预料到，就赢的面更大。</p>\n<p data-pid=\"5AhLzNc7\">但是人又不是理性的，所以国战就成了一个比耐心的游戏。单纯的示弱是没用的，因为示弱别人也一样可能把你带走。胜率比较高的『降低存在感一波带』需要很高的自我纪律和执行性，这也让国战更加的多元化——人们玩游戏毕竟不仅是为了追求赢，所以在痛苦的赢，和痛快的输之间就存在一个权衡。</p>\n<p data-pid=\"LVxGJJ9A\">国战是综合考量一个人牌序能力和策略能力的，从国战是很容易判断人的性格，尤其是看到国战胜率42%以上的人，一般来说这种人比较自律，目光长远，延迟满足感比较高，能够隐忍。牌序好，打的比较浪的，胜率一般能在39%-40%之间徘徊。</p>\n<p><br></p>\n<hr>\n<p data-pid=\"Q37p8ssO\">总之我是非常感谢三国杀长期以来的陪伴，在内测的时候也确实没有想到，作为一款桌游，或者说其名字已经将其限定在三国时代的桌游，能够持续了十四年。巅峰时期，自己做将，做技能的讨论都相当的成气候，希望能够在开发出一些新的思路，把这个品牌延续下去吧。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/divinites?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">司马懿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/284031072/answer/2413504350?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">196 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/285730370?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何向别人介绍三国杀这款游戏？</a><br><a href=\"http://www.zhihu.com/question/507840770?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《三国杀》为什么是「聪明人玩的游戏」？</a><br>\n","link":"http://www.zhihu.com/question/284031072/answer/2413504350?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"三国杀对武将的设计应该多侧重于旧武将的突破，还是新武将的出品？","date":"2022-03-29 02:32:31","description":"\n<h2>标记、突破和小作文：我眼中的《三国杀》2</h2>\n<p data-pid=\"UUPY4EbI\">by 乌合之子但愿君</p>\n<p data-pid=\"T42pvRp8\">之前写了一个1：<a href=\"https://www.zhihu.com/question/284031072/answer/2408988196\" class=\"internal\">如何评论《三国杀》这款游戏？</a> <b>题目是：从西部类型片到东方叙事学：我眼中的《三国杀》，</b>基本把该聊的大的东西都聊了一遍。这篇回答开始深度到比较细化的部分，谈谈我认为的游戏模式问题，字数会比1少很多。</p>\n<p data-pid=\"Cu6kdOh9\">本回答所有图片依然来自：<b>三国杀官方网站</b>、B站UP主<b>吃蛋挞的折棒</b>和B站UP主<b>紫髯的小乔</b>。</p>\n<p data-pid=\"KRKuhhxY\"><b>一、基于武将的那些模式</b></p>\n<p data-pid=\"uG2mWiQF\">在上一个回答里，我已经说过了，三国杀最基础、最普遍的玩法机制来自扑克。准确的说，三国杀的运行机制，是基于两幅牌进行的，一副是武将牌，一副是公共对战牌。</p>\n<p data-pid=\"1GZmwncO\">武将牌自不必说，在大部分情况下你这一局选中了该武将，就不会再替换。那么想要改变战斗的感觉，尤其是流动速度，就需要对武将技能整体进行调整。</p>\n<p data-pid=\"2oL-vQsL\">这也是一开始模式被划分的标准，标风和军争。虽然军争也有军争牌堆，但（神话再临）风林火山作为一个单独模式，以及一将成名系列模式，都是以武将作为新模式划分的。</p>\n<h2>1.出新武将</h2>\n<p data-pid=\"tD7eb-Ux\">只要武将池的选择有所偏废，那么武将在场上带给人的游戏流动速度就完全不同。</p>\n<h2>四个经典包的风格差别都很大。所谓”其疾如风，其徐如林，侵掠如火，不动如山，难知如阴，动如雷震“。</h2>\n<p data-pid=\"IAlkdIvS\">风包可能还不是很明显，毕竟是作为标准包的第一个拓展包出现的，但是加快游戏速度就是从风包开始。从火包开始，就有比较大的武将风格差异率。</p>\n<p data-pid=\"WEDekcR0\">火包强调伤害多，卧龙诸葛是典型（火计），但注入典韦、荀彧、庞统、太史慈、颜良文丑和袁绍，都或多或少具备二伤的能力。就只有庞德比较拉。</p>\n<p data-pid=\"05wGeyP9\">林包强调控制多，于是不是通过伤害，而是通过控制带来收益的武将变多了。最典型的就是曹丕和鲁肃，一个是通过翻面控制对手的回合，一个是通过换牌减少对手回合内的输出。孙坚、董卓是抗伤害多，祝融和孟获则是专门克制火包的。在我看来，林包武将的出现，正式打破了”1血＝2牌“的基本公式。</p>\n<p data-pid=\"OHYsUeUf\">山包强调防御高，或者卖血之后反伤。比如邓艾、张昭张肱、孙策、刘禅就是防御高，左慈、蔡文姬就是卖血反伤。</p>\n<p data-pid=\"R5BVtOcK\">阴包强调难以预计，也就是上限高下限低，考操作的武将。于是就有了孙亮、王基、蒯良蒯越、许攸这些BB机武将（所谓的小作文模式，也是从这个包开始的）。稍微拉垮的严颜、卢植、王平其实也很考操作。</p>\n<p data-pid=\"OPpvBV0H\">雷包强调的是瞬间爆发力，这个爆发过了，基本就萎了，代表武将就是张绣。当然其他武将也是或多或少有透支的意思，比如周妃、郝昭、袁术，都需要透支未来或当下的某些代价换取一些更可能爆发的收益。</p>\n<p data-pid=\"SInDmXPY\">你看，这几个包走下来，基本就把一个武将操作需要的六边形填满了：</p>\n<h2>伤害（多点、持续、大面积、瞬间）、控制、防御、运气——唯独没有做的，就是反伤和治愈，因为这两个部分在标准包里已经做好了。</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-96fa744870e230f6fcd5d5f763b25057_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1027\" data-rawheight=\"464\" data-watermark=\"original\" data-original-src=\"v2-96fa744870e230f6fcd5d5f763b25057\" data-watermark-src=\"v2-f0bef40c28d2a18b215e3bac87c6cd4e\" data-private-watermark-src=\"v2-269172749561ec9a18828cbd1bcf0f2f\"></p>\n<p data-pid=\"4ncI9FCb\">而一将成名和星火系列就用的的别的命名方式了。一将成名是按照时间排序，而星火系列分成的六个星则是按照某个特性（或事件）进行。</p>\n<p data-pid=\"yWZqSDRZ\">之后三国杀有出新的武将包，最近比较火的就是智包和严包。</p>\n<p data-pid=\"vNld-7mh\">智包的核心就是玩转锦囊，几乎所有武将都和锦囊有关系，而且还新增了[智囊]说法，以及[奇正相生]锦囊。</p>\n<p data-pid=\"QS36rv2b\">严包的核心就是加大牌序难度，这可以说是三国杀在<b>武将和用牌设计</b>上的一个成功亮点了。严包的很多武将都有和[整肃]有关的技能，要求就是非常苛刻的牌序。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-16489dc350a5cc00cfea88129e3d7274_720w.jpg?source=b1748391?rss\" data-caption=\"小乔文章：【秉清】3月手杀测试服来也!! 严包朱儁、SP毛玠、新孙休，还有界界孙权吕蒙徐晃？\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"445\" data-watermark=\"original\" data-original-src=\"v2-16489dc350a5cc00cfea88129e3d7274\" data-watermark-src=\"v2-4358cc3109489762836b683ba161ae0a\" data-private-watermark-src=\"v2-afddbc3b18a71d8aac7e7cad08b598b8\"></p>\n<p data-pid=\"K6zvDCqf\">简单说，就是要三选一，在用牌的时候每一张牌都要沿革遵守这个规则，才能获得这个奖励。</p>\n<blockquote data-pid=\"c4N589ZM\">擂进：点数递增，至少3张。  变阵：花色均相同，至少2张。   鸣止：弃牌时花色各不同至少2张。</blockquote>\n<h2><b>出了这么多风格的武将，其实也不必有新模式。</b></h2>\n<h2><b>三国杀开个活动场，某个阶段只能用某几个包的武将就可以带来完全不一样的游戏体验——如果武将还可以试用的话。</b></h2>\n<h2><b>2.替换武将</b></h2>\n<p data-pid=\"K1FkklIa\">武将出得太多有个问题，就是你是否能有那么多设计创意。</p>\n<p data-pid=\"_iO_F0An\">就算有，又应该怎么实现呢？这时候就出现了比较棘手的三个设计方向。</p>\n<h3><b>第一个方向，就是标记太多，开始占用牌堆的份额。</b></h3>\n<p data-pid=\"1YUtiLgh\">标准包里没有一个武将是要标记的，但是之后就不好说了。</p>\n<p data-pid=\"tlCk0e-G\"><b>创（周泰）、田（邓艾）、令（刘禅、刘禅其实是一次性放权标记）、箜（周妃）、权（钟会）、梦（神关羽）、逆（刘封）、匡（孙登）、米（张鲁）、咒（张宝）、舞（大小乔）、星（神诸葛）、化身（左慈）</b>.....这些武将看起来不多，但其实和标记有关的武将还有一些，只不过不一定是把牌放到武将牌上做标记的，最典型的就是张琪瑛。</p>\n<p data-pid=\"QCZgAptU\">标记多，意味着武将的技能具有独占性，当然还有一点，武将的技能具有了阶段性。标记还是相对较好的，毕竟就算写出来也没有那么长，稍微看一下也能理解。</p>\n<h3><b>第二个方向，就是小作文越来越长。</b></h3>\n<p data-pid=\"ZjWr8RHp\">小作文武将越来越多，其实说明一个危险，那就是武将设计撞车的概率变高了，所以需要小作文辅助将武将技能进行分段。</p>\n<p data-pid=\"K0Uuzu8a\">在我看来，分段有很多方式，不只是小作文描述的繁文缛节，典范就是转换技和使命技。当然这两类技能都是从觉醒技演变而来的。当然还有，令下列武将选择一项之类的说法，其实都可以大致被归类到小作文系列。</p>\n<p data-pid=\"qWSDOXpL\">不管是转换技、使命技还是觉醒技（包括后面的双势力武将），都是在完成一个逻辑：<b>让某单个武将更加要可玩性</b>。这里说的可玩当然就是说让武将的技能在一局游戏里能有一些变化，这样不至于太枯燥。</p>\n<p data-pid=\"G-czizQ6\">所以左慈、南华老仙、司马徽、关索、曹爽等能复刻别人武将技能，或获得新技能的武将也都可以算在内。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e9861737296d764c3cab90633d891f9c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1329\" data-rawheight=\"685\" data-watermark=\"original\" data-original-src=\"v2-e9861737296d764c3cab90633d891f9c\" data-watermark-src=\"v2-a37cf42c9ff8c129a38ec5db30c99d07\" data-private-watermark-src=\"v2-40bf5c6bdf2c00fbd79f821794250b86\"></p>\n<p data-pid=\"hEHT6UiM\">国战变包更是别出心裁，让副将或主将可以换武将。</p>\n<p data-pid=\"DhJmnWE-\">这个基本思路是没有问题的，就是站在武将的基础上增加可玩性。按照这个思路进行，将旧武将进行重做，然后出<b>”界限突破“</b>模式，让玩家自行选择是否要突破也是如此——当然突破了就不可逆了。</p>\n<p data-pid=\"D1hJ0a1i\">但是直接现在大家都看得出来有用力过猛的趋势——虽然三国武将还没有出完，虽然三国杀其实是<b>汉末三国魏晋南北朝</b>的代称，毕竟东汉武将和晋朝武将还茫茫多——这说明什么，说明即便是这段历史，<b>我们中华文化依然有如同群星璀璨一般杰出人物与百家文化</b>。</p>\n<h3>第三个方向，就是小游戏武将开始露头。</h3>\n<p data-pid=\"j9APrMBC\">小游戏武将虽然也可以直接归于小作文武将，但玩家其实熟悉了，某种游戏机制，就不用更多的文字进行表述了。</p>\n<p data-pid=\"mCrxuQKO\">目前已知的小游戏武将其实在武将库里还是比较少的，但每个都能引起很大的讨论热度。</p>\n<p data-pid=\"EyGwIqIV\">比如进行<b>猜拳游戏</b>的审配和张嶷、做<b>[水转百戏图]</b>的马钧、玩[<b>疯狂的小鸟]</b>的南华老仙、接<b>[果盘]</b>的孙寒华，玩<b>[水果忍者]</b>的郑玄。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-790a39af378c7cefc69cd988b0c5c2db_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1024\" data-rawheight=\"1438\" data-watermark=\"original\" data-original-src=\"v2-790a39af378c7cefc69cd988b0c5c2db\" data-watermark-src=\"v2-af50eefef0c722fa00a7530a96017da7\" data-private-watermark-src=\"v2-af18de6b6b3f6b048cdbb267e022cbdf\"></p>\n<p data-pid=\"1xpUKgYC\">小游戏武将有个比较麻烦的问题，就是你自己玩得蛮嗨，但是其他人得陪着你玩，这就有点不高兴了。</p>\n<p data-pid=\"VDdcPeoL\">所以最新的孙寒华改版变了，变成了大家可以一起玩<b>接水果游戏</b>了，效果怎么样姑且不论——但这个思路其实是值得借鉴的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b623b42c7204bf97d8acee10bbdf0d48_720w.jpg?source=b1748391?rss\" data-caption=\"折棒视频：创造历史！第一个全民共同参与的小游戏武将诞生\" data-size=\"normal\" data-rawwidth=\"1119\" data-rawheight=\"644\" data-watermark=\"original\" data-original-src=\"v2-b623b42c7204bf97d8acee10bbdf0d48\" data-watermark-src=\"v2-3446d9beade6c352acc86f3702eb648d\" data-private-watermark-src=\"v2-acc95d598a694fd00cde85c1035816d3\"></p>\n<p data-pid=\"StMT4dyu\">在上一篇文章里，我说过，武将和技能真的需要契合吗？契合点又在哪里？当然，有标记的武将可能契合点更高。但是这种<b>松散的互文关系</b>是否<b>紧密的、独一无二的、排它的</b>呢？</p>\n<p data-pid=\"wJFkMco7\">当然不是。也正如我上一篇文章所说的那样，中华文化的”意境论“帮助我们补完了其中的结构性空白，让我们把技能和武将联系到一起了。<br>那么能不能拆解开来呢？其实是可以的。</p>\n<hr>\n<p data-pid=\"vDfSRb2A\">三国杀海外服，将[华歆][左慈][南华老仙]的思路进行延展，既然武将和技能不必绑在一起，那么我做成技能库行不行？</p>\n<p data-pid=\"r2qJe8ty\">当然可以，那就是<b>强令</b>模式。<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv15848209%3Fspm_id_from%3D333.999.0.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【令戮】三国杀海外服《太虚幻境V5·何进诛宦》图鉴!!</a> </p>\n<p><img src=\"https://pic3.zhimg.com/v2-984ac53f578ad6251204e5f14f4a1608_720w.jpg?source=b1748391?rss\" data-caption=\"小乔文章：【令戮】三国杀海外服《太虚幻境V5·何进诛宦》图鉴!!\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"346\" data-watermark=\"original\" data-original-src=\"v2-984ac53f578ad6251204e5f14f4a1608\" data-watermark-src=\"v2-47533c278ab0e0a14634d57ce10b6843\" data-private-watermark-src=\"v2-9bec419507222fd2884bbcbb6e358436\"></p>\n<blockquote data-pid=\"Asf4SfnY\">出牌阶段开始时，你可以对一名其他角色发动强令，令其获得一个对应的强令技能标记。在技能所述的时机，判断该角色是否达成强令条件，依照成功或失败，执行对应效果。 </blockquote>\n<p data-pid=\"flj6vWNa\"><b>其实就是一个大型的使命技。而太虚幻境那个模式可以说是非常好玩了，好玩到爆炸的程度。</b></p>\n<p data-pid=\"k8hxvyEF\">要说武将设计，不管是旧武将突破，还是新武将的设计，其实关键还是技能的设计，毕竟三国魏晋南北朝的英雄人物，至少还有三分之一没有出完。而三国杀之后还可以新开一个游戏，做<b>春秋杀</b>，那是中华文化百家争鸣的另一个高峰，武将技能可以说待开发的空间还有很多，不过游戏模式嘛，就需要再斟酌了。</p>\n<h2>最后，说一个我的武将设计。</h2>\n<p data-pid=\"Sp-_FuVJ\">这也是三国杀还没有出的新武将，那就是提出<b>中国美学意境论集大成的文人王弼</b>。</p>\n<blockquote data-pid=\"sv33QT8t\">正始十年（249），曹爽被杀，王弼受案件牵连丢职。同年秋天，遭疠疾亡，年仅二十三岁。<br>王弼人生短暂，但学术成就卓著。著有《老子注》《老子指略》《周易注》《周易略例》《论语释疑》《周易大衍论》三卷、《周易穷微论》一卷、《易辩》一卷等数种。但其成就，不在于著述数量，而在其质量，在于其创见。<br>王弼的贵无论对后世宋明理学影响很大，他的玄学对佛教中国化、本土化也起了重要作用，其“得意忘象”的思考方法对中国古代诗歌、绘画、书法等艺术理论也有一定影响。<br>王晓毅先生给的评价是：王弼在哲学上奏出了时代的最强音。“虽然他像流星一样匆匆闪过，只生活了二十三个春秋，却以其不可思议的天才智慧之光，照亮了整个时代，指明了魏晋玄学的理论航向”。</blockquote>\n<p data-pid=\"ukbdH-nM\">王弼，三血两技能。一技能叫【无玄】出自王弼的玄学理论中，对无的研究。二技能叫【忘象】出自王弼的意境论。</p>\n<p data-pid=\"mXiJ6NkR\">【无玄】的台词是：圣人体无，无又不可以训，故不说也。//老子是有者也，故恒言无所不足。</p>\n<p data-pid=\"uaFgFTob\">【忘象】的台词是：忘象者，乃得意者也。//得意在忘象,得象在忘言。</p>\n<p data-pid=\"KVbkqtGF\"><b>无玄：你的回合限一次，你可以弃置2张不同类别的牌并将你的武将牌翻面、或流失一点体力并扣减一点体力上限。若如此做，你清除场上所有标记和被标记的状态技，将所有升级后的技能回复到游戏开始状态。清除标记时，中止所有与之相关的武将技能。</b></p>\n<p data-pid=\"qB2HruE1\">faq：标记包括判定区的延迟性锦囊。被标记的状态技包括获得的阶段性技能，也包括断肠、缠怨、止息、裸衣等。神诸葛亮的七星，以及七星带来的大雾、狂风都会被一并清除。王司徒的鼓舌标记、神吕布的怒标记也如此，曹金玉、孙寒华等的技能也会随之被重置。但如关索、曹爽那样获得的衍生技不受影响。</p>\n<p data-pid=\"Vw-voyX6\"><b>忘象：每轮限一次，当你的回合外满足以下条件之一时：你被翻回正面，你于一轮中回复第2点体力，你增加至少1点体力上限，你获得至少两张不同类别的牌，你发动[无玄]超过3次。你可以标记一名武将，称之为【忘】。拥有【忘】标记的角色，回合开始时视为已满足觉醒条件，或限定技从未发动过。</b></p>\n<p data-pid=\"J0rCSJkG\">fag：拥有[忘]标记的角色回合结束后弃置[忘]标记。[忘]标记也受[无玄]技能的影响。在王弼的回合内，发动[无玄]三次之后，需要在回合结束后，系统才会提醒你，是否要发动[忘象]。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-85035bb732a1c7ff20d0c7953e6e74d8_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"707\" data-watermark=\"original\" data-original-src=\"v2-85035bb732a1c7ff20d0c7953e6e74d8\" data-watermark-src=\"v2-855ccc833d55e746a7384cbd8aa5023e\" data-private-watermark-src=\"v2-bb61c00df3077cf594049801c198ed5a\"></p>\n<p data-pid=\"Xa3Rq4Gk\">敬请期待下篇回答。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dandoliya?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">乌合之子但愿君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/522725234/answer/2411996108?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/42727084?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">三国杀中设计得最成功的是哪个武将？</a><br><a href=\"http://www.zhihu.com/question/486453617?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">兄弟们，我三国杀设计个武将，帮我看看强度如何？</a><br>\n","link":"http://www.zhihu.com/question/522725234/answer/2411996108?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]