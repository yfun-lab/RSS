[{"title":"App+1 | Shortery，为 macOS 捷径增加自动化运行的新方式","date":"2022-04-16 07:00:00","description":"但是美中不足的是，Apple 并没有将 iOS 上的「捷径自动化」功能一并带来。在 iOS 的捷径上，我们通过「捷径自动化」功能在特定的时间、地点或者某个满足某个条件的时候，自动执行某个捷径。为了解决这一个痛点，所以来自德国的开发者 Lars Gerckens 就开发了 Shortery，为 macOS 上的捷径补齐了自动化的功能。<a href=\"https://sspai.com/post/72692\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72692"},{"title":"掀起一波「求码潮」的跨平台阅读工具：识区｜App +1","date":"2022-04-16 03:00:00","description":"如果你最近有关注社交网络，相信你一定看到过有人在发一个app的邀请码。而这些邀请码往往又会「秒没」，似乎这是一个非常火热的app。这款叫做「识区」的app是来自字节跳动的阅读工具，相比于今日头条这样的 ...<a href=\"https://sspai.com/post/72690\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72690"},{"title":"2022 年密室逃脱 EGA 评选有哪些看点？未来线下游戏会怎么发展？","date":"2022-04-16 02:27:04","description":"\n<p data-pid=\"Aig-n2PV\">谢 @知乎游戏 邀请。</p>\n<p data-pid=\"6D9a4qhD\">此时此刻的密室行业，正处于三重重压之中（疫情、政策、消费疲软），2021-2022这段时间可能是密室十年历史中的至暗时刻。前排祈福  ，祝我们喜爱的密室行业能克服重重难关，苦尽甘来。</p>\n<blockquote data-pid=\"M0EsTvkK\"><span class=\"nolink\">长风破浪会有时,直挂云帆济沧海。</span></blockquote>\n<p data-pid=\"SwvaLO8e\">自2016年第一届EGA密室评选开始，在大家的共同陪伴下，EGA年度评选已行至“第六届”，随着线下互动游戏快速迭代演进，为了适应未来发展，EGA年度评选也须及时开辟崭新“航路”。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/495305311\" data-size=\"small\" data-image=\"https://pic2.zhimg.com/v2-4a10576dc968e4ca1386ffb8f074ae5a_720w.jpg?source=b1748391\" data-entity-type=\"article\" class=\"internal\">EGA2021年度优秀实境游戏大众评选入围公布！</a><p><img src=\"https://pic1.zhimg.com/v2-1dee76914a07b8ddce6e22ddb566a8f9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"533\" data-size=\"normal\" data-caption=\"2020年度EGA奖杯\" data-watermark=\"watermark\" data-original-src=\"v2-1dee76914a07b8ddce6e22ddb566a8f9\" data-watermark-src=\"v2-75f746fdc0fb3f0ea5f54fb1eb12aaff\" data-private-watermark-src=\"v2-f3276094a1e638a3938d02d321cb3500\"></p>\n<p data-pid=\"C-96QzqH\">首先是关于本届评选奖项规则方面的重大升级说明——</p>\n<p data-pid=\"ZJ49G0Sb\"><b><u>1. 把“密室逃脱”还给密室逃脱</u></b></p>\n<p data-pid=\"eYHBFqkS\">随着线下游戏玩法的不断发展和融合，“密室”早已不“逃脱”，还杂糅了各种创新业态。</p>\n<p data-pid=\"XLRo1RbQ\">为了让更多从业者和爱好者不再被类型束缚，EGA年度评选奖项中的“密室逃脱”将回归“解谜主题”范畴，不再用“密室”去统称“线下RPG”、“沉浸互动剧场”与“恐怖体验馆”等新业态。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d9f06642a63902ed6690897c71f66b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"533\" data-size=\"normal\" data-caption=\"EGA2021EGA密室产业峰会现场\" data-watermark=\"watermark\" data-original-src=\"v2-7d9f06642a63902ed6690897c71f66b1\" data-watermark-src=\"v2-2c5591838b9646caa13531f1725546bb\" data-private-watermark-src=\"v2-6aeb54d4b644d1e6161decbb1b6d00fb\"></p>\n<p data-pid=\"4KJp93S1\"><b><u>2. “实景”升级为“实境”</u></b></p>\n<p data-pid=\"Yho95ddV\">随着越来越多的线下互动游戏不再造景，开始利用现实中存在的各种环境创造互动游戏作品，并开始结合VR、AR、数字影像等科技手段替代造景的尝试，EGA年度评选的奖项也不再困于是否有“实景”，开始使用“实境”扩大奖项定义范围，希望包容更多创新业态。</p>\n<p data-pid=\"rbtssYiV\"><b><u>3. 重新调整奖项</u></b></p>\n<ul>\n<li data-pid=\"aat_DZLL\">年度最佳主题（机械解谜类）与年度最佳小主题，合并为【年度最佳密室逃脱游戏】<br>（tips:最佳小主题评选办法不变，只不过奖项不再标注“小”）</li>\n<li data-pid=\"-JWztK9R\">年度最佳主题（搜证推理类）调整为【年度最佳搜证推理游戏】</li>\n<li data-pid=\"bCPRz_6h\">年度最佳主题（演艺类）调整为【年度最佳沉浸互动剧】</li>\n<li data-pid=\"2F6XFMcW\">年度最佳主题（实境RPG类）调整为【年度最佳实境RPG游戏】</li>\n<li data-pid=\"_ZT1tR1B\">年度最佳场景    调整为【年度最佳造景】<br>（tips:已有场景不再作为最佳场景评选对象）</li>\n<li data-pid=\"TgJfOskG\">新增【年度最佳机关特效】</li>\n<li data-pid=\"6laoaoIb\">新增【年度最佳解谜体验】</li>\n<li data-pid=\"wnO1WNlb\">新增【年度最佳怕体验】</li>\n<li data-pid=\"GWJYzMlW\">新增【年度最佳趣味体验】</li>\n<li data-pid=\"cUHJGzHY\">新增【年度最佳文旅结合】</li>\n<li data-pid=\"wMoTLztd\">新增【EGA学院年度新秀设计师】</li>\n<li data-pid=\"15it5f_x\">保留【年度最佳剧情】</li>\n<li data-pid=\"0mDwQxZc\">保留【年度最佳创新】</li>\n<li data-pid=\"99jioXQf\">保留【年度最佳解谜文创】</li>\n</ul>\n<p data-pid=\"LvcT1Nvc\">EGA评选奖项的重新定义，是为了适应线下互动游戏的快速迭代和从业者的不停探索；希望EGA能一直支持创意团队们的天马行空，在偶尔的困惑和无助时表达我们的支持。</p>\n<p data-pid=\"cacANuZM\">EGA将以更严谨的规则设计、更严格的评委选拔、坚持听取反思各处吐槽与建议，坚持评选的持续改进与创新，认真公正办好每一届评选。</p>\n<p data-pid=\"vhvDAhU6\">在过去的这276天中，EGA评选管理委员会一共了收到来自全国范围内60个城市的上千参选主题的报名；经过各区评委对参报主题资质的二次复核，最终共有870个主题进入EGA2021年度评选的大众网投环节。</p>\n<p><img src=\"https://pica.zhimg.com/v2-9fc15855a0f2c75d04808e080a9f187a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1216\" data-size=\"normal\" data-caption=\"2021年度各区新主题报名情况\" data-watermark=\"watermark\" data-original-src=\"v2-9fc15855a0f2c75d04808e080a9f187a\" data-watermark-src=\"v2-631c7d7ab40bcbd563e6c8d5f21d992f\" data-private-watermark-src=\"v2-c8985c179cd7cf05568bd2ba6fcdb0c7\"></p>\n<p data-pid=\"ydtKDeCb\"><b>01.</b>投票说明｜<b>EGA2021</b></p>\n<p data-pid=\"TN8ZUvhx\">大众评选的投票通道开启后，全国的密室、推理、互动剧爱好者们可通过EGA官网，为心爱的游戏主题投票。大众评选投票通道开放期间内，每人每个分区最多可投10个作品（包括所有种类的实境游戏），本届评选区域划分如下——</p>\n<ul>\n<li data-pid=\"S9C-uAk_\"><b>北京区（北京市）</b></li>\n<li data-pid=\"jq5xAcm2\"><b>上海区（上海市）</b></li>\n<li data-pid=\"brTYVIVo\"><b>东北区（黑龙江省、吉林省、辽宁省）</b></li>\n<li data-pid=\"NEWjsj9t\"><b>西北区（陕西省、甘肃省、青海省、宁夏、新疆）</b></li>\n<li data-pid=\"GLsM-QnS\"><b>华北区（天津市、山西省、河北省、内蒙古、河南省、山东省）</b></li>\n<li data-pid=\"zBFl7hSM\"><b>华东区（江苏省、浙江省、安徽省、福建省、台湾省）</b></li>\n<li data-pid=\"zp8g9ceE\"><b>华中区（湖北省、湖南省、江西省）</b></li>\n<li data-pid=\"p5OMJVee\"><b>华南区（广东省、广西、海南省、香港、澳门）</b></li>\n<li data-pid=\"alGbSQVS\"><b>西南区（重庆市、四川省、贵州省、云南省、西藏）</b></li>\n</ul>\n<p data-pid=\"1OKukMfN\"><b>02.</b>入围规则｜<b>EGA2021</b></p>\n<p data-pid=\"iAf4aqsR\">EGA2021年度优秀实境游戏评选的入围主题，将由【大众评选】与【EGA评委】共同决定，具体入围规则如下——</p>\n<ol>\n<li data-pid=\"wg-uDrA4\">各分区大众评选环节票选结果排名前20%的主题自动入围第二阶段评选（刷票无效，最终统计会扣除^-^）。</li>\n<li data-pid=\"LA5ZoEYE\">除通过大众评选环节入围的主题，各分区评委可在此基础上，补提入围主题（每区的补提数量上限不超过该区总报名数量的10%）入围第二阶段评选。</li>\n<li data-pid=\"0610eT_b\">入围阶段将会对参选作品的“唯一性”加以限制，不同分区的相同主题，入围时将仅保留排名较高的参选作品；如果出现相同排名会再按照获得票数取舍，过程中会与设计团队进行沟通，协商保留更优秀的作品。</li>\n</ol>\n<hr>\n<p data-pid=\"3BzJW51x\"><i>未来线下游戏如何发展？这是我特别想跟大家分享的部分。</i></p>\n<blockquote data-pid=\"8enUW-TD\">桃李春风一杯酒，江湖夜雨十年灯。</blockquote>\n<p data-pid=\"E6C1ED3z\">密室行业十年之际，早已经不是当初的样子，而它的未来，应是回归“初衷”。</p>\n<p data-pid=\"i7RZ6EOQ\"><b>密室逃脱回归机关解谜主题，小面积解谜主题的第二春即将到来。</b></p>\n<p data-pid=\"jox8eD4C\">原因如下：</p>\n<ol>\n<li data-pid=\"QEVedzvq\">“剧情”面临审查，虽然目前是自审自查，但是原来各种天马行空的剧情势必感受到不断拉紧的绳子，不如轻“剧情”，重“体验”，把研发精力投入更安全的机关解谜中。</li>\n<li data-pid=\"FhhT7x1Z\">消防部门可能会出台严格的审查政策，对于多房间的项目来说，过审的成本和几率无疑会增大，那1-2间的小面积解谜主题反而成为最能轻松应对的方式。</li>\n<li data-pid=\"yr9Dp_uL\">其他类型的创作瓶颈凸显，喜欢玩实境游戏的小伙伴肯定有感受，各种类型主题越来越像，模仿痕迹明显，现在创新成本水涨船高，很多商家选择稳妥的方式，做缝合怪，把各家所长都集成到自己的主题里，享受那“稳稳赚钱的幸福”，最后大家就越长越像了。反而解谜主题在被设计师冷落的这几年里，有了新的积累和突破的机会。</li>\n</ol>\n<p data-pid=\"P-bbzClf\"><b>实境RPG游戏，沉浸互动剧场将在未来2-3年成为线下娱乐游戏的主力军。</b></p>\n<p data-pid=\"-MdDPEXa\">实境RPG游戏，将在前沿技术的加持下，迸发出更大能量，因为只有实境RPG才是文旅的未来，是可以在开放世界和大规模客流有所作为的品类。</p>\n<p data-pid=\"aJXYZ_eO\">沉浸互动剧场，将凭借出色的“互动体验”特色，在“沉浸戏剧”世界中，独树一帜。</p>\n<p data-pid=\"lBqyGq-M\">持续更新ing...</p>\n<blockquote data-pid=\"U_p0e92i\">“EGA密室产业平台（<a href=\"http://link.zhihu.com/?target=http%3A//chinaega.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">chinaega.com</span><span class=\"invisible\"></span></a>）”是国内唯一实境游戏生态平台，致力于以密室逃脱行业服务为切入点，进一步打通行业赛事、版权交易、IP孵化、行业供应链、智能科技及实境游戏应用服务等领域，打造国内实境游戏行业B端服务为中心，辐射C端用户及跨界赋能的实境游戏生态价值链。<br>目前平台会员超过4000家密室逃脱为主的实境游戏商家，汇集了行业绝大多数设计团队、商家及各类供应商。每年除了举办全国性密室逃脱行业峰会，还会进行全国优秀密室主题评选，获得EGA的奖项就是密室行业最高水准的象征，并得到美团点评、百度、抖音等平台的官方认证。</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mashengcai?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">打杂大人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/528126420/answer/2441675829?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/354469803?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么看待剧本杀这种游戏？</a><br><a href=\"http://www.zhihu.com/question/459180058?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待 4 月剧本杀门店倒闭数量翻倍？怎么评价国内桌游行业的现状？</a><br>\n","link":"http://www.zhihu.com/question/528126420/answer/2441675829?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价动画《完美世界》 双石大战的整体节奏？","date":"2022-04-16 02:26:40","description":"\n<p data-pid=\"RUiUEbRx\">大家好 我是完美世界导演 汪成果 <br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a2a1a5be5e9aaebf1504a1b295caf2a4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"630\" data-watermark=\"watermark\" data-original-src=\"v2-a2a1a5be5e9aaebf1504a1b295caf2a4\" data-watermark-src=\"v2-53d5065cbbf2405ac601bb3735dad2cf\" data-private-watermark-src=\"v2-b500e160802692bf3184b95080010bc8\"></p>\n<p data-pid=\"smgYF-HS\">1. 大招设计理念<br>大招很多，这里简单的聊两招。<br>关于石毅的【麒麟步】<br>本来为了把压迫感可视化，开始有构思用飞行员G值过载测试的效果。<br>就是战斗机飞行员承受了8个G后，变老，变丑开始意识模糊的那种状态。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b39f0025c8c614406e225d0c1d37a11_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2166\" data-watermark=\"watermark\" data-original-src=\"v2-0b39f0025c8c614406e225d0c1d37a11\" data-watermark-src=\"v2-2c3fc46fd7c71cbcdfc0315eb8bc002c\" data-private-watermark-src=\"v2-93e14504e5bbb1a88c7ad5b65335a450\"></p>\n<p data-pid=\"9YKY7eBX\"><br>但是有点影响小石英俊的外貌，所以放弃了这个想法。<br>（虽然小石他本人没有什么偶像包袱，但他的经纪公司不允许啊。）<br><br><br>麒麟步的效果还丧心病狂的构思了伴随石毅的每一步，有巨大虚幻的麒麟同步升格踏下蹄子。麒麟也随着每一步，逐渐具象化……<br>因为《双石大战》的整体工作量实在太大，也没有办法去实现。<br>所以，用了现在更加紧张紧凑的版本来表现。<br>（特效部门的同事庆幸又保住了一把本应熬夜掉的头发。）<br><br>关于石昊的【朱雀四击】<br>这就要闪回到火国祖地涅槃池的剧情了。<br>当时在剧本改编时，增加了朱雀四击每一击都有一个不同特点的攻击属性。<br>每一击还加了霸（中）气（二）的名字。<br>根据这个设定，武戏的表演就有目的性，可以设计各自的特点和变化了。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-aecea8c14054146d4d6fb96769c80800_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1832\" data-watermark=\"watermark\" data-original-src=\"v2-aecea8c14054146d4d6fb96769c80800\" data-watermark-src=\"v2-b31dd913f18cee3efb6b111011d0786e\" data-private-watermark-src=\"v2-10fe8c655aecfc5aaf1de8c5d57a8e37\"></p>\n<p><br><br><br><br><br><br></p>\n<p data-pid=\"itaIpi9e\">2. 文戏处理，人物弧光<br>这就不能只聊双石大战。<br>以下截取了部分其他片集剧本中的相关反馈，<br>大家可以重回“创作现场”，感受一下故事是怎么改编诞生的<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-fbf23a89c188e8bf4f0dcc488d1b98c8_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2010\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-fbf23a89c188e8bf4f0dcc488d1b98c8\" data-watermark-src=\"v2-ff2124ae0e673bd140f0a29aef514f67\" data-private-watermark-src=\"v2-069ffbb956067c6b6dd75e193203da29\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5e7783aa88ac9c49794c0d4b6f5de38c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"405\" data-watermark=\"watermark\" data-original-src=\"v2-5e7783aa88ac9c49794c0d4b6f5de38c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-783f1388c8d36d69843fb70f6f3d86e6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"375\" data-watermark=\"watermark\" data-original-src=\"v2-783f1388c8d36d69843fb70f6f3d86e6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3eeb5df4bf983c7d6951d180df56146_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1031\" data-watermark=\"watermark\" data-original-src=\"v2-d3eeb5df4bf983c7d6951d180df56146\" data-watermark-src=\"v2-05d67e419bac8fd496dfc39e26e44c26\" data-private-watermark-src=\"v2-ac0c18db6e514698df87df559cc8e227\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-007cffc7d03110eb66cf5d80e733a682_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1151\" data-watermark=\"watermark\" data-original-src=\"v2-007cffc7d03110eb66cf5d80e733a682\" data-watermark-src=\"v2-d8472b240483e26e7a989f1acc4c2a3f\" data-private-watermark-src=\"v2-0c2f6516514acf79222cb9dda35276a3\"></p>\n<p data-pid=\"gobzKzQv\"><br>当然，在剧本以后还会有多次的二度创作<br>有了前面剧情的铺垫，角色也更加立体<br>原生家庭对石毅的影响，让观众理解他如何“黑化”成为一个，为了变强可以不择手段的冷傲至尊少年。<br>他输在【自负】上。<br><br>而石昊赢在【自强】上。<br>濒死状态中看似外在的祖父，父亲给了他精神支柱化作重生的动力。<br>其实，这都是他内心的影射。<br>【爱】才是他自强的核心动力，<br>虽然从童年开始，家人的爱就缺席。<br>但石昊一直成长在有爱的环境（石村，补天阁……的各种“亲朋好友”）影响了他的人格形成。<br><br>（以下内容可能涉及剧透，阅后即焚）<br>石昊的【爱】也有一条成长线。<br>由小到大几个不同层次的爱<br>1【修身】个人亲情的【小爱】<br>2【齐家】守护石村，守护补天阁的爱<br>3【治国】接受石国皇位石国族人的【中爱】<br>4【平天下】面对上界割韭菜，守护下界亿万生灵的【大爱】<br>……<br>爱要升级，符合中国的传统价值观<br>但是又要符合人性<br>所以最后还是回到亲情<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7cb44a08c874e9bdba1eba81d54fbd6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1493\" data-watermark=\"watermark\" data-original-src=\"v2-d7cb44a08c874e9bdba1eba81d54fbd6\" data-watermark-src=\"v2-8be835fc29e0ff723735dbb4a108b016\" data-private-watermark-src=\"v2-d5095a5e69e0950fa87070229627c5a1\"></p>\n<p data-pid=\"lKhp_11l\"><br><br>今天就和大家聊到这里。<br>不然停不下来真的就会开始剧透了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cczhenbang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">cczhenbang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/528129257/answer/2441288417?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/525562199?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《完美世界》第 52 集「双石大战」?</a><br><a href=\"http://www.zhihu.com/question/412885585?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价即将在腾讯视频播出的《完美世界》动画?</a><br>\n","link":"http://www.zhihu.com/question/528129257/answer/2441288417?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"本周看什么丨最近值得一看的一大摞作品","date":"2022-04-15 10:03:04","description":"☕️TL;DR近期佳作推荐：[电影]套装、[港剧]金宵大厦2、[美剧]东京罪恶、[台剧]良辰吉时、[动画]夏日重现、[日剧]孤独的美食家～美味却苦涩……井之头五郎的灾难～、[纪录片]登山家、[动画]间 ...<a href=\"https://sspai.com/post/72684\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72684"},{"title":"何小鹏称「若供应链企业无法找到复产方式，中国所有整车厂或将停工」，会有哪些影响？","date":"2022-04-15 09:35:36","description":"\n<p data-pid=\"gzgkIFbv\">汽车按车身、底盘、动力系统，电气架构四个基本部分组成，所有零部件粗略算下有三万来个。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-87dad60ff559b4e9094e4658011c38fa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"658\" data-rawheight=\"494\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-87dad60ff559b4e9094e4658011c38fa\" data-watermark-src=\"v2-a3d0ea815757a3cae371b9cceb2c1f32\" data-private-watermark-src=\"v2-781df7275bf49a1138cc75bf6b66dbca\"></p>\n<p data-pid=\"tl9K3MCV\">而最让汽车的供应链头疼的是，这么多的零件，必须都要有货，如果里面的零件没货，哪怕是一个零部件，那么整车的生产就卡在了那个环节，后面的组装可能就要停下来。</p>\n<p data-pid=\"kXjRHuk9\">这也是为什么主机厂要给供应商定下那么高额的罚款，如果因为供应商提供的零部件质量不合格或者无法及时供货，那么导致主机厂停线<b>一分钟，罚款5000到两万块。</b></p>\n<p data-pid=\"iwpVJVB4\">而即便是有着零部件众多的高风险，但是主机厂却不肯多备零部件的库存，而是近距离（同一城市）采取循环送货，物流车辆每隔一段时间进行送货，主机厂仓库基本不备该零部件库存。</p>\n<p data-pid=\"Ivj78vDE\">远距离的供应商，主机厂则备一部分应急库存，用定期批量采购的方式来保障正常生产。总的原则就是能够压在供应商那里的库存，不占用自己的资金，就尽量压在供应商那里。</p>\n<p data-pid=\"RY8qLSov\">所以，如果形容汽车的供应链，就是<b>一根颤颤巍巍的高空钢丝线</b>，而供应链的人则要在这根高空钢丝线上保持平衡，一次次走来走去。汽车零部件十分复杂，种类繁多，且绝大多数的关键零部件都不能少，偏偏库存还因为成本的原因控制得如履薄冰。</p>\n<p data-pid=\"rSGzDpNs\">这个时候可能有人要建议，有些零部件缺货，找近似的零部件用不就行了。这个还真的不行。</p>\n<p data-pid=\"fxn7j9gt\">对于造车来说，对于零部件的要求都有严格的规定，从尺寸的大小（毫米），到材质的要求，到环境下的变化，都有严格的规定。就连不涉及到安全的内饰件，你如果不用这个车型的，用其他车型的内饰，可能光泽度，颜色就有细微的差别，即便人的肉眼在自然光下无法辨别，在系统里也属于不同的物料，也不能替换。</p>\n<p data-pid=\"inWy88QW\">关键，改用其他近似料，这在工艺上也是极为复杂的。因为每一个零部件都有自己的料号，组件都有自己的BOM，你改用相似件进行组装，涉及到工艺的变更，BOM的改变，不仅要做验证，第三方审核，一套更改的流程就是耗时漫长，而且紧急时刻，验证出了问题，谁担责任。</p>\n<p data-pid=\"diIhion1\">记得以前一家安全带的供应商提出国外因为罢工，导致胶水缺货，要改用另一家的胶水。但是胶水的更改，需要到上海的实验室做验证，实验室说周期是三个月，加钱排在前面也得一个半月才能出结果。关键验证结果下来，说这个胶水对安全带的影响会体现在5年后，安全带有可能会出现卡住的可能，结果验证不通过。那个供应商只能加价从国外空运胶水，亏本亏得一塌糊涂。</p>\n<p data-pid=\"IM2DfYbA\">而汽车的供应链，<b>分为Tier1，一级供应商</b>，给整车提供零部件和总成模块；<b>Tier2，二级供应商</b>，给一级供应商提供零部件。</p>\n<p data-pid=\"tkYGHy7e\">车企找一级供应商，在成本和距离的考量下，基本都会找周边工业圈的，除非是周边工业圈的某个零部件价格过高，那就宁愿找远一点的，但价格除开运费还低一些的供应商。</p>\n<p data-pid=\"wayhiiH7\">而因为集群效应，一个大的车企周边也会慢慢涌现一些专门为车企服务的一级供应商，宁愿前期亏本，也要抢占市场，给车企专门做配套的工厂。</p>\n<p data-pid=\"OU-4IWRE\">但一级供应商下面的二级供应商就是分布天南地北了，不一定能够聚集在一级供应商周围了。因为一级供应商的利润比较丰厚，可以选择在主机厂周围建厂或者建流水线。而二级供应商的利润相对较差，所以很多知名二级供应商都会在一些地价便宜，政府给的优惠力度大，且交通方便的小城市建厂，然后长途供货给一级供应商。</p>\n<p data-pid=\"uha-RyMg\">所以，汽车的供应链遍布全国各地，是一件很正常的事情。但这也带来了一个缺点，就是多点之间的物流不通畅，就会造成二级供应商的货生产出来了，也到不了一级供应商那里。而一级供应商巧妇难为无米之炊，无法生产或者无法物流供给主机厂。而主机厂一贯都是少库存，甚至提倡<b>JIT（just in time）</b>的生产方式，就导致了何小鹏的言论，<b>全国车企要停产。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-68eb5a2824d1a5775b4f74630aa80677_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"379\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-68eb5a2824d1a5775b4f74630aa80677\" data-watermark-src=\"v2-d3d8fa2c569573bc0bdf1bfd8a2b3697\" data-private-watermark-src=\"v2-41fe64d682cd4ee4e25734cab4be26c7\"></p>\n<p data-pid=\"bvd2BBo1\">疫情下，上海的某些Tier1、Tier2供应商接受不了货，自然就会给上海的主机厂断粮。而上海又拥有单城市最多的Tier1,Tier2供应商，给全国的主机厂供货。可以说超过一大半的，分布全国各地主机厂的零部件，都来自于这块长三角地区。</p>\n<p data-pid=\"jFJP61ek\">而上海封闭，周边省市的高速封闭，也导致了长三角地区的物流严重受阻，物流司机即便送的货不在长三角地区，但如果不穿过疫区，也要多绕一两天的路才能把货物送到零部件供应商处，这又涉及到了成本问题。一次、两次偶尔可以这么做，如果变成了一个月、两个月的常态，物流公司和零部件公司都吃不消这个额外成本，最后只能选择停运。</p>\n<p data-pid=\"bQ-CX6sO\">而在现阶段，连民生保障的物流都限制的前提下，还要考虑开放高速给制造业的物流，让其川流不息地进出疫区，鉴于上海目前的高风险持续的情况下，那么对于疫情来说会不会更不可控？会不会病毒扩散到全国的供应链所在地？所以，真的是难啊。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/527966984/answer/2440544395?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1045 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/22404741?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么中国没有公司去山寨特斯拉？</a><br><a href=\"http://www.zhihu.com/question/526290113?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">蔚来汽车考虑与其他车企共享换电技术，此举是出于什么方面考虑？换电业务目前前景如何？</a><br>\n","link":"http://www.zhihu.com/question/527966984/answer/2440544395?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"感受来自遥远时空的音乐魅力，用这些歌曲体验古典乐之美","date":"2022-04-15 08:38:27","description":"古典乐并不注定高雅艰涩，就像流行乐也并不都是口水情歌。<a href=\"https://sspai.com/post/72679\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72679"},{"title":"本月玩什么 | MLB The Show 22、乐高星球大战、史丹利寓言重制","date":"2022-04-15 06:30:00","description":"Nintendo Switch Sports、诡野西部、乐高星球大战：天行者传奇、MLB The Show 22……本月值得关注的新游汇总。<a href=\"https://sspai.com/post/72671\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72671"},{"title":"从餐巾纸到你的思维伴侣：Napkin 如何让灵感收集变得简单易用？","date":"2022-04-15 03:33:21","description":"用自然的知识图谱激发你的想象力。<a href=\"https://sspai.com/post/72633\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72633"},{"title":"日产汽车提出的「永恒的日式未来主义」设计理念，应该如何理解？","date":"2022-04-15 02:50:06","description":"\n<p data-pid=\"e9HtZjUJ\">“永恒”和“未来”，在原神里的雷电将军看来，是绝对冲突且无法共存的，否则也不会大力推行“眼狩令”，实施锁国的静止状态。</p>\n<p data-pid=\"cuq5na6f\">日产提出的“永恒的日式未来主义”，如果要避免理念内部的冲突，就只能解释为：以传承经典的形式、设计对未来的思考。说到“冲突”，少不了英菲尼迪的“冲突美学”，可见寻求冲突是日产系设计师的本能。而当Chill-out、Surf-out、Max-out等最新的日产纯电动设计摆在你面前时，你又不得不感受着视线与内心审美倾向之间的冲突。日系设计总是这样，大胆却小众。</p>\n<p><img src=\"https://pica.zhimg.com/v2-39254204edf2fb643a1e3cc33cc93340_720w.jpeg?source=b1748391?rss\" data-caption=\"Nissan-Chill-Out_Concept\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-39254204edf2fb643a1e3cc33cc93340\" data-watermark-src=\"v2-907969be11a961ff7e1f88d310bd42e4\" data-private-watermark-src=\"v2-ae637adf07401ae1f4602ae079f5dbe1\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f5336d4aff02ad1dea73f46bc5075da6_720w.jpeg?source=b1748391?rss\" data-caption=\"Nissan-Surf-Out_Concept\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-f5336d4aff02ad1dea73f46bc5075da6\" data-watermark-src=\"v2-d85e6eec6a55d8eeb05f848f9b15c6fa\" data-private-watermark-src=\"v2-991b0ba4519a2741322ede765dd386aa\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-307361491438e68c27025a8618cde248_720w.jpeg?source=b1748391?rss\" data-caption=\"Nissan-Max-Out_Concept\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-307361491438e68c27025a8618cde248\" data-watermark-src=\"v2-e1e5a29001f52eb1213f6c88ba87cbdc\" data-private-watermark-src=\"v2-cea50bc847cb52f87d70e0ee19dd5950\"></p>\n<p data-pid=\"_eROLTqC\">但当看到日产官方对“永恒的日式未来主义”的解读，又不得不想起雷克萨斯的“预纯妙”（L-finesse），因为从形式上来看如出一辙，都是以单字统领一个维度的设计内涵。区别在于“预纯妙”足够“纯”（敏锐的极简）；“粋间倾整移”却不够“移”（朴素的自然）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b69da949000b49b33c532fe5483a2a63_720w.png?source=b1748391?rss\" data-caption=\"  雷克萨斯设计理念“预纯妙”（L-finesse）\" data-size=\"normal\" data-rawwidth=\"3584\" data-rawheight=\"5362\" data-watermark=\"watermark\" data-original-src=\"v2-b69da949000b49b33c532fe5483a2a63\" data-watermark-src=\"v2-9dd9cb173b0ce20ab931cc10e8345231\" data-private-watermark-src=\"v2-b4292b73d4154e523e1cf13d05129345\"></p>\n<p data-pid=\"4T6-fEQ9\">“粋”即“粹”，无论汉语还是日语，“粋”都可解释为：精粹、精华。而日产对“粋”的注解为“前沿的创新”，一来不够精准，解读为“精炼、简约”更合适；二来与“倾”所表达的“大胆的颠覆”有意义上的重复。</p>\n<p data-pid=\"ZZC-8qZm\">所以说，日产更多是把设计理念当作营销概念来运营，相比雷克萨斯“预纯妙”从美学哲学上对设计行为的指导，不是对手。所以单就设计层面的理念来说，“永恒的日式未来主义”还需进一步提纯。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-febc78f2ed2da73346621f21ca89630b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2148\" data-rawheight=\"362\" data-watermark=\"watermark\" data-original-src=\"v2-febc78f2ed2da73346621f21ca89630b\" data-watermark-src=\"v2-d9f535542e22ff9ee7a8c258f42d136a\" data-private-watermark-src=\"v2-f5f15ba2fa1dec764c21ded85bf7deab\"></p>\n<blockquote data-pid=\"aVTb5Y5R\">\n<b>粋 · 前沿的创新</b><br><b>間 · 神秘的距离</b><br><b>傾 · 大胆的颠覆</b><br><b>整 · 巧妙的细节</b><br><b>移 · 朴素的自然</b>\n</blockquote>\n<p data-pid=\"iocX_6I2\">其实“永恒的日式未来主义”早在2019年的东京车展上就发布过了，只不过声量很小。这次凭借日产与黑川雅之联名设计的麻将，再做一次针对中国市场的品牌宣传与推广而已。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ea365ce8e2702bcbd2bd004aa4cfd814_720w.jpeg?source=b1748391?rss\" data-caption=\"2019 东京车展\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"518\" data-watermark=\"watermark\" data-original-src=\"v2-ea365ce8e2702bcbd2bd004aa4cfd814\" data-watermark-src=\"v2-44f1c6dc2b07924d20a9a66aaa91232a\" data-private-watermark-src=\"v2-528c63f0b1ebb9d2602f2c2d076222de\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e97c8b5fd1d7f3eaa5de5ba005f84053_720w.jpeg?source=b1748391?rss\" data-caption=\"2021.6 日产与黑川雅之联名款中国麻将\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"1457\" data-watermark=\"watermark\" data-original-src=\"v2-e97c8b5fd1d7f3eaa5de5ba005f84053\" data-watermark-src=\"v2-35e3256a535d247fd08a393ac94d27e3\" data-private-watermark-src=\"v2-acd24268cc6ca99f72a7b4cec110c2f8\"></p>\n<p data-pid=\"pi5wECP9\"> 顺便提一下，这个话题下另一个回答@一苒 对文化自信的理解，我是不认同的：</p>\n<blockquote data-pid=\"uxYIKpKD\">什么时候这个词（国潮）彻底退出历史舞台了，我们这些品牌和产品工作者才算入了点门，有了一点最基本的文化自信。</blockquote>\n<p data-pid=\"yujbQI9T\">为什么日本品牌提“永恒的日式未来主义”这种民族文化就可以拍手叫好，中国品牌提“国潮”就是文化不自信、“根本不懂中国”？问题到底出在哪里？</p>\n<p data-pid=\"7imNuVTS\">希望“国潮”的发展越来越好～</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e4bf59f7b7b4ddad97f533fe61096d3b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"704\" data-watermark=\"watermark\" data-original-src=\"v2-e4bf59f7b7b4ddad97f533fe61096d3b\" data-watermark-src=\"v2-799656113809e52a80bd4f383c38cce4\" data-private-watermark-src=\"v2-09b3bafc76ea4b0e811dfc5ddcb44ed1\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gao-shao-jie-34?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">高绍杰</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/527575542/answer/2440446606?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">31 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/463036672?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">杜卡迪V2 宝马拿铁 还有R1250GS到底买哪个？</a><br><a href=\"http://www.zhihu.com/question/460864381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">刚大学毕业，订了一台杜卡迪v2，需要等待三个月到五个月，对于新手开这样的车需要有什么注意事项吗?</a><br>\n","link":"http://www.zhihu.com/question/527575542/answer/2440446606?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"圈速表现相近但宽度、配方不同的轮胎，用起来会有什么区别？","date":"2022-04-15 02:48:57","description":"\n<p data-pid=\"i5uUE2yh\">首先在探讨轮胎具体的区别之前，我们要考虑到一个最现实的问题，那就是轮圈的宽度。</p>\n<p data-pid=\"a49RF5z6\">对比两种轮胎的区别时，我们要控制轮圈这个变量，因为我们都知道轮圈的直径、宽度、重量、et值都是会对操控造成影响的。</p>\n<p data-pid=\"vvfelRGh\">那在我们不改变轮圈的情况下，我们能把轮胎加宽或者说减少多少呢？我帮大家百度一下好了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3075ce4401ce7f0ee77f44958b7e5b7d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"504\" data-rawheight=\"388\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3075ce4401ce7f0ee77f44958b7e5b7d\" data-watermark-src=\"v2-6f83e897c83e9cbcdeb6a050ba23d6a0\" data-private-watermark-src=\"v2-4f4d6f2e0853a6a59a321ffc4f6b9ad8\"></p>\n<p data-pid=\"Txb1fCqv\">假设我们的原厂（不变量）轮圈宽度是10J，那么从这个表上我们可以看到它对应的轮胎宽度最窄是295mm，最宽是315mm，中间的305mm则是建议的最佳尺寸。</p>\n<p data-pid=\"2e5h7RhA\">接下来，那我们就来聊聊抓地配方更好的295mm轮胎对比抓地配方稍差的315mm轮胎在实际驾驶时的区别。</p>\n<p data-pid=\"3Nks94Bq\">稍等，我突然想起件事，我的那辆Boxster前几天在路上被一辆车刮一下，轮圈花了，在4S修车的时候师傅给我发了一个图，上面可以看到我轮圈的数据，前轮是19x8.5J，后轮是10J。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-43592a0021577a3f83bdb564c0feb01e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1920\" data-rawheight=\"864\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-43592a0021577a3f83bdb564c0feb01e\" data-watermark-src=\"v2-9028935993e2a7cf999f2db8e12e6289\" data-private-watermark-src=\"v2-bf8b37006e0df4acdc72a6bd1e7b99b9\"></p>\n<p data-pid=\"UCTaw4yC\">当时我就很纳闷，因为原厂轮胎尺寸分别是前轮235/35 R19和265/35 R19，所以按照那个对应的表格来看，前轮的8.5J用上了较窄但属于合理范围内的胎宽，但是后轮就离了大谱了，如果按照那个表格来看，我的265mm轮胎离可用最窄的轮胎还差了30mm，难道保时捷是外行装错了？</p>\n<p data-pid=\"2hAOVb3u\">所以我又去很多轮胎品牌的官网找了找，有些品牌也会提供轮圈宽度的建议，而数值也都和我上面发的那个表格是一样的，难道是保时捷的锅吗？</p>\n<p data-pid=\"hmPkaxQ9\">直到那次我和一个车队的技师聊起这个事，才恍然大悟。</p>\n<p data-pid=\"pfoNzb1J\">其实，那个表并没有错，保时捷更不会范这种低级错误，轮胎对应的轮圈宽度建议只是适用于一般情况，一般情况是指行驶在普通道路上的家用车需求，而相对于的两个极端就是越野与赛道。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3e5d27ebe41b9f78f78f78bf36972124_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2560\" data-rawheight=\"1707\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3e5d27ebe41b9f78f78f78bf36972124\" data-watermark-src=\"v2-53f122966932869868b59d2685ca38a1\" data-private-watermark-src=\"v2-c517df109d838eb059699ae5ffbccb4d\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-237bbda30ca021906435fbe58aa525c9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"890\" data-rawheight=\"593\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-237bbda30ca021906435fbe58aa525c9\" data-watermark-src=\"v2-fc1e3e24bc46bab98e815aa5010b3ea1\" data-private-watermark-src=\"v2-3d8b812bba96247b8324a83ef5b7c985\"></p>\n<p><br></p>\n<p data-pid=\"hEwyV4k5\">这就回到了题主所问到的问题了，保时捷用10J的轮圈装265的轮胎当然不是因为305的轮胎更贵，而是为了用更宽的轮圈把轮胎“扒”住，这样轮胎在弯道里才能尽可能的减少横向位移和变形。</p>\n<p data-pid=\"ipRUoEJN\">为了方便大家更直观的理解，我翻出家里落灰的硬盘，在那个还流行绕桩测试的年代，我们测试过不少SUV，比较厚的胎壁看起来会更明显一点。</p>\n<p data-pid=\"0u7aYsOT\">比如：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ceb5859478ddf826f3f7eb0fd08e65bd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3456\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ceb5859478ddf826f3f7eb0fd08e65bd\" data-watermark-src=\"v2-77e34a1775b4dd30238c7c13c942025d\" data-private-watermark-src=\"v2-2a8bcdfeeaf8ceb7e35f1183c6c63ffd\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-c994364461d8bcf6d7b529e5a78eec1e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1125\" data-rawheight=\"808\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c994364461d8bcf6d7b529e5a78eec1e\" data-watermark-src=\"v2-e599a097875657b9d48e893c185789e2\" data-private-watermark-src=\"v2-d203bd825956dba28538663aa2764dd7\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-ce4f90c0276f301b71574cada7c8898b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3456\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ce4f90c0276f301b71574cada7c8898b\" data-watermark-src=\"v2-0f1a230bc50e28c1e10438adc731a789\" data-private-watermark-src=\"v2-b57c19530db060b914844b0b67aac2a5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b2df44beb69d9376f69202f6b74b3c1e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"968\" data-rawheight=\"763\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b2df44beb69d9376f69202f6b74b3c1e\" data-watermark-src=\"v2-6a84f1bb6b66709c8f8ccec989972ff4\" data-private-watermark-src=\"v2-6cf334c8c333f2373e52b5a1916db0f4\"></p>\n<p data-pid=\"njf0FHk4\">这还是相对测试来说更加温柔一点的摆拍，所以轮胎在弯道中的变形只会比图片更加严重。</p>\n<p data-pid=\"zgaD4_SY\">夸张的轮胎变形会让转向变得迟钝，极限来的模模糊糊，对于胎壁比较软的轮胎来说，甚至写着字的胎壁会直接与地面接触，这时候轮胎的极限会进一步下降。</p>\n<p data-pid=\"Ybbpycnj\">这就是为什么跑车/车队的赛车都不会按照那个表格来配轮胎了。</p>\n<p data-pid=\"zvSwaALd\">所以实际情况是，轮胎宽度是需要最先确定的，之后再考虑用多宽的轮圈去搭配。</p>\n<a href=\"https://www.zhihu.com/video/1498249537337131008\"></a><p data-pid=\"FiBY24IZ\">回到题主的问题，如果在其它都不变的情况下，两条同样圈速的轮胎，一个宽一个窄，</p>\n<p data-pid=\"nlq3dYsC\"><b>那势必更窄的轮胎有着更好的操控感受，</b></p>\n<p data-pid=\"WsE-kMhq\"><b>更加犀利的转向，</b></p>\n<p data-pid=\"1-D7urfu\"><b>更清晰的极限，</b></p>\n<p data-pid=\"SmCGrRHm\">还有很重要的一点，更窄的轮胎通常意味着<b>更轻的重量</b>（设计不同也会影响重量，通常抓地更好的性能胎不会做的太重），更轻的重量意味着<b>更小的惯性</b>，这对<b>刹车加速弯道性能都是非常有利</b>的，并且轮胎更轻相当于减掉了转动的轮子的最外侧，举个简单的例子，当我们把钥匙环套在手上转，感受一下它的重量，再用一条长绳子绑住钥匙，抡一下这个绳子，再感受一下钥匙的重量，是不是就理解轮胎变轻的好处了。</p>\n<p data-pid=\"NRMwkeDU\">再考虑到簧下1kg胜过簧上5kg的这个民间流传的说法，<b>更轻的轮胎百利无一害</b>。</p>\n<p data-pid=\"2Nh766m6\">以上。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dong-dong-dong-37-85?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">尹栋</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/501074102?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冬季驾驶如何保证安全？想换冬季胎，但不知道轮胎品牌哪个好？</a><br><a href=\"http://www.zhihu.com/question/387293243?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">家用前驱车，前后轮胎的抓地力不同（抓地力前大后小），是否会影响过弯时的操控性？</a><br>\n","link":"http://www.zhihu.com/question/527954505/answer/2440454945?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：飞利浦推出新款量子点 miniLED 显示器、Google 推出 Switch To Android 应用","date":"2022-04-15 00:57:19","description":"Apple 中国供应商加速转用可再生能源，京东方发布新款主动式防隐私保护屏等<a href=\"https://sspai.com/post/72673\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72673"},{"title":"面试官如何判断面试者的机器学习水平？","date":"2022-04-14 15:07:24","description":"\n<p data-pid=\"_IcTJ7hZ\">这个问题其实很有意思，很难有个定量的定论。以下是<b><i>我个人</i></b>对于ML engineer/research scientist的能力的理解，用几个和其他回答不同的方面来说一说如何来看待在这个职位中的“水平”。也算是做了两年hiring manager后的一些看法总结，不一定全面，希望大家指摘。关于纯技术的内容，有很多回答说了很多，所以我在最后一个维度再来略谈一下技术。需要说明的是，以下的很多维度对比较资深的研究员和工程师更重要，而如果你刚刚毕业或者经验比较少，更重要的还是把技术掌握扎实。在以下的这些内容中，我会以一些例子来说明这些维度，我们姑且叫这位面试者小张吧。</p>\n<h3>第一个维度是：公司策略</h3>\n<p data-pid=\"2iC6eC19\">这是一个我认为至关重要的维度，并且这关系着一个工程师或者研究员在一家公司中可以走得多远。公司策略这里指的是一家公司的发展方向，想要着重投放资源来扶持的领域。而对于工程师或者研究员来说，他们的目标就是要理解，他们的技术方向和公司策略是否能够贴合。如果不能，他们的技术方向作为新方向能够带来什么。如果可以，那在那些方面可能是可以带来帮助的。</p>\n<p data-pid=\"nj0RI8mg\">我来举个例子，假设小张在面试一家Computer Vision为核心的Security技术公司，而小张的研究方向是做控制理论(control theory)的。那作为公司而言，小张即便是非常著名，并且水平极高的，那公司在招聘过程中也会有犹豫。因为公司并不知道小张对于公司的价值在哪里。而作为一个资深的有经验的研究员，小张需要做到的是，如何为公司创造价值，也就是找出新的发展方向。那比如说，小张发现这家公司最近开始在机器人上面的一些sensor和camera做投入，他就可以结合perception和控制理论做一些方向性的探索，给到公司并未想到过的价值。</p>\n<p data-pid=\"FUO4939-\">当然，大多数时候，你的面试不会如上述的例子一般，在公司策略和自己的方向之间有很大的跨度，但是知道自己对于公司策略的价值，会是你将自己的脚踏入心仪公司的一大步。这里，公司通常所关注的面试人的水平，其实是在于他们对于全局的把控能力，是否能够将自己所学融入进全局的大方向里。这对于工程师或者研究员来说，可不只是画饼的能力，对于有经验的面试官来说，一个能做到这一点的面试者，是展现了极强领导力的。因为面试官经验丰富，对于项目和方向的可行性，他们听到后心里大概就会有个数。</p>\n<p data-pid=\"YgRL9Zid\">这个地方有人会问，那在很多公司，实在太大了，他们什么都做，这时候如何判断自己的价值呢？那我们就得看产品方向了。</p>\n<h3>第二个维度是：产品方向</h3>\n<p data-pid=\"xscLwEPl\">上文我们讲到，一个人对于公司策略的理解以及她认为自己对于公司策略的价值会是非常重要的一点，但如果面试的是大厂，虽然每家公司有自己的mission，公司内部所需要的技术也会各式各样，很难笼统地定义自己的价值。这时候，非常重要的一点就是找到自己所面试公司所对应的产品方向，并且找到自己的定位。</p>\n<p data-pid=\"qmz2ZPFF\">一般来说，对于大厂，每家公司都有数不清的事业群和部门。那对于面试者来说，他们其实面试的不是一整家公司，而就是他们所接触的这个部门。上文所说的这些对于单一产品或者单一部门来说都是一样有用的。但我还需要补充一点。</p>\n<p data-pid=\"7pivWWLD\">一个部门所负责的产品和公司总体策略相比，一个重要的区别在于，部门与部门之间是有边界的，而公司总体策略不需要顾虑太多这个方面，只要能有空间可以竞争就可以了。在这里，一个非常重要的点在于，如何在划定的发挥空间内了解到自己的价值。我们再用第一部分的例子为例来看一下现在这个情况。现在我们假设面试官是一家公司内以computer vision技术为主的一个部门，而有另一个部门在做机器人相关的工作。那这时小张再用同一套的体系去理解自己的价值就会有些不合适了。</p>\n<p data-pid=\"RASLmeH_\">在划定空间内，小张首先需要了解清楚对于这个部门，到底什么是他们的边界，再根据这个边界来限定自己的价值。假设这个部门的职责在于发展computer vision在camera上面detection的能力，并且和各部门合作让各部门使用自己的detection功能，那小张在这个部门的个人价值可以是帮助这个部门更好的理解其他部门的需求，并且去负责一个从perception端到control端之间的接口。并且从长久来看小张可以作为一家公司的fixer，也就是解决重要产品的衔接问题和规划未来整合的趋势。</p>\n<p data-pid=\"HED6MN4_\">在这里，产品部门所看重的小张的水平在于，在部门划定的范围内将自己所学贡献在产品所需的能力。一个能够挖掘出方向并且看到产品所需的机器学习工程师或者研究员，是每一家公司梦寐以求的员工。</p>\n<p data-pid=\"C4kHxS7-\">当然了，上述的例子有些夸张的成分，但确实是很多人经常遇到的，比如在换技术方向的同学们。</p>\n<h3>第三个维度是：职位定位</h3>\n<p data-pid=\"1p6d4HRL\">在聊完了在大环境下的个体水平和价值后，我们来讲一讲一个职位必须面对的一个问题，定位。一般来说，机器学习岗位通常分为三大类，应用岗，应用研究岗和纯研究岗。大家可以这样来对应，如果你的目标是对应一个产品把一个已知的算法用上去，那是应用岗。为了一个特定产品的一个特定问题来设计一个算法，那就是应用研究岗。而去研究通用算法，那就是纯研究岗。</p>\n<p data-pid=\"ku2fVKL1\">那对于这三个职位中的每一个，水平的定义是不一样的。换言之，如果是应用岗，即便小张是一个大牛，发了无数的paper，但是如果被问到了解决一个产品问题怎么做却想不到一个实际的架构，而是说了很多可适用的高深理论，但可行性和如何实现完全没有想法，那也只能说是水平不行。反之亦然，研究岗需要极强的理论功底，如果只有实现的能力，没有构思新理论方向的能力也是不行的。</p>\n<p data-pid=\"oI_JX9rg\">所以对于公司来说，一个很重要的点在于，面试者的强项是不是和这个职位的定位吻合，而水平本身也会因为职位的吻合度有很大的浮动。</p>\n<h3>第四个维度是：问题解决</h3>\n<p data-pid=\"MktmTVnQ\">有很多面试者喜欢聊技术聊得很深，但是复杂技术就真的是好事吗？在这里，我觉得有一个重要的概念是对于一个工程师或者研究员特别重要的，那就是解决问题的能力。复杂算法和技术的存在原因是因为简单算法无法解决这些问题，不是因为是希望让面试者在面试中夸夸其谈的。如何用最简单的方法解决最复杂的问题是工程师或研究员水平的最高境界。</p>\n<p data-pid=\"xDrap-f3\">假设小张在面试过程中被问到了这样一个问题：我们现在需要解决一个问题，如果我们检测到了机器人面前有遮挡物，我们需要保证机器人不会撞到它。我们用一种夸张的方式来看看三种面试回答，并且来评判一下他们的好坏。<br>1. 我觉得如果我们检测到了遮挡物，在每一个检测到遮挡物的time step中，不采用能够使得机器人经过障碍物的policy<br>2. 我们让机器人做很多次随机操作，然后用offline reinforcement learning来学得一个policy，然后上线测试。或者我们可以做online的RL，然后用policy gradient来得到一个continuous control policy来绕开遮挡物<br>3. 我们遇到了遮挡物便停下。</p>\n<p data-pid=\"OkpJb8kR\">在以上三个回答中，我会做以下排序1 &gt; 2 &gt; 3。原因是，1用最简单的方法规避了遮挡物，2虽然会解决问题，但是把问题本身无限复杂化了，3没有解决问题。</p>\n<p data-pid=\"UUgxIBRW\">当然在面试当中不太会真的有那么夸张的回答区别，但是用最简单的方式解决最复杂的问题不论是在应用还是在理论研究中都是不变的真理。所以单纯让别人觉得你的解决方案很复杂很高深并不是很高明的选择。</p>\n<h3>第五个维度是：关系处理</h3>\n<p data-pid=\"NfOdBZPK\">在工作关系中，解决问题的很重要一环，可能是最重要的一环，是如何将自己的想法输送出去，并且是舒服得输送出去。这对于机器学习的同学们尤其的重要，因为我们做的东西很抽象，对于不是这个领域的同学们并没有那么容易理解。那尤其关键的一个点就是如何处理作为工程师或者研究员和别的合作伙伴的关系是非常非常重要的一点了。</p>\n<p data-pid=\"5DubKFiG\">假设小张最后被问到了这样一个问题。我们的机器人现在在最后实验过程中，我们发现你实现的算法的inference部分使得机器人在反应速度上从50Hz降到了40Hz。最后的机器人运行效率部门要求删除这段优化算法。你会怎么办？</p>\n<p data-pid=\"j1TPz5G8\">这其实是机器学习的同学们经常会遇到的一个问题，你想要实现一个算法，但是产品不契合，或者遇到了这样或那样的political/production issue。这种时候，如何做出一些牺牲，并且多做沟通使得自己可以在原来的困境中尽可能多地走一步，会是相当重要的。这时的一种回答方法是，我会找机器人运行效率部门沟通看看能否我重新训练一个更加小的model，使得反应速度变快并且和机器人运行效率部门一起去做总体的优化，并且保证机器人运行效率部门可以分享这一部分的credit。即和机器人运行效率部门分享不牺牲反应速度的同时提升机器人本身的能力的这部分impact。这样便可以从关系的角度出发，在自己牺牲一部分credit的同时使得全局最优化，并且建立一些有效的关系。当然这只是一种回答方法，这里有无数种办法，但重点在于要让别人知道你会在公司内处理关系。</p>\n<p data-pid=\"0sn8rwgC\">关系处理对一个资深的研究员或者工程师来说是至关重要的。一个容易合作的研究员或者工程师，非常容易会得到全公司的欣赏，并且很容易将自己的想法付诸实践。反之，寸步难行。对于面试者来说，能够展现自己处理关系的能力，在面试中相当的重要，是体现自己水平的关键一步。</p>\n<h3>第六个维度是：技术</h3>\n<p data-pid=\"sdUsTp4q\">讲了那么多，总算讲回技术了。技术是以上所有内容的根本，如果对于自己的技术不自信，以上这些很难实现。那对于技术来说有那些是必须的，而哪些是可要可不要的呢？</p>\n<p data-pid=\"mcxOjMwn\">首先，有一些任何公司都肯定会问的东西：Supervised Learning和Unsupervised Learning中的常规算法。基本就是Dr. Andrew Ng在CS229里面讲的内容。一定要能够融会贯通，并且能够规避掉那种最最低级的错误，比如设计算法的时候出现feature leakage，在做数据处理的时候出现data leakage。像这种问题基本出现就说明平时经验不足了。</p>\n<p data-pid=\"aywYBvNp\">第二，必须熟知自己的领域：对于自己的领域必须了然于胸而且要有足够自信。对于自己的领域，那所有最新的进展和一些技术方向必须要跟上时代，设计算法时由简入深，不要一口气吃个胖子。要有条理，有自己的框架。</p>\n<p data-pid=\"Va2qDAE2\">第三，可有可无的是各个方向上的State of the art：对于自己领域外的技术方向可以有所涉猎和了解，并且多多学习，有时候即便对自己的平时工作也会有所启发。我是做RL的，但是平时学习的时候会接触很多推荐系统，CV，NLP，Operations Research，Information Theory相关的内容。这些内容有很多能够帮到我平时对于RL方向的思考。</p>\n<p data-pid=\"LrW-xyeE\">最后也是最重要的一点，必须要有自己的思维体系，并且能够自圆其说。自圆其说这边指的是有理论依据并且逻辑自洽。如果连自己都无法说服，那别人就更别说了。</p>\n<h3>最后总结</h3>\n<p data-pid=\"-7Rso7Zv\">说了那么多，很大程度上想说明一点，机器学习，不管是做研究还是做应用，很重要的一个点还是要有解决实际问题的能力，从公司的角度，更是一个机器学习工程师或者研究员的商业价值。在思考面试者机器学习水平的时候，很大程度上还是要从技术以外的角度去思考，可能能够帮助你思考到招聘的真正目的。我也是一个技术的忠实拥趸，但是一个领域的突破最后还是脱离不了人类的实际问题。所以以上更多是从这个角度出发去讲讲怎么看待机器学习水平这个问题。</p>\n<p data-pid=\"27JCwHU-\">希望这样一个不同的角度能够给你带来帮助。</p>\n<hr>\n<p data-pid=\"yUKNI9Du\">我在另一个类似的问题中做了一些对于深度学习水平的补充：</p>\n<a href=\"https://www.zhihu.com/question/41233373/answer/2433246169\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">如果你是面试官，你怎么去判断一个面试者的深度学习水平？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/billmatrix?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">朱哲清Bill</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/62482926/answer/2432399802?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">84 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/41233373?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果你是面试官，你怎么去判断一个面试者的深度学习水平？</a><br><a href=\"http://www.zhihu.com/question/23259302?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何准备机器学习工程师的面试 ？</a><br>\n","link":"http://www.zhihu.com/question/62482926/answer/2432399802?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"麋鹿测试可以说明什么，为什么很多跑车都没有 GK5 的麋鹿成绩好？","date":"2022-04-14 10:39:11","description":"\n<p data-pid=\"YcgG0HEY\">最近两年汽车媒体纷纷加入“麋鹿试验”大军，不管什么车，都搞来“麋鹿”一把，好像不会做“麋鹿试验”的媒体不是专业汽车媒体。这里引用 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/8e20d54576aff0cce7c07ebcf153b30c\" data-hash=\"8e20d54576aff0cce7c07ebcf153b30c\" data-hovercard=\"p$b$8e20d54576aff0cce7c07ebcf153b30c\">@王晓鹏PPGarage</a> 老师回答里的一句话：</p>\n<blockquote data-pid=\"9euXvjeP\">麋鹿测试随着它天生绝佳的观赏性，和短视频时代的，还有流量的免费化，大有超越0-100 ，100-0动力制动测试的，成为最为火热的第一的动态性能测试。</blockquote>\n<a href=\"https://www.zhihu.com/question/431269933/answer/1702811265\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-ac4ec9a17b10199665b7fc2c39fc3a3e_l.jpg?source=b1748391\" data-image-width=\"760\" data-image-height=\"685\" class=\"internal\">如何看待11月18日雪铁龙天逸C5斩获中国量产车麋鹿测试第一？</a><p data-pid=\"NzWoqSNB\">网友们也捧场，麋鹿试验排名成了键盘侠茶余饭后的谈资，好像麋鹿试验成绩不好，就不配谈操控。</p>\n<p data-pid=\"kor-7Nda\">作为底盘工程师，看到有些媒体不规范的试验方法，实在是不忍直视。决定开一篇帖子跟大家聊聊ISO标准下的“麋鹿试验”。</p>\n<p data-pid=\"JvwT91bS\"><b>一、麋鹿试验的初衷</b></p>\n<p data-pid=\"RaOLxzHx\">    顾名思义，这个试验肯定跟麋鹿有关系。故事的起源是冰天雪地的北欧地区，有一种世界上体型最大的鹿，叫驼鹿（Moose）。</p>\n<p data-pid=\"RFlqpP29\">    最大是多大？见下图。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8150c968cdb53dd7b0493705d2bc222a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"433\" data-watermark=\"watermark\" data-original-src=\"v2-8150c968cdb53dd7b0493705d2bc222a\" data-watermark-src=\"v2-bff14e0b05575dde54142fa884cbb4b1\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"weDdZEr0\">2米多高，比成年的牛还大。</p>\n<p data-pid=\"3B_1RYqt\">这种鹿经常来回穿梭与各种公路上，，造成了很多惨烈的交通事故，很多驾驶员和乘客因此丧生。</p>\n<p data-pid=\"QW0niy_F\">事故有多惨烈？见下图。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-52d5b85be0dbedf9b9e107d78b09ac42_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"219\" data-watermark=\"watermark\" data-original-src=\"v2-52d5b85be0dbedf9b9e107d78b09ac42\" data-watermark-src=\"v2-a7d8c26a8d7a73f5d4c98793213c10d3\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"-N5OWSNR\">一般的车肯定是扛不住这种庞然大物，气囊也没什么卵用。</p>\n<p data-pid=\"arkMqa6R\">惹不起还躲不起吗？于是北欧人开发了一种紧急避障试验（Moose Test）。</p>\n<p data-pid=\"Um3s8UPS\"><b>考验车辆通过紧急打方向避开障碍物，然后回到原来车道的能力</b>。</p>\n<p data-pid=\"0gafM1Lu\">后来，随着这个试验的推广，国际标准化组织制定了专门的标准ISO 3888</p>\n<p data-pid=\"SsBsxy5A\"><b>二、正规麋鹿试验测试方法</b></p>\n<p data-pid=\"O9fd7pkv\">     我们先来看一下ISO3888的紧急避障（麋鹿试验）试验标准原文</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e406d98db06d11ce889bbe38b12090d5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"973\" data-watermark=\"watermark\" data-original-src=\"v2-e406d98db06d11ce889bbe38b12090d5\" data-watermark-src=\"v2-585b30a06cd3e3b1127c93d318d99f22\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ZrDymlsd\">这个试验学名叫“紧急避障试验”，麋鹿试验是俗称。</p>\n<p data-pid=\"9zWMi9wL\">另外，既然是3888-2，那肯定有3888-1。没错，3888-1叫双移线试验（见下图），跟麋鹿试验有点像，后续再聊，本篇主要谈麋鹿试验。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5e05f7977299cc339c7fbd7cd4b73a97_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1167\" data-rawheight=\"229\" data-watermark=\"watermark\" data-original-src=\"v2-5e05f7977299cc339c7fbd7cd4b73a97\" data-watermark-src=\"v2-046ae4007ee46b45733dd260589913d9\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"B6wJU_mf\">废话少说，一起看标准：</p>\n<p data-pid=\"nNWyOS4J\">第一部分——<b>引言</b>（见下图）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1488f00eb467f0c4bcc8e40e863f446c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"441\" data-watermark=\"watermark\" data-original-src=\"v2-1488f00eb467f0c4bcc8e40e863f446c\" data-watermark-src=\"v2-cc763037e0b38094b23d6841011923e7\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XUCOfjww\">红圈部分翻译：鉴于本测试只是全部车辆操控性能的“<b>一小部分”</b>，测试的结果也只是对车辆综合动态表现中的“<b>一小部分”</b>具有意义。</p>\n<p data-pid=\"V4KSW309\">标准制定者特意反复强调了“<b>a small part</b>”，就是担心有人用麋鹿试验来评价车辆的操控性能，这也解答了文章标题的问题：</p>\n<p data-pid=\"CBDq8WIJ\"><b>麋鹿试验并不能表征车辆的全部操控性能！</b></p>\n<p data-pid=\"TFlbKqv1\"><b>仅仅是综合操控性能的一小部分，表征车辆紧急避障、保持行驶路线的能力。</b></p>\n<p data-pid=\"-kPbpwMF\">先略过中间的试验操作细节（细节放到后面说），先看一下标准的附件部分。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f25f33c5b0210ef2e391412fdf0cba3f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"816\" data-rawheight=\"937\" data-watermark=\"watermark\" data-original-src=\"v2-f25f33c5b0210ef2e391412fdf0cba3f\" data-watermark-src=\"v2-12559aa4d64ded3efc685fe2dc90a91d\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"0_M60b9k\">标准最后一部分，很明确的对麋鹿试验的限制条件做了说明：</p>\n<p data-pid=\"BiSKsjeY\"><b>1、考虑到驾驶员的影响，只建议进行主观评估，不建议进行车辆动力学客观数据的测试。</b></p>\n<p data-pid=\"KGWfnijc\"><b>2、多次的试验、不同的车辆轨迹会导致车辆通过速度存在很大的离散性。</b></p>\n<p data-pid=\"8F8KACDs\"><b>3、不允许基于车辆通过速度的排名和提出最低通过速度的要求。</b></p>\n<p data-pid=\"XgulNcwA\">所以，麋鹿试验标准制定的本意是对试验过程中<b>车辆状态、操纵便利性等车辆瞬态特性</b>进行<b>主观评估</b>，而不是现在媒体所做的测出一个最高速度然后进行排名。而且这个试验收到路面、天气、车辆状态、驾驶员状态等多个变量影响，试验结果的一致性很差，很难复现。</p>\n<p data-pid=\"4m0jXS12\"><b>三、媒体的“麋鹿测试”</b></p>\n<p data-pid=\"87Bgtu1p\">    其实网上很少有媒体能够完全按照ISO标准进行麋鹿测试，ISO标准甚至连桩桶尺寸都做了详细定义。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4fdd29ab332c434abdc1649a74892922_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-watermark=\"watermark\" data-original-src=\"v2-4fdd29ab332c434abdc1649a74892922\" data-watermark-src=\"v2-a4c69c9fb60a401e1c46092d89e8ee97\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"BWtVPv94\">  下面举例说明部分媒体测试的情况。</p>\n<p data-pid=\"BCvJtkpo\">   前段时间某媒体测出了一组83.9km/h的逆天成绩，超越一众超跑，排在排行榜第3位。（正如前面所说，排行榜本身就很扯），下面我们来看看细节。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66d87ba85d7130cbc5b7559a09d2ada_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"474\" data-watermark=\"watermark\" data-original-src=\"v2-e66d87ba85d7130cbc5b7559a09d2ada\" data-watermark-src=\"v2-e770b7c547a770950f8af63f29f62200\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qHHt1ewk\">巧合的是，他们刚好是沿着车道白线摆桩，给我们提供了便利。</p>\n<p data-pid=\"HrmFy8k5\">正常车道宽度是3米，从图里可以看出，第1和第3个区域宽度都是3米。第二个区域，没有车道线做参考，但根据车辆位置目测宽度也在3m左右。</p>\n<p data-pid=\"xrnjKD62\">OK,我们来看下标准是怎么规定的，见下图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0334fe8954bc0ae51ffbb5d113c6bb81_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"454\" data-watermark=\"watermark\" data-original-src=\"v2-0334fe8954bc0ae51ffbb5d113c6bb81\" data-watermark-src=\"v2-043d51674f17cc758dc54238c1712c30\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Ppn8mQbX\">标准规定，第一个区域宽度是1.1倍车宽+0.25m，也就是1.85*1.1+0.25=<b>2.285m</b></p>\n<p data-pid=\"K08HKUkz\"><b>所以，第一个区域就比标准宽了0.715m</b></p>\n<p data-pid=\"M58G9fP9\">第二个区域，标准规定是车宽+1m，是1.85+1=2.85m</p>\n<p data-pid=\"jnd08f_L\">目测第二个区域也是比标准宽的，由于没有参考，不能太武断。</p>\n<p data-pid=\"eifhmHxx\">第三个区域是按照标准宽度摆桩，没问题。</p>\n<p data-pid=\"IWAni7z7\">同样的道理，下面再看一组：</p>\n<p data-pid=\"IKbPEVYP\">以车道线作为参考，3个通过区域的宽度都远大于标准要求。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8f75247e832d96a2eed167b6b1a98512_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1168\" data-rawheight=\"828\" data-watermark=\"watermark\" data-original-src=\"v2-8f75247e832d96a2eed167b6b1a98512\" data-watermark-src=\"v2-cfa8775b8914cf263bbeed7991fcb02f\" data-private-watermark-src=\"\"></p>\n<hr>\n<p data-pid=\"9erYW4IX\">哪位老铁说了：</p>\n<p data-pid=\"xVsNxhMr\">你上面说的都是ISO标准，在国内有能耐你整国标啊！</p>\n<p data-pid=\"InN8eS3t\">好嘞，安排～</p>\n<p data-pid=\"9bZNu545\">国标<b>GB/T 40521.2-2021</b>，见下：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-20250ef3e4498513b86f04ddea9c3aca_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"686\" data-watermark=\"watermark\" data-original-src=\"v2-20250ef3e4498513b86f04ddea9c3aca\" data-watermark-src=\"v2-7a79097da413b52c1beec0958d6bd2f2\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UxzDj-y-\">看着是不是有点眼熟？没错，跟ISO一样，分两部分，第一部分：双移线，第二部分：紧急避障。</p>\n<p data-pid=\"yFZoC_eS\">这还没完，您往下看，是不是一模一样？</p>\n<p data-pid=\"UwDQlepf\">先看ISO：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6cc8da4b78ca0472fc1b90f20b0d5265_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"3468\" data-watermark=\"watermark\" data-original-src=\"v2-6cc8da4b78ca0472fc1b90f20b0d5265\" data-watermark-src=\"v2-877beb15fa7c34f108dedae59f337563\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9LnbQpwf\">再看国标：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c7149c4829fdbfabb1ff9446f06991e9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"785\" data-watermark=\"watermark\" data-original-src=\"v2-c7149c4829fdbfabb1ff9446f06991e9\" data-watermark-src=\"v2-940925cc0178505cf95443ba2d74e2fb\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qtg5LhjT\">是不是一样？why？？？</p>\n<p data-pid=\"9afsBMYo\">因为编制说明说了：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9f7489428b3ff5f28c20da6a68336127_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"523\" data-watermark=\"watermark\" data-original-src=\"v2-9f7489428b3ff5f28c20da6a68336127\" data-watermark-src=\"v2-e5289e41515e2c9bcbb9536c0eae5ad2\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9ff4656e0877969b9da8cb6800b7fa63_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"848\" data-rawheight=\"396\" data-watermark=\"watermark\" data-original-src=\"v2-9ff4656e0877969b9da8cb6800b7fa63\" data-watermark-src=\"v2-7aa4b41789af88df2097a81d126c085b\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"3e5zOY8S\"><b>四、总结</b></p>\n<p data-pid=\"0KAOTVX0\"><b>聊了这么多，希望大家对标准的麋鹿测试的试验背景、试验初衷、试验要求有了一定的了解。</b></p>\n<p data-pid=\"nvaYOkE6\"><b>不要被媒体博眼球的测试所误导。</b></p>\n<p data-pid=\"IBDd0GpF\"><b>麋鹿测试的表现并不能代表车辆的全部操控性能，单纯根据车速来排名也没有意义。</b></p>\n<p data-pid=\"muP9t6RG\"><b>一名合格的键盘车神，不仅要知其然，更要知其所以然。</b></p>\n<p data-pid=\"ancPHtlE\"><b>好了，没用的知识又增加了～</b></p>\n<p data-pid=\"uue9KyjI\"><b>创作不易，求赞同～</b></p>\n<a href=\"https://www.zhihu.com/question/36723632/answer/2257034920\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-fd668cb8fa7b9e7df8ba143840056827_l.jpg?source=b1748391\" data-image-width=\"828\" data-image-height=\"903\" class=\"internal\">汽车的底盘加强件（拉杆，顶把等）有用吗？</a><a href=\"https://zhuanlan.zhihu.com/p/485325922\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-3035e71d72722e27239335bad76d9455_qhd.jpg?source=b1748391\" data-image-width=\"828\" data-image-height=\"450\" class=\"internal\">冷静的饺子：凯迪拉克 LYRIQ 底盘架构干货解析</a><a href=\"https://zhuanlan.zhihu.com/p/362366928\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">冷静的饺子：如何成为骨灰级Bimmer？——宝马X1底盘解析</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/leng-jing-de-jiao-zi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">冷静的饺子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/315423961/answer/2403447083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/324641888?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一般人开超跑在山路上能跑过开普通跑车的车手吗？</a><br><a href=\"http://www.zhihu.com/question/423813979?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么超跑在纽北和赛道都跑不过性能车，超跑还敢卖那么贵？</a><br>\n","link":"http://www.zhihu.com/question/315423961/answer/2403447083?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"升级背后的取舍与不足：对 iPhone 13 Pro 镜头切换逻辑的一些抱怨","date":"2022-04-14 09:57:53","description":"在忍了小半年之后，我终于决定「小题大做」一下，站在一个对摄影有一些执念的用户的角度认真地抱怨一下 iPhone 13 Pro 相机镜头的切换逻辑。<a href=\"https://sspai.com/post/72614\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72614"},{"title":"家的风格 | 小改动累加起来，是居住舒适度的质变","date":"2022-04-14 09:30:00","description":"编者注：当你将客人们请进自己的屋子时，你想让他们看看你是怎样的人。通常而言，将你的一切告诉他们的不是你的长沙发；而是你奇怪的乡村挤奶凳，它就放在一张复古风格的人物画下面，画上是一个或许开心或许喝醉了的 ...<a href=\"https://sspai.com/post/72530\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72530"},{"title":"Matrix 专栏导读 02：关注自己的成长与进步","date":"2022-04-14 09:05:34","description":"各位读者大家好，欢迎来到 Matrix 专栏三月文章导读。<a href=\"https://sspai.com/post/72649\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72649"},{"title":"解包分析《艾尔登法环》中的BOSS AI设计（读指令篇）","date":"2022-04-14 07:10:18","description":"\n<p data-pid=\"aeSa_MuJ\">自从《艾尔登法环》发售以来，读指令这三个字一直都是玩家们争论的焦点之一。不少离谱的游戏实况表现和玩家群体中快速传播的动图让很多人对法环的一些BOSS行为充满了困惑。</p>\n<p data-pid=\"Lsk6grfm\">事实上，魂系列AI读指令早已不是秘密，《黑暗之魂1》在读、《血源诅咒》在读、《只狼》也在读。那么抛开大量新进魂系新人玩家涌入的因素，为什么《艾尔登法环》最为人所诟病呢？</p>\n<p data-pid=\"SC881KwV\">本文将通过解包，以AI文件、动画文件、各类参数等内容为基础，尝试分析法环中的读指令问题究竟出在哪。</p>\n<p data-pid=\"CubgUWm8\"><i>（PS：解包文件是工程逆向的结果，不代表FS社员工真的在用这种逆天脚本写AI）</i></p>\n<hr>\n<h2>那么，《艾尔登法环》真的读指令了吗？</h2>\n<h2><b>真读了。</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"EEvtYOzg\">随便打开一份AI的解包文件，我们就可以看到关于Interrupt的Function</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-687a9c15c1fbb2e7423b5de69d1d61ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic3.zhimg.com/v2-687a9c15c1fbb2e7423b5de69d1d61ea_r.jpg\"></figure><hr>\n<h2>废话不多说，先请出新人折磨王：熔炉骑士AI</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-81a23d9da82a3b0eebeba37327f208df_b.jpg\" data-size=\"normal\" data-rawwidth=\"1075\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"1075\" data-original=\"https://pic4.zhimg.com/v2-81a23d9da82a3b0eebeba37327f208df_r.jpg\"><figcaption>IsInterupt（）</figcaption></figure><p data-pid=\"nFc48r3A\">我们从头来看</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"> <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInterupt</span><span class=\"p\">(</span><span class=\"n\">INTERUPT_UseItem</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5039</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">false</span> <span class=\"kr\">then</span></code></pre></div>\n<p data-pid=\"B15hxvcY\">前边不需要太多的解释了，就是玩家使用道具。那这个Effect Id 5039是干什么的呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9bc2feabd8cc90fe04a8a922bdf4510c_b.jpg\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb\" width=\"717\" data-original=\"https://pic1.zhimg.com/v2-9bc2feabd8cc90fe04a8a922bdf4510c_r.jpg\"><figcaption>熔炉骑士动作</figcaption></figure><p data-pid=\"yLGfXWpf\">我们打开熔炉骑士的动画文件后能看到大部分动作中有存在\"AddSpEffect 5039”，这个东西其实是代表了熔炉骑士出招过程中自身AI不会去做打断的一个时长。</p>\n<p data-pid=\"UPDcvwDN\">比如上图中这个挥砍的动作总时长是2.5S，而“5039”占了前1.5S，也就是说从AI的角度上，熔炉骑士一定会挥完这1.5S的剑才能去做别的事情。这是非常合理的，总不能我在神龙摆尾摆一半，看到玩家在喝药，我就突然中断动作上去给他一刀吧？</p>\n<p data-pid=\"Y6FzfFka\">老贼显然没这么离谱。</p>\n<hr>\n<h3>这里就可以看出“药检”的触发条件了</h3>\n<ol>\n<li data-pid=\"RpmQ-crO\">读到玩家喝药的输入指令</li>\n<li data-pid=\"UCrGjXTT\">自身并没有在其他的招式硬直阶段</li>\n</ol>\n<p data-pid=\"iLyLniWX\"><b>如果这两个条件都满足，就准备“药检”了：</b></p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">f23_local2</span><span class=\"p\">,</span> <span class=\"n\">f23_local3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">else</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span></code></pre></div>\n<p data-pid=\"8-i1F4ew\">IsInsideTargetCustom实际上是在检测熔炉骑士和玩家间的位置关系，AI_DIR_TYPE一共有4种，分别是：</p>\n<blockquote data-pid=\"gJNwHCAP\">AI_DIR_TYPE_F：自身前方<br>AI_DIR_TYPE_B：自身后方<br>AI_DIR_TYPE_L：自身左侧<br>AI_DIR_TYPE_R：自身右侧</blockquote>\n<p data-pid=\"Y7DyOmkG\">后边的参数则是角度和距离。</p>\n<p data-pid=\"v9vb2GTM\">因此这里的前置条件就是【如果玩家在熔炉骑士前方120°、半径5米的扇形区域内】</p>\n<p data-pid=\"CcRc2qoG\">loacl4是Goal.Interrupt = function中定义的变量，就不贴了。它是一个1~100间的随机数，所以&lt;=80就是“有80%的几率”</p>\n<p data-pid=\"C8lJj5NI\">ClearSubGoal是清空熔炉骑士AI中当前的行为列表，也就是说本来熔炉骑士本来寻思着准备上天了但还没上，一看到你喝药，马上急眼不上了。</p>\n<p data-pid=\"T52CdJbj\">AddSubGoal就是给熔炉骑士AI的行为列表中添加行为，参数比较多我们只说重要的：</p>\n<blockquote data-pid=\"uQnRRy1V\">10：所添加行为的寿命<br>3000：动作Id<br>TARGET_ENE_0：目标<br>999：下一combo能否执行的目标距离判断</blockquote>\n<p data-pid=\"0vMMzBXg\"><i>（寿命和下一combo的距离判断其实是非常重要的参数，直接决定了AI的最终表现，但是和本篇内容无关，所以先不细说）</i></p>\n<p data-pid=\"pVria4Dj\">那动作Id：3000是啥？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bc09987dd46b57f15edcb7b54202ae27_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic1.zhimg.com/v2-bc09987dd46b57f15edcb7b54202ae27_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic4.zhimg.com/v2-bc09987dd46b57f15edcb7b54202ae27_r.jpg\"><figcaption>给你一刀</figcaption></figure><p data-pid=\"948NVeXJ\">归纳一下：</p>\n<blockquote data-pid=\"vT4iUqn4\">触发“药检”后，如果玩家在熔炉骑士前方120°、半径5米的扇形区域内，80%几率立刻给你一刀，20%几率什么都不做</blockquote>\n<hr>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">40</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3005</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">f23_local2</span><span class=\"p\">,</span> <span class=\"n\">f23_local3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3006</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">f23_local2</span><span class=\"p\">,</span> <span class=\"n\">f23_local3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">else</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ApproachTarget</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"mi\">9910</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span></code></pre></div>\n<p data-pid=\"USE9ohqi\">有了前边的经验，这里看起来就方便很多了：</p>\n<p data-pid=\"O5XYuUmu\">【当玩家位于熔炉骑士前方120°，5~10米间的扇环时】</p>\n<ul><li data-pid=\"0Lp8iMaO\">有40%的几率使用，3005，即冲刺挥砍</li></ul>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7c7f15da94a255bf75511793e011a57e_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic3.zhimg.com/v2-7c7f15da94a255bf75511793e011a57e_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic3.zhimg.com/v2-7c7f15da94a255bf75511793e011a57e_r.jpg\"><figcaption>冲刺挥砍</figcaption></figure><ul><li data-pid=\"sSTXPnUK\">有40%概率使用，3006，即咸鱼突刺</li></ul>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-87408495966ff90550fd47a98af7113b_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic3.zhimg.com/v2-87408495966ff90550fd47a98af7113b_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic4.zhimg.com/v2-87408495966ff90550fd47a98af7113b_r.jpg\"><figcaption>咸鱼突刺</figcaption></figure><ul><li data-pid=\"BmnGq9xg\">剩下20%的概率，GOAL_COMMON_ApproachTarget，会接近玩家。3则是熔炉骑士走路的最大速度系数，大概这样</li></ul>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a446827ae5008430ab3e1a7de297e4aa_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic1.zhimg.com/v2-a446827ae5008430ab3e1a7de297e4aa_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic3.zhimg.com/v2-a446827ae5008430ab3e1a7de297e4aa_r.jpg\"><figcaption>脑门上纹了个“急”</figcaption></figure><hr>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ApproachTarget</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"mi\">9910</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">else</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">end</span></code></pre></div>\n<p data-pid=\"pby9-i_c\">同理，玩家处于半径10~15范围的扇环时</p>\n<ul>\n<li data-pid=\"Jl9GTVNR\">80%几率以最大速度接近玩家</li>\n<li data-pid=\"-f45oE4b\">20%几率什么都不做</li>\n</ul>\n<p data-pid=\"XlGyQtv2\">至此，熔炉骑士的药检部分就全部结束了。</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-acdb05d68c0ebcc4be19684abfc2cada_b.jpg\" data-size=\"small\" data-rawwidth=\"952\" data-rawheight=\"599\" class=\"origin_image zh-lightbox-thumb\" width=\"952\" data-original=\"https://pic3.zhimg.com/v2-acdb05d68c0ebcc4be19684abfc2cada_r.jpg\"><figcaption>熔炉骑士读指令简单框图</figcaption></figure><h2>有两点需要说明一下：</h2>\n<p data-pid=\"JtVDcHDO\"><b>1.看起来熔炉骑士只有玩家在其前方时才会“药检”，那我站在他背后是不是就安全了？</b></p>\n<p data-pid=\"CEGG8NjZ\">这是理论存在但<b>实际不太存在</b>的情况，除了部分招式的硬直状态，熔炉骑士调整朝向面向玩家是较高优先级的事情，而且根据玩家的相对位置（侧前、后方）不同，转向速度还会大幅度加快。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8e9d8674937a6bae2a170c6c325199dc_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic3.zhimg.com/v2-8e9d8674937a6bae2a170c6c325199dc_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-8e9d8674937a6bae2a170c6c325199dc_r.jpg\"><figcaption>跟得上我的思必得吗？</figcaption></figure><p data-pid=\"VXWqoFIm\">更不用说，几乎所有招式中，都包含转向调整的窗口时长这种事了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bafeabf2e22c410d3bf8dab85433c991_b.jpg\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic2.zhimg.com/v2-bafeabf2e22c410d3bf8dab85433c991_r.jpg\"><figcaption>闪电五连转</figcaption></figure><p data-pid=\"P5kCBxOd\">就像这张图，是盾牌猛击的攻击行为，1.12S的时间内，熔炉骑士可以做到依次以30、240、120、240、360的转身速度调整5次朝向（只要他需要），所以转身180°给你一下都属于是牛刀小试了。</p>\n<p data-pid=\"hghxGnfF\">因此，在“药检”的设计上，只考虑前方的情况是非常合理的。</p>\n<p data-pid=\"y6r4OMSY\"><b>2.这是不是意味着我站在熔炉骑士15米开外喝药就绝对安全了？</b></p>\n<p data-pid=\"Y9CTFGtW\">理论上是的，至少熔炉骑士的“药检”AI部分不会对你的行为做出反馈了。但这不意味着他本身的行为模块不会想办法搞你。</p>\n<h2>结论：</h2>\n<p data-pid=\"VRifSYcQ\">熔炉骑士的“药检”AI，通过玩家距离的不同分成了近、中、远3种。其中近距离（5米）基本就是站在脸上了，很少有人会这样喝药；而远距离则需要玩家通过BOSS硬直、自身体力跑位去达成（15米），因此熔炉骑士也不会做出即刻的攻击行为。中距离是玩家与熔炉骑士战斗中最常触发的情况，所以FS的设计师给中距离预备了3种不同的反馈，透过概率来决定。</p>\n<p data-pid=\"EHOBVLnF\">这套设计我觉得本质上是没有问题的，针对玩家的特殊行为进行反馈；在常见情况中准备了多种行为，增加战斗多样性的同时也强化了对玩家反应维度、操作维度的考察，可圈可点。</p>\n<h3>而我认为可以优化的地方则是：</h3>\n<ul><li data-pid=\"EdySawAi\">“药检”模块直接清空原先的行为列表过于武断，必要性不强</li></ul>\n<p data-pid=\"0E5Lj0AU\">喝药作为玩家的特殊行为，可以给反馈，但不需要<b>每次立刻</b>都要给反馈，行为列表本身有“寿命”，结束后自身就会清掉，不需要强制清空执行药检（或者加个概率清空）</p>\n<ul><li data-pid=\"5BeqOE09\">近、远距离均有20%的行为留白，但中距离却没有，3种行为均是强压迫性，可以考虑20%留白</li></ul>\n<p data-pid=\"vcWpJ_NU\">熔炉骑士在idle状态下基本常驻举盾，玩家本就难以对其造成伤害，留白并不会降低难度；留白也并不代表原地待着不动，而是在小概率的前提下给予战斗节奏的变化</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInterupt</span><span class=\"p\">(</span><span class=\"n\">INTERUPT_Shoot</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5039</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">false</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mf\">7.5</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">14606</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3003</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">30</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3005</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">f23_local2</span><span class=\"p\">,</span> <span class=\"n\">f23_local3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">60</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3006</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">,</span> <span class=\"n\">f23_local2</span><span class=\"p\">,</span> <span class=\"n\">f23_local3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">else</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ApproachTarget</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"mi\">9910</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f23_local4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ApproachTarget</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"mi\">9910</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">else</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span></code></pre></div>\n<p data-pid=\"amjUl1qh\">像玩家Shoot类指令当然也是有读的，大同小异就不赘述了，感兴趣的可以自己看下。</p>\n<p data-pid=\"EDNQHtTP\">除此以外，熔炉骑士还会读很多其他形式的玩家输入，<b>整个读指令模块有1000行，约占其全部AI的1/3</b>。</p>\n<hr>\n<h2>说到读指令，我们不得不提的重量级人物自然少不了这位：</h2>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-61f400a9662a43880717129e6d2151e2_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"345\" data-thumbnail=\"https://pic3.zhimg.com/v2-61f400a9662a43880717129e6d2151e2_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-61f400a9662a43880717129e6d2151e2_r.jpg\"><figcaption>马戏团双雄</figcaption></figure><p data-pid=\"CreWUmiT\">直接来吧！</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ad9941c589462bff201fe1afbfac91a6_b.jpg\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https://pic3.zhimg.com/v2-ad9941c589462bff201fe1afbfac91a6_r.jpg\"><figcaption>这东西内部命名叫“OldLion”，老~狮~子~</figcaption></figure><p data-pid=\"tZYuCB-F\">说实话，打开文件前我还想会不会是BUG或者是逻辑卡死了什么的，没想到打开后发现有点离谱，特别是在看完熔炉骑士之后。</p>\n<p data-pid=\"FwOWzy4O\">老狮子的AI写法上明显和熔炉骑士习惯不同，99%是不同的设计师制作的，但原理一样，所以我们也不多解释了：</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInterupt</span><span class=\"p\">(</span><span class=\"n\">INTERUPT_Shoot</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5025</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">f36_local3</span> <span class=\"o\">&gt;</span> <span class=\"mi\">6</span> <span class=\"kr\">then</span>\n        <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n        <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTarget</span><span class=\"p\">(</span><span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_L</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local5</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local6</span> <span class=\"o\">=</span> <span class=\"mi\">6003</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local7</span> <span class=\"o\">=</span> <span class=\"n\">TARGET_ENE_0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local8</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local9</span> <span class=\"o\">=</span> <span class=\"n\">AI_DIR_TYPE_R</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local10</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_SpinStep</span><span class=\"p\">,</span> <span class=\"n\">f36_local5</span><span class=\"p\">,</span> <span class=\"n\">f36_local6</span><span class=\"p\">,</span> <span class=\"n\">f36_local7</span><span class=\"p\">,</span> <span class=\"n\">f36_local8</span><span class=\"p\">,</span> <span class=\"n\">f36_local9</span><span class=\"p\">,</span> <span class=\"n\">f36_local10</span><span class=\"p\">)</span></code></pre></div>\n<p data-pid=\"MFs2oKqh\">老狮子执行躲避弹道的行为执行有3个前置条件：</p>\n<ol>\n<li data-pid=\"yeNnlvC5\">检测到玩家输入弹道操作（投掷物、法术、弓箭等）</li>\n<li data-pid=\"-z99UQwe\">狮子自己身上有5025的状态（可以看出，这里逻辑和熔炉骑士是反的，狮子在少数过渡动作上添加了5025，而在处于这些状态下时，去执行闪避；最终结果还是不打断常规出招）</li>\n<li data-pid=\"1cMOsCzW\">与玩家间的直线距离大于6</li>\n</ol>\n<p data-pid=\"2w_2itob\">条件均满足后分为两种情况</p>\n<ul><li data-pid=\"TrcBeSkK\">IsInsideTarget检测了与玩家间的位置关系，玩家位于其左侧180°扇形时，执行6003行为</li></ul>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b9eae48bd5baebe07ffd5a0c8cace4aa_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"612\" data-thumbnail=\"https://pic3.zhimg.com/v2-b9eae48bd5baebe07ffd5a0c8cace4aa_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-b9eae48bd5baebe07ffd5a0c8cace4aa_r.jpg\"><figcaption>简单右跳</figcaption></figure><div class=\"highlight\"><pre><code class=\"language-lua\"> <span class=\"kr\">else</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local5</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local6</span> <span class=\"o\">=</span> <span class=\"mi\">6002</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local7</span> <span class=\"o\">=</span> <span class=\"n\">TARGET_ENE_0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local8</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local9</span> <span class=\"o\">=</span> <span class=\"n\">AI_DIR_TYPE_L</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f36_local10</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_SpinStep</span><span class=\"p\">,</span> <span class=\"n\">f36_local5</span><span class=\"p\">,</span> <span class=\"n\">f36_local6</span><span class=\"p\">,</span> <span class=\"n\">f36_local7</span><span class=\"p\">,</span> <span class=\"n\">f36_local8</span><span class=\"p\">,</span> <span class=\"n\">f36_local9</span><span class=\"p\">,</span> <span class=\"n\">f36_local10</span><span class=\"p\">)</span>\n        <span class=\"kr\">end</span>\n        <span class=\"kr\">return</span> <span class=\"kc\">true</span></code></pre></div>\n<p data-pid=\"jgLPjTB4\">反之，自然就是玩家位于其右侧180°扇形时，执行6002行为</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-feaeb68f59d4fe06dbc5e1bee6e6ff1d_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"612\" data-thumbnail=\"https://pic3.zhimg.com/v2-feaeb68f59d4fe06dbc5e1bee6e6ff1d_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-feaeb68f59d4fe06dbc5e1bee6e6ff1d_r.jpg\"><figcaption>简单左跳</figcaption></figure><p data-pid=\"LRtV6ML8\">没了。</p>\n<h2>这里有几个问题，都很严重：</h2>\n<p data-pid=\"XH-6sfDr\"><b>1.单纯将与玩家的相对方位分成左右两个扇形基本没有实际意义</b></p>\n<p data-pid=\"jJshE17X\">由于魂系游戏中怪物基本都会随时调整方位来保证时刻朝向目标，因此在玩家不动的情况下，这个判断结果只取决于横跳动作后的朝向调整中的细微误差。最终导致的就是上面马戏团双雄的图里，左右横跳看起来完全是随机的。给人一种只写了50%左跳、50%右跳的逻辑，廉价感很强</p>\n<p data-pid=\"ZUc_5Tci\"><b>2.没有设置读指令的距离上限</b></p>\n<p data-pid=\"vPhjwUMF\">老狮子这里躲避的判断前提只有距离大于6，却没有上限，熔炉骑士的AI中上限是15。如果我没记错的话，15应该是大部分法术技能打不到的距离了，卡这个距离是非常合理的设计。大于这个距离，即便你放法术，我也只会常规逼近而不会<b>虚空闪避</b>。</p>\n<p data-pid=\"QmvbH8ZW\"><b>3.完全没有做SpaceCheck</b></p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">if</span> <span class=\"n\">f40_local0</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span> <span class=\"ow\">and</span> <span class=\"n\">SpaceCheck</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n        <span class=\"n\">f40_local10</span> <span class=\"o\">=</span> <span class=\"n\">f40_local13</span>\n    <span class=\"kr\">elseif</span> <span class=\"n\">SpaceCheck</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n        <span class=\"kr\">if</span> <span class=\"n\">SpaceCheck</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">f40_local1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">50</span> <span class=\"kr\">then</span>\n                <span class=\"n\">f40_local10</span> <span class=\"o\">=</span> <span class=\"n\">f40_local11</span>\n            <span class=\"kr\">else</span>\n                <span class=\"n\">f40_local10</span> <span class=\"o\">=</span> <span class=\"n\">f40_local12</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">else</span>\n            <span class=\"n\">f40_local10</span> <span class=\"o\">=</span> <span class=\"n\">f40_local12</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">elseif</span> <span class=\"n\">SpaceCheck</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"kr\">then</span>\n        <span class=\"n\">f40_local10</span> <span class=\"o\">=</span> <span class=\"n\">f40_local12</span>\n    <span class=\"kr\">else</span></code></pre></div>\n<p data-pid=\"H1HWjt-l\">这是我从《艾尔登法环》中红灵NPC的AI里截取的，可以看到里边大量使用了SpaceCheck进行判断，这其实是在判断自身周围一定范围内有没有障碍物。《只狼》中的大部分NPC会在执行侧闪行为前进行类似的判断，这非常合理：右边有障碍物，你还非得往右边闪吗？而这老狮子，从图上可以看出，右边已经是墙了，自己还在往墙里怼，带给玩家的表现就很差，直白来说就是显得傻。</p>\n<p data-pid=\"VtQZfDCx\"><b>4.没有提供多种反馈形式、没有留白</b></p>\n<p data-pid=\"ozivfLGR\">熔炉骑士的反馈根据距离远近分为了3类，每种距离内又分别分成了2、3、2小类。老狮子的反馈有且仅有一种（左右横跳不算两种），并且在没有检测距离上限的情况下，没有留白就意味着<b>逢Shoot必跳</b>，势必是要被批判一番的。</p>\n<p data-pid=\"L7eSq9p9\">实际上，老狮子的现有资源就已经可以支持多种反馈形式：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7cf8248ee0e4a4d0ce8efe9d2e241e7b_b.jpg\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"612\" data-thumbnail=\"https://pica.zhimg.com/v2-7cf8248ee0e4a4d0ce8efe9d2e241e7b_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-7cf8248ee0e4a4d0ce8efe9d2e241e7b_r.jpg\"><figcaption>强扑</figcaption></figure><p data-pid=\"zI8-kHhQ\">如果玩家在6~10米范围内发射投射物，我是不是可以给予20%的概率前扑攻击，增加压迫性？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dcbd4658729012aa6876e577696bf1c7_b.jpg\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"612\" data-thumbnail=\"https://pic2.zhimg.com/v2-dcbd4658729012aa6876e577696bf1c7_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-dcbd4658729012aa6876e577696bf1c7_r.jpg\"><figcaption>后跳</figcaption></figure><p data-pid=\"3qLXss_P\">是不是可以把后跳加入躲闪序列中？横跳下怪物与玩家距离不变，后跳改变了距离，就会有新的AI模块被激活，产生变数。</p>\n<p data-pid=\"kAK15xsN\">最后就是留白，不一定每次玩家shoot都一定要有反馈。</p>\n<p data-pid=\"lTAwuky8\"><b>这样一来，可能谈不上多好，起码不会被送到马戏团里了。</b></p>\n<hr>\n<p data-pid=\"j2ElQ1dU\">结合熔炉骑士来看，老狮子的设计师我感觉是资历较浅亦或是新人/应届生：</p>\n<ul>\n<li data-pid=\"njI1jSQr\">老狮子的AI里，函数中所使用的参数都使用了已经定义好默认值的变量，而熔炉骑士的制作者直接在函数的传参里填了值。虽然前者很规范，但做多了在保证没问题的前提下，____________吧？</li>\n<li data-pid=\"wu0diIZe\">一般来说，操作不可打断的窗口条件时，标签肯定是【不可打断】，而不是反过来把可以打断的地方全都贴上能打断的标签。</li>\n<li data-pid=\"NDUCUPXd\">同样执行玩家方位检测时，熔炉骑士的制作者使用了IsInsideTargetCustom，而老狮子的制作者使用的是IsInsideTarget，它们功能基本一致，区别是前者拥有额外的两个参数输入，用来判断玩家的距离。简单来说就是该严谨的地方严谨了。</li>\n</ul>\n<h2>总结：</h2>\n<p data-pid=\"WJchUCug\">正如文章开头所说，读指令在某些使用情景下是完全没有问题的，它不仅可以动态的改变战斗的节奏，还可以让玩家更好的感知到自己行为所产生的反馈，显得AI更加“聪明”。这也是该设计方向能够在FS的游戏当中传承至今的重要原因。《黑暗之魂1》里A大就已经能对玩家的远程攻击产生3种不同形式的反馈了，《只狼》里人人都知道“药检”的存在，却很少有人去喷它是不合理的。而《艾尔登法环》中被玩家截出的种种啼笑皆非的读指令事件，除了少数是因为BUG，绝大部分还是因为实际制作者层面出现了问题：</p>\n<blockquote data-pid=\"BLDJk1a0\">至少在读指令这一块，有些怪物的AI甚至不如《黑暗之魂1》考虑的周到</blockquote>\n<p data-pid=\"Cat1WLei\">这并不是老狮子制作者的问题，我更倾向于认为由于制作周期、开放世界制作量指数级爆炸等因素，导致资深员工疲于生产内容，不能去做太细致的指导，也没有时间去review这种“细枝末节”的东西。</p>\n<p data-pid=\"NZMfHCeo\">最后，希望小高拿了今年的GOTY，多招点人，让我早点玩到DLC和新作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b1fb8b44f6500d7044237b4be4040978_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"426\" data-original=\"https://pic1.zhimg.com/v2-b1fb8b44f6500d7044237b4be4040978_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-wei-dong-84-40?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">对面会更惨</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/492629716?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"相同轴距的两厢车和三厢车哪个储物空间更大？","date":"2022-04-14 02:38:21","description":"\n<p data-pid=\"VTotEIZJ\">两厢和三厢，后轴之前的部分基本都是一样的，储物空间也不会有太大变化。<br>主要是行李箱那一块的变数。</p>\n<p data-pid=\"a7tfrRrS\">另外，说是两厢三厢之间的差别，但是还是得把对比范围划一下。<br>由于Wagon或者猎装版也可以归为两厢，但这种两厢其实把第三厢加大得来的。<br>理论上肯定比三厢大的，所以不做讨论。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-96f11f0e330ecb160744f0e0d5ba1ca7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"1000\" data-watermark=\"watermark\" data-original-src=\"v2-96f11f0e330ecb160744f0e0d5ba1ca7\" data-watermark-src=\"v2-394307fe89e68b3d7761713e8df30b32\" data-private-watermark-src=\"v2-dcaf9f6ac35765c0b090e9d19fba2c25\"></p>\n<p><br></p>\n<p data-pid=\"rK-33q4l\"><b>我们就看看相对还有那么点悬念的，Hatch Back（两厢）与Sedan（三厢）之间的厮杀了。</b></p>\n<p data-pid=\"0rVVHfcJ\">如果在这个限定范围内的话，先放结论：<br><b>物理空间上是三厢车更大，但实际使用时有可能两厢车更好用，最后要看刚需是啥。</b></p>\n<p data-pid=\"nsKEq1cB\">分为4部分来掰扯：</p>\n<ul>\n<li data-pid=\"KmUcYDHb\">1.物理空间：<br>没法变魔术</li>\n<li data-pid=\"hIgW--CN\">2.空间布局形式：<br>户型方正很重要</li>\n<li data-pid=\"ReUA1UDy\">3.刚需是啥：<br>要看菜下碟</li>\n<li data-pid=\"yfWwl2WF\">4.其实还有一种投机取巧的车型</li>\n</ul>\n<p data-pid=\"DvbfZ-Eo\">一个一个说啊</p>\n<h2>1.先看变不了魔法的物理空间</h2>\n<p data-pid=\"iLfq3juZ\">其实看绝对物理空间的话，查行李箱的公告容积值就是了，基本不会有争议。<br>我们拿市面上比较常见的几款同时有两厢三厢同时在售的车型对比一下就知道了。<br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8d27ebbab75f25be6d7be8e61d1e11c4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"435\" data-rawheight=\"108\" data-watermark=\"watermark\" data-original-src=\"v2-8d27ebbab75f25be6d7be8e61d1e11c4\" data-watermark-src=\"v2-7fc0e1d8b69ffd660b427d8d04e08574\" data-private-watermark-src=\"v2-e1bbf72de127045f599a6ea8e0f66792\"></p>\n<p><br></p>\n<p data-pid=\"QfisQeCq\">由表中可以看到，基本都是三厢版会有1.1~1.5倍左右物理空间的优势。<br>物理没有魔法，<b>这Part很简单，没啥好说的，三厢车胜利。</b></p>\n<h2>2.再看看不同空间布局储物能力区别</h2>\n<p data-pid=\"OujlNF7Q\">但是来到实际使用的中，是不是真的就是三厢车更能装了呢。</p>\n<p data-pid=\"ZHoweaDs\">不知道大家有没有买房租房的经历？<br>在选房型的时候，都会跟偏向于选择更为方正的房型。相对应的方正户型的价格也会高出不少。<br><b>因为更方正的户型能够有更大的空间使用率和更多的可能。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f89913ab376925632be5823a038f938_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"LlhSHZ6v\">放到车的行李箱空间上来说，也有一点类似的说法，也应该是行李箱越方正越好用。</p>\n<p data-pid=\"FNOvrLJn\"><i>对于三厢车来说</i>：方正其实也是挺方正的，由于垂向基本上都是用隔板与后挡风玻璃隔开的，是一个扁扁的长方体。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cfee7c2259c153679bf935c7a5b080d4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"462\" data-watermark=\"watermark\" data-original-src=\"v2-cfee7c2259c153679bf935c7a5b080d4\" data-watermark-src=\"v2-faadc0acacd5a6e9f1af36cc186d8e10\" data-private-watermark-src=\"v2-8d579632b06874a3c900954952abfc51\"></p>\n<p><br></p>\n<p data-pid=\"ywhSQkUB\"><i>对于两厢车来说</i>：虽然纵向的空间小了很多，但是基本上都是与后挡风玻璃贯通的，就形成了一个小一点但是更接近正方体的空间。<b>对的，你猜到了，更方正一点。</b></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-6c4e6197f41e727a9958e2fe0931b019_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"453\" data-watermark=\"watermark\" data-original-src=\"v2-6c4e6197f41e727a9958e2fe0931b019\" data-watermark-src=\"v2-110f6e089884463d4954691f41bb764f\" data-private-watermark-src=\"v2-e55feed3f663720e3871e70fc2928637\"></p>\n<p><br></p>\n<p data-pid=\"iY0Ongw_\">当我们拿一个120方但是略不方正的户型与100方但是更方正的户型对比的时候，应该也会有拿不定逐主意的时候吧<br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-016b793f830276e4393bc54d245a5f6a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"514\" data-watermark=\"watermark\" data-original-src=\"v2-016b793f830276e4393bc54d245a5f6a\" data-watermark-src=\"v2-30587c9df617502e07524e26b4600ef0\" data-private-watermark-src=\"v2-623ff77daed3b3bb6d32bc17218e890b\"></p>\n<p><br></p>\n<p data-pid=\"j_S0NyfQ\">在车上也一样，由于两厢车用尽了后排座椅后方所有的空间。<br><b>即使在空间相对较小的情况下，也有可能在某些场景下会比三厢车更具装载的灵活性。</b><br>比如说想放比较接近正方体的物体的时候。</p>\n<h2>3.不过，还得看储物的高频刚需到底是啥</h2>\n<p data-pid=\"GMYnoWG7\">第二部分说了<br><i>三厢车</i>：绝对物理空间大，如果你在后备箱放的更多的是<b>不那么大而且正正方方</b>的物件，那选三厢车没错。</p>\n<p data-pid=\"tLdHMXmj\"><i>两厢车</i>：如果你比较多的放<b>大而且正正方方</b>的物件，那么反而两厢车会更合适点。而且假设你要放一台自行车或者一台卡丁车进去或做放长条形的物件进去，两厢车还可以把第二排座椅放倒，<b>来解锁两厢车最大的储物空间。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-987fc549099f4896eb28cb859dc3925b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"534\" data-watermark=\"watermark\" data-original-src=\"v2-987fc549099f4896eb28cb859dc3925b\" data-watermark-src=\"v2-e52b155d50d6f79e930027280db1a0c5\" data-private-watermark-src=\"v2-ae4a68f08ecc8a10ba3fac0afc26fd33\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"FLlafA6N\">三厢车我就很少见到能够把第二排座椅放倒的。<br>但是见过那种后排中央扶手可以有个小窗能够与行李箱贯通的。这也一定程度上解锁了三厢车的长条形物件储物能力。</p>\n<p data-pid=\"tJvISMF1\">所以，情况就是这么个情况：</p>\n<blockquote data-pid=\"xTw7_aqn\">三厢车的绝对空间下限更高，但是灵活性和上限低，而两厢车刚好相反。<br>\n</blockquote>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-80fc5f40a2aa8fab0cb8c7ccf4bc7bfe_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"551\" data-watermark=\"watermark\" data-original-src=\"v2-80fc5f40a2aa8fab0cb8c7ccf4bc7bfe\" data-watermark-src=\"v2-4cd51839934bfa1313288b0a9b784840\" data-private-watermark-src=\"v2-721ffbc367f6595d31805b0801938066\"></p>\n<p><br></p>\n<p data-pid=\"heWPiCz2\">大家结合自己的实际使用场景来可取所需咯。</p>\n<h2>4.最后，其实，在Hatch Back与Sedan之间还有衍生变种</h2>\n<p data-pid=\"wbNGmNqp\">那就是用Sedan之躯，行Hatch Back之实。<br>典型的车型有斯柯达/MG 6。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e08f281c50761d9865aad1b33b36dc3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2e08f281c50761d9865aad1b33b36dc3\" data-watermark-src=\"v2-3f687a7f9d673e7a6b279cf4afba1de6\" data-private-watermark-src=\"v2-f5a44cdec9017f667e6b4ed2616782db\"></p>\n<p><br></p>\n<p data-pid=\"QiJlGQz6\">这类车的车体是Sedan的，但是后排与行李箱之间没有隔断。<br>基本上行李箱门与后挡风玻璃都是一体的。</p>\n<p data-pid=\"fHdrZ7Yv\"><b>绝对的物理空间下限提升了，灵活性提升了，上限也提升了。</b><br>这应该是能够把绝对物理空间发挥到最大的一个变种。</p>\n<p data-pid=\"GmMMkRRa\">不过那个后排噪声会基本和两厢车是一个水平就是了。</p>\n<p data-pid=\"LsRqlRur\">好了，以上就是我对两厢三厢车储物能力的理解。<br>总结来说如下如下图：<br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6a79595c36e61e32b8ddfeca09d06da0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"585\" data-watermark=\"watermark\" data-original-src=\"v2-6a79595c36e61e32b8ddfeca09d06da0\" data-watermark-src=\"v2-15ea62c2887cf568115abc482eaa29fb\" data-private-watermark-src=\"v2-218c01b0ce0fb66cf1a3029ae57033a1\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"77WqG9Pw\"><i>两点申明</i>：<br>1.个人看法，不一定对，很有可能错，仅供参考。<br>2.图片来自网络，侵删</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lin-jian-chao-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小林</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/525007784/answer/2438045418?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/525007966?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">相同轴距的 SUV 和旅行车哪个车内空间更大？</a><br><a href=\"http://www.zhihu.com/question/452824242?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">未来的汽车是否可以通过替换车身，变换成旅行车、三厢车、敞篷车和皮卡四种全能型车型汽车？</a><br>\n","link":"http://www.zhihu.com/question/525007784/answer/2438045418?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"国内有哪些流传很广的动漫谣言?","date":"2022-04-13 11:25:58","description":"\n<h2>（一）、《北斗神拳》：“健次郎”的老家在上海崇明岛</h2>\n<p data-pid=\"X5XVO3oh\"><b>出处</b>：盗版漫画；引进动画；微博</p>\n<p data-pid=\"zQYDjvLW\"><b>可信度</b>：真假杂糅，但总体上假</p>\n<p data-pid=\"vN3SFANj\"><b>简单分析</b>：</p>\n<p data-pid=\"KNEBNVPP\">这个谣言分成两部分：</p>\n<p data-pid=\"Fk5JPIcu\"><b>（1）《北斗神拳》主人公的名字</b></p>\n<p data-pid=\"htS4aPpl\">ケンシロウ被翻译成“健次郎”是经典错误翻译（<i>正确翻译：拳四郎</i>），但因为流传度太高所以以讹传讹。</p>\n<p data-pid=\"ZJIKxUr8\">和 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/624b2d94e3345c7fe6d36986b611bb3a\" data-hash=\"624b2d94e3345c7fe6d36986b611bb3a\" data-hovercard=\"p$b$624b2d94e3345c7fe6d36986b611bb3a\">@FFF团长</a> 、 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/69cf64deb71406b7aa73712b2f56ec76\" data-hash=\"69cf64deb71406b7aa73712b2f56ec76\" data-hovercard=\"p$b$69cf64deb71406b7aa73712b2f56ec76\">@六条御息所</a> 以及 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e6fa6fae41d56969578ef89e6b8f0f45\" data-hash=\"e6fa6fae41d56969578ef89e6b8f0f45\" data-hovercard=\"p$b$e6fa6fae41d56969578ef89e6b8f0f45\">@坛子鸦</a> 等朋友考证过这个错误翻译到底是起源于哪里。</p>\n<p data-pid=\"63PtZLPG\">据考证，1985年出版的宁夏版盗版漫画就采用了这个错误译名，而动画播出应该在那之后。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b8176b844db9c045ca0ecc9635cbd8bb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"1600\" data-watermark=\"original\" data-original-src=\"v2-b8176b844db9c045ca0ecc9635cbd8bb\" data-watermark-src=\"v2-ff69e4dd623b9527584c5d1a9c2d74cb\" data-private-watermark-src=\"v2-9dff5759ebef534a870f1cd252c8f7d9\"></p>\n<p data-pid=\"bkL6IeM7\">也就是说动画版本大概是沿用了盗版漫画的错误翻译“健次郎”。</p>\n<p data-pid=\"j_RxaDH3\">至于说盗版漫画的错误翻译是哪里来的，有两种可能：</p>\n<p data-pid=\"rVey9IPF\">1 大陆学港台，港台学日本。翻译错误这种事情，甩锅给港台同胞总是一个好办法（手动狗头）。</p>\n<p data-pid=\"JF1dzlhP\">2 早期盗版商翻译水平不足，导致错翻。</p>\n<p data-pid=\"nibJgTMR\">至于具体是哪种就暂时无从考证了。</p>\n<p data-pid=\"P7rmVqrA\">从“健次郎”这个错误译名还延伸出另一个无厘头的谣言：<b>“健次郎”的原型是日本演员高仓健，因为两个人名字都带“健”</b>。</p>\n<p data-pid=\"0WbaVCkk\">这个天真且自以为是的谣言带有鲜明的前互联网时代的特征，着实是不值一驳。</p>\n<p data-pid=\"E7p78UWS\">根据原哲夫和武论尊两个人的访谈，拳四郎的原型包括但不限于梅尔吉布森、李小龙、松田优作。和高仓健没有半毛钱关系。</p>\n<p data-pid=\"ksYClBes\"><b>（2）拳四郎是上海人</b></p>\n<p data-pid=\"XqRKUReJ\">在这之前已经有人写过很专业的考据了：<a href=\"https://zhuanlan.zhihu.com/p/30187751\" class=\"internal\">健次郎真是上海人？《北斗神拳》与中国的不解之缘 - 知乎 (zhihu.com)</a></p>\n<p data-pid=\"QArQOD3o\">简而言之就是营销号拿了个《北斗神拳》前传《苍天之拳》的动画截图就妄想搞个大新闻，殊不知此“拳”非彼“拳”。</p>\n<p><img src=\"https://pica.zhimg.com/v2-63a6137e72863cb77ffc58c3afe8c03a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-63a6137e72863cb77ffc58c3afe8c03a\" data-watermark-src=\"v2-40debc10655be21eb4c55a469777e76a\" data-private-watermark-src=\"v2-67486a070f01aa19b2c7de1d178dbdb7\"></p>\n<p data-pid=\"s6WrMkT2\">《苍天之拳》的故事发生在《北斗神拳》之前，主人公霞拳志郎是拳四郎的师伯（师父的兄长），故事的舞台发生在清末民初的上海。</p>\n<p data-pid=\"lVG-nAMu\">因为霞拳志郎在上海行侠仗义，所以设定上他会讲汉语能写中文，所以才会出现这封信。但这封用上海话写就的信完全是动画组原创的，与原作漫画没有太大关系。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59793c7d46b62456f2460501cd91a26d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"393\" data-watermark=\"original\" data-original-src=\"v2-59793c7d46b62456f2460501cd91a26d\" data-watermark-src=\"v2-30b73db1bb2898cb86079f5da316d3a6\" data-private-watermark-src=\"v2-4edd447fc3b4ab2d9beeccc2feb60aa1\"></p>\n<p data-pid=\"4C6cleDo\">霞拳志郎的妈妈是中国人，也因此继承了北斗宗家拳的血统。</p>\n<p data-pid=\"Mhl7iP4p\">再说拳四郎。</p>\n<p data-pid=\"pw4MLIMD\">拳四郎和霞拳志郎没有任何血缘关系，只是师从一脉北斗神拳而已。同时，《苍天之拳》里描绘了拳四郎出生的镜头，但并不是在上海，而是在某个寺庙里。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ea8386430f80cfc1738601346c49fd34_720w.jpg?source=b1748391?rss\" data-caption=\"经典吃书，这个情节导致《北斗神拳》与《苍天之拳》出现了很多矛盾\" data-size=\"normal\" data-rawwidth=\"898\" data-rawheight=\"850\" data-watermark=\"original\" data-original-src=\"v2-ea8386430f80cfc1738601346c49fd34\" data-watermark-src=\"v2-da890872f29e93e0d3d343dd9d31a085\" data-private-watermark-src=\"v2-1d6bc4440193e094ff0cbbe88f2aa8a8\"></p>\n<p data-pid=\"C7Qo1Adk\">综上，没有任何证据可以指明拳四郎出身上海/有上海血统/来自中国。</p>\n<p data-pid=\"bP_QZNCH\">我们唯一知道的就是拳四郎出身于“修罗之国”。</p>\n<p data-pid=\"H34QmX4S\">而这个“修罗之国”究竟位于哪里也是众说纷纭（大陆说、台湾说、福冈说、冲绳说等等），考虑到《北斗神拳》的剧本都是武论尊拍脑门现编的，要有个明确结论实在是太难了。</p>\n<p data-pid=\"UbEa4xCp\">所以这就是一笔糊涂账，说不清楚的。</p>\n<p data-pid=\"OJ7LDr8L\">至于网上流传的“上海人”乃至“崇明岛人”云云，都是纯属图一乐的说法，信不信全凭你自己。</p>\n<h2>（二）、《拳王创世纪》：车田正美画美男是编辑部安排的，为了和《少年sunday》对抗</h2>\n<p data-pid=\"_waj_VvV\"><b>出处</b>：动漫贩</p>\n<p data-pid=\"2VzyYA3d\"><b>可信度</b>：存疑，偏向于假</p>\n<p data-pid=\"amzNewvz\"><b>简单分析</b>：</p>\n<p data-pid=\"gzC0CtEt\">这个说法主要有两个来源，一个是2005年动漫贩的专题（感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/624b2d94e3345c7fe6d36986b611bb3a\" data-hash=\"624b2d94e3345c7fe6d36986b611bb3a\" data-hovercard=\"p$b$624b2d94e3345c7fe6d36986b611bb3a\">@FFF团长</a> 提供原图）；另一个是依据该专题写就的天涯论坛的贴子（后来被转载过无数次）：<a href=\"http://link.zhihu.com/?target=http%3A//bbs.tianya.cn/post-funinfo-2725149-1.shtml\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">（已完结）来八一八日本JUMP漫画的发展历史，顺便八一八三大漫画周刊之间的博弈_娱乐八卦_论坛_天涯社区 (tianya.cn)</a></p>\n<p><img src=\"https://pic1.zhimg.com/v2-55494340aa057cd6d4a2354211a7bfea_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1920\" data-watermark=\"original\" data-original-src=\"v2-55494340aa057cd6d4a2354211a7bfea\" data-watermark-src=\"v2-2778fbadddf7fb91a56f273edca09bb8\" data-private-watermark-src=\"v2-fa5a6634cf0c8656539825aa5a7c3499\"></p>\n<p data-pid=\"svhbAld6\">但是这个事情我没有找到任何出处，拜托车田正美专家 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/c521a08bb1cceae6b365f26481deec81\" data-hash=\"c521a08bb1cceae6b365f26481deec81\" data-hovercard=\"p$b$c521a08bb1cceae6b365f26481deec81\">@千翻儿娃</a> 查证也没有找到任何出处。</p>\n<p data-pid=\"MrOjbp8D\">拜托 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/8b68876001197b3b9cd605b20814616f\" data-hash=\"8b68876001197b3b9cd605b20814616f\" data-hovercard=\"p$b$8b68876001197b3b9cd605b20814616f\">@张亮</a> 老板问了下当时主笔的编辑，但是因为年代过于久远所以也没有得到明确的信息来源。</p>\n<p data-pid=\"KLN8Dq6n\">据个人经验，这个事情有以下几处疑点：</p>\n<p data-pid=\"CEBqCB7u\">1 “<b>《少年jump》编辑部命令</b>车田正美”</p>\n<p data-pid=\"mPolOU22\">《拳王创世纪》（也就是《铃声响起》）连载时正值西村繁男时代。</p>\n<p data-pid=\"dKQ7TIpv\">根据西村繁男的自传《再见了，我的青春少年jump》中的记载，当年面对《少年sunday》的恋爱喜剧攻势，他们个人持反对态度，抗拒恋爱喜剧作品出现在杂志上。</p>\n<p data-pid=\"HRy_VeX9\">他的一贯主张是坚持热血硬汉路线，为何会做出这样的“命令”呢？</p>\n<p data-pid=\"Oo9LROqr\">这似乎并不符合他的作风。</p>\n<p data-pid=\"H-ENSHHA\">2 “《少年jump》编辑部命令<b>车田正美</b>”</p>\n<p data-pid=\"FrQ2PrRY\">车田正美这个漫画家，一直都是以热血硬派为招牌的。</p>\n<p data-pid=\"JTd0I1kS\">后藤广喜著书《少年jump的黄金奇迹》中将其称为“继承热血漫画谱系的第一人”。</p>\n<p data-pid=\"eOmXYJxB\">就算编辑部真有这样的打算，车田正美似乎也不是理想的人选。</p>\n<p data-pid=\"wVp1iZwX\">此外，我看过的所有车田正美访谈中，他也并没提到过这个事情。</p>\n<p data-pid=\"mRwih1Li\">综上，虽然这个说法流传甚广，故事性甚好，但真实性存疑。</p>\n<p data-pid=\"5bGIrTaR\">之所以会出现这种说法，大概是因为当年车田正美笔下的人物确实是相对美型一些，让人误会他在故意向腐女读者谄媚。</p>\n<p data-pid=\"DFMWnLx1\">基于此，还产生了另一个更没谱一点的谣言：<b>车田正美是女性</b>。</p>\n<p data-pid=\"qQkW2iUJ\">这个就...太扯了。</p>\n<h2>（三）、《jojo的奇妙冒险》：荒木是原哲夫的助手</h2>\n<p data-pid=\"SeF2ZDYZ\"><b>出处</b>：不知何处</p>\n<p data-pid=\"o3VJSrOr\"><b>可信度</b>：一眼假</p>\n<p data-pid=\"R-iOpCUm\"><b>简单分析</b>：</p>\n<p data-pid=\"IB-JDUu8\">前互联网时代的谣言，天真且自以为是。</p>\n<p data-pid=\"FJ6DgyoI\">因为jojo初期的画风和北斗神拳非常接近，所以在那个信息闭塞的年代有这种说法也不奇怪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f52179341c82845378d3f2304f98a99_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"554\" data-watermark=\"original\" data-original-src=\"v2-5f52179341c82845378d3f2304f98a99\" data-watermark-src=\"v2-272642a34221462fec8c42fa5cf1975e\" data-private-watermark-src=\"v2-48f479ad9c1a43ea7ab296ed16aede03\"></p>\n<p data-pid=\"o-VOptpc\">实际上俩人没有半毛钱关系。</p>\n<p data-pid=\"y4tgo0LA\">不过据荒木飞吕彦自述，jojo连载开始时市场正流行肌肉猛男题材（包括史泰龙的电影，北斗神拳等等），所以他也仿照这个风格让人物都更“英雄化”。随着时代的变化，日本社会思想和风潮的转变，jojo后期的人物渐渐回归正常，不再追求身材魁梧的方向了（比如第五部的布加拉提和乔鲁诺）。</p>\n<p data-pid=\"91ywB7pY\">另外，据荒木飞吕彦，的责任编辑花岛良介，的好哥们松井荣元说，jojo初期确实有刻意模仿北斗神拳的痕迹。</p>\n<p data-pid=\"oqXihwR0\">所以谣言之所以能流传开，正是因为歪打正着听着像那么回事。</p>\n<h2>（四）、《幽游白书》（1）：不叫乱童，叫“乩童”</h2>\n<p data-pid=\"IsHHjdcX\"><b>出处</b>：盗版漫画或者曼德拉效应</p>\n<p data-pid=\"NA1mEN9E\"><b>可信度</b>：一眼假</p>\n<p data-pid=\"Sy_L3VFB\"><b>简单分析</b>：</p>\n<p data-pid=\"C80_5Ta7\">两种可能：</p>\n<p data-pid=\"Dx0TuDbC\">一种说法来自百度贴吧，认为这是早年盗版翻译的问题：<a href=\"http://link.zhihu.com/?target=https%3A//tieba.baidu.com/p/7486723933\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">乱童到底是叫乱童还是叫乩童？【幽游白书吧】_百度贴吧 (baidu.com)</a></p>\n<p data-pid=\"yIjXgIJQ\">另一种可能就是单纯地很多人认错字导致的曼德拉效应。因为我小时候也看的是四拼一盗版，但没出现指鹿为马的问题。</p>\n<p data-pid=\"ILJUGUmE\">事实上这种说法是完全的胡扯。</p>\n<p data-pid=\"khHn52hj\">两张图解决战斗：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ebfd78ae32b6e25c47df581ccc3acd4e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"91\" data-watermark=\"original\" data-original-src=\"v2-ebfd78ae32b6e25c47df581ccc3acd4e\" data-watermark-src=\"v2-26f582dc32bc7683e98d797c814ae492\" data-private-watermark-src=\"v2-0276a015d0cca058e26be833dd825c59\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-80793d57c92abe1e9ca049b2645022fc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"762\" data-watermark=\"original\" data-original-src=\"v2-80793d57c92abe1e9ca049b2645022fc\" data-watermark-src=\"v2-4889994d387ee6d95266b7ac3ddd0f74\" data-private-watermark-src=\"v2-0902ea32b9e9c68383341f2e35eaa2cd\" data-tags=\"porn\"></p>\n<h2>（五）、《幽游白书》（2）：富坚义博和井上雄彦是情敌</h2>\n<p data-pid=\"aXBhJF-o\"><b>出处</b>：不知何处</p>\n<p data-pid=\"tWwXZ5PL\"><b>可信度</b>：一眼假</p>\n<p data-pid=\"F-pUOpH0\"><b>简单分析</b>：</p>\n<p data-pid=\"JgWJyQiv\">从我学会上网那天就见过这个谣言，所以不知道起源于何时何地。</p>\n<p data-pid=\"n78JBd4S\">编得有鼻子有眼，诸如“《幽游白书》的角色刃雾要长得像流川枫，富坚义博讨厌井上雄彦所以让他跑龙套”；“《灌篮高手》里有月野兔，说明井上雄彦暗恋武内直子”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8d1b2c1eaf54bf07648e254d80a4f850_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"548\" data-watermark=\"original\" data-original-src=\"v2-8d1b2c1eaf54bf07648e254d80a4f850\" data-watermark-src=\"v2-c6f9e7e2ad6326749f5a04f30a331e24\" data-private-watermark-src=\"v2-3ad6901f678a512698e561590473e6db\"></p>\n<p data-pid=\"MFfmM-AY\">实际上是毫无根据的捕风捉影：<a href=\"https://www.zhihu.com/question/22125065\" class=\"internal\">井上雄彦追求过武内直子? - 知乎 (zhihu.com)</a></p>\n<h2>（六）、《灌篮高手》：“青春因为有遗憾才完美”</h2>\n<p data-pid=\"oAPR3t2O\"><b>出处</b>：不知何处</p>\n<p data-pid=\"Kb_jFdQb\"><b>可信度</b>：一眼假</p>\n<p data-pid=\"RdUy9e_O\"><b>简单分析</b>：</p>\n<p data-pid=\"Sj5tNdas\">和上一个谣言一样久远，但流传度应该更广。</p>\n<p data-pid=\"1qpYKG5V\">实际上是胡编乱造：<a href=\"https://www.zhihu.com/question/26582442/answer/33300817\" class=\"internal\">因为青春是不完美的，总会留下遗憾，你的理解？ - 知乎 (zhihu.com)</a></p>\n<h2>（七）、《浪客剑心》：绯村剑心死于梅毒/红斑狼疮/肺结核</h2>\n<p data-pid=\"-WG5q6Bx\"><b>出处</b>：《浪客剑心》星霜篇</p>\n<p data-pid=\"QIkky4dZ\"><b>可信度</b>：基本为假</p>\n<p data-pid=\"pVhsSknk\"><b>简单分析</b>：</p>\n<p data-pid=\"97HFX9VF\">首先剑心病故这个情节出自《浪客剑心》星霜篇，而星霜篇是完全原创的动画剧情，和原作漫画没有任何关系。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a295733427983ac18b6f15b77f251d0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-1a295733427983ac18b6f15b77f251d0\" data-watermark-src=\"v2-f366ef785efcc184ff3ebc37f73c0908\" data-private-watermark-src=\"v2-ab9b2eb8155706f0a973dc4220215def\"></p>\n<p data-pid=\"OpsfsAmH\">根据原作漫画《浪客剑心 北海道篇》的进度，此时此刻绯村剑心还在北海道当抗日奇侠呢，一切安好各位勿念。</p>\n<p data-pid=\"xbYVjmSK\">而星霜篇中剑心究竟死于何种疾病并无官方说法，具体的病症只是观众根据症状反推出来的结论。</p>\n<p data-pid=\"XReiRcuc\">所以这个说法更多是搞噱头吸引眼球，非要相信就是你自己的事。</p>\n<h2>（八）、《游戏王》：游戏厂商先提案，才有高桥和希被选中做连载</h2>\n<p data-pid=\"ka-bS40D\"><b>出处</b>：动漫贩</p>\n<p data-pid=\"TDrwoUoD\"><b>可信度</b>：存疑，偏向于假</p>\n<p data-pid=\"cJv5QXuT\"><b>简单分析</b>：</p>\n<p data-pid=\"u2Nqb2lR\">和前面（二）出处相同（感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/624b2d94e3345c7fe6d36986b611bb3a\" data-hash=\"624b2d94e3345c7fe6d36986b611bb3a\" data-hovercard=\"p$b$624b2d94e3345c7fe6d36986b611bb3a\">@FFF团长</a> 提供原图）：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-96a92b00f8e033a1d95b0d99e3fd5e59_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-96a92b00f8e033a1d95b0d99e3fd5e59\" data-watermark-src=\"v2-320f5ae52077a189b780537e9aeaadbe\" data-private-watermark-src=\"v2-3157d0c100f9992b7212991162ce7923\"></p>\n<p data-pid=\"lY-rOSoe\">因为年代久远，主编已经不记得出处。</p>\n<p data-pid=\"CdiyhurS\">可疑之处有很多：</p>\n<p data-pid=\"DvdOENpz\">（1） “《游戏王》是一部<b>卡片游戏漫画...主角武藤游戏对卡片游戏超级上瘾...整个剧情是用各种卡片战斗...</b>”</p>\n<p data-pid=\"NBiuzrjE\">《游戏王》前期是各种各样的小游戏，后来才转型成专门打牌的漫画。看过漫画的人都知道，这是基础性的事实错误。</p>\n<p data-pid=\"ZDxSaC6U\">（2）“<b>厂方</b>送过来的<b>推广企划</b>”</p>\n<p data-pid=\"twkImz1A\">如上所述，高桥和希在开始之前都不知道自己将来会画卡片战斗，何来未卜先知的“厂方”提交所谓的“企划”呢？</p>\n<p data-pid=\"FZTMGu9i\">如果真有这么一份企划，那武藤游戏为什么不一上来就化身牌佬呢？</p>\n<p data-pid=\"112yjPgk\">综上，虽然这个说法流传甚广，故事性甚好，但真实性存疑。</p>\n<h2>（九）、《火影忍者》（1）：宇智波鼬的原型是杀人犯</h2>\n<p data-pid=\"W3is6d2V\"><b>出处</b>：知乎</p>\n<p data-pid=\"gcqBF20x\"><b>可信度</b>：一眼假</p>\n<p data-pid=\"9mGW_P2z\"><b>简单分析</b>：</p>\n<p data-pid=\"EBKueLIN\">不再赘述：<a href=\"https://zhuanlan.zhihu.com/p/350119626\" class=\"internal\">许多的小兵器：宇智波鼬的原型是“津山事件”的犯人吗？</a></p>\n<h2>（十）、《火影忍者》（2）：岸本齐史抄袭港漫《风云》、《神兵玄奇》等</h2>\n<p data-pid=\"0AAFY_Rp\"><b>出处</b>：b站</p>\n<p data-pid=\"mXVLxw7V\"><b>可信度</b>：一眼假中假</p>\n<p data-pid=\"fMhjyIBj\"><b>简单分析</b>：</p>\n<p data-pid=\"uJOX2VE4\">基本可以视为某种智商过滤器，约等于漫画界的“地平论”。</p>\n<p data-pid=\"g4S6sLp2\">发自内心相信这个说法的人，我完全不期待他能看懂下面的文字。</p>\n<p data-pid=\"DyIekjAk\">提出这个说法的人，既不懂火影，又不懂港漫，更不懂什么叫抄袭。</p>\n<p data-pid=\"WDujS2rS\">要判定抄袭，需要遵循“接触+实质性相似的原则”。</p>\n<p data-pid=\"A-s0Yi8b\"><b>首先说说“接触”。</b></p>\n<p data-pid=\"g9Lmvn2Z\">岸本齐史是否有任何机会接触到《风云》或者《神兵玄奇》漫画？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f29861613c3ef907d03dc645d2569cc1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-f29861613c3ef907d03dc645d2569cc1\" data-watermark-src=\"v2-948e4d361734339f1a60299b1f034fa9\" data-private-watermark-src=\"v2-017c37897ba5bb7610f1d1b388c3a97b\"></p>\n<p data-pid=\"o7AydkhW\">答案很简单。</p>\n<p data-pid=\"FdusqGGn\">《风云》和《神兵玄奇》在日本没有任何出版，这是可以公开查到的信息。所以说岸本齐史在创作《火影忍者》期间需要完成： </p>\n<p data-pid=\"74PALhD9\">1 时不时来一趟大陆或者香港 </p>\n<p data-pid=\"QxxfKVs9\">2 不间断地购买《风云》及《神兵玄奇》漫画</p>\n<p data-pid=\"o1vAkhc2\">3 将中文学习至可以阅读武侠漫画的水平</p>\n<p data-pid=\"8N6dHMxd\">4 仔细研读这些作品并加以借鉴</p>\n<p data-pid=\"x4_Ig67r\">才能顺利地实现对港漫的抄袭。</p>\n<p data-pid=\"xr99dTpo\">那么他有这个能力吗？</p>\n<p data-pid=\"MZOsC65P\"><b>再说说“实质性相似”。</b></p>\n<p data-pid=\"8fAyHIp8\">发现了一些类似的情节要素，那不叫“实质性相似”，那叫<b>你看得太少</b>。</p>\n<p data-pid=\"-60IdL3I\">论相似，《火影忍者》和《猎人》、《忍空》、《甲贺忍法帖》、《阿基拉》甚至《黑客帝国》的相似性可能会更高一些。</p>\n<p data-pid=\"92bETK8g\">但这些也不叫抄袭。有的是致敬，有的是借鉴取材，有的是漫画业内司空见惯的“行活”。至于这些行为之间具体有什么区别，界限在哪里，一言两语说不清楚。</p>\n<p data-pid=\"2548W6pI\">而<b>故意宣扬这个谣言的人也根本不想听清楚</b>。</p>\n<p data-pid=\"hXLWaS48\">他们只是需要一些素材来宣泄自己的不满罢了。</p>\n<p data-pid=\"ka2yrnZE\">点到为止。</p>\n<h2>（十一）、《进击的巨人》：谏山创是《少年jump》的卧底</h2>\n<p data-pid=\"QegKDP0W\"><b>出处</b>：我自己</p>\n<p data-pid=\"XRY_eIiR\"><b>可信度</b>：谁信谁上当</p>\n<p data-pid=\"faoa1yHX\"><b>简单分析</b>：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/375089510\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-04a695b602e0f9fae9ca3a6708616330_720w.jpg?source=b1748391\" data-entity-type=\"article\" data-entity-data=\"null\" class=\"internal\">《进击的巨人》烂尾背后的惊天秘闻——一场长达13年的无间道</a><p data-pid=\"-BvL1MSm\">溜了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-you-xu-duo-de-xiao-bing-qi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">许多的小兵器</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/320688057/answer/2437607649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">18 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/356373176?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些动漫中的女性角色在国内拥有较高人气？</a><br><a href=\"http://www.zhihu.com/question/280475133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为啥国内的动漫如此不成熟？</a><br>\n","link":"http://www.zhihu.com/question/320688057/answer/2437607649?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]