[{"title":"派周报 | 本周会员内容提要；跑题：啁啾哨音","date":"2022-08-26 12:51:50","description":"Mudge 的哨声已经引发了回响，但会带来多少实际后果，还要等待听证、审判结束后才能下结论。但只有一点是不用预测的，那就是不管谁赢，用户已经输了。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/pi-weekly-006\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/pi-weekly-006"},{"title":"本周看什么 | 最近值得一看的 7 部作品","date":"2022-08-26 09:52:34","description":"冰与火之歌，原来从一开始就是传说。<a href=\"https://sspai.com/post/75382\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75382"},{"title":"找出歌名，让歌出名：来头不小的 Shazam 是怎么来的？","date":"2022-08-26 08:30:36","description":"「Shazam 一下」代表的是一种发自内心的认可和鼓励，而不在乎一个人是否名满天下，也无所谓一首歌是否脍炙人口；但它也确实让很多人因此名满天下，让很多歌因此脍炙人口。<a href=\"https://sspai.com/post/75362\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75362"},{"title":"一派·Podcast | 一场设计梦，做了十余年","date":"2022-08-26 06:31:04","description":"听听少数派新同事对设计的看法，并请他回顾自己过去十年间与设计的故事。<a href=\"https://sspai.com/post/75359\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75359"},{"title":"如何评价大宇出品的中式惊悚游戏《女鬼桥 开魂路》？","date":"2022-08-26 04:22:45","description":"\n<p></p>\n<p></p>\n<p></p>\n<b></b><p><img src=\"https://picx.zhimg.com/v2-585be576b9acc3f6fe1edc6d2b782d04_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"926\" data-watermark=\"watermark\" data-original-src=\"v2-585be576b9acc3f6fe1edc6d2b782d04\" data-watermark-src=\"v2-5ce7c28c97007b795f0dc0892b28b556\" data-private-watermark-src=\"v2-adcc5ebbbcedafa25dfe529132c7b8d6\"></p>\n<p><br></p>\n<p data-pid=\"O2HoKhDp\">    大家好，我是《女鬼桥  开魂路》的制作人，吴秉育，《女鬼桥  开魂路》是一款由恐怖电影女鬼桥改编的恐怖冒险游戏，是讲述一群东湖大学的学生，在学校举办试胆大会，挑战校园传说，却真的遇上灵异事件。  </p>\n<p data-pid=\"x0ywZqAp\">    公司在做完轩辕剑柒之后，希望开发更多元的题材，恐怖游戏也是选项之一，而我自己也一直想开发这类型的游戏，因缘际会下，有了开发女鬼桥游戏的机会。  </p>\n<p data-pid=\"HmiCIani\">    实际上游戏的剧情和电影还是会有很多不同，首先，我们先确定电影的原始设定，然后开始深掘电影没有交代的部分，通常这会是不错的切入点。但因为电影篇幅有限，所以我们在设计游戏故事时，补充了很多电影没有交代的部分，也做出了一些改编。已经看过电影的玩家在游玩时可能会有以另一种角度来体验故事。 ，电影未拍摄的部分，而没看过的玩家，玩过之后，也会想找电影来看。  </p>\n<p data-pid=\"qFqVPG5b\">    我们游戏是多线进行，玩家将扮演每个学生，体验在试胆大会后，发生的所有事件，他们私底下交情，都能在操作角色时，一窥究竟。最后这几条线会相互交织、相互补充，最后并一步步走向结局。  </p>\n<p data-pid=\"tPXfLK8c\">    2021年时，疫情肆虐下，专案刚成立，人员还没补齐，我们也在家远端工作，大家还是努力把雏型版制作出来，并找玩家试玩，逐步累积足够的回馈与评价后，以此奠定女鬼桥开魂路的基础。   </p>\n<p data-pid=\"WQmU8Sn5\">    2022年时，我们参加Steam新品节，得到许多正面回馈，让我们有更明确的方向，持续制作。 YT直播总观看数也累积破500万。 B站约200多万。全世界的转播给了我们很大信心。  现在《女鬼桥  开魂路》已正式上市，也欢迎大家试玩。  </p>\n<p><br></p>\n<p data-pid=\"gftDaH_8\"><b>《女鬼桥  开魂路》的场景取自各大专院校，每间教室的摆设，都富有科系特色。</b></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-ea94edbb1be06b09901bab62aff32f30_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-ea94edbb1be06b09901bab62aff32f30\" data-watermark-src=\"v2-85c3eb82ea15163010bfa8ccf86a08a3\" data-private-watermark-src=\"v2-6cd2375be4ccc10995f82a0e02009167\"></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic3.zhimg.com/v2-efb213b714135d754d2fdf1924e735a1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-efb213b714135d754d2fdf1924e735a1\" data-watermark-src=\"v2-8323bb52930106419430696f70033e51\" data-private-watermark-src=\"v2-adb351c6591e5d4adfa75cbde96ddd5a\"></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pica.zhimg.com/v2-790be0b7ea038636bddc78a891490444_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-790be0b7ea038636bddc78a891490444\" data-watermark-src=\"v2-3e8f2d42555a6b613c500e1f95c584fd\" data-private-watermark-src=\"v2-357af851bb42f882744f04f92ed17f4a\"></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-e814748a18288f4b0db85a96ed4f7264_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-e814748a18288f4b0db85a96ed4f7264\" data-watermark-src=\"v2-236141108319f315ada03a782cd28186\" data-private-watermark-src=\"v2-a7acc9ddf01dcb27df69e7599f5f2b4a\"></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic4.zhimg.com/v2-d4c1700f134052816636873f6d9cb037_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-d4c1700f134052816636873f6d9cb037\" data-watermark-src=\"v2-482a72336063a773205602627796e62a\" data-private-watermark-src=\"v2-be51f0cefb367bf2d76f908909f55b6f\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"QN9AuPZc\"><b>各种谜题游戏</b></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-843dd4e40b4f32f5ef6205896c971dad_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-843dd4e40b4f32f5ef6205896c971dad\" data-watermark-src=\"v2-9fdd8b4f1d455fd4e8978a4f8945c331\" data-private-watermark-src=\"v2-72b76db383a9af0c99ac155518d7a9e3\"></p>\n<p><br></p>\n<p><br></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-ebe46f48858544ffba8e1978cdfb35d4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-ebe46f48858544ffba8e1978cdfb35d4\" data-watermark-src=\"v2-dc034c5b3e51bc028fbf7520c86ecbbe\" data-private-watermark-src=\"v2-3b2db69ddc17c88b860ba80f552de799\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"jHw-Efj6\"><b>在校学生</b></p>\n<p><br></p>\n<b></b><p><img src=\"https://pica.zhimg.com/v2-483a648f304356d234eff2a850d3d087_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"900\" data-watermark=\"watermark\" data-original-src=\"v2-483a648f304356d234eff2a850d3d087\" data-watermark-src=\"v2-8033d7c596c10b8bc1f5e8275f73f393\" data-private-watermark-src=\"v2-b57677cfbc4ea4baa343e2481af6af32\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"m8Uz86cG\"><b>神秘女鬼</b></p>\n<p><br></p>\n<b></b><p><img src=\"https://pica.zhimg.com/v2-f16dc0876f4fafddbf726381da0c8cc2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"900\" data-watermark=\"watermark\" data-original-src=\"v2-f16dc0876f4fafddbf726381da0c8cc2\" data-watermark-src=\"v2-45b138973c5db94f8890ff200b3c330e\" data-private-watermark-src=\"v2-11f436c4d48eddb52858875e670fe447\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"1PMRk532\">在此，也感谢曾经帮助《女鬼桥  开魂路》的所有人，谢谢你们。 <br>以及 热情的玩家，你们的好评回馈是最好的礼物，谢谢。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/matellion?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">matellion</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549659151/answer/2645020171?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n","link":"http://www.zhihu.com/question/549659151/answer/2645020171?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一日一技 | 没有满意的 Obsidian 外观？不如自己动手做一个","date":"2022-08-26 03:29:53","description":"Obsidian 有许多优点，其中一个就是自带社区主题库，用户可以随意更换样式，不再天天看千篇一律的外观。然而，尽管社区主题库里有很多主题样式，说实话，没有一个能百分之百令我满意的。<a href=\"https://sspai.com/post/75363\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75363"},{"title":"派早报：iQOO 发布 Z6 系列手机、大疆发布无人机新品 DJI Avata","date":"2022-08-26 01:01:48","description":"三星发布 990 Pro 固态硬盘，索尼宣布调整上调 PS5 价格等<a href=\"https://sspai.com/post/75369\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75369"},{"title":"新玩意 117｜少数派的编辑们最近买了啥？","date":"2022-08-25 09:33:03","description":"不嫌事大，battle 一下。<a href=\"https://sspai.com/post/75357\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75357"},{"title":"甜味剂解密 2：关于代糖的几点迷思","date":"2022-08-25 08:00:00","description":"代糖是什么？我们是怎么吃出来甜味的？无糖可乐为什么味道不大一样？这篇文章告诉你。<a href=\"https://sspai.com/post/75350\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75350"},{"title":"一日一技 | WSA 定制安装，找回你需要的 Google 服务和 Magisk","date":"2022-08-25 06:30:00","description":"让 Magisk 和 Google 服务继续跑在 Windows 的 Android 系统上。<a href=\"https://sspai.com/post/75351\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75351"},{"title":"什么是行为金融学，这门学科的支柱理论是什么？","date":"2022-08-25 06:29:38","description":"\n<p data-pid=\"A15zA5oi\">谈谈我的一点理解：行为金融学通俗点来说可以理解为：</p>\n<p data-pid=\"L2NHqA9N\"><b>行为金融学 = 传统金融理论 + 心理学（认知科学）。</b></p>\n<p><br></p>\n<p data-pid=\"qFVE4qNT\">传统金融理论又称<b>新古典主义理论</b>。它一个重要的假设就是<b>理性人假设</b>：即人们在做决策的时候都是理性的。基于这个假设，又衍生出来市场也是有效的（有效市场假说）。在这个基础上发展出来很多数学模型如资本资产定价模型CAPM，期权定价模型等都在金融界得到了广泛的应用。</p>\n<p><br></p>\n<p data-pid=\"rrIMpSeC\"><b>然而理性人这个假设在很多时候并不能切实的反映现实</b>。比如说，遇到金融危机和金融泡沫的时候，人的行为很难说是理性。要研究这类问题的时候，传统金融理论就行不通了。</p>\n<p><br></p>\n<p data-pid=\"bAD1-zb5\"><b>一些学者们开始试着把心理和行为的纳入金融学的研究中</b>：比如很多人都存在的“羊群效应”,“过度自信\"等现象。</p>\n<p><br></p>\n<p data-pid=\"yvWN5GbK\">学者们发现把这些”人“的因素纳入金融研究后，能更好的解释现实问题。近二十年来，有几位行为经济学家，如罗伯特·希勒（代表作《非理性繁荣》），理查德·塞勒（代表作《助推》）都获得了诺贝尔奖。从一个侧面也反映了行为金融学逐渐为大众所重视。</p>\n<p><br></p>\n<p data-pid=\"G7iMNi2x\">从这个意义上来讲，<b>行为金融学其实是对于传统金融理论的一个发展和补充</b>，而非独树一帜的学科。<br></p>\n<p><br></p>\n<p data-pid=\"fXnA68KG\">几本我认为比较好的行为金融学的科普读物推荐一下。</p>\n<p data-pid=\"5EdogcPk\">1. Thinking, Fast and Slow by Daniel Kahneman, 2011</p>\n<p data-pid=\"UAfPU_fE\">中译本：<b>《思考，快与慢》</b>,丹尼尔·卡尼曼 （作者为2002年诺贝尔经济学奖获得者）</p>\n<p data-pid=\"M38L3dKk\">2. Misbehaving：The Making of Behavioral Economics by Richard H. Thaler, 2016</p>\n<p data-pid=\"jVLb3B-X\">中译本：<b>《“错误”的行为》</b>理查德·泰勒 （作者为2017年诺贝尔经济学奖获得者）</p>\n<p data-pid=\"A2iJd2I1\">3. Nudge by Richard H. Thaler, 2009</p>\n<p data-pid=\"w4oIj5il\">中译本：<b>《助推》</b>理查德·泰勒</p>\n<p data-pid=\"1IjFYuH1\">4. The Winner's Curse by Richard H. Thaler, 1994</p>\n<p data-pid=\"6Aww-voS\">中译本：<b>《赢家的诅咒》</b> 理查德·泰勒</p>\n<p data-pid=\"en1aW1AW\">5. Irrational Exuberance by Robert J. Shiller, 2000</p>\n<p data-pid=\"pgAuT4-9\">中译本：<b>《非理性繁荣》</b> 罗伯特·希勒 (作者为2013年诺贝尔经济学奖获得者)</p>\n<p data-pid=\"yWvHOFS1\">顺便介绍几位行为金融学知名学者：</p>\n<p data-pid=\"ExiY2gL7\">1. 丹尼尔·卡尼曼（Daniel Kahneman，1934年3月5日－），以色列裔美国心理学家。由于在前景理论的贡献，获得2002年诺贝尔经济学奖。前景理论认为人们通常不是从财富的角度考虑问题，而是从输赢的角度考虑，关心收益和损失的多少。</p>\n<p data-pid=\"XUeUuD6b\">2. 理查德·塞勒 (Richard H.Thaler)，在行为金融学方面，塞勒研究人的有限理性行为对金融市场的影响，并作出了很多重要贡献。塞勒的学术观点是：完全理性的经济人不可能存在，人们在现实生活中的各种经济行为必然会受到各种“非理性”的影响。很多从传统经济学角度看来是“错误”的行为，经常被忽视，但往往正是这些行为导致了那些“看起来很美”的决策最终失效乃至酿成恶果。1980年，塞勒提出禀赋效应（Endowment Effect，也称原赋效应）：指的是当一个人一旦拥有某项物品，那么他对该物品价值的评价要比未拥有之前大大增加。</p>\n<p data-pid=\"DZIftnKZ\">3. 罗伯特·希勒（Robert J. Shiller），耶鲁大学，2013年因“资产价格实证分析方面的贡献”获得诺贝尔经济学奖。获奖理由：在资产定价实证分析领域有重要贡献。</p>\n<p data-pid=\"nQ6crtNt\">4. 阿莫斯·特沃斯基(Amos Tversky，1937年3月16号- 1996年6月2日), 与他的合作者Daniel Kahneman获得了2002年诺贝尔经济学奖。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yao-kai-49-86?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">姚凯</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/35839533/answer/1039918399?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/308649637?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">行为金融学有哪些理论空白？</a><br><a href=\"http://www.zhihu.com/question/59955934?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">行为金融学的观点？</a><br>\n","link":"http://www.zhihu.com/question/35839533/answer/1039918399?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Matrix Talk | 咖啡馆 or 自己家，你会选择在哪里写作","date":"2022-08-25 03:30:00","description":"你每天看到的少数派文章都是在哪诞生的<a href=\"https://sspai.com/post/75328\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75328"},{"title":"玩真人密室逃脱有什么诀窍吗？","date":"2022-08-25 03:25:13","description":"\n<p data-pid=\"mqptQxd9\">暑假期间，<b>密室逃脱</b>作为一种智力与体力结合的多人运动，广受学生们欢迎。你不仅能体验不同的场景，还能享受探险的<b>刺激</b>。例如我朋友进去玩了一趟密室，出来就脱单了，<b>这对其他人刺激就很大。</b></p>\n<p data-pid=\"P_DjjM2a\">钱钟书先生也是著名的老密室玩家，曾生动地形容过人们玩密室的心情</p>\n<p><img src=\"https://picx.zhimg.com/v2-b5e6d532727c79b9f952a5b2e968f084_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"634\" data-rawheight=\"364\" data-watermark=\"watermark\" data-original-src=\"v2-b5e6d532727c79b9f952a5b2e968f084\" data-watermark-src=\"v2-a7538993120967f6168ddbe73bfddabf\" data-private-watermark-src=\"v2-1c8560af11a23612830c56a84e6ef7d6\"></p>\n<p data-pid=\"HVEm-Asi\">不过大家虽然共处一室，但<b>人与人之间的差距极大</b>。有的人分析能力极强，出了密室就能俘获妹子的芳<b>心</b>；而有的人在密室完全不会分<b>析</b>，只会阿巴阿巴像个弱<b>鸡</b>，在密室的存在感还不如NP<b>C</b>。</p>\n<p data-pid=\"qphMS_Sb\">正常人在密室大致会分化为以下六种类型：</p>\n<p><img src=\"https://picx.zhimg.com/v2-5951fed4ed2ef5331e30416985b32f56_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"498\" data-watermark=\"watermark\" data-original-src=\"v2-5951fed4ed2ef5331e30416985b32f56\" data-watermark-src=\"v2-2447d383a961451caad3279d2aa87798\" data-private-watermark-src=\"v2-883b3b2bd6e17bbf08785e4503211889\"></p>\n<p data-pid=\"6Mc2knFp\">作为一个具有包容性的毕导，我可以在六种形态中灵活切换。但很多人在密室里一次呆逼，一生呆逼！为了避免大家在密室花钱买自闭，我特意去密室自闭了三天，修炼出了这套<b>密室逃脱速成秘籍</b>，希望能帮到大家！</p>\n<hr>\n<p data-pid=\"O_nJAZbE\"><b>一、玩密室前的准备</b></p>\n<p data-pid=\"YI0PUB_n\"><b>1、密室主题的选择</b></p>\n<p data-pid=\"JczFMOd6\">密室一般有三种类型。选对了密室，你就了成功一半。</p>\n<p data-pid=\"J9JYJulx\"><b>故事情景型密室</b>：这种密室最常见，不需要换装，价格也很亲民！你只要带上脑子，跟随剧情的推进来解谜就行，谜题解完了，一个故事也串起来了。</p>\n<p><img src=\"https://picx.zhimg.com/v2-db67c887e80f0704af65faef2d0a2780_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"757\" data-watermark=\"watermark\" data-original-src=\"v2-db67c887e80f0704af65faef2d0a2780\" data-watermark-src=\"v2-d346282e69a224b293c7223593b929e7\" data-private-watermark-src=\"v2-bdad579b58c0c77fdb108acdedbc3cca\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"O5O7X-ok\"><b>恐怖氛围型密室：</b>相比于智商，对你的<b>胆量</b>要求更高。这类密室=密室逃脱+鬼屋，<b>简称密恐</b>。剧情只作为外包装，鬼屋体验才是重点！一个密室，两种体验，特别划算</p>\n<p><img src=\"https://pica.zhimg.com/v2-eb4de481fb4f90db7c0e39763c36bcad_720w.gif?source=b1748391?rss\" data-caption=\"图源自微博\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"300\" data-watermark=\"watermark\" data-original-src=\"v2-eb4de481fb4f90db7c0e39763c36bcad\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"nP-73Zhd\">这类密室非常适合与<b>异性朋友</b>一起玩，说不定你有生之年还有机会回答下面这个问题</p>\n<p><img src=\"https://picx.zhimg.com/v2-1d91253b6e391055e433b54a41f9a5b1_720w.jpg?source=b1748391?rss\" data-caption=\"也可能是你扑陌生女孩怀里\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"258\" data-watermark=\"watermark\" data-original-src=\"v2-1d91253b6e391055e433b54a41f9a5b1\" data-watermark-src=\"v2-c3a67a50a01124bd5491222ab9036d8d\" data-private-watermark-src=\"v2-7e1e57616fa9eb82484c20faa755b4f9\"></p>\n<p data-pid=\"kGQ8Hzey\"><b>角色扮演型密室：</b>这属于沉浸式体验密室，<b>非常推荐影帝去玩耍！</b>一定要换装！你可以扮演囚徒、侠客等角色，甚至还能<b>圆你一个女装梦！</b>这种密室优点是你衣服擦到地上不会心疼，缺点是结账时可能会有点心疼。</p>\n<p><img src=\"https://pica.zhimg.com/v2-d44645e494f652bfc21df44c1a0fa375_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"444\" data-watermark=\"watermark\" data-original-src=\"v2-d44645e494f652bfc21df44c1a0fa375\" data-watermark-src=\"v2-634a5cc932ffb474faabc67fbfe59acf\" data-private-watermark-src=\"v2-6645538d919d1cc47dcb7252bf2224fd\"></p>\n<p data-pid=\"V2PGeNLu\">大家可以根据自己的优势各取所需。小白的话，我比较推荐<b>恐怖氛围型密室</b>，因为智力和演技不高可能会影响你的人设，但只是胆小的话，只会显得你是小可爱</p>\n<p><br></p>\n<p data-pid=\"fk3d5Yhh\"><b>2、提前锻炼逻辑思维</b></p>\n<p data-pid=\"arREpF_y\">完全没有密室经验的小白，去实践前可以先玩一下密室游戏，锻炼一下自己的解谜思维。比如<b>《Cube Escape(方块逃脱)》</b>系列，<b>《Rusty Lake(锈湖)》、《The Room》</b>系列等等。没时间玩也没事</p>\n<p><img src=\"https://pic1.zhimg.com/v2-79d3a0e048c116bc392671a94de0f60d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-79d3a0e048c116bc392671a94de0f60d\" data-watermark-src=\"v2-05adbc38e12a752e9bc28630be6e2264\" data-private-watermark-src=\"v2-f0bcdc5106502b1e2c7125b58b5fa18e\"></p>\n<p data-pid=\"XmVnI7K1\">在去密室的路上，你可以随口提起这些游戏的名字，并辅以从steam上摘抄下来的评价和漫不经心的语气</p>\n<blockquote data-pid=\"7G3Blq8W\">“我最近刚好在玩《Cube Escape》，我尤其喜欢它独立的《锈湖》系列，人兽异形和微恐的解谜气氛让我很上头，你呢？”</blockquote>\n<p data-pid=\"D1T28NKP\">一个崭新的老密室玩家形象就立住了，一下就占据了先手优势。</p>\n<p><br></p>\n<p data-pid=\"2kSGF5Ff\"><b>3、密室装备的选择</b></p>\n<p data-pid=\"Rqy0HmN9\"><b>千万不要穿高跟鞋和裙子！！！！</b></p>\n<p data-pid=\"1kAr9JBJ\"><b>千万不要穿白色的衣服和裤子！！！</b></p>\n<p data-pid=\"bMLgKdo_\"><b>不要问我怎么知道的！！！</b></p>\n<hr>\n<p data-pid=\"2XePOFj2\"><b>二、密室逃脱攻略</b></p>\n<p data-pid=\"19vlaTLD\">接下来就是正式的教学环节！大家一定要全神贯注，争取小白变大白，高玩变高达，学完后我保证全世界就没有你逃不了的密室！除非特别难。</p>\n<p data-pid=\"a_6Y7h3x\"><b>1、线索的分布</b></p>\n<p data-pid=\"kulW-BD4\">密室逃脱很烧脑，第一步就是要找到线索。线索有以下几种特征。<b>第一是看摆设</b>，像是挂画，镜子，柜子等。<b>第二是看图案</b>，带字的道具，稀奇古怪的图案，莫名其妙的诗词，都可能是线索。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-00780c892dbd41f5efc1f63d301a7219_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"320\" data-watermark=\"watermark\" data-original-src=\"v2-00780c892dbd41f5efc1f63d301a7219\" data-watermark-src=\"v2-3bd7aac80d8500d682b350a2c2d93c21\" data-private-watermark-src=\"v2-efdba72c355f3b542e23159eb98eff87\"></p>\n<p data-pid=\"kDws9oMi\"><b>第三可以反向思考店主是如何实现机关控制的！</b>像那些有<b>亮光</b>、<b>被很多人摸过</b>的地方，可能就是机关！</p>\n<p data-pid=\"tGEK9vph\">但下面这些有亮光、被很多人摸过的地方，就绝对不是机关！</p>\n<p><img src=\"https://picx.zhimg.com/v2-d052db86124784054f010990add001c9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"320\" data-watermark=\"watermark\" data-original-src=\"v2-d052db86124784054f010990add001c9\" data-watermark-src=\"v2-980be286ee8e613c79723dafd6dbc7d5\" data-private-watermark-src=\"v2-ce01f516274f0071446681fd75ddcaef\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"DT2fMbB9\">空调就是空调！灭火器就是灭火器！记住，<b>日常工具性用品里，是绝对不可能有线索的。</b>千万不要为了找线索破坏这些设施，要记住你是来解密的，不是来拆迁的！也不要暴力砸门、使劲掰开箱子，找不到就是找不到，<b>大力不能出奇迹，但是能赔钱。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-978e0ca29f560d2835457e24043b0e28_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"637\" data-watermark=\"watermark\" data-original-src=\"v2-978e0ca29f560d2835457e24043b0e28\" data-watermark-src=\"v2-d30fb5ef273fb1e9e8644368fad6846a\" data-private-watermark-src=\"v2-1a1d96508e8e2a81fde554087bd933ac\"></p>\n<p data-pid=\"cxmKrdSr\"><b>2、利用密室道具</b></p>\n<p data-pid=\"FD6kzh-R\"><b>对讲机</b>是密室逃脱中最重要的道具。如果你在密室中遇到困难，或者你觉得你破解了但机关还没打开的，一定用对讲机及时和老板联系。不要为了面子卡在第一关。这个游戏是花钱了的！</p>\n<p data-pid=\"9nH_xU-L\"><b>切记不要随便调频</b>，否则你可能会收听到道路交通广播。</p>\n<p><img src=\"https://pica.zhimg.com/v2-359f5a667dc5974601fec369c00e50dd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"182\" data-watermark=\"watermark\" data-original-src=\"v2-359f5a667dc5974601fec369c00e50dd\" data-watermark-src=\"v2-7e93376943a2d93388d341cef217f158\" data-private-watermark-src=\"v2-1d150e25eecb6cc5c5fd2d608cd11625\"></p>\n<p data-pid=\"vyP0AlED\"><b>声音</b>则会指引你完成一些任务。如果听到<b>奇怪的长短音</b>，有可能是摩斯密码。发现有<b>录音笔</b>也不要瞎按，不然聚集后众人屏气凝神地听你自言自语，他们会很尴尬。</p>\n<p><img src=\"https://picx.zhimg.com/v2-93fb8046a36b6dc87ee81cf993f6a2d4_720w.gif?source=b1748391?rss\" data-caption=\"一个有声音的动图\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-93fb8046a36b6dc87ee81cf993f6a2d4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ojo9ctYO\"><b>灯光</b>也非常重要！如果是剧情配备的<b>电子煤油灯</b>，可以试试用底座放在特定的位置，也许会触发机关；看到<b>激光</b>要想到用镜子反射它到感光元件上；如果有<b>手电</b>，试着多按几次开关调成<b>紫光灯模式</b>，紫光灯可以看到隐藏的荧光文字</p>\n<p><img src=\"https://pic1.zhimg.com/v2-23dd7786ff03c055b993e73f66f033ef_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"315\" data-watermark=\"watermark\" data-original-src=\"v2-23dd7786ff03c055b993e73f66f033ef\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"pejPEkbQ\"><b>注意任何灯具都不要顺手揣兜里带回家了。</b></p>\n<p><br></p>\n<p data-pid=\"cX97rOqB\"><b>3、破解密码</b></p>\n<p data-pid=\"pmwklRLD\">密室里啥玩意都要上一个<b>密码锁</b>，也不知道怎么想的，我家就不会。不过我们可以尝试用以下几种解题思路来尝试破解。</p>\n<p data-pid=\"gihQ1but\"><b>（1）摩斯电码</b></p>\n<p data-pid=\"aelt47Ww\">摩斯电码是指向性最强的密码，无间道里梁朝伟就是靠这个卧底三年三年又三年的！摩斯电码的<b>杠和点分别对应长和短</b>，不同长短的组合可以拼成不同的字母或数字。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7ca10d0d09669f3eeaadfc8eb086b4be_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"597\" data-watermark=\"watermark\" data-original-src=\"v2-7ca10d0d09669f3eeaadfc8eb086b4be\" data-watermark-src=\"v2-5d723ebb22daba7471def43f870dac1a\" data-private-watermark-src=\"v2-5234e9d579a901242ad15551d125b2c1\"></p>\n<p data-pid=\"RwGCKe3u\">学会后，一个简单的动作就可以传递出“<b>救命啊我快挂了快叫警察叔叔来救我</b>”的复杂含义，从此我就是梁朝伟。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-40d3cb23be95dc9c454207e5dc8668ef_720w.gif?source=b1748391?rss\" data-caption=\"你能破解出我的摩斯密码吗？\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"268\" data-watermark=\"watermark\" data-original-src=\"v2-40d3cb23be95dc9c454207e5dc8668ef\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"7I4H_9It\"><b>（2）图案转换为数字</b></p>\n<p data-pid=\"2x6aVjZL\">这类是公务员考试中常见的谜题。所以密室逃脱玩得好，考公务员上岸早。主要有以下几种解题方法</p>\n<ul><li data-pid=\"RuH6XK1d\">\n<b>顺序连线法</b>：<b>将数字或字母写入九宫格，并按照顺序连线。</b>比如下图这组数字，你可能会觉得就是一堆乱码</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-d30e54d4059e7dad72468acdc8c052a0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"323\" data-watermark=\"watermark\" data-original-src=\"v2-d30e54d4059e7dad72468acdc8c052a0\" data-watermark-src=\"v2-317c360f21577624f29e57a7f7abb656\" data-private-watermark-src=\"v2-fceb90bfade83c152714b3f49d4c695a\"></p>\n<p data-pid=\"qk9gTvYK\"><br>但会玩的人比如我，一看就知道这说的是“2019”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5b510ca9763b5d057cd9c945f2fbc5c6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"123\" data-watermark=\"watermark\" data-original-src=\"v2-5b510ca9763b5d057cd9c945f2fbc5c6\" data-watermark-src=\"v2-bee5bcb68a02e4e4061dc36c28607fa9\" data-private-watermark-src=\"v2-9e7c654723093b4cd37051964b7c48e9\"></p>\n<ul><li data-pid=\"RWJaWbX_\">\n<b>移形换位法：通过旋转图案或移动图案看出图中的数字</b>。比如下面这张图，你会疑惑这类似俄罗斯方块的玩意到底是啥</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-30e94983cb24bd8c2111ea9894505f93_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"884\" data-rawheight=\"228\" data-watermark=\"watermark\" data-original-src=\"v2-30e94983cb24bd8c2111ea9894505f93\" data-watermark-src=\"v2-c86b4b19c97bb9b271c9daf7bab6fd79\" data-private-watermark-src=\"v2-8610c6b10da314f86777fc392dd629a3\"></p>\n<p data-pid=\"zsya-7vp\">但如果你把手机转一下就知道密码是——<b>253</b></p>\n<p><br></p>\n<ul><li data-pid=\"9mfFdW6S\"><b>图形规律法：需要寻找图形的规律，破解未知图形对应的数字。</b></li></ul>\n<p data-pid=\"JQr2qj9H\">下面这道题不难，关键是细致。做出来不是<b>82</b>的话，不要说你上过小学二年级！<b>可以拿这张图测测朋友的学历水平</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-07c68ffe87e1b648b2c8a82ae2919200_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"621\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-07c68ffe87e1b648b2c8a82ae2919200\" data-watermark-src=\"v2-0786237e736af869e5abd987eb1d6a7c\" data-private-watermark-src=\"v2-095bb3c2684f4fec806c8bf59811028f\"></p>\n<p data-pid=\"EM-oKd_t\"><b>（3）数字的反编译</b></p>\n<p data-pid=\"q5SSgXew\">比如<b>电脑键盘上的符号</b>对应的数字，或者根据<b>化学元素在周期表的顺序</b>得出数字。如果你现在看看毕导的头图，就明白为什么我的银行卡密码是<b>180112</b>了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-685b09374c0b9f2681e779c415675a04_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1045\" data-rawheight=\"245\" data-watermark=\"watermark\" data-original-src=\"v2-685b09374c0b9f2681e779c415675a04\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"ZLJJhaeG\"><b>（4）物理机关</b></p>\n<p data-pid=\"VZR00wdv\">没有物理机关的密室，不足以称之为密室。而根据<b>大学物理</b>的启发，我们可以从<b>“声、光、力、磁”</b>等几个方向来破解感应机关。</p>\n<ul>\n<li data-pid=\"_WAeFJ6L\">\n<b>声感</b>——需要你大声读出咒语或密码，案例可以参考巴啦啦小魔仙</li>\n<li data-pid=\"F0lFwq90\">\n<b>光感</b>——用镜子将激光反射到光感元件上，紫光灯照射出隐形字等</li>\n<li data-pid=\"Vx96pyhe\">\n<b>力感</b>——躺在棺材里触发压力开关</li>\n<li data-pid=\"MBUOp7Rd\">\n<b>磁感</b>——用吸铁石吸够不到的钥匙</li>\n<li data-pid=\"BlND80j-\">\n<b>量子力学</b>——快速翻阅书本达到光速的标准</li>\n</ul>\n<p><br></p>\n<p data-pid=\"kyZCtn6_\"><b>4、学会勇敢</b></p>\n<p data-pid=\"oORR8gfk\">如果你选择的是恐怖氛围型密室，那么以上这些技巧统统不重要！只要你够勇敢，就能成为整个团队的精神领袖。</p>\n<p><img src=\"https://picx.zhimg.com/v2-4fa355cfdafbaac154ba4c259fbe9af8_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"407\" data-rawheight=\"407\" data-watermark=\"watermark\" data-original-src=\"v2-4fa355cfdafbaac154ba4c259fbe9af8\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"urHkgmJh\">密室音乐诡异，你就单曲循环<b>好运来</b>与之对抗；NPC恐怖吓人，你就说个段子让其哈哈大笑；恐怖鬼手突然出现，你就伸手主动与之交握。不但要握出大哥的姿势，更要握出领导的气势，<b>让人以为你才是密室的boss！</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-8c4779c5bb327097b0fb01578e706470_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"340\" data-watermark=\"watermark\" data-original-src=\"v2-8c4779c5bb327097b0fb01578e706470\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DDKD-e1B\">泰山崩于前而色不变。<b>在勇敢坚毅的品格面前，智商什么的都是弟弟。</b></p>\n<hr>\n<p data-pid=\"bd0JDEhD\"><b>终极方法</b></p>\n<p data-pid=\"kbV2D6GK\">最后再给大家传授一个终极大法：</p>\n<p data-pid=\"2bYZsBup\"><b>提前刷一遍密室！</b></p>\n<p data-pid=\"nyClxfwe\">这个方法乍一看是伤敌八百自损一千，仿佛就是在给密室老板白送钱。但你想，还有比这更经济划算的装逼方法吗？</p>\n<p data-pid=\"v44ap8cw\">只要你提前刷一遍密室，那么当朋友还在谜题前抓耳挠腮像个毛猴时，你却早已是看破一切的如来佛祖，不骄不躁、气定神闲、一针见血！朋友除了当场拜你为师别无选择。</p>\n<p data-pid=\"CWvg-9Hb\">唯一要注意的是<b>不要解的太快了</b>。要记住，你是带着大家<b>通关</b>密室，不是带着大家<b>参观</b>密室</p>\n<p><img src=\"https://picx.zhimg.com/v2-b1d5cf2403d4e66c12a4f21f0e26ed0d_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"340\" data-watermark=\"watermark\" data-original-src=\"v2-b1d5cf2403d4e66c12a4f21f0e26ed0d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bi-xiao-tian-99?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">毕导</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/26481374/answer/2644128970?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">191 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/398130672?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">玩真人密室逃脱有什么技巧?</a><br><a href=\"http://www.zhihu.com/question/275300133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">.真人密室逃脱怎么玩啊？告知？</a><br>\n","link":"http://www.zhihu.com/question/26481374/answer/2644128970?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一篇攻略带你游遍泉州：乘风破浪姐姐的爱乐之城","date":"2022-08-24 08:54:35","description":"\n<p data-pid=\"Fg1YHzPa\">前面两篇游记请点击这里：</p>\n<p data-pid=\"LjTstgAe\"><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/9fa57b93f5f2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">刺桐花开，低调的宝藏之城：泉州</a><br></p>\n<p data-pid=\"HB9JkUAM\"><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/791066c2d1d2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">市井十洲人：泉州|宋元中国的世界海洋商贸中心</a><br></p>\n<p data-pid=\"8YK4jGhL\">一、交通</p>\n<p data-pid=\"5m6wpwbB\">外地需要飞到晋江机场，现在白菜价，往返600多就可以搞定。晋江机场离泉州非常近，打车30多块钱就可以到市中心。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e45f011f38d1e43aa339a836c4e0ca25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-e45f011f38d1e43aa339a836c4e0ca25_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QgIKk4Mu\">城内交通多种多样，任君选择。随手招停的泉州特色电瓶车“小白”，2元一次随意坐，绕古城一周。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e7f4237a34da44199b24afe429cf2e95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-e7f4237a34da44199b24afe429cf2e95_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"0hJ1IKqe\">没看见共享单车，共享电动车倒是有，但在古城的旅游核心区域比较少见，在晋江倒是满大街都是。</p>\n<p data-pid=\"g8tBVstn\">对于外地旅行者来说，最方便的还是泉州市政府提供的自行车，站点多，随时借还。第一小时免费，微信扫码即开。骑着自行车逛古街古巷，简直不要太便利。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b17f195a592424ef76733431cf6192f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-b17f195a592424ef76733431cf6192f3_r.jpg\"></figure><p data-pid=\"3TwsGjTY\"><br>泉州公共自行车</p>\n<p data-pid=\"EP9mDqbx\">再远的地方就打滴滴开车、出租车吧，也是秒接单。当然也可以公交车，刷支付宝、云闪付即可。</p>\n<p data-pid=\"hDW0fEuJ\">古镇、城市之间，就需要去客运中心坐车了。比如崇武古镇，票随到随买，中巴1个小时左右。需要注意的是有两条不同的线路，一条沿海边，风景无限，建议去的时候可以坐；另外一条途径洛阳桥，路程稍远，回程选择这条线顺道参观洛阳桥。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4fd7f6a68b99b3707f92181f43b6e3b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1651\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-4fd7f6a68b99b3707f92181f43b6e3b0_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"bmYpxPLB\">中巴车外面写着沿途路线，一定要看清楚再上车。师傅开车很猛，请系好安全带。</p>\n<p data-pid=\"sQqEsqTu\">对了，支付宝钻石会员福利：50公里以内免费接机，都是好车。还有机场安检快速通道，稍显鸡肋。如果要从大兴坐飞机，大兴机场线的票可以咸鱼购买，半价。机场候机VIP厅，也可以咸鱼搜搜，有惊喜。</p>\n<p data-pid=\"1gUBMU15\">二、景点</p>\n<p data-pid=\"lryCzb6H\">“地下看西安，地上看泉州”已然成了泉州这座城市的宣传语。虽然这句话是世哲老头杜撰的，但也十分贴切。</p>\n<p data-pid=\"5wxyKOEO\">泉州下辖鲤城、丰泽、洛江、泉港4个区，晋江、石狮、南安3个县级市，惠安、安溪、永春、德化、金门5个县。从地图也可以看得出来，地方是非常大的，旅游资源丰富。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4ccfee9d093cf30f24f08e80762462f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"973\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"973\" data-original=\"https://pic4.zhimg.com/v2-4ccfee9d093cf30f24f08e80762462f7_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"3EKVOesO\">下了飞机，强烈推荐第一站先到晋江五店市，离机场只有几公里。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-26fee99ea1a36c54736c777f1bd97eb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"919\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-26fee99ea1a36c54736c777f1bd97eb9_r.jpg\"></figure><p data-pid=\"tsoQdmGi\"><br>五店市传统街区中的家庙</p>\n<p data-pid=\"pf9h1C31\">第一眼就被震撼到了。首先引入眼帘的就是具有优美曲线和绚丽色彩的古建筑。独具闽南特色“皇宫起”红砖，中西合璧的洋楼，还有各式明清、民国到现代的特色建筑。蓝天、白云下，屋脊轻盈、舒展，一种谐和而含蓄的美，完全跟北方那种平直凝重的建筑风格不同。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8469d967d05f4a195ceed3d28731db1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-8469d967d05f4a195ceed3d28731db1c_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"njHrPH2w\">然后再进泉州古城区。也就是大部分游客所到的地方，鲤城区。单单一个古城，也值得花点时间慢慢逛。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c620e1c0b062d301ee09fa99c328abfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-c620e1c0b062d301ee09fa99c328abfe_r.jpg\"></figure><p data-pid=\"KssPbnpo\"><br>夜晚的关岳庙</p>\n<p data-pid=\"CzXbeRnx\">可供参观游览的景点大多集中在西街、中山路和涂门街附近。住宿也推荐住这附近，大街小巷里面藏着不少民宿。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bbda539c2bd49b64f51eba8a826517db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-bbda539c2bd49b64f51eba8a826517db_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"h5WIRWm3\">西街钟楼是城市的中心，有大名鼎鼎的开元寺，双塔。对了，记得去西街游客服务中心，上到屋顶天台，可以俯瞰西街和双塔，还有很多专门给游客准备拍照的道具，十分贴心。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-19d37eb18be379ea68ce7123734252cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"920\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-19d37eb18be379ea68ce7123734252cf_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"AZ_BmCnb\">开元寺到看点很多，所谓“六殊胜”、“八吉祥”。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a9e89decddf6ced81b092be79172b9ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"764\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a9e89decddf6ced81b092be79172b9ad_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"_Hv-e7_h\">西街两边很多古巷，不可错过的是井亭巷，因一口井和一座塔得名。定心塔在一户人家的院子里，但老太太非常友好，看我们在屋外观望，主动邀请我们进入参观拍照。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-48dfca90f34f9b7d3d6372b525ddba10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1651\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-48dfca90f34f9b7d3d6372b525ddba10_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"DurUmrCM\">东街附近的巷子里则有更加安静的承天寺，游客少了很多，一片优雅的禅意，是期待中寺庙的样子。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a06a85023bc084368936636d6d76417b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-a06a85023bc084368936636d6d76417b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"XoeSUHhd\">如果有时间，可以再去下崇福寺。它与开元寺、承天寺并称为“泉州三大丛林”。</p>\n<p data-pid=\"1MElvylP\">元妙观貌似被游客忽略了，其实这里是泉州的第一座道观，很有看点。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a132a5f7bf273710af44a40baa2e738a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-a132a5f7bf273710af44a40baa2e738a_r.jpg\"></figure><p data-pid=\"01sYoVb4\"><br>元妙观</p>\n<p data-pid=\"VZUD5CXu\">涂门街上有关岳庙、清净寺、文庙。文庙规模建筑宏大，宋元明清的建筑形式都能在这里找到，值得参观。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-99c38b744c050ff842c82ccf620993bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"920\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-99c38b744c050ff842c82ccf620993bd_r.jpg\"></figure><p data-pid=\"DYUvYKnb\"><br>文庙大门口</p>\n<p data-pid=\"t2XWS7fn\">还有宋代始建的草庵寺——我国唯一的摩尼教寺庙遗存，也是世界现存唯一摩尼教寺庙遗址。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f673b279820529d21c76c040fd744bc0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"803\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"803\" data-original=\"https://pic1.zhimg.com/v2-f673b279820529d21c76c040fd744bc0_r.jpg\"></figure><p data-pid=\"OeRjG5Dn\"><br>草庵摩尼光佛造像</p>\n<p data-pid=\"12zoTZCr\">这是来自泉州旅游局推荐的古城徒步路线，6公里1天行程：</p>\n<p data-pid=\"eTFeeHXJ\">府文庙→清净寺→关岳庙→后城街→文化宫→九一街→南俊巷→承天巷→镇抚巷→中山中路→通政巷→会通巷→肃清门→井亭巷→定心塔→西街→旧馆驿→古榕巷→花巷→濠沟墘→金鱼巷→许厝埕→旧梨园剧团(南外宗正司遗址)→三朝巷→开元寺→炉下埕→裴巷→鞋巷→新街→小城隍→威远楼→中山公园</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9ddac9976f408d1bc2a14eaf082dc687_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1651\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-9ddac9976f408d1bc2a14eaf082dc687_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"HYE3qN76\">泉州有三个特色博物馆，都是国内独一无二的。如果有时间，不妨去参观一下。海外交通史博物馆，闽台缘博物馆，泉州博物馆。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-071e5a1027adc02731ac335ec059039d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-071e5a1027adc02731ac335ec059039d_r.jpg\"></figure><p data-pid=\"coLw2id1\"><br>海外交通史博物馆</p>\n<p data-pid=\"HG2ZP73B\">再稍远的地方从地图上看有一大片绿色，那就是清源山。道教名山，这里有年代久远的老子雕像。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a6cba5b1887a7c7d8c9d2fd170b9a959_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"1651\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-a6cba5b1887a7c7d8c9d2fd170b9a959_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"oMbBf0Am\">泉山绝对是不能错过的一个地方，如果嫌70元的门票太贵，不妨跟当地大爷大妈一样起个早，搭乘28路公交车首班（6:40）一路坐到天湖站，然后一路向下，还免了门票。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2f8a59c6b29d70830b9505417fb0026e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-2f8a59c6b29d70830b9505417fb0026e_r.jpg\"></figure><p data-pid=\"nnQs_b0l\"><br>清源山俯瞰泉州，远处的是西湖公园</p>\n<p data-pid=\"K9j2hA5j\">别忘了在山顶露天茶馆喝个早茶，吃个丰盛的早点再下山，泉州人民不要太惬意。</p>\n<p data-pid=\"KsGnvoya\">看了老子雕像，出大门，打个车直奔南少林寺。对伊斯兰教有兴趣的朋友，不妨顺道再去灵山拜访一下圣墓。它们都属于一个大的片区。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-238bc35ee6a228183e46038d897e459e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1456\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-238bc35ee6a228183e46038d897e459e_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"GVEYDqBI\">洛阳桥是古代四大名桥之一，北宋书法家蔡襄修建，踩在近千年的石板上，你能想象？如果还有时间，再去“天下无桥长此桥”的安平桥走走，绝对不虚此行。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b5c13ed3e120153b9414060525e58ad8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-b5c13ed3e120153b9414060525e58ad8_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"_XCTyH-T\">泉州周边还有不少古镇，崇武是比较热门的一个，个人感觉比较失望，如果时间紧，没什么必要去。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-094e5eb0c662c0ca2da9274b1f5ad0ac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-094e5eb0c662c0ca2da9274b1f5ad0ac_r.jpg\"></figure><p data-pid=\"OJ6arqOj\"><br>崇武的海边</p>\n<p data-pid=\"F0tkbEjn\">据说永宁古镇比较值得一去，浔埔村可以看到蚵壳厝和头戴花饰的海鲜女，不过时间关系，只能下次再说了。</p>\n<p data-pid=\"MpgN9-4J\">三、美食</p>\n<p data-pid=\"wTVptpVk\">聊到吃，对着屏幕我就开始流口水。泉州美食，种类繁多，街头巷尾好多老字号。虽然有些感觉一般，但绝对有其他地方尝不到的特色。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ab3ba05811a4432159f2091b08eb54c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb\" width=\"882\" data-original=\"https://pic1.zhimg.com/v2-ab3ba05811a4432159f2091b08eb54c4_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"_xLc4hRH\">闽南人称为古早味。这么美食可上过大大小小各种美食旅行节目《舌尖上的中国》《远方的家》，最近火热的姐姐们也组团来到了这里。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-73410260f0652004eafd365f96e5bc24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb\" width=\"630\" data-original=\"https://pic1.zhimg.com/v2-73410260f0652004eafd365f96e5bc24_r.jpg\"></figure><p data-pid=\"sjgHw_r9\"><br>《姐姐的爱乐之程》首站</p>\n<p data-pid=\"1FQa5Yeh\">最有特色的是面线糊，加醋肉、大肠或各种海鲜，标配一根油条，清早一大碗满足一整天。名气比较大的店有水门国仔总店，还有后城面线糊、婷婷面线糊、西街老记面线糊等等。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4d4e9ad3eff32a18d17a66f815508972_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-4d4e9ad3eff32a18d17a66f815508972_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"4N5dz489\">面线糊对于泉州人来说有着不同的意义，不单单是早点，而是贯穿一整天，从早点到夜宵。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9cd41b2a11b942f850bb794a4f8c23b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-9cd41b2a11b942f850bb794a4f8c23b8_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"pVCBr-du\">泉州人爱吃牛肉，牛排馆遍地，但此牛排非彼牛排，乃是混合了南洋特色的改良版。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e40d8cbd5fff56e841c90ce3a0f594f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-e40d8cbd5fff56e841c90ce3a0f594f8_r.jpg\"></figure><p data-pid=\"z8Cy1Otw\"><br>阿秋牛排家的牛排</p>\n<p data-pid=\"_IMiXqoH\">好成财的名气最大，但我还是更喜欢阿秋的味道，尤其是那碗白饭就着微辣的牛排汤汁，香煞死人。但好成财的牛肉羹确实口感滑嫩，不亏是手打出来的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-08d749823a966f34aec094f7e1bd141c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-08d749823a966f34aec094f7e1bd141c_r.jpg\"></figure><p data-pid=\"suKgd05u\"><br>好成财B套餐</p>\n<p data-pid=\"I9-fgdXm\">第一次吃牛肉羹是在群众牛肉小吃，还跟kk感叹牛肉怎么能做的如此滑嫩。它家的海蛎煎也是必点。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5243e2c52f5a6b37b956a8502d0dec09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-5243e2c52f5a6b37b956a8502d0dec09_r.jpg\"></figure><p data-pid=\"flF2gJj2\"><br>海蛎煎</p>\n<p data-pid=\"Fp-LU421\">还有一家东兴牛肉店，连锁，口碑也不错。去过两次，牛肉羹很一般，相比其他店有明显差距。各种牛蹄牛筋牛杂啥的都不错，但个人最喜欢的还是干拌面——厚厚的黑芝麻酱与碱面互相纠缠，水乳交融，微甜的味道比武汉的热干面好多的多。还有应季的蔬菜一定要点，开水里一滚，浇上蒜蓉生抽，很香，很大一份只要8块钱，简直良心。鱼丸汤也成。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-38e07699f98ccb515cd437250169f81c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-38e07699f98ccb515cd437250169f81c_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ih9Y5O1V\">说到鱼丸，就不能不提车桥头文阿水丸店。如果要去崇武古镇，别忘了尝试鱼卷。炸的、煮的比蒸的好吃。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3632d1ea146faf29ef1bac9f440e6c9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"925\" class=\"origin_image zh-lightbox-thumb\" width=\"665\" data-original=\"https://pic3.zhimg.com/v2-3632d1ea146faf29ef1bac9f440e6c9a_r.jpg\"></figure><p data-pid=\"3wVR4QnI\"><br>古镇门口的瑞芳鱼卷</p>\n<p data-pid=\"wpSwN3X3\">在泉州，一路走一路吃，一天吃四五六七顿不带重复的。</p>\n<p data-pid=\"aXKgIbL6\">炸醋肉、花生汤、炸菜粿、石花膏四果汤、海蛎煎、土笋冻、润饼菜、绿豆饼、满煎糕、蒜蓉枝，烧肉粽、元宵、芋泥、芋头饼……</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3da078bb4d8dd23c4bc00444383fa24f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-3da078bb4d8dd23c4bc00444383fa24f_r.jpg\"></figure><p data-pid=\"ddwbClsw\"><br>我最爱的炸菜粿</p>\n<p data-pid=\"eMghopfw\">土笋冻必须要单独提一下，并不是什么笋之类的，而是海边的沙虫。晋江安海最为出名，口感劲道，跟小肠类似。伴着调料汁，没有什么腥味或异味。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ec6cca3b597097489a1e858b5a2c2965_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-ec6cca3b597097489a1e858b5a2c2965_r.jpg\"></figure><p data-pid=\"TE_vMW8h\"><br>土笋冻</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4085c4991821b748a30142ee40e10d38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-4085c4991821b748a30142ee40e10d38_r.jpg\"></figure><p data-pid=\"g-lkXv6I\"><br>扁食+肉粽+花生汤</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e86882aa6f9e21d8c5b5879161ec1c5b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-e86882aa6f9e21d8c5b5879161ec1c5b_r.jpg\"></figure><p data-pid=\"2B_zhWnD\"><br>阿肥炸料</p>\n<p data-pid=\"sK9p0BDN\">吃了油腻的炸物，刚好来碗当地特色石花膏。这是用海边礁石上的石花草精心熬制而成，只有沿海的地方才有。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1dd3d96aced65fad17c211694b9f05f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-1dd3d96aced65fad17c211694b9f05f6_r.jpg\"></figure><p data-pid=\"wAcOzyhq\"><br>秉正堂石花膏</p>\n<p data-pid=\"Q3VH9VCM\">林记正泉茂绿豆饼可以当手信带给同事尝尝，经典绿豆饼1包才6块钱，还有板栗、香芋等口味。个人感觉偏甜，没有什么特别。倒是蒜蓉枝有点意思，用蒜炒的麻花，可以一试。孟记食品是家老店，我回北京时买了一袋。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-44edf6db2efa3b83050dfce49b7bbd8f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-44edf6db2efa3b83050dfce49b7bbd8f_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OeZWG4Dq\">这些小吃其实不用太专门去找那些网红店，离景区稍微远点，随便找一家当地人光顾的店铺，都不会令你失望。比如裴巷的康庄满煎糕非常火，可就在西街的深处，有一家专营满煎糕的店，全是当地人来买，价格只是康庄的1/3，味道我吃不出来差别。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-90a2759975272526845e5461ec1b16d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-90a2759975272526845e5461ec1b16d9_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"HESMB0DZ\">当然一些经过时间沉淀的老店或口碑店铺还是值得探访，比如桥头醋肉，钟楼肉粽，陈阿婆肉粽，秉正堂石花膏（比网红店爱啊材料好种类全），东来菜头酸，海丝金凤，贻庆鸡爪……</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-33dfd1360ce71dc5442eb94ff0d00630_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-33dfd1360ce71dc5442eb94ff0d00630_r.jpg\"></figure><p data-pid=\"mTEPbw3L\"><br>东来菜头酸——两片酸甜的腌渍白萝卜夹花生碎糖等，别有一番风味</p>\n<p data-pid=\"aQT3dmBO\">海丝金凤的元宵，馅里花生碎、芝麻，能吃出猪油的香味。它家的芋泥也强烈推荐，就是热量有点高。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6fc5c3bf85b2a3e53aed06d9f4a71527_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-6fc5c3bf85b2a3e53aed06d9f4a71527_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6e2fd2408071de5b8bc54fb3726c656b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-6e2fd2408071de5b8bc54fb3726c656b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"dxm3GgkW\">这边的特色就是各种东西都要加花生酱。无论是烤肉还是烧肉粽，都离不了一勺秘制花生酱。上过《人生一串》的雷老虎有点远，就试了一家本地的铁霞烧烤。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f8379da6d5eaab01f8b18d437c77f76c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-f8379da6d5eaab01f8b18d437c77f76c_r.jpg\"></figure><p data-pid=\"C2T3sdGQ\"><br>陈阿婆肉粽，搅拌均匀再吃</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-eaea05c2a0223b0832ff86404208e5d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-eaea05c2a0223b0832ff86404208e5d3_r.jpg\"></figure><p data-pid=\"6imuisGO\"><br>铁霞烧烤</p>\n<p data-pid=\"t3yM7J6N\">远芳小笼包名不虚传。阿肥发扁食分店很多，但味道实在是一般般。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1febfbcb8d2b6e8e7ad5cd5ada27d4ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-1febfbcb8d2b6e8e7ad5cd5ada27d4ec_r.jpg\"></figure><p data-pid=\"DF07QzZV\"><br>远芳小笼包馅料确实不一般</p>\n<p data-pid=\"liSTpwhq\">当地的咸饭也算是特色，随便在一家小店尝了下，味道还不错，最惊喜的是葱灌肠第一次吃。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-36db1b04a10712fe124fb0e278088809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-36db1b04a10712fe124fb0e278088809_r.jpg\"></figure><p data-pid=\"3oMsJw23\"><br>胭脂巷咸饭店</p>\n<p data-pid=\"wb94L6v7\">五天正餐可能就吃了一顿斯丹姜母鸭，涂门街总店最火，饭点总是排着队。远远的就香气扑鼻而来。门口一溜砂锅，十分壮观。当地起名的还有一家忠记盐烧番鸭，据说也不错。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d459d058c489f2868a2d5d20c3d61a28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"931\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-d459d058c489f2868a2d5d20c3d61a28_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"n5Aeg7Zl\">听一个驴友说，泉州有几家不错的私房菜馆，很有特色。无奈眼大肚小，只能下次了。</p>\n<p data-pid=\"ps1b3qeK\">挂一漏万，毕竟时间有限，还有很多馆子没有尝试，大家可以自行挖掘。</p>\n<p data-pid=\"vE1YpV8S\">四、参考资料</p>\n<p data-pid=\"B2As34vG\">网站：泉州网<a href=\"https://link.zhihu.com/?target=http%3A//www.qzwb.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">qzwb.com/</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"pxNQQ6Ap\">书：《泉州味道》、《古城泉州》</p>\n<p data-pid=\"zSXtIzcC\">公众号：舌尖上的泉州</p>\n<p data-pid=\"MCFnTZcI\">喜马拉雅音频节目：潇风说泉州；老李乱谈|资深导游带你游泉州</p>\n<p data-pid=\"plS93qxY\">纪录片：央视《远方的家》之一带一路19、20、21集；《国家档案》之海丝传奇系列6集；《中国通史》73集海上丝绸之路、74集马可波罗与中国</p>\n<p data-pid=\"J-Mbe-mn\">五、</p>\n<p data-pid=\"glVNv4P8\">泉州就像藏在深门大院中的南方姑娘，等待着你去探看。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://zhuanlan.zhihu.com/p/329673745?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/329673745?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"你有过哪些有意思的旅游经历？","date":"2022-08-24 03:35:03","description":"\n<p data-pid=\"zN88WpsZ\">【多图，流量党慎入】<br>坐标：韶关，新丰。<br>在河边的大排档坐下时看到这牌。那一刻，我仿佛去到了越南首都。</p>\n<p><img src=\"https://pic2.zhimg.com/3042f8f6d4bbbd62718f6df134dcc548_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\"></p>\n<p data-pid=\"PnsS1JOE\"><br>坐标：黑龙江，哈尔滨。<br>南方人第一次滑冰滑梯，滑到冰雪大世界要关灯了还没过足瘾。回去的时候发现裆部仍旧微微湿润。</p>\n<p><img src=\"https://pic1.zhimg.com/185ff903322d335794996e386e1e3d46_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1136\" data-rawheight=\"1136\" data-size=\"normal\"></p>\n<p><img src=\"https://pic1.zhimg.com/b37ebfc7c3d7d1f29141f79566dd0f3b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1136\" data-rawheight=\"1136\" data-size=\"normal\"></p>\n<p data-pid=\"34JtKkQk\"><br>坐标：吉林，长春。<br>看妇科，到ZG。那小字印得像某个邪恶组织印在人民币上的字。</p>\n<p><img src=\"https://pic1.zhimg.com/8ab9ee3e3b491702f373eeed0700e2df_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1600\" data-rawheight=\"1200\" data-size=\"normal\"></p>\n<p data-pid=\"1mKrtpcq\"><br>坐标：辽宁，沈阳。<br>在这里分享一个东北的旅游攻略：我去年游东北的第一站是沈阳，那时候沈阳气温约莫是零下几度，这种温度下不少物质都介乎于液体和固体之间的状态。这个时候只要你在大街上走时一直看着地面，看到不少看似欲流动、实质却凝固的东西，小的像星星点点的珍珠，大的如晶莹剔透的玉石，能比较长久地镶嵌在路面上的，那就是痰。</p>\n<p><img src=\"https://pica.zhimg.com/da22a9fae5439d203247e3f4c666995c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1600\" data-rawheight=\"1200\" data-size=\"normal\"></p>\n<p data-pid=\"sjNb8nCN\"><br>坐标：澳门，路环。<br>邂逅了一幢极为梦幻的房子，相当喜欢。</p>\n<p><img src=\"https://picx.zhimg.com/8f8a9c7ed33ef3b6f139cff1646c3f9f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\"></p>\n<p data-pid=\"TVdlE4XZ\"><br>坐标：澳门，本岛。<br>万万没想到，亲眼目睹了一场万里长城上的大塞车。</p>\n<p><img src=\"https://pic1.zhimg.com/380671b10320904c2223405c0e917636_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\"></p>\n<p><img src=\"https://pic4.zhimg.com/372bb5922e9313da2899b34ee3bb13ac_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\"></p>\n<p data-pid=\"ZU6lEjYe\"><br>坐标：澳门，氹仔。<br>从银河娱乐城开往关闸的穿梭巴士停在这个位置时刚想拍张照，结果，车突然开了……我拍到了一片真正的银河系。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/cdb804422251643ae4455e323b45a5e5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3552\" data-rawheight=\"2000\" data-size=\"normal\"></p>\n<p data-pid=\"66Uuy_bU\"><br>坐标：珠海，南屏。<br>屡屡举办国际爵士音乐节的北山会馆，旁边居然是一个朋克风格的电房。</p>\n<p><img src=\"https://pica.zhimg.com/3181363a05a1f7f74d0321fee73f7219_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2448\" data-rawheight=\"3264\" data-size=\"normal\"></p>\n<p><img src=\"https://pica.zhimg.com/c78a5ebaaf0b9245b01b21e0cc683512_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\"></p>\n<p data-pid=\"Vy_LPRXl\"><br>坐标：珠海，斗门。<br>斗门旧县府，上世纪30年代旅美华侨出资修建的洋楼，解放后被人民政府征用，古今中西在这里混搭。</p>\n<p><img src=\"https://pica.zhimg.com/aad1ea10ec621d367e778dfeeb80d940_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\"></p>\n<p data-pid=\"B3uM-4xI\"><br>坐标：日本，名古屋。<br>自己人，嘿嘿。</p>\n<p><img src=\"https://pic1.zhimg.com/ed7790193f5cff32ab248376b4e56a0f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\"></p>\n<p data-pid=\"kUb9CRtd\"><br>坐标：日本，静冈县。<br>在富士山下看到这个，仿似梦回中国大东北。</p>\n<p><img src=\"https://picx.zhimg.com/b9bdef3b2a700b5cfa138fd23e77282e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"750\" data-rawheight=\"562\" data-size=\"normal\"></p>\n<p data-pid=\"roCLDqvl\"><br>坐标：日本，山梨县。<br>我们是时候要去拯救世界了。</p>\n<p><img src=\"https://pica.zhimg.com/44c35e66c602662dfc94f92a06b0b1f4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-size=\"normal\"></p>\n<p data-pid=\"36WGa693\"><br>坐标：东京，新宿歌舞伎町。<br>朱军你咋能这么想不开啊……</p>\n<p><img src=\"https://pic1.zhimg.com/e8e45dddcd57083204aa6ba6838d6589_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-size=\"normal\"></p>\n<p data-pid=\"BSYIIlDG\"><br>坐标：东京，银座。<br>终于见识了一把银座的疯狂：一个东南亚家庭，在银座马路中间的座位上跟他们购买的货物一起合照，更令人惊叹的是他们居然扫了十多二十袋的……优衣库。</p>\n<p><img src=\"https://pic1.zhimg.com/d8465505482171cb5481486f2f52fe50_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2448\" data-rawheight=\"3264\" data-size=\"normal\"></p>\n<p data-pid=\"m4CjDhEp\"><br>坐标：日本，京都。<br>花见小路在飘雪。</p>\n<p><img src=\"https://pic4.zhimg.com/d117451f3bbee07cdb8f5463c47b915c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"750\" data-rawheight=\"1000\" data-size=\"normal\"></p>\n<p><br></p>\n<p data-pid=\"ALqckqgB\">坐标：日本，大阪；深圳，南山。<br>禁止拍照！</p>\n<p><img src=\"https://pic1.zhimg.com/4eb04442f16c90987982bb8792c8483f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-size=\"normal\"></p>\n<p><img src=\"https://pic1.zhimg.com/de0aacd6abe47c2dbb0f4aafdb7e82c7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"802\" data-rawheight=\"640\" data-size=\"normal\"></p>\n<p data-pid=\"FA3pCc31\"><br>坐标：香港，油麻地。<br>记者以身体不适为理由离开了。</p>\n<p><img src=\"https://pic3.zhimg.com/6743ac950934d9e0aafd736c6eed6d06_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"960\" data-size=\"normal\"></p>\n<p><br></p>\n<p data-pid=\"D_d8J4UA\">坐标：海南，万宁。<br>一个发芽的椰子，太特么拽了。</p>\n<p><img src=\"https://pic1.zhimg.com/50bb4827f5fdedc437f6455d3880c279_720w.jpg?source=b1748391?rss\" data-rawwidth=\"480\" data-rawheight=\"640\" data-size=\"normal\"></p>\n<p data-pid=\"ZDgb7NYM\"><br>坐标：广州，沙面。<br>沙面作为外国领事馆的众多建筑当中，一般都是或大气或文艺的，唯独朝鲜驻广州经贸部的这幢建筑显得寒酸。最近一次去的时候发现牌子已经被撤了。</p>\n<p><img src=\"https://pic2.zhimg.com/777532ff20ebe1e5707a848279c16238_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\"></p>\n<p data-pid=\"4eZOFz7R\"><br>坐标：广州，天河。<br>广东省博物馆里惊现蒙面超人！</p>\n<p><img src=\"https://pic2.zhimg.com/065ed5790055b7ff55ebc56083392496_720w.jpg?source=b1748391?rss\" data-rawwidth=\"796\" data-rawheight=\"995\" data-size=\"normal\"></p>\n<p data-pid=\"9iHNEeeH\"><br>坐标：广州，从化。<br>据说有很多自称吃货的非广东人，不服广东为何要叫吃省。让我们先干一碗腊田鼠饭，来送油炸水蟑螂。</p>\n<p><img src=\"https://pica.zhimg.com/5a0d803cb395a6ca03ffe64a13d8c8d4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\"></p>\n<p><img src=\"https://picx.zhimg.com/adf86e0c80b9131aaa476de9beaab848_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3264\" data-rawheight=\"2448\" data-size=\"normal\"></p>\n<p data-pid=\"fhH6jC03\"><br>坐标：陕西，西安。<br>见识到了这里彪悍的民风……</p>\n<p><img src=\"https://picx.zhimg.com/a1a6309c79a30081c6a0c315b787998c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"296\" data-rawheight=\"567\" data-size=\"normal\"></p>\n<p data-pid=\"v84mpki0\">小学玩《梦幻西游》的时候经常到大雁塔这儿打怪做任务，今天终于有机会亲临其境了。</p>\n<p><img src=\"https://pic3.zhimg.com/5b5f6a158d3fce525e9ab25ffd535294_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"HmTDT5kC\"><br>坐标：陕西，临潼。<br>看到这个告示牌时其实会很容易导致叛逆心理的哈哈哈哈</p>\n<p><img src=\"https://picx.zhimg.com/2a16b4c98b4a8b703b5007da617c2a7e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p data-pid=\"LZ1baivF\">早在几年前去陕西时，我就在微博说汉堡包的起源是肉夹馍。</p>\n<p><img src=\"https://picx.zhimg.com/09ceda26b11dcc79581d8af596bf8ef9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p><br></p>\n<p data-pid=\"RcIxkjh4\">坐标：陕西，华阴。<br>在华山上面的cafe，星巴克算个屁哦。</p>\n<p><img src=\"https://pic1.zhimg.com/cb62e27806c69b39cb34eb90004a63fb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p data-pid=\"4kdKbQYz\"><br>坐标：河南，郑州。<br>翻版小蛮腰VS翻版伦敦眼</p>\n<p><img src=\"https://pic1.zhimg.com/29be63f9e355b42c2e7f523df20fca18_720w.jpg?source=b1748391?rss\" data-rawwidth=\"644\" data-rawheight=\"889\" data-size=\"normal\"></p>\n<p data-pid=\"104Ve6hi\"><br>坐标：河南，开封。<br>开封铁塔公园内，感受到阵阵热浪。细想一下，原来是因为开封古称东京。</p>\n<p><img src=\"https://picx.zhimg.com/7f751307fb5ed4aec68d9ebfb7d9d4ec_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p data-pid=\"CSL8KkNY\"><br>坐标：山东，泰安。<br>在泰山的天街前面发现了这只淡定地看着各方游客的猫咪。不知道它是不是被天庭贬下来的、神仙化作的仙猫，在打量着心中的有缘人。</p>\n<p><img src=\"https://pic2.zhimg.com/d59b4b0704e46a60de02b7c7f970cb1f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"480\" data-rawheight=\"640\" data-size=\"normal\"></p>\n<p data-pid=\"P1ecJFAJ\"><br>坐标：山东，济南。<br>虽然导游说这是黑虎泉，但我从始到终都只能看到黑屌泉……</p>\n<p><img src=\"https://pic1.zhimg.com/8f1118a5dfcfa49a674f22878ab63e49_720w.jpg?source=b1748391?rss\" data-rawwidth=\"480\" data-rawheight=\"640\" data-size=\"normal\"></p>\n<p data-pid=\"N91gylhc\">1948年，孔子的第七十七代孙、最后一代“衍圣公”孔德成跟随国民党撤退到台湾。由于对“批林批孔”中红卫兵对祖屋以及祖坟作出的破坏深感愤怒。</p>\n<p><img src=\"https://picx.zhimg.com/cc7fbc069d2877d6493a678385bf0397_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"kJW41XZn\">在那十年里面，孔庙孔林里面的石碑被严重破坏。但有一些题字碑例外，其中以两块碑最为讽刺:一块是金代文学家、书法家党怀英题写的，因为当红卫兵来破坏时说:啊，他姓党；另一块是明太祖朱元璋题写的，因为他农民出身，通过带领起义，最终当上了开国皇帝。</p>\n<p><img src=\"https://picx.zhimg.com/a7f7de5704a4f7bb317af12ae3e49c73_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"XWU9QfJZ\"><br>坐标：山东，烟台。<br>前面山岭延伸到海洋里的地方，正是黄海和渤海的分界线。说点政治意味的话，他们原本属于一样的水质，一样的补给水源，却因为人为上的分界，硬生生地分成两片海域，后代亦沿袭不同分区生长，一片是被当局严严控制的内海，另一片却是主权不能完全掌控的海区。</p>\n<p><img src=\"https://pic2.zhimg.com/de8c6c02b7827c7c8f4e02ec63bdd2ac_720w.jpg?source=b1748391?rss\" data-rawwidth=\"525\" data-rawheight=\"381\" data-size=\"normal\"></p>\n<p data-pid=\"uMYO_L0v\">去蓬莱之前，我居然一直以为来这里就能看到海市蜃楼，至少看到的几率很大。地陪导游说她带团六年，来过多次蓬莱，却没有看过一次海市蜃楼。蓬莱阁上的一副对联“海市蜃楼皆幻影，忠臣孝子即神仙”就能最好地概括这一切，这种华丽的光的折射只是一种可遇不可求的幻象，关键是我们能做好本分，活在当下。</p>\n<p><img src=\"https://pic1.zhimg.com/fb002651f015e5cfab1bc3693740dc8a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"-SEBts6s\">补充一点，之前在青岛喝完啤酒，尿色就被啤酒同化成黄色了。去蓬莱之前又去了趟张裕卡斯特酒庄，喝了葡萄酒，深红色的，感觉有点虚。</p>\n<p data-pid=\"C_NPb7K_\">坐标：山东，威海。<br>看到了鲸鱼的一些好像很厉害的东西。</p>\n<p><img src=\"https://pica.zhimg.com/26cd236181d4de00f0ebfe408308f62a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"gEGGVmqc\">当时在海边买的一对水母。它们的孩子也在瓶子里面，还没长成形，但已经夭折了。它们每隔一段时间便会用“头盔”去顶起孩子，希望它能够醒来。我没有把那尚未长成的孩子的尸体捞出来，因为它的父母不忍与它分离，即使它已经过早地与这个世界匆匆离别。</p>\n<p><img src=\"https://pic1.zhimg.com/6f0a7f16cd5486cd5bad9e6367571040_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"894\" data-size=\"normal\"></p>\n<p data-pid=\"vTUprawn\"><br>坐标：山东，青岛。<br>来到了一座全新的城市，青鸟。</p>\n<p><img src=\"https://picx.zhimg.com/870a61795f931ee361904ab0cd4fbbc0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p data-pid=\"EeeZJdgI\">五四广场上的标志性火炬，犹如中国馆正在遭遇一场龙卷风。</p>\n<p><img src=\"https://pic3.zhimg.com/0044fdc2bfc1140f24b30fb3a19cc9a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"480\" data-rawheight=\"640\" data-size=\"normal\"></p>\n<p data-pid=\"RxHGjb8k\"><br>坐标：广西，阳朔。<br>老爷爷和他的鱼鹰，只要老爷爷一喊出某种声音，鱼鹰就会整齐划一地扑腾起翅膀。</p>\n<p><img src=\"https://pic1.zhimg.com/27f4f5bf3bab6a2bd7b5d68ff173bdfd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"600\" data-size=\"normal\"></p>\n<p data-pid=\"IOyZGXH2\">有时候世外桃源跟和废弃的工业文明交织在一起，会碰撞出一种独特的唯美。</p>\n<p><img src=\"https://pic2.zhimg.com/2672b162d964d7ea909f0dfd45d27e8d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"600\" data-size=\"normal\"></p>\n<p data-pid=\"Dmm-VLki\"><br>坐标：上海，静安。<br>高二那年我入围了全国新概念作文大赛决赛，拿了个小小的二等奖。</p>\n<p><img src=\"https://picx.zhimg.com/876be86887f8faf1750f1970c51a2d18_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\"></p>\n<p data-pid=\"Lr_K5vZ7\">那也许是我一生人中最接近自己梦想的时刻。</p>\n<p><img src=\"https://pic1.zhimg.com/4667ebd8dc1c65c3479ac6dca9a248d8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"480\" data-size=\"normal\"></p>\n<p data-pid=\"iliISEIB\"><br>坐标：上海，浦东。<br>英国馆就像一个欠爆的菊花。</p>\n<p><img src=\"https://pic1.zhimg.com/f32ccf898c34b313723f30ae28d73b29_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p data-pid=\"dgdvxtQF\"><br>坐标：上海，黄浦江上。<br>我在中国夜游过的江中，感觉黄浦江夜游景色最棒，重庆两江夜游其次，作为广东人也要说一句珠江夜游屁都不是。</p>\n<p><img src=\"https://pic1.zhimg.com/797605534b73973b81135dc74b285db5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p data-pid=\"L_F3eHIk\"><br>坐标：浙江，杭州。<br>一千多年前，南宋皇帝逃亡时被西溪的美景吸引住了，曾想在此处建皇城。后来他找到了凤凰山，便说了一句“西溪且留下”，自此西溪被留下了许多年。</p>\n<p><img src=\"https://pic2.zhimg.com/427a3b6f6bcfaaf1bfab76abfedf2030_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p data-pid=\"lgYWpdKl\">在吴山公园，发现了几只在吃东西的流浪小奶猫。</p>\n<p><img src=\"https://pic1.zhimg.com/25e21dba645628d53bca706435985d71_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p><br></p>\n<p data-pid=\"oxg-N0YD\">坐标：北京，东城。<br>当时是初中，第二次去北京，但毕竟年纪还小，天安门广场旁边这个古典又气派的公厕简直震撼了我幼小的心灵。</p>\n<p><img src=\"https://pic2.zhimg.com/f2ab7a224994a5d66bf878bdb03fa0a4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p data-pid=\"Ict_6nzZ\"><br>坐标：北京，宣武。<br>传说中最出名的鸭店。</p>\n<p><img src=\"https://pic2.zhimg.com/6825edfdf498a964e41f32c322b79e86_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"503\" data-size=\"normal\"></p>\n<p data-pid=\"xDESzxAq\"><br>坐标：河北，秦皇岛。<br>远处那个威远门，就是当年吴三桂引清兵入关的地方。几百年前，物是人非。几百年后，亦物是人非。</p>\n<p><img src=\"https://picx.zhimg.com/5cc73dbfeeb3e8615beda6d7d528f4ec_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"502\" data-size=\"normal\"></p>\n<p data-pid=\"NJUjGMv5\"><br>坐标：贵州，安顺。<br>结尾部分来张彩蛋，那是我十一岁的时候，跟这辈子最好的基友在黄果树瀑布前的合照。那时候我们还没开始经历青春，转眼间现在青春都快要结束了。</p>\n<p><img src=\"https://pic3.zhimg.com/ab0ebd9142975b90d8d74869113f5f78_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"600\" data-size=\"normal\"></p>\n<p><br></p>\n<p data-pid=\"sacNVJUO\">坐标：宿舍，电脑前。<br>更早的已经找不到照片了，已经忘了当初存到哪里。在知乎记录下这些，只是为了多年以后回味，发现自己还是去过不少有意思的地方，也是一个有意思的人。<br>以上。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/VincentLai?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">铁血中锋郭四娘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24612119/answer/46969025?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">186 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/345154050?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大家有哪些有趣的旅游经历，跟大家分享一下呗？</a><br><a href=\"http://www.zhihu.com/question/458739590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你经历过最独特的旅游经历是什么？</a><br>\n","link":"http://www.zhihu.com/question/24612119/answer/46969025?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"7月美联储会议纪要","date":"2022-08-23 04:09:01","description":"\n<p data-pid=\"AVgGtQei\">市场对于上周三发布的美联储会议纪要异常安静。这不但是说股市债市未见大幅波动，更重要的是，媒体并没有做详细报道，尤其是我关注的Bloomberg。秉承着“闷声发大财”的原则，我认为不被报道的信息就是最好的信息。我们一起看看会议纪要里到底有什么内容。</p>\n<p data-pid=\"pmjtUbFk\">总结一下，美联储的技术官员提供的信息表明，虽然目前金融系统与私人部门的资产负债表都比较健康，不存在系统性风险，但是受消费疲软和信贷收紧的影响，经济下行压力增加；虽然TIPS所反映的未来通胀走低，但技术官员给出的建议是通胀在未来仍倾向于上升。这些基本也是FOMC政策制定者认同的观点。</p>\n<p data-pid=\"_jgUAZQW\">政策制定者的讨论中，我觉得最有价值的是最后三段话：</p>\n<blockquote data-pid=\"daYz1SJr\">Participants judged that a significant risk facing the Committee was that elevated inflation could become entrenched if the public began to question the Committee's resolve to adjust the stance of policy sufficiently. If this risk materialized, it would complicate the task of returning inflation to 2 percent and could raise substantially the economic costs of doing so. <br>与会者认为，美联储面临的一个巨大的风险就是，当公众开始怀疑美联储加息治理通胀的决心后，通胀会更加难以控制。如果公众真的开始这么想，那么回到2%的通胀目标将变得非常复杂，且将让美国经济付出更大的代价。</blockquote>\n<p data-pid=\"teI6w6Eb\">其实这段话说的就是在六月与七月间，美国市场中认为美联储将要提前停止加息的声音抬头，会对美联储控制通胀的任务带来巨大的麻烦。麻烦之一就是，宣传软着陆与通胀降温会通过抬高民众的预期收入来刺激消费与（非理性）投资。</p>\n<blockquote data-pid=\"VIsz1EQm\">Many participants remarked that, in view of the constantly changing nature of the economic environment and the existence of long and variable lags in monetary policy's effect on the economy, there was also a risk that the Committee could tighten the stance of policy by more than necessary to restore price stability. These participants highlighted this risk as underscoring the importance of the Committee's data-dependent approach to judging the pace and magnitude of policy firming over coming quarters.<br>很多与会者提到，由于经济形势是在不断变化的，并且货币政策的传导具有延迟性，美联储的货币政策也有可能为了对抗通胀而<b>过度紧缩。为了避免这个风险，美联储应该依照经济数据对未来几个季度的紧缩步伐与幅度进行调整。</b>\n</blockquote>\n<p data-pid=\"lF7Fz_zt\">这句话其实是过去一个月美股大涨的政策背景。虽然宏观前景仍然有很大的不确定性，但是提出依照数据来调整加息政策，而不是用前瞻指引的思路来确定未来的加息路径，给了美联储一个市场需要的“台阶”。而卖方经济学家们，也可以根据这个“台阶”，告诉他们的客户，最近的上涨其实不是由于哪个阴谋家为了吸引韭菜进场，不是量化交易员为了实现仓位风险中性的技术反弹，也不是为了将点位拉到期权行权价之上的合谋操作，而是有央行背书的理性行为。</p>\n<blockquote data-pid=\"-94lXrAc\">Participants reaffirmed their strong commitment to returning inflation to the Committee's 2 percent objective. Participants agreed that a<b> return of inflation to the 2 percent objective was necessary for sustaining a strong labor market. </b>Participants remarked that it would likely <b>take some time </b>for inflation to move down to the Committee's objective. Participants added that the course of inflation would be influenced by various nonmonetary factors, including developments associated with Russia's war against Ukraine and with supply chain disruptions. Participants recognized that policy firming could slow the pace of economic growth, but they saw the return of inflation to 2 percent as critical to achieving maximum employment on a sustained basis.<br>最后一段：与会者重申了他们对于将通胀打回2%的强烈意愿，并认为，通胀回到2%是让劳动市场保持健康的<b>前提条件。</b>与会者提到，让通胀回落需要<b>一定的时间，且受到诸多非货币因素的影响，</b>包括俄乌战争与供应链问题。<b>与会者承认，紧缩政策不可避免的会带来经济降速，但是，回到2%的通胀目标对于保持就业最大化至关重要。</b>\n</blockquote>\n<p data-pid=\"t2mmXtEf\"><b>但是，如果卖方经济学家们肯再多说一嘴，应该提到：</b></p>\n<ul>\n<li data-pid=\"1BEISHGb\"><b>央行认为通胀回落是就业稳固的前提条件</b></li>\n<li data-pid=\"5AykvqD6\"><b>通胀回落多快没有定数，且货币政策不完全决定其变化</b></li>\n<li data-pid=\"jjBk__7A\"><b>美联储会议纪要通篇都在说，通胀没有到达拐点，且有较大的向上空间。</b></li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b0568e8871020bf1a839d25bc12ceb9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2990\" data-rawheight=\"1608\" class=\"origin_image zh-lightbox-thumb\" width=\"2990\" data-original=\"https://pic2.zhimg.com/v2-b0568e8871020bf1a839d25bc12ceb9d_r.jpg\"></figure><h2>附录A：美联储会议纪要摘要</h2>\n<h3><b>Developments in Financial Markets and Open Market Operations</b></h3>\n<ul>\n<li data-pid=\"OcTkyKZY\">Market-based measures of near-dated inflation compensation declined and continued to suggest that inflation would ease in the coming quarters.</li>\n<li data-pid=\"quN5WQyi\">In the Desk surveys, respondents also expected inflation to decline substantially in 2023 but assigned meaningful probabilities to a wide range of potential outcomes, including scenarios involving continued elevated rates of inflation</li>\n<li data-pid=\"q9gKqc9z\">Nearly all respondents to the Desk survey anticipated a 75 basis point increase in the target range at the current meeting, and most expected a 50 basis point increase in September to follow</li>\n<li data-pid=\"AkooTcts\">The market-implied path of the federal funds rate indicated a peak policy rate of around 3.4 percent, significantly lower than at the time of the June meeting.</li>\n<li data-pid=\"7PtTnr1J\">Along lines similar to U.S. developments, market-implied policy rates in most advanced foreign economies fell at longer horizons and reflected expectations that policy rates would reach peak levels by early 2023.</li>\n<li data-pid=\"h5AZaTQM\">The deputy manager anticipated that, in the near term, the evolution of take-up at the ON RRP facility would continue to depend on changes in the supply of safe, short-term investments, and the demand for such investments by money market mutual funds (MMMFs)</li>\n<li data-pid=\"_3W_b3W8\">Treasury coupon principal payments would first fall below the $60 billion cap in September, with the remainder of redemptions met with maturities of Treasury bills. </li>\n<li data-pid=\"B5X_aQGB\">Paydowns of agency mortgage-backed securities (MBS) were projected to fall below the higher September cap of $35 billion beginning in September.</li>\n</ul>\n<h3>Staff Review of Financial Situations</h3>\n<ul>\n<li data-pid=\"2PM9lrfw\">Over the intermeeting period, nominal and real Treasury yields declined significantly, reportedly reflecting increased investor concerns about downside risks to the growth outlook as well as a decline in inflation compensation.</li>\n<li data-pid=\"WGnt7aTv\">Broad equity price indexes were higher over the intermeeting period, amid heightened volatility. Declines in interest rates likely supported stock prices over the period, while some positive earnings releases suggested to investors a less pessimistic corporate outlook.</li>\n<li data-pid=\"wQp7x0gP\">Investors' concerns about global economic growth intensified amid weaker-than-expected data on economic activity and uncertainty about the supply of natural gas from Russia to Europe.</li>\n<li data-pid=\"Cl8Oh69H\">Secured overnight rates remained soft relative to the ON RRP offering rate, with the downward pressure on rates attributed to continuing declines in net Treasury bill issuance, elevated demand for collateral in the form of Treasury securities, and MMMFs maintaining very short portfolio maturities amid uncertainty about the near-term outlook for policy rate increases. Consistent with the downward pressure on repo rates, daily take-up in the ON RRP facility increased.</li>\n<li data-pid=\"8ldDlHJI\">Sovereign yields and medium-term inflation compensation measures in major AFEs, most notably in the euro area, moved down</li>\n<li data-pid=\"ODaxHuNN\">In the euro area, peripheral sovereign spreads were little changed following the widely anticipated announcement by the European Central Bank of its Transmission Protection Instrument that could be activated to counter disorderly conditions in euro-area bond markets</li>\n<li data-pid=\"y97yoBwJ\">In domestic credit markets, longer-term borrowing costs for households and businesses with higher credit ratings declined over the intermeeting period but borrowing costs for lower-rated firms were higher, on net. The credit quality of businesses, municipalities, and households remained stable.</li>\n<li data-pid=\"3kgvAHyl\">Borrowing costs linked to shorter-term interest rates generally increased, largely as a result of expectations of tighter monetary policy.</li>\n<li data-pid=\"7_UL4lx7\">The credit quality of nonfinancial corporations remained strong with low volumes of defaults on corporate bonds in May and on leveraged loans in June. The volume of rating downgrades on speculative-grade credit in the corporate bond market was similar to that of upgrades in June, while for leveraged loans, the volume of downgrades exceeded the volume of upgrades in May and June.</li>\n<li data-pid=\"tCp_zeAZ\">Credit card and auto credit delinquency rates rose somewhat over the first quarter but remained subdued by recent historical standards.</li>\n<li data-pid=\"s9xPwRMN\">Business loans at banks expanded at a rapid pace in May and June, despite higher interest rates and a more uncertain economic outlook. C&amp;I loans on banks' books continued to grow robustly, with the July SLOOS citing reasons of <u>increased demand by customers to finance inventory and accounts receivable.</u>\n</li>\n<li data-pid=\"dcw75HZ9\"><u>The staff provided an update on its assessment of the stability of the financial system and, on balance, characterized the vulnerabilities of the U.S. financial system as moderate, down from notable in January.</u></li>\n<li data-pid=\"VPmmmQV7\">The staff assessed that households were in a better position than in the mid-2000s to weather a downturn in house prices ... In addition, the staff assessed that business leverage was high, but businesses maintained ample cash on hand and their credit quality remained strong. <u>Further, the ability of most firms to service their debt was at a historically high level, as measured by the interest coverage ratio.</u>\n</li>\n<li data-pid=\"k6jJi-b4\">The staff assessed that leverage in the financial sector remained moderate ... the recently concluded stress tests suggested that participating banks could absorb losses from a severe recession without breaching regulatory minimums</li>\n<li data-pid=\"mEFZzmri\">Yields offered by MMMFs were well above those offered by banks, and the staff noted that this yield differential would attract inflows to MMMFs. Noting the structural vulnerabilities associated with MMMFs, the staff highlighted the need to monitor the size and fragility of this sector and the progress of the Security and Exchange Commission's recently proposed reforms. The staff noted that open-end bond and loan mutual funds, which are also vulnerable to large-scale investor withdrawals, had experienced outflows as interest rates rose. These outflows had proceeded in an orderly manner.</li>\n</ul>\n<h3><b>Staff Economic Outlook</b></h3>\n<ul>\n<li data-pid=\"2p7z8npy\">The projection for U.S. economic activity prepared by the staff for the July FOMC meeting was <b>noticeably weaker than the June forecast</b>, reflecting the economy's reduced momentum and current and prospective financial conditions that were expected to provide less support to aggregate demand growth. </li>\n<li data-pid=\"P-13DbbE\">As a result, <b>while the projected level of real GDP remained above potential this year, the gap was expected to have closed by the second half of 2023. </b>\n</li>\n<li data-pid=\"i-bNAibq\">Similarly, <b>the unemployment rate was projected to start rising in the second half of 2022 and to reach the staff's estimate of its natural rate at the end of next year.</b>\n</li>\n<li data-pid=\"1VupYYX9\">(此处省略一万字的 inflation bullshits)</li>\n<li data-pid=\"I8AuNPg0\">The staff continued to judge that the risks to the baseline projection for real activity <b>were skewed to the downside</b>, noting that supply chain bottlenecks, Russia's war against Ukraine, weak incoming data on spending, and the tightening in financial conditions since the start of the year supported this assessment. </li>\n<li data-pid=\"lBC06I6w\">The staff viewed the risks to the inflation projection as <b>skewed to the upside</b> given the persistent upward surprises seen in the inflation data, the possibility that inflation expectations would become unanchored as a result of the large increase in actual inflation over the past year, and the risk that supply conditions would not improve as much as the baseline projection assumed.</li>\n</ul>\n<h3><b>Participants' Views on Current Conditions and the Economic Outlook</b></h3>\n<ul>\n<li data-pid=\"EFG-kn6I\">Participants observed that the labor market remained strong ... many participants also noted, however, that there were some tentative signs of a softening outlook for the labor market</li>\n<li data-pid=\"FL1nUIXi\">Participants noted that indicators of spending and production pointed to less underlying strength in economic activity than was suggested by indicators of labor market activity. With employment growth still strong, the weakening in spending data implied <b>unusually large negative readings on labor productivity growth for the year so far</b>.</li>\n<li data-pid=\"7WAdAbNn\">Participants remarked that, although recent declines in gasoline prices would likely help produce lower headline inflation rates in the short term, declines in the prices of oil and some other commodities could not be relied on as providing a basis for sustained lower inflation, as these prices could quickly rebound</li>\n<li data-pid=\"tOpopkcQ\">Participants <b>agreed that there was little evidence to date that inflation pressures were subsiding</b>. They judged that inflation would respond to monetary policy tightening and the associated moderation in economic activity with a delay and would likely stay uncomfortably high for some time.</li>\n<li data-pid=\"zRBAmcXX\"><b>Uncertainty about the medium-term course of inflation remained high, and the balance of inflation risks remained skewed to the upside. </b></li>\n<li data-pid=\"Ll_ywndZ\">Participants saw the risks to the outlook for real GDP growth as primarily being to the downside.</li>\n<li data-pid=\"uDP6aJ5V\">Participants remarked that moving to a restrictive stance of the policy rate in the near term would also be appropriate from a risk-management perspective because it would better position the Committee to raise the policy rate further, to appropriately restrictive levels, if inflation were to run higher than expected.</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://zhuanlan.zhihu.com/p/556152757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/556152757?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《黑神话：悟空》8 月 20 日实机剧情片段与 GeForce 独家实机试玩中，有哪些值得关注的信息？","date":"2022-08-22 12:18:17","description":"\n<p></p>\n<p data-pid=\"HmN2zBKG\">一直很期待黑神话悟空，也从小到大喜欢看各种各样的西游题材作品，对游戏中的怪物和战斗都很喜欢。</p>\n<p data-pid=\"GXCb9yTR\">我是做建筑的，对古建筑特别是唐宋木构，也曾花了些年头在上面，所以看视频的时候，难免会特别关注其中的古建筑场景。</p>\n<p data-pid=\"fg7n0dwE\">当然，由于并没有游戏背景和内容的完整信息，没有办法做准确的判断。另外就是正片的虚化太厉害，建筑物的细节很模糊，不过有了亲自答的插曲视频，看得就稍微清楚一些。</p>\n<p data-pid=\"ijKUqU4i\">只是看这两个视频，感觉里面的中式古建筑风格有几个比较明显的问题。</p>\n<hr>\n<h2>1 年代问题</h2>\n<p data-pid=\"DdT2ClWV\">一般来说，西游记是限定在唐朝的故事，但从几个主要的建筑构件和做法来看，视频中的建筑群基本是明清建筑风格，而不是唐宋建筑风格。</p>\n<p data-pid=\"444sIGEj\">比如屋顶的形制和尺度，整个院落都是偏低偏小，特别是正殿已经做到了重檐歇山，但其鸱尾、屋脊、脊兽的形式和檐口及檐下的做法，都太轻薄和瘦小，而不是唐代那种饱满肥大的样式。</p>\n<p data-pid=\"btgdg-fX\">至于视频中的屋顶瓦作和立面隔扇的形式，其实究其来源也不难找，大体上是江南地区园林和古村落里的明清古建筑的样式，包括场景中的色彩和画面的调性，看起来也更接近于南方而非西游记发生的山西-西域一代的北方。</p>\n<p data-pid=\"vrOQ-3RT\">当然也不是说，只要是较大规模的建筑，就必须是按照标准官方法式去做，但从唐以后整个北方地区的历史建筑遗存来看，北方的建筑风格演变是较为缓慢和偏古的，比如宋辽金时代的辽国区域建筑，虽然时间与北宋并列，但其建筑风格长期停留在唐代，比同时代宋代建筑更加肥大和低缓。</p>\n<p data-pid=\"EVCMHWFf\">而且在古代中国，建房子并不是很轻松的事情，稍微大点的建筑，都会比较讲究，比如地处偏僻的平遥，五代所建的仅仅三开间的平遥镇国寺大殿，也是用足了斗拱级别，而视频中的院落规模和大妖的身份，用的南方民间的建筑风格，难免让人怀疑。</p>\n<h2>2 官式和民间的问题</h2>\n<p data-pid=\"kZK-FkT-\">中国古建筑一直有官式和民间的区别。特别在唐宋时期，官方的殿堂式和民间的厅堂式的区别是非常明确的。殿堂式的主要特征是斗拱和梁枋形成的类似空间网架的结构层，压在柱头之上，俗称抬梁式，而厅堂则是横梁插在立柱上，立柱通常到顶，俗称穿斗式。</p>\n<p data-pid=\"BmSMusG8\">一般来说大型、官方的建筑用殿堂式，小型、民间的建筑用厅堂式。视频中即使是比较宏大的正殿，也是厅堂式而非殿堂式。看起来同样是采用了南方比较多见的样式。而我调研过的一些北方古建筑，即使是偏远小院，也会有殿堂式的做法，比如少林寺后山上的初祖庵。</p>\n<p data-pid=\"UjJxv5V1\">除非是说蜘蛛精特别重视朝廷规定，拒绝僭越，不管房子多大、开间超标，也坚持使用民间做法。</p>\n<p data-pid=\"cW4BX5AW\">另外就是存档的土地庙，用了歇山顶和精细的装饰，但从其风格比例来看，也更像明清做法，而我过去几十年见过的民间小土地庙，其实大部分是很朴素和粗壮的。</p>\n<h2>3 南方和北方的问题</h2>\n<p data-pid=\"IyYPdUm3\">如前所述，整个视频的建筑做法都偏向于南方，比如相对更细且不做卷杀的立柱用材，细长的牛腿，较为单薄的屋面做法（没有双层飞椽和望板但又有封檐板）。虽然古代北方也做板瓦，如佛光寺，但尺度通常较大，而且殿堂通常还是用筒瓦。还有就是院墙顶上的叠瓦为屋脊的做法，也是典型的江南做法。甚至可以说，这种小青瓦的做法基本上是北方不用的，我想制作方未必分清楚北方古代板瓦和南方小青瓦的区别。</p>\n<p data-pid=\"dhIiGeAa\">当然，确实是南方庭院更有意境，也更招人喜欢，真是北方古代院落是比较粗猛浑厚的，不那么符合现在的公共审美。如果是刻意选择了南方明清民间风格，也不是不行，就看剧情上怎么圆了。</p>\n<hr>\n<p data-pid=\"j3ae5ruJ\">游戏只是游戏，其实也没有太大的必要处处求真，考据历史。何况还是幻想类游戏。</p>\n<p data-pid=\"sqP5MFtD\">但我听说游戏科学对传统建筑和雕塑专门做了调研，还去了我很喜欢的双林寺，态度是很严谨的，所以就顺手提一些意见。</p>\n<p data-pid=\"c4ayO9gH\">建筑学已经是小众行业，建筑历史更是小众中的小众，专业研究者全国不过千人规模。要真做的地道、准确，也确实是难为了一般的游戏美工。</p>\n<p data-pid=\"IYDh8QI6\">但是如果较真的话，起码南北方、明清和唐宋的区别，还是非常明显的，并且对场景的氛围效果影响很大，普通群众也都能感受到区别。</p>\n<p data-pid=\"JjiZ-EnZ\">否则像刺客信条、魂系游戏，也不会下大力气去复原他们的古代建筑的面貌。</p>\n<p data-pid=\"-kJyhIpq\">如果真想把古建筑做地道，可以来问我，专业建筑师和建筑史学者参与游戏场景设计在发达国家还是常见的。我的博士论文写的是当代汉地佛教建筑，古代佛教建筑是基础，前几年把藏传的也写了点，算是补了个短板，不过南传的不熟悉，印度的也没去过，只是看过文献。</p>\n<p data-pid=\"4n76h7AY\">我又查看了一下前两年的老视频，有些建筑是比较专业的，但也有些局部看出来是不匹配唐代北方风格的。看起来可能团队比较大，不是每个部分的建筑专业程度都是一样的。还有的局部看起来是仿的日式，如观音禅院的内院主建筑入口。</p>\n<p data-pid=\"aSTDOF-o\">希望黑神话能早日上市吧，只要能大概差不多达到预告视频的水平，哪怕短一点，也一定要买的。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6c50f91f1c442b501053244581105431_720w.jpg?source=b1748391?rss\" data-caption=\"屋顶做法看起来就是江南明清风格\" data-size=\"normal\" data-rawwidth=\"2725\" data-rawheight=\"1504\" data-watermark=\"watermark\" data-original-src=\"v2-6c50f91f1c442b501053244581105431\" data-watermark-src=\"v2-00b24b64e711bd6bf4aee5e1d6fdba62\" data-private-watermark-src=\"v2-ed579b68bd1c55f80eb8e3ded2b0d0a7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d2d8213af23ce31ef150b1f893466473_720w.jpg?source=b1748391?rss\" data-caption=\"远景檐下的三跳七铺作看起来是唐式的，但檐口飞椽做法明显不匹配形制。\" data-size=\"normal\" data-rawwidth=\"1968\" data-rawheight=\"1533\" data-watermark=\"watermark\" data-original-src=\"v2-d2d8213af23ce31ef150b1f893466473\" data-watermark-src=\"v2-3e2a58e3c017fa96a1a9ecec70779db5\" data-private-watermark-src=\"v2-5c33219c14d7cd139c9950f25807fee0\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-262b4fe502061908f157d3099fc97b05_720w.jpg?source=b1748391?rss\" data-caption=\"山西平遥镇国寺大殿，五代北汉天会七年（963年），房子不大，斗拱不小。屋檐瓦当和双层椽很隆重。\" data-size=\"normal\" data-rawwidth=\"3872\" data-rawheight=\"2592\" data-watermark=\"watermark\" data-original-src=\"v2-262b4fe502061908f157d3099fc97b05\" data-watermark-src=\"v2-11dc7d5367b14b1dc7e8278b9602b0db\" data-private-watermark-src=\"v2-144d31710088918d2774bc872bcd42a5\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-7106b8e95a0d6a1add69a677d7feae3f_720w.jpg?source=b1748391?rss\" data-caption=\"我们二十多年前制作的唐宋木构建筑模型，可见其殿堂式木构架的面貌。\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"540\" data-watermark=\"watermark\" data-original-src=\"v2-7106b8e95a0d6a1add69a677d7feae3f\" data-watermark-src=\"v2-50fb07350c08e6215737432bdd5e9000\" data-private-watermark-src=\"v2-861fae78da39f4e887df43db2c157fd0\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-d742e10cae16b07159440dd5519880b9_720w.jpg?source=b1748391?rss\" data-caption=\"我们做的佛光寺模型，注意其巨大的鸱尾，占比很高的斗拱层，复杂的檐口。\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"1125\" data-watermark=\"watermark\" data-original-src=\"v2-d742e10cae16b07159440dd5519880b9\" data-watermark-src=\"v2-5a7dddaf246b67536b551e68c7b4d284\" data-private-watermark-src=\"v2-c8b26315f1c7870d65fcec37aa0d57ea\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c2cb49503d56f69556130c451535bb2f_720w.jpg?source=b1748391?rss\" data-caption=\"视频中的梁架和檐口以及椽子做法，明显是江南民宅的特征。\" data-size=\"normal\" data-rawwidth=\"2830\" data-rawheight=\"1542\" data-watermark=\"watermark\" data-original-src=\"v2-c2cb49503d56f69556130c451535bb2f\" data-watermark-src=\"v2-4dc8e30398eb78f562ba14abd4323185\" data-private-watermark-src=\"v2-3777f96a91cbf37961c1fe0004092655\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4aed35a2342a0d1cf26bf26e5a56090d_720w.jpg?source=b1748391?rss\" data-caption=\"佛光寺照片，正规唐代建筑的斗拱和屋檐，今天看来经常是很夸张的。\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1544\" data-watermark=\"watermark\" data-original-src=\"v2-4aed35a2342a0d1cf26bf26e5a56090d\" data-watermark-src=\"v2-30938ab0935e03b1a2a6f9564c2e49e9\" data-private-watermark-src=\"v2-5c8150e8ea3fdafd74ac30a8943400bd\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-c091f76a7d3805762d7df1161db7b2f8_720w.jpg?source=b1748391?rss\" data-caption=\"大同善化寺的内部，参考真人大小，可见其内部尺度宏大。\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1536\" data-watermark=\"watermark\" data-original-src=\"v2-c091f76a7d3805762d7df1161db7b2f8\" data-watermark-src=\"v2-95ea1a1312c2c336c9ecf741f2c2e0c2\" data-private-watermark-src=\"v2-3b6f666ff7a0c2f33c4d81b44f713fa0\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yuanmu96?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">袁牧</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549196095/answer/2637716419?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1277 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/549218831?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《黑神话：悟空》公布 6 分钟实机剧情片段，你对这款游戏都有哪些期待？</a><br><a href=\"http://www.zhihu.com/question/549243365?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《黑神话：悟空》6 分钟剧情演示公布，你对该游戏都有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/549196095/answer/2637716419?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"暗黑破坏神1-3(暗黑2为主）究竟讲了一个什么故事","date":"2022-08-22 10:23:44","description":"\n<p data-pid=\"O6GjJgjU\">上一期我们讲述了王子艾丹把灵魂石插入到自己的脑中，从而形成了迪亚波罗的灵魂容器，但艾丹却高估了自己，他并没有控制住迪亚波罗，反而被恶魔控制住了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a83ee1361107f7b2cbf29d11ecebdb69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-a83ee1361107f7b2cbf29d11ecebdb69_r.jpg\"></figure><p data-pid=\"JeCiGJ2u\">在他回到了地面上的那些时刻，迪亚波罗利用艾丹做了一件事情，就是与前来崔斯特瑞姆的女巫艾德莉亚，互相缠绵，从而诞生下了具备着恐惧之王迪亚波罗血脉的孩子——莉娅。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-04ed10ecb4804a51522ddc3bb2cc1345_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-04ed10ecb4804a51522ddc3bb2cc1345_r.jpg\"></figure><p data-pid=\"d7T9lLNO\">准确来说，这个女孩子被她的母亲与父亲称之为魂器。</p>\n<p data-pid=\"nhq4VQo4\">也就是说如果迪亚波罗死亡了，那么他的后手，就是利用魂器而复活，莉娅在父母的眼中从始至终都是一个工具。</p>\n<p data-pid=\"Rso9hnSO\">女巫艾德莉亚之所以来到崔斯特瑞姆，是因为她所信奉的教派祭祀着恶魔，迪亚波罗曾经对她允诺，当人间被恶魔占领后，这些信奉着他的人，会得到永生的回馈。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-06fcac3387d7cf3aa0c9e8fdcd9d655a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-06fcac3387d7cf3aa0c9e8fdcd9d655a_r.jpg\"></figure><p data-pid=\"KT0RuUGW\">而这就牵扯到了当初所谓的地狱三魔神被流放的阴谋了。</p>\n<p data-pid=\"M5GDMdD5\">在《凯恩之书》里，凯恩推测地狱三魔神被四魔王流放是内部之争，但当我们击败了堕天使衣卒尔后，他的灵魂会直接告之我们流放的真实意图：“泰瑞尔是个愚蠢的家伙,居然会信任我! 你看,是我告诉了迪亚波罗和他的兄弟们关于灵魂之石的事情以及如何污染它们,是我帮助策划了让三大恶魔自我流放到你们的世界,我们设置的这个计划已经运转了很长时间,任何人类的力量都无法阻止,地狱,只有向你们的世界溢出像鲜血和噩梦一样的浪潮才能获得平衡,你和你所有的同类...都将灭亡._”</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-db0d77b27a6cff726572e81f3969651d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-db0d77b27a6cff726572e81f3969651d_r.jpg\"></figure><p data-pid=\"EzuNtiiE\">流放三魔神只是一个障眼法，通过内斗的烟雾弹，来让三魔神以犯规的方式进入到人类的世界，见识到了奈非天的力量后，地狱的恶魔打算通过先腐化人类的内心，然后再感染可以操作奈非天之力的世界之石，让人类堕落成为恶魔的傀儡。</p>\n<p data-pid=\"wnzBa3zw\">从而聚集所有堕落的人类与恶魔的力量，进攻天使所在的世界。</p>\n<p data-pid=\"YPiDgDed\">恶魔判断循规蹈矩的天使不可能，越过自己制定的规则，所以他们有把握冒险成功。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b7ee3033f2091c742ffdddb74131d37_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-2b7ee3033f2091c742ffdddb74131d37_r.jpg\"></figure><p data-pid=\"x-wDXBTi\">事实证明，如果不是大天使泰瑞尔一反常态地打破了天使的顽固或者说是高傲，暗中参与到人类的世界里，组建了赫拉迪姆，猎杀三个魔神的灵魂，那么人类的世界早就沦陷了。</p>\n<p data-pid=\"KSmThUWu\">当然从衣卒尔的言语里来看，通过灵魂之石困住恶魔这件事情，也是他成为堕天使之后，为其献计的一环。</p>\n<p data-pid=\"UoEYdCwC\">整体的计谋是这样的：</p>\n<p data-pid=\"T3lDO_Da\"><b>衣卒尔欺骗大天使泰瑞尔说世界之石的碎片可以封印魔神的灵魂，但他并没有说，世界之石不能完完全全地封印住恶魔的灵魂，在长久地时间长河里，恶魔的腐蚀依旧可以从灵魂石里透露出来恶意。</b></p>\n<p data-pid=\"1B2vr4Fj\"><b>所以整个暗黑1的起点，其实就是封印着魔神老大墨菲斯托的灵魂石侵蚀了萨卡兰姆，从而控制宗教，派遣大主教来到崔斯特瑞姆解放老三迪亚波罗。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-71007b196f74db6c2e42d85a703f6511_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-71007b196f74db6c2e42d85a703f6511_r.jpg\"></figure><p data-pid=\"EZdvjout\"><b>暗黑2的起点，就是解放的迪亚波罗，要去解救老二巴尔，与老大墨菲斯托汇合，准备征服与腐蚀整个庇护之地。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-aa4811da0d82a2a86780b4d7e827baff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-aa4811da0d82a2a86780b4d7e827baff_r.jpg\"></figure><p data-pid=\"Pi_5YfHt\"><b>长久围困了恶魔的灵魂石，会化为带有恶魔力量的污染物，只需要把这个污染物放到可以控制奈非天力量的世界之石里，就可以控制人类转化成为奈非天并被恶魔侵蚀。</b></p>\n<p data-pid=\"SaDWpsS9\"><b>这也就是为啥老二巴尔要来到野蛮人圣地的亚瑞特山的原因，这里有着世界之石！</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7196c5bc3bb5b843a1b99eeec20d150f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-7196c5bc3bb5b843a1b99eeec20d150f_r.jpg\"></figure><p data-pid=\"7bsXQTlc\"><b>而在整个阴谋里独特的一环，就是老三迪亚波罗，他特意给自己留了一个魂器，从而引发了暗黑3的完全体的大魔神进攻天使之城的结果。</b></p>\n<p data-pid=\"bH9tJAVP\">当然这个剧情我们等到，暗黑3的时候再讲述，这一期我们主要讲述暗黑2的故事。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>黑暗流放者</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"uk0kyIvp\">艾丹被迪亚波罗侵蚀后，开始寻找自己的二哥，巴尔。</p>\n<p data-pid=\"BHfFRfYe\">所以他离开了崔斯特瑞姆，与他前后脚离开的还有着身怀女儿的艾德莉亚，她需要去学会操作黑暗灵魂石的方法，她在自己的《艾德莉亚之书》里有着对应的描述：“<b>借助黑暗灵魂石的创造者库勒的咒语，我将标记地狱魔头的灵魂，将他们囚入黑暗灵魂石中，我要让这个幻视成真！</b>”</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ea973ee894cc3ffa8e106f09f46bd379_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-ea973ee894cc3ffa8e106f09f46bd379_r.jpg\"></figure><p data-pid=\"g0EsuMuR\">在崔斯特瑞姆原本被消灭的恶魔，随着迪亚波罗化为黑暗流浪者的离去，这里反而又出现了更多的恶魔，未有人能够想到，原本应该蛰居在地狱里的其他的魔王也逐渐以真身的形态来到了人间。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ffd1e2292fda188fa709ed2a212ca290_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-ffd1e2292fda188fa709ed2a212ca290_r.jpg\"></figure><p data-pid=\"by4DF-fU\">痛苦女王安达莉尔便是首先来到的一批，她召唤恶魔前来，特意清理掉迪亚波罗存活过的痕迹，而崔斯特瑞姆便是其中之一，所以当我们再次回到此地时，1代的小村庄早已毁坏，人们都已死去，只剩下可怜的凯恩，被关在了笼子里，等待你来拯救。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-befd72684926bdd152bbdd418c44d69c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-befd72684926bdd152bbdd418c44d69c_r.jpg\"></figure><p data-pid=\"daU9rpK9\">而从西方前往东方，必须要经过的一处关隘，便是东门修道院，这里最初是作为一个军事堡垒而存在的，之后由盲眼姐妹会承担了防守责任。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0152f9a7110e7ae007aaecbdb04bce57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-0152f9a7110e7ae007aaecbdb04bce57_r.jpg\"></figure><p data-pid=\"4amelHdf\">这里稍微说一下，盲眼姐妹会其实是来自于科斯沃斯群岛亚马逊的一支血脉，她们偷盗了自己族群里的一件神器——盲目之眼，从而为了躲避杀戮，而离开了群岛，来到了人迹罕至的西部大陆，成立了盲眼姐妹会，这个盲眼就是盲目之眼的意思。</p>\n<p data-pid=\"UrHT9SA1\">传说这个神器具备预知未来的能力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a26efbb15031891d835914df406335cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-a26efbb15031891d835914df406335cc_r.jpg\"></figure><p data-pid=\"c1XvSTDV\">一代的游侠，就是来自于盲眼姐妹会，正是她发觉了崔斯特瑞姆的异象，从而前来此地调查的。但随着安达莉尔的现身，通过欺骗、诱惑与折磨，占领了东门修道院，在腐化了众多的姐妹后，此地就成为了恶魔的巢穴。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f7147427514226460503cdf0cfd3e4e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-f7147427514226460503cdf0cfd3e4e6_r.jpg\"></figure><p data-pid=\"cmULTv9u\">未被腐化的姐妹会成员，在荒野里创建了罗格营地，等待时机，也就是我们2代开始的地方。</p>\n<p data-pid=\"BIqbH0Jp\">一代的游侠在二代里成为了安达莉尔的马前卒，用着血鸦的名号，在埋骨地召唤死去的生命再次回归，用邪术制造为安达莉尔服务的恶魔。</p>\n<p data-pid=\"yiB_8RDx\">如果你击杀血鸦的话，你会看到她的灵魂被释放出来，也算是我们给一代的她，一个好的结束。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fd6ab7c1a3ab0359196b24ab38fb848f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-fd6ab7c1a3ab0359196b24ab38fb848f_r.jpg\"></figure><p data-pid=\"lhhMKyNG\">安达莉尔的出现，便是验证了衣卒尔的话，三大魔神被流放，等再从灵魂石里被释放时，就是恶魔整体入侵人间的号角声。</p>\n<p data-pid=\"DGE1HK9O\">安达莉尔占据的东门，有效地阻挡了任何想要追踪迪亚波罗足迹的人，所以我们在罗格营地时，无法通过商人带我们一起由西向东前行到下一个城市鲁高因。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8b44bf6b696a6c9fe5c7f155fb426314_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-8b44bf6b696a6c9fe5c7f155fb426314_r.jpg\"></figure><p data-pid=\"NPNwR6cp\">另一方面黑暗流浪者，在一路前行的时候，路过了一个小酒馆，在此地的他没有控制住自己的封印，从而让恶魔从火焰里滋生，烧毁了整个酒馆，在庇护之地的有一个传说，当大恶魔行走在何处，恶魔就会从他的脚下滋生无数，或许这个动画，彰显的正是这个意思。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-969e27fecb6c13e735a659a7e4a67da4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-969e27fecb6c13e735a659a7e4a67da4_r.jpg\"></figure><p data-pid=\"BB-gviHF\">鬼使神差的整个酒馆里只留下了一个叫做马瑞斯的流浪汉存活，更鬼使神差的，这个马瑞斯成为了黑暗流浪者的追随者，并与他一同前往了鲁高因，寻找着魔神巴尔的所困之地。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ab394178731047957b569609933d376b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-ab394178731047957b569609933d376b_r.jpg\"></figure><p data-pid=\"vPJqZnr6\">马瑞斯这个人，并没有在游戏里作为NPC存在，是个只活在了CG里的人，但暗黑2的所有鬼使神差的桥段基本上都在这个人身上发生了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2cc795c48b70507664af87d21d753e65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-2cc795c48b70507664af87d21d753e65_r.jpg\"></figure><p data-pid=\"TGq-ZmJF\">为了追逐黑暗流浪者的步伐，阻挡他释放巴尔，我们冒险者只能硬闯东门修道院，看到此地的所有姐妹都被恶魔俘虏了，他们的脑袋甚至变为了恶魔的样子，你只要杀死这些姐妹，就会看到他们如同血鸦一样，灵魂从躯体里释放。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c3d9b05eb6fe1e00c2e8dbf43776edc6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-c3d9b05eb6fe1e00c2e8dbf43776edc6_r.jpg\"></figure><p data-pid=\"p13DBrki\">迷宫的最后是安达莉尔的宝座，用人骨的骷髅组建而成，你在此地可以直面2代的第一个大恶魔，兽脚、尖刺、红发，每一次的攻击都带着致命的毒药。</p>\n<p data-pid=\"gVXunogo\">在此地的她把整个修道院改造成了自己的魔窟，实施各种可怕的法术，喜欢心灵折磨的她，愿意夜夜听到他人的哀嚎。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a26c65978998907c8c240a362b6bdef3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-a26c65978998907c8c240a362b6bdef3_r.jpg\"></figure><p data-pid=\"gsebP0jS\">杀死安达莉尔后的罗格营地，迎来了一片的欢喜，人们庆祝向东的道路的打通，同时盲眼姐妹会也欣喜自己家园的回归。</p>\n<p data-pid=\"RdPm8gZy\">你在《不朽》里，还可以继续看到盲眼姐妹会的各位，指挥官卡夏与女祭司阿卡拉，恶魔对她们的影响仍旧没有简单地消散掉。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e6d4d6c6b18d711e732c1bf0338ef3c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-e6d4d6c6b18d711e732c1bf0338ef3c0_r.jpg\"></figure><p data-pid=\"8ND3K4lq\">瓦瑞夫是营地里的商人，负责通往鲁高因的道路，你与他对话离开时，作为赫拉迪姆后人的凯恩也执意要一同前往，他觉得自己有责任见证这段历史。</p>\n<p data-pid=\"hfgTYxMn\">鲁高因是西方大陆的明珠，当年西征的时候因为与军队签订了自主管理的协议，代价则是支撑西征军队的军粮与军力补充，所以它的统治并不归属于东方大陆，而是独自发展。</p>\n<p data-pid=\"kOh-4LIN\">因此你在这里可以看到鲁高因的王——耶尔辛。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dbf13d1f0ebd030b0e6819d651a61044_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-dbf13d1f0ebd030b0e6819d651a61044_r.jpg\"></figure><p data-pid=\"LdBZK6_j\">原本明珠一般的城市，因为黑暗流浪者的到来，而让此地发生了异变，城市的下水道里有着可怕死而复生的怪物，屠杀着城里的居民。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7ca508f8c98e4f4d6b9620b76376b2de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-7ca508f8c98e4f4d6b9620b76376b2de_r.jpg\"></figure><p data-pid=\"_tUqVtGn\">此地的管理者耶尔辛，把城内的所有失足少女都召集在王宫里让自己的卫兵保护起来，再雇佣其他的佣兵守护城市。</p>\n<p data-pid=\"3yZ3prjz\">可见耶尔辛是一个私心很重的人，并是最初表现的那般温文尔雅。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c282ab2b9145561e15b92eb4d5c0d6f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-c282ab2b9145561e15b92eb4d5c0d6f7_r.jpg\"></figure><p data-pid=\"OHvLGkRr\">凯恩认为黑暗流浪者来此地必然是为了释放自己的兄弟，巴尔。</p>\n<p data-pid=\"OvH2YnLJ\">但巴尔被囚禁在了传说中的法师，塔拉夏的身体里，而塔拉夏所在的坟墓有着众多的疑冢。</p>\n<p data-pid=\"r44FLKuW\">进入到坟墓需要两个物品，一个是赫拉迪姆之杖，而它已经被分裂成为多个，藏在了不同的坟墓里，它是打开封印之地的关键。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8cb7ba4bfe482a5659b8a36846601490_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-8cb7ba4bfe482a5659b8a36846601490_r.jpg\"></figure><p data-pid=\"EZ1j8AiG\">另一个是正确坟墓的符号，而这个符号很有可能被神秘避难所的召唤者知晓。在不久前，有一个法师也来到此地询问过避难所，这个人就是我们暗黑1里的法师，他的部落就是那个召唤恶魔从而引发了法师战争的罪魁祸首，但恶魔象征着混沌的力量，是人类身体里不可分割的一部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9a6c5589a680a21a8c00fe7cbc5267e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-9a6c5589a680a21a8c00fe7cbc5267e4_r.jpg\"></figure><p data-pid=\"4_DMRTSO\">即便被追杀，仍旧有法师在不停地召唤恶魔，这个避难所建立的初衷就是在此，不被人类追杀，也不被恶魔发现的奇异场所。</p>\n<p data-pid=\"I7cB-6P1\">而这个场所目前唯一露出来的缝隙，就是在皇宫里发现了恶魔，众人都怀疑皇宫里的缝隙连接的正是神秘避难所。</p>\n<p data-pid=\"Xfufia4u\">当你进入其中，寻找谜底，你会在道路的尽头看到暗黑1的法师已经成为了避难所原主人的替代品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e587235d293cfc3516a820e6d01d1020_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-e587235d293cfc3516a820e6d01d1020_r.jpg\"></figure><p data-pid=\"p5BP1UVL\">至于避难所的原主人赫拉森去哪里了，没有人知晓，这让我怀疑暗黑四里进行莉莉丝召唤的人，很有可能就是这个神秘避难所的原主人——赫拉森。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-66d8a9fa04bf9dc41fe2d4788b8d1cf0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-66d8a9fa04bf9dc41fe2d4788b8d1cf0_r.jpg\"></figure><p data-pid=\"yMvtKJNH\">击败了暗黑1的法师，我们也得到了正确坟墓的印记。</p>\n<p data-pid=\"Gdg2BEke\">但我们终究是晚来了一步，大天使泰瑞尔已经在这里与两大魔神交手过了，不敌之后被困在了此地。</p>\n<p data-pid=\"Z0KclAUf\">跟随黑暗流浪者而来的流浪汉马瑞斯，在大天使与黑暗流浪者纠缠的时候，被巴尔蛊惑，因此不自觉地摘下了封印巴尔的灵魂石。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-17077f6bdd183124c2895763c5220e78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-17077f6bdd183124c2895763c5220e78_r.jpg\"></figure><p data-pid=\"mR3qyY--\">这段剧情最让我眩晕的地方在于，泰瑞尔在居然在之后拜托马瑞斯拿着灵魂石前往库拉斯特的光明神殿，也就是被腐化的萨卡兰姆的核心地带，从那里进入到地狱，然后毁灭掉灵魂石。</p>\n<p data-pid=\"ZULT6OX-\">你居然会把人类的命运托付给一个虚弱的流浪汉，而且这个流浪汉还刚刚被迷惑了！</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-eb17ae3bf7ebf48a19172c13aca87eda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-eb17ae3bf7ebf48a19172c13aca87eda_r.jpg\"></figure><p data-pid=\"EhBhznvY\">为啥不让他去寻找如同我们一般的勇者呢？</p>\n<p data-pid=\"Vr514_Wr\">总之更牛的是，马瑞斯还真他喵的拿着灵魂石进入到了光明神殿当中。。</p>\n<p data-pid=\"7gAfNx23\">他喵的比我们这些冒险者，还NB呢，咱们还费了九牛二虎之力，一个孱弱的流浪汉。。。居然单刀赴会地进去了。</p>\n<p data-pid=\"rBykWa4w\">虽然马瑞斯最后进入了疯人院，但我不得不佩服，他的勇气，至少他豁出去了一次。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-21b7d10b199f5a2463d0dd12471f7494_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-21b7d10b199f5a2463d0dd12471f7494_r.jpg\"></figure><p data-pid=\"cjAGscbM\">我们进入到坟墓时，被困在此地的大天使只能再次拜托我们，前往恶魔的巢穴，墨菲斯托的所在之地。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>地狱与战争</h2>\n<p data-pid=\"MZ4Y8FmQ\">当初神圣的宗教之地，已经变得污秽不堪，大主教们被腐化成为了恶魔，甘愿受到墨菲斯托的腐蚀。</p>\n<p data-pid=\"qqD72Eyj\">如今的此地，正在积攒恶魔的力量，等待着之后的爆发。</p>\n<p data-pid=\"znfi1srH\">在教堂的地底是三大魔神的再一次的聚首，三人共用力量来打开地狱的大门，并制定了接下来的计划。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4a99608d11bc5b1e2595510525314a84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-4a99608d11bc5b1e2595510525314a84_r.jpg\"></figure><p data-pid=\"Z7WacFbC\">老大墨菲斯托镇守此地，继续积攒人类腐化的力量。</p>\n<p data-pid=\"cuAcT-iG\">老二巴尔带领一部分恶魔，前往北方的亚瑞特山，那里是世界之石的存放之地，巴尔要用自己的灵魂石去腐化世界之石，从而操作人类。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-abb724dd5f3e944dc48315edf64a55ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-abb724dd5f3e944dc48315edf64a55ce_r.jpg\"></figure><p data-pid=\"PLIyIGFh\">所以这也就是为啥我们在片头的时候，看到了巴尔假装大天使，盗取灵魂石的动画。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-34601584097f3556098152688c27a3ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-34601584097f3556098152688c27a3ef_r.jpg\"></figure><p data-pid=\"PTjMQ0HT\">此时的灵魂石，等同于恶魔的灵魂本身，恶魔可以利用灵魂石感染世界之石，人类同样也可以通过消灭灵魂石来消灭恶魔。这也是之后我们用湮灭铁砧消灭恶魔的手段。</p>\n<p data-pid=\"ULokos-V\">老三迪亚波罗重新化身恶魔，进入到地狱召唤蓄势待发的地狱大军，准备入侵人类的世界。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9ca411a00754cbcb113ac97405bf8702_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-9ca411a00754cbcb113ac97405bf8702_r.jpg\"></figure><p data-pid=\"Y2kH6sCf\">等我们到来时，巴尔与迪亚波罗早已离去，只留下墨菲斯托，守护着传送门，虽然身为魔神，但双拳难敌四手，我们五个冒险者，组团屠戮，一顿老锤便把他打趴。</p>\n<p data-pid=\"N7k5sIyc\">墨菲斯托没有养成随手关门的习惯，而我们冒险者自然是个看见传送门就要进去的主。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9cb81df4b1ed9cc7876ba9f8541032f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-9cb81df4b1ed9cc7876ba9f8541032f5_r.jpg\"></figure><p data-pid=\"kKwAXZUf\">去往地狱的传送门，没有把我们直接送入到迪亚波罗的面前，而是前往了天使与恶魔交战的桥头堡——群魔堡垒。</p>\n<p data-pid=\"EWtY1ihL\">在这里我们遇到了大天使，他告诉了我们如何消灭魔神的方法，去地狱熔炉的湮灭铁砧上敲打灵魂石就能消灭魔神的灵魂，把他们逐出这个已知的位面，前往一个永不会回来的世界里。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d9c753ec11a88628c7b4720ba82665ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-d9c753ec11a88628c7b4720ba82665ab_r.jpg\"></figure><p data-pid=\"QoUs8j4R\">暗黑的剧情里，灵魂是个不灭的存在，只能改变状态，无法彻底消灭，后面3代的大魔神的融合也是这个思路的体现。七个大恶魔，又再次化为了一个整体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f91ba75c24971b9c4435a0af88185a5a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-f91ba75c24971b9c4435a0af88185a5a_r.jpg\"></figure><p data-pid=\"SMSpp9RL\">同时大天使也让我们寻找曾经堕落的衣卒尔，他化为恶魔已经几百年了，早应该承担完自己的罪孽了。我们便也是在击杀衣卒尔后，得知了他口中的整个恶魔的黑暗流放的障眼法，以及灵魂石困住恶魔的阴谋。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-145d097dd84330c9d59fd34a2334c3ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-145d097dd84330c9d59fd34a2334c3ef_r.jpg\"></figure><p data-pid=\"-Zo8sTgu\">为了人类的世界，我们只能先来地狱熔炉里打碎墨菲斯托的灵魂石，防止它被夺走后，再次复活。当锤子落在灵魂石的那一刻，无数的灵魂从石头中奔涌而出，或许这就是恶魔曾经困住人类灵魂的数量吧，现在他们终于自由了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bb7606e353b61746447f124815852ead_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-bb7606e353b61746447f124815852ead_r.jpg\"></figure><p data-pid=\"kxtszBw5\">紧接着就是我们第二次面对迪亚波罗，他仍旧是那么的高大邪恶，通过冰霜减缓我们的攻速，再配合其他恶魔一拥而上。</p>\n<p data-pid=\"UrY8xkVG\">就如同当你发现家里有一个蟑螂的时候，他就有一窝了，当你发现地狱里有一个人类的时候，它必定也有一群。</p>\n<p data-pid=\"AIO41WUz\">冒险者们齐心协力再次击败了迪亚波罗，这个壮举连凯恩都为之赞叹，毕竟连天使都杀不死的大魔神，我们人类已经杀了两回了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6e4b1145e466183a177259ef6c761e70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-6e4b1145e466183a177259ef6c761e70_r.jpg\"></figure><p data-pid=\"VoRUZERH\">这个行为一度让我认为，如果天使真的决定消灭人类的话。。究竟被消灭的会不会是天使的一方。。</p>\n<p data-pid=\"Q73ehfeQ\">从地狱回来的冒险者，发现了巴尔的行踪，北方的野蛮人把守的圣山，正在被巴尔所吞噬。</p>\n<p data-pid=\"WB5EWZ83\">英勇的野蛮人无法敌对众多蜂拥而来的恶魔，在泪与血的拼杀里，长老们决定牺牲自己，用生命的力量建立一个巨大的屏障，阻挡恶魔的入侵，保护自己的圣山与职责。</p>\n<p data-pid=\"RI9Rjn5z\">但只有一个长老——尼拉塞克未有献出自己的生命，并且在饱受打击后，开始胡言乱语，抨击野蛮人与恶魔作对是自寻死路。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b696219779d5506322974f0d730c387b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-b696219779d5506322974f0d730c387b_r.jpg\"></figure><p data-pid=\"yoDXXa3R\">其实在野蛮人的城寨里，有专门的军事指挥官，而这个长老存在的意义，只是为了专门传播恨国论，否定那些牺牲的野蛮人与牺牲的长老。</p>\n<p data-pid=\"BAFuyWCW\">你走出城外，会看到众多的野蛮人依旧在与恶魔互相战斗，以保护自己的圣山。</p>\n<p data-pid=\"kP7kphrc\">无法穿越长老们用生命搭建起来屏障的巴尔，开始腐化这个贪生怕死的尼拉塞克，与他签订协议。</p>\n<p data-pid=\"wJO5LaC_\">巴尔保证即便恶魔降临人间，也会有尼拉塞克的一席之地。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9a1d8f0cfe34120de156322f8dc69b91_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-9a1d8f0cfe34120de156322f8dc69b91_r.jpg\"></figure><p data-pid=\"96LBQYqT\">等我们击杀这个背叛者时，他手中的圣物已经交给巴尔了，没有了屏障的保护，巴尔就可以直接穿过祖先之地，前往圣山的最深处，封闭着世界之石的殿堂。</p>\n<p data-pid=\"UyzoeBJp\">我们一路穿越重重障碍，终于赶到山顶，挡在我们面前的是三个先祖奈非天，我说老大，恶魔来了你们不拦，我们来了你却要拦，咱能灵活应对吗？</p>\n<p data-pid=\"ZgtInO2_\">巴尔即便有圣物，他也是个恶魔呀，你们的考验是要保护世界之石，还是为了考验而考验呀。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d79d3fe08d6b1febc4948742532524e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-d79d3fe08d6b1febc4948742532524e8_r.jpg\"></figure><p data-pid=\"87imVJY0\">最终在我们击败先祖的试炼后，他们给我们强化了一次 战斗能力。。。就是升了一级，连个祖传武器都没给我们，就让我们去打巴尔。</p>\n<p data-pid=\"V7aKdfJH\">抱怨归抱怨，我们还是要拯救世界的，一路披荆斩棘，杀到巴尔的所在之地，在这里我们与他真的是大战了八九个回合，每个回合他都会吐出来一团火焰，然后火焰化为恶魔，这场持久比拼耐力与药瓶的战斗，最终以我们这群跨越了整个人类世界、跨越了烈焰地狱的冒险家小队，奋力地战斗而获胜。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-31719e88c23add367e803e953ef47296_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-31719e88c23add367e803e953ef47296_r.jpg\"></figure><p data-pid=\"AmNbzQXh\">巴尔虽然死在了我们的脚下，但是他的灵魂石，早已侵蚀了世界之石，这也就是为啥我们打死他后，他没掉灵魂石。</p>\n<p data-pid=\"dZdAZz-g\">扮演救世主的大天使泰瑞尔，姗姗来迟，告之我们现在的状况，世界之石已经无法挽救，必须破坏，否则庇护之地将成为另一个地狱。</p>\n<p data-pid=\"2VULbpWs\">而破坏世界之石会产生巨大的冲击，这种冲击在巴尔灵魂石的腐蚀下，会成为一个可怕的炸弹，整个圣山都将被毁灭。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8e4947600a70a6c270a37e44c51f5e1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-8e4947600a70a6c270a37e44c51f5e1a_r.jpg\"></figure><p data-pid=\"FPC3A5hs\">毁坏世界之石的使命由泰瑞尔承担，毕竟这个爆炸不是凡人之躯能够承担的住的，他开了传送门，让我们逃离到安全的地方。</p>\n<p data-pid=\"7uLnCOrI\">他则孤身一人，口中念着祷告的词语，丢出自己手中的神剑，击碎了巨大的世界之石，而随着石头的碎裂，爆发了巨大的能量，这些能量转瞬之间就把是野蛮人的圣山极其周围的地域彻底腐蚀。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-98727d5b6d91e1556067344172acf56c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-98727d5b6d91e1556067344172acf56c_r.jpg\"></figure><p data-pid=\"ThlfYlW8\">圣洁的祖先之地，是当初人类祖先的天使与恶魔第一次落脚之地，如今这块土地，成为了被恶意腐蚀的诅咒之地。</p>\n<p data-pid=\"BZgCvOiB\">到了暗黑3时，这里已经变为了恐惧之地，让人不敢随意踏足。</p>\n<p data-pid=\"gRtJ-M8v\">整个暗黑2的故事，到此便结束了。</p>\n<p data-pid=\"Asw2--5N\">以一场巨大的浩劫作为整个故事的落幕，自然代表，故事还没有讲完，他还遗留了很多问题，大天使打破石头的神剑去了哪里？</p>\n<p data-pid=\"uQs1msUU\">野蛮人的家园被摧毁了后，他们能在哪里生活？</p>\n<p data-pid=\"BEokC8ei\">作为迪亚波罗后手的艾德莉亚肚中的魂器，又在之后承担了什么角色呢？</p>\n<p data-pid=\"SbLZGGZf\">大恶魔的这一次阴谋对赌，真的是输了吗？</p>\n<p data-pid=\"Ps1_ATlE\">这些疑问等我们说暗黑3剧情时，再跟大家一起诉说啦！</p>\n<p data-pid=\"ceQaRa5U\">我是狗哥，我们下一期暗黑3再见了。886！</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dogsama?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">dogsama</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/556003099?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价游戏《信长之野望：新生》?","date":"2022-08-22 09:03:16","description":"\n<p data-pid=\"C-Vu391h\">到目前为止，这一作我只玩了五十多个小时，通关了三遍，要说对游戏有什么深入理解肯定是谈不上的。最近听到很多人用了“底子好”这个词来形容本作，刚好这个词也经常被用来形容同社出品的三国志14，不得不说这其实是个很有意思的事。</p>\n<p data-pid=\"rZAqSuHs\">所谓“底子好”的潜台词就是还没发挥出全部实力，也就是说当下版本存在着明显的可以强化的部分。当然我的理解又稍微有点偏差，如果底子好一般是说作品本身是块璞玉，再经过一定程度的雕琢就可以变得尽善尽美，那我的看法是一般意义上的强化解决不了本作所存在的问题，比如说官方最近给AI打补丁的做法，新生真正需要的是从机制层面进行改善。</p>\n<p data-pid=\"NruQoqWn\">我之前曾在想法里用“第一眼美女”来形容本作，因为本作无论画面还是UI都比前作大志有了明显提升，考虑到大志在设计之初就有以手机端作为登录平台的目的，因而把锅甩给制作人小山宏行也不太合适，而本作属于制作组恢复了应有的实力。操作方面在渡过适应期之后，也基本达到了往作的成瘾性，但随着后期战争烈度的剧增和对玩家的限制开始显现作用，一种明显的无力感始终存在于游戏过程里，虽然说不上难，但能把人折腾得筋疲力尽，直到通关时才终于迎来解脱。</p>\n<p data-pid=\"2iJtorot\">这个过程给我感觉就是“割裂”。如果说往作里玩家最大的敌人是电脑控制的各地诸侯，那么本作只有在前期才是如此，而当玩家成为占据日本半壁江山的大大名，已经无人可敌之后，也还是会明显感受到这股无力感，并不能为所欲为。</p>\n<p data-pid=\"kh2oYAOz\">从某种意义来说，本作的制作人小笠原贤一是光荣战略游戏的革新者，他所制作的信野创造在市场上获得巨大成功，给历史品牌的复兴注入了一针强心剂。创造的革新方向主要在于减少玩家的操作内容，削弱玩家作为全知全能的国家机器的特权，以征兵系统来说，玩家不需要自己再去手动征兵，每个城市的士兵会自动恢复，但另一方面，每个城里的士兵是固定财产，玩家无法四处搬运积累滚雪球的优势。</p>\n<p data-pid=\"Pi23x28O\">在创造之后的几部信野和三国志里都能看到这种设计思路带来的影响，而本作则明显是在创造的思路上更进一步，开始强调把武将这一光荣游戏里的核心单位从玩家手中进行分离。游戏玩法从势力扮演变得更加接近于大名扮演，玩家所拥有的一切资源不能随意调动分配，而是需要遵守一定的规则。</p>\n<p data-pid=\"K-wRAyv5\">举个例子，选择前期剧本的织田信长开局时，玩家不能任命身份低微的木下秀吉担任城主，虽然他是部下里能力最高的。但有时像柴田胜家这种能力和身份都很高的武将也同样不能担任城主，因为玩家已经给所有城都任命了城主，而此时的大名威望还不够，不能随意剥夺这些城主的领地，于是只能带着林秀贞这种家中废柴去四处征战，直到秀吉等人积累功勋成长起来并且拿下新的地盘后才能使其上位。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-16f4fd40f1dd9b12e40a6279af739a0e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"900\" data-watermark=\"original\" data-original-src=\"v2-16f4fd40f1dd9b12e40a6279af739a0e\" data-watermark-src=\"v2-f08606e80fea10a3511ef85051469bbd\" data-private-watermark-src=\"v2-bdedfa98bb98f4cb4a5afb2913ae5312\"></p>\n<p data-pid=\"MHBG1mpE\">这种大名扮演的设计思路非常有趣，既在一定程度上符合现实，带来了较强的代入感，并且在这种限制当中削弱了玩家对电脑的优势。虽然小笠原在游戏宣传过程中不断强调AI在本作的重要性，但估计谁也不会相信光荣战略游戏里真的出现了能够比拟玩家的AI，至于AI的各种献策则向来都是玩家们交流时的欢乐源泉。而在拿到游戏成品后，我发现本作的实际设计思路是以AI来替代玩家的一部分行动，搞笑点的说法就是“AI成了玩家，玩家成了AI”。</p>\n<p data-pid=\"wkvnKAdB\">这种针对创造的系统所进行的改良在很大程度上解决了创造的中后期数值崩坏的问题，玩家再也不可能一回合得到数万金钱和几百劳力，然后给直辖范围内的所有城池下达建设命令。新生当中即使占领全日本所有地盘，其财政收入也难以支撑玩家点开所有政策，其劳力也只有十多点。因为这一代里玩家只能获得根据地一座城的全部收入，而其他地盘的金钱只会以上供的形式提供给玩家一点点，虽然玩家也可以去亲自指导这些地方的建设，但消耗的却是自己的劳力还有小金库，属于活雷锋行为。</p>\n<p data-pid=\"fw1y6Wx8\">一来二去，玩家还是只能管好自己这一亩三分地，地盘既然已经交给手下了，那就只能选择相信他们。当然这样可能带来一个问题就是玩家前期可以做的事情很少，不知道该干什么，这也是创造之后几部作品的通病。而本作则设计了大量随机内容以及武将提案，例如发现温泉了、台风过境了、边境打群架了、隔壁村的带路党发来联络了等等。其中一部分属于玩家正常情况下也能使用的指令，而这种提案更加类似于系统提示，在减少玩家操作量的同时又在一定程度上挽回点资源。</p>\n<p data-pid=\"sI_kpQ5l\">但这样的操作过程在中期就形成了一个循环定制，武将的行动内容是随着身份提升逐渐解锁的，最低等级的组头基本只能给大名根据地当代官，而绝大多数武将刚招入麾下时都是组头身份。于是玩家必须把这些新人放到根据地挨个当代官，升级成足轻大将后给点知行扔到其他城里去蹲功勋。于是大名的根据地就成了岗前培训基地，组头是实习生，足轻大将是正式员工，玩家要定期培训新人，而部下的城里也要定期接收员工。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ed61c5c4eb137e3519f42a3c3488517e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"324\" data-watermark=\"original\" data-original-src=\"v2-ed61c5c4eb137e3519f42a3c3488517e\" data-watermark-src=\"v2-286f2f66eb40442cd748f38f739e3258\" data-private-watermark-src=\"v2-353c176e0f4cc1cc4a94bc7166ae81b3\"></p>\n<p data-pid=\"86weqSAM\">这带来一些比较麻烦的问题。一方面这个过程本身操作起来重复度高，和光荣目前主打的解放操作是矛盾的，变得既降低了操作感，又没有减少操作量。另一方面无论代官还是知行，都可以为城池提供特性和能力加成，因而调配得当可以设计出一些相当强力的组合，例如大坂城就是因为郡太少导致战斗力严重受限。这本身可以成为一个比较有趣的系统，但因为要给部下刷功勋，导致人员的流动性很大，要是始终让同一批人占着坑，就很容易出现攻下地盘后却无人可用的状况，而如果人才不断流动，玩家又很难保持清醒地持续调配人才，毕竟本作有2200个武将和206座城。最后的结果就是玩家很难再像以往那样“知人善任”，成了到处乱安排人的平庸老板，可能这在某种程度上也算是还原现实了？</p>\n<p data-pid=\"9VsAtIBW\">如果玩家不缺人，又解锁了高等级的母衣众政策，这些组头很快就可以转正，那么玩家要认真地搞几套班底也还算容易。但由于游戏中有多达1200个郡，导致玩家在假想剧本以外基本都是缺人的，而高级政策又对威望和高身份武将数量有要求，前期无法解锁，所以玩家有条件这么做的情况是比较少的。</p>\n<p data-pid=\"OtodXcZ7\">当然这也算不上多大的问题，甚至还有点乐趣在里面，想要在内容这么庞大的游戏里避免机械重复的操作本身也不现实，并且本作最核心的问题，同时也是体量设计所带来的最头痛的结果也不是这个。</p>\n<p data-pid=\"9CTYn5hF\">在探讨相应问题之前，先插个其他事。本作的事件数量多达330个，在历代游戏里都数一数二，虽然其中大部分都没有实际作用（例如光武将改名的事件就有一堆），还有把一件事拆成几个事件的，但作为初版游戏且不带DLC，本作在事件方面的表现也算令人满意了。顺便这里也打破了光荣游戏从不继承好东西的说法，因为这些事件的文本多数都继承自大志甚至是创造。</p>\n<p data-pid=\"HDXca0cL\">我第一把玩桶狭间之战的信长时，由于操作习惯都尽可能多去触发历史事件，等到通关时打开鉴赏室数了下，发现自己居然触发了一百二十多个事件，绝对是个人游戏生涯里触发最多的一次。当然这里面有些事件的触发条件确实过于宽松，例如很多人提到的手取川之战，个人是在拿下金崎城之后就触发了，都还没和上杉家接壤，更丧心病狂的是我玩信长元服剧本时，严岛之战都还没发生就触发了隆元之死的事件，导致毛利隆元少活了十多年。</p>\n<p data-pid=\"NRZuoGWg\">但问题在于，相当多一部分历史事件的发生条件其实是精确到了发生月份，而我一路触发这么多事件也是因为我的扩张速度和历史上的织田信长非常相似。这其实是一个比较奇怪的事，因为游戏中的玩家比现实人物更有利等原因，玩家的扩张速度基本都要快于现实，我玩桶狭间剧本花了27年当上太政大臣通关，比以往的通关速度慢了许多，但和一些朋友交流后发现这个速度放在本作里并不算慢。</p>\n<p data-pid=\"toiV2qy4\">而另一方面，本作又经常发生开局两个月就有势力灭亡的现象，这种扩张极快和极慢同时存在的情况，使我产生了一种强烈的割裂感。</p>\n<p data-pid=\"XVLtTMNI\">由于势力强弱的不平衡，加上内政设计的简化，使得战争在游戏里变得非常容易发动，并且几乎都是倾举国之力发动的战略决战，而小势力几乎没有什么抵抗手段。因而制作组也想了办法去限制战争的发生，例如降低粮食收入，令一座城一年的收入基本刚好够一次出兵，同时又减缓行军速度并且让腰兵粮无法就地补充，令远征变得很难进行。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-db0b034112f9b93eb75264bf5b81c513_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"418\" data-watermark=\"original\" data-original-src=\"v2-db0b034112f9b93eb75264bf5b81c513\" data-watermark-src=\"v2-3602c8131392094178b18a3fd3750eeb\" data-private-watermark-src=\"v2-5b1129414d776cdfc7c74768960d37b6\"></p>\n<p data-pid=\"mXGDqY9O\">当然实际上由于种田变得十分简易，玩家几乎开局一年就可以把根据地种出一万人的出兵上限，加上回兵速度以及AI之间的无脑战争，导致小势力灭亡还是很容易发生，但大势力之间几乎每一战都会打成焦灼状态。</p>\n<p data-pid=\"VCBZ9kgn\">个人印象最深刻的一次是我在统一了半个本州岛再外加四国岛之后，已经满足一键通关条件，却连续花了好几年都没有打下九州岛的哪怕一座城。当时九州岛已经被立花家所统一，但整体实力不到我的三分之一，按理说很容易就能拿下，实际却根本不是这样。</p>\n<p data-pid=\"qYYAfuiC\">我把根据地设置在二条御所，出兵到九州要行军一百多天，而腰兵粮上限在我各种政策和设施的加持下也只有200天，于是便理所当然地让手下军团长派兵进攻，结果两个军团长每次出兵二十万，一连出了三次兵也毫无战果。</p>\n<p data-pid=\"MLIcRw6p\">这是因为九州的上岸点只有两个，同时本州岛西部还有四国本身属于城池比较稀疏的地区，想要集结大军需要大量时间，同时部队会变得极其密集，但每条路只能同时配置四个部队。而九州岛那边想要集结援军则非常便利，最后变成无数部队排着队在这两个地方拼消耗，直到腰兵粮快要用完，进攻方支撑不住而撤退，然后再循环往复。</p>\n<p data-pid=\"fTKQfrJk\">初始的腰兵粮上限仅120天，在游戏里连半个日本都走不完，如果算上地域压制和排队时间，即使是近距离作战，能连续打下两座城都谢天谢地了。所以提升腰兵粮的建筑和政策变得极为重要，例如个人给城主安排的指导方针全部是重视行军，但即便如此，到了后期依然不够用。</p>\n<p data-pid=\"TOTDq_BQ\">想靠电脑自己打破这种僵局几乎是不可能的，于是我只好让大名亲自带着部队横跨濑户内海跑去攻打九州，这并不是因为大名的战斗力多强或者我的微操多独到，而是本作有一个特别开后门的设计叫做威风。本作的手动合战必须由玩家亲自发起，并且只有大名在场时才能触发，而如果击破的部队超过一定数量就能发动威风效果，根据击破部队的数量多少发生叛逃归降等效果，中强等级的威风甚至会直接导致城池倒戈，是一个十分有趣且贴合现实的设计。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0f639395d42e421179881dc1a6bf08a4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"424\" data-watermark=\"original\" data-original-src=\"v2-0f639395d42e421179881dc1a6bf08a4\" data-watermark-src=\"v2-c7f4d329900255a4e8b6cb0f4caa4166\" data-private-watermark-src=\"v2-257cccb0e4d0a15d1a8f944745b43c09\"></p>\n<p data-pid=\"MMS9fHQ6\">因而让大名出征的最大目的是为了触发手动合战，有时甚至都不指望能够打出威风效果，而是单纯靠手动合战节约时间，因为这种大战多数时候不是打不过而是粮食不够吃，因而玩家会产生明显的有力使不出的感觉，明明敌人就在眼前，大军却冲不上去。但就是这么简单的要求也时常不能如愿，因为部队太多导致战场经常排队，而军团出动的部队又无法微操，有时候因为路径太长打不了配合，又变成大名部队孤军奋战的状况。而一次行动就是半年，回去后整顿人马再次出征基本就是明年的事了，玩着玩着发现自己花多年时间辛辛苦苦培养的一堆人才寿命快要到期了，重新部署安排的同时还得注意游戏进度，在疲劳之外又生出许多焦虑。</p>\n<p data-pid=\"AUFh3VsO\">解决办法当然是有的，那就是不断搬家，让大名的根据地一直位于前线。不过由于搬家的好处太过明显，加上历史上经常搬家的大名又很少，主打还原战国现实的制作组便为根据地移动设定了相当高的门槛，例如从安土城搬到二条御所就得花10000，搬到大坂得20000。在本作的系统下基本属于是巨款了，通常得半年不做内政才能存下来，而且这几座城之间的距离还很近，至于搬到九州前线，恐怕不花个十来万办不下来。</p>\n<p data-pid=\"2V--yoHU\">花费高是一方面，另一方面则是搬家本身也不利于游戏体验。来到前线的新城代表玩家的收入要大幅减少，内政也得重新开始做，之前的直辖城主也远离了控制。本身后期因为部下武将和城池太多就有些疲于应对，还要不断搞实习生的培养和转正，如果再加个根据地转移，其实比不搬家直接搞远征也轻松不到哪里去，也就是触发大军团手合便利了许多。因而后期的巨大疲劳感几乎是不可避免的，玩家无论怎么想办法也得体验一遍。</p>\n<p data-pid=\"rbyIMxxt\">制作组应该是有意识到这个问题的，像威风系统就可以大幅加快玩家的游戏进程。那么解决办法似乎很简单，只要让人人都可以触发手动合战，那么就能有效避免队伍排队的尴尬场面。问题在于由于手合的巨大收益，其本身的效果犹如为玩家准备的外挂，如果不加以限制，又可能使得游戏变得过于简单。此外也有玩家抱怨部队移动速度太慢、不能就地补粮、道路容纳部队数量太少的，但如果解决这些问题又可能带来更加严重的后果，那就是电脑的扩张速度变得更加难以限制，小大名出生即死亡。</p>\n<p data-pid=\"MK2LBg8B\">实际上这种疲劳的后期大家在三国志13里就已经领教过了，密集的城市加士兵的快速恢复，玩家后期经常要消灭数十万大军才能打下一座城，而信野系列的城市还要更加密集。对此有抱怨不能运兵以及士兵恢复速度太快的，问题在于，几个月恢复完士兵对于小势力以及一寸光阴一寸金的游戏前期来说并不算快，一座城和几十上百座城根本无法用同样的标准来衡量，两者之间是找不到数值的平衡点的，这在某种意义上就是前期和后期割裂感的主要来源。</p>\n<p data-pid=\"6gqNB3Go\">总的来说，信野新生确实是一个好玩的游戏，作为原版，其系统新意和完成度都已经合格了，虽然考虑到售价和其他因素，我并不推荐多数玩家入手，但不少人已经开始期待威力加强版能有怎样的表现。不过就我看来，新生的主要问题是来自于框架设计层面，无论怎样修改AI和数值都解决不了这些问题，所以如果光打补丁肯定是不够的。创造的那套革新放在九年前确实让人眼前一亮，但其瓶颈也越来越明显了。</p>\n<p data-pid=\"u4VntQR-\">另外本作的开发周期估计还是不太充足。之前一再延期，成品除了基本没加新人物，事件文本照搬大志，独有政策、战法、特性数量少，事件只有剧情没有设计合战之外，从宣传发售到现在官方居然没有表明有季票或者DLC计划，对于一向热衷于花式捞钱的光荣而言，这已经说明团队对本作的发展规划不够明确，有赶鸭子上架的嫌疑。</p>\n<p data-pid=\"vxuEjMiX\">同时信野系列有用副标题突出核心系统的习惯，但我在游玩过程中却一直都很疑惑所谓“新生”到底指什么，直到后来发现了一个假想事件，内容是织田信长从本能寺脱出，组织人马打败了造反的明智光秀，而事件标题就叫“信长之野望·新生”。所以新生原来只是个假想......</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f9e65f2875b07216ab084c14b8c2c334_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"334\" data-watermark=\"original\" data-original-src=\"v2-f9e65f2875b07216ab084c14b8c2c334\" data-watermark-src=\"v2-8aa2ce4a4c2c13705854e52f5b09f787\" data-private-watermark-src=\"v2-6e28bd4fa6bfec78525c42d6b725f766\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-ting-61-50?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FFF团长</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/451730539/answer/2639566370?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">93 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/544672881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《信长之野望：新生》有什么实用的游玩方式？</a><br><a href=\"http://www.zhihu.com/question/505905640?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《信长之野望》这游戏怎么玩？</a><br>\n","link":"http://www.zhihu.com/question/451730539/answer/2639566370?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价 AVG 游戏《葬花·暗黑桃花源》的 DLC《葬花：折镜之蝶》？","date":"2022-08-22 05:36:22","description":"\n<p></p>\n<p><img src=\"https://picx.zhimg.com/v2-9519bb431c358afadbe21611a0971d84_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"353\" data-watermark=\"watermark\" data-original-src=\"v2-9519bb431c358afadbe21611a0971d84\" data-watermark-src=\"v2-924ffa9f82e9048fd1c9aa5f389bddb7\" data-private-watermark-src=\"v2-3510aa67dc4eeed0345a8da4c2c320c8\" data-tags=\"porn\"></p>\n<p data-pid=\"kB8aUrwb\">感谢知乎的邀请，我又来写亲自答啦。</p>\n<p data-pid=\"ZcbCu3yd\">因为DLC的剧情反转较大，剧透与否会影响一些体验。</p>\n<p data-pid=\"unrJ1JwP\">这次回答分为主题讨论（非剧透）和剧情讨论（剧透）</p>\n<p data-pid=\"MBef-lVj\">主题讨论基本复制杂谈（十），如下：</p>\n<p data-pid=\"6rtD_cv4\"> 【主题讨论】</p>\n<p data-pid=\"p1ewavDy\">首先，我想讲一下创作《葬花》的DLC的理由。</p>\n<p data-pid=\"_Fwb5oZ_\">其实......最初是不太想做DLC的，毕竟《葬花：暗黑桃花源》本身就是一个很完整的故事了。</p>\n<p data-pid=\"NxyIruN-\">在《葬花》里，可以看到桃花源世界的全貌，可以体验一个完整的故事，似乎没有继续做的必要了。</p>\n<p data-pid=\"v20wtmHS\">而且，我们要忙新作《二分之一》，这时候再分散精力去做《葬花》的DLC，似乎是一个不太明智的选择。</p>\n<p data-pid=\"ChD6hBby\">哪怕为了口碑去做DLC，其实最好的方案是写短一些，免费送出去就好。</p>\n<p data-pid=\"POnYRG49\">这样能弥补一些创作中的遗憾，也不会占用工作室太多工期。</p>\n<p data-pid=\"HMKD1EcG\">然而，因为2022年初的一起社会事件，我最终决定将DLC写得多一些，最终DLC有了本体一半的内容量。</p>\n<p data-pid=\"7Z1olgId\">.....</p>\n<p data-pid=\"HHu5QxUH\"> 2022年1月底，我正在三亚过年。</p>\n<p data-pid=\"v2kluTUR\"> 当时，刚刚抵达三亚，要去做核酸检测。</p>\n<p data-pid=\"FeWoQ8gA\"> 去医院的时候，我看到了医院门口堆了很多花束。</p>\n<p data-pid=\"EuZAO3Fy\"> 经过打听，才知道有一位寻亲网红的少年留下了遗书、跳海自杀，当地的人们感到惋惜，便纷纷在他来过的这个医院留下花束。</p>\n<p data-pid=\"V7Cvvr3X\"> 那天下午，我看了他在网上留下的遗书。</p>\n<p data-pid=\"wudFcn4d\"> 他以平静的态度，向人们讲述了他的一生。</p>\n<p data-pid=\"WPo7Xbcj\"> 出生后，他便被父母卖掉，四岁养父母双亡。</p>\n<p data-pid=\"PsGZhRad\">上学时，他经历了校园暴力、被同学嫌弃、遭男老师猥亵。</p>\n<p data-pid=\"FX-eoIDx\"> 长大后，他有了寻亲的目标，可找到父母后，却被视作“累赘”而被二次遗弃。</p>\n<p data-pid=\"5D3knRkK\"> 并且，他将这些事公布给公众后，并没有得到纯粹的“同情”。</p>\n<p data-pid=\"h_c5G3oo\">他的笑被人认为是在“假笑”、他的话语被人认为是“有心机的设计”。</p>\n<p data-pid=\"8FYCZxWl\">大概本来就是如此：人们倾向于选择关注更刻薄的评论。</p>\n<p data-pid=\"UCFMTdOy\">那些对他抱有善意的评论太过千篇一律，而对他抱有恶意的揣测则更容易受人关注。</p>\n<p data-pid=\"A56z13Mn\">我仿佛看到了：或许在一个晚上，他躺在床上，在黑暗的房间里开着手机，用手指划过一条条充满恶意的指责，再回想起本就背负重量的一生，泪流满面。</p>\n<p data-pid=\"NTAHWRme\">他写下遗书，然后从容赴死。</p>\n<p data-pid=\"R2Q_EzsT\">他很遗憾，找不到和这个世界磨合的方案，于是便跳海自杀。</p>\n<p data-pid=\"Niir8gyB\">......</p>\n<p data-pid=\"qwXWDXtn\">看完他的遗书后，我想起另外的两人和先前的创作经历，不禁有些自责。</p>\n<p data-pid=\"Vr8Y3Nys\">我这人，总是因为“某人的死亡”而有创作的欲望。</p>\n<p data-pid=\"Zvr-XTco\">其实，创作漫画《聂小倩投食计划》，就是因为那位聊过两句的漫画同行。</p>\n<p data-pid=\"HhU3uLRm\">我听闻了他在出租屋惨死的消息，便把他的漫画都看了一遍，从而有了写《小倩》的欲望。</p>\n<p data-pid=\"x6Cs05E8\">创作短片电影《玻璃糖》时，亦受到一位上吊自杀的电影导演的影响，当时我也在低谷期，对他的境遇感同身受。</p>\n<p data-pid=\"hZHNL4JC\">如今，我又开始因为那名令人叹息的少年而创作这部DLC。</p>\n<p data-pid=\"6a4NT09c\">或许，我天生喜欢“死亡”的主题。</p>\n<p data-pid=\"McOmyDYf\">......</p>\n<p data-pid=\"uiUv_B9K\">于是，年假结束后，我开始了DLC大纲的扩写以及具体文案的创作。</p>\n<p data-pid=\"hvLhjEsW\">我听着《负重一万斤长大》和《大海》，思考着自杀这个主题。</p>\n<p data-pid=\"G9fHeweK\"> 现代社会明明更加进步，自杀率却比古代还要高。</p>\n<p data-pid=\"nlgkxzWz\"> 这是为什么呢？</p>\n<p data-pid=\"kTNk7F2c\"> 或许是因为现代社会生产力太高，通讯又太过发达，人与人的差距所产生的压力更大？人与所期望的生活差距太大后，更容易感到深深的无力？</p>\n<p data-pid=\"3pNPiFcI\"> 如果有个桃花源，能逃避这一切，这些人会不会都想要逃到那里去呢？</p>\n<p data-pid=\"qpIB9YZI\"> 如果能与一个背负重量的厌世之人相遇，我会想与他（她）说什么，想与他（她）讨论一些什么呢？</p>\n<p data-pid=\"M-T7MU3T\"> 这几个疑问推着我，让我不断写出文字。</p>\n<p data-pid=\"29LjRptv\"> 于是，在本篇中已死的角色“严玥秋”的形象愈发鲜活了起来。</p>\n<p data-pid=\"B9CWu00W\"> 我也开始动笔，写下了DLC《葬花：折镜之蝶》的故事。</p>\n<p data-pid=\"jNkpmhJF\"> ......</p>\n<p data-pid=\"ElgSyLG2\"> 本篇的第一主题是“跨越千年的恋爱：讨论永生和爱情的意义。”</p>\n<p data-pid=\"79fRxass\"> 而DLC的第一主题则回到了更像是《桃花源记》的主题——讨论人们为什么想要“逃离世界”。</p>\n<p data-pid=\"KANhVhey\">并且，我想在DLC中再度深化一个第二主题：</p>\n<p data-pid=\"-qGL4pPX\">完美的虚幻和残酷的真实，我们要作何选择？</p>\n<p data-pid=\"mmhBuSnh\">这其实也是本篇和沉梦结局的第二主题，也是新作《二分之一》中的一个重要主题。</p>\n<p data-pid=\"8MCJjbKM\">DLC无重复文本、多个结局互相补充、每个选项都充满意义。</p>\n<p data-pid=\"rj1RtieO\">我个人感觉，DLC的故事会稍微沉重一些，节奏也会慢一些，虽然没有本篇阅读起来那么“爽”，让部分玩家的体验不如本篇、但或许会让另一些玩家会更喜欢。</p>\n<p data-pid=\"FOsnWvgi\">希望《葬花：折镜之蝶》不会辜负大家的期待。</p>\n<p data-pid=\"HCDjpO5b\">我也很期待大家在玩了这部作品后，能够喜欢严玥秋和青禾，能一起讨论其中的人物和主题。</p>\n<p data-pid=\"PZGo5ZRl\"> 【剧情讨论】</p>\n<p data-pid=\"GyZ-A-xW\"><b>【以下内容包含剧透，推荐已通关折镜之蝶的全结局的玩家阅读↓】</b></p>\n<p data-pid=\"sq6u5Qy2\">我除了《折镜之蝶》的主题，也想和大家多讨论下剧情设计。</p>\n<p data-pid=\"HiB3inhF\">最近收到了很多通关DLC的读者留言。</p>\n<p data-pid=\"x6sfXGuI\">有人会问我：“《折镜之蝶》结局的真相到底是怎样的？玥秋是精神分裂症、夺舍、还是青禾真的是她妹妹的灵魂？”</p>\n<p data-pid=\"HCWcVq_O\">对于这个问题的答案，我在剧本中的设计是开放却有倾向的。</p>\n<p data-pid=\"ATNYj4W7\">如果玩家最后选择“不相信”玥秋，走“完美解谜”的结局的话：那么答案便是这样：</p>\n<p data-pid=\"paTRk05G\">“玥秋因为邪教迫害导致的精神分裂，从而诞生的苏小野的幻想，苏小野是她因为孤独寂寞而生的伴侣，是一个无限接近真实的虚幻。”</p>\n<p data-pid=\"Y71HUq71\">这是我心中最倾向的答案。</p>\n<p data-pid=\"A784zRNZ\">但我并不想给这个答案下定论，毕竟，玩家既然在本篇中相信了“桃花源”的存在，为什么不能更浪漫一些，相信玥秋的话、相信灵魂存在呢？</p>\n<p data-pid=\"-Rh3QNT0\">我想让玩家自己去进行理性或感性的抉择。</p>\n<p data-pid=\"4GaHEbtP\">不仅是DLC，下一部作品《二分之一》更是整个游戏都是这种设计表达。</p>\n<p data-pid=\"27ORQGEI\">另外，其实最初做DLC的时候，脑内最先浮现类似的剧本是《蔷花红莲》。</p>\n<p data-pid=\"aYKMVNmz\">《蔷花红莲》一部2003发行的韩国恐怖电影，就是一个有关姐妹、精神分裂的故事，是我在读大学的时候电影鉴赏课看的。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5e0f2b9a41e133ce3e59eac013210711_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"350\" data-rawheight=\"497\" data-watermark=\"watermark\" data-original-src=\"v2-5e0f2b9a41e133ce3e59eac013210711\" data-watermark-src=\"v2-74adc3f9efbbf68e06cbd70bf37f8ed2\" data-private-watermark-src=\"v2-9bd2c16f6857e68a4bf93b2e365526c9\"></p>\n<p data-pid=\"nCbCydWM\">故事设计非常有巧思，氛围和镜头语言很好，强烈推荐。</p>\n<p data-pid=\"J3nRW34k\">本来，DLC的剧情也会设计成与蔷花红莲很像，我想设计成“玥秋”曾害死“妹妹”却在逃避的某种设定。</p>\n<p data-pid=\"rP0V7YjI\">后来，在过年的时读到那名少年的遗书后，又觉得自己如果把《折镜之蝶》做成类似《蔷花红莲》的故事有些刻意追求“黑深残”，并不合适，便改变了故事的结构、写了新的剧情。</p>\n<p data-pid=\"awX-ujBg\">希望能和大家多多讨论，也感谢支持《折镜之蝶》，谢谢！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zcreation?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">嵇零 Zero</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/548806947/answer/2636664519?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/505744687?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《葬花·暗黑桃花源》的剧情设计怎么样？</a><br><a href=\"http://www.zhihu.com/question/505680878?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《遗迹灰烬重生》、《无主 3》、《命运 2》和《枪火重生》哪个和朋友刷起来更爽一些？</a><br>\n","link":"http://www.zhihu.com/question/548806947/answer/2636664519?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]