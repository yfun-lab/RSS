[{"title":"谁能凭空玩出一家游戏公司？｜开发者列传 02 · 田尻智（中）","date":"2022-11-13 08:59:20","description":"在一番寒暄之后，远藤雅申将一位有些青涩木讷的年轻人介绍给了横井军平，并且告诉他，这位田尻君的作品可能会改变一切。<a href=\"https://sspai.com/post/76784\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76784"},{"title":"任意键｜《战神 诸神黄昏》，虎父无犬子","date":"2022-11-13 02:55:28","description":"「任意键」正式上线啦！为了丰富各位派友的阅读体验，我们尝试为「任意键」增加了对应的音频内容，邀请了我派的两位带薪打游戏选手编辑@Kiririn和@一只索狗从玩家视角对当期的主要内容进行谈论和评述。您可 ...<a href=\"https://sspai.com/post/76783\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76783"},{"title":"从显示器的构成开始，重新认识 LCD 显示器内部的细节","date":"2022-11-12 07:00:00","description":"我们先来看看常生活中最常见的 LCD 技术显示器背后到底隐藏着哪些细节吧。<a href=\"https://sspai.com/post/76509\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76509"},{"title":"iPhone 屏幕好在哪？OLED 次像素渲染深度解析","date":"2022-11-12 03:05:18","description":"次像素是如何被驱动进行显示的，OLED 和 LCD 之间的区别在哪里，Apple 在这方面又有什么积累？<a href=\"https://sspai.com/post/76773\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76773"},{"title":"让阅读无缝衔接 —— JS 获取用户阅读进度","date":"2022-11-11 16:40:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>很多博客中最常见的问题就是：文章很长，但是读者很忙。下次阅读的时候，可能要花一些时间才能恢复到先前的阅读位置。</p>\n<p>如果可以设备间，识别二维码或是一个链接就可以让阅读无缝衔接，直接跳转到相应位置，那么阅读体验就会变得更加优秀。</p>\n<p>那么，开始吧！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>要知道阅读位置，那么就要知道当前页面的坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getScrollPosition = <span class=\"function\">(<span class=\"params\">el = <span class=\"built_in\">window</span></span>) =&gt;</span> ({</span><br><span class=\"line\">    x: el.pageXOffset !== <span class=\"literal\">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class=\"line\">    y: el.pageYOffset !== <span class=\"literal\">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// getScollPosition().x =&gt; 页面横坐标; getScrollPosition().y =&gt; 页面纵坐标;</span></span><br></pre></td></tr></table></figure><p>大部分情况下，我们只用关注纵坐标。横坐标大概率为 <code>0</code>。</p>\n<p>我们还需要一个页面滚动的事件，用于记录当前坐标，并储存在临时存储中。</p>\n<p>至于为什么是 <code>sessionStorage</code> 而不是 <code>localStorage</code>，则是因为 <code>localStorage</code> 除手动清除外，不会自动过期。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处的 750 是「页面元素的最大宽度」</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowScroll</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 反复修改 确保页面尺寸不改变</span></span><br><span class=\"line\">    wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\">    wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"built_in\">Math</span>.round(getScrollPosition().y);</span><br><span class=\"line\">    <span class=\"comment\">// 组合字符串，同时记录页面坐标，页面宽度和高度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"string\">`<span class=\"subst\">${y}</span>:<span class=\"subst\">${wx}</span>:<span class=\"subst\">${wy}</span>`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 写入到 sessionStorage 中</span></span><br><span class=\"line\">    sessionStorage.setItem(<span class=\"string\">\"read_y\"</span>, p);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = windowScroll;</span><br></pre></td></tr></table></figure><p>你可能发现了，此处的变量 <code>p</code>，并不仅仅是「页面纵坐标」，而是「页面高度」与「纵坐标」的组合字符串。</p>\n<p>事实上，如果单纯是纵坐标判断位置，那么在不同高度，不同宽度的设备上，就会出现错位的情况。而同时记录三个信息，就可以还原真实坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// URL 中是否包含传递的坐标信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (location.hash.split(<span class=\"string\">\"#read=\"</span>).length &gt; <span class=\"number\">1</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 分离字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = location.hash.split(<span class=\"string\">\"#read=\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 组合乘积，顺滑移动至坐标</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 从 sessionStorage 中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>) || <span class=\"string\">\"0:0:0\"</span>;</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>到现在，我们已经完成了 URL 的解析和基本生成。</p>\n<p>那么，URL 即为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${location.pathname}</span>#read=<span class=\"subst\">${sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>)}</span>`</span>;</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>搭配生成二维码等插件效果更佳。</p>\n<blockquote><p>Miracle 主题将在下个版本中更新该功能。</p></blockquote>\n","link":"https://blog.yfun.top/posts/2022/js-get-users-reading-progress/"},{"title":"本周看什么 | 最近值得一看的 7 部作品","date":"2022-11-11 09:51:11","description":"☕️TL;DR近期佳作推荐：[动画]疯狂动物城大小事+、[港剧]上车家族、[日剧]欺诈猎人、[美剧]毒蛇王后第一季、[日剧]Elpis-希望、或者灾难-、[日剧]Atom之子、[电影]再见了，橡果兄弟 ...<a href=\"https://sspai.com/post/76774\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76774"},{"title":"煮饺子为什么要多次加水？","date":"2022-11-11 09:22:52","description":"\n<p data-pid=\"gESTr8v8\">上面很多答主都给出答案了，防饺子破皮、扑锅，让饺子皮更筋道等等。</p>\n<p data-pid=\"ilEPBgIa\">我也来贡献一个解释：<b>多次加水可以让饺子「内外同熟」</b>。</p>\n<p><img src=\"https://picd.zhimg.com/v2-c5b57bcf77ec3f354645155218c25784_720w.png?source=b1748391?rss\" data-caption=\"来源：pexels\" data-size=\"normal\" data-rawwidth=\"3201\" data-rawheight=\"1719\" data-watermark=\"watermark\" data-original-src=\"v2-c5b57bcf77ec3f354645155218c25784\" data-watermark-src=\"v2-42bb3adb6c1f34e67ade298d3f9aa889\" data-private-watermark-src=\"v2-a825f883e18f128bf599c47a9583ed6b\"></p>\n<p data-pid=\"txVyC8cw\">刚开始煮饺子时，<b>容易控制不好火候</b>：</p>\n<ul>\n<li data-pid=\"lvPkI6_i\">要不饺子皮火候刚好，但里面的馅儿夹生；</li>\n<li data-pid=\"sbeBxWdw\">要不里面的馅儿刚好，饺子皮煮过了，破皮加沾黏。</li>\n</ul>\n<p data-pid=\"gLmN7QiY\">这就是没做到「内外同熟」。</p>\n<p data-pid=\"r34F-VIr\">原因吧，<b>我们很多人会高估食物传热的速度，低估了做饭时食物的内、外部温差</b>：</p>\n<blockquote data-pid=\"nN2Y-a_x\">这是烤面包时的内外部温度曲线，红线是表皮温度，蓝线是中心温度。</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-5479ff2f7190b0e0c4b068fc10be50bc_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1465\" data-rawheight=\"1083\" data-watermark=\"watermark\" data-original-src=\"v2-5479ff2f7190b0e0c4b068fc10be50bc\" data-watermark-src=\"v2-9651199e91754b77132c72e460e28eb4\" data-private-watermark-src=\"v2-4d15da6294d1974d08df427c970b85fd\"></p>\n<p data-pid=\"5Zpx3fm6\">可以看到，当面包的表皮已经130℃以上时，中心才刚开始升温；</p>\n<p data-pid=\"nj_AeW_6\">即使到最后，内外部的温差也还有大约70℃。</p>\n<p data-pid=\"FHq6dVr9\"><b>我们以前也做过类似实验</b>，水煮开之后把冻肉丸子放进去煮，煮了15分钟后，肉丸的中心温度也只有48℃。</p>\n<blockquote data-pid=\"UjxiNHSL\">爱吃火锅的人应该也有类似的体验，以为已经煮熟的丸子，一咬开，里面还是凉的。</blockquote>\n<p><br></p>\n<p data-pid=\"H-nqFf6H\">而煮饺子要多次加水，<b>就是为了缩小内外部的温差，实现「内外同熟」</b>。</p>\n<p data-pid=\"5hda70Ec\">因为食物的传热速率是有上限的，面制品也不例外：</p>\n<p><img src=\"https://picd.zhimg.com/v2-7d910d5a3b87eeebd1c1287399109106_720w.png?source=b1748391?rss\" data-caption=\"面团的传热速率随温度的变化值\" data-size=\"normal\" data-rawwidth=\"3225\" data-rawheight=\"1058\" data-watermark=\"watermark\" data-original-src=\"v2-7d910d5a3b87eeebd1c1287399109106\" data-watermark-src=\"v2-17c5649d6891e2180f024b1f30be21c4\" data-private-watermark-src=\"v2-f68c12db69ae9f36548361f74e50b4a5\"></p>\n<p data-pid=\"qj9crosl\">比如，面团在55℃左右达到了传热的最高效率，继续升温的话，因为面团开始「变熟」，传热效率反而下降了。</p>\n<p data-pid=\"1wTFNWXd\">所以，<b>保持在近沸点的温度对煮饺子的快慢其实没有帮助</b> (因为传热的效率有上限)。</p>\n<p data-pid=\"2gCgLUuT\"><b>与其高温过度加热，把饺子皮煮破，不如加点水把温度降下来，实现饺子的「内外同熟」</b>。</p>\n<blockquote data-pid=\"KKRP4xqB\">当然，如果饺子个头比较小，传热的影响没那么大，确实有可能少加水，或者不加水就能煮好。</blockquote>\n<p><br></p>\n<p data-pid=\"h7hZ30HU\">另外，有人提到<b>可以通过控制火的大小来达到控温的目的</b>，我还真把实验室的温度计拿回家试了试。</p>\n<p data-pid=\"Fdoe3Wbu\">我把水温升到75℃后把火关到最小，锅盖打开，但是10分钟以后温度还是一点点地上升到97℃。</p>\n<p data-pid=\"4N7GqNa9\">虽然理论上可以通过平衡热量散失和小火加热来达到温度恒定的，但实际来看，<b>可能需要一口口径更大的锅，才能达到热量的平衡</b>。</p>\n<p data-pid=\"NdW6VmR1\">所以，与其换个超大锅来煮饺子，(起码对于我来说)分几次加凉水可能是更实在的方法了。</p>\n<p data-pid=\"2oclVObe\">——谢谢阅读！</p>\n<p><br></p>\n<p data-pid=\"SeS9KNed\">资料：</p>\n<ol>\n<li data-pid=\"tcOKwSPE\">V Nicolas, P Salagnac, P Glouannec, etc. Modelling heat and mass transfer in bread baking with mechanical deformation. Journal of Physics: Conference Series 395 (2012) 012146.</li>\n<li data-pid=\"M-a2bqle\">Bernarda eruga, Sandra Budaki\n. Determination of thermal conductivity and convective heat transfer coefficient during deep fat frying of “KroÐtula” dough. Eur Food Res Technol (2005) 221:351–356.</li>\n</ol>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/27911488/answer/2754080938?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/27911488/answer/2754080938?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">172 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/62681203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">煮饺子加水每次要加多少？</a><br><a href=\"http://www.zhihu.com/question/34872635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">煮饺子时水开了之后为什么还要加几次凉水？</a><br>\n","link":"http://www.zhihu.com/question/27911488/answer/2754080938?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Adobe 与潘通的「分手」始末，以及除了吃瓜你还能做些什么","date":"2022-11-11 08:00:00","description":"潘通色卡让用户文件变「黑」这件事，你有这些信息值得了解。<a href=\"https://sspai.com/post/76771\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76771"},{"title":"像装应用一样轻松自建服务：YunoHost 使用指南","date":"2022-11-11 06:33:52","description":"YunoHost 提供了一个兼顾便捷和灵活的自托管服务解决方案。本文结合使用经验，依次介绍了 YunoHost 的安装和配置方法，并从服务安装、日常使用等方面提出建议。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/yunohost-tutorial\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/yunohost-tutorial"},{"title":"完美主义有错吗？","date":"2022-11-11 05:31:50","description":"\n<p data-pid=\"y_D-yM2s\"><b><i>完美主义当然没有错，但消极完美主义确实会在一定程度上对我们的生活造成负面影响。</i></b></p>\n<p><br></p>\n<p data-pid=\"UcNcdis5\"><i>高标准的要求自己，真的是一件好事吗？</i></p>\n<p data-pid=\"gq70qYRE\"><i>追求完美，究竟是动力还是压力？</i></p>\n<p data-pid=\"dnBgOAL8\"><i>为什么有的完美主义者精致成功、事业有成，有的却生活一团乱麻？</i></p>\n<p data-pid=\"w0RjZULJ\"><i>总是追求完美，却事事做不完美？</i></p>\n<p data-pid=\"vwbWN1Im\"><i>完美主义真的有错吗？</i></p>\n<p data-pid=\"BuBLTD2c\"><i>面对这些问题，我们需要先理解——</i></p>\n<p><br></p>\n<h2><b>到底什么是完美主义？丨消极vs积极完美主义者</b></h2>\n<p><br></p>\n<p data-pid=\"VtT8wqU6\">完美主义被描述为<b>“苛刻的要求”</b>和“与现实情境相比，要求自己或他人有更高的工作质量”[1]，这种定义是最初<b>从病理角度出发</b>的消极完美主义[2]。</p>\n<p><br></p>\n<p data-pid=\"3yJqcpXC\">他们设置并严格坚持<b>不符合实际的高标准，并以是否达到这些标准来判断自我价值</b>[3]。</p>\n<p><br></p>\n<p data-pid=\"QEYTgNg-\">或许你身边里有这种人，平日游手好闲却总觉得自己能成为亿万富翁，学习懒散却以年级第一为目标，或者是总要求自己在各方面都做得完美。显然，这些标准从实际上来说实现他们太难了。所以消极完美主义者总是表现出<b>过度的自我批评和恐惧失败</b>。</p>\n<p><br></p>\n<p data-pid=\"2MiL_sW4\">消极完美主义者可能会这样<b>对坏事进行归因</b>：</p>\n<p><br></p>\n<blockquote data-pid=\"neDzUxMN\">这个作业我居然没有做对——一定是我能力不够！我太笨了；<br>面试没有通过——我是一个失败者，所以我当然不会成功；<br>考试结果出来不理想——我就是不会学习，我就是讨厌这个科目，这门课我可能是一辈子都学不会的！</blockquote>\n<p><br></p>\n<p data-pid=\"r4MKuRKF\">由于对自己的过度苛求和指责，加上对可能发生失败的恐惧，消极完美主义者<b>往往会引发很多负面的情绪，比如焦虑、抑郁、进食障碍等</b>[4]。</p>\n<p><img src=\"https://pica.zhimg.com/v2-318864c5d210a0ac431ae687f1863b20_720w.jpg?source=b1748391?rss\" data-caption=\"流传的BM女孩尺码表曾掀起对于女性购买服装需要迎合不健康身材标准的广泛声讨 (图源网络，侵删)\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"951\" data-watermark=\"original\" data-original-src=\"v2-318864c5d210a0ac431ae687f1863b20\" data-watermark-src=\"v2-d42cf82b7fd193746ea2fc5816e7d92d\" data-private-watermark-src=\"v2-58ebb4c1faa04806a2280ec2c1aa580e\"></p>\n<p><br></p>\n<p data-pid=\"lKkctSMC\">研究表明，消极完美主义者<b>尽力去满足别人对他的期望，期望获得他人肯定的倾向</b>，常常知觉到自己设定的标准与实际的表现之间的差距，担心害怕犯错误，感知到来自父母的高期望，做事犹豫不决，更容易表露出低自尊和拖延行为[5][6]。</p>\n<p><br></p>\n<p data-pid=\"Bb2WCfUf\"><b>但是，完美主义一定是不健康，或者说错误的吗？</b></p>\n<p><br></p>\n<p data-pid=\"AtOjGpzu\">不是的，一些研究者认为资优学生的完美主义不一定引起消极的情绪相反会对成功产生积极的追求[7]，他们被称为<b>积极完美主义者</b>。积极完美主义者在追求过高标准的同时，能及时根据自己的实际水平调整好目标的期望值，减少目标和现实的差距，<b>在追求完美的同时不伴随过度的自我批评，能在工作中体验到满意感和快乐感</b>[5]。</p>\n<p><br></p>\n<p data-pid=\"tp9GFkUm\">虽然他们也对自己高要求，尽力将事情做的尽善尽美，但他们能够根据实际情况调整自己的心态，遇到挫折时不过度指责自己，坦坦荡荡接受失败的事实，最终表现为健康的心态和较高的自尊。</p>\n<p><br></p>\n<h2><b>为什么会形成完美主义的思维？</b></h2>\n<p><br></p>\n<p data-pid=\"KDWXTQUX\">一般来说，完美主义的形成和家庭、遗传、社会环境因素有关。</p>\n<p><br></p>\n<h3>1. 家庭因素的影响</h3>\n<p><br></p>\n<p data-pid=\"vWpFapJx\">研究者认为，在完美主义的形成、发展中，<b>家庭环境作用是不可忽略的</b>。</p>\n<p><br></p>\n<p data-pid=\"mf1J0Rkk\"><b>完美主义的父母会给他们的孩子设立“完美”标准，控制孩子朝目标努力的进度</b>。当父母表现出这些行为，便向孩子传递了 “必须表现的完美才能获得父母的关爱”和“失败是不能容忍的”等信息，这会给孩子带来压力和痛苦[8]。孩子可能通过接受父母设定高的、不切实际的标准来减缓压力[9]。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b985bdf18c586b8d42a9fc8d3dcdc67_720w.jpg?source=b1748391?rss\" data-caption=\"某年高考作文题目意在讨论教养方式中成绩、进步和完美等话题\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"764\" data-watermark=\"original\" data-original-src=\"v2-7b985bdf18c586b8d42a9fc8d3dcdc67\" data-watermark-src=\"v2-89d03f4d152837ec11e8b51d9ee8f875\" data-private-watermark-src=\"v2-8ae9ecd51afec1e159044045e7584c36\"></p>\n<p data-pid=\"_7NYoXm_\">研究表明，父母使用<b>破坏性教养操作养育孩子</b>和<b>消极完美主义</b>明显相关。比如使用言辞或非言辞的手段操控孩子的情绪与行为：“你看看别人家的xxx，这次xxxxx，你呢？”“噢，怎么才考了这个分数？为什么不考高一点？”事实上，这种教养方式对孩子的自尊、焦虑程度和完美主义倾向有很大影响[10][11]。</p>\n<p><br></p>\n<p data-pid=\"gNmcs-P1\">但与之相反的，父母使用<b>民主型教养</b>（鼓励独立自主，提供情感支持）与<b>积极完美主义</b>明显相关。</p>\n<p><br></p>\n<p data-pid=\"qQZA5ZeD\">“没关系，失误是常有的，宝贝下次再努力啦~”，“你很棒噢~你是妈妈的骄傲！”，“我相信你可以自己做到的，加油，去吧！”……这种教养方式更容易培养出积极完美主义的孩子[12]。</p>\n<p><br></p>\n<h3>2. 遗传因素的影响</h3>\n<p data-pid=\"woQIIXtu\">研究者在一项对中太平洋1022对双胞胎的研究中发现<b>完美主义的不同表现和遗传有关</b>[13]。比如，父母的对自己的高要求可能相对于拖延和担忧犯错更可能遗传给孩子。</p>\n<p><br></p>\n<p data-pid=\"-rKprfNS\">在对202个神经性厌食症家庭的研究中发现，<b>诱发神经性厌食症的基因与完美主义相关</b>[14]。他们发现先前的研究确认基因与进食障碍有关，这些基因同完美主义得分也相关。</p>\n<p><img src=\"https://picd.zhimg.com/v2-2fc77b3688cc0a645b4a94a01ab43723_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"479\" data-watermark=\"original\" data-original-src=\"v2-2fc77b3688cc0a645b4a94a01ab43723\" data-watermark-src=\"v2-59f5ef918e5408ebada5e0b14c1f6177\" data-private-watermark-src=\"v2-0ea318ce9e07915107bbf001e0e21b2f\"></p>\n<p data-pid=\"Q_BZgXL9\">对258对西班牙青少年双生子的研究表明，<b>遗传对青少年完美主义的影响是中等程度的</b>。[15]</p>\n<p><br></p>\n<h3><b>3.社会环境的影响</b></h3>\n<p><br></p>\n<p data-pid=\"piTKwhnL\">还有一部分完美主义者，在<b>社会压力下自发的追求完美</b>。</p>\n<p><br></p>\n<p data-pid=\"HvqookVs\">社会竞争浪涛汹涌。小到班级的分数排名大到高考，从隔壁家小孩学了几门才艺到同学们出了几次国，社会比较无处不在。在社会压力下，更多的现代人遭受焦虑、自卑和自我怀疑等情绪的困扰，从而产生“我要变成一个更好的人“的念头。</p>\n<p><br></p>\n<p data-pid=\"0kOTn-Ah\">其实这就产生了追求卓越的自主动机，也就是给自己定下高标准的开始。研究表明，在大学生这一群体中，完美主义者比例很高，<b>约三分之二的大学生都可以被归为完美主义者</b>。促成这个结果，<b>社会压力</b>功不可没[16]。<br></p>\n<h2><b>面对完美主义，我们可以做些什么？</b></h2>\n<p><br></p>\n<p data-pid=\"O0a7boH1\">如果你是一个非完美主义者——</p>\n<p><br></p>\n<p data-pid=\"eY4a8S2R\">请你放心，没有高标准也能够成大事，也能有所作为。完美主义和非完美主义本质上并没有孰优孰劣，最适合自己的才是最好的。</p>\n<p><br></p>\n<p data-pid=\"BiPWF4lf\">如果你是一个积极完美主义者——</p>\n<p><br></p>\n<p data-pid=\"uenHnvxQ\">这意味着你追求优秀的同时能正确的对待失败和挫折，胜不骄、败不馁，你能够设置合适的期望水平和积极的评价自我，并且通过成功感提升自尊和保持心理健康。</p>\n<p><br></p>\n<p data-pid=\"T-xDVhQC\">你的生活状态是十分健康的，只要你避免落入自怨自艾、害怕失败的怪圈，相信总有一天你能成为你想成为的自己。</p>\n<p><br></p>\n<p data-pid=\"mJ1tC05Y\">如果你发现你有明显的消极完美主义倾向，并且坏情绪已经影响到正常生活，不妨大大方方地走进心理咨询室吧，你会找到答案的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-2015c7ea17057ed5f4dbeabf277a22a9_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-2015c7ea17057ed5f4dbeabf277a22a9\" data-watermark-src=\"v2-24b24fd726c7009247a628724e07bd3a\" data-private-watermark-src=\"v2-6fb79ef28932c1509bf2350379d5332d\"></p>\n<p><br></p>\n<p data-pid=\"ZKPIc7hD\"><b>有时候，It’s ok to躺平，我们不必事事尽善尽美。</b></p>\n<p><br></p>\n<p data-pid=\"HQvB-f9Q\">作者：糖豆豆</p>\n<p><br></p>\n<p data-pid=\"E5BLFKY6\">编辑： <a class=\"member_mention\" href=\"http://www.zhihu.com/people/b6af72343bdcb6210580dcfa35286aff\" data-hash=\"b6af72343bdcb6210580dcfa35286aff\" data-hovercard=\"p$b$b6af72343bdcb6210580dcfa35286aff\">@Giocandaa</a> </p>\n<p><br></p>\n<p data-pid=\"zydmVFxQ\">欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，<a href=\"https://www.zhihu.com/search?q=%E5%8C%97%E4%BA%AC%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2274087547%7D\" class=\"internal\">北京师范大学</a>心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<p><br></p>\n<h2>参考资料</h2>\n<blockquote data-pid=\"I_g4NEii\">[1] Horney, K .Neurosis and HumanGrowth:The Struggle Toward Self -Realization.New York:W.W.Norton, 1950<br>[2] Hollender, M.H .Perfectionism.Comprehensive Psychiatry, 1965, 6:94 -103<br>[3] Burns, D.The perfectionist' s script for self -defeat.Psychology Today, 1980, 14( 6) :34-52<br>[4] 费定舟，马言民. 完美主义真的“完美”吗? ——完美主义综述[C].长沙：中国临床心理学杂志,2017,566-571<br>[5] 张斌,谢静涛,蔡太生. 不同完美主义类型大学生的心理特征[C].长沙：心理卫生评估,2013,868-872<br>[6] Beck, B. L, Koons, S.R.＆Milgrim，D.L.Correlates and consequences of behavioral procrastination: The effects of academic procrastination， self-consciousness， self-esteem and self-handicapping． Journal of Social Behavior and Personality，15( 5) ，3 － 13<br>[7] Parker, W.D.&amp;Adkins, K .K .Perfectionism and the gifted.Roeper Review, 1995, 17:173-176<br>[8] Flett GL, Hewitt PL. Perfectionism: Theory, research, and treatment. American Psychological Association, 2002. 89-96<br>[9] Turner LA, Turner PE. The relation of behavioral inhibition and perceived parenting to maladaptive perfectionism in college students. Personality and Individual Differences, 2011, 50: 840-844<br>[10] Craddock AE, Church W, Sands A. Family of origin characteristics as predictors of perfectionism. Australian Journal of Psychology, 2009, 61: 136-144<br>[11] Fletcher KL, Shim SS, Wang C. Perfectionistic concerns mediate the relationship between psychologically controlling parenting and achievement goal orientations. Personality and Individual Differences, 2012, 52(8): 876-881<br>[12] Gong X, Fletcher KL, Bolin JH. Dimensions of perfectionism mediate the relationship between parenting styles and coping. Journal of Counseling and Development, 2015, 93(3): 259-26<br>[13] Tozzi F, Aggen SH, Neale BM, et al. The structure of perfec[1]tionism: A twin study. Behavior Genetics, 2004, 34: 483-494<br>[14] Bachner-Melman R, Lerer E, Zohar AH, et al. Anorexia ner[1]vosa, perfectionism, and dopamine D4 receptor(DRD4). American Journal of Medical Genetics Part B: Neuropsychi[1]atric Genetics, 2007, 144: 748-756<br>[15] Iranzo-Tatay C, Gimeno-Clemente N, Barberá-Fons M, et al. Genetic and environmental contributions to perfectionism and its common factors. Psychiatry Research, 2015, 230: 932-939<br>[16] Grzegorek，Slaney，Franze，＆Ｒice，2004; Ｒice ＆ Lopez，2004</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/497294134/answer/2753025871?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">266 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/362146485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">完美主义怎么破？</a><br><a href=\"http://www.zhihu.com/question/548593344?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">完美主义怎么应对？</a><br>\n","link":"http://www.zhihu.com/question/497294134/answer/2753025871?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"App+1 | 文献搜集一站搞定，多平台学术利器：Publish or Perish","date":"2022-11-11 03:32:12","description":"Publish or Perish 是一个文献检索软件，支持包括谷歌学术在内的许多文献数据库，并能在结果中展示文献的引用数、h 因子等指标，还可以帮助用户迅速了解某个陌生领域或不熟悉的学者，在学术之路上走得更轻松。<a href=\"https://sspai.com/post/76766\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76766"},{"title":"派早报：Windows 11 的照片应用正式支持 iCloud Photo、任天堂宣布和 DeNA 合资等","date":"2022-11-11 00:47:28","description":"雷蛇推出 Razer Wolverine V2 Pro 版手柄，机核网启用新版品牌 logo 等。<a href=\"https://sspai.com/post/76763\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76763"},{"title":"高效制作幻灯片的思维范式：结构化、图像化、场景化","date":"2022-11-10 09:58:34","description":"本章的重点会以「效率」为关键词，从「幻灯片制作者」的角度出发，来讨论实际做「幻灯片设计」时，需要具备的方法论与软件技巧。<p>[......]</p>\n<a href=\"https://sspai.com/post/76522\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/282\" target=\"_blank\">《生产力超频：科学做好 PPT 的三个步骤（视频图文版）》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/76522"},{"title":"如何评价《原神》3.2版本新增魔神任务第五章《虚空鼓动，劫火高扬》？","date":"2022-11-09 07:13:20","description":"\n<p data-pid=\"-wQC3eEQ\">须弥主线终于在 3.2 版本圆满落下帷幕，毫不意外地获得了大家的一致认可与高度赞许，可谓将游戏剧情方面的综合素质拔升到了一个新的高度。</p>\n<p data-pid=\"xSLfmVCU\">究其成功原因，拉长的故事篇幅为编剧组提供了更多施展拳脚的空间是基础，多视角切换、大量人物参与的的演出使得剧情观感精彩节奏舒适，辅以大量细节的填充以及对前几幕铺垫伏笔的充分回收带来的足够清晰的叙事逻辑，再配合精美过场动画与音乐充分调动情感，让这场「王道系」拯救故事在热血与感动中结束。四、五个小时体验下来，宛如欣赏完了一部精彩的剧场版动画，让人充满回味。</p>\n<p><img src=\"https://picd.zhimg.com/v2-fb2d40d627b19ba7a598545e710c5180_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-fb2d40d627b19ba7a598545e710c5180\" data-watermark-src=\"v2-7a2167700d9e41b752511d3719ed53b9\" data-private-watermark-src=\"v2-5933e860023778ab004ff0fe0b9c258e\"></p>\n<p data-pid=\"czALe76q\">这次最终幕剧情提供的信息量可以说相当之大，值得分析考察之处也很多，本文中我就将挑选一些个人比较感兴趣的点展开讨论，与大家分享一些看法。</p>\n<p data-pid=\"aC3_NDQR\"><b>※ 文章篇幅较长，各位可点击目录快速跳转查看自己感兴趣的内容。</b></p>\n<hr>\n<h2>一、七叶寂照秘密主 &amp; 摩诃善法大吉祥智慧主</h2>\n<p data-pid=\"3mUH_Hrh\">登神散兵作为须弥主线最终 BOSS 在这次剧情中占据了相当重要的地位，与能够操纵多种元素力量、踏入「神之领域」的巨大神机展开激烈对战的过程想必给各位留下了深刻的印象，而纳西妲动用权能统合全须弥人的智慧帮助旅行者找出散兵弱点的演出高潮，更可谓是故事全篇最热血之处。相信也有不少朋友留意到了散兵登神后的新称号「七叶寂照秘密主」，与之对应的还有草神的新称号「摩诃善法大吉祥智慧主」，那么，这两个颇显庄严的称号背后又包含着怎样的文化背景呢？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f1d8cee0fd5303be2ba8513bb0352e33_720w.jpg?source=b1748391?rss\" data-caption=\"七叶寂照秘密主与摩诃善法大吉祥智慧主间的对决\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f1d8cee0fd5303be2ba8513bb0352e33\" data-watermark-src=\"v2-878a2ad886a35cb07c5ae44131b0dece\" data-private-watermark-src=\"v2-c2573b713c9413adb4201fffce758674\"></p>\n<p data-pid=\"jWC595mF\">首先来看一看<b>「七叶寂照秘密主」</b>，这个称号带有非常浓厚的佛教文化色彩。</p>\n<p data-pid=\"GhQpd-1K\"><b>「七叶」</b>指的是「七叶树」，也就是佛教圣树「娑罗树」的一种别称。据佛经记载，佛陀释迦摩尼在拘尸那罗国都城外的阿恃多伐底河边的娑罗双树下入灭（圆寂），相传佛陀涅槃之时娑罗树同时开花，林中一时变白如同白鹤降落。佛灭后，其弟子迦叶尊者成为教团统率者，于王舍城附近毗婆罗山中石窟「七叶窟」（因洞窟前长有七叶树得名）处会五百贤圣，安居三月，完成了结集经、律、论三藏圣典的大业。散兵在战斗中有一句语音「七叶之下，唯我长存」，就是表达「三千世界中唯我永恒常存」之意。</p>\n<p><img src=\"https://picd.zhimg.com/v2-0d248f5d2439ab368d9e98c51b428eb2_720w.jpg?source=b1748391?rss\" data-caption=\"生命的最后时刻，佛陀走到河岸边，命阿难在娑罗双树中间铺下卧具，弟子们都守候在他的身边，聆听佛陀最后的教诲。因与佛陀般涅槃相关，娑罗树被后世佛家视为圣树\" data-size=\"normal\" data-rawwidth=\"1590\" data-rawheight=\"1082\" data-watermark=\"original\" data-original-src=\"v2-0d248f5d2439ab368d9e98c51b428eb2\" data-watermark-src=\"v2-73204bbf99c56e16b4164d2390e7e193\" data-private-watermark-src=\"v2-ba579088b3baa35bd22ac9deceb6d73e\"></p>\n<p data-pid=\"Ea4McN0T\"><b>「寂照」</b>在佛教中代表有领悟真理大智慧的智能，能以正确的智慧来辨别万物的真实形式。所谓「真理之体云寂，真智之用云照」，佛教认为智之本体为空寂，有观照之作用，如同光洁的镜子可照见万物，但自身却不着一物。佛经《楞严经》中文殊菩萨偈：「净极光通达，寂照含虚空。却来观世间，犹如梦中事」。</p>\n<p data-pid=\"K6EjrDdT\"><b>「秘密主」</b>则是「金刚手菩萨」（梵语：वज्रपाणि，Vajrapāṇi）的别称。这位菩萨是佛教极乐世界「无量寿佛」眷属的八大菩萨之一，右手持金刚杵之相，象征「坚固不坏之菩提心」，是能以智慧光普遍照一切的大势至菩萨化身的忿怒相。传说他长期随侍在释迦牟尼身边担任护法，由佛陀处领受了许多秘密教法并传承给后世，故而被称作「秘密主」。</p>\n<p><img src=\"https://picd.zhimg.com/v2-5bd94bf8ad6a7952facd6cfe044dc3b0_720w.jpg?source=b1748391?rss\" data-caption=\"金刚手菩萨、观世音菩萨与文殊菩萨合称「三族旌尊」，分别代表力量、慈悲、智慧三种特质\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"original\" data-original-src=\"v2-5bd94bf8ad6a7952facd6cfe044dc3b0\" data-watermark-src=\"v2-661ece7ae57dc4cc2ecaec76e8b392f5\" data-private-watermark-src=\"v2-e3ff4e844a38f1cece439250ac072b26\"></p>\n<p data-pid=\"_Dx4csMc\"><b>PS：</b>「金刚杵」（梵语：गदा वज्र，Gadā Vajra），又译「降魔杵」，为佛教法器概念。原本是古印度神话中身为空界之主与护世者的众神之王因陀罗（梵语：इन्द्र，Indra）的武器，象征闪电，由于质地坚固能击破各种物质，故佛教常借来比喻和形象地命名。雷电影、雷电将军与散兵的相关设计中均有参考这个概念。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ee85c817d161d716daa0c2a249681228_720w.jpg?source=b1748391?rss\" data-caption=\"金刚杵是如来护法神密迹力士手中的武器，取其坚固来譬喻「大智慧」，此智慧可摧灭一切外道邪论\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"393\" data-watermark=\"original\" data-original-src=\"v2-ee85c817d161d716daa0c2a249681228\" data-watermark-src=\"v2-21ba63d7e9bb2ee339cca7a75ea9c3d2\" data-private-watermark-src=\"v2-c183ac27eed2a63442ee611272642464\"></p>\n<p data-pid=\"zJXnH8Hj\">至于<b>「正机之神」</b>（Shouki no Kami）这个叫法，主要出自日本主要佛教宗派之一「净土真宗」的教义「恶人正机说」（あくにんしょうき），由该派祖师日本镰仓时代初期僧侣亲鸾（しんらん）提出，主要思想是认为恶人也可往生极乐世界，宣称迫不得已作恶是可以被原谅的。</p>\n<p data-pid=\"zE9W78jz\">「恶人正机说」是亲鸾对其师、净土宗开祖法然（ほうねん）提出的「善人正机说」给出的反义。亲鸾曾说：「善人尚且往生，况恶人耶？」，认为佛既然慈悲，一定愿意拯救最底层的人，尤其那些造作业障的恶人，就更加是阿弥陀佛的首先救援对象，奉劝信徒只要坚信弥陀，恶人也会得到解救。该思想与基督教中的「因信称义」（拉丁语：Sola fide）具有一定相似性。</p>\n<p data-pid=\"FT5JzWr8\"><b>PS2：</b>亲鸾是日本佛教中首位结婚的僧人。实际上在明治维新前，净土真宗也是日本唯一认可僧人结婚与肉食的佛教教派。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bb5d398ad15ff07fa14e3d983a4fda57_720w.jpg?source=b1748391?rss\" data-caption=\"日本净土真宗祖师亲鸾像。亲鸾曾在比叡山修行天台宗，后改投身净土宗，在源空（法然）门下学念佛他力教义，主张恶人正机。因法然案受牵连被土御门天皇流放至越后国，期间与惠信尼成婚，五年后获赦。之后在关东地区传教，自立宗派建立净土真宗\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"570\" data-watermark=\"original\" data-original-src=\"v2-bb5d398ad15ff07fa14e3d983a4fda57\" data-watermark-src=\"v2-876e9961f16eb4347db54d89eae55fff\" data-private-watermark-src=\"v2-e146c0673315305be33640a2bbb60f30\"></p>\n<p data-pid=\"w94ZOPau\">另外，登神散兵在战斗二阶段释放的秒杀招式<b>「刹那生灭」</b>也是佛教概念。「刹那」代表着极短的时间，「刹那生灭」谓万法刹那生、刹那灭、转转相续，代表世间万事万物都在不停进行着变化，宇宙一切现象都是此生彼生、此灭彼灭的相待互存关系，其间没有恒常的存在。游戏中此招即意味着能够在瞬息间消灭一切事物、决定万物死生。</p>\n<p data-pid=\"Jb67XQAL\">再看到草神的称号<b>「摩诃善法大吉祥智慧主」</b>（Blessed One of Wisdom, Mahakusaladhamma）。这是须弥人对于草神的正式尊称，类似雷神在稻妻拥有的尊号「御建鸣神主尊大御所大人」，与「七叶寂照秘密主」一样带有强烈的佛教色彩。</p>\n<p><img src=\"https://picd.zhimg.com/v2-1ab4a1f977dac822f5e81319275bb20a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"189\" data-watermark=\"original\" data-original-src=\"v2-1ab4a1f977dac822f5e81319275bb20a\" data-watermark-src=\"v2-a0b8dfdfdc3f4fdc7089cd669093bee8\" data-private-watermark-src=\"v2-db30ee1f4b8d9fb1bfdeaa36c2d36bf8\"></p>\n<p data-pid=\"34p6RFep\">其中「摩诃」（梵语：मह，Mahā）的含义是「伟大」、「大智慧」；「善法」（梵语：कुशलधम्म，Kuśaladhamma）通俗地说就是修行善果的方法，佛教中常指「十善法」，分成身、口、意三类，即身体的行为、语言的行为、心理的行为，这与游戏中三种须弥天赋书「诤言」、「笃行」、「巧思」是相对应的；「吉祥」则为无有灾祸之意，指修炼善果带来的回报。</p>\n<p data-pid=\"ZERIy7N4\"><b>这里再附上散兵 BOSS 战二阶段 BGM 的唱词与个人翻译。</b>这次决战音乐无疑再度展现出极高的水准，有意思的是，除了采用与「女士」BOSS 战音乐一样的拉丁语唱词以及插入愚人众主旋律外，散兵的音乐中还创新加入了变奏自稻妻配乐的日式小调与日文唱词（配合类似散兵自己吟唱的声音），可以说非常契合人物的背景，也带来了与众不同的听感。</p>\n<p data-pid=\"qFtLEko7\"><b>注意：</b>以下歌词内容仅供参考，个人在翻译这块有一定附会成分，可能存在错误与不妥之处（毕竟我其实不懂拉丁文orz）。写这个主要还是希望各位能从中获取一些初步印象，还请大家以最终官方公开版本歌词为准。</p>\n<p><img src=\"https://pica.zhimg.com/v2-29cc2422892060953be9b82849e26e45_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-29cc2422892060953be9b82849e26e45\" data-watermark-src=\"v2-6fe7060142d54027fc601ce3927febb1\" data-private-watermark-src=\"v2-0f765dbdd0ccbbbcd55cd8241435f3d1\"></p>\n<blockquote data-pid=\"7YFOxKXT\">\n<i>Ombres levante coima  暗影汇聚</i><br><i>Clarem clement letum vostrum fervor  愿汝璀璨前路充满热忱</i><br><i>La vid sum sum iraesquid  我知晓我的愤怒不可遏制</i><br><i>In o uris!  将在此咆哮！（原意是「在我嘴里」）</i><br><br><i>*稻妻小调*（应为踏鞴砂 BGM《寂静的证言》变奏，散兵永远忘不了的伤心地）</i><br><br><i>こうやくつなれなぞながされ  我曾被轻视嘲笑</i><br><i>されんです！  而如今我已升华！（原意是「完成了」，大概是指登神）</i><br><i>Terror ist levituum et iubi naevus  汝之恐惧轻浮无知</i><br><i>Annai! Sada! Ledi!  我们的领袖！我们的神明！我们的女皇！</i><br><i>Et te lescitas omnia cum inpie et clatus!  我将陷入疯狂，获赐所求一切！</i><br><br><i>Lu quisd!  你算什么！</i><br><i>Sogno!  我梦寐以求之物！</i><br><i>Axa!  我的神明之心！（原意是「轴，枢纽」）</i><br><br><i>*愚人众主题曲调*</i><br><br><i>Ave! Vide!  无助的小鸟（嘲讽纳西妲）！瞧啊！</i><br><i>Om sum supedita!  哦还真是抱歉</i><br><i>Hystorie!  你就在此成为历史吧！</i><br><br><i>Novis natus!  我已重获新生！</i><br><i>Novis natus!  我已超凡脱俗！</i><br><i>Novis natus!  我已化身神明！</i><br><i>（这三句重复的原意是「新生」，加工了一下）</i><br><br><i>*稻妻小调*（重复）</i><br><br><i>こうやくつなれなぞながされ  我曾被轻视嘲笑</i><br><i>Mae... Simul... Platuum... Insomnio irae  我在愤怒中入梦</i><br><i>Equiestale saber que quies  放心，你将永眠</i><br><i>Descitas ombria cum invicte et clatus!  无人可挡的暗影将于杀戮中降临！</i><br><i>Nova eribus despine!  属于我的新时代已至！</i>\n</blockquote>\n<p data-pid=\"s9IgrT05\">散兵这个人物，可以说是集合了自负与自卑的矛盾个体，他以看似坚硬的「壳」保护着自己脆弱又敏感的「心」，否认甚至主动物化自己，轻言抛弃自我亦不足惜，明明渴望着「爱与认可」，却又在性格内因和外部错误引导的共同作用下，选择走上了一条最最差劲的道路去做错误的争取。</p>\n<p><img src=\"https://picd.zhimg.com/v2-2211b8c532094fa5d51c379469bf2a01_720w.jpg?source=b1748391?rss\" data-caption=\"散兵认为他迄今为止的人生都是无意义的「过程」，自己只是一张供人涂画的白纸，对于「心」入魔一般的追求，实际上让他将自己物化为了一件「心的容器」。他还没有意识到（或者说还在倔强地拒绝承认），那些汹涌的情感才是他真正活着的证明\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-2211b8c532094fa5d51c379469bf2a01\" data-watermark-src=\"v2-88648d06ac93d9ee4eecfb2aa28cb2f1\" data-private-watermark-src=\"v2-23ee95940bc6f15f8976012e881b1615\"></p>\n<p data-pid=\"Yj7ejrvN\">行将失去神之心时，乖张桀骜、不可一世的散兵表现出了极大的动摇和恐惧，「绝对，不能再回去……」的话语展现了他内心最深的恐惧：他不愿变回曾经无力而懦弱的自己，不愿再做被无情命运拍打的自己，不愿接受曾经作为残缺的「器物」的自己。他终归还是期盼着能够作为一个「被爱着的人」而活。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-13e3d333f27a371824dd09c23f67d1b7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-13e3d333f27a371824dd09c23f67d1b7\" data-watermark-src=\"v2-9fc480106b2966cac6298264e31dd415\" data-private-watermark-src=\"v2-cb44add47e1d95eb8566f4586ea8919c\"></p>\n<p data-pid=\"wdyaZLob\">被草神击败对于散兵而言未尝不是一件好事，扯断的傀儡悬丝一如剪断的脐带，代表着他将迎来自己的新生。充满佛性与菩萨慈悲的草神如今已如「羽毛般」将散兵收回护起，就让我们期待下个版本草神将如何度化他的业障与苦难，见证这位迷途之子找回心的真谛、重新踏向行往未来道路的故事吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-529faa28fe09511d14e8da2bbe13368f_720w.jpg?source=b1748391?rss\" data-caption=\"慈悲的草神会如何度化散兵，帮助他找到真正的心之所在呢？\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-529faa28fe09511d14e8da2bbe13368f\" data-watermark-src=\"v2-7c9639b8f3dbcea6cfb13f1976314f64\" data-private-watermark-src=\"v2-1224b632cd6f878763179c02b1c8af9b\"></p>\n<hr>\n<h2>二、世界遗忘我：被修正的提瓦特世界线</h2>\n<p data-pid=\"47CWgN3r\"><a href=\"https://www.zhihu.com/question/561310140/answer/2728790679\" class=\"internal\">早先写的文章</a>中我曾预测过大慈树王「世界遗忘我」的含义，结果也的确说中：大慈树王的意志本身成为了世界树中最后残留的一块污染源，为了彻底消除「禁忌知识」对世界的毒害，纳西妲只有含泪将树王的残魂消除。从此往后提瓦特的世界线中将不再有大慈树王的存在，世上与树王相关的痕迹与历史也都将籍由地脉的「修正力」完美抹去，深爱着世人、为了世界的存续而牺牲一切的神明最终却被遗忘，只有那远渡重天、跨越星海而来的旅者将她永远铭记。</p>\n<p><img src=\"https://picd.zhimg.com/v2-460eec8b93156ef863bc796654ecc53f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-460eec8b93156ef863bc796654ecc53f\" data-watermark-src=\"v2-85b1b09ecca94d613f562d1d2ae45871\" data-private-watermark-src=\"v2-56657ea2f3862accd40262a8eb5e4f1b\"></p>\n<p data-pid=\"mqkhdXxe\"><b>令人惊讶的是，「抹去大慈树王的存在」不仅仅只是过场动画中的一句交代剧情的台词，制作组真的对游戏文本做了极大范围的修改，实质上表现了「大慈树王从一开始就不存在」已成既定事实后的修正世界线。其影响范围包括：</b></p>\n<ul><li data-pid=\"kH-_Zr2Q\"><b>人类 NPC 对话：</b></li></ul>\n<p data-pid=\"oEh62sl7\">「大慈树王」相关字眼全部被替换为「草神」、「草神大人」、「小吉祥草王」等，部分逻辑不易衔接的台词甚至直接做了全句改写。</p>\n<ul><li data-pid=\"9z0f49MV\"><b>兰那罗 NPC 对话：</b></li></ul>\n<p data-pid=\"02EFEs1z\">「千树之王」变更为「草木的主神」、「草木的主宰」等，「千树之王回归沙恒」的表述也改成了「草神回归后，很多生命回归了沙恒」。</p>\n<ul><li data-pid=\"Q9v1LSFi\"><b>角色背景资料与语音：</b></li></ul>\n<p data-pid=\"SjzNMdZ6\">最令人感到难过的当然还是纳西妲自己背景资料的变化，她直接被「修正」为创造须弥文明且延续至今的「初代」草神，「大慈树王在坎瑞亚灾变中失踪」变更「小吉祥草王在灾变中失忆」；其余七神角色如钟离等，其评价草神的语音也都淡忘了老同事树王的存在，视纳西妲为「旧友」；派蒙也受到了影响，语音中不再有树王。现在令人好奇的是，掌握「来自世界之外力量」的戴因以及身为异化存在的深渊教团众是否也受到了地脉「修正力」的影响，记忆遭到篡改。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3b3c39ef8c0e207055d65086dc6c9e26_720w.jpg?source=b1748391?rss\" data-caption=\"除此之外，纳西妲其他角色故事的内容都或多或少发生了改变\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"919\" data-watermark=\"original\" data-original-src=\"v2-3b3c39ef8c0e207055d65086dc6c9e26\" data-watermark-src=\"v2-a12291b009824041965db83de7af33eb\" data-private-watermark-src=\"v2-147dc26e47e4ad17853bdffcfb4387dc\"></p>\n<ul><li data-pid=\"yzo5OyoH\"><b>物品描述信息：</b></li></ul>\n<p data-pid=\"kgULugSZ\">最典型的例子就是「树王圣体菇」。物品名称中的「树王」称谓虽然没有变更，但是进行了「重定义」，在须弥人原本的认知中，这种蕈菇是「树王遗德熏结而出的圣体」，而现在人们认为，古时曾有冠盖覆盖整个须弥的参天巨树，谓之「树王」；「教令院贤者们每年举办仪式，通过食用树王圣体菇的方式来纪念树王的牺牲」的记述，变为「因不为世人所知的用途，每年人们都要向教令院进贡这种蕈菇」（实际上教令院自己也不知道，只是遵循着不知来源的传统，这称得上是树王为历史留下的一份无法磨灭的刻痕了）；采菇人对于树王圣体菇的形容「树王留下的好东西」则变更为「老树上才能长出来的好东西」。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-511f931e2b58ced6199e9fa19cdd5214_720w.jpg?source=b1748391?rss\" data-caption=\"图片取自提瓦特图研所动态\" data-size=\"normal\" data-rawwidth=\"1104\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-511f931e2b58ced6199e9fa19cdd5214\" data-watermark-src=\"v2-86da998c8e3638a1c1fadf8cd032592e\" data-private-watermark-src=\"v2-333de601e8ce82108e29fa207ac2eb6b\"></p>\n<ul><li data-pid=\"ty5h8ACX\"><b>公告牌与书籍内容：</b></li></ul>\n<p data-pid=\"NqkIxAJ9\">例如描写大慈树王在漆黑灾厄中最后行迹的书籍《遐叶论经》就进行了大篇幅修改，将树王的事迹嫁接到了小草神身上。</p>\n<ul><li data-pid=\"yAb9hEyH\"><b>剧情相关内容：</b></li></ul>\n<p data-pid=\"IR1wFXZL\">大型支线「森林书」产生出台词细节存在一系列差异甚至结局都不同的两个版本，原始版本中击败无留陀的化身后兰罗摩会告诉旅行者「无留陀陷入了沉睡，遥远的将来一定会有新的金色那菈再一次帮助森林击败复苏的无留陀」，而完成主线最终幕后，由于作为「无留陀」的根源「禁忌知识」已经消除，兰罗摩会说「无留陀被彻底消灭了」。</p>\n<p data-pid=\"6Vo7RW22\"><b>PS3：</b>这里主线最后其实打了个剧情补丁，借提纳里之口特意强调了「禁忌知识被消灭后死域仍然存在只是不会再增加」。否则如果「禁忌知识」消失「死域」也随之消失，整个「森林书」任务的初始动机也就丧失了。</p>\n<p data-pid=\"RT0Ayi__\"><b>PS4：</b>由于涉及文本量相当庞大，目前游戏中实际仍存在少量未经修改的与树王相关的文本内容，但相信这些遗漏之处很快都会在后续更新中完成「修正」。届时，大慈树王就真的彻底在提瓦特世界中不复存在了……</p>\n<p><img src=\"https://picd.zhimg.com/v2-361fc6b08141c2d71aaf3e9fc682c2c3_720w.jpg?source=b1748391?rss\" data-caption=\"至少兰耶师（暂时）还记得……\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-361fc6b08141c2d71aaf3e9fc682c2c3\" data-watermark-src=\"v2-d2973226ac9115f66a54fdaa6159ec99\" data-private-watermark-src=\"v2-f8cef9f6119df998aa6e2f0e136500ba\"></p>\n<p data-pid=\"r65f0h0P\">大慈树王的牺牲令人无比动容，也许会有朋友不禁感慨：「森林，终究还是没能记住一切啊」，但是，纵使有形的记忆化作了虚无，树王的精神对于她曾眷顾的这片土地的影响却万世长存、永不消弭，总会有人们继承她的美德与智慧，去开辟美好的未来，探寻崭新的命运。犹如蒙受甘霖润泽最终绽放美丽花朵的草木，虽然雨水早已汇入大地不见踪影，但那沁人心脾的阵阵芬芳，却也饱含着那曾经来自雨的温柔与关怀。</p>\n<p><img src=\"https://picd.zhimg.com/v2-0ca7ea15272a330b234a221cdee14e08_720w.jpg?source=b1748391?rss\" data-caption=\"「须弥的子民啊！再见了。愿你们今晚得享美梦」\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-0ca7ea15272a330b234a221cdee14e08\" data-watermark-src=\"v2-2c20ffa57a54d0de94e09076de7426cf\" data-private-watermark-src=\"v2-0cd9590cbefadeda05ee9107059e2629\"></p>\n<p data-pid=\"TYMRL6L6\">见证过树王经历的我们也终于理解，「盐花」任务的最后钟离对旅行者所说的「你是提瓦特历史的记录者」这一段意味深长话语的含义了。</p>\n<p><img src=\"https://picd.zhimg.com/v2-95f30258fc989e9f51cd249b5774329a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1268\" data-watermark=\"original\" data-original-src=\"v2-95f30258fc989e9f51cd249b5774329a\" data-watermark-src=\"v2-e8ede08fec9bf42cbb67394e62cbab56\" data-private-watermark-src=\"v2-00509b80209478efb6b3bf291dbfdcbf\"></p>\n<p data-pid=\"rpYg6p-n\">地脉修正「世界的记忆」的力量是如此强大、超乎想象，在过往，我们甚至还曾目睹过那足以跨越时间长河、将种子带往过去与未来的「时之千风」的不可思议之伟力，这一切让世界的存在都变得虚幻飘渺了起来，提瓦特真的就是一场无比漫长的「花神诞祭」也未可知？无论如何，有关世界的真相与被纺织的命运，一切问题的答案仍在旅途的尽头等待着我们。</p>\n<hr>\n<h2>三、初生白枝、世界树与坎瑞亚末代王</h2>\n<p data-pid=\"6FzYTYY7\">伴随须弥主线正式结束，我们也依照惯例获得了一件金色纪念任务道具 —— 一段自世界树上折下的饱含生命力的白枝。通过阅读其描述信息，我们可以发现一些值得关注的细节。</p>\n<p><img src=\"https://picd.zhimg.com/v2-fa5933ee11fca39612dc0ea1d07dcbc8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"899\" data-watermark=\"original\" data-original-src=\"v2-fa5933ee11fca39612dc0ea1d07dcbc8\" data-watermark-src=\"v2-929e0707e3f1e24ba8d3132c87ce0fb3\" data-private-watermark-src=\"v2-627a475d8c7d159e5b133a61d557484e\"></p>\n<p data-pid=\"ptHSXJxG\">「树是生的象征」的部分显然是在喻指大慈树王的故事，但「树是智慧的象征」后的记述初看却有些叫人摸不着头脑。不过，相信熟悉北欧神话的朋友在看到<b>「树上倒吊的贤人获得了书写符文操使言灵的知性」</b>后，一定马上就联想到了北欧主神奥丁发现卢恩字母的传说：</p>\n<p data-pid=\"FWuafNnh\">北欧神话中，身为魔法之神、战争与死亡之神的「众神之王」奥丁（Odin）亦是掌管知识的智慧之神，他对于追求知识有强烈的欲望。相传，奥丁曾将自己倒吊于世界之树「尤克特拉希尔」（Yggdrasill）之上度过九天九夜，期间还以长矛刺伤自己，如此苦修最终让他领悟了神奇的魔法符文「卢恩文字」（Runes）的智慧和奥秘。北欧史诗《贤者之歌》（Hávamál）中有如下的诗文记载了这段传说。</p>\n<blockquote data-pid=\"5ElLHqN1\">\n<i>我曾九夜吊于狂风飘摇之树，</i><br><i>I ween that I hung on the windy tree, hung there for nine nights full nine;</i><br><i>身受长矛刺伤，被当作奥丁的祭品，自己献祭给自己，</i><br><i>With the spear I was wounded, and offered I was,To Othin, myself to myself,</i><br><i>在那无人知晓的大树上！</i><br><i>On the tree that none may know!</i><br><i>没有面包充饥，亦无滴水解渴。</i><br><i>No bread did they give me nor a drink from a horn,downwards I peered;</i><br><i>我往下看，拾取由树上掉落的卢恩符文，边拾边喊。</i><br><i>I took up the runes, shrieking I took them, and forthwith back I fell.</i>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-eddf8e1ce36dbcd12f93148efa44058a_720w.jpg?source=b1748391?rss\" data-caption=\"奥丁将自己吊在世界树上，以长矛刺伤自己，凭借这份自我献祭换来了强大的魔法符文「卢恩文字」\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"1068\" data-watermark=\"original\" data-original-src=\"v2-eddf8e1ce36dbcd12f93148efa44058a\" data-watermark-src=\"v2-5a9e7ea28ec2e69385d9794da576a105\" data-private-watermark-src=\"v2-cf283d11d99abb98a9b6aab71ab65b34\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"O75KrqCz\">奥丁找寻到的「卢恩文字」被认为是拥有不可思议力量的咒文，传说只要将其刻在木、石、金属乃至任何材料之上，使用者就能从这些器物中获得无穷的威力，掌握「过去」、「现在」与「未来」的「诺伦三女神」（Norns）更是会将这种文字刻于黄金宝盾来记载世间的命运。</p>\n<p data-pid=\"heldL7rO\">现实中，卢恩文字是诸多北欧民族（最著名代表便是「维京人」）曾使用过的字母。其在历史发展中一面逐渐成为「死文字」，丧失了日常交流沟通的功能，一面却在神秘学用途方向发展，古代欧洲的隐修士们曾将其视为与神明沟通之工具，还将其用于行使巫术。卢恩文字作为占卜、祭祀用符文的功能被一直保留至今，现在我们也常常会在各种涉及了北欧神话背景设定的奇幻文艺作品或游戏中见到它们。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-534fb914538fd094d6f9f247ef0669b8_720w.jpg?source=b1748391?rss\" data-caption=\"神秘的卢恩文字\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"926\" data-watermark=\"original\" data-original-src=\"v2-534fb914538fd094d6f9f247ef0669b8\" data-watermark-src=\"v2-83a4f387a68c8d09a45708292c406d30\" data-private-watermark-src=\"v2-57195df9f3dcc01a34486444ff8a10bc\"></p>\n<p data-pid=\"L55CNMjh\">因此，白枝记述中所谓「树上倒吊的贤人」的原型即是指北欧主神奥丁，而「获得了书写符文操使言灵的知性」则对应发现卢恩文字的传说。那么问题来了，《原神》中存在以奥丁为原型的角色吗？答案是有的，他便是坎瑞亚的末代王者 —— <b>独眼的「伊尔明」</b>（Irmin），而所谓「沿着树根建造的王国」自然就是指深处地下的无神国度坎瑞亚了。</p>\n<p data-pid=\"XIaySUCU\">这里需要特别指出的是，《原神》中的「世界树」英文名就写作<b>「伊尔明苏尔」</b>（Irminsul），亦称「伊尔明之柱」。其出自作为原始日耳曼部族中一支的古撒克逊人的神话信仰，与同属日耳曼神话的北欧神话中大家耳熟能详的世界树「尤克特拉希尔」（Yggdrasil）地位相同。伊尔明曾作为撒克逊人的战神被崇拜，后来才被奥丁（Odin）取代，逐渐成为了日耳曼文化圈中的主流信仰。这是伊尔明原型为奥丁的另一证据（事实上，目前只要是与坎瑞亚相关的人或物，其涉及到的文化渊源与原型基本都出于日耳曼历史文化体系）。</p>\n<p><img src=\"https://picd.zhimg.com/v2-02511af3e7b6b2c740d2204e7bed4277_720w.jpg?source=b1748391?rss\" data-caption=\"「伊尔明苏尔」在古撒克逊语中含义是「伟大之柱」，代表此树（柱）所在的地方就是宇宙的中心。在查理大帝征讨反叛的萨克森人的战争中（公元 772 年至 804 年），萨克森人的信仰圣地 —— 树神「伊尔明苏尔」被大帝下令摧毁了\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"577\" data-watermark=\"original\" data-original-src=\"v2-02511af3e7b6b2c740d2204e7bed4277\" data-watermark-src=\"v2-798825f487652b7401ab2f572e96419a\" data-private-watermark-src=\"v2-73cdbf8e67a00bbaca703c482499eecc\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-925d3073bb2cdaa4157dbc931f1aa26c_720w.jpg?source=b1748391?rss\" data-caption=\"提瓦特世界的根基 —— 记录着世间一切情报的世界树「伊尔明苏尔」\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-925d3073bb2cdaa4157dbc931f1aa26c\" data-watermark-src=\"v2-2c89292dbcfae784ada501f6631d632a\" data-private-watermark-src=\"v2-a219f40d2f6ccfd37cdec67935130da0\"></p>\n<p data-pid=\"YpV7XlaS\">接下来就不得不再着重提一提伊尔明与奥丁间重要的共同特征，即「独眼」了。根据北欧神话记载，奥丁并非一开始就拥有超人的智慧，为了获得知识，他曾来到座落于巨人国度「约顿海姆」（Jothuheim）、位于世界树第二根树根边的「智慧之泉」（亦称「密米尔之泉」，Well of Mimir），相传只要喝下一口这里的泉水，便能获得世间至高的智慧。</p>\n<p data-pid=\"WbswMIbB\">奥丁以献出自己的右眼为代价向看守此泉水的巨人「密米尔」换取了喝一口泉水的权力。在饮下甘泉后，奥丁如愿以偿获得了难以想象的庞大知识，但是笑容却在他的脸上凝固了。因为在以至高智慧理解了整个宇宙的本质后，奥丁便预知了未来世界所命定的不详末日 —— 「诸神之黄昏」（Ragnarök）的到来。</p>\n<p><img src=\"https://picd.zhimg.com/v2-39754ef0724dc50d59c72cbae98e62a7_720w.jpg?source=b1748391?rss\" data-caption=\"奥丁以牺牲一只眼睛的代价换来了至高的智慧，但这份智慧也让他提前预知了神明世界的毁灭\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"797\" data-watermark=\"original\" data-original-src=\"v2-39754ef0724dc50d59c72cbae98e62a7\" data-watermark-src=\"v2-0d0c9b8366f7c1e5d0161766a995bbf9\" data-private-watermark-src=\"v2-8d683ca7a8428f28948574ccf36039e7\"></p>\n<p data-pid=\"LtBu3IcL\">在《原神》的故事中，身为坎瑞亚王者的伊尔明也做出了与奥丁相同的献祭，那么他又得到了什么回报呢？白枝的描述告诉我们 ——<b>「王国最终窥见了魔天的秘密」</b>（英文版为「gaining a glimpse of the secret of the cosmos」，即「窥探了宇宙的奥秘」）。</p>\n<p data-pid=\"T6UD-mq4\">目前游戏故事已经将提瓦特世界拥有<b>「虚假的星空」</b>这一核心秘密摆上了台面，「魔天」便是对这一概念的另一种表述，要解释它就需要先简单介绍一下《原神》背景世界观与剧情架构的重要参考 ——<b>「诺斯替主义」</b>（Gnosticism，也译为「灵知派」）的宇宙观。</p>\n<blockquote data-pid=\"E5zK0c_K\">我们世界其实是一个监狱。创造了七重天并居于其上的造物主（Demiurge，音译「德缪哥」，常作「巨匠造物主」，代表物质世界的控制者）是一个堕落的蠢货以及冒牌货，只不过是神的低级碎片 —— 真神隐藏于不可知的帷幕后，无法以尘世的方式去认知。人们回归本源即通往灵性纯洁世界的道路被无情的看守把持着，也就是掌权者（Archons；即「尘世七执政」所对应的英文），星体化为的神灵（邪灵）；不是每个人都能获得拯救，只有少数「属灵的人」才能通过灵知（Gnosis；即「神之心」对应的英文）得到启示，挣脱物质的枷锁，获得灵魂的升华。</blockquote>\n<p><img src=\"https://picd.zhimg.com/v2-49bd114b1b29b6d416addac044fcce43_720w.jpg?source=b1748391?rss\" data-caption=\"诺斯替主义的宇宙观：虚假的物质世界被包裹在「蛋壳」中，人类所见的只是「虚假的星天」，方有打破不可知的帷幕，才能获得「真知」\" data-size=\"normal\" data-rawwidth=\"3465\" data-rawheight=\"2700\" data-watermark=\"original\" data-original-src=\"v2-49bd114b1b29b6d416addac044fcce43\" data-watermark-src=\"v2-bef6891922490e8585643979ba19a8fe\" data-private-watermark-src=\"v2-e43644d8a2a7d81138ae0d06fa448170\"></p>\n<p data-pid=\"xTrlwoCG\">结合《日月前事》中有关第一王座「法涅斯」降临提瓦特创世的神话，我们便知晓了坎瑞亚所窥见的有关「魔天」的秘密：提瓦特是一个被创世神封闭的可悲世界，人类若要迈向无垠的宇宙，迎来真实的真知与种族的升华，就必需打破隔绝宇宙和世界的缩影的「蛋壳」，即那「虚假的星空」（坎瑞亚曾向白夜国派遣使团，意图窃取禁书《日月前事》来验证他们有关世界真相的情报）。</p>\n<p data-pid=\"Z-oJ5Tso\"><b>PS5：</b>提瓦特创世神话由于内容实在太多这里就不再贴出了，需要了解的朋友可以点击下方文章链接，阅读【注11】「提瓦特史前神话：七龙王、法涅斯创世与两个王座」部分的内容。</p>\n<a href=\"https://www.zhihu.com/question/509683549/answer/2317670654\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://picd.zhimg.com/v2-b16487f77f357ea7c29241359c3bdb77_qhd.jpg?source=b1748391\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">如何看待《原神》2.4 开放的新地图「渊下宫」的剧情？</a><p data-pid=\"xnDWEkQH\">然而，献祭为坎瑞亚换来的不仅有对世界本质的认知，还有一股危险外来力量 —— 「深渊」的窥伺。我们并不知道王者伊尔明是否也像奥丁一样在获得智慧的同时也预知了未来自己国度的覆灭，但我们知道，坎瑞亚最终确实因为接纳深渊而走向灭亡。这很难不让人相信，伊尔明王就是在预知坎瑞亚将在众神手中毁灭的沉重压力下，才选择听信了深渊带着剧毒的蜜言，一步步扩大国家对于深渊能源的运用，直至积重难返、自取灭亡。</p>\n<p data-pid=\"m2AI0cvJ\">实际上，在国家消亡前，疯狂的王自己便已遭诅咒吞噬。根据「残像暗战」中隐藏信件提供的信息，接近坎瑞亚战争末期时伊尔明就已处于「失能」状态（推测应该是自知败局已定而对自身进行了完全的「深渊化」改造，刻像系列材料描摹的就是伊尔明王的形象，到「幽邃刻像」王的独目已变为猩红，且长出了不属于人类的、形同恶魔的双角），坎瑞亚社会处在极度恐慌和混乱当中，大批贵族只顾四散逃窜，是由非王族的亚尔伯里奇一族（也就是凯亚的家族）挺身而出暂时摄政，才勉强稳定了坎瑞亚的局势。但是，这无力改变已注定的毁灭结局。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-daa784cfe4f1444ffcf1ea1b81c2e945_720w.jpg?source=b1748391?rss\" data-caption=\"刻像系列材料似乎反映了发生在坎瑞亚末代帝王伊尔明身上的可怖变化……\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"412\" data-watermark=\"original\" data-original-src=\"v2-daa784cfe4f1444ffcf1ea1b81c2e945\" data-watermark-src=\"v2-0086e6c16c75ac07109d429a8e9ba4bd\" data-private-watermark-src=\"v2-2b417b689d451e6e005682b984868952\"></p>\n<p data-pid=\"FGXFSnUk\">曾经代表属于人类的无上荣光与骄傲、发展出卓越科学技术与辉煌文明成果的无神之国坎瑞亚，以我们目前还无从窥得全貌的方式画上了自己悲哀遗憾的句号，而灾难的受害范围早已超出了他们本身 —— 自深渊涌入的漆黑「禁忌知识」污染了世界的根基世界树，成为了威胁世界存续的「病灶」。</p>\n<p data-pid=\"sZe0N5WK\">这已不是提瓦特第一次被「禁忌知识」污染。千余年前，大陆中部黄金沙海中某位神王为了实现他深沉的悲愿与海市蜃楼般的幻梦，也同伊尔明一样被深渊蛊惑，将猛毒注入世界酿成恶果。后来，醒悟过来的神王扛下了自己的罪孽，以自我牺牲配合挚友智慧之神大慈树王的协助，成功驱逐了「禁忌知识」，但神王治下一度辉煌的高科技文明也因此走向没落。</p>\n<p><img src=\"https://picd.zhimg.com/v2-2fd84dc4e0e8ef71bf67ffa82845a0ad_720w.jpg?source=b1748391?rss\" data-caption=\"千年前沙漠中高度发达的文明因触碰「禁忌知识」招致灾祸，最后靠一位神明自我牺牲、一位神明透支力量，才勉强避免了彻底毁灭的结局\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-2fd84dc4e0e8ef71bf67ffa82845a0ad\" data-watermark-src=\"v2-d6669754e7c7bbf81e01a6208c0e41b5\" data-private-watermark-src=\"v2-8e19fde51bb4d8b72fbe5f6541a48170\"></p>\n<p data-pid=\"Ii_5Wyma\">到坎瑞亚重蹈覆辙之时，智慧之神再度挺身而出，以生命为代价践行了她守护世界树的使命，为世界争取了时间。500 年后的今日，治愈世界的不朽伟业在机缘巧合中终于得成，而为守护世界献上一切的神从此却被世人彻底地遗忘。</p>\n<p data-pid=\"QiS6JUg8\">作为《原神》故事的终极核心，有关「天理」与「深渊」这两股势力依然还存在着众多扑朔迷离的谜团，提瓦特世界的真相是否就如目前我们所认知的这样同样也不能轻易下断言，坎瑞亚毁灭的前因后果亦存在大量模糊与需要补充之处。这一切，就期待未来游戏慢慢给出解答吧。</p>\n<hr>\n<h2>四、来自此世之外：四位「降临者」与反主的异常身世</h2>\n<p data-pid=\"6VHiZYsE\">主线尾声部分由该国神明为旅行者给出有关未来剧情发展方向的线索可谓一项保留项目，原本以为这次由须弥智慧之神提供的「爆料内容」应当会相当「谜语人」，结果倒是意外的直白清晰。不过这次新情报的重磅程度属实不小：</p>\n<p data-pid=\"twuGnksy\">情报其一是以草神之心为交换代价所取得的由愚人众方面掌握的有关<b>「降临者」</b>的全新概念，代表「不属于这个世界的外来存在」，主角旅行者即被称作<b>「第四降临者」</b>；</p>\n<p><img src=\"https://picd.zhimg.com/v2-a3625fbd84eb4d3418b9c10162237372_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a3625fbd84eb4d3418b9c10162237372\" data-watermark-src=\"v2-b494ac0beaaefe18f5bc3774fde65074\" data-private-watermark-src=\"v2-747ce61e476e07df8e1af99ad54bdd10\"></p>\n<p data-pid=\"UCrjORMW\">情报其二则具有极大冲击性，我们通过纳西妲之口了解到世界树中竟出乎意料地记录了反主的情报，这意味着：<b>旅行者的血亲是提瓦特本土人。</b>愚人众未将反主列入「降临者」范畴也佐证了这一点。这便与我们自游戏开幕以来便未曾怀疑过的<b>「双子远渡重天自星海间而来，提瓦特只是他们旅行中一站」</b>的背景设定产生了重大冲突。</p>\n<p><img src=\"https://picd.zhimg.com/v2-3f62f23a9343ca21d4c290bf8ef67c44_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-3f62f23a9343ca21d4c290bf8ef67c44\" data-watermark-src=\"v2-6d03c5bb08ece5458ef0a36f6bc09a8c\" data-private-watermark-src=\"v2-6aed583c35912299f5856f0c6b65bec2\"></p>\n<p data-pid=\"K2DyWobK\">主线中选择自我牺牲的大慈树王经地脉修正自提瓦特历史中被彻底抹去的情节本就已颇具冲击性，情报二的揭露更是让我们对于双子间的关系乃至基础背景产生了怀疑，说让「原学」大厦产生了震动都不为过。尽管目前由于相关线索资料十分匮乏，我们还不能针对这两条新情报给出任何明确定论，但是基于已知情报围绕它们开展一些讨论和猜想还是可以的。</p>\n<p data-pid=\"fxvIK8zU\">首先有关所谓的「降临者」概念，我们并不清楚愚人众对于这方面的知识究竟深入了解到了何种程度，是否与阅读过《日月前事》的我们一样（注意是「我们」而不是旅行者。因为设定上旅行者并不理解白夜国的失落古文字，真正读懂《日月前事》内容的实际上是屏幕前的玩家），对于提瓦特世界的创世经过已经有了明确认识。</p>\n<p><img src=\"https://pica.zhimg.com/v2-85654a3f95edc37093edf6e97f3e813e_720w.jpg?source=b1748391?rss\" data-caption=\"当年奥罗巴斯仅仅因不慎观看了这本禁书就被天理判了死刑，如今若是天理苏醒，谋划反抗天理事业的至冬又将迎来怎样恐怖的惩罚呢？\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"366\" data-watermark=\"original\" data-original-src=\"v2-85654a3f95edc37093edf6e97f3e813e\" data-watermark-src=\"v2-99acc4f96e4a649fdaf9d3dd52c1da3f\" data-private-watermark-src=\"v2-d76fc5b355b4fc8cc495a95421198cff\"></p>\n<p data-pid=\"v-Ks9Edi\">如果确定为这种情况，那么四位「降临者」中的前两位显然就是指那两个王座了：即击败了原始提瓦特的统治者七龙王、重塑整片天地并创造人类的「原初之人」法涅斯，以及后来于「葬火之年」降临，为争夺天地大权与法涅斯展开毁天灭地神战的神秘「第二王座」。</p>\n<p data-pid=\"lQCvGNbo\">而纳西妲给出的「如今的天理应当就是第一降临者」的说法某种意义上说明了当年王座之争的最后结局 —— 获胜者是「第一王座」法涅斯。但这也仅仅只是她个人的猜想，并不能证明愚人众也是这种认识。实际上，如果至冬方面的判断是如今的天理其实是「第二降临者」，即取胜并篡位的「第二王座」，似乎就可以为他们高举反抗当今天理大旗的行为赋予重大正当性：他们是在（自认为）理解世界现状的真相后，为了驱逐不义的「伪神」、迎回世界（乐园）真正的主人付出努力。</p>\n<p><img src=\"https://picd.zhimg.com/v2-a5bf3f6f4821fce2ca0dfd5681d04930_720w.jpg?source=b1748391?rss\" data-caption=\"为什么纳西妲说这句话时镜头要给派蒙特写呢？\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a5bf3f6f4821fce2ca0dfd5681d04930\" data-watermark-src=\"v2-bf1e652835d781434278067cbcd5e1cb\" data-private-watermark-src=\"v2-d55ecc0f840da1d8b946725c23cca8b4\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-08a9528291ffd50c738e8a654b8832e8_720w.jpg?source=b1748391?rss\" data-caption=\"两个王座究竟谁取得了战争最后的胜胜了至今仍是个谜，哪怕是《日月前事》的作者也只是在猜测结果\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"196\" data-watermark=\"original\" data-original-src=\"v2-08a9528291ffd50c738e8a654b8832e8\" data-watermark-src=\"v2-4b114bba493133899fbca2f77ccc6292\" data-private-watermark-src=\"v2-d2390125e1d2569d030a4fa3b509f973\"></p>\n<p data-pid=\"QQPZ98L0\">不过考虑到「葬火之年」发生后，天理一直将自创世起开始的远古历史视为重大禁忌加以全力抹消，愚人众未必就会了解的这么深入，他们可能并不知晓创世最初的信息。这样一来，「第一降临者」之位就变为「第一王座」或「第二王座」享有了（取决于当年谁取得了胜利），而第二、第三「降临者」全是未知。具体是哪一种情况，就得等待今后剧情披露更多信息了。</p>\n<p><img src=\"https://picd.zhimg.com/v2-f19b44374b63f2b7b89bef3c5d904e94_720w.jpg?source=b1748391?rss\" data-caption=\"不过考虑到愚人众组织就是由皮耶罗这个坎瑞亚大佬一手筹建的，他们掌握的情报深度也许远远超过我们的想象，冰之女皇甘意赌上一切反抗天理，肯定也有什么决定性的、至关重要的理由……\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f19b44374b63f2b7b89bef3c5d904e94\" data-watermark-src=\"v2-91c412c4f2241c9e4e6bc475c881f955\" data-private-watermark-src=\"v2-2dbebdf7efc5c033e98073e1e0ed120c\"></p>\n<p data-pid=\"SW5PL6VW\">至于未知的那两位（或一位）「降临者」究竟是什么人，现在还很不好说，目前大家提到比较多的一个人选是可莉的母亲艾莉丝女士。的确，她拥有极不可思议的力量，做着维护「世界边界」的管理员式工作，还表露出种种身为「穿越者」的迹象，但是个人以为目前制作组可能更多地是将艾莉丝女士作为一个彩蛋型角色进行塑造，并不是很有可能将其作为核心剧情人物安排到「降临者」行列中。细究来看，艾莉丝也大概率就是提瓦特本土人，她只是因为某些原因获取了「观测其他世界」的能力，这样的她显然并不符合「降临者」的定义。</p>\n<p data-pid=\"6_m4Y-m-\">除去艾莉丝，从目前其余已知角色中盘点「降临者」的人选确实不太容易，旅行者人物评价中神秘的发言者「K · K」、坎瑞亚王（或缔造者）、「少女」（也有猜想认为她与花神一样是仙灵一族的末裔）、甚至是达达利亚的师傅「深渊行者」丝柯克都存有可能，这块就不胡乱猜测了，毕竟编剧是自由的，不知道未来揭晓其余「降临者」的身份时会不会大大出乎我们的意料呢？</p>\n<p data-pid=\"E9lcE7Ra\">然后再看到反主身世的问题。这块个人比较坚定地认为反主与主角旅行者就是真正的血亲，两人也的确都是自天外而来的「降临者」。根据纳西妲对反主「突然出现在坎瑞亚」、「旅途即将结束时世界树中的记录忽然间模糊」、「有人为了某种理由刻意掩盖其命运」的表述来看，反主很有可能是籍由深渊教团提供的某种秘术屏蔽掉了自身作为「降临者」的身份，又将命运与提瓦特「锚定」，成为了一名伪造的提瓦特人。</p>\n<p><img src=\"https://picd.zhimg.com/v2-d178593d075ea948639708462b21dfb2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1182\" data-watermark=\"original\" data-original-src=\"v2-d178593d075ea948639708462b21dfb2\" data-watermark-src=\"v2-fa756e5f6750b0eab95e2c9c1f23dfe9\" data-private-watermark-src=\"v2-0aea13ca74265ca4712cf17f2b68d87f\"></p>\n<p data-pid=\"z7hfTx_s\">考虑到我们已经在须弥剧情中见识过世界树为了抹去大慈树王的存在而大规模篡改历史、修正世界线的究极「岁月史书」操作，早先在稻妻甚至还目睹了「超时空种树」这种极度违背常识的事件，为反主在世界树中「伪造籍贯」这种操作看起来反倒是如此「稀松平常」了。</p>\n<p data-pid=\"mJYF8RPN\">至于反主为何要这么做，或者应该说为什么有人对反主做了这样的事，《珍珠之歌》中那句<b>「她被欺骗，忘记了自己的高贵，以为自己是黑暗之国的王」</b>我想已经给出了充分的暗示：深渊需要一位代言人去践行它的意志、夺取世界的权柄，而那位被选中者，就是彼时目睹了坎瑞亚的覆灭、想要带着血亲逃离提瓦特却又被天理维系者击落，早一步苏醒在大陆上活动寻求对策的反主。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7614eeb97f60a2ff00721637dc3b7d09_720w.jpg?source=b1748391?rss\" data-caption=\"「但她却被欺骗，忘记了自己的高贵，以为自己是黑暗之国的王」\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-7614eeb97f60a2ff00721637dc3b7d09\" data-watermark-src=\"v2-99cd516b59a9ac2d9f63b7a356620c69\" data-private-watermark-src=\"v2-058ad34754e1452b0aa6334c8feedce3\"></p>\n<p data-pid=\"kSSB9fHJ\">反主也许是得到了深渊的什么承诺，也许单纯就是受到深渊的诓骗而将天理视为一切悲剧的根源、必须打倒的敌人，总之反主接纳了递来的冠冕成为「黑暗之国的王」。深渊将反主虚假的命运「锚定」在这个世界的目的也正是为了控制反主 —— 不被允许逃离这个世界，而要怀着崇高（虚假）的信念将那正义（深罪）实现（也许这就是《足迹》PV 中戴因请求旅行者拯救反主的用意）。</p>\n<p data-pid=\"LwwMBCsG\">最初天理维系者莫名其妙拦下双子的行为目前看来恐怕都是别有深意的：<b>那也许不是一种「恫吓」，而是一种粗暴的「挽留」。</b>目前我们明确知道天理在坎瑞亚灾变发生后已沉寂 500 年，天理很有可能因为某种原因已经衰颓到濒死的境地，他急于寻找到自己的继任者，有朝一日接替天理之位来维系提瓦特的存在，而突然降临的双子就是最好人选。这恰好对应了旅行者角色介绍中的那句：<b>「维系者正在死去，创造者尚未到来。但世界不会再度灼烧，因为旅行者将登上神之座」</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-9b71eb0ddfc0cd64f347a642f1d3665e_720w.jpg?source=b1748391?rss\" data-caption=\"当然上述说法也只是一种推测，毕竟可能性太多了：也许双子会被称为「僭越的人之子」，代表了他们其实是坎瑞亚利用创生之法制造、被灌输了有关星空记忆的用于突破「魔天」的使者？\" data-size=\"normal\" data-rawwidth=\"1835\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9b71eb0ddfc0cd64f347a642f1d3665e\" data-watermark-src=\"v2-1b65d250d9ed26e5026fe2ec62ce31e3\" data-private-watermark-src=\"v2-4b7175e9970f7341eee884398c24e21d\"></p>\n<p data-pid=\"fuK5DyQ0\">虽然反主被深渊势力抢先拉拢，但所幸双子中还有一位未被夺走，那便是我们的主角旅行者。当旅行者苏醒后，早已等待多时的「引导者/监督者」便以一次「意外」的形式成为了旅行者最好的伙伴，她将陪伴旅行者走完穿越大陆的旅途，最终见证旅行者登上神座，拯救这个濒死的世界。我想大家应该都知道我这里所说的这位「引导者/监督者」是谁 —— 没错，就是派蒙。</p>\n<p><img src=\"https://picd.zhimg.com/v2-214c733c2ce842d2e3426bdbe8c67a6f_720w.jpg?source=b1748391?rss\" data-caption=\"派蒙这个小家伙的背景显然极不简单，她造型设计中包含元素强烈暗示着她身份的特殊以及与天空岛/天理那非比寻常的联系\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-214c733c2ce842d2e3426bdbe8c67a6f\" data-watermark-src=\"v2-769f539305d5a1acc9d283f5e0b1a9c4\" data-private-watermark-src=\"v2-b4a8e2207197a6296afca4a422b3c7e9\"></p>\n<p data-pid=\"SFTmBL2L\"><b>PS6：</b>这里说个由外国原学大佬 Ashikai 提出的很有意思的观点。大家可能注意到某些官方邮件的署名是派蒙，但其写法很奇怪，写为了「P · A · I · M · O · N」这种类似缩写词一样的形式。因此 Ashikai 结合「半永恒统辖矩阵」（Algorithm of Semi-Intransient Matrix of Overseer Network）的命名方式提出，「PAIMON」有可能是「Primodial Algorithm of Intransient Matrix of Overseer Network」的缩写，即「原初永恒统辖矩阵」。所以派蒙会是天理留在旅行者身边的一台监视用智能无人机吗？</p>\n<p data-pid=\"JCcN5Xn5\">总之，双子间的离别与冲突代表着的也许是幕后天理与深渊间的博弈，双子命运的流向也许决定了这个世界未来的结局。无论如何，旅途仍在继续，当踏入天地之人的脚步抵达终点，跨越最后门扉的时刻到来，我们将会见证怎样的真相？那对自星海降临的双子，又将迎来怎样的命运呢？</p>\n<p><img src=\"https://pica.zhimg.com/v2-3a5636f9e0a9df36013e234faa88f549_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-3a5636f9e0a9df36013e234faa88f549\" data-watermark-src=\"v2-462dbcb915cad965346339a593610767\" data-private-watermark-src=\"v2-563f75346617662c3b2c3cc94b8bef4b\"></p>\n<hr>\n<h2>五、有关枫丹水神「芙卡洛斯」的简单前瞻</h2>\n<p data-pid=\"Yvi0gf_C\">最后来简单聊一聊我们旅行的下一站「正义的国度」枫丹以及一些与水神相关的猜想。在须弥主线尾声，通过纳西妲之口我们了解到了枫丹水神之名 ——<b>「芙卡洛斯」</b>（Focalors），这样一来便验证了半年前我写在<a href=\"https://www.zhihu.com/question/532696700/answer/2492982476\" class=\"internal\">《与神同行：提瓦特魔神综述》</a>中的对于水神魔神名的推测：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2fad27a408d1892f76ab03dee5039d36_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1061\" data-rawheight=\"482\" data-watermark=\"original\" data-original-src=\"v2-2fad27a408d1892f76ab03dee5039d36\" data-watermark-src=\"v2-19efb761e759f24c0a82cb6fc22683af\" data-private-watermark-src=\"v2-4f15b86c1c052f2469b25082cb6144fa\"></p>\n<p data-pid=\"yL0HskzX\">根据纳西妲的说法，水神芙卡洛斯并不直接管理枫丹，整个国家的运转都建立在一套关于正义的审判体系上，但她保留着影响最终判决的权利，这一现状正如水系突破宝石涤净青金中水神自己所言：「在这里人并不对神背负罪孽，能下达判决的只有法律与裁判庭」。每一场审判水神都不会缺席，然而她似乎只是沉醉于法庭上唇枪舌战剑拔弩张的氛围，契合了《足迹》PV 中戴因对于水神的评价：「正义之神热爱法庭上的一切闹剧」。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b37050512c00036e1159f75c5a317284_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-b37050512c00036e1159f75c5a317284\" data-watermark-src=\"v2-f954a1365813c1bcb82de6f510dab1f4\" data-private-watermark-src=\"v2-0849efe0b4011f09b00afe1730ac1d32\"></p>\n<p data-pid=\"iC9DBw2k\">纳西妲委婉地表示，在她眼中水神是一位「非常有个性的」神明，枫丹最高审判官那维莱特给出的评语则更直截了当，他认为水神就是个「歇斯底里的家伙」，这点从水神「渴求审判诸神」的狂妄与「他们甚至连我也可以裁判，赞美我的崇高与纯洁吧」的发言上倒确实可以看出一二。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4c72828ebe3d86e0e4adb8effdc41f32_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"189\" data-watermark=\"original\" data-original-src=\"v2-4c72828ebe3d86e0e4adb8effdc41f32\" data-watermark-src=\"v2-d1b17e223d5447d2fd90d072adc99e76\" data-private-watermark-src=\"v2-7a4639151bd1c60343a3b7ad866a9170\"></p>\n<p data-pid=\"VcIM8V7V\">接下来就要说一些有趣的猜想了。可以注意到，水神的名字「芙卡洛斯」（Focalors）相比其原型魔神「弗卡洛」（Focalor）正好多出一个字母「s」，而在英语中这个后缀通常代表名词的复数形式，所以我们是否可以认为<b>「有复数多个水神同时存在」</b>？</p>\n<p data-pid=\"yDiE-61a\">由这点出发，最容易想到的自然便是「水神是多胞胎魔神且姐妹间性格差异很大，不明真相的枫丹人民发现一日间所见到的（不同）水神行为举止完全不同，因而觉得自己的神明喜怒无常」，但是这个设定已经被稻妻雷神用过了，重复使用的概率很小。于是我们考虑另一种可能性：<b>水神其实是拥有多重人格的神明，她的不同人格差异很大且彼此充满争执，水神因为不同人格经常抢占身体的主导权造成了表面反复无常的矛盾举止，这在枫丹人看来便是神明歇斯底里。</b></p>\n<p data-pid=\"f4hcK1hx\">另外大家应该也发现了，《原神》设计七神角色时喜欢或多或少地参照隔壁《崩坏三》中的某些角色（又称「米家演员再就业计划」），例如雷电芽衣对应雷电将军、德莉莎对应纳西妲，很难不让人相信水神也会如此。那么，一位可能拥有多重人格特质的神明，究竟会对应咱们的哪位老朋友呢？答案我想各位已经呼之欲出了吧 ——</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b84b4fe2c5eae397cab631ddae89a1fd_720w.jpg?source=b1748391?rss\" data-caption=\"拥有双重人格的希儿 · 芙乐艾，表人格白希与里人格黑希性格差异极大\" data-size=\"normal\" data-rawwidth=\"3184\" data-rawheight=\"3572\" data-watermark=\"original\" data-original-src=\"v2-b84b4fe2c5eae397cab631ddae89a1fd\" data-watermark-src=\"v2-7e806b4bf5a11b7d7b5b92a23ad8c5de\" data-private-watermark-src=\"v2-8b05de4995917cf0117f3f07de10fd32\"></p>\n<p data-pid=\"-jMdVoUc\">至于为什么认为水神将参考希儿而非同样具有多重人格的维尔薇（由于维尔薇自带蒸汽朋克风格，实际上还更契合枫丹设计主题），主要是由于《原神》这个项目早在 17 年就已经立项了，有关七国七神的设计估计也是早就敲定好了草稿，而维尔薇是《崩坏三》今年才推出的角色（满打满算设计时间也不会早于去年），所以选择希儿的可能性是最大的。</p>\n<p data-pid=\"tFL6Orh8\"><b>PS7：</b>之前其实还预测了纳塔火神的魔神名叫「亚米」（Amy），即七十二柱魔神中排行第 58 位的魔神，为地狱之火的拟人化，火神形象猜测大概率参考姬子。不知道能不能再说中（笑）。</p>\n<p data-pid=\"JHBd4GgV\">当然一切还是要以最终游戏实装内容为准，我们在须弥的旅程远还未到结束，前往枫丹的时刻仍来日方长，在此之前，就对水神默默保持一份期待吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-luo-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆罗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/564069015/answer/2750333115?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">361 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/564213111?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《原神》3.2版本魔神任务第三章第五幕【虚空鼓动，劫火高扬】?</a><br><a href=\"http://www.zhihu.com/question/565457916?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《原神》 3.2 版本的主线剧情《虚空鼓动，劫火高扬》？</a><br>\n","link":"http://www.zhihu.com/question/564069015/answer/2750333115?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价 Steam 游戏《月圆之堡》？","date":"2022-11-09 04:27:45","description":"\n<p data-pid=\"QLAZzSMD\">《月圆之堡》到底讲了一个什么故事？</p>\n<p data-pid=\"69KZEXfP\">HI，大家好！我是《月圆之堡》游戏的制作者辛小啊，很高兴在这里借知乎平台分享一下这个小小作品的创作经历以及故事设定。</p>\n<p data-pid=\"s9QJQk4L\">《月圆之堡》的诞生实际上源于瞬间的灵感。是本人读书期间无意间参与Project1论坛剧情大挑战V的作品。在2021年初，因看到比赛提供的立绘以及指定素材，于是立马灵感泉涌，想要制作一个古堡新娘逃跑的恐怖向RPG游戏。于是，在燃烧灵感以及无数爆肝的夜晚之下，在参赛时间的限制之下，制作了早期参赛版本，一开始甚至出现了很夸张的BUG，但好在评委们和论坛制作者们普遍积极地反馈，以及最终获得了第二名的好成绩，加之海内外一些UP主的主动游玩和推广。本人鼓起勇气，想让这款游戏被更多的人看到。随即决定继续完善，并将这个游戏上架到steam。</p>\n<p data-pid=\"zhFCaqIK\">又经过近一年的打（tuo）磨（yan），终于在2022年的8月27日终于上架了《月圆之堡》steam版，当然，上架也只意味着开始，同时也开始不断地进行修复BUG、完善文本以及采取大家的反馈。在本人极其不擅长宣传的前提下，目前得到了游戏评测和购买者的全面好评，已经实属不易，深感荣幸和鼓舞。本着希望能被更多人看到这款小小的心血，特此还是想进一步分享一下，关于这个游戏讨论或者争议比较大的地方，就是剧情。</p>\n<p data-pid=\"JT3KXozh\"><b>以下含有关键剧情剧透，建议至少游玩一遍游戏后，再看：</b></p>\n<p data-pid=\"mUQTZYrO\">月圆之堡实际上在数百年内，大概经历了四代主人。</p>\n<p data-pid=\"oCFYNJAk\"><b>第一代主人是鲁卡斯与雪莉。</b>作为月圆之堡的建造者和创立者。他们二人是为了逃避自己既有的命运，而以富商夫妇的身份隐居于此。实际上鲁卡斯本是人类勇者身旁的魔法师，而雪莉则是精灵村落神圣的献祭者，都需要承担着极大的既有命运与责任。但他们却选择放弃或者回避这种命运，二人邀请王城的设计师索卡先生在偏僻之地设计并营建古堡，他们雇用佣人，隐居于此。月圆之堡的不幸从第一代便已经开始了，雪莉对鲁卡斯很难确定究竟是爱还是只是为了寻找一个逃避自己命运的伴侣，总是处在自责与困惑之中的雪莉在入住月圆之堡之后郁郁寡欢，积郁成疾。痴爱妻子的鲁卡斯为了缩小人类与精灵族的寿命差距，挽救雪莉的病疾，决定修炼永生之术，甚至拿古堡的动物做实验，但始终不得要领，进展缓慢。在其中，与贩卖恶魔契约化身为人类男爵卡维尔的巨眼族男子趁虚而入，一顿花言巧语之下，令鲁卡斯不惜签订契约，堕落成为血巫，误入歧途。而同时，病入膏肓，已近濒死的雪莉在将死之前，也被卡维尔所蒙骗，签订契约，被梦魇魔女所寄生，肉身已死，成为傀儡一般的人。同时，夫妇二人能力尽失，完全被卡维尔的契约控制，囚禁于月圆之堡的隐秘图书室，至此不得翻身，等待人来相救。而卡维尔也藏匿于古堡之中，伺机等待新的契约之人进入。</p>\n<p data-pid=\"hiwuzcYy\"><b>第二代主人是最后的吸血鬼贵族。</b>在这个名为海格纳地区的异世界中，吸血鬼家族惨遭勇者绞杀，已经所剩不多。本已隐居在闹市之中的以雷为代表的吸血鬼贵族男子及其兄弟姐妹收到大眼男爵的来信，建议逃入月圆之堡，将这个看起来荒废已久的地方当做住宅。由于月圆之堡的不远处有着一个名为苹果树村的小村落，同时，月圆之堡富商、建筑师在此失踪，城堡飘荡着冤魂，城堡藏着大量财宝的消息不胫而走，吸引着无数勇者和普通人来此探险。雷及家人们决定不以伤害人类性命为前提，通过诱导人类进入古堡，并尝试当做朋友的前提下，吸食鲜血维系生存。同时，也是在这一阶段，花妖艾丽莎为了求得大眼男爵是否真心爱她，而独自闯入月圆之堡，不料却被大眼男爵囚禁于此。而以雷为代表的吸血鬼族不久之后，却发现了卡维尔的秘密，他并非真心想要帮助吸血鬼贵族，而只是盯上了雷的姐姐，并以婚姻为契约，进行给恶魔的献祭仪式，以巩固自己的契约能力。当雷意识到事情的严重性时，已经为时已晚，雷的家族在月圆之堡也遭到灭顶之灾。卡维尔见雷有一手好手艺，便以留命为前提，强行签订不平等契约，使得雷以不能吸血的管家身份继续苟且于月圆之堡。随卡维尔隐匿于此。</p>\n<p data-pid=\"XtjT8qlo\"><b>第三代主人则是人类的公爵及其三个女儿。</b>由于卡维尔一直希望守株待兔，吸引更多人类到访月圆之堡，于是将月圆之堡挂牌出售。不久之后，真的吸引到了人类公爵及其三个女儿入住。卡维尔以大眼男爵的身份，再次拜访月圆之堡的新主人，并发现其中最小的女儿又丑脾气又不好，于是通过许诺与其订婚，打入月圆之堡内部。悄悄摸摸带着雷，在月圆之堡犯下种种骇人听闻的罪行。最终这家人惨死在月圆之堡，尤其是小女儿沦为冤魂，永远徘徊在古堡之中。自此以后，月圆之堡骇人听闻的故事传遍整个世界，无人再敢搬入月圆之堡。</p>\n<p data-pid=\"LyIis7sJ\">于是，卡维尔索性自己正式对外宣称月圆之堡的主人，或者说现在的第四代主人，不断在月圆之堡迎娶未成年新娘，举行可怕的仪式。而我们的游戏背景，便从月圆之夜，卡维尔正式成为月圆之堡的主人开始。</p>\n<p data-pid=\"ilcZPZfx\">关于女主的身份与性格问题。实际上，在游玩过真相线后，估计玩家们已经了解。女主是雪莉的转世，是作为雪莉所有美好的希望融于一体的转世，因此具备了极其乐观、勇敢和善良的特点，但却因为出生时是异瞳者，而被村民视为不祥之物，遭受排挤，而在快成年之时，因为村长与卡维尔的勾结，而被送往月圆之堡。但其实，真正让女主来到月圆之堡的并非村民，而是雪莉的呼唤。这也是，为何女主不仅凭借异瞳可以看到冤魂的能力，同时能感受到古堡内各种灵异事件，其中不少都是雪莉对其的提醒。只因为，在古堡被困百年之久的雪莉在梦魇魔女的影响下，早已经内心腐朽，为了痴痴地想完成自己的使命，而走向极端，而希望女主来临，并作为现实成为最好的容器，重新让其离开月圆之堡。但也正是女主所具备的美好的品质，反而最终打动的雪莉，再次感动了雪莉，让雪莉最终选择了放下。</p>\n<p data-pid=\"tY4yf_p0\">实际上，在游戏制作中，如果一开始剧情方面确实只是来自灵感乍现，缺乏一个统一的主题，但随着steam版本的推出以及更多结局和剧情的加入，我对游戏想要传达的一个核心主题越发清晰，那便是“和解与放下”。</p>\n<p data-pid=\"aLQfljCs\">例如，真相线雪莉最终被拯救与其说是女主救了她，不如说是自己与自己和解，选择了放下。鲁卡斯对雪莉的爱而不得，走向堕落，也在最后放下执念，选择超脱。即便是争议较大的卡维尔线，一方面在满足部分玩家CP期待的同时，本人也希望能探讨一个十恶不赦的坏蛋也有着鲜为人知的弱小之处，卡维尔最终的放下，不仅来自女主的拯救，也主要是自己的选择。而同伴线结局中，同样身为异能者的伊莎贝娜，最终和女主前往异世界，但却可以选择重新回归本来的世界；雷放弃吸血鬼贵族的身份，甚至接受吸血的人生，选择与女主以全新身份好好相处；安东尼看似没有放下露娜，实际上在女主的帮助之下，对自己未尽义务的和解与救赎，而花妖艾丽莎对卡维尔的不同选择处理，也是对放下与和解的另一种讨论和阐释。古堡众冤魂和一些支线中的故事，也时刻在强调这一主题。人生很多时候，都会面临许多的选择，有很多选择可能是错误或者令人后悔莫及的，但一旦发生，何不选择放下，尤其是要学会与自己和解。这或许也是作者在有限人生的体验中的一点传达。</p>\n<p data-pid=\"zS6324ta\">诚然，这一游戏由于本人技术和精力制作有限，难免存在许多不足，而且游戏越往后制作可能重心越不在恐怖与解密，而是细节RPG叙事。但它依旧是我手心的一块肉。各位玩家的建议我都有在接受和理解。尤其是每次看到素不相识的玩家给出的好评都令我感到欣慰和欣喜，能得到玩家的肯定便是游戏制作者最大的满足吧。所以，虽然作品可能没那么好，但也依旧希望能得到更多的玩家的了解和喜爱。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8d03ef0f9191b2592b00a0e9039921eb_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"324\" data-watermark=\"watermark\" data-original-src=\"v2-8d03ef0f9191b2592b00a0e9039921eb\" data-watermark-src=\"v2-34b12a3da5eb56e364bf4f3e69ba4530\" data-private-watermark-src=\"v2-c04a72de38864afe99aa49558d651d4d\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-3a122622a16bfe1f744a58f3bc290017_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"351\" data-watermark=\"watermark\" data-original-src=\"v2-3a122622a16bfe1f744a58f3bc290017\" data-watermark-src=\"v2-5d22400b3e2277d77e4cad19caadfb1a\" data-private-watermark-src=\"v2-bcf4807322a6fdbbab89ecfb1ab0807e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-790909929f6595a367039fe945c0180a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"371\" data-watermark=\"watermark\" data-original-src=\"v2-790909929f6595a367039fe945c0180a\" data-watermark-src=\"v2-f4b703f705a31828f01b53e95c9b6d54\" data-private-watermark-src=\"v2-2f97287ed8dad1b8f2678fdc3d7671e5\"></p>\n<p data-pid=\"2v1FmoiT\"><b>毕竟，一场好戏，没有观众，谁来叫好呢。</b></p>\n<p data-pid=\"RJeQ9FMl\">PS：本游戏其实还有一个彩蛋房间，里面也交代了一些游戏设定和细节。细心的玩家可以尝试发现一下，开启的小提醒是在真相线的隐秘图书馆有提示。 </p>\n<p><img src=\"https://picd.zhimg.com/v2-070264264eea29da151d35bbb8543cd1_720w.png?source=b1748391?rss\" data-caption=\"《月圆之堡》steam版彩蛋房间\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-070264264eea29da151d35bbb8543cd1\" data-watermark-src=\"v2-15d707b0204a68533e2d09e4a389f849\" data-private-watermark-src=\"v2-251f699d5c91be92e1c6e862a6925016\"></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-yu-66-44?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">辛小啊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/560110345/answer/2748831426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/387282128?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">求推荐像去月球，传说之下这样的游戏，简单一点，感动一点这种的～谢谢啦～？</a><br><a href=\"http://www.zhihu.com/question/548131300?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《堡垒之夜》联动《七龙珠》相关活动将于 8 月 17 日上线，你对此次联动都有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/560110345/answer/2748831426?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价游戏《残世界的鸢尾花》？","date":"2022-11-09 04:12:53","description":"\n<p data-pid=\"M0BPvs4M\"> 大家好！我是独立游戏开发者 2D_猫，也就是下方图片中的那只猫。《残世界的鸢尾花》是我用RPG Maker MZ开发的一款角色扮演游戏，讲述了三名素不相识的残世界幸存者结伴逃离“沃姆市”时发生的一连串故事。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-03de200287b597d25e02afa03d9ef3ab_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"180\" data-rawheight=\"180\" data-watermark=\"watermark\" data-original-src=\"v2-03de200287b597d25e02afa03d9ef3ab\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vO8og99L\">这款游戏承载了我个人的诸多情感寄托，它的基调总体是悲情的，你会在游戏中多次经历遗憾与生离死别；但游戏故事又是偶有温度的，你将目睹一条条鲜活的生命是如何在冰冷的残世界中绽放出人性的光辉。</p>\n<p data-pid=\"JwW-lwkw\">由于是剧情为核心的游戏，介绍过多难免剧透……因此，请允许我向各位分享一下做这款游戏过程中有关自己的阶段性故事。</p>\n<h3>一、无忧无虑的时期</h3>\n<p data-pid=\"Q-wNcCM2\">从小到大，我是个虽然普通，却在家人保护下生活的较为幸福的人，家人对我亦无过高的要求与期望，毕业后在家人安排下，我在家乡一家国企过上了朝九晚五的生活。</p>\n<p data-pid=\"6_OsaOpq\">直到30多岁，我都未尝人间真实疾苦，亦未曾感受过失去亲人的伤痛，这导致我在这段时期始终像个孩子一样无忧无虑。对事，我总是由着性子东搞搞西做做，从来没有对一件事情专注过；对人，我很吝啬自己的时间，以至于错过了许多与亲朋好友相处的机会。这里想万分羞愧的评价自己：那时的我就是个不懂事的巨婴。</p>\n<p><img src=\"https://picd.zhimg.com/v2-b64830ed60bfb6ce88e4c9bd1b46f7dc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-b64830ed60bfb6ce88e4c9bd1b46f7dc\" data-watermark-src=\"v2-5a47cb428ac8713350076c47eb9a6f59\" data-private-watermark-src=\"v2-3e234c7cfefce3cf2339349cada83c29\"></p>\n<h3>二、心若残世的时期</h3>\n<p data-pid=\"QdirZUD1\">在包括2018年往后的三年里，我平静安逸的生活发生了剧变：我失业了，我在家和医院间不停辗转，我接连不断的参加隔辈亲人葬礼……从未曾感受过的压力接踵而至。</p>\n<p data-pid=\"eivzyIGe\">这一切仿佛在质问我，“看看你做的事，你做成了什么？你能为自己负起责任吗？再看看你身边的人，你不感到后悔惋惜吗？你不觉得他们的遭遇与你存在某种关系吗？”，那时，类似的质问如幽灵一般整日缠绕着我，我沉沦其中，妄图逃避，目衔之处，皆若残世——这便是游戏世界为何称为“残世界”的原因。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a927443a0e61ef08dc13fcf0491d994b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-a927443a0e61ef08dc13fcf0491d994b\" data-watermark-src=\"v2-0528e62b24186bd0c25b0dd366dfce11\" data-private-watermark-src=\"v2-95623a057ffee0d93041ac834207804b\"></p>\n<h3>三、重振旗鼓的时期</h3>\n<p data-pid=\"LotgLEME\">作为一个人，你认为他持续奋斗的原始动力是什么？曾听人说过一种回答：钱、权、性。对此我不过多发表意见，在我的理解中，即使是追求这类东西，根本前提亦是尚可保全自我，这与其他的普通追求别无二致。但有一类事物，为其即使失去生命我亦无怨言——心若残世的时期，还有两件事没告诉大家：1、我结婚了；2、我有了孩子。</p>\n<p data-pid=\"havaC-Mg\">妻子是一名普普通通的教师，那时我们认识已经很多年了，她选择在我看似最无希望时嫁给了我，她鼓励我、帮助我，并始终陪伴着我直到现在。我知道她为我的现状承受了巨量的压力，有来自父母期盼的，有来自他人目光的，有来自现实压力的，还有来自未来前程的。</p>\n<p data-pid=\"fVk7-QHS\">孩子是一个女儿，如今已经3岁多了，天真无邪、活泼可爱。她的话很多，总是唠叨个不停；她对所有事物都抱有强烈的好奇心，活脱脱一个“十万个为什么”；她很爱玩，总是让我陪她做一些非常“无聊”的游戏，一遍又一遍，从不主动说结束。</p>\n<p data-pid=\"pjz9U4XM\">与她们的相处中，我决定从沉沦中走出来。是的，那个人渴望转变，那个人必须转变，那个从来未专注过一件事情的我，那个总是忽略他人感受的我，决定将这个转变在《残世界的鸢尾花》中付诸实践：</p>\n<p data-pid=\"HGQp37Ek\">在这个世界里，我始终要专注于自己的目标，我一定会排除掉任何阻碍，我必须要到达山大克鲁什港——即使荆棘满途也绝不退缩；在这个世界里，我一定要守护好身边的人，我再不许自己忽略她们的感受，我绝不能任由她们离我而去——纵使粉身碎骨也在所不惜。</p>\n<p><img src=\"https://picd.zhimg.com/v2-e97b21ef46852fc7f7511a6bd8b38e89_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-e97b21ef46852fc7f7511a6bd8b38e89\" data-watermark-src=\"v2-7bcae8078779038548e084cd189e891d\" data-private-watermark-src=\"v2-531e7755ea0d06981fad6d1b5d8c7e0b\"></p>\n<h3>四、屡战屡败的时期</h3>\n<p data-pid=\"-NldGsct\">独自开发一款游戏，哪有想象中那么简单？一开始，我天真的认为，凭自己以往对编程、美术以及音乐方面的那点了解，已足以胜任一款游戏的开发，可最终的现实啪啪打脸，这些仅凭兴趣掌握的技能，对开发游戏来说只算得上三脚猫功夫而已。以下是我开发《残世界的鸢尾花》过程中放弃过的版本。</p>\n<p data-pid=\"GFHKuV83\">1、《残世界的鸢尾花》最初版，用GameMakerStudio2开发，那时的名字叫作《我亲爱的菲亚》，主角是一个白色的玩具兔子，女主则是一名叫做菲亚的小女孩儿，当时的剧本还很不完善，与现在剧本有很多不同。这一版最后因技术原因放弃。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3d205cdc0cc781ad588052cd587d167_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-b3d205cdc0cc781ad588052cd587d167\" data-watermark-src=\"v2-355154f17a4d2f7ebe4928178e5cad26\" data-private-watermark-src=\"v2-c9c5974e14f294014921ab2696ef76a0\"></p>\n<p data-pid=\"ctziC8Th\">2、《残世界的鸢尾花》第二版，用Godot引擎开发，这一版名字叫做《Nuclinter》，即Nuclear和Winter的组合，当时的游戏剧本将故事设定在核战后的冬季，这一点与现在的残世界异同，但主角和女主的设定，以及其他大部分剧本已经与《残世界的鸢尾花》相同了。这一版准备做成带有策略元素的RPG游戏，但最终也因技术原因放弃。</p>\n<p><img src=\"https://picd.zhimg.com/v2-4cdedd735625dd8e27a5cc18d53c4afb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-4cdedd735625dd8e27a5cc18d53c4afb\" data-watermark-src=\"v2-ceb3c0aa3638c2d71c392148b1988ee5\" data-private-watermark-src=\"v2-cd593ecba6b7957fa751a2536d09f6bb\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"NJ6d9zgt\">3、《残世界的鸢尾花》第三版，用Godot引擎开发，此时的游戏名字已确定为《残世界的鸢尾花》，剧本也几乎与现在相同，而且经过不断学习，我对编程和游戏引擎使用等方面的技术有了一定提升，我懂得了先根据游戏玩法捋出需求，再根据需求搭建游戏框架，然后通过框架来实现游戏。但最终这一版还是放弃了，原因是我发现一个人绘制所有美术素材是一件类似于“有生之年”的工作，我无法负担如此庞大的工作量。</p>\n<p><img src=\"https://picd.zhimg.com/v2-e58ed097fd488e3c4a9423e79ec6b1be_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"966\" data-rawheight=\"749\" data-watermark=\"watermark\" data-original-src=\"v2-e58ed097fd488e3c4a9423e79ec6b1be\" data-watermark-src=\"v2-a04b8440ffb41107417cd69f4e4cf37b\" data-private-watermark-src=\"v2-98cb46aa14e1ec9ebb96120c2538da53\"></p>\n<h3>五、鸢尾绽放的前期</h3>\n<p data-pid=\"tYegcKGS\">以上困难困扰了我很久，但在遇见RPG Maker MZ的那一刻，这些问题都迎刃而解了。我认为，一款游戏引擎没有好坏，关键是适不适合，对于我而言，RPG Maker MZ就是最适合的那一个。</p>\n<p data-pid=\"udCTr8yy\">首先，相较于其他引擎，RPG Maker MZ的入门门槛很低，它提前为开发者提供了一套完善的RPG游戏框架，这免去了一部分编程工作，对于某些引擎所不具备的功能，可以在网上海量的插件之中进行选择。假如这样还是无法满足某些游戏需求，还可以通过较为容易学习的JavaScript语言来实现它们。</p>\n<p data-pid=\"xgdgl8eI\">其次，RPG Maker系列拥有丰富的预制资源，再加上其他数量更为庞大的免费或付费资源，这几乎满足了构建一个世界所需要的一切。现在，我无需亲自操刀所有美术或音乐资源，即使遇见了缺失资源，也可以简单通过拼接或修改的方式来创建，这极大节约了开发成本与时间！</p>\n<p data-pid=\"M7K6Krip\">最后，RPG Maker系列拥有庞大的粉丝群体和社区，你会很容易找到志同道合的伙伴，在与他们的交流过程中，自己的游戏开发知识和眼界也会有很大提升。</p>\n<p data-pid=\"EoUP6Qjm\">如此，转眼到了2022年，较为顺利的，《残世界的鸢尾花》剧情、玩法等部分的开发终于进入了尾声，并将于2022年11月14日在Steam正式发售！</p>\n<p><img src=\"https://pica.zhimg.com/v2-c8319f0dcf67feebe3383aede3906057_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"487\" data-rawheight=\"157\" data-watermark=\"watermark\" data-original-src=\"v2-c8319f0dcf67feebe3383aede3906057\" data-watermark-src=\"v2-d71b9415b0cd3d07d8fbfe683c873615\" data-private-watermark-src=\"v2-2ff5c4eb33564a6f6c0306c4c01c0a24\"></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1669330/_/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">残世界的鸢尾花Steam商店链接，诚盼加入愿望单！</a><h3>六、心愿</h3>\n<p data-pid=\"y9s1o682\">希望，借此游戏怀念逝去的过往，愿他们在众人回忆之中永存。</p>\n<p data-pid=\"6PekBzT-\">希望，以此游戏嘱咐众人——珍惜身边尚且拥有的美好，勿使生命徒增遗憾。</p>\n<p data-pid=\"QD5bpuCR\">亦希望多年后，当自己女儿了解到这款游戏时，会从中感受到家人对她最无私的爱。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f8e75862b34bafb2bf80f3226975ec71_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-f8e75862b34bafb2bf80f3226975ec71\" data-watermark-src=\"v2-7ad19e0a1fcbf36d0543cf78540c60bb\" data-private-watermark-src=\"v2-37a029a40f420333d716ce9f2385ac86\"></p>\n<h3>七、谢言</h3>\n<p data-pid=\"uMyZ-F1s\">这里想要特别感谢发行商ParasGames，感谢他们为这款游戏提供的大力帮助！包括美术（例如下图中关于3名主角脸图的优化，上旧下新）、宣传等方面的帮助就不提了，更为重要的是，在他们不断的鼓励之下，我始终是在一个充满信心和动力的状态下完成后续开发的！这也让我认识到，所谓“独立”游戏是不存在的，如果仅凭我一人，而没有包括玩家、发行方、渠道方以及家人的支持，这款游戏是不可能做到现在的！</p>\n<p><img src=\"https://picd.zhimg.com/v2-ba37a618a54420d113cca08e7163a0a5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-ba37a618a54420d113cca08e7163a0a5\" data-watermark-src=\"v2-dbc707bbb5b015073ccd2860cf6e6819\" data-private-watermark-src=\"v2-359de621e7e05d3eded121cbf4dcfe21\"></p>\n<p data-pid=\"JWf1iJ-8\">最后的最后，亲爱的玩家朋友！心中对您的感谢和期盼，纵使千言万语也难以表述，只愿《残世界的鸢尾花》最终能为您交上一份满意的答卷！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fbe957fc8d3869dd2d47aeb8fc5159b9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"586\" data-watermark=\"watermark\" data-original-src=\"v2-fbe957fc8d3869dd2d47aeb8fc5159b9\" data-watermark-src=\"v2-7fa7247c4d94b61a3f7e9cba491d98cc\" data-private-watermark-src=\"v2-9da5386fd3304a369db3434399d4ab4d\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-chi-jun?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">2D 猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/565564005/answer/2750853905?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/551508629?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《残世界的鸢尾花》怎么样？</a><br><a href=\"http://www.zhihu.com/question/445101596?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价画七的小说？</a><br>\n","link":"http://www.zhihu.com/question/565564005/answer/2750853905?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《百炼成神》动画上线，你有什么想说的？","date":"2022-11-08 12:47:58","description":"\n<p data-pid=\"zFJDcd9i\">大家好，我是优酷开挂剧场《百炼成神》的导演张帅。</p>\n<p data-pid=\"Mrxzx8i-\">近几年各大平台上线了很多动漫项目，观众对国产动漫的信心越来越足，相应地对优质动画的诉求和呼声也越来越高。身为制作团队的一员，我们非常希望这部作品能够被观众认可。</p>\n<p data-pid=\"GGoB_rbo\">所以在《百炼成神》的制作过程中，我们希望能够找到新的表达方式，将更有团队特色的视听元素呈现给观众老爷们。</p>\n<p data-pid=\"KoXVheIc\">在人物和场景的美术设定上，美术团队经过多番讨论和修改，最终将百炼定为新国风类型。在故事时代背景及社会文化环境上，融合中国古代传统文化特色的美术元素，比如鲁家机关术、道家符箓等。在国风基础上进行设计，展现并强化百炼的故事文化环境。</p>\n<p data-pid=\"MLSrZYm1\">在和编剧团队进行前期规划时，面临的最大困难应该是关于罗征的修炼和升级效果的展现上。这既是百炼这个项目的特点，也成为了我们进行动漫制作的一大挑战。</p>\n<p data-pid=\"AB23SqE-\">为了保证观众老爷们的观影体验，我们决定适量的把一些存在感较弱的境界和属性升级线进行弱化或合并。在保证原著主线不变的情况下，着重设计罗征的重要升级剧情和画面。</p>\n<p data-pid=\"EUpYhtNE\">在镜头设计上，团队力求将无形的升级过程化为有形的画面展示。尤其在展现有关罗征的“识海炼体”等剧情上进行了大胆的尝试和创新。</p>\n<p data-pid=\"p2EJ6xSJ\">例如为实现第二集中罗征得到《太上炼器法》的过程，中期动画团队为拉高观影体验，寻求画面上的宏大感，反复修改了多版才有了如今的效果。</p>\n<p data-pid=\"KqQeDopi\">有关后期方面的制作，在这次《百炼成神》制作过程中，我们采用了UE5制作。一上线，就收到了观众朋友们的热情反响，我们会继续保持并提升画质水准，给大家呈现更加满意的视听体验。</p>\n<p data-pid=\"cqiG3LTw\">现在动漫的前两集已经播出，各大平台上也有了很多关于《百炼成神》的讨论。有鼓励也有批评，我们团队在时刻关注着，并希望在用心倾听观众意见基础上，为后续的制作进行总结和完善，以此达到和观众在创作上的深度互动。</p>\n<p data-pid=\"lIPKm5Zc\">有些观众对于原作漫画中，部分角色的提前出场比较敏感。其实我们对这样的剧情改动也经历过一段“纠结时光”。我们希望在视觉化改编过程中，能够尽可能的丰满角色形象和行动线，将故事背景和角色行动建立内在联系，并在漫画的基础上进行适当补充。</p>\n<p data-pid=\"USFKLAIX\">还有观众对宁雨蝶这个角色出场就退场比较在意。这里我先卖个关子，只能告诉大家后面有惊喜。</p>\n<p data-pid=\"qdakuOqa\">观众们对后续的出场角色有一些猜测，我可以告诉大家，重要的角色一个都不会少。大家可以继续关注百炼，看看喜欢的角色有没有登场，符不符合大家心目中的预期印象！</p>\n<p data-pid=\"SqqCyeQw\">最后，感谢观众老爷们的鼓励。</p>\n<p data-pid=\"mjjBH-br\">感谢优酷平台对团队的认可和肯定，能够让我们为国漫的发展贡献一份力量。</p>\n<p data-pid=\"oq-DHSkg\">此外，我还要感谢《百炼成神》的制作团队，并以成为其中一员而自豪。激情和热爱是我们团队最重要的动力源。团队成员间相互补足，共同成长，让我觉得我们是一个整体。祝愿团队今后不断总结和创新，为观众老爷们多多提供精彩的故事。</p>\n<p data-pid=\"PbLZd31j\">谢谢大家！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shuai-shuai-59-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">帅帅</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/564367647/answer/2749988533?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/564030618?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动漫《百炼成神》有哪些值得期待的看点？</a><br><a href=\"http://www.zhihu.com/question/564620943?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动漫《百炼成神》开播，其中有哪些精彩片段值得分享？</a><br>\n","link":"http://www.zhihu.com/question/564367647/answer/2749988533?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价《明日方舟》新活动叙拉古人？","date":"2022-11-08 12:30:16","description":"\n<h2>引子：一个思考命题</h2>\n<p data-pid=\"rpBa5_gL\">本次叙拉古人活动，其实隐含了一个重要的人类哲学命题，而发现这个命题的钥匙，就在这些名为兽主的未知生命上</p>\n<p data-pid=\"EiyT7zfb\">各位，假设现在我们已然成为人类最后一人，你四周的一切都在凋零，逐渐不再适合我们居住。</p>\n<p data-pid=\"Z-X-7lPz\">你会怎么做？</p>\n<p data-pid=\"qmSnAoMj\">或者，我们不妨将话说得更加明白些：</p>\n<p data-pid=\"1B_CJCoE\">我们的文明，我们的明天，面对灭绝，如何延续？如何拯救？</p>\n<p data-pid=\"_4Kg2_4I\">叙拉古人，狼之主，还有维多利亚的狮子，龙门的大帝，甚至哥伦比亚的爽哥，许多故事的起因，也许正是解决这个问题的尝试。</p>\n<p data-pid=\"MK5HPER_\">为了活下去，这种刻入基因的本能，正在试图延续，甚至再演我们的历史。</p>\n<p data-pid=\"b388N9jm\">以此证明，我们的文明诞生，究竟是偶然，还是必然。</p>\n<h2>一、前车之鉴</h2>\n<p data-pid=\"UEKdAdyf\">这并非故弄玄虚，早在明日方舟的故事被创作之前，《风之谷》、《来自新世界》、《传颂之物》等不朽名作就开始质问观众的灵魂了。</p>\n<p data-pid=\"b_dmnDW1\">倘若人类在今日死去，我们是否有资格剥夺下一世代文明的自主权？</p>\n<p data-pid=\"pHsygPQJ\">而鹰角毫不犹豫地着手在自己的世界观中，实践这个问题。</p>\n<p data-pid=\"vLbTfXsV\">毫无疑问，复兴文明的第一步原本是物质资料与能源储备，但万能的源石设定解决了这道难关，</p>\n<p data-pid=\"946f4s8F\">让问题直接从第二步开始。</p>\n<p data-pid=\"gdrL_a4B\">像是制度，像是民族凝聚力，像是国家。</p>\n<p data-pid=\"wURWZud6\">于是乎，名为兽主的项目，悄然提上了日程。</p>\n<p data-pid=\"0QriclJX\">兽主这一概念的正式登场，源自不久前更新的水月与深蓝之树。</p>\n<p><img src=\"https://pica.zhimg.com/v2-678679e40137c190939bf89aa9becda4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"900\" data-watermark=\"watermark\" data-original-src=\"v2-678679e40137c190939bf89aa9becda4\" data-watermark-src=\"v2-f43549aa20e2d73b8060c42a5ea1412d\" data-private-watermark-src=\"v2-f4595a2f857bc77d6946c9dbf69f0aed\"></p>\n<p data-pid=\"9GgSWwHv\">自此之后，兽主的概念介绍迅速展开，维多利亚的高文，叙拉古的扎罗，现居于龙门的大帝，萨尔贡的大祭司还有哥伦比亚的鸭爵作为当前的兽主代表在剧情中开始显露真容。</p>\n<p data-pid=\"g1_qjS_E\">他们是拥有目前方舟世界观下最接近不死不灭定义的生命，他们在暗处推动了无数近代历史的变革，他们甚至疑似拥有直接操控种族同源的人类的力量，在海嗣天灾中，拿出过前代文明的技术。</p>\n<p data-pid=\"XmSSVhqz\">这种夸张的表现，足以刺激任何对世界观感兴趣的玩家，去思考，去求证，他们的意义。</p>\n<p data-pid=\"hqdedkba\">幸好，方舟的主创们，尤其是海猫，是老二次元。</p>\n<p data-pid=\"Ftexr1eB\">这意味着，我们总是能够在方舟中，找到许多经典作品的影子。</p>\n<p data-pid=\"4U1WhPRN\">今天，也不例外。</p>\n<p data-pid=\"FpPoxGML\">翻阅大量资料后，我们成功找到了最接近目前兽主职能的设定——拟蓑白。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-60b309d174ca0ebe3728aebe48f62c54_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"329\" data-rawheight=\"470\" data-watermark=\"watermark\" data-original-src=\"v2-60b309d174ca0ebe3728aebe48f62c54\" data-watermark-src=\"v2-630d9b9d7c7ecd82c2d7cc7681e54e8b\" data-private-watermark-src=\"v2-c01ae1273d313d355a178e60b6ac2a13\"></p>\n<p data-pid=\"8YIJBYJw\">拟蓑白，出自科幻小说改编的动画作品《来自新世界》，一个人类突然进化出强大超能力的世界。</p>\n<p data-pid=\"5AaUPaGF\">由于过分强大的超能力摧毁了文明存在的基础，如何保存文明成为了难题。</p>\n<p data-pid=\"gIFIBOY-\">而前人类的努力之一，就是能够自主进化的生物图书馆，也即——拟蓑白。</p>\n<p><img src=\"https://picd.zhimg.com/v2-f139b711ed6f013acdc270b343cba83f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1623\" data-rawheight=\"216\" data-watermark=\"watermark\" data-original-src=\"v2-f139b711ed6f013acdc270b343cba83f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"GKGASk1o\">拟蓑白的名字，意为模仿自然界中自然进化出的新物种——蓑白的生物特征，从而保存自身。</p>\n<p data-pid=\"iBW_ifJ5\">从功能上看，兽主完美呼应了拟蓑白的主要特征：</p>\n<p data-pid=\"hao04yaV\">（1）近乎永久的使用寿命</p>\n<p data-pid=\"kQVKiIQl\">（2）能够自主模仿当前生态环境的适应能力</p>\n<p data-pid=\"2e24Fuhh\">（3）对前代文明的资料保存功能。</p>\n<p data-pid=\"Dddo5uzS\">只不过方舟似乎在此基础上更进一步，干脆赋予兽主们不老不灭的能力，让使命的完成更加有保障。</p>\n<p data-pid=\"kPeWEegt\">而深入观察兽主迄今为止的行动，更是冥冥中体现着各自的职责。</p>\n<p data-pid=\"ENvPqQrK\">维多利亚近代历史最大的变革——德拉克与阿斯兰的王朝交替，背后明显有着兽主高文的痕迹。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6a32ab8180488db000011b759d35ee1b_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-6a32ab8180488db000011b759d35ee1b\" data-watermark-src=\"v2-4c6be67f7c29c0b0447f45bf2b569f5c\" data-private-watermark-src=\"v2-5ad3da7bae9b4a17ba7a6dbeb68ec4cf\"></p>\n<p data-pid=\"4iSR79PP\">以至于在诸王之息遗失时，他亲自陪伴推进之王拿回了宝剑，并从此守望那个女孩至今。</p>\n<p data-pid=\"iDRthM2m\">大帝，音乐文化的监视者，从古典音乐的王国莱塔尼亚到现代流行说唱艺术的新兴城市汐斯塔，音乐理念的更新，似乎是他有意识的选择。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-392ed208ba9e7488c2165742d2b2800f_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-392ed208ba9e7488c2165742d2b2800f\" data-watermark-src=\"v2-3d25e94969740f6537d997d0a995ebf8\" data-private-watermark-src=\"v2-f9501bd76b0cf7fe5bb7cc7d036c4d0e\"></p>\n<p data-pid=\"M-JfQr_Z\">叙拉古的幕后阴影，狼主们，为这个国家指定了延续至今的家族制度，将荒原上的暴力与斗争法则植入这个国家的血脉。</p>\n<p data-pid=\"TLhC-roI\">还有大祭司默默推动萨尔贡科技，鸭爵暗中操纵哥伦比亚金融市场。</p>\n<p data-pid=\"ZgJdsdAR\">他们，就是各国最深处的无形大手，将早已物是人非的世界，引导向我们现代的模样。</p>\n<p data-pid=\"0BnIHgK-\">有一个概念很适合概括这样的生命，那就是——图腾。</p>\n<p data-pid=\"UbEaqCLz\">所谓图腾，便是人类有意识地将某种自然界存在的现象或者生命，作为本族群的标志物，崇拜对象，乃至对外的民族形象代表。</p>\n<p data-pid=\"3WyV_5qx\">像是中国的龙，俄罗斯的熊，美国的鹰。</p>\n<p data-pid=\"neryX_0I\">只不过讽刺的是，这次一切因果颠倒。</p>\n<p data-pid=\"Z_m8yJ0j\">原本是人类自己选择信仰的对象，而今却变为我们的信仰来选择自己支持的人类。</p>\n<p data-pid=\"m4x6BcyY\">是指引他人生存的途径，还是剥夺他人进化走向的权力？</p>\n<p data-pid=\"JXUBqbUl\">毫无疑问，这是前代文明试图占据现今泰拉人类的傲慢行为。</p>\n<p data-pid=\"BlVTbCNC\">傲慢到控制后代的双手，来完成所谓的复兴。</p>\n<h2>二、畸形文明的批判</h2>\n<p data-pid=\"ffyvkbJp\">傲慢的兽主，催生贪婪却脆弱的文明，这样的文明往往空有被催熟的外壳，却始终缺乏富有内涵的实质。</p>\n<p data-pid=\"RCyNUZ8c\">就像是模仿曾经的北美雄鹰的哥伦比亚，原本246年的建国历史，被泰拉压缩到了自四皇之战至今最多不超过60年的时间。</p>\n<p><img src=\"https://picd.zhimg.com/v2-dbf2b4f0d1a2da1c8ad8ec701659f658_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"576\" data-watermark=\"watermark\" data-original-src=\"v2-dbf2b4f0d1a2da1c8ad8ec701659f658\" data-watermark-src=\"v2-afc0e3f245b135fceb7f6c617e660fb4\" data-private-watermark-src=\"v2-c9e7a4439744866d8201b3a0940cf01b\"></p>\n<p data-pid=\"J6vHvYI0\">高楼与科技不断地建筑，倒塌，再建筑。可到了最后，始终没有教会泰拉的人们的一个问题的答案，一个被禁锢于空壳之内的答案。</p>\n<p data-pid=\"TtKETFcR\">“如何成为一个更好的人类？”</p>\n<p><img src=\"https://picd.zhimg.com/v2-2087b6e30a51705c1733bfd5e610743c_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-2087b6e30a51705c1733bfd5e610743c\" data-watermark-src=\"v2-bbf4867ab2870416355ec893a9d5ae46\" data-private-watermark-src=\"v2-c6fa00afc674b5a6716c0fcc5302f432\"></p>\n<p data-pid=\"1oEBpjNH\">原本还算有些积淀的文化，在文先生口中变质为了纯粹拼合一切流行元素的低劣量产物。</p>\n<p data-pid=\"pSwBy7S9\">如果将这样的泰拉文明拟人化，便是过分早熟的孩子，连暴力冲动的性格都尚未控制住，便学会了大人的尔虞我诈。</p>\n<p data-pid=\"PomPAIZ7\">科技在源石的赐福下奔跑，人类的精神却愈发凝固。</p>\n<h2>三、叙拉古人——首先必须是人</h2>\n<p data-pid=\"6W8IOqtC\">叙拉古的制度设计，有个令人不寒而栗的细节，那就是所谓的兽主獠牙。</p>\n<p data-pid=\"H4SawYZs\">狼主们通过选择人类作为自己的獠牙（代言人），来决定彼此的地位尊卑。</p>\n<p data-pid=\"HlYVKihT\">这一系统，根本上是对荒原自然环境中，头狼制度的模仿，不过是将彼此之间的战斗，替换成了代言人的斗争。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a806a4e11af227d74c6588838c0f5db6_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-a806a4e11af227d74c6588838c0f5db6\" data-watermark-src=\"v2-d22fd1b3684d409fd3970431e38ea371\" data-private-watermark-src=\"v2-0ab9cb0065d614933dfd1f436e7e04ce\"></p>\n<p data-pid=\"9Fs2rrra\">可是叙拉古人不是荒原的狼群，而是社会中的人类。</p>\n<p data-pid=\"Sq5SaIgR\">若人类社会除去纯粹的弱肉强食法则便空无一物，想必我们也无法攀登上现在灵长类的王座。</p>\n<p data-pid=\"YjpcqIo8\">因此叙拉古人故事的核心便是——<b>对兽主刻意引导的批判，对“人性”的复归。</b></p>\n<p><img src=\"https://picd.zhimg.com/v2-9517acdb89a549d4cf106776926dba22_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"942\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-9517acdb89a549d4cf106776926dba22\" data-watermark-src=\"v2-bd58832e05ee29b640c65a61c02357a5\" data-private-watermark-src=\"v2-bf192121f5840edfb7292d5489deaa69\"></p>\n<p data-pid=\"7E-1vlBA\">通过年轻一代的努力争取，让家族制度这个在獠牙把控下的权力结构在叙拉古最新的城市中留出一道空白，叙拉古人才有了有史以来第一次“自由”的空隙。</p>\n<p data-pid=\"Y7tR_5TE\"><b>也即，成为了人。</b></p>\n<p data-pid=\"j54ESZcS\">当然，这次活动的剧情还有许多值得深究和品味的地方，需要我们后续继续研究，希望大家能够持续关注我们，感谢！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-dao-heng-29?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">杜兰兹移动大学</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/561890839/answer/2750073515?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">92 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/561714353?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价明日方舟Sidestory「叙拉古人」先导PV?</a><br><a href=\"http://www.zhihu.com/question/564204319?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《明日方舟》活动叙拉古人有什么玩法攻略？</a><br>\n","link":"http://www.zhihu.com/question/561890839/answer/2750073515?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在单机游戏里，有哪些暗中降低玩家通关难度的人性化设计？","date":"2022-11-08 10:25:15","description":"\n<h2>前言：关于路线引导设计</h2>\n<p data-pid=\"O4Rm5nOR\">在开放世界RPG、ACT、FPS/TPS等游戏品类中，</p>\n<p data-pid=\"TEeyyVjP\"><b>玩家对不同路线的选择，往往决定了体验差异、挑战难度、剧情走向。</b></p>\n<p data-pid=\"SoWzOQtk\"><b>而设计者对路线的设计，则集中反映出在游戏节奏把握、游戏内容调配上的智慧。</b></p>\n<p data-pid=\"c65QomML\">这篇文章尝试回答游戏设计中，关于Path Design的几个议题：</p>\n<ul>\n<li data-pid=\"wKcRYZJB\"><b>关卡设计中的路线构成。</b></li>\n<li data-pid=\"yk4s43ka\"><b>什么是好的路线设计。</b></li>\n<li data-pid=\"BSk-fJzr\"><b>游戏路线引导的种类和意义。</b></li>\n<li data-pid=\"ZyJJ43BB\"><b>如何从零开始设计丰富的路线。</b></li>\n<li data-pid=\"ydPjOBZL\"><b>视线和路线的设计关系。</b></li>\n</ul>\n<p data-pid=\"fDoIgbi_\">本文的插图部分来自游戏设计师@Tommy Norberg，</p>\n<p data-pid=\"RP6nICP9\">文字部分编译自插图注解，并进一步解释和延申，融入了笔者个人的思考。</p>\n<hr>\n<h2>Part 1 线性/非线性关卡的路线</h2>\n<p data-pid=\"ryVm8lTF\"><b>1）线性的游戏/关卡中，设计主路线。</b></p>\n<p data-pid=\"8BmgS6_3\">也就是“玩家路线”。为了行文一致，我们统称它为<b>主路线（MAIN PATH）</b>。</p>\n<p data-pid=\"e9POFzfL\"><b>2）非线性/开放世界游戏中，设计一主+多辅路线。</b></p>\n<p data-pid=\"_BjdcURD\">比较好的做法是：<b>先明确一条主路线</b>（即使大多数玩家不会选择），<b>然后再设置多条辅助路线</b>。</p>\n<p data-pid=\"jJpToHei\"><b>这可以照顾到所有玩家的游戏体验</b>，也就是让玩家都可以选择创造自己的故事。</p>\n<p><img src=\"https://picd.zhimg.com/v2-30a97801b703ee44a87a9c5d678bca7b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-30a97801b703ee44a87a9c5d678bca7b\" data-watermark-src=\"v2-27ff6c23566bb7268400ec1625187c26\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h2>Part 2 主路线的基础设计准则</h2>\n<p data-pid=\"-mtSELaq\"><b>主路线（MAIN PATH）是能够联系和整合游戏内容的地方。</b></p>\n<p data-pid=\"_T6-l8-g\">设计师最好能<b>确定一个主要的焦点区域</b>。</p>\n<p data-pid=\"qbMHrsN_\">如果布置两个或两个以上看起来同等重要的目的地，是很难让人集中注意力的。</p>\n<p data-pid=\"MmAn3S97\">比如玩家们到达下图中的城堡时，如果前后门都有着相似的高度和标志性，玩家通常无法选择游玩策略。</p>\n<p data-pid=\"pTzI8SLi\">更好的设计是：<b>突出城堡的某个入口，而让另一条路径被诸如植物之类的遮蔽起来</b>。</p>\n<p><img src=\"https://picd.zhimg.com/v2-f78a6ea5e0cc4e4e8a1a3a0e04f5f0d3_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-f78a6ea5e0cc4e4e8a1a3a0e04f5f0d3\" data-watermark-src=\"v2-a7e4ba349203d4cab638292d5a637e3b\" data-private-watermark-src=\"\"></p>\n<h2>Part 3 路线引导的种类和意义</h2>\n<h3>1）主路线MAIN PATH</h3>\n<p data-pid=\"uNqEljBU\">有时被称为“预期路线”、“关键路线”、“黄金路线”或简单地称为“玩家路线”。</p>\n<p data-pid=\"nIhzQTIQ\">以下图为例，红色的主路线是从A点到B点最明显的方法。</p>\n<p data-pid=\"2d6EYDdp\">在这条路线中，游戏设计师可以<b>把精力放在对玩家的组织和引导上</b>。</p>\n<h3>2）感知路线 PERCIEVED PATH</h3>\n<p data-pid=\"KL83GedT\">下图中的紫色路线，往往是玩家“认为”他们应该去的地方。</p>\n<p data-pid=\"fPNlBP_i\">游戏设计师可以<b>围绕这种路线，使用诱导、转换等策略，来让游戏体验更有趣</b>。</p>\n<h3>3）绕道 DETOUR</h3>\n<p data-pid=\"GzG2RHQt\">参考下图中的绿色路线，玩家走到这里意味着和游戏主要进程的脱节。</p>\n<p data-pid=\"28EBEDmk\">这些路线可能是死路（参考宫崎英高的魂和老头环），也可能是某种节点。</p>\n<p data-pid=\"48rTjXWT\"><b>要注意不把它们设计得太长，同时应该尽量在这种路径结束时，给予玩家奖励。</b></p>\n<p data-pid=\"CVR5mv71\">值得一提的是，有大事件发生的绕道不属于DETOUR范畴，它们往往被设计为支线任务。</p>\n<p data-pid=\"hP1oBF9P\">当把绕道和主路径结合时要小心，<b>它可能会带来困惑，并且让玩家不断地偏离主路线</b>。</p>\n<h3>4）愿望路线 DESIRE PATH</h3>\n<p data-pid=\"q-xRTwTX\">参考下图中的黑色路线，当玩家意识到想要去哪里时，他们就会抄近路。</p>\n<p data-pid=\"ddxp3m_f\">大多数情况下，<b>这种路线应该靠近主路线。</b></p>\n<p><img src=\"https://picd.zhimg.com/v2-7142da0d2097ebf1455e0b5a38c4f32f_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-7142da0d2097ebf1455e0b5a38c4f32f\" data-watermark-src=\"v2-ffb830df24b2550a0ce767cc0e4d6dec\" data-private-watermark-src=\"\"></p>\n<h2>Part 4 如何构建游戏路线</h2>\n<p data-pid=\"vJvUbq7y\">接下来从具体案例入手，讨论构建和完善游戏路线的步骤。</p>\n<h3>1）简单的建筑和道路</h3>\n<p data-pid=\"wTXet1CS\">一条连接在道路上的建筑，被四面的护城河包围。</p>\n<p data-pid=\"2P7L_rXT\">建筑物似乎只是掉到了地图上，没有连接到任何其他东西。</p>\n<h3>2）自然的配置</h3>\n<p data-pid=\"9YAkFAy0\">打破护城河，在建筑物的外部加入了流动的河流。</p>\n<p data-pid=\"TCdm3Exh\">略好些，但河流和道路是平行的，一切都显得死板。</p>\n<h3>3）真正的场所感</h3>\n<p data-pid=\"jgqgxBIm\">修改了河流的形状，在河流宽度和河堤植被上都做出变化。</p>\n<p data-pid=\"yF5qEnh4\">现在它就像一个真正的场所，我们得到了可以使用的部分关卡边缘。</p>\n<h3>4）丰富路径和边缘</h3>\n<p data-pid=\"EXu7st-A\">河流的形状更加收放自如，道路和河岸的关系变得具体而自然。</p>\n<p data-pid=\"VyE0mEt-\">这就是<b>一个有潜力的关卡，有众多的路径、边缘来捕捉和引导玩家</b>。</p>\n<p><img src=\"https://picd.zhimg.com/v2-c2c38a1e4c7132e7fb3e9b3b7c1f820b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-c2c38a1e4c7132e7fb3e9b3b7c1f820b\" data-watermark-src=\"v2-51322de816641d049861be0b743c367f\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<h2>Part 5 路线在关卡中的作用</h2>\n<p data-pid=\"oGUFRpBh\">围绕刚才设计的关卡局部，来认识其中的路线划分。</p>\n<p data-pid=\"RKAvn2As\"><b>1） 主路线：</b>红色实线。</p>\n<p data-pid=\"G4unpcGi\"><b>玩家阻力最小的路径。</b></p>\n<p data-pid=\"9lZc7CJg\"><b>2）第二路线：</b>红色虚线。</p>\n<p data-pid=\"XG0kqT0y\">非重点的支路，游戏设计师一般希望玩家能够走它们。</p>\n<p data-pid=\"Ii7dN0CB\">因为这些小路<b>通常是突出游戏剧情、铺开故事的好地方。</b></p>\n<p data-pid=\"Ff-7Vpmw\"><b>3）愿望路线：</b>黑色实线。</p>\n<p data-pid=\"2pO59-yA\">给玩家在环境中走捷径的空间。</p>\n<p data-pid=\"MFb1iz6V\"><b>它给人一种可以掌控的感觉</b>，毕竟玩家都喜欢掌控自己的命运。</p>\n<p data-pid=\"xjdvnd56\"><b>4）探索路线：</b>黑色虚线。</p>\n<p data-pid=\"-ZygiVkp\">给玩家能够探索的空间。</p>\n<p data-pid=\"m7piD5IH\">但是要创造一些分割空间的边缘，比如植被，道路，小溪等等。</p>\n<p data-pid=\"Hec57lWp\"><b>去让玩家捕捉能够探索的地方，并轻轻地把他们推到正确的游戏方向。</b></p>\n<p><img src=\"https://picd.zhimg.com/v2-047071a65b6195e18f220c9ced2f3e7b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-047071a65b6195e18f220c9ced2f3e7b\" data-watermark-src=\"v2-90efb8bebe70c170a5ca576e57e8d5e5\" data-private-watermark-src=\"\"></p>\n<h2>Part 6 视线和路线的关系</h2>\n<p data-pid=\"VtsDmBne\">依旧是同一个关卡，现在来看看视线关系。</p>\n<p data-pid=\"D0TVGcci\">图中的小眼睛图标意味着玩家的视线方向。</p>\n<p data-pid=\"WgITWd6Q\"><b>在开放世界中，游戏设计师应该考虑尽可能多的视线角度，并引导玩家前往这些观测点。</b></p>\n<p data-pid=\"y2CjxbAA\"><b>视线的观测点能带来信息的回报，甚至产生更有意义的游戏反馈。</b></p>\n<p data-pid=\"VWi7Dwvj\">比如玩家在探索小径树林的过程中迷路了，他们可能碰巧发现了一个绝佳的地点。</p>\n<p data-pid=\"AeWdG0HL\">而实际上，这个地点也是游戏设计师们特意进行布置的。</p>\n<p><img src=\"https://picd.zhimg.com/v2-28564e364fb4345087ba594930c0b493_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-28564e364fb4345087ba594930c0b493\" data-watermark-src=\"v2-10dd26426ce9c7f71f365cfbeeb3ea0a\" data-private-watermark-src=\"\"></p>\n<h2>Bonus：关于黄金路线</h2>\n<p data-pid=\"igbFw7as\">是否需要在游戏中，有意布置服务于速通的黄金路线呢。</p>\n<p data-pid=\"OcIz5LE9\">这时候设计师们应该讨论：从A地尽快到达B地有什么好处？</p>\n<p data-pid=\"E2YPYCZr\">在不同的情境中，这个问题的回答是不同的。</p>\n<p data-pid=\"FpYrg4B9\"><b>有时候选择黄金路线，可能会错失大量的游戏体验内容，而这些内容是游戏的乐趣所在</b>。</p>\n<p data-pid=\"1DLXWSk-\">但要时刻记着，游戏设计师的目标，是为玩家创造一个充满活力的世界，让玩家们在世界中探索和发掘热爱，并最终创造自己的玩家故事。</p>\n<p data-pid=\"qMIOIJQa\">因此，我们需要不断地学习如何设计出优秀的游戏路线。</p>\n<p data-pid=\"q_a4tW7D\"><b>正是这些路线与引导设计，串联起了游戏中的一次次惊喜和感动。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-88b1a6f8c9ee32130adfe050f9b29770_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-88b1a6f8c9ee32130adfe050f9b29770\" data-watermark-src=\"v2-aedab35e14b1692d1cac168d0cd4ba42\" data-private-watermark-src=\"\"></p>\n<h2>参考</h2>\n<p data-pid=\"793SUxI3\"><a href=\"http://link.zhihu.com/?target=https%3A//twitter.com/the_Norberg%3Fs%3D20%26t%3Dy8Xte89GdBPWBzz_yCzIOw\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">twitter.com/the_Norberg?</span><span class=\"invisible\">s=20&amp;t=y8Xte89GdBPWBzz_yCzIOw</span><span class=\"ellipsis\"></span></a></p>\n<hr>\n<p data-pid=\"cXp1iJvr\"><b>谢谢你看到最后，这里还有其他设计干货：</b></p>\n<a href=\"https://zhuanlan.zhihu.com/p/476657793\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：游戏思考：什么是好的掩体设计（cover）</a><a href=\"https://zhuanlan.zhihu.com/p/474365383\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：游戏设计集 · 详解关卡设计的平面布局（Layout）</a><a href=\"https://zhuanlan.zhihu.com/p/460785796\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：游戏设计集 · 论关卡设计的节奏（Pacing）</a><a href=\"https://zhuanlan.zhihu.com/p/457342254\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：游戏设计集 · 什么是关卡设计 &amp; 如何制作游戏关卡</a><a href=\"https://zhuanlan.zhihu.com/p/455992878\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：游戏城市设计：《赛博朋克2077》夜之城（Night City）的心理感受和分析优化</a><a href=\"https://zhuanlan.zhihu.com/p/454208131\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TokyoRed：关卡建筑学：多人对抗类游戏的10个空间布局原则</a><hr>\n<p data-pid=\"dRjWK7JX\"><b>PS：</b>以上就是本期的全部内容了~欢迎感兴趣的朋友，点赞并关注我的知乎。</p>\n<p data-pid=\"ybNEIohZ\">我会定期学习，梳理，输出 【游戏/游戏设计/游戏建筑】 相关的思考或笔记。如需转载，请私信。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/little-kong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">TokyoRed</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/67077659/answer/2748789644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">652 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/466108614?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">这个游戏你敢玩吗？</a><br><a href=\"http://www.zhihu.com/question/268205812?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么游戏让你想要忘掉你所有的技巧和攻略重新玩过？</a><br>\n","link":"http://www.zhihu.com/question/67077659/answer/2748789644?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"switch 目前有哪些值的入手的游戏?","date":"2022-11-08 10:24:34","description":"\n<h2>\n<b>1. 喷2和喷3</b> <b>的地图设计差异</b>\n</h2>\n<p data-pid=\"BMZe3F8d\">从一张日本网友（推特@R_Nikaido）的图说起，</p>\n<p data-pid=\"KmclQYp8\">喷2和喷3在多人对战上主要的区别在于：</p>\n<p data-pid=\"mHF7sGzd\"><b>1) 喷2的典型多人对战地图，是通过曲折的环线+相对分散的交战地点，构筑起战斗的节奏+区域的分割。在圈定的战场范围内，具有多个跨区域的集火点。</b></p>\n<p><img src=\"https://picd.zhimg.com/v2-14ce0327b4c06d17c5a87060993ed6d1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"394\" data-watermark=\"watermark\" data-original-src=\"v2-14ce0327b4c06d17c5a87060993ed6d1\" data-watermark-src=\"v2-ea4510e7ef10851f21974371b2e128ba\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-7233c764413bbbc8e434127b1901f842_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-7233c764413bbbc8e434127b1901f842\" data-watermark-src=\"v2-694a7d208153039f5e21ffd5cbf116dc\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"uWuhjcEw\">例如上面这张喷2的经典地图（地图在喷3中也有沿用），两方进入场地后在中场的位置形成多条进攻/防守流线，双方的进攻成员被地形切分开，同时队员往往是通过单独行动，分散在不同的高差平台上。</p>\n<p data-pid=\"FceEOVRu\"><b>2) 喷3的典型多人对战地图，则是通过清晰的直线分割长条形的战场，并形成类MOBA的多线程结构。两边玩家出生之后，有更明确的抵达战场前线的意识，中部战场自然成为集火点。</b></p>\n<p><img src=\"https://picd.zhimg.com/v2-00f91f60eda0560cbf2b1888ab92cae3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"225\" data-watermark=\"watermark\" data-original-src=\"v2-00f91f60eda0560cbf2b1888ab92cae3\" data-watermark-src=\"v2-eb57c770600fc877606aedf58363556f\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-62027fc17ba3de8be1f8e406e9a98cee_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-62027fc17ba3de8be1f8e406e9a98cee\" data-watermark-src=\"v2-4eb5b1ad5e36e6f3104d0aac2734d6cc\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XYByJ6IM\">而以这张喷3的地图为例，中场的位置汇聚了更加紧凑的团队角力，通过更加清晰的路线结构，两方成员都可以更方便地通过枪械技能的搭配在中部打出配合。</p>\n<h2><b>2. 关卡特性和三分对称设计</b></h2>\n<p data-pid=\"jGNrqpLl\">Reddit上有一张梗图，喷3和守望先锋的多人对战地图具有一定的共性：比如大量的高地、阻塞点和斜坡。</p>\n<p><img src=\"https://picd.zhimg.com/v2-f39253aa371a5e0e69c77992eae1539a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"928\" data-watermark=\"watermark\" data-original-src=\"v2-f39253aa371a5e0e69c77992eae1539a\" data-watermark-src=\"v2-7cd346c4dfbffe129daaaacec1656bf9\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"OC20DXk1\">与其说这是两个游戏的相似点，不如说这些关卡要素都是<b>高动作性、强团队配合的技能射击游戏</b>的基础。</p>\n<p data-pid=\"BZ4QbKnt\">另一个方面，由于喷3的单局体量极小，玩家需要在几分钟之间完成战局，也就不可避免地导致游戏在关卡设计深度和重复性上会做出一定的取舍。</p>\n<p data-pid=\"iZ-QEMc7\">喷2到喷3对于多人对战地图的改动，从游戏设计的角度来说，有如下特点：</p>\n<ul>\n<li data-pid=\"VIoGr_Sg\">\n<b>直观：</b>取得明显的战场压制更加直观，新手也能快速判断战场局势。</li>\n<li data-pid=\"5Bd9EixT\">\n<b>高频：</b>在前线的集火点与敌人交战的频次更加密集，战斗的乐趣更加集中。</li>\n<li data-pid=\"2sYn6UQ5\">\n<b>配合：</b>在交火时与队友的配合更加紧密，一起合作的机会增多。</li>\n</ul>\n<p data-pid=\"mG1qNvmP\">从玩家对战的角度来看，相应地玩家心理活动也会自然出现变化：</p>\n<ul>\n<li data-pid=\"NrwbxfGI\">\n<b>预测：</b>一开始就大概知道主要的交火点在哪里，需要夺取哪里的点位更有优势。初入游戏的新手玩家，也可以通过地图的规则布置快速掌握涂地的流线。</li>\n<li data-pid=\"D3jOu7xc\">\n<b>警戒：</b>由于可以潜入墨水喷涂地面的游戏特性，在涂抹地块的同时，也会对交战密集的线路和地区产生警备心，在单局3分钟的体验中维持心流。</li>\n<li data-pid=\"ymZKUfsT\">\n<b>差异：</b>对于枪法不熟练/偏好喷涂的涂地玩家而言，在已知前线对枪激烈的局势下，更容易选择后方或边角安全的位置；而对战斗偏好的玩家，也能明确更能锻炼枪法的场合。</li>\n</ul>\n<p data-pid=\"y2bcvPI1\">再来对比看更多喷3多人对战地图案例，MOBA化的地图框架十分明显，双边地图都采取了完全的对称结构。</p>\n<p data-pid=\"U2XCYtKW\">比如，典型的三分对称地图：</p>\n<p><img src=\"https://picd.zhimg.com/v2-ed65b45be8c7b6c2d9b98e211b7707f6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"524\" data-rawheight=\"585\" data-watermark=\"watermark\" data-original-src=\"v2-ed65b45be8c7b6c2d9b98e211b7707f6\" data-watermark-src=\"v2-069957ed6655f193f111ce51319b2fdc\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-2a5244f322a180874b752bd1ca06aa32_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"590\" data-watermark=\"watermark\" data-original-src=\"v2-2a5244f322a180874b752bd1ca06aa32\" data-watermark-src=\"v2-1d4aafbb4baa252b6503fbcb0abd272d\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tvr4sibs\">再比如，通过扩展两侧高差和流线结构，使地图相对更加复杂：</p>\n<p><img src=\"https://picd.zhimg.com/v2-4dedc0c2a45b4bf16da3e23cba3d0ab3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"670\" data-watermark=\"watermark\" data-original-src=\"v2-4dedc0c2a45b4bf16da3e23cba3d0ab3\" data-watermark-src=\"v2-7adf920af4d5b14d25ff91069337cf1f\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-78d676f09d1b97588ee7607d019d6392_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"670\" data-watermark=\"watermark\" data-original-src=\"v2-78d676f09d1b97588ee7607d019d6392\" data-watermark-src=\"v2-e60e01eb3edea43214370794faa85c62\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"UthArXUs\">如果仅仅是从这样的平面分析来看，喷3 的地图似乎重复度非常高。</p>\n<p data-pid=\"iM5r_X1R\">但实际从游戏体验和玩家反馈来说，看起来相似的地图实际上非常耐玩，那么任天堂是从哪些方面来消解地图的重复性呢？</p>\n<h2><b>3. 关卡体验去重复化的策略</b></h2>\n<p data-pid=\"GziNtK72\">为了使游戏体验能够超出关卡结构相似性的限制，任天堂分别使用了以下策略：</p>\n<ul>\n<li data-pid=\"Bxc_WTf0\">承载叙事，多样化的场景暗示。</li>\n<li data-pid=\"Px-6RZHz\">匹配机制，轮换进入地图的种类。</li>\n<li data-pid=\"H2mzxPXC\">武器类型，没有强制职业站位。</li>\n<li data-pid=\"cwKVf8l5\">特殊赛制，圈定玩家单场胜利目标。</li>\n</ul>\n<h3>1）承载叙事，多样化的场景暗示</h3>\n<p data-pid=\"SHhf-kwh\">喷3延续了系列的传统，在关卡设计里融入了独特世界观下自然和大都会气息。</p>\n<p data-pid=\"MJI-1wc7\">无论是市场、学校、大桥还是度假区等现实世界中常见的地点标识物，都加入了独特的叙事标志和语言符号。</p>\n<p data-pid=\"wd9qMssI\">在这些地图中对战时，玩家同时能够感知到整个游戏的世界观，同时也为这个IP未来进一步拓展内容增添了更多的可能性。比如，常见的路牌和墙面涂鸦：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ec584cde013095efb62fcaeadd508334_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"731\" data-watermark=\"watermark\" data-original-src=\"v2-ec584cde013095efb62fcaeadd508334\" data-watermark-src=\"v2-c1df8229f3c654eb83ce88728e3c25ea\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"v3uYmJZr\">比如，峡谷中的大型鱼骨：</p>\n<p><img src=\"https://picd.zhimg.com/v2-8e3b9955dc2953a901a426e338568d0e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"731\" data-watermark=\"watermark\" data-original-src=\"v2-8e3b9955dc2953a901a426e338568d0e\" data-watermark-src=\"v2-6cc4ef8f599ae4304c7bbf0ce353a700\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"brZKTsyv\">由于本作带有独立的单人战役剧情，以及PVE打工模式，不同模式通过不同的线索串联起世界观叙事。包括作为游戏舞台的基地小镇的设计，既参考了香港和日本地区城市设计，同时又融入了海鲜味十足的IP风格。</p>\n<p><img src=\"https://picd.zhimg.com/v2-6df5ee70537252dc7de5394d1ddb22e7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1302\" data-rawheight=\"732\" data-watermark=\"watermark\" data-original-src=\"v2-6df5ee70537252dc7de5394d1ddb22e7\" data-watermark-src=\"v2-a5db097c3ab2f0c344569c8f20f1451d\" data-private-watermark-src=\"\"></p>\n<h3>2）匹配机制，轮换进入地图的种类</h3>\n<p data-pid=\"JP2_8mqz\">无论是涂地模式，还是天梯赛的真格模式，喷3 每隔2小时就会重置该模式的地图。</p>\n<p><img src=\"https://picd.zhimg.com/v2-6d0f31c7617ab394b885f0a8bbc59235_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1511\" data-rawheight=\"825\" data-watermark=\"watermark\" data-original-src=\"v2-6d0f31c7617ab394b885f0a8bbc59235\" data-watermark-src=\"v2-1d1ec8e7964102e8879050bda2c4bc22\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Jo_TlsYE\">尤其是作为排位的真格模式，可以进一步细分为夺塔、丢蛤蜊、占地等不同的玩法，因此不断地轮换地图和玩法，也是促使玩家在一段时间内去摸索更多的打法的机制。</p>\n<p data-pid=\"0Hzs6ffg\">适合涂地的武器未必适合前线进攻，在一张地图上乱杀的武器不一定能在另一个地图上获得同样的战绩，因此玩家也会随着地图的变化去修正自己该时段的策略。</p>\n<p data-pid=\"ZXWRfPQU\">即使是同一张地图，在不同的模式下，也会对关卡进行一些规则和形态的调整。</p>\n<h3>3）武器类型，没有强制职业站位</h3>\n<p data-pid=\"7U3Ft2qk\">虽然有人把守望先锋和喷3 进行对比，但其实两者在职业分工上还是有明显的不同。</p>\n<p data-pid=\"8a5gTc5s\">喷3相对弱化了玩家的职业站位，而是通过<b>枪械性能+技能特效</b>强调战场配合。</p>\n<p><img src=\"https://pica.zhimg.com/v2-feaebed1e32bac62c3c5820169fc8fe2_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"827\" data-watermark=\"watermark\" data-original-src=\"v2-feaebed1e32bac62c3c5820169fc8fe2\" data-watermark-src=\"v2-9adc21307eeeb588fd4a764d471778d6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"6AUWBN9J\">上图为主要副武器技能+大招技能与不同枪械类型的对应表格。</p>\n<p data-pid=\"sn8U8cAM\">同样是强调近战和快速涂地的刷子类武器，既可能具有AOE类的大招，也可能搭配辅助类的大招，由此衍生出的策略，并不囿于某种职业（比如坦克刺客等），而是更贴合玩家的战斗喜好，同一大类的武器可能有着截然不同的打法。</p>\n<p data-pid=\"V-1RvJC_\">这种弱化职业，但是多样化武器配置，给每一场匹配都增添了不确定性，比如四把狙击枪或四把笔刷之类的场面都有可能出现。</p>\n<h3>4）特殊赛制，圈定玩家单场胜利目标</h3>\n<p data-pid=\"F5H6Nsqa\">前面有提到，排位模式中具有和涂地不同的玩法。</p>\n<p data-pid=\"1r5CEABW\">尽管这些模式在表现上看似差异很大，但它们都有<b>强目标指引+聚集玩家活动+提高战斗频率</b>的效果。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1cc047b8fbb29bc8f4107d18ca43d318_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"547\" data-watermark=\"watermark\" data-original-src=\"v2-1cc047b8fbb29bc8f4107d18ca43d318\" data-watermark-src=\"v2-8e72650783ca3c2658582cd0af930aa5\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"c4fN0jxq\">如：占地模式，提供了一个相对更容易集火的区域，两方需要反复争夺中部的控制权。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-edfaa88a3876e54b7cec70699d91ff36_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1009\" data-rawheight=\"792\" data-watermark=\"watermark\" data-original-src=\"v2-edfaa88a3876e54b7cec70699d91ff36\" data-watermark-src=\"v2-8082cc2c4822e5eece114a92ac1a2dc4\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"g7kFaGne\">夺塔模式，在塔的行进途中设置了多个点位，双方围绕塔的占有权和点位不断交战。</p>\n<p><img src=\"https://picd.zhimg.com/v2-d45861ea03c8a98cfd29ecdc2d8dd476_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"787\" data-watermark=\"watermark\" data-original-src=\"v2-d45861ea03c8a98cfd29ecdc2d8dd476\" data-watermark-src=\"v2-b74dadfef731cdbf48b231d4a68138ae\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"wzGCfr3S\">鱼虎模式和蛤蜊模式也类似，由于特殊资源和任务目标的设定，玩家需要不断进行收集或持有该资源的同时，类似球类竞技一样尽快积满得分。</p>\n<p><img src=\"https://picd.zhimg.com/v2-3aafbc70a7fda2b84686c7a2d65775b6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"991\" data-rawheight=\"786\" data-watermark=\"watermark\" data-original-src=\"v2-3aafbc70a7fda2b84686c7a2d65775b6\" data-watermark-src=\"v2-1a145cf4c81575883367d8db28f31d2d\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picd.zhimg.com/v2-a08e350a25b3cbab4114b7b641d164c5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"791\" data-watermark=\"watermark\" data-original-src=\"v2-a08e350a25b3cbab4114b7b641d164c5\" data-watermark-src=\"v2-56b3b7ca896f332cbda3e0116937c189\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KbNA3H_o\">如果说基础的涂地模式是充分体会游戏机制的乐趣，那么真格模式就是更加竞技化、更能提升玩家技术和意识的进阶赛场。</p>\n<p data-pid=\"Tv4CJcjf\">综上，虽然目前游戏地图数量不多，但是仍能通过一系列的策略让玩家充分地沉浸。再加上游戏单场比赛又都在3分钟，紧凑的快速游玩更能调动起玩家的注意力。</p>\n<p data-pid=\"4d12NeBl\">同时得益于多人对战关卡清晰的结构和路径，不同水平的玩家都可以快速地上手，并在游戏中收获足够的乐趣。</p>\n<h2><b>4. 结语：轻度射击游戏赛道的可能性</b></h2>\n<p data-pid=\"qbOakncT\">喷射战士作为任天堂2015年初次公布的年轻IP，喷3发售仅三天，就在日本破下345万份的销量纪录。而日本作为游戏产业高度成熟的市场，一方面用户对于游戏性的要求较高，另一方面现代社会的快节奏也催生了轻度玩法游戏的繁荣。</p>\n<p data-pid=\"EV_QQyWE\"><b>短平快的单局对决、易上手但有深度的游戏特性、结合动作性和趣味性的射击体验</b>，都让喷3在射击游戏的传统赛道上走出了不同的方向。</p>\n<p data-pid=\"zfNKBtm5\">“随时随地可以拿起来玩一把，专注涂地也可以取胜，就算是新手也不用担心射击精确度的问题”等评价或许也在提示我们，在线射击游戏是否可以在传统竞技、Battle royal、团队PVE之外，通过玩法本身的创意拓展新的品类赛道。</p>\n<p data-pid=\"LslPLdR9\">喷射战士系列的核心游戏创意，也就是<b>【射击喷涂区域——潜入区域回复+快速移动——根据涂墨点数释放技能】</b>这一套玩法循环，如果我们将其拆开来看，在“进行射击”这个动作上没有颠覆性的创新，而是在<b>“射击产生的效果（改变地形+移动）”</b>这一块进行了延展，这也就导致了判定胜利“规则”上的创新。</p>\n<p data-pid=\"60b3KN_7\"><b>而这个创新点，彻底重塑了玩家在射击游戏中的体验。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-03a26fd9931892901a5b87b564360989_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-03a26fd9931892901a5b87b564360989\" data-watermark-src=\"v2-2b6609c632dd1c259fccf9d2e2297481\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"kmg3yBqb\">回到本文最开始提到的喷3在多人对战关卡的设计策略，<b>类MOBA的战场结构、更清晰的战场划分和行进路线，手游化的游玩节奏，也使得游戏的门槛进一步降低，完成游戏轻度化和全年龄段的设计目标。</b></p>\n<p data-pid=\"4NIZ7bqQ\">游戏的创新不是一蹴而就的，特别是玩法赛道的创新，需要敏锐地捕捉到现有产品存在的竞争盲区，或是玩家的游玩痛点，而喷3的诞生和改良确实让人产生新的思考。</p>\n<p data-pid=\"Fzolr4vx\">套用建筑师安藤忠雄的一句话，“建筑没有终极，只有不断变革”，游戏设计亦如是。</p>\n<p data-pid=\"C1h8yFva\">谢谢你看到最后，希望这篇小文对你有所帮助。</p>\n<hr>\n<p data-pid=\"E3QNdpEM\"><b>PS：</b>定期学习，梳理，输出 【游戏/游戏设计/游戏建筑】 相关的思考或笔记，欢迎感兴趣的朋友，关注我的知乎。如需转载/想法交流，敬请私信。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/little-kong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">TokyoRed</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/64666613/answer/2724852543?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">178 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/438523188?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Switch 有什么值得入手的游戏吗？</a><br><a href=\"http://www.zhihu.com/question/59110858?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">switch上有什么值得入手的游戏。？</a><br>\n","link":"http://www.zhihu.com/question/64666613/answer/2724852543?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待经典国产单机游戏《赵云传重制版》公布，计划2023年4月上线Steam平台？","date":"2022-11-08 09:05:42","description":"\n<p data-pid=\"EDvqWYNq\">谢谢邀请，作为这款游戏的开发者，也参与答复一下。（补充一下：正式发行应该还早，现在仅仅是先公布有这款游戏在开发，在平台上占个位，进度流程都还在开展。4月不是发售而是EA测试。）</p>\n<p data-pid=\"HzLvVRER\">首先说一下为什么做这样一款游戏。</p>\n<p data-pid=\"0LKzmmHS\">很早前，我就有过一些想法，就是希望把以前做的一些游戏复活，这里面包括了《三国赵云传》、《创世西游》等等，无他：游戏研发人也是一种手艺人，当自己花了不少心血的作品因为一些原因受伤或者死掉，总希望能找到机会再打磨它，让它真正获得喜爱这款游戏的玩家的认可。</p>\n<p data-pid=\"4V-L80LD\">赵云传当时是进入游戏行业研发的第一款，研发过程中有很高的自由度，也花了很多精力。品质肯定不能说多高，但是也算是那个程度上，自己全力以赴的，再高就超出了自己和团队当时的能力。</p>\n<p data-pid=\"5VUj-Gvr\">我们也没法要求自己当时就能超越暴雪，超过仙剑，无论是外在还是自身思维结构、积累都没法解决的。当时我是觉得只要用心再用心、加班努力再努力、多好好想想，一定可以做好的。但后来发生的一些事情，最后公司没有继续发展下去，令人遗憾。</p>\n<p data-pid=\"S7dLvRQr\">遗憾不在于个人的得失，而在于感觉那个事业其实可以做得更长远，可以做到积累。我一直有很深的感触，同时期的国外的研发商，暴雪可以过得很好，可以不断进化，做出更优质的游戏。国外3A大作不断积累向上，和我们的差距越来越大。虽然这两年有黑悟空横空出世，能够贴近世界一线3A的预期，但那毕竟是极少数，但这也已经是非常来之不易，值得大家去宽待和呵护。而我在国内研发的经历，可以用一个词形容就是：没有积累。或者说，做国产游戏，一个团队非常难有积累。</p>\n<p data-pid=\"niWIVN7r\">项目不成？团队解散！这是很长时间游戏行业的惯例。</p>\n<p data-pid=\"Q-wcuvwj\">所以，每次好不容易打下的一点研发底子，一旦一个项目不成，就全部推倒，难以积累。</p>\n<p data-pid=\"rFzE-HPU\">2003年我去网易做《创世西游》也是，作为项目负责人，亲手从零开始搭建起这个游戏，穷尽心思，想办法做好，但上线前因为网易内部一些问题，选择出去创业。《创世西游》运营一段时间后结束了，团队被打散，美术资源被分解到一些部门项目。自己的亲手创造的生命被扼杀了，却无能为力。</p>\n<p data-pid=\"sNCh6kX2\">当时网易老大说了一句很现实的话：“成王败寇”，他一样在经受折磨和煎熬，好在他离开网易后，在新的平台重新崛起。</p>\n<p data-pid=\"LOuIoqf2\">这些项目没能获得一般意义上的成功，我也没有机会去拯救它们。但我看到了当时设计的一些东西，被许多玩家珍视、喜爱、并呼唤回归。</p>\n<p data-pid=\"F_CztKPj\">一般读者可能没什么感觉，因为和自己无关痛痒。但作为创作者，当看到这些玩家意见的时候，只要是个手艺人，都会有一种遇到知音的感觉，这种声音令我们不至于完全绝望，在经受痛苦和挫败的时候，还能继续前进。</p>\n<p data-pid=\"WI-fIm5g\">伯牙鼓琴，锺子期听之。方鼓琴而志在太山，锺子期曰：“善哉乎鼓琴，巍巍乎若太山。”少选之间而志在流水，锺子期又曰：“善哉乎鼓琴，汤汤乎若流水。”锺子期死，伯牙破琴绝弦，终身不复鼓琴，以为世无足复为鼓琴者。</p>\n<p data-pid=\"RsNGsFjf\">我做个游戏，当然也不敢自居高尚到伯牙子期，但心态是相通的：如果没有玩家肯定和支持的声音，我也不会继续做这些事情，逃离北上广，回乡下种田好了。</p>\n<p data-pid=\"S4v9QGhs\">2019年疫情刚起来那阵子，我正好在湖北老家，被封锁了3个多月，那是我入行以来休的最长的假。车辆喧嚣的马路上彻底安静，抬眼可以望到天际的国道尽头，两边是高耸入云的大树，腰身刷着石灰，柏油马路上铺着厚厚的树叶，一辆车都没有。我在一望无际的油菜花地里走了很久很久，路上几乎遇不到人，只有蜜蜂的嗡嗡声，还有几只幼稚的中华土狗，晃晃悠悠的爬过来，朝我奶声奶气的吠叫，激动得乱摇尾巴。田埂两边是飘柔的黄白色芦苇，深绿色的水，长满了菖蒲。天空是蔚蓝的，飘着几朵柔和的白云，一直在加班加点，我从未找到如此的寂寞和宁静。那一刻，我感觉自己向上空祈愿疫情过去，天下安宁的愿望被传递出去了。我曾经想过，如果游戏做不好，那应当就是我不具备这样的能力和机缘，那就安安静静的去度过人生就好。</p>\n<p data-pid=\"nxo38eKM\">页游曾经很赚钱，页转手也是，但氪金的游戏，是另一个领域，我们这些做单机和端游的，根本不擅长。</p>\n<p data-pid=\"Evs2DKaK\">2021年，有朋友和我聊到了《三国赵云传》，他们觉得现在单机市场虽然要求非常高，但是市场和以前有了很大变化，现在的玩家愿意为正版付钱，而且破解平台也基本都有一些理念，不做国产破解。如果能够再出一款，有一定品质，如果能获得用户认可，弥补之前的遗憾，还是会有机会的。</p>\n<p data-pid=\"xE4HWPTF\">但我也清楚，这个年头，游戏行业已经发生了巨大变化。现在魂系、GTA、老头环，怪猎、巫师、大镖客，全战、骑砍、2077、鬼泣、仁王、卧龙，全是大制作。国产单机薄弱太久了，积贫积弱，我们能拿到的资源和支持，也根本没法和人相比。随便凑合一下，换下美术，骗情怀赚一波？感觉没太大意思。</p>\n<p data-pid=\"11iSux3u\">我就想，我要在自己获得的资源范围内，尽最大努力来解决问题。</p>\n<p data-pid=\"CSPDF2qY\">只有这么多预算的情况下，时间有限，人才也有限，我们能够依靠什么来突破？</p>\n<p data-pid=\"AFfl1pq7\">我不想说全新组建一个游戏研发团队过程的艰辛，但成本是逃不了的问题。我见过几个卖房借钱继续做游戏的，全都被打到地底下，无法翻身。所以，资金问题是必然的、关乎生死和优化空间的限制性问题。</p>\n<p data-pid=\"SMeK0C7F\">我们可以用情怀说服一些人降低一些薪酬标准来加入研发，但除了我和吴竞，实际上对团队成员，我们并没有这么做，毕竟大家都要生活，都要发展。我们在许多岗位也启用了新人。愿意努力的，即使能力差一些，也继续包容，给他们机会。好在大家都非常给力，新人学习成长很快，随着研发期的开展，团队做出的效果也有了看得到的进步。</p>\n<p data-pid=\"2IALKgZe\">我们补了策划的短板，几经周折，确定了系统策划，反反复复，定下了文案策划。</p>\n<p data-pid=\"sPzymNdk\">我们解决了技术的短板，中途遇到了问题，又再次花费精力到处物色，解决。</p>\n<p data-pid=\"yYjKH9Ra\">我们解决了场景原画的短板，总算场景设计出来像样了。</p>\n<p data-pid=\"SIaA9cjY\">我们解决了角色原画的短板，一样是多次挫折，目前至少走上了正轨。至于目前的立绘，可以先不看，那些基本算过渡草稿。</p>\n<p data-pid=\"f1lDCPxc\">我们解决了角色模型的问题，费了九牛二虎之力，算是搭建成功了动作和特效团队。</p>\n<p data-pid=\"sYE_OlIh\">我们解决了场景制作的问题，这个问题耗了我们4个月，前面的效果一直处于崩溃的边缘。</p>\n<p data-pid=\"3w8OacD9\">费了很大努力，才把团队搭建起来，但这些问题都是研发必经之路，都是要沉着冷静，持续要解决的问题。</p>\n<p data-pid=\"iVYfIdpu\">最大的问题是竞争问题：你凭什么要玩家买单？</p>\n<p data-pid=\"D4crHy0t\">中国的单机玩家，口味几乎是和世界一致的，因为游戏可以通过各种途径，第一时间展现在玩家面前。这个实际上也不可能做市场保护，你不可能通过控制供应，降低用户的审美和体验水准，来扶持国产，只能在开放中，找准扶持发力点。</p>\n<p data-pid=\"JR7fXQ21\">一年这么多游戏，那么多大作，你就这点资源，你凭什么？</p>\n<p data-pid=\"CHGFLqy7\">所以我们在尝试琢磨一些不一样的东西，或者说自己的竞争力。</p>\n<p data-pid=\"VJ_HmJH6\">拼画面，我们肯定拼不过3A，也拼不过暗黑4。但是市场上，也不完全是依靠画面。在画面不拉胯的前提下，拼内容和体验。</p>\n<p data-pid=\"eajOLTbg\">赵云传，首先是主角就是脍炙人口的，赵子龙的英勇无畏的形象，已经千百年深刻的烙印在人们心中。我们需要抓住人物的性格，成长，通过故事剧情，让玩家体验到英雄成长的故事，体会到在各种艰难时刻，面临的挑战、抉择。</p>\n<p data-pid=\"lNx5z7P9\">其次，三国战争+角色扮演类的游戏，大有可为。无论是战场的展现、排兵打仗、实战技能，还是马战、伙伴参战、能力养成等，都有大量可玩的空间，有许多之前游戏体会不到的新鲜感。</p>\n<p data-pid=\"1jtr-ZEl\">但这些都需要时间。当我们的资源和精力还在解决基础问题，诸如基础系统、战斗调优、基本养成、主线剧情、性能优化、团队搭建、团队能力提升等等问题时，我们只能算是完成了第一步，后续还需要一步一步稳稳的走下去，之后才是核心精髓玩法的展现。</p>\n<p data-pid=\"8O2ylG3G\">此外，到了后期，音乐、战斗音效、UI音效、演员配音等等，每一项都是用心才能出彩的，也需要对应专业合作伙伴一样的全身心投入。人的体验是敏锐的，任何一个环节失真，都会让玩家感觉到出戏。所以每个环节都需要反复修改打磨。</p>\n<p data-pid=\"-zScSTCd\">即便如此，我一样不敢保证说自己能做得很好，只能说，这是在当前发展阶段，我们力所能及能呈现出的最好的东西。</p>\n<p data-pid=\"2yF2hFAd\">全世界都在快速进步，国产单机已经落伍很久。我们踩了一辆小车尽力在追逐高速列车，驾驶员，车辆都有很大差距。资源、规模、精度、玩法设定、美术设定、世界氛围，思想内涵，较真起来很多东西确实相差太大。有时候连我自己都觉得，咱们这些国产游戏，和世界行列相比，差距怎么会拉得这么大？</p>\n<p data-pid=\"GX4grBWl\">——但是，国产单机真的应该死透吗？我相信未必。鄙视国产的人，鄙视的是那些在行业浑水摸鱼，用粗制劣造收割玩家信任的劣币。</p>\n<p data-pid=\"cLUAw-_L\">我不相信未来我国不需要单机游戏研发。游戏行业发展，在未来必然有特殊的战略意义，只是当前还不明显而已。全部靠买买买就可以？全世界去投资入股只是一个方法，今天不去追，以后再追的差距只会更大。</p>\n<p data-pid=\"TzP0WBuk\">随着反复的打磨，产品的逐渐成型和提升，我也越来越相信，赵云传重制版一定可以做好，而且也期望团队能持续前进，不断提升进化，持续做出更优秀的内容。让这个团队和玩家形成良性互动。</p>\n<p data-pid=\"c7_g2ym4\">我们今天在做这个事，先不管成绩能做多大，也给一些研发人员传递了理念，告诉他们要追求品质，要不断拔高自我，要有真正做游戏的精神。</p>\n<p data-pid=\"rR6hjdPI\">当年的赵云传、创世西游，不断有优秀的人成长起来，做出了优秀的项目，为大众提供了不错的娱乐服务，这也未尝不是给行业传递了未来发展的希望。</p>\n<p data-pid=\"771Nxzpk\">要做好游戏，必然要重视玩家的想法。我们也专门建立了这款游戏的QQ群，提供给玩家一个交流的场所，发行的小伙伴们也在不断收集整理大家的宝贵意见。</p>\n<p data-pid=\"z6-9LZ5u\">是的，游戏还在研发期，还有很多问题做得不够好，但是玩家们是善意，理解和支持的，讨论非常热烈，不断在出谋划策，提出好的创意，这一点对我们来说非常重要～虽然赶工很忙，但研发组的小伙伴们时常潜伏进群，仔细的查看玩家们的每一条讨论意见。</p>\n<p data-pid=\"II9qFwDV\">我不确定知乎上是否能贴出QQ群号，有兴趣的朋友也可以去Steam的游戏页面找到。</p>\n<p data-pid=\"Zy5bArYl\">没有必要自我感动，用心做好自己的事情就是最好的奖励（但自我感动也没错，做游戏的，特别是单机游戏，还真得要有点）。善意和纯净的社会，会带来更好的结果。这个敏感行业的发展，本身就需要商家与客户，这不是依靠哪一方能解决的问题。相信多方的努力，能够带来一个行业的好的崛起。</p>\n<p data-pid=\"YSbiXRZk\">——————————</p>\n<p data-pid=\"zutS0iB8\">说个事，话说我最近在搜寻汉代或三国时期的民间艺术，特别是歌谣曲子，舞蹈什么的，可以不限于河北常山正定，两汉三国都可以，打算在游戏中适当体现，表现一下赵云当时的人文历史，这块哪位有了解吗？还请多多指点。</p>\n<p data-pid=\"qk0YljhC\">我们最近能搜到的河北民间艺术，比如河北梆子，探清水河小调，小放牛等等，效果是挺好的，但是年代不够。探清水河非常好听，好像是清末的，就更不合适。</p>\n<p data-pid=\"64FRsn6c\">————————</p>\n<p data-pid=\"LOBA9G4-\">此外，最近在考虑选择合适的配音方，适合出演赵云（坚定正直果敢青年）、伙伴夏侯兰（青年才俊文雅）、马云禄（女性年轻爽快正直）、公孙月（女性贵族年轻婉约寂寥）、樊娟（少女青春活泼烂漫）等。以及其他常见的三国角色。小伙伴们有谁比较熟悉这一块的，也欢迎推荐自荐。</p>\n<p data-pid=\"W0jbBsUi\">有其他相关建议，也欢迎反馈～</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/formacat?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">formacat</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/564615106/answer/2748130888?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">101 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/564611693?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《赵云传重制版》现已上线 Steam 页面，此款游戏都有哪些玩点？</a><br><a href=\"http://www.zhihu.com/question/564606738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">单机 ARPG 《赵云传重制版》将于 2023 年 4 月发售，你对此款游戏都有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/564615106/answer/2748130888?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]